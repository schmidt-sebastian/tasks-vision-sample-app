{"version":3,"file":"bundle.js","sources":["../node_modules/tslib/tslib.es6.js","../node_modules/google-protobuf/google-protobuf.js","../node_modules/google-protobuf/google/protobuf/any_pb.js","../node_modules/@mediapipe/tasks-vision/vision_bundle.js","../index.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","/*\n\n Copyright The Closure Library Authors.\n SPDX-License-Identifier: Apache-2.0\n*/\nvar $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.findInternal=function(a,b,c){a instanceof String&&(a=String(a));for(var d=a.length,e=0;e<d;e++){var f=a[e];if(b.call(c,f,e,a))return{i:e,v:f}}return{i:-1,v:void 0}};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.SIMPLE_FROUND_POLYFILL=!1;\n$jscomp.defineProperty=$jscomp.ASSUME_ES5||\"function\"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};$jscomp.getGlobal=function(a){return\"undefined\"!=typeof window&&window===a?a:\"undefined\"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);\n$jscomp.polyfill=function(a,b,c,d){if(b){c=$jscomp.global;a=a.split(\".\");for(d=0;d<a.length-1;d++){var e=a[d];e in c||(c[e]={});c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&$jscomp.defineProperty(c,a,{configurable:!0,writable:!0,value:b})}};$jscomp.polyfill(\"Array.prototype.findIndex\",function(a){return a?a:function(a,c){return $jscomp.findInternal(this,a,c).i}},\"es6\",\"es3\");\n$jscomp.checkStringArgs=function(a,b,c){if(null==a)throw new TypeError(\"The 'this' value for String.prototype.\"+c+\" must not be null or undefined\");if(b instanceof RegExp)throw new TypeError(\"First argument to String.prototype.\"+c+\" must not be a regular expression\");return a+\"\"};\n$jscomp.polyfill(\"String.prototype.endsWith\",function(a){return a?a:function(a,c){var b=$jscomp.checkStringArgs(this,a,\"endsWith\");a+=\"\";void 0===c&&(c=b.length);c=Math.max(0,Math.min(c|0,b.length));for(var e=a.length;0<e&&0<c;)if(b[--c]!=a[--e])return!1;return 0>=e}},\"es6\",\"es3\");$jscomp.polyfill(\"Array.prototype.find\",function(a){return a?a:function(a,c){return $jscomp.findInternal(this,a,c).v}},\"es6\",\"es3\");\n$jscomp.polyfill(\"String.prototype.startsWith\",function(a){return a?a:function(a,c){var b=$jscomp.checkStringArgs(this,a,\"startsWith\");a+=\"\";var e=b.length,f=a.length;c=Math.max(0,Math.min(c|0,b.length));for(var g=0;g<f&&c<e;)if(b[c++]!=a[g++])return!1;return g>=f}},\"es6\",\"es3\");\n$jscomp.polyfill(\"String.prototype.repeat\",function(a){return a?a:function(a){var b=$jscomp.checkStringArgs(this,null,\"repeat\");if(0>a||1342177279<a)throw new RangeError(\"Invalid count value\");a|=0;for(var d=\"\";a;)if(a&1&&(d+=b),a>>>=1)b+=b;return d}},\"es6\",\"es3\");var COMPILED=!0,goog=goog||{};goog.global=this||self;\ngoog.exportPath_=function(a,b,c){a=a.split(\".\");c=c||goog.global;a[0]in c||\"undefined\"==typeof c.execScript||c.execScript(\"var \"+a[0]);for(var d;a.length&&(d=a.shift());)a.length||void 0===b?c=c[d]&&c[d]!==Object.prototype[d]?c[d]:c[d]={}:c[d]=b};\ngoog.define=function(a,b){if(!COMPILED){var c=goog.global.CLOSURE_UNCOMPILED_DEFINES,d=goog.global.CLOSURE_DEFINES;c&&void 0===c.nodeType&&Object.prototype.hasOwnProperty.call(c,a)?b=c[a]:d&&void 0===d.nodeType&&Object.prototype.hasOwnProperty.call(d,a)&&(b=d[a])}return b};goog.FEATURESET_YEAR=2012;goog.DEBUG=!0;goog.LOCALE=\"en\";goog.TRUSTED_SITE=!0;goog.STRICT_MODE_COMPATIBLE=!1;goog.DISALLOW_TEST_ONLY_CODE=COMPILED&&!goog.DEBUG;goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING=!1;\ngoog.provide=function(a){if(goog.isInModuleLoader_())throw Error(\"goog.provide cannot be used within a module.\");if(!COMPILED&&goog.isProvided_(a))throw Error('Namespace \"'+a+'\" already declared.');goog.constructNamespace_(a)};goog.constructNamespace_=function(a,b){if(!COMPILED){delete goog.implicitNamespaces_[a];for(var c=a;(c=c.substring(0,c.lastIndexOf(\".\")))&&!goog.getObjectByName(c);)goog.implicitNamespaces_[c]=!0}goog.exportPath_(a,b)};\ngoog.getScriptNonce=function(a){if(a&&a!=goog.global)return goog.getScriptNonce_(a.document);null===goog.cspNonce_&&(goog.cspNonce_=goog.getScriptNonce_(goog.global.document));return goog.cspNonce_};goog.NONCE_PATTERN_=/^[\\w+/_-]+[=]{0,2}$/;goog.cspNonce_=null;goog.getScriptNonce_=function(a){return(a=a.querySelector&&a.querySelector(\"script[nonce]\"))&&(a=a.nonce||a.getAttribute(\"nonce\"))&&goog.NONCE_PATTERN_.test(a)?a:\"\"};goog.VALID_MODULE_RE_=/^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\ngoog.module=function(a){if(\"string\"!==typeof a||!a||-1==a.search(goog.VALID_MODULE_RE_))throw Error(\"Invalid module identifier\");if(!goog.isInGoogModuleLoader_())throw Error(\"Module \"+a+\" has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.\");\nif(goog.moduleLoaderState_.moduleName)throw Error(\"goog.module may only be called once per module.\");goog.moduleLoaderState_.moduleName=a;if(!COMPILED){if(goog.isProvided_(a))throw Error('Namespace \"'+a+'\" already declared.');delete goog.implicitNamespaces_[a]}};goog.module.get=function(a){return goog.module.getInternal_(a)};\ngoog.module.getInternal_=function(a){if(!COMPILED){if(a in goog.loadedModules_)return goog.loadedModules_[a].exports;if(!goog.implicitNamespaces_[a])return a=goog.getObjectByName(a),null!=a?a:null}return null};goog.ModuleType={ES6:\"es6\",GOOG:\"goog\"};goog.moduleLoaderState_=null;goog.isInModuleLoader_=function(){return goog.isInGoogModuleLoader_()||goog.isInEs6ModuleLoader_()};goog.isInGoogModuleLoader_=function(){return!!goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.GOOG};\ngoog.isInEs6ModuleLoader_=function(){if(goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.ES6)return!0;var a=goog.global.$jscomp;return a?\"function\"!=typeof a.getCurrentModulePath?!1:!!a.getCurrentModulePath():!1};\ngoog.module.declareLegacyNamespace=function(){if(!COMPILED&&!goog.isInGoogModuleLoader_())throw Error(\"goog.module.declareLegacyNamespace must be called from within a goog.module\");if(!COMPILED&&!goog.moduleLoaderState_.moduleName)throw Error(\"goog.module must be called prior to goog.module.declareLegacyNamespace.\");goog.moduleLoaderState_.declareLegacyNamespace=!0};\ngoog.declareModuleId=function(a){if(!COMPILED){if(!goog.isInEs6ModuleLoader_())throw Error(\"goog.declareModuleId may only be called from within an ES6 module\");if(goog.moduleLoaderState_&&goog.moduleLoaderState_.moduleName)throw Error(\"goog.declareModuleId may only be called once per module.\");if(a in goog.loadedModules_)throw Error('Module with namespace \"'+a+'\" already exists.');}if(goog.moduleLoaderState_)goog.moduleLoaderState_.moduleName=a;else{var b=goog.global.$jscomp;if(!b||\"function\"!=typeof b.getCurrentModulePath)throw Error('Module with namespace \"'+\na+'\" has been loaded incorrectly.');b=b.require(b.getCurrentModulePath());goog.loadedModules_[a]={exports:b,type:goog.ModuleType.ES6,moduleId:a}}};goog.setTestOnly=function(a){if(goog.DISALLOW_TEST_ONLY_CODE)throw a=a||\"\",Error(\"Importing test-only code into non-debug environment\"+(a?\": \"+a:\".\"));};goog.forwardDeclare=function(a){};COMPILED||(goog.isProvided_=function(a){return a in goog.loadedModules_||!goog.implicitNamespaces_[a]&&null!=goog.getObjectByName(a)},goog.implicitNamespaces_={\"goog.module\":!0});\ngoog.getObjectByName=function(a,b){a=a.split(\".\");b=b||goog.global;for(var c=0;c<a.length;c++)if(b=b[a[c]],null==b)return null;return b};goog.globalize=function(a,b){b=b||goog.global;for(var c in a)b[c]=a[c]};goog.addDependency=function(a,b,c,d){!COMPILED&&goog.DEPENDENCIES_ENABLED&&goog.debugLoader_.addDependency(a,b,c,d)};goog.ENABLE_DEBUG_LOADER=!0;goog.logToConsole_=function(a){goog.global.console&&goog.global.console.error(a)};\ngoog.require=function(a){if(!COMPILED){goog.ENABLE_DEBUG_LOADER&&goog.debugLoader_.requested(a);if(goog.isProvided_(a)){if(goog.isInModuleLoader_())return goog.module.getInternal_(a)}else if(goog.ENABLE_DEBUG_LOADER){var b=goog.moduleLoaderState_;goog.moduleLoaderState_=null;try{goog.debugLoader_.load_(a)}finally{goog.moduleLoaderState_=b}}return null}};goog.requireType=function(a){return{}};goog.basePath=\"\";goog.nullFunction=function(){};\ngoog.abstractMethod=function(){throw Error(\"unimplemented abstract method\");};goog.addSingletonGetter=function(a){a.instance_=void 0;a.getInstance=function(){if(a.instance_)return a.instance_;goog.DEBUG&&(goog.instantiatedSingletons_[goog.instantiatedSingletons_.length]=a);return a.instance_=new a}};goog.instantiatedSingletons_=[];goog.LOAD_MODULE_USING_EVAL=!0;goog.SEAL_MODULE_EXPORTS=goog.DEBUG;goog.loadedModules_={};goog.DEPENDENCIES_ENABLED=!COMPILED&&goog.ENABLE_DEBUG_LOADER;goog.TRANSPILE=\"detect\";\ngoog.ASSUME_ES_MODULES_TRANSPILED=!1;goog.TRANSPILE_TO_LANGUAGE=\"\";goog.TRANSPILER=\"transpile.js\";goog.hasBadLetScoping=null;goog.useSafari10Workaround=function(){if(null==goog.hasBadLetScoping){try{var a=!eval('\"use strict\";let x = 1; function f() { return typeof x; };f() == \"number\";')}catch(b){a=!1}goog.hasBadLetScoping=a}return goog.hasBadLetScoping};goog.workaroundSafari10EvalBug=function(a){return\"(function(){\"+a+\"\\n;})();\\n\"};\ngoog.loadModule=function(a){var b=goog.moduleLoaderState_;try{goog.moduleLoaderState_={moduleName:\"\",declareLegacyNamespace:!1,type:goog.ModuleType.GOOG};if(goog.isFunction(a))var c=a.call(void 0,{});else if(\"string\"===typeof a)goog.useSafari10Workaround()&&(a=goog.workaroundSafari10EvalBug(a)),c=goog.loadModuleFromSource_.call(void 0,a);else throw Error(\"Invalid module definition\");var d=goog.moduleLoaderState_.moduleName;if(\"string\"===typeof d&&d)goog.moduleLoaderState_.declareLegacyNamespace?goog.constructNamespace_(d,\nc):goog.SEAL_MODULE_EXPORTS&&Object.seal&&\"object\"==typeof c&&null!=c&&Object.seal(c),goog.loadedModules_[d]={exports:c,type:goog.ModuleType.GOOG,moduleId:goog.moduleLoaderState_.moduleName};else throw Error('Invalid module name \"'+d+'\"');}finally{goog.moduleLoaderState_=b}};goog.loadModuleFromSource_=function(a){eval(a);return{}};goog.normalizePath_=function(a){a=a.split(\"/\");for(var b=0;b<a.length;)\".\"==a[b]?a.splice(b,1):b&&\"..\"==a[b]&&a[b-1]&&\"..\"!=a[b-1]?a.splice(--b,2):b++;return a.join(\"/\")};\ngoog.loadFileSync_=function(a){if(goog.global.CLOSURE_LOAD_FILE_SYNC)return goog.global.CLOSURE_LOAD_FILE_SYNC(a);try{var b=new goog.global.XMLHttpRequest;b.open(\"get\",a,!1);b.send();return 0==b.status||200==b.status?b.responseText:null}catch(c){return null}};\ngoog.transpile_=function(a,b,c){var d=goog.global.$jscomp;d||(goog.global.$jscomp=d={});var e=d.transpile;if(!e){var f=goog.basePath+goog.TRANSPILER,g=goog.loadFileSync_(f);if(g){(function(){(0,eval)(g+\"\\n//# sourceURL=\"+f)}).call(goog.global);if(goog.global.$gwtExport&&goog.global.$gwtExport.$jscomp&&!goog.global.$gwtExport.$jscomp.transpile)throw Error('The transpiler did not properly export the \"transpile\" method. $gwtExport: '+JSON.stringify(goog.global.$gwtExport));goog.global.$jscomp.transpile=\ngoog.global.$gwtExport.$jscomp.transpile;d=goog.global.$jscomp;e=d.transpile}}e||(e=d.transpile=function(a,b){goog.logToConsole_(b+\" requires transpilation but no transpiler was found.\");return a});return e(a,b,c)};\ngoog.typeOf=function(a){var b=typeof a;if(\"object\"==b)if(a){if(a instanceof Array)return\"array\";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if(\"[object Window]\"==c)return\"object\";if(\"[object Array]\"==c||\"number\"==typeof a.length&&\"undefined\"!=typeof a.splice&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"splice\"))return\"array\";if(\"[object Function]\"==c||\"undefined\"!=typeof a.call&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"call\"))return\"function\"}else return\"null\";\nelse if(\"function\"==b&&\"undefined\"==typeof a.call)return\"object\";return b};goog.isArray=function(a){return\"array\"==goog.typeOf(a)};goog.isArrayLike=function(a){var b=goog.typeOf(a);return\"array\"==b||\"object\"==b&&\"number\"==typeof a.length};goog.isDateLike=function(a){return goog.isObject(a)&&\"function\"==typeof a.getFullYear};goog.isFunction=function(a){return\"function\"==goog.typeOf(a)};goog.isObject=function(a){var b=typeof a;return\"object\"==b&&null!=a||\"function\"==b};\ngoog.getUid=function(a){return Object.prototype.hasOwnProperty.call(a,goog.UID_PROPERTY_)&&a[goog.UID_PROPERTY_]||(a[goog.UID_PROPERTY_]=++goog.uidCounter_)};goog.hasUid=function(a){return!!a[goog.UID_PROPERTY_]};goog.removeUid=function(a){null!==a&&\"removeAttribute\"in a&&a.removeAttribute(goog.UID_PROPERTY_);try{delete a[goog.UID_PROPERTY_]}catch(b){}};goog.UID_PROPERTY_=\"closure_uid_\"+(1E9*Math.random()>>>0);goog.uidCounter_=0;goog.getHashCode=goog.getUid;goog.removeHashCode=goog.removeUid;\ngoog.cloneObject=function(a){var b=goog.typeOf(a);if(\"object\"==b||\"array\"==b){if(\"function\"===typeof a.clone)return a.clone();b=\"array\"==b?[]:{};for(var c in a)b[c]=goog.cloneObject(a[c]);return b}return a};goog.bindNative_=function(a,b,c){return a.call.apply(a.bind,arguments)};\ngoog.bindJs_=function(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}};goog.bind=function(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?goog.bind=goog.bindNative_:goog.bind=goog.bindJs_;return goog.bind.apply(null,arguments)};\ngoog.partial=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}};goog.mixin=function(a,b){for(var c in b)a[c]=b[c]};goog.now=goog.TRUSTED_SITE&&Date.now||function(){return+new Date};\ngoog.globalEval=function(a){if(goog.global.execScript)goog.global.execScript(a,\"JavaScript\");else if(goog.global.eval){if(null==goog.evalWorksForGlobals_){try{goog.global.eval(\"var _evalTest_ = 1;\")}catch(d){}if(\"undefined\"!=typeof goog.global._evalTest_){try{delete goog.global._evalTest_}catch(d){}goog.evalWorksForGlobals_=!0}else goog.evalWorksForGlobals_=!1}if(goog.evalWorksForGlobals_)goog.global.eval(a);else{var b=goog.global.document,c=b.createElement(\"script\");c.type=\"text/javascript\";c.defer=\n!1;c.appendChild(b.createTextNode(a));b.head.appendChild(c);b.head.removeChild(c)}}else throw Error(\"goog.globalEval not available\");};goog.evalWorksForGlobals_=null;\ngoog.getCssName=function(a,b){if(\".\"==String(a).charAt(0))throw Error('className passed in goog.getCssName must not start with \".\". You passed: '+a);var c=function(a){return goog.cssNameMapping_[a]||a},d=function(a){a=a.split(\"-\");for(var b=[],d=0;d<a.length;d++)b.push(c(a[d]));return b.join(\"-\")};d=goog.cssNameMapping_?\"BY_WHOLE\"==goog.cssNameMappingStyle_?c:d:function(a){return a};a=b?a+\"-\"+d(b):d(a);return goog.global.CLOSURE_CSS_NAME_MAP_FN?goog.global.CLOSURE_CSS_NAME_MAP_FN(a):a};\ngoog.setCssNameMapping=function(a,b){goog.cssNameMapping_=a;goog.cssNameMappingStyle_=b};!COMPILED&&goog.global.CLOSURE_CSS_NAME_MAPPING&&(goog.cssNameMapping_=goog.global.CLOSURE_CSS_NAME_MAPPING);goog.getMsg=function(a,b,c){c&&c.html&&(a=a.replace(/</g,\"&lt;\"));b&&(a=a.replace(/\\{\\$([^}]+)}/g,function(a,c){return null!=b&&c in b?b[c]:a}));return a};goog.getMsgWithFallback=function(a,b){return a};goog.exportSymbol=function(a,b,c){goog.exportPath_(a,b,c)};\ngoog.exportProperty=function(a,b,c){a[b]=c};goog.inherits=function(a,b){function c(){}c.prototype=b.prototype;a.superClass_=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.base=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};goog.scope=function(a){if(goog.isInModuleLoader_())throw Error(\"goog.scope is not supported within a module.\");a.call(goog.global)};COMPILED||(goog.global.COMPILED=COMPILED);\ngoog.defineClass=function(a,b){var c=b.constructor,d=b.statics;c&&c!=Object.prototype.constructor||(c=function(){throw Error(\"cannot instantiate an interface (no constructor defined).\");});c=goog.defineClass.createSealingConstructor_(c,a);a&&goog.inherits(c,a);delete b.constructor;delete b.statics;goog.defineClass.applyProperties_(c.prototype,b);null!=d&&(d instanceof Function?d(c):goog.defineClass.applyProperties_(c,d));return c};goog.defineClass.SEAL_CLASS_INSTANCES=goog.DEBUG;\ngoog.defineClass.createSealingConstructor_=function(a,b){if(!goog.defineClass.SEAL_CLASS_INSTANCES)return a;var c=!goog.defineClass.isUnsealable_(b),d=function(){var b=a.apply(this,arguments)||this;b[goog.UID_PROPERTY_]=b[goog.UID_PROPERTY_];this.constructor===d&&c&&Object.seal instanceof Function&&Object.seal(b);return b};return d};goog.defineClass.isUnsealable_=function(a){return a&&a.prototype&&a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]};goog.defineClass.OBJECT_PROTOTYPE_FIELDS_=\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\".split(\" \");\ngoog.defineClass.applyProperties_=function(a,b){for(var c in b)Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c]);for(var d=0;d<goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;d++)c=goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d],Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c])};goog.tagUnsealableClass=function(a){!COMPILED&&goog.defineClass.SEAL_CLASS_INSTANCES&&(a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]=!0)};goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_=\"goog_defineClass_legacy_unsealable\";\n!COMPILED&&goog.DEPENDENCIES_ENABLED&&(goog.inHtmlDocument_=function(){var a=goog.global.document;return null!=a&&\"write\"in a},goog.isDocumentLoading_=function(){var a=goog.global.document;return a.attachEvent?\"complete\"!=a.readyState:\"loading\"==a.readyState},goog.findBasePath_=function(){if(void 0!=goog.global.CLOSURE_BASE_PATH&&\"string\"===typeof goog.global.CLOSURE_BASE_PATH)goog.basePath=goog.global.CLOSURE_BASE_PATH;else if(goog.inHtmlDocument_()){var a=goog.global.document,b=a.currentScript;\na=b?[b]:a.getElementsByTagName(\"SCRIPT\");for(b=a.length-1;0<=b;--b){var c=a[b].src,d=c.lastIndexOf(\"?\");d=-1==d?c.length:d;if(\"base.js\"==c.substr(d-7,7)){goog.basePath=c.substr(0,d-7);break}}}},goog.findBasePath_(),goog.Transpiler=function(){this.requiresTranspilation_=null;this.transpilationTarget_=goog.TRANSPILE_TO_LANGUAGE},goog.Transpiler.prototype.createRequiresTranspilation_=function(){function a(a,b){e?d[a]=!0:b()?(c=a,d[a]=!1):e=d[a]=!0}function b(a){try{return!!eval(a)}catch(h){return!1}}\nvar c=\"es3\",d={es3:!1},e=!1,f=goog.global.navigator&&goog.global.navigator.userAgent?goog.global.navigator.userAgent:\"\";a(\"es5\",function(){return b(\"[1,].length==1\")});a(\"es6\",function(){return f.match(/Edge\\/(\\d+)(\\.\\d)*/i)?!1:b('(()=>{\"use strict\";class X{constructor(){if(new.target!=String)throw 1;this.x=42}}let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof String))throw 1;for(const a of[2,3]){if(a==2)continue;function f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()==3}})()')});\na(\"es7\",function(){return b(\"2 ** 2 == 4\")});a(\"es8\",function(){return b(\"async () => 1, true\")});a(\"es9\",function(){return b(\"({...rest} = {}), true\")});a(\"es_next\",function(){return!1});return{target:c,map:d}},goog.Transpiler.prototype.needsTranspile=function(a,b){if(\"always\"==goog.TRANSPILE)return!0;if(\"never\"==goog.TRANSPILE)return!1;if(!this.requiresTranspilation_){var c=this.createRequiresTranspilation_();this.requiresTranspilation_=c.map;this.transpilationTarget_=this.transpilationTarget_||\nc.target}if(a in this.requiresTranspilation_)return this.requiresTranspilation_[a]?!0:!goog.inHtmlDocument_()||\"es6\"!=b||\"noModule\"in goog.global.document.createElement(\"script\")?!1:!0;throw Error(\"Unknown language mode: \"+a);},goog.Transpiler.prototype.transpile=function(a,b){return goog.transpile_(a,b,this.transpilationTarget_)},goog.transpiler_=new goog.Transpiler,goog.protectScriptTag_=function(a){return a.replace(/<\\/(SCRIPT)/ig,\"\\\\x3c/$1\")},goog.DebugLoader_=function(){this.dependencies_={};\nthis.idToPath_={};this.written_={};this.loadingDeps_=[];this.depsToLoad_=[];this.paused_=!1;this.factory_=new goog.DependencyFactory(goog.transpiler_);this.deferredCallbacks_={};this.deferredQueue_=[]},goog.DebugLoader_.prototype.bootstrap=function(a,b){function c(){d&&(goog.global.setTimeout(d,0),d=null)}var d=b;if(a.length){b=[];for(var e=0;e<a.length;e++){var f=this.getPathFromDeps_(a[e]);if(!f)throw Error(\"Unregonized namespace: \"+a[e]);b.push(this.dependencies_[f])}f=goog.require;var g=0;for(e=\n0;e<a.length;e++)f(a[e]),b[e].onLoad(function(){++g==a.length&&c()})}else c()},goog.DebugLoader_.prototype.loadClosureDeps=function(){this.depsToLoad_.push(this.factory_.createDependency(goog.normalizePath_(goog.basePath+\"deps.js\"),\"deps.js\",[],[],{},!1));this.loadDeps_()},goog.DebugLoader_.prototype.requested=function(a,b){(a=this.getPathFromDeps_(a))&&(b||this.areDepsLoaded_(this.dependencies_[a].requires))&&(b=this.deferredCallbacks_[a])&&(delete this.deferredCallbacks_[a],b())},goog.DebugLoader_.prototype.setDependencyFactory=\nfunction(a){this.factory_=a},goog.DebugLoader_.prototype.load_=function(a){if(this.getPathFromDeps_(a)){var b=this,c=[],d=function(a){var e=b.getPathFromDeps_(a);if(!e)throw Error(\"Bad dependency path or symbol: \"+a);if(!b.written_[e]){b.written_[e]=!0;a=b.dependencies_[e];for(e=0;e<a.requires.length;e++)goog.isProvided_(a.requires[e])||d(a.requires[e]);c.push(a)}};d(a);a=!!this.depsToLoad_.length;this.depsToLoad_=this.depsToLoad_.concat(c);this.paused_||a||this.loadDeps_()}else throw a=\"goog.require could not find: \"+\na,goog.logToConsole_(a),Error(a);},goog.DebugLoader_.prototype.loadDeps_=function(){for(var a=this,b=this.paused_;this.depsToLoad_.length&&!b;)(function(){var c=!1,d=a.depsToLoad_.shift(),e=!1;a.loading_(d);var f={pause:function(){if(c)throw Error(\"Cannot call pause after the call to load.\");b=!0},resume:function(){c?a.resume_():b=!1},loaded:function(){if(e)throw Error(\"Double call to loaded.\");e=!0;a.loaded_(d)},pending:function(){for(var b=[],c=0;c<a.loadingDeps_.length;c++)b.push(a.loadingDeps_[c]);\nreturn b},setModuleState:function(a){goog.moduleLoaderState_={type:a,moduleName:\"\",declareLegacyNamespace:!1}},registerEs6ModuleExports:function(a,b,c){c&&(goog.loadedModules_[c]={exports:b,type:goog.ModuleType.ES6,moduleId:c||\"\"})},registerGoogModuleExports:function(a,b){goog.loadedModules_[a]={exports:b,type:goog.ModuleType.GOOG,moduleId:a}},clearModuleState:function(){goog.moduleLoaderState_=null},defer:function(b){if(c)throw Error(\"Cannot register with defer after the call to load.\");a.defer_(d,\nb)},areDepsLoaded:function(){return a.areDepsLoaded_(d.requires)}};try{d.load(f)}finally{c=!0}})();b&&this.pause_()},goog.DebugLoader_.prototype.pause_=function(){this.paused_=!0},goog.DebugLoader_.prototype.resume_=function(){this.paused_&&(this.paused_=!1,this.loadDeps_())},goog.DebugLoader_.prototype.loading_=function(a){this.loadingDeps_.push(a)},goog.DebugLoader_.prototype.loaded_=function(a){for(var b=0;b<this.loadingDeps_.length;b++)if(this.loadingDeps_[b]==a){this.loadingDeps_.splice(b,1);\nbreak}for(b=0;b<this.deferredQueue_.length;b++)if(this.deferredQueue_[b]==a.path){this.deferredQueue_.splice(b,1);break}if(this.loadingDeps_.length==this.deferredQueue_.length&&!this.depsToLoad_.length)for(;this.deferredQueue_.length;)this.requested(this.deferredQueue_.shift(),!0);a.loaded()},goog.DebugLoader_.prototype.areDepsLoaded_=function(a){for(var b=0;b<a.length;b++){var c=this.getPathFromDeps_(a[b]);if(!c||!(c in this.deferredCallbacks_||goog.isProvided_(a[b])))return!1}return!0},goog.DebugLoader_.prototype.getPathFromDeps_=\nfunction(a){return a in this.idToPath_?this.idToPath_[a]:a in this.dependencies_?a:null},goog.DebugLoader_.prototype.defer_=function(a,b){this.deferredCallbacks_[a.path]=b;this.deferredQueue_.push(a.path)},goog.LoadController=function(){},goog.LoadController.prototype.pause=function(){},goog.LoadController.prototype.resume=function(){},goog.LoadController.prototype.loaded=function(){},goog.LoadController.prototype.pending=function(){},goog.LoadController.prototype.registerEs6ModuleExports=function(a,\nb,c){},goog.LoadController.prototype.setModuleState=function(a){},goog.LoadController.prototype.clearModuleState=function(){},goog.LoadController.prototype.defer=function(a){},goog.LoadController.prototype.areDepsLoaded=function(){},goog.Dependency=function(a,b,c,d,e){this.path=a;this.relativePath=b;this.provides=c;this.requires=d;this.loadFlags=e;this.loaded_=!1;this.loadCallbacks_=[]},goog.Dependency.prototype.getPathName=function(){var a=this.path,b=a.indexOf(\"://\");0<=b&&(a=a.substring(b+3),b=\na.indexOf(\"/\"),0<=b&&(a=a.substring(b+1)));return a},goog.Dependency.prototype.onLoad=function(a){this.loaded_?a():this.loadCallbacks_.push(a)},goog.Dependency.prototype.loaded=function(){this.loaded_=!0;var a=this.loadCallbacks_;this.loadCallbacks_=[];for(var b=0;b<a.length;b++)a[b]()},goog.Dependency.defer_=!1,goog.Dependency.callbackMap_={},goog.Dependency.registerCallback_=function(a){var b=Math.random().toString(32);goog.Dependency.callbackMap_[b]=a;return b},goog.Dependency.unregisterCallback_=\nfunction(a){delete goog.Dependency.callbackMap_[a]},goog.Dependency.callback_=function(a,b){if(a in goog.Dependency.callbackMap_){for(var c=goog.Dependency.callbackMap_[a],d=[],e=1;e<arguments.length;e++)d.push(arguments[e]);c.apply(void 0,d)}else throw Error(\"Callback key \"+a+\" does not exist (was base.js loaded more than once?).\");},goog.Dependency.prototype.load=function(a){if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var b=\ngoog.global.document;if(\"complete\"==b.readyState&&!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING){if(/\\bdeps.js$/.test(this.path)){a.loaded();return}throw Error('Cannot write \"'+this.path+'\" after document load');}if(!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING&&goog.isDocumentLoading_()){var c=goog.Dependency.registerCallback_(function(b){goog.DebugLoader_.IS_OLD_IE_&&\"complete\"!=b.readyState||(goog.Dependency.unregisterCallback_(c),a.loaded())}),d=!goog.DebugLoader_.IS_OLD_IE_&&goog.getScriptNonce()?\n' nonce=\"'+goog.getScriptNonce()+'\"':\"\";d='<script src=\"'+this.path+'\" '+(goog.DebugLoader_.IS_OLD_IE_?\"onreadystatechange\":\"onload\")+\"=\\\"goog.Dependency.callback_('\"+c+'\\', this)\" type=\"text/javascript\" '+(goog.Dependency.defer_?\"defer\":\"\")+d+\">\\x3c/script>\";b.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(d):d)}else{var e=b.createElement(\"script\");e.defer=goog.Dependency.defer_;e.async=!1;e.type=\"text/javascript\";(d=goog.getScriptNonce())&&e.setAttribute(\"nonce\",d);goog.DebugLoader_.IS_OLD_IE_?\n(a.pause(),e.onreadystatechange=function(){if(\"loaded\"==e.readyState||\"complete\"==e.readyState)a.loaded(),a.resume()}):e.onload=function(){e.onload=null;a.loaded()};e.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path):this.path;b.head.appendChild(e)}}else goog.logToConsole_(\"Cannot use default debug loader outside of HTML documents.\"),\"deps.js\"==this.relativePath?(goog.logToConsole_(\"Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, or setting CLOSURE_NO_DEPS to true.\"),\na.loaded()):a.pause()},goog.Es6ModuleDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,b,c,d,e)},goog.inherits(goog.Es6ModuleDependency,goog.Dependency),goog.Es6ModuleDependency.prototype.load=function(a){function b(a,b){a=b?'<script type=\"module\" crossorigin>'+b+\"\\x3c/script>\":'<script type=\"module\" crossorigin src=\"'+a+'\">\\x3c/script>';d.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(a):a)}function c(a,b){var c=d.createElement(\"script\");c.defer=!0;c.async=!1;c.type=\n\"module\";c.setAttribute(\"crossorigin\",!0);var e=goog.getScriptNonce();e&&c.setAttribute(\"nonce\",e);b?c.textContent=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScript(b):b:c.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(a):a;d.head.appendChild(c)}if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var d=goog.global.document,e=this;if(goog.isDocumentLoading_()){var f=b;goog.Dependency.defer_=\n!0}else f=c;var g=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(g);a.setModuleState(goog.ModuleType.ES6)});f(void 0,'goog.Dependency.callback_(\"'+g+'\")');f(this.path,void 0);var h=goog.Dependency.registerCallback_(function(b){goog.Dependency.unregisterCallback_(h);a.registerEs6ModuleExports(e.path,b,goog.moduleLoaderState_.moduleName)});f(void 0,'import * as m from \"'+this.path+'\"; goog.Dependency.callback_(\"'+h+'\", m)');var k=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(k);\na.clearModuleState();a.loaded()});f(void 0,'goog.Dependency.callback_(\"'+k+'\")')}else goog.logToConsole_(\"Cannot use default debug loader outside of HTML documents.\"),a.pause()},goog.TransformedDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,b,c,d,e);this.contents_=null;this.lazyFetch_=!goog.inHtmlDocument_()||!(\"noModule\"in goog.global.document.createElement(\"script\"))},goog.inherits(goog.TransformedDependency,goog.Dependency),goog.TransformedDependency.prototype.load=function(a){function b(){e.contents_=\ngoog.loadFileSync_(e.path);e.contents_&&(e.contents_=e.transform(e.contents_),e.contents_&&(e.contents_+=\"\\n//# sourceURL=\"+e.path))}function c(){e.lazyFetch_&&b();if(e.contents_){f&&a.setModuleState(goog.ModuleType.ES6);try{var c=e.contents_;e.contents_=null;goog.globalEval(c);if(f)var d=goog.moduleLoaderState_.moduleName}finally{f&&a.clearModuleState()}f&&goog.global.$jscomp.require.ensure([e.getPathName()],function(){a.registerEs6ModuleExports(e.path,goog.global.$jscomp.require(e.getPathName()),\nd)});a.loaded()}}function d(){var a=goog.global.document,b=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(b);c()}),d='<script type=\"text/javascript\">'+goog.protectScriptTag_('goog.Dependency.callback_(\"'+b+'\");')+\"\\x3c/script>\";a.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(d):d)}var e=this;if(goog.global.CLOSURE_IMPORT_SCRIPT)b(),this.contents_&&goog.global.CLOSURE_IMPORT_SCRIPT(\"\",this.contents_)?(this.contents_=null,a.loaded()):a.pause();\nelse{var f=this.loadFlags.module==goog.ModuleType.ES6;this.lazyFetch_||b();var g=1<a.pending().length,h=g&&goog.DebugLoader_.IS_OLD_IE_;g=goog.Dependency.defer_&&(g||goog.isDocumentLoading_());if(h||g)a.defer(function(){c()});else{var k=goog.global.document;h=goog.inHtmlDocument_()&&\"ActiveXObject\"in goog.global;if(f&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()&&!h){goog.Dependency.defer_=!0;a.pause();var l=k.onreadystatechange;k.onreadystatechange=function(){\"interactive\"==k.readyState&&(k.onreadystatechange=\nl,c(),a.resume());goog.isFunction(l)&&l.apply(void 0,arguments)}}else!goog.DebugLoader_.IS_OLD_IE_&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()?d():c()}}},goog.TransformedDependency.prototype.transform=function(a){},goog.TranspiledDependency=function(a,b,c,d,e,f){goog.TransformedDependency.call(this,a,b,c,d,e);this.transpiler=f},goog.inherits(goog.TranspiledDependency,goog.TransformedDependency),goog.TranspiledDependency.prototype.transform=function(a){return this.transpiler.transpile(a,this.getPathName())},\ngoog.PreTranspiledEs6ModuleDependency=function(a,b,c,d,e){goog.TransformedDependency.call(this,a,b,c,d,e)},goog.inherits(goog.PreTranspiledEs6ModuleDependency,goog.TransformedDependency),goog.PreTranspiledEs6ModuleDependency.prototype.transform=function(a){return a},goog.GoogModuleDependency=function(a,b,c,d,e,f,g){goog.TransformedDependency.call(this,a,b,c,d,e);this.needsTranspile_=f;this.transpiler_=g},goog.inherits(goog.GoogModuleDependency,goog.TransformedDependency),goog.GoogModuleDependency.prototype.transform=\nfunction(a){this.needsTranspile_&&(a=this.transpiler_.transpile(a,this.getPathName()));return goog.LOAD_MODULE_USING_EVAL&&void 0!==goog.global.JSON?\"goog.loadModule(\"+goog.global.JSON.stringify(a+\"\\n//# sourceURL=\"+this.path+\"\\n\")+\");\":'goog.loadModule(function(exports) {\"use strict\";'+a+\"\\n;return exports});\\n//# sourceURL=\"+this.path+\"\\n\"},goog.DebugLoader_.IS_OLD_IE_=!(goog.global.atob||!goog.global.document||!goog.global.document.all),goog.DebugLoader_.prototype.addDependency=function(a,b,c,\nd){b=b||[];a=a.replace(/\\\\/g,\"/\");var e=goog.normalizePath_(goog.basePath+a);d&&\"boolean\"!==typeof d||(d=d?{module:goog.ModuleType.GOOG}:{});c=this.factory_.createDependency(e,a,b,c,d,goog.transpiler_.needsTranspile(d.lang||\"es3\",d.module));this.dependencies_[e]=c;for(c=0;c<b.length;c++)this.idToPath_[b[c]]=e;this.idToPath_[a]=e},goog.DependencyFactory=function(a){this.transpiler=a},goog.DependencyFactory.prototype.createDependency=function(a,b,c,d,e,f){return e.module==goog.ModuleType.GOOG?new goog.GoogModuleDependency(a,\nb,c,d,e,f,this.transpiler):f?new goog.TranspiledDependency(a,b,c,d,e,this.transpiler):e.module==goog.ModuleType.ES6?\"never\"==goog.TRANSPILE&&goog.ASSUME_ES_MODULES_TRANSPILED?new goog.PreTranspiledEs6ModuleDependency(a,b,c,d,e):new goog.Es6ModuleDependency(a,b,c,d,e):new goog.Dependency(a,b,c,d,e)},goog.debugLoader_=new goog.DebugLoader_,goog.loadClosureDeps=function(){goog.debugLoader_.loadClosureDeps()},goog.setDependencyFactory=function(a){goog.debugLoader_.setDependencyFactory(a)},goog.global.CLOSURE_NO_DEPS||\ngoog.debugLoader_.loadClosureDeps(),goog.bootstrap=function(a,b){goog.debugLoader_.bootstrap(a,b)});goog.TRUSTED_TYPES_POLICY_NAME=\"\";goog.identity_=function(a){return a};goog.createTrustedTypesPolicy=function(a){var b=null,c=goog.global.trustedTypes||goog.global.TrustedTypes;if(!c||!c.createPolicy)return b;try{b=c.createPolicy(a,{createHTML:goog.identity_,createScript:goog.identity_,createScriptURL:goog.identity_,createURL:goog.identity_})}catch(d){goog.logToConsole_(d.message)}return b};\ngoog.TRUSTED_TYPES_POLICY_=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+\"#base\"):null;goog.object={};goog.object.is=function(a,b){return a===b?0!==a||1/a===1/b:a!==a&&b!==b};goog.object.forEach=function(a,b,c){for(var d in a)b.call(c,a[d],d,a)};goog.object.filter=function(a,b,c){var d={},e;for(e in a)b.call(c,a[e],e,a)&&(d[e]=a[e]);return d};goog.object.map=function(a,b,c){var d={},e;for(e in a)d[e]=b.call(c,a[e],e,a);return d};goog.object.some=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return!0;return!1};\ngoog.object.every=function(a,b,c){for(var d in a)if(!b.call(c,a[d],d,a))return!1;return!0};goog.object.getCount=function(a){var b=0,c;for(c in a)b++;return b};goog.object.getAnyKey=function(a){for(var b in a)return b};goog.object.getAnyValue=function(a){for(var b in a)return a[b]};goog.object.contains=function(a,b){return goog.object.containsValue(a,b)};goog.object.getValues=function(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b};\ngoog.object.getKeys=function(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b};goog.object.getValueByKeys=function(a,b){var c=goog.isArrayLike(b),d=c?b:arguments;for(c=c?0:1;c<d.length;c++){if(null==a)return;a=a[d[c]]}return a};goog.object.containsKey=function(a,b){return null!==a&&b in a};goog.object.containsValue=function(a,b){for(var c in a)if(a[c]==b)return!0;return!1};goog.object.findKey=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return d};\ngoog.object.findValue=function(a,b,c){return(b=goog.object.findKey(a,b,c))&&a[b]};goog.object.isEmpty=function(a){for(var b in a)return!1;return!0};goog.object.clear=function(a){for(var b in a)delete a[b]};goog.object.remove=function(a,b){var c;(c=b in a)&&delete a[b];return c};goog.object.add=function(a,b,c){if(null!==a&&b in a)throw Error('The object already contains the key \"'+b+'\"');goog.object.set(a,b,c)};goog.object.get=function(a,b,c){return null!==a&&b in a?a[b]:c};\ngoog.object.set=function(a,b,c){a[b]=c};goog.object.setIfUndefined=function(a,b,c){return b in a?a[b]:a[b]=c};goog.object.setWithReturnValueIfNotSet=function(a,b,c){if(b in a)return a[b];c=c();return a[b]=c};goog.object.equals=function(a,b){for(var c in a)if(!(c in b)||a[c]!==b[c])return!1;for(var d in b)if(!(d in a))return!1;return!0};goog.object.clone=function(a){var b={},c;for(c in a)b[c]=a[c];return b};\ngoog.object.unsafeClone=function(a){var b=goog.typeOf(a);if(\"object\"==b||\"array\"==b){if(goog.isFunction(a.clone))return a.clone();b=\"array\"==b?[]:{};for(var c in a)b[c]=goog.object.unsafeClone(a[c]);return b}return a};goog.object.transpose=function(a){var b={},c;for(c in a)b[a[c]]=c;return b};goog.object.PROTOTYPE_FIELDS_=\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\".split(\" \");\ngoog.object.extend=function(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<goog.object.PROTOTYPE_FIELDS_.length;f++)c=goog.object.PROTOTYPE_FIELDS_[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};\ngoog.object.create=function(a){var b=arguments.length;if(1==b&&Array.isArray(arguments[0]))return goog.object.create.apply(null,arguments[0]);if(b%2)throw Error(\"Uneven number of arguments\");for(var c={},d=0;d<b;d+=2)c[arguments[d]]=arguments[d+1];return c};goog.object.createSet=function(a){var b=arguments.length;if(1==b&&Array.isArray(arguments[0]))return goog.object.createSet.apply(null,arguments[0]);for(var c={},d=0;d<b;d++)c[arguments[d]]=!0;return c};\ngoog.object.createImmutableView=function(a){var b=a;Object.isFrozen&&!Object.isFrozen(a)&&(b=Object.create(a),Object.freeze(b));return b};goog.object.isImmutableView=function(a){return!!Object.isFrozen&&Object.isFrozen(a)};\ngoog.object.getAllPropertyNames=function(a,b,c){if(!a)return[];if(!Object.getOwnPropertyNames||!Object.getPrototypeOf)return goog.object.getKeys(a);for(var d={};a&&(a!==Object.prototype||b)&&(a!==Function.prototype||c);){for(var e=Object.getOwnPropertyNames(a),f=0;f<e.length;f++)d[e[f]]=!0;a=Object.getPrototypeOf(a)}return goog.object.getKeys(d)};goog.object.getSuperClass=function(a){return(a=Object.getPrototypeOf(a.prototype))&&a.constructor};var jspb={asserts:{}};jspb.asserts.doAssertFailure=function(a,b,c,d){var e=\"Assertion failed\";if(c){e+=\": \"+c;var f=d}else a&&(e+=\": \"+a,f=b);throw Error(\"\"+e,f||[]);};jspb.asserts.assert=function(a,b,c){for(var d=[],e=2;e<arguments.length;++e)d[e-2]=arguments[e];a||jspb.asserts.doAssertFailure(\"\",null,b,d);return a};\njspb.asserts.assertString=function(a,b,c){for(var d=[],e=2;e<arguments.length;++e)d[e-2]=arguments[e];\"string\"!==typeof a&&jspb.asserts.doAssertFailure(\"Expected string but got %s: %s.\",[goog.typeOf(a),a],b,d);return a};jspb.asserts.assertArray=function(a,b,c){for(var d=[],e=2;e<arguments.length;++e)d[e-2]=arguments[e];Array.isArray(a)||jspb.asserts.doAssertFailure(\"Expected array but got %s: %s.\",[goog.typeOf(a),a],b,d);return a};\njspb.asserts.fail=function(a,b){for(var c=[],d=1;d<arguments.length;++d)c[d-1]=arguments[d];throw Error(\"Failure\"+(a?\": \"+a:\"\"),c);};jspb.asserts.assertInstanceof=function(a,b,c,d){for(var e=[],f=3;f<arguments.length;++f)e[f-3]=arguments[f];a instanceof b||jspb.asserts.doAssertFailure(\"Expected instanceof %s but got %s.\",[jspb.asserts.getType(b),jspb.asserts.getType(a)],c,e);return a};\njspb.asserts.getType=function(a){return a instanceof Function?a.displayName||a.name||\"unknown type name\":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?\"null\":typeof a};jspb.BinaryConstants={};jspb.ConstBinaryMessage=function(){};jspb.BinaryMessage=function(){};jspb.BinaryConstants.FieldType={INVALID:-1,DOUBLE:1,FLOAT:2,INT64:3,UINT64:4,INT32:5,FIXED64:6,FIXED32:7,BOOL:8,STRING:9,GROUP:10,MESSAGE:11,BYTES:12,UINT32:13,ENUM:14,SFIXED32:15,SFIXED64:16,SINT32:17,SINT64:18,FHASH64:30,VHASH64:31};jspb.BinaryConstants.WireType={INVALID:-1,VARINT:0,FIXED64:1,DELIMITED:2,START_GROUP:3,END_GROUP:4,FIXED32:5};\njspb.BinaryConstants.FieldTypeToWireType=function(a){var b=jspb.BinaryConstants.FieldType,c=jspb.BinaryConstants.WireType;switch(a){case b.INT32:case b.INT64:case b.UINT32:case b.UINT64:case b.SINT32:case b.SINT64:case b.BOOL:case b.ENUM:case b.VHASH64:return c.VARINT;case b.DOUBLE:case b.FIXED64:case b.SFIXED64:case b.FHASH64:return c.FIXED64;case b.STRING:case b.MESSAGE:case b.BYTES:return c.DELIMITED;case b.FLOAT:case b.FIXED32:case b.SFIXED32:return c.FIXED32;default:return c.INVALID}};\njspb.BinaryConstants.INVALID_FIELD_NUMBER=-1;jspb.BinaryConstants.FLOAT32_EPS=1.401298464324817E-45;jspb.BinaryConstants.FLOAT32_MIN=1.1754943508222875E-38;jspb.BinaryConstants.FLOAT32_MAX=3.4028234663852886E38;jspb.BinaryConstants.FLOAT64_EPS=4.9E-324;jspb.BinaryConstants.FLOAT64_MIN=2.2250738585072014E-308;jspb.BinaryConstants.FLOAT64_MAX=1.7976931348623157E308;jspb.BinaryConstants.TWO_TO_20=1048576;jspb.BinaryConstants.TWO_TO_23=8388608;jspb.BinaryConstants.TWO_TO_31=2147483648;\njspb.BinaryConstants.TWO_TO_32=4294967296;jspb.BinaryConstants.TWO_TO_52=4503599627370496;jspb.BinaryConstants.TWO_TO_63=0x7fffffffffffffff;jspb.BinaryConstants.TWO_TO_64=1.8446744073709552E19;jspb.BinaryConstants.ZERO_HASH=\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";goog.debug={};goog.debug.Error=function(a){if(Error.captureStackTrace)Error.captureStackTrace(this,goog.debug.Error);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a));this.reportErrorToServer=!0};goog.inherits(goog.debug.Error,Error);goog.debug.Error.prototype.name=\"CustomError\";goog.dom={};goog.dom.NodeType={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,ENTITY_REFERENCE:5,ENTITY:6,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9,DOCUMENT_TYPE:10,DOCUMENT_FRAGMENT:11,NOTATION:12};goog.asserts={};goog.asserts.ENABLE_ASSERTS=goog.DEBUG;goog.asserts.AssertionError=function(a,b){goog.debug.Error.call(this,goog.asserts.subs_(a,b));this.messagePattern=a};goog.inherits(goog.asserts.AssertionError,goog.debug.Error);goog.asserts.AssertionError.prototype.name=\"AssertionError\";goog.asserts.DEFAULT_ERROR_HANDLER=function(a){throw a;};goog.asserts.errorHandler_=goog.asserts.DEFAULT_ERROR_HANDLER;\ngoog.asserts.subs_=function(a,b){a=a.split(\"%s\");for(var c=\"\",d=a.length-1,e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:\"%s\");return c+a[d]};goog.asserts.doAssertFailure_=function(a,b,c,d){var e=\"Assertion failed\";if(c){e+=\": \"+c;var f=d}else a&&(e+=\": \"+a,f=b);a=new goog.asserts.AssertionError(\"\"+e,f||[]);goog.asserts.errorHandler_(a)};goog.asserts.setErrorHandler=function(a){goog.asserts.ENABLE_ASSERTS&&(goog.asserts.errorHandler_=a)};\ngoog.asserts.assert=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!a&&goog.asserts.doAssertFailure_(\"\",null,b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertExists=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&null==a&&goog.asserts.doAssertFailure_(\"Expected to exist: %s.\",[a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.fail=function(a,b){goog.asserts.ENABLE_ASSERTS&&goog.asserts.errorHandler_(new goog.asserts.AssertionError(\"Failure\"+(a?\": \"+a:\"\"),Array.prototype.slice.call(arguments,1)))};goog.asserts.assertNumber=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&\"number\"!==typeof a&&goog.asserts.doAssertFailure_(\"Expected number but got %s: %s.\",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertString=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&\"string\"!==typeof a&&goog.asserts.doAssertFailure_(\"Expected string but got %s: %s.\",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertFunction=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isFunction(a)&&goog.asserts.doAssertFailure_(\"Expected function but got %s: %s.\",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertObject=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isObject(a)&&goog.asserts.doAssertFailure_(\"Expected object but got %s: %s.\",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertArray=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!Array.isArray(a)&&goog.asserts.doAssertFailure_(\"Expected array but got %s: %s.\",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertBoolean=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&\"boolean\"!==typeof a&&goog.asserts.doAssertFailure_(\"Expected boolean but got %s: %s.\",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertElement=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||goog.isObject(a)&&a.nodeType==goog.dom.NodeType.ELEMENT||goog.asserts.doAssertFailure_(\"Expected Element but got %s: %s.\",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertInstanceof=function(a,b,c,d){!goog.asserts.ENABLE_ASSERTS||a instanceof b||goog.asserts.doAssertFailure_(\"Expected instanceof %s but got %s.\",[goog.asserts.getType_(b),goog.asserts.getType_(a)],c,Array.prototype.slice.call(arguments,3));return a};goog.asserts.assertFinite=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||\"number\"==typeof a&&isFinite(a)||goog.asserts.doAssertFailure_(\"Expected %s to be a finite number but it is not.\",[a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertObjectPrototypeIsIntact=function(){for(var a in Object.prototype)goog.asserts.fail(a+\" should not be enumerable in Object.prototype.\")};goog.asserts.getType_=function(a){return a instanceof Function?a.displayName||a.name||\"unknown type name\":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?\"null\":typeof a};goog.array={};goog.NATIVE_ARRAY_PROTOTYPES=goog.TRUSTED_SITE;goog.array.ASSUME_NATIVE_FUNCTIONS=2012<goog.FEATURESET_YEAR;goog.array.peek=function(a){return a[a.length-1]};goog.array.last=goog.array.peek;\ngoog.array.indexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.indexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(\"string\"===typeof a)return\"string\"!==typeof b||1!=b.length?-1:a.indexOf(b,c);for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1};\ngoog.array.lastIndexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.lastIndexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.lastIndexOf.call(a,b,null==c?a.length-1:c)}:function(a,b,c){c=null==c?a.length-1:c;0>c&&(c=Math.max(0,a.length+c));if(\"string\"===typeof a)return\"string\"!==typeof b||1!=b.length?-1:a.lastIndexOf(b,c);for(;0<=c;c--)if(c in a&&a[c]===b)return c;return-1};\ngoog.array.forEach=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.forEach)?function(a,b,c){goog.asserts.assert(null!=a.length);Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=\"string\"===typeof a?a.split(\"\"):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};goog.array.forEachRight=function(a,b,c){var d=a.length,e=\"string\"===typeof a?a.split(\"\"):a;for(--d;0<=d;--d)d in e&&b.call(c,e[d],d,a)};\ngoog.array.filter=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.filter)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.filter.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=[],f=0,g=\"string\"===typeof a?a.split(\"\"):a,h=0;h<d;h++)if(h in g){var k=g[h];b.call(c,k,h,a)&&(e[f++]=k)}return e};\ngoog.array.map=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.map)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.map.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=Array(d),f=\"string\"===typeof a?a.split(\"\"):a,g=0;g<d;g++)g in f&&(e[g]=b.call(c,f[g],g,a));return e};\ngoog.array.reduce=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduce)?function(a,b,c,d){goog.asserts.assert(null!=a.length);d&&(b=goog.bind(b,d));return Array.prototype.reduce.call(a,b,c)}:function(a,b,c,d){var e=c;goog.array.forEach(a,function(c,g){e=b.call(d,e,c,g,a)});return e};\ngoog.array.reduceRight=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduceRight)?function(a,b,c,d){goog.asserts.assert(null!=a.length);goog.asserts.assert(null!=b);d&&(b=goog.bind(b,d));return Array.prototype.reduceRight.call(a,b,c)}:function(a,b,c,d){var e=c;goog.array.forEachRight(a,function(c,g){e=b.call(d,e,c,g,a)});return e};\ngoog.array.some=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.some)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.some.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=\"string\"===typeof a?a.split(\"\"):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return!0;return!1};\ngoog.array.every=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.every)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.every.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=\"string\"===typeof a?a.split(\"\"):a,f=0;f<d;f++)if(f in e&&!b.call(c,e[f],f,a))return!1;return!0};goog.array.count=function(a,b,c){var d=0;goog.array.forEach(a,function(a,f,g){b.call(c,a,f,g)&&++d},c);return d};\ngoog.array.find=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0>b?null:\"string\"===typeof a?a.charAt(b):a[b]};goog.array.findIndex=function(a,b,c){for(var d=a.length,e=\"string\"===typeof a?a.split(\"\"):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return f;return-1};goog.array.findRight=function(a,b,c){b=goog.array.findIndexRight(a,b,c);return 0>b?null:\"string\"===typeof a?a.charAt(b):a[b]};\ngoog.array.findIndexRight=function(a,b,c){var d=a.length,e=\"string\"===typeof a?a.split(\"\"):a;for(--d;0<=d;d--)if(d in e&&b.call(c,e[d],d,a))return d;return-1};goog.array.contains=function(a,b){return 0<=goog.array.indexOf(a,b)};goog.array.isEmpty=function(a){return 0==a.length};goog.array.clear=function(a){if(!Array.isArray(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0};goog.array.insert=function(a,b){goog.array.contains(a,b)||a.push(b)};\ngoog.array.insertAt=function(a,b,c){goog.array.splice(a,c,0,b)};goog.array.insertArrayAt=function(a,b,c){goog.partial(goog.array.splice,a,c,0).apply(null,b)};goog.array.insertBefore=function(a,b,c){var d;2==arguments.length||0>(d=goog.array.indexOf(a,c))?a.push(b):goog.array.insertAt(a,b,d)};goog.array.remove=function(a,b){b=goog.array.indexOf(a,b);var c;(c=0<=b)&&goog.array.removeAt(a,b);return c};\ngoog.array.removeLast=function(a,b){b=goog.array.lastIndexOf(a,b);return 0<=b?(goog.array.removeAt(a,b),!0):!1};goog.array.removeAt=function(a,b){goog.asserts.assert(null!=a.length);return 1==Array.prototype.splice.call(a,b,1).length};goog.array.removeIf=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0<=b?(goog.array.removeAt(a,b),!0):!1};goog.array.removeAllIf=function(a,b,c){var d=0;goog.array.forEachRight(a,function(e,f){b.call(c,e,f,a)&&goog.array.removeAt(a,f)&&d++});return d};\ngoog.array.concat=function(a){return Array.prototype.concat.apply([],arguments)};goog.array.join=function(a){return Array.prototype.concat.apply([],arguments)};goog.array.toArray=function(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};goog.array.clone=goog.array.toArray;goog.array.extend=function(a,b){for(var c=1;c<arguments.length;c++){var d=arguments[c];if(goog.isArrayLike(d)){var e=a.length||0,f=d.length||0;a.length=e+f;for(var g=0;g<f;g++)a[e+g]=d[g]}else a.push(d)}};\ngoog.array.splice=function(a,b,c,d){goog.asserts.assert(null!=a.length);return Array.prototype.splice.apply(a,goog.array.slice(arguments,1))};goog.array.slice=function(a,b,c){goog.asserts.assert(null!=a.length);return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,c)};\ngoog.array.removeDuplicates=function(a,b,c){b=b||a;var d=function(a){return goog.isObject(a)?\"o\"+goog.getUid(a):(typeof a).charAt(0)+a};c=c||d;d={};for(var e=0,f=0;f<a.length;){var g=a[f++],h=c(g);Object.prototype.hasOwnProperty.call(d,h)||(d[h]=!0,b[e++]=g)}b.length=e};goog.array.binarySearch=function(a,b,c){return goog.array.binarySearch_(a,c||goog.array.defaultCompare,!1,b)};goog.array.binarySelect=function(a,b,c){return goog.array.binarySearch_(a,b,!0,void 0,c)};\ngoog.array.binarySearch_=function(a,b,c,d,e){for(var f=0,g=a.length,h;f<g;){var k=f+(g-f>>>1);var l=c?b.call(e,a[k],k,a):b(d,a[k]);0<l?f=k+1:(g=k,h=!l)}return h?f:-f-1};goog.array.sort=function(a,b){a.sort(b||goog.array.defaultCompare)};goog.array.stableSort=function(a,b){for(var c=Array(a.length),d=0;d<a.length;d++)c[d]={index:d,value:a[d]};var e=b||goog.array.defaultCompare;goog.array.sort(c,function(a,b){return e(a.value,b.value)||a.index-b.index});for(d=0;d<a.length;d++)a[d]=c[d].value};\ngoog.array.sortByKey=function(a,b,c){var d=c||goog.array.defaultCompare;goog.array.sort(a,function(a,c){return d(b(a),b(c))})};goog.array.sortObjectsByKey=function(a,b,c){goog.array.sortByKey(a,function(a){return a[b]},c)};goog.array.isSorted=function(a,b,c){b=b||goog.array.defaultCompare;for(var d=1;d<a.length;d++){var e=b(a[d-1],a[d]);if(0<e||0==e&&c)return!1}return!0};\ngoog.array.equals=function(a,b,c){if(!goog.isArrayLike(a)||!goog.isArrayLike(b)||a.length!=b.length)return!1;var d=a.length;c=c||goog.array.defaultCompareEquality;for(var e=0;e<d;e++)if(!c(a[e],b[e]))return!1;return!0};goog.array.compare3=function(a,b,c){c=c||goog.array.defaultCompare;for(var d=Math.min(a.length,b.length),e=0;e<d;e++){var f=c(a[e],b[e]);if(0!=f)return f}return goog.array.defaultCompare(a.length,b.length)};goog.array.defaultCompare=function(a,b){return a>b?1:a<b?-1:0};\ngoog.array.inverseDefaultCompare=function(a,b){return-goog.array.defaultCompare(a,b)};goog.array.defaultCompareEquality=function(a,b){return a===b};goog.array.binaryInsert=function(a,b,c){c=goog.array.binarySearch(a,b,c);return 0>c?(goog.array.insertAt(a,b,-(c+1)),!0):!1};goog.array.binaryRemove=function(a,b,c){b=goog.array.binarySearch(a,b,c);return 0<=b?goog.array.removeAt(a,b):!1};\ngoog.array.bucket=function(a,b,c){for(var d={},e=0;e<a.length;e++){var f=a[e],g=b.call(c,f,e,a);void 0!==g&&(d[g]||(d[g]=[])).push(f)}return d};goog.array.toObject=function(a,b,c){var d={};goog.array.forEach(a,function(e,f){d[b.call(c,e,f,a)]=e});return d};goog.array.range=function(a,b,c){var d=[],e=0,f=a;c=c||1;void 0!==b&&(e=a,f=b);if(0>c*(f-e))return[];if(0<c)for(a=e;a<f;a+=c)d.push(a);else for(a=e;a>f;a+=c)d.push(a);return d};goog.array.repeat=function(a,b){for(var c=[],d=0;d<b;d++)c[d]=a;return c};\ngoog.array.flatten=function(a){for(var b=[],c=0;c<arguments.length;c++){var d=arguments[c];if(Array.isArray(d))for(var e=0;e<d.length;e+=8192){var f=goog.array.slice(d,e,e+8192);f=goog.array.flatten.apply(null,f);for(var g=0;g<f.length;g++)b.push(f[g])}else b.push(d)}return b};goog.array.rotate=function(a,b){goog.asserts.assert(null!=a.length);a.length&&(b%=a.length,0<b?Array.prototype.unshift.apply(a,a.splice(-b,b)):0>b&&Array.prototype.push.apply(a,a.splice(0,-b)));return a};\ngoog.array.moveItem=function(a,b,c){goog.asserts.assert(0<=b&&b<a.length);goog.asserts.assert(0<=c&&c<a.length);b=Array.prototype.splice.call(a,b,1);Array.prototype.splice.call(a,c,0,b[0])};goog.array.zip=function(a){if(!arguments.length)return[];for(var b=[],c=arguments[0].length,d=1;d<arguments.length;d++)arguments[d].length<c&&(c=arguments[d].length);for(d=0;d<c;d++){for(var e=[],f=0;f<arguments.length;f++)e.push(arguments[f][d]);b.push(e)}return b};\ngoog.array.shuffle=function(a,b){b=b||Math.random;for(var c=a.length-1;0<c;c--){var d=Math.floor(b()*(c+1)),e=a[c];a[c]=a[d];a[d]=e}};goog.array.copyByIndex=function(a,b){var c=[];goog.array.forEach(b,function(b){c.push(a[b])});return c};goog.array.concatMap=function(a,b,c){return goog.array.concat.apply([],goog.array.map(a,b,c))};goog.crypt={};goog.crypt.stringToByteArray=function(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);255<e&&(b[c++]=e&255,e>>=8);b[c++]=e}return b};goog.crypt.byteArrayToString=function(a){if(8192>=a.length)return String.fromCharCode.apply(null,a);for(var b=\"\",c=0;c<a.length;c+=8192){var d=goog.array.slice(a,c,c+8192);b+=String.fromCharCode.apply(null,d)}return b};\ngoog.crypt.byteArrayToHex=function(a,b){return goog.array.map(a,function(a){a=a.toString(16);return 1<a.length?a:\"0\"+a}).join(b||\"\")};goog.crypt.hexToByteArray=function(a){goog.asserts.assert(0==a.length%2,\"Key string length must be multiple of 2\");for(var b=[],c=0;c<a.length;c+=2)b.push(parseInt(a.substring(c,c+2),16));return b};\ngoog.crypt.stringToUtf8ByteArray=function(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);128>e?b[c++]=e:(2048>e?b[c++]=e>>6|192:(55296==(e&64512)&&d+1<a.length&&56320==(a.charCodeAt(d+1)&64512)?(e=65536+((e&1023)<<10)+(a.charCodeAt(++d)&1023),b[c++]=e>>18|240,b[c++]=e>>12&63|128):b[c++]=e>>12|224,b[c++]=e>>6&63|128),b[c++]=e&63|128)}return b};\ngoog.crypt.utf8ByteArrayToString=function(a){for(var b=[],c=0,d=0;c<a.length;){var e=a[c++];if(128>e)b[d++]=String.fromCharCode(e);else if(191<e&&224>e){var f=a[c++];b[d++]=String.fromCharCode((e&31)<<6|f&63)}else if(239<e&&365>e){f=a[c++];var g=a[c++],h=a[c++];e=((e&7)<<18|(f&63)<<12|(g&63)<<6|h&63)-65536;b[d++]=String.fromCharCode(55296+(e>>10));b[d++]=String.fromCharCode(56320+(e&1023))}else f=a[c++],g=a[c++],b[d++]=String.fromCharCode((e&15)<<12|(f&63)<<6|g&63)}return b.join(\"\")};\ngoog.crypt.xorByteArray=function(a,b){goog.asserts.assert(a.length==b.length,\"XOR array lengths must match\");for(var c=[],d=0;d<a.length;d++)c.push(a[d]^b[d]);return c};goog.dom.asserts={};goog.dom.asserts.assertIsLocation=function(a){if(goog.asserts.ENABLE_ASSERTS){var b=goog.dom.asserts.getWindow_(a);b&&(!a||!(a instanceof b.Location)&&a instanceof b.Element)&&goog.asserts.fail(\"Argument is not a Location (or a non-Element mock); got: %s\",goog.dom.asserts.debugStringForType_(a))}return a};\ngoog.dom.asserts.assertIsElementType_=function(a,b){if(goog.asserts.ENABLE_ASSERTS){var c=goog.dom.asserts.getWindow_(a);c&&\"undefined\"!=typeof c[b]&&(a&&(a instanceof c[b]||!(a instanceof c.Location||a instanceof c.Element))||goog.asserts.fail(\"Argument is not a %s (or a non-Element, non-Location mock); got: %s\",b,goog.dom.asserts.debugStringForType_(a)))}return a};goog.dom.asserts.assertIsHTMLAnchorElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLAnchorElement\")};\ngoog.dom.asserts.assertIsHTMLButtonElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLButtonElement\")};goog.dom.asserts.assertIsHTMLLinkElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLLinkElement\")};goog.dom.asserts.assertIsHTMLImageElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLImageElement\")};goog.dom.asserts.assertIsHTMLAudioElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLAudioElement\")};\ngoog.dom.asserts.assertIsHTMLVideoElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLVideoElement\")};goog.dom.asserts.assertIsHTMLInputElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLInputElement\")};goog.dom.asserts.assertIsHTMLTextAreaElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLTextAreaElement\")};goog.dom.asserts.assertIsHTMLCanvasElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLCanvasElement\")};\ngoog.dom.asserts.assertIsHTMLEmbedElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLEmbedElement\")};goog.dom.asserts.assertIsHTMLFormElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLFormElement\")};goog.dom.asserts.assertIsHTMLFrameElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLFrameElement\")};goog.dom.asserts.assertIsHTMLIFrameElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLIFrameElement\")};\ngoog.dom.asserts.assertIsHTMLObjectElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLObjectElement\")};goog.dom.asserts.assertIsHTMLScriptElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLScriptElement\")};\ngoog.dom.asserts.debugStringForType_=function(a){if(goog.isObject(a))try{return a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a)}catch(b){return\"<object could not be stringified>\"}else return void 0===a?\"undefined\":null===a?\"null\":typeof a};goog.dom.asserts.getWindow_=function(a){try{var b=a&&a.ownerDocument,c=b&&(b.defaultView||b.parentWindow);c=c||goog.global;if(c.Element&&c.Location)return c}catch(d){}return null};goog.functions={};goog.functions.constant=function(a){return function(){return a}};goog.functions.FALSE=function(){return!1};goog.functions.TRUE=function(){return!0};goog.functions.NULL=function(){return null};goog.functions.identity=function(a,b){return a};goog.functions.error=function(a){return function(){throw Error(a);}};goog.functions.fail=function(a){return function(){throw a;}};\ngoog.functions.lock=function(a,b){b=b||0;return function(){return a.apply(this,Array.prototype.slice.call(arguments,0,b))}};goog.functions.nth=function(a){return function(){return arguments[a]}};goog.functions.partialRight=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=Array.prototype.slice.call(arguments);b.push.apply(b,c);return a.apply(this,b)}};goog.functions.withReturnValue=function(a,b){return goog.functions.sequence(a,goog.functions.constant(b))};\ngoog.functions.equalTo=function(a,b){return function(c){return b?a==c:a===c}};goog.functions.compose=function(a,b){var c=arguments,d=c.length;return function(){var a;d&&(a=c[d-1].apply(this,arguments));for(var b=d-2;0<=b;b--)a=c[b].call(this,a);return a}};goog.functions.sequence=function(a){var b=arguments,c=b.length;return function(){for(var a,e=0;e<c;e++)a=b[e].apply(this,arguments);return a}};\ngoog.functions.and=function(a){var b=arguments,c=b.length;return function(){for(var a=0;a<c;a++)if(!b[a].apply(this,arguments))return!1;return!0}};goog.functions.or=function(a){var b=arguments,c=b.length;return function(){for(var a=0;a<c;a++)if(b[a].apply(this,arguments))return!0;return!1}};goog.functions.not=function(a){return function(){return!a.apply(this,arguments)}};\ngoog.functions.create=function(a,b){var c=function(){};c.prototype=a.prototype;c=new c;a.apply(c,Array.prototype.slice.call(arguments,1));return c};goog.functions.CACHE_RETURN_VALUE=!0;goog.functions.cacheReturnValue=function(a){var b=!1,c;return function(){if(!goog.functions.CACHE_RETURN_VALUE)return a();b||(c=a(),b=!0);return c}};goog.functions.once=function(a){var b=a;return function(){if(b){var a=b;b=null;a()}}};\ngoog.functions.debounce=function(a,b,c){var d=0;return function(e){goog.global.clearTimeout(d);var f=arguments;d=goog.global.setTimeout(function(){a.apply(c,f)},b)}};goog.functions.throttle=function(a,b,c){var d=0,e=!1,f=[],g=function(){d=0;e&&(e=!1,h())},h=function(){d=goog.global.setTimeout(g,b);a.apply(c,f)};return function(a){f=arguments;d?e=!0:h()}};goog.functions.rateLimit=function(a,b,c){var d=0,e=function(){d=0};return function(f){d||(d=goog.global.setTimeout(e,b),a.apply(c,arguments))}};goog.dom.HtmlElement=function(){};goog.dom.TagName=function(a){this.tagName_=a};goog.dom.TagName.prototype.toString=function(){return this.tagName_};goog.dom.TagName.A=new goog.dom.TagName(\"A\");goog.dom.TagName.ABBR=new goog.dom.TagName(\"ABBR\");goog.dom.TagName.ACRONYM=new goog.dom.TagName(\"ACRONYM\");goog.dom.TagName.ADDRESS=new goog.dom.TagName(\"ADDRESS\");goog.dom.TagName.APPLET=new goog.dom.TagName(\"APPLET\");goog.dom.TagName.AREA=new goog.dom.TagName(\"AREA\");goog.dom.TagName.ARTICLE=new goog.dom.TagName(\"ARTICLE\");\ngoog.dom.TagName.ASIDE=new goog.dom.TagName(\"ASIDE\");goog.dom.TagName.AUDIO=new goog.dom.TagName(\"AUDIO\");goog.dom.TagName.B=new goog.dom.TagName(\"B\");goog.dom.TagName.BASE=new goog.dom.TagName(\"BASE\");goog.dom.TagName.BASEFONT=new goog.dom.TagName(\"BASEFONT\");goog.dom.TagName.BDI=new goog.dom.TagName(\"BDI\");goog.dom.TagName.BDO=new goog.dom.TagName(\"BDO\");goog.dom.TagName.BIG=new goog.dom.TagName(\"BIG\");goog.dom.TagName.BLOCKQUOTE=new goog.dom.TagName(\"BLOCKQUOTE\");goog.dom.TagName.BODY=new goog.dom.TagName(\"BODY\");\ngoog.dom.TagName.BR=new goog.dom.TagName(\"BR\");goog.dom.TagName.BUTTON=new goog.dom.TagName(\"BUTTON\");goog.dom.TagName.CANVAS=new goog.dom.TagName(\"CANVAS\");goog.dom.TagName.CAPTION=new goog.dom.TagName(\"CAPTION\");goog.dom.TagName.CENTER=new goog.dom.TagName(\"CENTER\");goog.dom.TagName.CITE=new goog.dom.TagName(\"CITE\");goog.dom.TagName.CODE=new goog.dom.TagName(\"CODE\");goog.dom.TagName.COL=new goog.dom.TagName(\"COL\");goog.dom.TagName.COLGROUP=new goog.dom.TagName(\"COLGROUP\");\ngoog.dom.TagName.COMMAND=new goog.dom.TagName(\"COMMAND\");goog.dom.TagName.DATA=new goog.dom.TagName(\"DATA\");goog.dom.TagName.DATALIST=new goog.dom.TagName(\"DATALIST\");goog.dom.TagName.DD=new goog.dom.TagName(\"DD\");goog.dom.TagName.DEL=new goog.dom.TagName(\"DEL\");goog.dom.TagName.DETAILS=new goog.dom.TagName(\"DETAILS\");goog.dom.TagName.DFN=new goog.dom.TagName(\"DFN\");goog.dom.TagName.DIALOG=new goog.dom.TagName(\"DIALOG\");goog.dom.TagName.DIR=new goog.dom.TagName(\"DIR\");goog.dom.TagName.DIV=new goog.dom.TagName(\"DIV\");\ngoog.dom.TagName.DL=new goog.dom.TagName(\"DL\");goog.dom.TagName.DT=new goog.dom.TagName(\"DT\");goog.dom.TagName.EM=new goog.dom.TagName(\"EM\");goog.dom.TagName.EMBED=new goog.dom.TagName(\"EMBED\");goog.dom.TagName.FIELDSET=new goog.dom.TagName(\"FIELDSET\");goog.dom.TagName.FIGCAPTION=new goog.dom.TagName(\"FIGCAPTION\");goog.dom.TagName.FIGURE=new goog.dom.TagName(\"FIGURE\");goog.dom.TagName.FONT=new goog.dom.TagName(\"FONT\");goog.dom.TagName.FOOTER=new goog.dom.TagName(\"FOOTER\");goog.dom.TagName.FORM=new goog.dom.TagName(\"FORM\");\ngoog.dom.TagName.FRAME=new goog.dom.TagName(\"FRAME\");goog.dom.TagName.FRAMESET=new goog.dom.TagName(\"FRAMESET\");goog.dom.TagName.H1=new goog.dom.TagName(\"H1\");goog.dom.TagName.H2=new goog.dom.TagName(\"H2\");goog.dom.TagName.H3=new goog.dom.TagName(\"H3\");goog.dom.TagName.H4=new goog.dom.TagName(\"H4\");goog.dom.TagName.H5=new goog.dom.TagName(\"H5\");goog.dom.TagName.H6=new goog.dom.TagName(\"H6\");goog.dom.TagName.HEAD=new goog.dom.TagName(\"HEAD\");goog.dom.TagName.HEADER=new goog.dom.TagName(\"HEADER\");\ngoog.dom.TagName.HGROUP=new goog.dom.TagName(\"HGROUP\");goog.dom.TagName.HR=new goog.dom.TagName(\"HR\");goog.dom.TagName.HTML=new goog.dom.TagName(\"HTML\");goog.dom.TagName.I=new goog.dom.TagName(\"I\");goog.dom.TagName.IFRAME=new goog.dom.TagName(\"IFRAME\");goog.dom.TagName.IMG=new goog.dom.TagName(\"IMG\");goog.dom.TagName.INPUT=new goog.dom.TagName(\"INPUT\");goog.dom.TagName.INS=new goog.dom.TagName(\"INS\");goog.dom.TagName.ISINDEX=new goog.dom.TagName(\"ISINDEX\");goog.dom.TagName.KBD=new goog.dom.TagName(\"KBD\");\ngoog.dom.TagName.KEYGEN=new goog.dom.TagName(\"KEYGEN\");goog.dom.TagName.LABEL=new goog.dom.TagName(\"LABEL\");goog.dom.TagName.LEGEND=new goog.dom.TagName(\"LEGEND\");goog.dom.TagName.LI=new goog.dom.TagName(\"LI\");goog.dom.TagName.LINK=new goog.dom.TagName(\"LINK\");goog.dom.TagName.MAIN=new goog.dom.TagName(\"MAIN\");goog.dom.TagName.MAP=new goog.dom.TagName(\"MAP\");goog.dom.TagName.MARK=new goog.dom.TagName(\"MARK\");goog.dom.TagName.MATH=new goog.dom.TagName(\"MATH\");goog.dom.TagName.MENU=new goog.dom.TagName(\"MENU\");\ngoog.dom.TagName.MENUITEM=new goog.dom.TagName(\"MENUITEM\");goog.dom.TagName.META=new goog.dom.TagName(\"META\");goog.dom.TagName.METER=new goog.dom.TagName(\"METER\");goog.dom.TagName.NAV=new goog.dom.TagName(\"NAV\");goog.dom.TagName.NOFRAMES=new goog.dom.TagName(\"NOFRAMES\");goog.dom.TagName.NOSCRIPT=new goog.dom.TagName(\"NOSCRIPT\");goog.dom.TagName.OBJECT=new goog.dom.TagName(\"OBJECT\");goog.dom.TagName.OL=new goog.dom.TagName(\"OL\");goog.dom.TagName.OPTGROUP=new goog.dom.TagName(\"OPTGROUP\");\ngoog.dom.TagName.OPTION=new goog.dom.TagName(\"OPTION\");goog.dom.TagName.OUTPUT=new goog.dom.TagName(\"OUTPUT\");goog.dom.TagName.P=new goog.dom.TagName(\"P\");goog.dom.TagName.PARAM=new goog.dom.TagName(\"PARAM\");goog.dom.TagName.PICTURE=new goog.dom.TagName(\"PICTURE\");goog.dom.TagName.PRE=new goog.dom.TagName(\"PRE\");goog.dom.TagName.PROGRESS=new goog.dom.TagName(\"PROGRESS\");goog.dom.TagName.Q=new goog.dom.TagName(\"Q\");goog.dom.TagName.RP=new goog.dom.TagName(\"RP\");goog.dom.TagName.RT=new goog.dom.TagName(\"RT\");\ngoog.dom.TagName.RTC=new goog.dom.TagName(\"RTC\");goog.dom.TagName.RUBY=new goog.dom.TagName(\"RUBY\");goog.dom.TagName.S=new goog.dom.TagName(\"S\");goog.dom.TagName.SAMP=new goog.dom.TagName(\"SAMP\");goog.dom.TagName.SCRIPT=new goog.dom.TagName(\"SCRIPT\");goog.dom.TagName.SECTION=new goog.dom.TagName(\"SECTION\");goog.dom.TagName.SELECT=new goog.dom.TagName(\"SELECT\");goog.dom.TagName.SMALL=new goog.dom.TagName(\"SMALL\");goog.dom.TagName.SOURCE=new goog.dom.TagName(\"SOURCE\");goog.dom.TagName.SPAN=new goog.dom.TagName(\"SPAN\");\ngoog.dom.TagName.STRIKE=new goog.dom.TagName(\"STRIKE\");goog.dom.TagName.STRONG=new goog.dom.TagName(\"STRONG\");goog.dom.TagName.STYLE=new goog.dom.TagName(\"STYLE\");goog.dom.TagName.SUB=new goog.dom.TagName(\"SUB\");goog.dom.TagName.SUMMARY=new goog.dom.TagName(\"SUMMARY\");goog.dom.TagName.SUP=new goog.dom.TagName(\"SUP\");goog.dom.TagName.SVG=new goog.dom.TagName(\"SVG\");goog.dom.TagName.TABLE=new goog.dom.TagName(\"TABLE\");goog.dom.TagName.TBODY=new goog.dom.TagName(\"TBODY\");goog.dom.TagName.TD=new goog.dom.TagName(\"TD\");\ngoog.dom.TagName.TEMPLATE=new goog.dom.TagName(\"TEMPLATE\");goog.dom.TagName.TEXTAREA=new goog.dom.TagName(\"TEXTAREA\");goog.dom.TagName.TFOOT=new goog.dom.TagName(\"TFOOT\");goog.dom.TagName.TH=new goog.dom.TagName(\"TH\");goog.dom.TagName.THEAD=new goog.dom.TagName(\"THEAD\");goog.dom.TagName.TIME=new goog.dom.TagName(\"TIME\");goog.dom.TagName.TITLE=new goog.dom.TagName(\"TITLE\");goog.dom.TagName.TR=new goog.dom.TagName(\"TR\");goog.dom.TagName.TRACK=new goog.dom.TagName(\"TRACK\");goog.dom.TagName.TT=new goog.dom.TagName(\"TT\");\ngoog.dom.TagName.U=new goog.dom.TagName(\"U\");goog.dom.TagName.UL=new goog.dom.TagName(\"UL\");goog.dom.TagName.VAR=new goog.dom.TagName(\"VAR\");goog.dom.TagName.VIDEO=new goog.dom.TagName(\"VIDEO\");goog.dom.TagName.WBR=new goog.dom.TagName(\"WBR\");goog.dom.tags={};goog.dom.tags.VOID_TAGS_={area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};goog.dom.tags.isVoidTag=function(a){return!0===goog.dom.tags.VOID_TAGS_[a]};goog.html={};goog.html.trustedtypes={};goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+\"#html\"):null;goog.string={};goog.string.TypedString=function(){};goog.string.Const=function(a,b){this.stringConstValueWithSecurityContract__googStringSecurityPrivate_=a===goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_&&b||\"\";this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_=goog.string.Const.TYPE_MARKER_};goog.string.Const.prototype.implementsGoogStringTypedString=!0;goog.string.Const.prototype.getTypedStringValue=function(){return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_};\ngoog.DEBUG&&(goog.string.Const.prototype.toString=function(){return\"Const{\"+this.stringConstValueWithSecurityContract__googStringSecurityPrivate_+\"}\"});goog.string.Const.unwrap=function(a){if(a instanceof goog.string.Const&&a.constructor===goog.string.Const&&a.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_===goog.string.Const.TYPE_MARKER_)return a.stringConstValueWithSecurityContract__googStringSecurityPrivate_;goog.asserts.fail(\"expected object of type Const, got '\"+a+\"'\");return\"type_error:Const\"};\ngoog.string.Const.from=function(a){return new goog.string.Const(goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_,a)};goog.string.Const.TYPE_MARKER_={};goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_={};goog.string.Const.EMPTY=goog.string.Const.from(\"\");goog.html.SafeScript=function(){this.privateDoNotAccessOrElseSafeScriptWrappedValue_=\"\";this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeScript.prototype.implementsGoogStringTypedString=!0;goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeScript.fromConstant=function(a){a=goog.string.Const.unwrap(a);return 0===a.length?goog.html.SafeScript.EMPTY:goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeScript.fromConstantAndArgs=function(a,b){for(var c=[],d=1;d<arguments.length;d++)c.push(goog.html.SafeScript.stringify_(arguments[d]));return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(\"(\"+goog.string.Const.unwrap(a)+\")(\"+c.join(\", \")+\");\")};goog.html.SafeScript.fromJson=function(a){return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(goog.html.SafeScript.stringify_(a))};goog.html.SafeScript.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString()};\ngoog.DEBUG&&(goog.html.SafeScript.prototype.toString=function(){return\"SafeScript{\"+this.privateDoNotAccessOrElseSafeScriptWrappedValue_+\"}\"});goog.html.SafeScript.unwrap=function(a){return goog.html.SafeScript.unwrapTrustedScript(a).toString()};\ngoog.html.SafeScript.unwrapTrustedScript=function(a){if(a instanceof goog.html.SafeScript&&a.constructor===goog.html.SafeScript&&a.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeScriptWrappedValue_;goog.asserts.fail(\"expected object of type SafeScript, got '\"+a+\"' of type \"+goog.typeOf(a));return\"type_error:SafeScript\"};\ngoog.html.SafeScript.stringify_=function(a){return JSON.stringify(a).replace(/</g,\"\\\\x3c\")};goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeScript).initSecurityPrivateDoNotAccessOrElse_(a)};\ngoog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeScriptWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScript(a):a;return this};goog.html.SafeScript.EMPTY=goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(\"\");goog.fs={};goog.fs.url={};goog.fs.url.createObjectUrl=function(a){return goog.fs.url.getUrlObject_().createObjectURL(a)};goog.fs.url.revokeObjectUrl=function(a){goog.fs.url.getUrlObject_().revokeObjectURL(a)};goog.fs.url.UrlObject_=function(){};goog.fs.url.UrlObject_.prototype.createObjectURL=function(a){};goog.fs.url.UrlObject_.prototype.revokeObjectURL=function(a){};\ngoog.fs.url.getUrlObject_=function(){var a=goog.fs.url.findUrlObject_();if(null!=a)return a;throw Error(\"This browser doesn't seem to support blob URLs\");};goog.fs.url.findUrlObject_=function(){return void 0!==goog.global.URL&&void 0!==goog.global.URL.createObjectURL?goog.global.URL:void 0!==goog.global.webkitURL&&void 0!==goog.global.webkitURL.createObjectURL?goog.global.webkitURL:void 0!==goog.global.createObjectURL?goog.global:null};\ngoog.fs.url.browserSupportsObjectUrls=function(){return null!=goog.fs.url.findUrlObject_()};goog.fs.blob={};goog.fs.blob.getBlob=function(a){var b=goog.global.BlobBuilder||goog.global.WebKitBlobBuilder;if(void 0!==b){b=new b;for(var c=0;c<arguments.length;c++)b.append(arguments[c]);return b.getBlob()}return goog.fs.blob.getBlobWithProperties(goog.array.toArray(arguments))};\ngoog.fs.blob.getBlobWithProperties=function(a,b,c){var d=goog.global.BlobBuilder||goog.global.WebKitBlobBuilder;if(void 0!==d){d=new d;for(var e=0;e<a.length;e++)d.append(a[e],c);return d.getBlob(b)}if(void 0!==goog.global.Blob)return d={},b&&(d.type=b),c&&(d.endings=c),new Blob(a,d);throw Error(\"This browser doesn't seem to support creating Blobs\");};goog.i18n={};goog.i18n.bidi={};goog.i18n.bidi.FORCE_RTL=!1;\ngoog.i18n.bidi.IS_RTL=goog.i18n.bidi.FORCE_RTL||(\"ar\"==goog.LOCALE.substring(0,2).toLowerCase()||\"fa\"==goog.LOCALE.substring(0,2).toLowerCase()||\"he\"==goog.LOCALE.substring(0,2).toLowerCase()||\"iw\"==goog.LOCALE.substring(0,2).toLowerCase()||\"ps\"==goog.LOCALE.substring(0,2).toLowerCase()||\"sd\"==goog.LOCALE.substring(0,2).toLowerCase()||\"ug\"==goog.LOCALE.substring(0,2).toLowerCase()||\"ur\"==goog.LOCALE.substring(0,2).toLowerCase()||\"yi\"==goog.LOCALE.substring(0,2).toLowerCase())&&(2==goog.LOCALE.length||\n\"-\"==goog.LOCALE.substring(2,3)||\"_\"==goog.LOCALE.substring(2,3))||3<=goog.LOCALE.length&&\"ckb\"==goog.LOCALE.substring(0,3).toLowerCase()&&(3==goog.LOCALE.length||\"-\"==goog.LOCALE.substring(3,4)||\"_\"==goog.LOCALE.substring(3,4))||7<=goog.LOCALE.length&&(\"-\"==goog.LOCALE.substring(2,3)||\"_\"==goog.LOCALE.substring(2,3))&&(\"adlm\"==goog.LOCALE.substring(3,7).toLowerCase()||\"arab\"==goog.LOCALE.substring(3,7).toLowerCase()||\"hebr\"==goog.LOCALE.substring(3,7).toLowerCase()||\"nkoo\"==goog.LOCALE.substring(3,\n7).toLowerCase()||\"rohg\"==goog.LOCALE.substring(3,7).toLowerCase()||\"thaa\"==goog.LOCALE.substring(3,7).toLowerCase())||8<=goog.LOCALE.length&&(\"-\"==goog.LOCALE.substring(3,4)||\"_\"==goog.LOCALE.substring(3,4))&&(\"adlm\"==goog.LOCALE.substring(4,8).toLowerCase()||\"arab\"==goog.LOCALE.substring(4,8).toLowerCase()||\"hebr\"==goog.LOCALE.substring(4,8).toLowerCase()||\"nkoo\"==goog.LOCALE.substring(4,8).toLowerCase()||\"rohg\"==goog.LOCALE.substring(4,8).toLowerCase()||\"thaa\"==goog.LOCALE.substring(4,8).toLowerCase());\ngoog.i18n.bidi.Format={LRE:\"\\u202a\",RLE:\"\\u202b\",PDF:\"\\u202c\",LRM:\"\\u200e\",RLM:\"\\u200f\"};goog.i18n.bidi.Dir={LTR:1,RTL:-1,NEUTRAL:0};goog.i18n.bidi.RIGHT=\"right\";goog.i18n.bidi.LEFT=\"left\";goog.i18n.bidi.I18N_RIGHT=goog.i18n.bidi.IS_RTL?goog.i18n.bidi.LEFT:goog.i18n.bidi.RIGHT;goog.i18n.bidi.I18N_LEFT=goog.i18n.bidi.IS_RTL?goog.i18n.bidi.RIGHT:goog.i18n.bidi.LEFT;\ngoog.i18n.bidi.toDir=function(a,b){return\"number\"==typeof a?0<a?goog.i18n.bidi.Dir.LTR:0>a?goog.i18n.bidi.Dir.RTL:b?null:goog.i18n.bidi.Dir.NEUTRAL:null==a?null:a?goog.i18n.bidi.Dir.RTL:goog.i18n.bidi.Dir.LTR};goog.i18n.bidi.ltrChars_=\"A-Za-z\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u02b8\\u0300-\\u0590\\u0900-\\u1fff\\u200e\\u2c00-\\ud801\\ud804-\\ud839\\ud83c-\\udbff\\uf900-\\ufb1c\\ufe00-\\ufe6f\\ufefd-\\uffff\";goog.i18n.bidi.rtlChars_=\"\\u0591-\\u06ef\\u06fa-\\u08ff\\u200f\\ud802-\\ud803\\ud83a-\\ud83b\\ufb1d-\\ufdff\\ufe70-\\ufefc\";\ngoog.i18n.bidi.htmlSkipReg_=/<[^>]*>|&[^;]+;/g;goog.i18n.bidi.stripHtmlIfNeeded_=function(a,b){return b?a.replace(goog.i18n.bidi.htmlSkipReg_,\"\"):a};goog.i18n.bidi.rtlCharReg_=new RegExp(\"[\"+goog.i18n.bidi.rtlChars_+\"]\");goog.i18n.bidi.ltrCharReg_=new RegExp(\"[\"+goog.i18n.bidi.ltrChars_+\"]\");goog.i18n.bidi.hasAnyRtl=function(a,b){return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.hasRtlChar=goog.i18n.bidi.hasAnyRtl;\ngoog.i18n.bidi.hasAnyLtr=function(a,b){return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.ltrRe_=new RegExp(\"^[\"+goog.i18n.bidi.ltrChars_+\"]\");goog.i18n.bidi.rtlRe_=new RegExp(\"^[\"+goog.i18n.bidi.rtlChars_+\"]\");goog.i18n.bidi.isRtlChar=function(a){return goog.i18n.bidi.rtlRe_.test(a)};goog.i18n.bidi.isLtrChar=function(a){return goog.i18n.bidi.ltrRe_.test(a)};goog.i18n.bidi.isNeutralChar=function(a){return!goog.i18n.bidi.isLtrChar(a)&&!goog.i18n.bidi.isRtlChar(a)};\ngoog.i18n.bidi.ltrDirCheckRe_=new RegExp(\"^[^\"+goog.i18n.bidi.rtlChars_+\"]*[\"+goog.i18n.bidi.ltrChars_+\"]\");goog.i18n.bidi.rtlDirCheckRe_=new RegExp(\"^[^\"+goog.i18n.bidi.ltrChars_+\"]*[\"+goog.i18n.bidi.rtlChars_+\"]\");goog.i18n.bidi.startsWithRtl=function(a,b){return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isRtlText=goog.i18n.bidi.startsWithRtl;\ngoog.i18n.bidi.startsWithLtr=function(a,b){return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isLtrText=goog.i18n.bidi.startsWithLtr;goog.i18n.bidi.isRequiredLtrRe_=/^http:\\/\\/.*/;goog.i18n.bidi.isNeutralText=function(a,b){a=goog.i18n.bidi.stripHtmlIfNeeded_(a,b);return goog.i18n.bidi.isRequiredLtrRe_.test(a)||!goog.i18n.bidi.hasAnyLtr(a)&&!goog.i18n.bidi.hasAnyRtl(a)};\ngoog.i18n.bidi.ltrExitDirCheckRe_=new RegExp(\"[\"+goog.i18n.bidi.ltrChars_+\"][^\"+goog.i18n.bidi.rtlChars_+\"]*$\");goog.i18n.bidi.rtlExitDirCheckRe_=new RegExp(\"[\"+goog.i18n.bidi.rtlChars_+\"][^\"+goog.i18n.bidi.ltrChars_+\"]*$\");goog.i18n.bidi.endsWithLtr=function(a,b){return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isLtrExitText=goog.i18n.bidi.endsWithLtr;\ngoog.i18n.bidi.endsWithRtl=function(a,b){return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isRtlExitText=goog.i18n.bidi.endsWithRtl;goog.i18n.bidi.rtlLocalesRe_=/^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;goog.i18n.bidi.isRtlLanguage=function(a){return goog.i18n.bidi.rtlLocalesRe_.test(a)};goog.i18n.bidi.bracketGuardTextRe_=/(\\(.*?\\)+)|(\\[.*?\\]+)|(\\{.*?\\}+)|(<.*?>+)/g;\ngoog.i18n.bidi.guardBracketInText=function(a,b){b=(void 0===b?goog.i18n.bidi.hasAnyRtl(a):b)?goog.i18n.bidi.Format.RLM:goog.i18n.bidi.Format.LRM;return a.replace(goog.i18n.bidi.bracketGuardTextRe_,b+\"$&\"+b)};goog.i18n.bidi.enforceRtlInHtml=function(a){return\"<\"==a.charAt(0)?a.replace(/<\\w+/,\"$& dir=rtl\"):\"\\n<span dir=rtl>\"+a+\"</span>\"};goog.i18n.bidi.enforceRtlInText=function(a){return goog.i18n.bidi.Format.RLE+a+goog.i18n.bidi.Format.PDF};\ngoog.i18n.bidi.enforceLtrInHtml=function(a){return\"<\"==a.charAt(0)?a.replace(/<\\w+/,\"$& dir=ltr\"):\"\\n<span dir=ltr>\"+a+\"</span>\"};goog.i18n.bidi.enforceLtrInText=function(a){return goog.i18n.bidi.Format.LRE+a+goog.i18n.bidi.Format.PDF};goog.i18n.bidi.dimensionsRe_=/:\\s*([.\\d][.\\w]*)\\s+([.\\d][.\\w]*)\\s+([.\\d][.\\w]*)\\s+([.\\d][.\\w]*)/g;goog.i18n.bidi.leftRe_=/left/gi;goog.i18n.bidi.rightRe_=/right/gi;goog.i18n.bidi.tempRe_=/%%%%/g;\ngoog.i18n.bidi.mirrorCSS=function(a){return a.replace(goog.i18n.bidi.dimensionsRe_,\":$1 $4 $3 $2\").replace(goog.i18n.bidi.leftRe_,\"%%%%\").replace(goog.i18n.bidi.rightRe_,goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_,goog.i18n.bidi.RIGHT)};goog.i18n.bidi.doubleQuoteSubstituteRe_=/([\\u0591-\\u05f2])\"/g;goog.i18n.bidi.singleQuoteSubstituteRe_=/([\\u0591-\\u05f2])'/g;\ngoog.i18n.bidi.normalizeHebrewQuote=function(a){return a.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_,\"$1\\u05f4\").replace(goog.i18n.bidi.singleQuoteSubstituteRe_,\"$1\\u05f3\")};goog.i18n.bidi.wordSeparatorRe_=/\\s+/;goog.i18n.bidi.hasNumeralsRe_=/[\\d\\u06f0-\\u06f9]/;goog.i18n.bidi.rtlDetectionThreshold_=.4;\ngoog.i18n.bidi.estimateDirection=function(a,b){var c=0,d=0,e=!1;a=goog.i18n.bidi.stripHtmlIfNeeded_(a,b).split(goog.i18n.bidi.wordSeparatorRe_);for(b=0;b<a.length;b++){var f=a[b];goog.i18n.bidi.startsWithRtl(f)?(c++,d++):goog.i18n.bidi.isRequiredLtrRe_.test(f)?e=!0:goog.i18n.bidi.hasAnyLtr(f)?d++:goog.i18n.bidi.hasNumeralsRe_.test(f)&&(e=!0)}return 0==d?e?goog.i18n.bidi.Dir.LTR:goog.i18n.bidi.Dir.NEUTRAL:c/d>goog.i18n.bidi.rtlDetectionThreshold_?goog.i18n.bidi.Dir.RTL:goog.i18n.bidi.Dir.LTR};\ngoog.i18n.bidi.detectRtlDirectionality=function(a,b){return goog.i18n.bidi.estimateDirection(a,b)==goog.i18n.bidi.Dir.RTL};goog.i18n.bidi.setElementDirAndAlign=function(a,b){a&&(b=goog.i18n.bidi.toDir(b))&&(a.style.textAlign=b==goog.i18n.bidi.Dir.RTL?goog.i18n.bidi.RIGHT:goog.i18n.bidi.LEFT,a.dir=b==goog.i18n.bidi.Dir.RTL?\"rtl\":\"ltr\")};\ngoog.i18n.bidi.setElementDirByTextDirectionality=function(a,b){switch(goog.i18n.bidi.estimateDirection(b)){case goog.i18n.bidi.Dir.LTR:a.dir=\"ltr\";break;case goog.i18n.bidi.Dir.RTL:a.dir=\"rtl\";break;default:a.removeAttribute(\"dir\")}};goog.i18n.bidi.DirectionalString=function(){};goog.html.TrustedResourceUrl=function(a,b){this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_=a===goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_&&b||\"\";this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString=!0;goog.html.TrustedResourceUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_.toString()};\ngoog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.TrustedResourceUrl.prototype.getDirection=function(){return goog.i18n.bidi.Dir.LTR};\ngoog.html.TrustedResourceUrl.prototype.cloneWithParams=function(a,b){var c=goog.html.TrustedResourceUrl.unwrap(this);c=goog.html.TrustedResourceUrl.URL_PARAM_PARSER_.exec(c);var d=c[3]||\"\";return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(c[1]+goog.html.TrustedResourceUrl.stringifyParams_(\"?\",c[2]||\"\",a)+goog.html.TrustedResourceUrl.stringifyParams_(\"#\",d,b))};\ngoog.DEBUG&&(goog.html.TrustedResourceUrl.prototype.toString=function(){return\"TrustedResourceUrl{\"+this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_+\"}\"});goog.html.TrustedResourceUrl.unwrap=function(a){return goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(a).toString()};\ngoog.html.TrustedResourceUrl.unwrapTrustedScriptURL=function(a){if(a instanceof goog.html.TrustedResourceUrl&&a.constructor===goog.html.TrustedResourceUrl&&a.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;goog.asserts.fail(\"expected object of type TrustedResourceUrl, got '\"+a+\"' of type \"+goog.typeOf(a));return\"type_error:TrustedResourceUrl\"};\ngoog.html.TrustedResourceUrl.format=function(a,b){var c=goog.string.Const.unwrap(a);if(!goog.html.TrustedResourceUrl.BASE_URL_.test(c))throw Error(\"Invalid TrustedResourceUrl format: \"+c);a=c.replace(goog.html.TrustedResourceUrl.FORMAT_MARKER_,function(a,e){if(!Object.prototype.hasOwnProperty.call(b,e))throw Error('Found marker, \"'+e+'\", in format string, \"'+c+'\", but no valid label mapping found in args: '+JSON.stringify(b));a=b[e];return a instanceof goog.string.Const?goog.string.Const.unwrap(a):\nencodeURIComponent(String(a))});return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.TrustedResourceUrl.FORMAT_MARKER_=/%{(\\w+)}/g;goog.html.TrustedResourceUrl.BASE_URL_=/^((https:)?\\/\\/[0-9a-z.:[\\]-]+\\/|\\/[^/\\\\]|[^:/\\\\%]+\\/|[^:/\\\\%]*[?#]|about:blank#)/i;goog.html.TrustedResourceUrl.URL_PARAM_PARSER_=/^([^?#]*)(\\?[^#]*)?(#[\\s\\S]*)?/;\ngoog.html.TrustedResourceUrl.formatWithParams=function(a,b,c,d){return goog.html.TrustedResourceUrl.format(a,b).cloneWithParams(c,d)};goog.html.TrustedResourceUrl.fromConstant=function(a){return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};goog.html.TrustedResourceUrl.fromConstants=function(a){for(var b=\"\",c=0;c<a.length;c++)b+=goog.string.Const.unwrap(a[c]);return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.TrustedResourceUrl.fromSafeScript=function(a){a=goog.fs.blob.getBlobWithProperties([goog.html.SafeScript.unwrap(a)],\"text/javascript\");a=goog.fs.url.createObjectUrl(a);return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};\ngoog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse=function(a){a=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScriptURL(a):a;return new goog.html.TrustedResourceUrl(goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_,a)};\ngoog.html.TrustedResourceUrl.stringifyParams_=function(a,b,c){if(null==c)return b;if(\"string\"===typeof c)return c?a+encodeURIComponent(c):\"\";for(var d in c){var e=c[d];e=Array.isArray(e)?e:[e];for(var f=0;f<e.length;f++){var g=e[f];null!=g&&(b||(b=a),b+=(b.length>a.length?\"&\":\"\")+encodeURIComponent(d)+\"=\"+encodeURIComponent(String(g)))}}return b};goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_={};goog.string.internal={};goog.string.internal.startsWith=function(a,b){return 0==a.lastIndexOf(b,0)};goog.string.internal.endsWith=function(a,b){var c=a.length-b.length;return 0<=c&&a.indexOf(b,c)==c};goog.string.internal.caseInsensitiveStartsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.substr(0,b.length))};goog.string.internal.caseInsensitiveEndsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.substr(a.length-b.length,b.length))};\ngoog.string.internal.caseInsensitiveEquals=function(a,b){return a.toLowerCase()==b.toLowerCase()};goog.string.internal.isEmptyOrWhitespace=function(a){return/^[\\s\\xa0]*$/.test(a)};goog.string.internal.trim=goog.TRUSTED_SITE&&String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\\s\\xa0]*([\\s\\S]*?)[\\s\\xa0]*$/.exec(a)[1]};goog.string.internal.caseInsensitiveCompare=function(a,b){a=String(a).toLowerCase();b=String(b).toLowerCase();return a<b?-1:a==b?0:1};\ngoog.string.internal.newLineToBr=function(a,b){return a.replace(/(\\r\\n|\\r|\\n)/g,b?\"<br />\":\"<br>\")};\ngoog.string.internal.htmlEscape=function(a,b){if(b)a=a.replace(goog.string.internal.AMP_RE_,\"&amp;\").replace(goog.string.internal.LT_RE_,\"&lt;\").replace(goog.string.internal.GT_RE_,\"&gt;\").replace(goog.string.internal.QUOT_RE_,\"&quot;\").replace(goog.string.internal.SINGLE_QUOTE_RE_,\"&#39;\").replace(goog.string.internal.NULL_RE_,\"&#0;\");else{if(!goog.string.internal.ALL_RE_.test(a))return a;-1!=a.indexOf(\"&\")&&(a=a.replace(goog.string.internal.AMP_RE_,\"&amp;\"));-1!=a.indexOf(\"<\")&&(a=a.replace(goog.string.internal.LT_RE_,\n\"&lt;\"));-1!=a.indexOf(\">\")&&(a=a.replace(goog.string.internal.GT_RE_,\"&gt;\"));-1!=a.indexOf('\"')&&(a=a.replace(goog.string.internal.QUOT_RE_,\"&quot;\"));-1!=a.indexOf(\"'\")&&(a=a.replace(goog.string.internal.SINGLE_QUOTE_RE_,\"&#39;\"));-1!=a.indexOf(\"\\x00\")&&(a=a.replace(goog.string.internal.NULL_RE_,\"&#0;\"))}return a};goog.string.internal.AMP_RE_=/&/g;goog.string.internal.LT_RE_=/</g;goog.string.internal.GT_RE_=/>/g;goog.string.internal.QUOT_RE_=/\"/g;goog.string.internal.SINGLE_QUOTE_RE_=/'/g;\ngoog.string.internal.NULL_RE_=/\\x00/g;goog.string.internal.ALL_RE_=/[\\x00&<>\"']/;goog.string.internal.whitespaceEscape=function(a,b){return goog.string.internal.newLineToBr(a.replace(/  /g,\" &#160;\"),b)};goog.string.internal.contains=function(a,b){return-1!=a.indexOf(b)};goog.string.internal.caseInsensitiveContains=function(a,b){return goog.string.internal.contains(a.toLowerCase(),b.toLowerCase())};\ngoog.string.internal.compareVersions=function(a,b){var c=0;a=goog.string.internal.trim(String(a)).split(\".\");b=goog.string.internal.trim(String(b)).split(\".\");for(var d=Math.max(a.length,b.length),e=0;0==c&&e<d;e++){var f=a[e]||\"\",g=b[e]||\"\";do{f=/(\\d*)(\\D*)(.*)/.exec(f)||[\"\",\"\",\"\",\"\"];g=/(\\d*)(\\D*)(.*)/.exec(g)||[\"\",\"\",\"\",\"\"];if(0==f[0].length&&0==g[0].length)break;c=0==f[1].length?0:parseInt(f[1],10);var h=0==g[1].length?0:parseInt(g[1],10);c=goog.string.internal.compareElements_(c,h)||goog.string.internal.compareElements_(0==\nf[2].length,0==g[2].length)||goog.string.internal.compareElements_(f[2],g[2]);f=f[3];g=g[3]}while(0==c)}return c};goog.string.internal.compareElements_=function(a,b){return a<b?-1:a>b?1:0};goog.html.SafeUrl=function(a,b){this.privateDoNotAccessOrElseSafeUrlWrappedValue_=a===goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_&&b||\"\";this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeUrl.INNOCUOUS_STRING=\"about:invalid#zClosurez\";goog.html.SafeUrl.prototype.implementsGoogStringTypedString=!0;goog.html.SafeUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString()};\ngoog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.SafeUrl.prototype.getDirection=function(){return goog.i18n.bidi.Dir.LTR};goog.DEBUG&&(goog.html.SafeUrl.prototype.toString=function(){return\"SafeUrl{\"+this.privateDoNotAccessOrElseSafeUrlWrappedValue_+\"}\"});\ngoog.html.SafeUrl.unwrap=function(a){if(a instanceof goog.html.SafeUrl&&a.constructor===goog.html.SafeUrl&&a.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeUrlWrappedValue_;goog.asserts.fail(\"expected object of type SafeUrl, got '\"+a+\"' of type \"+goog.typeOf(a));return\"type_error:SafeUrl\"};goog.html.SafeUrl.fromConstant=function(a){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};\ngoog.html.SAFE_MIME_TYPE_PATTERN_=/^(?:audio\\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\\/csv|video\\/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\\w+=(?:\\w+|\"[\\w;,= ]+\"))*$/i;goog.html.SafeUrl.isSafeMimeType=function(a){return goog.html.SAFE_MIME_TYPE_PATTERN_.test(a)};\ngoog.html.SafeUrl.fromBlob=function(a){a=goog.html.SafeUrl.isSafeMimeType(a.type)?goog.fs.url.createObjectUrl(a):goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromMediaSource=function(a){goog.asserts.assert(\"MediaSource\"in goog.global,\"No support for MediaSource\");a=a instanceof MediaSource?goog.fs.url.createObjectUrl(a):goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.DATA_URL_PATTERN_=/^data:(.*);base64,[a-z0-9+\\/]+=*$/i;goog.html.SafeUrl.fromDataUrl=function(a){a=a.replace(/(%0A|%0D)/g,\"\");var b=a.match(goog.html.DATA_URL_PATTERN_);b=b&&goog.html.SafeUrl.isSafeMimeType(b[1]);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b?a:goog.html.SafeUrl.INNOCUOUS_STRING)};goog.html.SafeUrl.fromTelUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,\"tel:\")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SIP_URL_PATTERN_=/^sip[s]?:[+a-z0-9_.!$%&'*\\/=^`{|}~-]+@([a-z0-9-]+\\.)+[a-z0-9]{2,63}$/i;goog.html.SafeUrl.fromSipUrl=function(a){goog.html.SIP_URL_PATTERN_.test(decodeURIComponent(a))||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromFacebookMessengerUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,\"fb-messenger://share\")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeUrl.fromWhatsAppUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,\"whatsapp://send\")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromSmsUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,\"sms:\")&&goog.html.SafeUrl.isSmsUrlBodyValid_(a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeUrl.isSmsUrlBodyValid_=function(a){var b=a.indexOf(\"#\");0<b&&(a=a.substring(0,b));b=a.match(/[?&]body=/gi);if(!b)return!0;if(1<b.length)return!1;a=a.match(/[?&]body=([^&]*)/)[1];if(!a)return!0;try{decodeURIComponent(a)}catch(c){return!1}return/^(?:[a-z0-9\\-_.~]|%[0-9a-f]{2})+$/i.test(a)};goog.html.SafeUrl.fromSshUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,\"ssh://\")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeUrl.sanitizeChromeExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^chrome-extension:\\/\\/([^\\/]+)\\//,a,b)};goog.html.SafeUrl.sanitizeFirefoxExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^moz-extension:\\/\\/([^\\/]+)\\//,a,b)};goog.html.SafeUrl.sanitizeEdgeExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^ms-browser-extension:\\/\\/([^\\/]+)\\//,a,b)};\ngoog.html.SafeUrl.sanitizeExtensionUrl_=function(a,b,c){(a=a.exec(b))?(a=a[1],-1==(c instanceof goog.string.Const?[goog.string.Const.unwrap(c)]:c.map(function(a){return goog.string.Const.unwrap(a)})).indexOf(a)&&(b=goog.html.SafeUrl.INNOCUOUS_STRING)):b=goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};goog.html.SafeUrl.fromTrustedResourceUrl=function(a){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.TrustedResourceUrl.unwrap(a))};\ngoog.html.SAFE_URL_PATTERN_=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;goog.html.SafeUrl.SAFE_URL_PATTERN=goog.html.SAFE_URL_PATTERN_;goog.html.SafeUrl.sanitize=function(a){if(a instanceof goog.html.SafeUrl)return a;a=\"object\"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);goog.html.SAFE_URL_PATTERN_.test(a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeUrl.sanitizeAssertUnchanged=function(a,b){if(a instanceof goog.html.SafeUrl)return a;a=\"object\"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);if(b&&/^data:/i.test(a)&&(b=goog.html.SafeUrl.fromDataUrl(a),b.getTypedStringValue()==a))return b;goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(a),\"%s does not match the safe URL pattern\",a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse=function(a){return new goog.html.SafeUrl(goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_,a)};goog.html.SafeUrl.ABOUT_BLANK=goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\"about:blank\");goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_={};goog.html.SafeStyle=function(){this.privateDoNotAccessOrElseSafeStyleWrappedValue_=\"\";this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeStyle.prototype.implementsGoogStringTypedString=!0;goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};\ngoog.html.SafeStyle.fromConstant=function(a){a=goog.string.Const.unwrap(a);if(0===a.length)return goog.html.SafeStyle.EMPTY;goog.asserts.assert(goog.string.internal.endsWith(a,\";\"),\"Last character of style string is not ';': \"+a);goog.asserts.assert(goog.string.internal.contains(a,\":\"),\"Style string must contain at least one ':', to specify a \\\"name: value\\\" pair: \"+a);return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeStyle.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_};goog.DEBUG&&(goog.html.SafeStyle.prototype.toString=function(){return\"SafeStyle{\"+this.privateDoNotAccessOrElseSafeStyleWrappedValue_+\"}\"});\ngoog.html.SafeStyle.unwrap=function(a){if(a instanceof goog.html.SafeStyle&&a.constructor===goog.html.SafeStyle&&a.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeStyleWrappedValue_;goog.asserts.fail(\"expected object of type SafeStyle, got '\"+a+\"' of type \"+goog.typeOf(a));return\"type_error:SafeStyle\"};goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(a)};\ngoog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeStyleWrappedValue_=a;return this};goog.html.SafeStyle.EMPTY=goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\"\");goog.html.SafeStyle.INNOCUOUS_STRING=\"zClosurez\";\ngoog.html.SafeStyle.create=function(a){var b=\"\",c;for(c in a){if(!/^[-_a-zA-Z0-9]+$/.test(c))throw Error(\"Name allows only [-_a-zA-Z0-9], got: \"+c);var d=a[c];null!=d&&(d=Array.isArray(d)?goog.array.map(d,goog.html.SafeStyle.sanitizePropertyValue_).join(\" \"):goog.html.SafeStyle.sanitizePropertyValue_(d),b+=c+\":\"+d+\";\")}return b?goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):goog.html.SafeStyle.EMPTY};\ngoog.html.SafeStyle.sanitizePropertyValue_=function(a){if(a instanceof goog.html.SafeUrl)return'url(\"'+goog.html.SafeUrl.unwrap(a).replace(/</g,\"%3c\").replace(/[\\\\\"]/g,\"\\\\$&\")+'\")';a=a instanceof goog.string.Const?goog.string.Const.unwrap(a):goog.html.SafeStyle.sanitizePropertyValueString_(String(a));if(/[{;}]/.test(a))throw new goog.asserts.AssertionError(\"Value does not allow [{;}], got: %s.\",[a]);return a};\ngoog.html.SafeStyle.sanitizePropertyValueString_=function(a){var b=a.replace(goog.html.SafeStyle.FUNCTIONS_RE_,\"$1\").replace(goog.html.SafeStyle.FUNCTIONS_RE_,\"$1\").replace(goog.html.SafeStyle.URL_RE_,\"url\");if(goog.html.SafeStyle.VALUE_RE_.test(b)){if(goog.html.SafeStyle.COMMENT_RE_.test(a))return goog.asserts.fail(\"String value disallows comments, got: \"+a),goog.html.SafeStyle.INNOCUOUS_STRING;if(!goog.html.SafeStyle.hasBalancedQuotes_(a))return goog.asserts.fail(\"String value requires balanced quotes, got: \"+\na),goog.html.SafeStyle.INNOCUOUS_STRING;if(!goog.html.SafeStyle.hasBalancedSquareBrackets_(a))return goog.asserts.fail(\"String value requires balanced square brackets and one identifier per pair of brackets, got: \"+a),goog.html.SafeStyle.INNOCUOUS_STRING}else return goog.asserts.fail(\"String value allows only \"+goog.html.SafeStyle.VALUE_ALLOWED_CHARS_+\" and simple functions, got: \"+a),goog.html.SafeStyle.INNOCUOUS_STRING;return goog.html.SafeStyle.sanitizeUrl_(a)};\ngoog.html.SafeStyle.hasBalancedQuotes_=function(a){for(var b=!0,c=!0,d=0;d<a.length;d++){var e=a.charAt(d);\"'\"==e&&c?b=!b:'\"'==e&&b&&(c=!c)}return b&&c};goog.html.SafeStyle.hasBalancedSquareBrackets_=function(a){for(var b=!0,c=/^[-_a-zA-Z0-9]$/,d=0;d<a.length;d++){var e=a.charAt(d);if(\"]\"==e){if(b)return!1;b=!0}else if(\"[\"==e){if(!b)return!1;b=!1}else if(!b&&!c.test(e))return!1}return b};goog.html.SafeStyle.VALUE_ALLOWED_CHARS_=\"[-,.\\\"'%_!# a-zA-Z0-9\\\\[\\\\]]\";\ngoog.html.SafeStyle.VALUE_RE_=new RegExp(\"^\"+goog.html.SafeStyle.VALUE_ALLOWED_CHARS_+\"+$\");goog.html.SafeStyle.URL_RE_=/\\b(url\\([ \\t\\n]*)('[ -&(-\\[\\]-~]*'|\"[ !#-\\[\\]-~]*\"|[!#-&*-\\[\\]-~]*)([ \\t\\n]*\\))/g;goog.html.SafeStyle.ALLOWED_FUNCTIONS_=\"calc cubic-bezier fit-content hsl hsla linear-gradient matrix minmax repeat rgb rgba (rotate|scale|translate)(X|Y|Z|3d)?\".split(\" \");\ngoog.html.SafeStyle.FUNCTIONS_RE_=new RegExp(\"\\\\b(\"+goog.html.SafeStyle.ALLOWED_FUNCTIONS_.join(\"|\")+\")\\\\([-+*/0-9a-z.%\\\\[\\\\], ]+\\\\)\",\"g\");goog.html.SafeStyle.COMMENT_RE_=/\\/\\*/;goog.html.SafeStyle.sanitizeUrl_=function(a){return a.replace(goog.html.SafeStyle.URL_RE_,function(a,c,d,e){var b=\"\";d=d.replace(/^(['\"])(.*)\\1$/,function(a,c,d){b=c;return d});a=goog.html.SafeUrl.sanitize(d).getTypedStringValue();return c+b+a+b+e})};\ngoog.html.SafeStyle.concat=function(a){var b=\"\",c=function(a){Array.isArray(a)?goog.array.forEach(a,c):b+=goog.html.SafeStyle.unwrap(a)};goog.array.forEach(arguments,c);return b?goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):goog.html.SafeStyle.EMPTY};goog.html.SafeStyleSheet=function(){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_=\"\";this.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString=!0;goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};\ngoog.html.SafeStyleSheet.createRule=function(a,b){if(goog.string.internal.contains(a,\"<\"))throw Error(\"Selector does not allow '<', got: \"+a);var c=a.replace(/('|\")((?!\\1)[^\\r\\n\\f\\\\]|\\\\[\\s\\S])*\\1/g,\"\");if(!/^[-_a-zA-Z0-9#.:* ,>+~[\\]()=^$|]+$/.test(c))throw Error(\"Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\\\]()=^$|] and strings, got: \"+a);if(!goog.html.SafeStyleSheet.hasBalancedBrackets_(c))throw Error(\"() and [] in selector must be balanced, got: \"+a);b instanceof goog.html.SafeStyle||(b=goog.html.SafeStyle.create(b));\na=a+\"{\"+goog.html.SafeStyle.unwrap(b).replace(/</g,\"\\\\3C \")+\"}\";return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeStyleSheet.hasBalancedBrackets_=function(a){for(var b={\"(\":\")\",\"[\":\"]\"},c=[],d=0;d<a.length;d++){var e=a[d];if(b[e])c.push(b[e]);else if(goog.object.contains(b,e)&&c.pop()!=e)return!1}return 0==c.length};\ngoog.html.SafeStyleSheet.concat=function(a){var b=\"\",c=function(a){Array.isArray(a)?goog.array.forEach(a,c):b+=goog.html.SafeStyleSheet.unwrap(a)};goog.array.forEach(arguments,c);return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.SafeStyleSheet.fromConstant=function(a){a=goog.string.Const.unwrap(a);if(0===a.length)return goog.html.SafeStyleSheet.EMPTY;goog.asserts.assert(!goog.string.internal.contains(a,\"<\"),\"Forbidden '<' character in style sheet string: \"+a);return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeStyleSheet.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_};\ngoog.DEBUG&&(goog.html.SafeStyleSheet.prototype.toString=function(){return\"SafeStyleSheet{\"+this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_+\"}\"});\ngoog.html.SafeStyleSheet.unwrap=function(a){if(a instanceof goog.html.SafeStyleSheet&&a.constructor===goog.html.SafeStyleSheet&&a.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;goog.asserts.fail(\"expected object of type SafeStyleSheet, got '\"+a+\"' of type \"+goog.typeOf(a));return\"type_error:SafeStyleSheet\"};\ngoog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeStyleSheet).initSecurityPrivateDoNotAccessOrElse_(a)};goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_=a;return this};goog.html.SafeStyleSheet.EMPTY=goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(\"\");goog.labs={};goog.labs.userAgent={};goog.labs.userAgent.util={};goog.labs.userAgent.util.getNativeUserAgentString_=function(){var a=goog.labs.userAgent.util.getNavigator_();return a&&(a=a.userAgent)?a:\"\"};goog.labs.userAgent.util.getNavigator_=function(){return goog.global.navigator};goog.labs.userAgent.util.userAgent_=goog.labs.userAgent.util.getNativeUserAgentString_();goog.labs.userAgent.util.setUserAgent=function(a){goog.labs.userAgent.util.userAgent_=a||goog.labs.userAgent.util.getNativeUserAgentString_()};\ngoog.labs.userAgent.util.getUserAgent=function(){return goog.labs.userAgent.util.userAgent_};goog.labs.userAgent.util.matchUserAgent=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.internal.contains(b,a)};goog.labs.userAgent.util.matchUserAgentIgnoreCase=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.internal.caseInsensitiveContains(b,a)};\ngoog.labs.userAgent.util.extractVersionTuples=function(a){for(var b=/(\\w[\\w ]+)\\/([^\\s]+)\\s*(?:\\((.*?)\\))?/g,c=[],d;d=b.exec(a);)c.push([d[1],d[2],d[3]||void 0]);return c};goog.labs.userAgent.browser={};goog.labs.userAgent.browser.matchOpera_=function(){return goog.labs.userAgent.util.matchUserAgent(\"Opera\")};goog.labs.userAgent.browser.matchIE_=function(){return goog.labs.userAgent.util.matchUserAgent(\"Trident\")||goog.labs.userAgent.util.matchUserAgent(\"MSIE\")};goog.labs.userAgent.browser.matchEdgeHtml_=function(){return goog.labs.userAgent.util.matchUserAgent(\"Edge\")};goog.labs.userAgent.browser.matchEdgeChromium_=function(){return goog.labs.userAgent.util.matchUserAgent(\"Edg/\")};\ngoog.labs.userAgent.browser.matchOperaChromium_=function(){return goog.labs.userAgent.util.matchUserAgent(\"OPR\")};goog.labs.userAgent.browser.matchFirefox_=function(){return goog.labs.userAgent.util.matchUserAgent(\"Firefox\")||goog.labs.userAgent.util.matchUserAgent(\"FxiOS\")};\ngoog.labs.userAgent.browser.matchSafari_=function(){return goog.labs.userAgent.util.matchUserAgent(\"Safari\")&&!(goog.labs.userAgent.browser.matchChrome_()||goog.labs.userAgent.browser.matchCoast_()||goog.labs.userAgent.browser.matchOpera_()||goog.labs.userAgent.browser.matchEdgeHtml_()||goog.labs.userAgent.browser.matchEdgeChromium_()||goog.labs.userAgent.browser.matchOperaChromium_()||goog.labs.userAgent.browser.matchFirefox_()||goog.labs.userAgent.browser.isSilk()||goog.labs.userAgent.util.matchUserAgent(\"Android\"))};\ngoog.labs.userAgent.browser.matchCoast_=function(){return goog.labs.userAgent.util.matchUserAgent(\"Coast\")};goog.labs.userAgent.browser.matchIosWebview_=function(){return(goog.labs.userAgent.util.matchUserAgent(\"iPad\")||goog.labs.userAgent.util.matchUserAgent(\"iPhone\"))&&!goog.labs.userAgent.browser.matchSafari_()&&!goog.labs.userAgent.browser.matchChrome_()&&!goog.labs.userAgent.browser.matchCoast_()&&!goog.labs.userAgent.browser.matchFirefox_()&&goog.labs.userAgent.util.matchUserAgent(\"AppleWebKit\")};\ngoog.labs.userAgent.browser.matchChrome_=function(){return(goog.labs.userAgent.util.matchUserAgent(\"Chrome\")||goog.labs.userAgent.util.matchUserAgent(\"CriOS\"))&&!goog.labs.userAgent.browser.matchEdgeHtml_()};goog.labs.userAgent.browser.matchAndroidBrowser_=function(){return goog.labs.userAgent.util.matchUserAgent(\"Android\")&&!(goog.labs.userAgent.browser.isChrome()||goog.labs.userAgent.browser.isFirefox()||goog.labs.userAgent.browser.isOpera()||goog.labs.userAgent.browser.isSilk())};\ngoog.labs.userAgent.browser.isOpera=goog.labs.userAgent.browser.matchOpera_;goog.labs.userAgent.browser.isIE=goog.labs.userAgent.browser.matchIE_;goog.labs.userAgent.browser.isEdge=goog.labs.userAgent.browser.matchEdgeHtml_;goog.labs.userAgent.browser.isEdgeChromium=goog.labs.userAgent.browser.matchEdgeChromium_;goog.labs.userAgent.browser.isOperaChromium=goog.labs.userAgent.browser.matchOperaChromium_;goog.labs.userAgent.browser.isFirefox=goog.labs.userAgent.browser.matchFirefox_;\ngoog.labs.userAgent.browser.isSafari=goog.labs.userAgent.browser.matchSafari_;goog.labs.userAgent.browser.isCoast=goog.labs.userAgent.browser.matchCoast_;goog.labs.userAgent.browser.isIosWebview=goog.labs.userAgent.browser.matchIosWebview_;goog.labs.userAgent.browser.isChrome=goog.labs.userAgent.browser.matchChrome_;goog.labs.userAgent.browser.isAndroidBrowser=goog.labs.userAgent.browser.matchAndroidBrowser_;goog.labs.userAgent.browser.isSilk=function(){return goog.labs.userAgent.util.matchUserAgent(\"Silk\")};\ngoog.labs.userAgent.browser.getVersion=function(){function a(a){a=goog.array.find(a,d);return c[a]||\"\"}var b=goog.labs.userAgent.util.getUserAgent();if(goog.labs.userAgent.browser.isIE())return goog.labs.userAgent.browser.getIEVersion_(b);b=goog.labs.userAgent.util.extractVersionTuples(b);var c={};goog.array.forEach(b,function(a){c[a[0]]=a[1]});var d=goog.partial(goog.object.containsKey,c);return goog.labs.userAgent.browser.isOpera()?a([\"Version\",\"Opera\"]):goog.labs.userAgent.browser.isEdge()?a([\"Edge\"]):\ngoog.labs.userAgent.browser.isEdgeChromium()?a([\"Edg\"]):goog.labs.userAgent.browser.isChrome()?a([\"Chrome\",\"CriOS\",\"HeadlessChrome\"]):(b=b[2])&&b[1]||\"\"};goog.labs.userAgent.browser.isVersionOrHigher=function(a){return 0<=goog.string.internal.compareVersions(goog.labs.userAgent.browser.getVersion(),a)};\ngoog.labs.userAgent.browser.getIEVersion_=function(a){var b=/rv: *([\\d\\.]*)/.exec(a);if(b&&b[1])return b[1];b=\"\";var c=/MSIE +([\\d\\.]+)/.exec(a);if(c&&c[1])if(a=/Trident\\/(\\d.\\d)/.exec(a),\"7.0\"==c[1])if(a&&a[1])switch(a[1]){case \"4.0\":b=\"8.0\";break;case \"5.0\":b=\"9.0\";break;case \"6.0\":b=\"10.0\";break;case \"7.0\":b=\"11.0\"}else b=\"7.0\";else b=c[1];return b};goog.html.SafeHtml=function(){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_=\"\";this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;this.dir_=null};goog.html.SafeHtml.ENABLE_ERROR_MESSAGES=goog.DEBUG;goog.html.SafeHtml.SUPPORT_STYLE_ATTRIBUTE=!0;goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.SafeHtml.prototype.getDirection=function(){return this.dir_};\ngoog.html.SafeHtml.prototype.implementsGoogStringTypedString=!0;goog.html.SafeHtml.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString()};goog.DEBUG&&(goog.html.SafeHtml.prototype.toString=function(){return\"SafeHtml{\"+this.privateDoNotAccessOrElseSafeHtmlWrappedValue_+\"}\"});goog.html.SafeHtml.unwrap=function(a){return goog.html.SafeHtml.unwrapTrustedHTML(a).toString()};\ngoog.html.SafeHtml.unwrapTrustedHTML=function(a){if(a instanceof goog.html.SafeHtml&&a.constructor===goog.html.SafeHtml&&a.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeHtmlWrappedValue_;goog.asserts.fail(\"expected object of type SafeHtml, got '\"+a+\"' of type \"+goog.typeOf(a));return\"type_error:SafeHtml\"};\ngoog.html.SafeHtml.htmlEscape=function(a){if(a instanceof goog.html.SafeHtml)return a;var b=\"object\"==typeof a,c=null;b&&a.implementsGoogI18nBidiDirectionalString&&(c=a.getDirection());a=b&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.htmlEscape(a),c)};\ngoog.html.SafeHtml.htmlEscapePreservingNewlines=function(a){if(a instanceof goog.html.SafeHtml)return a;a=goog.html.SafeHtml.htmlEscape(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.newLineToBr(goog.html.SafeHtml.unwrap(a)),a.getDirection())};\ngoog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces=function(a){if(a instanceof goog.html.SafeHtml)return a;a=goog.html.SafeHtml.htmlEscape(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.whitespaceEscape(goog.html.SafeHtml.unwrap(a)),a.getDirection())};goog.html.SafeHtml.from=goog.html.SafeHtml.htmlEscape;\ngoog.html.SafeHtml.comment=function(a){return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\"\\x3c!--\"+goog.string.internal.htmlEscape(a)+\"--\\x3e\",null)};goog.html.SafeHtml.VALID_NAMES_IN_TAG_=/^[a-zA-Z0-9-]+$/;goog.html.SafeHtml.URL_ATTRIBUTES_={action:!0,cite:!0,data:!0,formaction:!0,href:!0,manifest:!0,poster:!0,src:!0};goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_={APPLET:!0,BASE:!0,EMBED:!0,IFRAME:!0,LINK:!0,MATH:!0,META:!0,OBJECT:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};\ngoog.html.SafeHtml.create=function(a,b,c){goog.html.SafeHtml.verifyTagName(String(a));return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(String(a),b,c)};\ngoog.html.SafeHtml.verifyTagName=function(a){if(!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(a))throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?\"Invalid tag name <\"+a+\">.\":\"\");if(a.toUpperCase()in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_)throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?\"Tag name <\"+a+\"> is not allowed for SafeHtml.\":\"\");};\ngoog.html.SafeHtml.createIframe=function(a,b,c,d){a&&goog.html.TrustedResourceUrl.unwrap(a);var e={};e.src=a||null;e.srcdoc=b&&goog.html.SafeHtml.unwrap(b);a=goog.html.SafeHtml.combineAttributes(e,{sandbox:\"\"},c);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\"iframe\",a,d)};\ngoog.html.SafeHtml.createSandboxIframe=function(a,b,c,d){if(!goog.html.SafeHtml.canUseSandboxIframe())throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?\"The browser does not support sandboxed iframes.\":\"\");var e={};e.src=a?goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a)):null;e.srcdoc=b||null;e.sandbox=\"\";a=goog.html.SafeHtml.combineAttributes(e,{},c);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\"iframe\",a,d)};\ngoog.html.SafeHtml.canUseSandboxIframe=function(){return goog.global.HTMLIFrameElement&&\"sandbox\"in goog.global.HTMLIFrameElement.prototype};goog.html.SafeHtml.createScriptSrc=function(a,b){goog.html.TrustedResourceUrl.unwrap(a);a=goog.html.SafeHtml.combineAttributes({src:a},{},b);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\"script\",a)};\ngoog.html.SafeHtml.createScript=function(a,b){for(var c in b){var d=c.toLowerCase();if(\"language\"==d||\"src\"==d||\"text\"==d||\"type\"==d)throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'Cannot set \"'+d+'\" attribute':\"\");}c=\"\";a=goog.array.concat(a);for(d=0;d<a.length;d++)c+=goog.html.SafeScript.unwrap(a[d]);a=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c,goog.i18n.bidi.Dir.NEUTRAL);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\"script\",b,a)};\ngoog.html.SafeHtml.createStyle=function(a,b){b=goog.html.SafeHtml.combineAttributes({type:\"text/css\"},{},b);var c=\"\";a=goog.array.concat(a);for(var d=0;d<a.length;d++)c+=goog.html.SafeStyleSheet.unwrap(a[d]);a=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c,goog.i18n.bidi.Dir.NEUTRAL);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\"style\",b,a)};\ngoog.html.SafeHtml.createMetaRefresh=function(a,b){a=goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a));(goog.labs.userAgent.browser.isIE()||goog.labs.userAgent.browser.isEdge())&&goog.string.internal.contains(a,\";\")&&(a=\"'\"+a.replace(/'/g,\"%27\")+\"'\");return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\"meta\",{\"http-equiv\":\"refresh\",content:(b||0)+\"; url=\"+a})};\ngoog.html.SafeHtml.getAttrNameAndValue_=function(a,b,c){if(c instanceof goog.string.Const)c=goog.string.Const.unwrap(c);else if(\"style\"==b.toLowerCase())if(goog.html.SafeHtml.SUPPORT_STYLE_ATTRIBUTE)c=goog.html.SafeHtml.getStyleValue_(c);else throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'Attribute \"style\" not supported.':\"\");else{if(/^on/i.test(b))throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'Attribute \"'+b+'\" requires goog.string.Const value, \"'+c+'\" given.':\"\");if(b.toLowerCase()in\ngoog.html.SafeHtml.URL_ATTRIBUTES_)if(c instanceof goog.html.TrustedResourceUrl)c=goog.html.TrustedResourceUrl.unwrap(c);else if(c instanceof goog.html.SafeUrl)c=goog.html.SafeUrl.unwrap(c);else if(\"string\"===typeof c)c=goog.html.SafeUrl.sanitize(c).getTypedStringValue();else throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'Attribute \"'+b+'\" on tag \"'+a+'\" requires goog.html.SafeUrl, goog.string.Const, or string, value \"'+c+'\" given.':\"\");}c.implementsGoogStringTypedString&&(c=c.getTypedStringValue());\ngoog.asserts.assert(\"string\"===typeof c||\"number\"===typeof c,\"String or number value expected, got \"+typeof c+\" with value: \"+c);return b+'=\"'+goog.string.internal.htmlEscape(String(c))+'\"'};goog.html.SafeHtml.getStyleValue_=function(a){if(!goog.isObject(a))throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'The \"style\" attribute requires goog.html.SafeStyle or map of style properties, '+typeof a+\" given: \"+a:\"\");a instanceof goog.html.SafeStyle||(a=goog.html.SafeStyle.create(a));return goog.html.SafeStyle.unwrap(a)};\ngoog.html.SafeHtml.createWithDir=function(a,b,c,d){b=goog.html.SafeHtml.create(b,c,d);b.dir_=a;return b};\ngoog.html.SafeHtml.join=function(a,b){a=goog.html.SafeHtml.htmlEscape(a);var c=a.getDirection(),d=[],e=function(a){Array.isArray(a)?goog.array.forEach(a,e):(a=goog.html.SafeHtml.htmlEscape(a),d.push(goog.html.SafeHtml.unwrap(a)),a=a.getDirection(),c==goog.i18n.bidi.Dir.NEUTRAL?c=a:a!=goog.i18n.bidi.Dir.NEUTRAL&&c!=a&&(c=null))};goog.array.forEach(b,e);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(d.join(goog.html.SafeHtml.unwrap(a)),c)};\ngoog.html.SafeHtml.concat=function(a){return goog.html.SafeHtml.join(goog.html.SafeHtml.EMPTY,Array.prototype.slice.call(arguments))};goog.html.SafeHtml.concatWithDir=function(a,b){var c=goog.html.SafeHtml.concat(goog.array.slice(arguments,1));c.dir_=a;return c};goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse=function(a,b){return(new goog.html.SafeHtml).initSecurityPrivateDoNotAccessOrElse_(a,b)};\ngoog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a,b){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createHTML(a):a;this.dir_=b;return this};\ngoog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse=function(a,b,c){var d=null;var e=\"<\"+a+goog.html.SafeHtml.stringifyAttributes(a,b);null==c?c=[]:Array.isArray(c)||(c=[c]);goog.dom.tags.isVoidTag(a.toLowerCase())?(goog.asserts.assert(!c.length,\"Void tag <\"+a+\"> does not allow content.\"),e+=\">\"):(d=goog.html.SafeHtml.concat(c),e+=\">\"+goog.html.SafeHtml.unwrap(d)+\"</\"+a+\">\",d=d.getDirection());(a=b&&b.dir)&&(d=/^(ltr|rtl|auto)$/i.test(a)?goog.i18n.bidi.Dir.NEUTRAL:null);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(e,\nd)};goog.html.SafeHtml.stringifyAttributes=function(a,b){var c=\"\";if(b)for(var d in b){if(!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(d))throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'Invalid attribute name \"'+d+'\".':\"\");var e=b[d];null!=e&&(c+=\" \"+goog.html.SafeHtml.getAttrNameAndValue_(a,d,e))}return c};\ngoog.html.SafeHtml.combineAttributes=function(a,b,c){var d={},e;for(e in a)goog.asserts.assert(e.toLowerCase()==e,\"Must be lower case\"),d[e]=a[e];for(e in b)goog.asserts.assert(e.toLowerCase()==e,\"Must be lower case\"),d[e]=b[e];if(c)for(e in c){var f=e.toLowerCase();if(f in a)throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'Cannot override \"'+f+'\" attribute, got \"'+e+'\" with value \"'+c[e]+'\"':\"\");f in b&&delete d[f];d[e]=c[e]}return d};\ngoog.html.SafeHtml.DOCTYPE_HTML=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\"<!DOCTYPE html>\",goog.i18n.bidi.Dir.NEUTRAL);goog.html.SafeHtml.EMPTY=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\"\",goog.i18n.bidi.Dir.NEUTRAL);goog.html.SafeHtml.BR=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\"<br>\",goog.i18n.bidi.Dir.NEUTRAL);goog.html.uncheckedconversions={};goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract=function(a,b,c){goog.asserts.assertString(goog.string.Const.unwrap(a),\"must provide justification\");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),\"must provide non-empty justification\");return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(b,c||null)};\ngoog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),\"must provide justification\");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),\"must provide non-empty justification\");return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),\"must provide justification\");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),\"must provide non-empty justification\");return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),\"must provide justification\");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),\"must provide non-empty justification\");return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),\"must provide justification\");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),\"must provide non-empty justification\");return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),\"must provide justification\");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),\"must provide non-empty justification\");return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};goog.dom.safe={};goog.dom.safe.InsertAdjacentHtmlPosition={AFTERBEGIN:\"afterbegin\",AFTEREND:\"afterend\",BEFOREBEGIN:\"beforebegin\",BEFOREEND:\"beforeend\"};goog.dom.safe.insertAdjacentHtml=function(a,b,c){a.insertAdjacentHTML(b,goog.html.SafeHtml.unwrapTrustedHTML(c))};goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_={MATH:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};\ngoog.dom.safe.isInnerHtmlCleanupRecursive_=goog.functions.cacheReturnValue(function(){if(goog.DEBUG&&\"undefined\"===typeof document)return!1;var a=document.createElement(\"div\"),b=document.createElement(\"div\");b.appendChild(document.createElement(\"div\"));a.appendChild(b);if(goog.DEBUG&&!a.firstChild)return!1;b=a.firstChild.firstChild;a.innerHTML=goog.html.SafeHtml.unwrapTrustedHTML(goog.html.SafeHtml.EMPTY);return!b.parentElement});\ngoog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse=function(a,b){if(goog.dom.safe.isInnerHtmlCleanupRecursive_())for(;a.lastChild;)a.removeChild(a.lastChild);a.innerHTML=goog.html.SafeHtml.unwrapTrustedHTML(b)};\ngoog.dom.safe.setInnerHtml=function(a,b){if(goog.asserts.ENABLE_ASSERTS){var c=a.tagName.toUpperCase();if(goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[c])throw Error(\"goog.dom.safe.setInnerHtml cannot be used to set content of \"+a.tagName+\".\");}goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(a,b)};goog.dom.safe.setOuterHtml=function(a,b){a.outerHTML=goog.html.SafeHtml.unwrapTrustedHTML(b)};\ngoog.dom.safe.setFormElementAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLFormElement(a).action=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setButtonFormAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLButtonElement(a).formAction=goog.html.SafeUrl.unwrap(b)};\ngoog.dom.safe.setInputFormAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLInputElement(a).formAction=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setStyle=function(a,b){a.style.cssText=goog.html.SafeStyle.unwrap(b)};goog.dom.safe.documentWrite=function(a,b){a.write(goog.html.SafeHtml.unwrapTrustedHTML(b))};\ngoog.dom.safe.setAnchorHref=function(a,b){goog.dom.asserts.assertIsHTMLAnchorElement(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setImageSrc=function(a,b){goog.dom.asserts.assertIsHTMLImageElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:image\\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrap(b)};\ngoog.dom.safe.setAudioSrc=function(a,b){goog.dom.asserts.assertIsHTMLAudioElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:audio\\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setVideoSrc=function(a,b){goog.dom.asserts.assertIsHTMLVideoElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:video\\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrap(b)};\ngoog.dom.safe.setEmbedSrc=function(a,b){goog.dom.asserts.assertIsHTMLEmbedElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};goog.dom.safe.setFrameSrc=function(a,b){goog.dom.asserts.assertIsHTMLFrameElement(a);a.src=goog.html.TrustedResourceUrl.unwrap(b)};goog.dom.safe.setIframeSrc=function(a,b){goog.dom.asserts.assertIsHTMLIFrameElement(a);a.src=goog.html.TrustedResourceUrl.unwrap(b)};\ngoog.dom.safe.setIframeSrcdoc=function(a,b){goog.dom.asserts.assertIsHTMLIFrameElement(a);a.srcdoc=goog.html.SafeHtml.unwrapTrustedHTML(b)};\ngoog.dom.safe.setLinkHrefAndRel=function(a,b,c){goog.dom.asserts.assertIsHTMLLinkElement(a);a.rel=c;goog.string.internal.caseInsensitiveContains(c,\"stylesheet\")?(goog.asserts.assert(b instanceof goog.html.TrustedResourceUrl,'URL must be TrustedResourceUrl because \"rel\" contains \"stylesheet\"'),a.href=goog.html.TrustedResourceUrl.unwrap(b)):a.href=b instanceof goog.html.TrustedResourceUrl?goog.html.TrustedResourceUrl.unwrap(b):b instanceof goog.html.SafeUrl?goog.html.SafeUrl.unwrap(b):goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitizeAssertUnchanged(b))};\ngoog.dom.safe.setObjectData=function(a,b){goog.dom.asserts.assertIsHTMLObjectElement(a);a.data=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};goog.dom.safe.setScriptSrc=function(a,b){goog.dom.asserts.assertIsHTMLScriptElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b);(b=goog.getScriptNonce())&&a.setAttribute(\"nonce\",b)};\ngoog.dom.safe.setScriptContent=function(a,b){goog.dom.asserts.assertIsHTMLScriptElement(a);a.text=goog.html.SafeScript.unwrapTrustedScript(b);(b=goog.getScriptNonce())&&a.setAttribute(\"nonce\",b)};goog.dom.safe.setLocationHref=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=goog.html.SafeUrl.unwrap(b)};\ngoog.dom.safe.assignLocation=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.assign(goog.html.SafeUrl.unwrap(b))};goog.dom.safe.replaceLocation=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.replace(goog.html.SafeUrl.unwrap(b))};\ngoog.dom.safe.openInWindow=function(a,b,c,d,e){a=a instanceof goog.html.SafeUrl?a:goog.html.SafeUrl.sanitizeAssertUnchanged(a);b=b||goog.global;c=c instanceof goog.string.Const?goog.string.Const.unwrap(c):c||\"\";return b.open(goog.html.SafeUrl.unwrap(a),c,d,e)};goog.dom.safe.parseFromStringHtml=function(a,b){return goog.dom.safe.parseFromString(a,b,\"text/html\")};goog.dom.safe.parseFromString=function(a,b,c){return a.parseFromString(goog.html.SafeHtml.unwrapTrustedHTML(b),c)};\ngoog.dom.safe.createImageFromBlob=function(a){if(!/^image\\/.*/g.test(a.type))throw Error(\"goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.\");var b=goog.global.URL.createObjectURL(a);a=new goog.global.Image;a.onload=function(){goog.global.URL.revokeObjectURL(b)};goog.dom.safe.setImageSrc(a,goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from(\"Image blob URL.\"),b));return a};goog.string.DETECT_DOUBLE_ESCAPING=!1;goog.string.FORCE_NON_DOM_HTML_UNESCAPING=!1;goog.string.Unicode={NBSP:\"\\u00a0\"};goog.string.startsWith=goog.string.internal.startsWith;goog.string.endsWith=goog.string.internal.endsWith;goog.string.caseInsensitiveStartsWith=goog.string.internal.caseInsensitiveStartsWith;goog.string.caseInsensitiveEndsWith=goog.string.internal.caseInsensitiveEndsWith;goog.string.caseInsensitiveEquals=goog.string.internal.caseInsensitiveEquals;\ngoog.string.subs=function(a,b){for(var c=a.split(\"%s\"),d=\"\",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join(\"%s\")};goog.string.collapseWhitespace=function(a){return a.replace(/[\\s\\xa0]+/g,\" \").replace(/^\\s+|\\s+$/g,\"\")};goog.string.isEmptyOrWhitespace=goog.string.internal.isEmptyOrWhitespace;goog.string.isEmptyString=function(a){return 0==a.length};goog.string.isEmpty=goog.string.isEmptyOrWhitespace;goog.string.isEmptyOrWhitespaceSafe=function(a){return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(a))};\ngoog.string.isEmptySafe=goog.string.isEmptyOrWhitespaceSafe;goog.string.isBreakingWhitespace=function(a){return!/[^\\t\\n\\r ]/.test(a)};goog.string.isAlpha=function(a){return!/[^a-zA-Z]/.test(a)};goog.string.isNumeric=function(a){return!/[^0-9]/.test(a)};goog.string.isAlphaNumeric=function(a){return!/[^a-zA-Z0-9]/.test(a)};goog.string.isSpace=function(a){return\" \"==a};goog.string.isUnicodeChar=function(a){return 1==a.length&&\" \"<=a&&\"~\">=a||\"\\u0080\"<=a&&\"\\ufffd\">=a};\ngoog.string.stripNewlines=function(a){return a.replace(/(\\r\\n|\\r|\\n)+/g,\" \")};goog.string.canonicalizeNewlines=function(a){return a.replace(/(\\r\\n|\\r|\\n)/g,\"\\n\")};goog.string.normalizeWhitespace=function(a){return a.replace(/\\xa0|\\s/g,\" \")};goog.string.normalizeSpaces=function(a){return a.replace(/\\xa0|[ \\t]+/g,\" \")};goog.string.collapseBreakingSpaces=function(a){return a.replace(/[\\t\\r\\n ]+/g,\" \").replace(/^[\\t\\r\\n ]+|[\\t\\r\\n ]+$/g,\"\")};goog.string.trim=goog.string.internal.trim;\ngoog.string.trimLeft=function(a){return a.replace(/^[\\s\\xa0]+/,\"\")};goog.string.trimRight=function(a){return a.replace(/[\\s\\xa0]+$/,\"\")};goog.string.caseInsensitiveCompare=goog.string.internal.caseInsensitiveCompare;\ngoog.string.numberAwareCompare_=function(a,b,c){if(a==b)return 0;if(!a)return-1;if(!b)return 1;for(var d=a.toLowerCase().match(c),e=b.toLowerCase().match(c),f=Math.min(d.length,e.length),g=0;g<f;g++){c=d[g];var h=e[g];if(c!=h)return a=parseInt(c,10),!isNaN(a)&&(b=parseInt(h,10),!isNaN(b)&&a-b)?a-b:c<h?-1:1}return d.length!=e.length?d.length-e.length:a<b?-1:1};goog.string.intAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\\d+|\\D+/g)};\ngoog.string.floatAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\\d+|\\.\\d+|\\D+/g)};goog.string.numerateCompare=goog.string.floatAwareCompare;goog.string.urlEncode=function(a){return encodeURIComponent(String(a))};goog.string.urlDecode=function(a){return decodeURIComponent(a.replace(/\\+/g,\" \"))};goog.string.newLineToBr=goog.string.internal.newLineToBr;\ngoog.string.htmlEscape=function(a,b){a=goog.string.internal.htmlEscape(a,b);goog.string.DETECT_DOUBLE_ESCAPING&&(a=a.replace(goog.string.E_RE_,\"&#101;\"));return a};goog.string.E_RE_=/e/g;goog.string.unescapeEntities=function(a){return goog.string.contains(a,\"&\")?!goog.string.FORCE_NON_DOM_HTML_UNESCAPING&&\"document\"in goog.global?goog.string.unescapeEntitiesUsingDom_(a):goog.string.unescapePureXmlEntities_(a):a};\ngoog.string.unescapeEntitiesWithDocument=function(a,b){return goog.string.contains(a,\"&\")?goog.string.unescapeEntitiesUsingDom_(a,b):a};\ngoog.string.unescapeEntitiesUsingDom_=function(a,b){var c={\"&amp;\":\"&\",\"&lt;\":\"<\",\"&gt;\":\">\",\"&quot;\":'\"'};var d=b?b.createElement(\"div\"):goog.global.document.createElement(\"div\");return a.replace(goog.string.HTML_ENTITY_PATTERN_,function(a,b){var e=c[a];if(e)return e;\"#\"==b.charAt(0)&&(b=Number(\"0\"+b.substr(1)),isNaN(b)||(e=String.fromCharCode(b)));e||(goog.dom.safe.setInnerHtml(d,goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from(\"Single HTML entity.\"),\na+\" \")),e=d.firstChild.nodeValue.slice(0,-1));return c[a]=e})};goog.string.unescapePureXmlEntities_=function(a){return a.replace(/&([^;]+);/g,function(a,c){switch(c){case \"amp\":return\"&\";case \"lt\":return\"<\";case \"gt\":return\">\";case \"quot\":return'\"';default:return\"#\"!=c.charAt(0)||(c=Number(\"0\"+c.substr(1)),isNaN(c))?a:String.fromCharCode(c)}})};goog.string.HTML_ENTITY_PATTERN_=/&([^;\\s<&]+);?/g;goog.string.whitespaceEscape=function(a,b){return goog.string.newLineToBr(a.replace(/  /g,\" &#160;\"),b)};\ngoog.string.preserveSpaces=function(a){return a.replace(/(^|[\\n ]) /g,\"$1\"+goog.string.Unicode.NBSP)};goog.string.stripQuotes=function(a,b){for(var c=b.length,d=0;d<c;d++){var e=1==c?b:b.charAt(d);if(a.charAt(0)==e&&a.charAt(a.length-1)==e)return a.substring(1,a.length-1)}return a};goog.string.truncate=function(a,b,c){c&&(a=goog.string.unescapeEntities(a));a.length>b&&(a=a.substring(0,b-3)+\"...\");c&&(a=goog.string.htmlEscape(a));return a};\ngoog.string.truncateMiddle=function(a,b,c,d){c&&(a=goog.string.unescapeEntities(a));if(d&&a.length>b){d>b&&(d=b);var e=a.length-d;a=a.substring(0,b-d)+\"...\"+a.substring(e)}else a.length>b&&(d=Math.floor(b/2),e=a.length-d,a=a.substring(0,d+b%2)+\"...\"+a.substring(e));c&&(a=goog.string.htmlEscape(a));return a};goog.string.specialEscapeChars_={\"\\x00\":\"\\\\0\",\"\\b\":\"\\\\b\",\"\\f\":\"\\\\f\",\"\\n\":\"\\\\n\",\"\\r\":\"\\\\r\",\"\\t\":\"\\\\t\",\"\\x0B\":\"\\\\x0B\",'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\",\"<\":\"\\\\u003C\"};goog.string.jsEscapeCache_={\"'\":\"\\\\'\"};\ngoog.string.quote=function(a){a=String(a);for(var b=['\"'],c=0;c<a.length;c++){var d=a.charAt(c),e=d.charCodeAt(0);b[c+1]=goog.string.specialEscapeChars_[d]||(31<e&&127>e?d:goog.string.escapeChar(d))}b.push('\"');return b.join(\"\")};goog.string.escapeString=function(a){for(var b=[],c=0;c<a.length;c++)b[c]=goog.string.escapeChar(a.charAt(c));return b.join(\"\")};\ngoog.string.escapeChar=function(a){if(a in goog.string.jsEscapeCache_)return goog.string.jsEscapeCache_[a];if(a in goog.string.specialEscapeChars_)return goog.string.jsEscapeCache_[a]=goog.string.specialEscapeChars_[a];var b=a.charCodeAt(0);if(31<b&&127>b)var c=a;else{if(256>b){if(c=\"\\\\x\",16>b||256<b)c+=\"0\"}else c=\"\\\\u\",4096>b&&(c+=\"0\");c+=b.toString(16).toUpperCase()}return goog.string.jsEscapeCache_[a]=c};goog.string.contains=goog.string.internal.contains;goog.string.caseInsensitiveContains=goog.string.internal.caseInsensitiveContains;\ngoog.string.countOf=function(a,b){return a&&b?a.split(b).length-1:0};goog.string.removeAt=function(a,b,c){var d=a;0<=b&&b<a.length&&0<c&&(d=a.substr(0,b)+a.substr(b+c,a.length-b-c));return d};goog.string.remove=function(a,b){return a.replace(b,\"\")};goog.string.removeAll=function(a,b){b=new RegExp(goog.string.regExpEscape(b),\"g\");return a.replace(b,\"\")};goog.string.replaceAll=function(a,b,c){b=new RegExp(goog.string.regExpEscape(b),\"g\");return a.replace(b,c.replace(/\\$/g,\"$$$$\"))};\ngoog.string.regExpEscape=function(a){return String(a).replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g,\"\\\\$1\").replace(/\\x08/g,\"\\\\x08\")};goog.string.repeat=String.prototype.repeat?function(a,b){return a.repeat(b)}:function(a,b){return Array(b+1).join(a)};goog.string.padNumber=function(a,b,c){a=void 0!==c?a.toFixed(c):String(a);c=a.indexOf(\".\");-1==c&&(c=a.length);return goog.string.repeat(\"0\",Math.max(0,b-c))+a};goog.string.makeSafe=function(a){return null==a?\"\":String(a)};\ngoog.string.buildString=function(a){return Array.prototype.join.call(arguments,\"\")};goog.string.getRandomString=function(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^goog.now()).toString(36)};goog.string.compareVersions=goog.string.internal.compareVersions;goog.string.hashCode=function(a){for(var b=0,c=0;c<a.length;++c)b=31*b+a.charCodeAt(c)>>>0;return b};goog.string.uniqueStringCounter_=2147483648*Math.random()|0;\ngoog.string.createUniqueString=function(){return\"goog_\"+goog.string.uniqueStringCounter_++};goog.string.toNumber=function(a){var b=Number(a);return 0==b&&goog.string.isEmptyOrWhitespace(a)?NaN:b};goog.string.isLowerCamelCase=function(a){return/^[a-z]+([A-Z][a-z]*)*$/.test(a)};goog.string.isUpperCamelCase=function(a){return/^([A-Z][a-z]*)+$/.test(a)};goog.string.toCamelCase=function(a){return String(a).replace(/\\-([a-z])/g,function(a,c){return c.toUpperCase()})};\ngoog.string.toSelectorCase=function(a){return String(a).replace(/([A-Z])/g,\"-$1\").toLowerCase()};goog.string.toTitleCase=function(a,b){b=\"string\"===typeof b?goog.string.regExpEscape(b):\"\\\\s\";return a.replace(new RegExp(\"(^\"+(b?\"|[\"+b+\"]+\":\"\")+\")([a-z])\",\"g\"),function(a,b,e){return b+e.toUpperCase()})};goog.string.capitalize=function(a){return String(a.charAt(0)).toUpperCase()+String(a.substr(1)).toLowerCase()};\ngoog.string.parseInt=function(a){isFinite(a)&&(a=String(a));return\"string\"===typeof a?/^\\s*-?0x/i.test(a)?parseInt(a,16):parseInt(a,10):NaN};goog.string.splitLimit=function(a,b,c){a=a.split(b);for(var d=[];0<c&&a.length;)d.push(a.shift()),c--;a.length&&d.push(a.join(b));return d};goog.string.lastComponent=function(a,b){if(b)\"string\"==typeof b&&(b=[b]);else return a;for(var c=-1,d=0;d<b.length;d++)if(\"\"!=b[d]){var e=a.lastIndexOf(b[d]);e>c&&(c=e)}return-1==c?a:a.slice(c+1)};\ngoog.string.editDistance=function(a,b){var c=[],d=[];if(a==b)return 0;if(!a.length||!b.length)return Math.max(a.length,b.length);for(var e=0;e<b.length+1;e++)c[e]=e;for(e=0;e<a.length;e++){d[0]=e+1;for(var f=0;f<b.length;f++)d[f+1]=Math.min(d[f]+1,c[f+1]+1,c[f]+Number(a[e]!=b[f]));for(f=0;f<c.length;f++)c[f]=d[f]}return d[b.length]};goog.labs.userAgent.engine={};goog.labs.userAgent.engine.isPresto=function(){return goog.labs.userAgent.util.matchUserAgent(\"Presto\")};goog.labs.userAgent.engine.isTrident=function(){return goog.labs.userAgent.util.matchUserAgent(\"Trident\")||goog.labs.userAgent.util.matchUserAgent(\"MSIE\")};goog.labs.userAgent.engine.isEdge=function(){return goog.labs.userAgent.util.matchUserAgent(\"Edge\")};\ngoog.labs.userAgent.engine.isWebKit=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase(\"WebKit\")&&!goog.labs.userAgent.engine.isEdge()};goog.labs.userAgent.engine.isGecko=function(){return goog.labs.userAgent.util.matchUserAgent(\"Gecko\")&&!goog.labs.userAgent.engine.isWebKit()&&!goog.labs.userAgent.engine.isTrident()&&!goog.labs.userAgent.engine.isEdge()};\ngoog.labs.userAgent.engine.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent();if(a){a=goog.labs.userAgent.util.extractVersionTuples(a);var b=goog.labs.userAgent.engine.getEngineTuple_(a);if(b)return\"Gecko\"==b[0]?goog.labs.userAgent.engine.getVersionForKey_(a,\"Firefox\"):b[1];a=a[0];var c;if(a&&(c=a[2])&&(c=/Trident\\/([^\\s;]+)/.exec(c)))return c[1]}return\"\"};\ngoog.labs.userAgent.engine.getEngineTuple_=function(a){if(!goog.labs.userAgent.engine.isEdge())return a[1];for(var b=0;b<a.length;b++){var c=a[b];if(\"Edge\"==c[0])return c}};goog.labs.userAgent.engine.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(),a)};goog.labs.userAgent.engine.getVersionForKey_=function(a,b){return(a=goog.array.find(a,function(a){return b==a[0]}))&&a[1]||\"\"};goog.labs.userAgent.platform={};goog.labs.userAgent.platform.isAndroid=function(){return goog.labs.userAgent.util.matchUserAgent(\"Android\")};goog.labs.userAgent.platform.isIpod=function(){return goog.labs.userAgent.util.matchUserAgent(\"iPod\")};goog.labs.userAgent.platform.isIphone=function(){return goog.labs.userAgent.util.matchUserAgent(\"iPhone\")&&!goog.labs.userAgent.util.matchUserAgent(\"iPod\")&&!goog.labs.userAgent.util.matchUserAgent(\"iPad\")};goog.labs.userAgent.platform.isIpad=function(){return goog.labs.userAgent.util.matchUserAgent(\"iPad\")};\ngoog.labs.userAgent.platform.isIos=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpad()||goog.labs.userAgent.platform.isIpod()};goog.labs.userAgent.platform.isMacintosh=function(){return goog.labs.userAgent.util.matchUserAgent(\"Macintosh\")};goog.labs.userAgent.platform.isLinux=function(){return goog.labs.userAgent.util.matchUserAgent(\"Linux\")};goog.labs.userAgent.platform.isWindows=function(){return goog.labs.userAgent.util.matchUserAgent(\"Windows\")};\ngoog.labs.userAgent.platform.isChromeOS=function(){return goog.labs.userAgent.util.matchUserAgent(\"CrOS\")};goog.labs.userAgent.platform.isChromecast=function(){return goog.labs.userAgent.util.matchUserAgent(\"CrKey\")};goog.labs.userAgent.platform.isKaiOS=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase(\"KaiOS\")};\ngoog.labs.userAgent.platform.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent(),b=\"\";goog.labs.userAgent.platform.isWindows()?(b=/Windows (?:NT|Phone) ([0-9.]+)/,b=(a=b.exec(a))?a[1]:\"0.0\"):goog.labs.userAgent.platform.isIos()?(b=/(?:iPhone|iPod|iPad|CPU)\\s+OS\\s+(\\S+)/,b=(a=b.exec(a))&&a[1].replace(/_/g,\".\")):goog.labs.userAgent.platform.isMacintosh()?(b=/Mac OS X ([0-9_.]+)/,b=(a=b.exec(a))?a[1].replace(/_/g,\".\"):\"10\"):goog.labs.userAgent.platform.isKaiOS()?(b=/(?:KaiOS)\\/(\\S+)/i,\nb=(a=b.exec(a))&&a[1]):goog.labs.userAgent.platform.isAndroid()?(b=/Android\\s+([^\\);]+)(\\)|;)/,b=(a=b.exec(a))&&a[1]):goog.labs.userAgent.platform.isChromeOS()&&(b=/(?:CrOS\\s+(?:i686|x86_64)\\s+([0-9.]+))/,b=(a=b.exec(a))&&a[1]);return b||\"\"};goog.labs.userAgent.platform.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(),a)};goog.reflect={};goog.reflect.object=function(a,b){return b};goog.reflect.objectProperty=function(a,b){return a};goog.reflect.sinkValue=function(a){goog.reflect.sinkValue[\" \"](a);return a};goog.reflect.sinkValue[\" \"]=goog.nullFunction;goog.reflect.canAccessProperty=function(a,b){try{return goog.reflect.sinkValue(a[b]),!0}catch(c){}return!1};goog.reflect.cache=function(a,b,c,d){d=d?d(b):b;return Object.prototype.hasOwnProperty.call(a,d)?a[d]:a[d]=c(b)};goog.userAgent={};goog.userAgent.ASSUME_IE=!1;goog.userAgent.ASSUME_EDGE=!1;goog.userAgent.ASSUME_GECKO=!1;goog.userAgent.ASSUME_WEBKIT=!1;goog.userAgent.ASSUME_MOBILE_WEBKIT=!1;goog.userAgent.ASSUME_OPERA=!1;goog.userAgent.ASSUME_ANY_VERSION=!1;goog.userAgent.BROWSER_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_GECKO||goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_OPERA;goog.userAgent.getUserAgentString=function(){return goog.labs.userAgent.util.getUserAgent()};\ngoog.userAgent.getNavigatorTyped=function(){return goog.global.navigator||null};goog.userAgent.getNavigator=function(){return goog.userAgent.getNavigatorTyped()};goog.userAgent.OPERA=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_OPERA:goog.labs.userAgent.browser.isOpera();goog.userAgent.IE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_IE:goog.labs.userAgent.browser.isIE();goog.userAgent.EDGE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_EDGE:goog.labs.userAgent.engine.isEdge();\ngoog.userAgent.EDGE_OR_IE=goog.userAgent.EDGE||goog.userAgent.IE;goog.userAgent.GECKO=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_GECKO:goog.labs.userAgent.engine.isGecko();goog.userAgent.WEBKIT=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_MOBILE_WEBKIT:goog.labs.userAgent.engine.isWebKit();goog.userAgent.isMobile_=function(){return goog.userAgent.WEBKIT&&goog.labs.userAgent.util.matchUserAgent(\"Mobile\")};\ngoog.userAgent.MOBILE=goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.isMobile_();goog.userAgent.SAFARI=goog.userAgent.WEBKIT;goog.userAgent.determinePlatform_=function(){var a=goog.userAgent.getNavigatorTyped();return a&&a.platform||\"\"};goog.userAgent.PLATFORM=goog.userAgent.determinePlatform_();goog.userAgent.ASSUME_MAC=!1;goog.userAgent.ASSUME_WINDOWS=!1;goog.userAgent.ASSUME_LINUX=!1;goog.userAgent.ASSUME_X11=!1;goog.userAgent.ASSUME_ANDROID=!1;goog.userAgent.ASSUME_IPHONE=!1;\ngoog.userAgent.ASSUME_IPAD=!1;goog.userAgent.ASSUME_IPOD=!1;goog.userAgent.ASSUME_KAIOS=!1;goog.userAgent.PLATFORM_KNOWN_=goog.userAgent.ASSUME_MAC||goog.userAgent.ASSUME_WINDOWS||goog.userAgent.ASSUME_LINUX||goog.userAgent.ASSUME_X11||goog.userAgent.ASSUME_ANDROID||goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD;goog.userAgent.MAC=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_MAC:goog.labs.userAgent.platform.isMacintosh();\ngoog.userAgent.WINDOWS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_WINDOWS:goog.labs.userAgent.platform.isWindows();goog.userAgent.isLegacyLinux_=function(){return goog.labs.userAgent.platform.isLinux()||goog.labs.userAgent.platform.isChromeOS()};goog.userAgent.LINUX=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_LINUX:goog.userAgent.isLegacyLinux_();goog.userAgent.isX11_=function(){var a=goog.userAgent.getNavigatorTyped();return!!a&&goog.string.contains(a.appVersion||\"\",\"X11\")};\ngoog.userAgent.X11=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_X11:goog.userAgent.isX11_();goog.userAgent.ANDROID=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_ANDROID:goog.labs.userAgent.platform.isAndroid();goog.userAgent.IPHONE=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE:goog.labs.userAgent.platform.isIphone();goog.userAgent.IPAD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad();\ngoog.userAgent.IPOD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIpod();goog.userAgent.IOS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIos();goog.userAgent.KAIOS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_KAIOS:goog.labs.userAgent.platform.isKaiOS();\ngoog.userAgent.determineVersion_=function(){var a=\"\",b=goog.userAgent.getVersionRegexResult_();b&&(a=b?b[1]:\"\");return goog.userAgent.IE&&(b=goog.userAgent.getDocumentMode_(),null!=b&&b>parseFloat(a))?String(b):a};\ngoog.userAgent.getVersionRegexResult_=function(){var a=goog.userAgent.getUserAgentString();if(goog.userAgent.GECKO)return/rv:([^\\);]+)(\\)|;)/.exec(a);if(goog.userAgent.EDGE)return/Edge\\/([\\d\\.]+)/.exec(a);if(goog.userAgent.IE)return/\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(a);if(goog.userAgent.WEBKIT)return/WebKit\\/(\\S+)/.exec(a);if(goog.userAgent.OPERA)return/(?:Version)[ \\/]?(\\S+)/.exec(a)};goog.userAgent.getDocumentMode_=function(){var a=goog.global.document;return a?a.documentMode:void 0};\ngoog.userAgent.VERSION=goog.userAgent.determineVersion_();goog.userAgent.compare=function(a,b){return goog.string.compareVersions(a,b)};goog.userAgent.isVersionOrHigherCache_={};goog.userAgent.isVersionOrHigher=function(a){return goog.userAgent.ASSUME_ANY_VERSION||goog.reflect.cache(goog.userAgent.isVersionOrHigherCache_,a,function(){return 0<=goog.string.compareVersions(goog.userAgent.VERSION,a)})};goog.userAgent.isVersion=goog.userAgent.isVersionOrHigher;\ngoog.userAgent.isDocumentModeOrHigher=function(a){return Number(goog.userAgent.DOCUMENT_MODE)>=a};goog.userAgent.isDocumentMode=goog.userAgent.isDocumentModeOrHigher;goog.userAgent.DOCUMENT_MODE=function(){if(goog.global.document&&goog.userAgent.IE){var a=goog.userAgent.getDocumentMode_();return a?a:parseInt(goog.userAgent.VERSION,10)||void 0}}();goog.userAgent.product={};goog.userAgent.product.ASSUME_FIREFOX=!1;goog.userAgent.product.ASSUME_IPHONE=!1;goog.userAgent.product.ASSUME_IPAD=!1;goog.userAgent.product.ASSUME_ANDROID=!1;goog.userAgent.product.ASSUME_CHROME=!1;goog.userAgent.product.ASSUME_SAFARI=!1;\ngoog.userAgent.product.PRODUCT_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_OPERA||goog.userAgent.product.ASSUME_FIREFOX||goog.userAgent.product.ASSUME_IPHONE||goog.userAgent.product.ASSUME_IPAD||goog.userAgent.product.ASSUME_ANDROID||goog.userAgent.product.ASSUME_CHROME||goog.userAgent.product.ASSUME_SAFARI;goog.userAgent.product.OPERA=goog.userAgent.OPERA;goog.userAgent.product.IE=goog.userAgent.IE;goog.userAgent.product.EDGE=goog.userAgent.EDGE;\ngoog.userAgent.product.FIREFOX=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_FIREFOX:goog.labs.userAgent.browser.isFirefox();goog.userAgent.product.isIphoneOrIpod_=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpod()};goog.userAgent.product.IPHONE=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPHONE:goog.userAgent.product.isIphoneOrIpod_();\ngoog.userAgent.product.IPAD=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad();goog.userAgent.product.ANDROID=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_ANDROID:goog.labs.userAgent.browser.isAndroidBrowser();goog.userAgent.product.CHROME=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_CHROME:goog.labs.userAgent.browser.isChrome();\ngoog.userAgent.product.isSafariDesktop_=function(){return goog.labs.userAgent.browser.isSafari()&&!goog.labs.userAgent.platform.isIos()};goog.userAgent.product.SAFARI=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_SAFARI:goog.userAgent.product.isSafariDesktop_();goog.crypt.base64={};goog.crypt.base64.DEFAULT_ALPHABET_COMMON_=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";goog.crypt.base64.ENCODED_VALS=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_+\"+/=\";goog.crypt.base64.ENCODED_VALS_WEBSAFE=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_+\"-_.\";goog.crypt.base64.Alphabet={DEFAULT:0,NO_PADDING:1,WEBSAFE:2,WEBSAFE_DOT_PADDING:3,WEBSAFE_NO_PADDING:4};goog.crypt.base64.paddingChars_=\"=.\";\ngoog.crypt.base64.isPadding_=function(a){return goog.string.contains(goog.crypt.base64.paddingChars_,a)};goog.crypt.base64.byteToCharMaps_={};goog.crypt.base64.charToByteMap_=null;goog.crypt.base64.ASSUME_NATIVE_SUPPORT_=goog.userAgent.GECKO||goog.userAgent.WEBKIT&&!goog.userAgent.product.SAFARI||goog.userAgent.OPERA;goog.crypt.base64.HAS_NATIVE_ENCODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||\"function\"==typeof goog.global.btoa;\ngoog.crypt.base64.HAS_NATIVE_DECODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||!goog.userAgent.product.SAFARI&&!goog.userAgent.IE&&\"function\"==typeof goog.global.atob;\ngoog.crypt.base64.encodeByteArray=function(a,b){goog.asserts.assert(goog.isArrayLike(a),\"encodeByteArray takes an array as a parameter\");void 0===b&&(b=goog.crypt.base64.Alphabet.DEFAULT);goog.crypt.base64.init_();b=goog.crypt.base64.byteToCharMaps_[b];for(var c=[],d=0;d<a.length;d+=3){var e=a[d],f=d+1<a.length,g=f?a[d+1]:0,h=d+2<a.length,k=h?a[d+2]:0,l=e>>2;e=(e&3)<<4|g>>4;g=(g&15)<<2|k>>6;k&=63;h||(k=64,f||(g=64));c.push(b[l],b[e],b[g]||\"\",b[k]||\"\")}return c.join(\"\")};\ngoog.crypt.base64.encodeString=function(a,b){return goog.crypt.base64.HAS_NATIVE_ENCODE_&&!b?goog.global.btoa(a):goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(a),b)};goog.crypt.base64.decodeString=function(a,b){if(goog.crypt.base64.HAS_NATIVE_DECODE_&&!b)return goog.global.atob(a);var c=\"\";goog.crypt.base64.decodeStringInternal_(a,function(a){c+=String.fromCharCode(a)});return c};\ngoog.crypt.base64.decodeStringToByteArray=function(a,b){var c=[];goog.crypt.base64.decodeStringInternal_(a,function(a){c.push(a)});return c};\ngoog.crypt.base64.decodeStringToUint8Array=function(a){goog.asserts.assert(!goog.userAgent.IE||goog.userAgent.isVersionOrHigher(\"10\"),\"Browser does not support typed arrays\");var b=a.length,c=3*b/4;c%3?c=Math.floor(c):goog.crypt.base64.isPadding_(a[b-1])&&(c=goog.crypt.base64.isPadding_(a[b-2])?c-2:c-1);var d=new Uint8Array(c),e=0;goog.crypt.base64.decodeStringInternal_(a,function(a){d[e++]=a});return d.subarray(0,e)};\ngoog.crypt.base64.decodeStringInternal_=function(a,b){function c(b){for(;d<a.length;){var c=a.charAt(d++),e=goog.crypt.base64.charToByteMap_[c];if(null!=e)return e;if(!goog.string.isEmptyOrWhitespace(c))throw Error(\"Unknown base64 encoding at char: \"+c);}return b}goog.crypt.base64.init_();for(var d=0;;){var e=c(-1),f=c(0),g=c(64),h=c(64);if(64===h&&-1===e)break;b(e<<2|f>>4);64!=g&&(b(f<<4&240|g>>2),64!=h&&b(g<<6&192|h))}};\ngoog.crypt.base64.init_=function(){if(!goog.crypt.base64.charToByteMap_){goog.crypt.base64.charToByteMap_={};for(var a=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_.split(\"\"),b=[\"+/=\",\"+/\",\"-_=\",\"-_.\",\"-_\"],c=0;5>c;c++){var d=a.concat(b[c].split(\"\"));goog.crypt.base64.byteToCharMaps_[c]=d;for(var e=0;e<d.length;e++){var f=d[e],g=goog.crypt.base64.charToByteMap_[f];void 0===g?goog.crypt.base64.charToByteMap_[f]=e:goog.asserts.assert(g===e)}}}};jspb.utils={};jspb.utils.split64Low=0;jspb.utils.split64High=0;jspb.utils.splitUint64=function(a){var b=a>>>0;a=Math.floor((a-b)/jspb.BinaryConstants.TWO_TO_32)>>>0;jspb.utils.split64Low=b;jspb.utils.split64High=a};jspb.utils.splitInt64=function(a){var b=0>a;a=Math.abs(a);var c=a>>>0;a=Math.floor((a-c)/jspb.BinaryConstants.TWO_TO_32);a>>>=0;b&&(a=~a>>>0,c=(~c>>>0)+1,4294967295<c&&(c=0,a++,4294967295<a&&(a=0)));jspb.utils.split64Low=c;jspb.utils.split64High=a};\njspb.utils.splitZigzag64=function(a){var b=0>a;a=2*Math.abs(a);jspb.utils.splitUint64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;b&&(0==a?0==c?c=a=4294967295:(c--,a=4294967295):a--);jspb.utils.split64Low=a;jspb.utils.split64High=c};\njspb.utils.splitFloat32=function(a){var b=0>a?1:0;a=b?-a:a;if(0===a)0<1/a?(jspb.utils.split64High=0,jspb.utils.split64Low=0):(jspb.utils.split64High=0,jspb.utils.split64Low=2147483648);else if(isNaN(a))jspb.utils.split64High=0,jspb.utils.split64Low=2147483647;else if(a>jspb.BinaryConstants.FLOAT32_MAX)jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|2139095040)>>>0;else if(a<jspb.BinaryConstants.FLOAT32_MIN)a=Math.round(a/Math.pow(2,-149)),jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|\na)>>>0;else{var c=Math.floor(Math.log(a)/Math.LN2);a*=Math.pow(2,-c);a=Math.round(a*jspb.BinaryConstants.TWO_TO_23);16777216<=a&&++c;jspb.utils.split64High=0;jspb.utils.split64Low=(b<<31|c+127<<23|a&8388607)>>>0}};\njspb.utils.splitFloat64=function(a){var b=0>a?1:0;a=b?-a:a;if(0===a)jspb.utils.split64High=0<1/a?0:2147483648,jspb.utils.split64Low=0;else if(isNaN(a))jspb.utils.split64High=2147483647,jspb.utils.split64Low=4294967295;else if(a>jspb.BinaryConstants.FLOAT64_MAX)jspb.utils.split64High=(b<<31|2146435072)>>>0,jspb.utils.split64Low=0;else if(a<jspb.BinaryConstants.FLOAT64_MIN){var c=a/Math.pow(2,-1074);a=c/jspb.BinaryConstants.TWO_TO_32;jspb.utils.split64High=(b<<31|a)>>>0;jspb.utils.split64Low=c>>>0}else{c=\na;var d=0;if(2<=c)for(;2<=c&&1023>d;)d++,c/=2;else for(;1>c&&-1022<d;)c*=2,d--;c=a*Math.pow(2,-d);a=c*jspb.BinaryConstants.TWO_TO_20&1048575;c=c*jspb.BinaryConstants.TWO_TO_52>>>0;jspb.utils.split64High=(b<<31|d+1023<<20|a)>>>0;jspb.utils.split64Low=c}};\njspb.utils.splitHash64=function(a){var b=a.charCodeAt(0),c=a.charCodeAt(1),d=a.charCodeAt(2),e=a.charCodeAt(3),f=a.charCodeAt(4),g=a.charCodeAt(5),h=a.charCodeAt(6);a=a.charCodeAt(7);jspb.utils.split64Low=b+(c<<8)+(d<<16)+(e<<24)>>>0;jspb.utils.split64High=f+(g<<8)+(h<<16)+(a<<24)>>>0};jspb.utils.joinUint64=function(a,b){return b*jspb.BinaryConstants.TWO_TO_32+(a>>>0)};\njspb.utils.joinInt64=function(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b>>>0,0==a&&(b=b+1>>>0));a=jspb.utils.joinUint64(a,b);return c?-a:a};jspb.utils.toZigzag64=function(a,b,c){var d=b>>31;return c(a<<1^d,(b<<1|a>>>31)^d)};jspb.utils.joinZigzag64=function(a,b){return jspb.utils.fromZigzag64(a,b,jspb.utils.joinInt64)};jspb.utils.fromZigzag64=function(a,b,c){var d=-(a&1);return c((a>>>1|b<<31)^d,b>>>1^d)};\njspb.utils.joinFloat32=function(a,b){b=2*(a>>31)+1;var c=a>>>23&255;a&=8388607;return 255==c?a?NaN:Infinity*b:0==c?b*Math.pow(2,-149)*a:b*Math.pow(2,c-150)*(a+Math.pow(2,23))};jspb.utils.joinFloat64=function(a,b){var c=2*(b>>31)+1,d=b>>>20&2047;a=jspb.BinaryConstants.TWO_TO_32*(b&1048575)+a;return 2047==d?a?NaN:Infinity*c:0==d?c*Math.pow(2,-1074)*a:c*Math.pow(2,d-1075)*(a+jspb.BinaryConstants.TWO_TO_52)};\njspb.utils.joinHash64=function(a,b){return String.fromCharCode(a>>>0&255,a>>>8&255,a>>>16&255,a>>>24&255,b>>>0&255,b>>>8&255,b>>>16&255,b>>>24&255)};jspb.utils.DIGITS=\"0123456789abcdef\".split(\"\");jspb.utils.ZERO_CHAR_CODE_=48;jspb.utils.A_CHAR_CODE_=97;\njspb.utils.joinUnsignedDecimalString=function(a,b){function c(a,b){a=a?String(a):\"\";return b?\"0000000\".slice(a.length)+a:a}if(2097151>=b)return\"\"+jspb.utils.joinUint64(a,b);var d=(a>>>24|b<<8)>>>0&16777215;b=b>>16&65535;a=(a&16777215)+6777216*d+6710656*b;d+=8147497*b;b*=2;1E7<=a&&(d+=Math.floor(a/1E7),a%=1E7);1E7<=d&&(b+=Math.floor(d/1E7),d%=1E7);return c(b,0)+c(d,b)+c(a,1)};\njspb.utils.joinSignedDecimalString=function(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b+(0==a?1:0)>>>0);a=jspb.utils.joinUnsignedDecimalString(a,b);return c?\"-\"+a:a};jspb.utils.hash64ToDecimalString=function(a,b){jspb.utils.splitHash64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;return b?jspb.utils.joinSignedDecimalString(a,c):jspb.utils.joinUnsignedDecimalString(a,c)};\njspb.utils.hash64ArrayToDecimalStrings=function(a,b){for(var c=Array(a.length),d=0;d<a.length;d++)c[d]=jspb.utils.hash64ToDecimalString(a[d],b);return c};\njspb.utils.decimalStringToHash64=function(a){function b(a,b){for(var c=0;8>c&&(1!==a||0<b);c++)b=a*e[c]+b,e[c]=b&255,b>>>=8}function c(){for(var a=0;8>a;a++)e[a]=~e[a]&255}jspb.asserts.assert(0<a.length);var d=!1;\"-\"===a[0]&&(d=!0,a=a.slice(1));for(var e=[0,0,0,0,0,0,0,0],f=0;f<a.length;f++)b(10,a.charCodeAt(f)-jspb.utils.ZERO_CHAR_CODE_);d&&(c(),b(1,1));return goog.crypt.byteArrayToString(e)};jspb.utils.splitDecimalString=function(a){jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a))};\njspb.utils.toHexDigit_=function(a){return String.fromCharCode(10>a?jspb.utils.ZERO_CHAR_CODE_+a:jspb.utils.A_CHAR_CODE_-10+a)};jspb.utils.fromHexCharCode_=function(a){return a>=jspb.utils.A_CHAR_CODE_?a-jspb.utils.A_CHAR_CODE_+10:a-jspb.utils.ZERO_CHAR_CODE_};jspb.utils.hash64ToHexString=function(a){var b=Array(18);b[0]=\"0\";b[1]=\"x\";for(var c=0;8>c;c++){var d=a.charCodeAt(7-c);b[2*c+2]=jspb.utils.toHexDigit_(d>>4);b[2*c+3]=jspb.utils.toHexDigit_(d&15)}return b.join(\"\")};\njspb.utils.hexStringToHash64=function(a){a=a.toLowerCase();jspb.asserts.assert(18==a.length);jspb.asserts.assert(\"0\"==a[0]);jspb.asserts.assert(\"x\"==a[1]);for(var b=\"\",c=0;8>c;c++){var d=jspb.utils.fromHexCharCode_(a.charCodeAt(2*c+2)),e=jspb.utils.fromHexCharCode_(a.charCodeAt(2*c+3));b=String.fromCharCode(16*d+e)+b}return b};\njspb.utils.hash64ToNumber=function(a,b){jspb.utils.splitHash64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;return b?jspb.utils.joinInt64(a,c):jspb.utils.joinUint64(a,c)};jspb.utils.numberToHash64=function(a){jspb.utils.splitInt64(a);return jspb.utils.joinHash64(jspb.utils.split64Low,jspb.utils.split64High)};jspb.utils.countVarints=function(a,b,c){for(var d=0,e=b;e<c;e++)d+=a[e]>>7;return c-b-d};\njspb.utils.countVarintFields=function(a,b,c,d){var e=0;d=8*d+jspb.BinaryConstants.WireType.VARINT;if(128>d)for(;b<c&&a[b++]==d;)for(e++;;){var f=a[b++];if(0==(f&128))break}else for(;b<c;){for(f=d;128<f;){if(a[b]!=(f&127|128))return e;b++;f>>=7}if(a[b++]!=f)break;for(e++;f=a[b++],0!=(f&128););}return e};jspb.utils.countFixedFields_=function(a,b,c,d,e){var f=0;if(128>d)for(;b<c&&a[b++]==d;)f++,b+=e;else for(;b<c;){for(var g=d;128<g;){if(a[b++]!=(g&127|128))return f;g>>=7}if(a[b++]!=g)break;f++;b+=e}return f};\njspb.utils.countFixed32Fields=function(a,b,c,d){return jspb.utils.countFixedFields_(a,b,c,8*d+jspb.BinaryConstants.WireType.FIXED32,4)};jspb.utils.countFixed64Fields=function(a,b,c,d){return jspb.utils.countFixedFields_(a,b,c,8*d+jspb.BinaryConstants.WireType.FIXED64,8)};\njspb.utils.countDelimitedFields=function(a,b,c,d){var e=0;for(d=8*d+jspb.BinaryConstants.WireType.DELIMITED;b<c;){for(var f=d;128<f;){if(a[b++]!=(f&127|128))return e;f>>=7}if(a[b++]!=f)break;e++;for(var g=0,h=1;f=a[b++],g+=(f&127)*h,h*=128,0!=(f&128););b+=g}return e};jspb.utils.debugBytesToTextFormat=function(a){var b='\"';if(a){a=jspb.utils.byteSourceToUint8Array(a);for(var c=0;c<a.length;c++)b+=\"\\\\x\",16>a[c]&&(b+=\"0\"),b+=a[c].toString(16)}return b+'\"'};\njspb.utils.debugScalarToTextFormat=function(a){return\"string\"===typeof a?goog.string.quote(a):a.toString()};jspb.utils.stringToByteArray=function(a){for(var b=new Uint8Array(a.length),c=0;c<a.length;c++){var d=a.charCodeAt(c);if(255<d)throw Error(\"Conversion error: string contains codepoint outside of byte range\");b[c]=d}return b};\njspb.utils.byteSourceToUint8Array=function(a){if(a.constructor===Uint8Array)return a;if(a.constructor===ArrayBuffer||a.constructor===Array)return new Uint8Array(a);if(a.constructor===String)return goog.crypt.base64.decodeStringToUint8Array(a);if(a instanceof Uint8Array)return new Uint8Array(a.buffer,a.byteOffset,a.byteLength);jspb.asserts.fail(\"Type not convertible to Uint8Array.\");return new Uint8Array(0)};jspb.BinaryDecoder=function(a,b,c){this.bytes_=null;this.cursor_=this.end_=this.start_=0;this.error_=!1;a&&this.setBlock(a,b,c)};jspb.BinaryDecoder.instanceCache_=[];jspb.BinaryDecoder.alloc=function(a,b,c){if(jspb.BinaryDecoder.instanceCache_.length){var d=jspb.BinaryDecoder.instanceCache_.pop();a&&d.setBlock(a,b,c);return d}return new jspb.BinaryDecoder(a,b,c)};jspb.BinaryDecoder.prototype.free=function(){this.clear();100>jspb.BinaryDecoder.instanceCache_.length&&jspb.BinaryDecoder.instanceCache_.push(this)};\njspb.BinaryDecoder.prototype.clone=function(){return jspb.BinaryDecoder.alloc(this.bytes_,this.start_,this.end_-this.start_)};jspb.BinaryDecoder.prototype.clear=function(){this.bytes_=null;this.cursor_=this.end_=this.start_=0;this.error_=!1};jspb.BinaryDecoder.prototype.getBuffer=function(){return this.bytes_};\njspb.BinaryDecoder.prototype.setBlock=function(a,b,c){this.bytes_=jspb.utils.byteSourceToUint8Array(a);this.start_=void 0!==b?b:0;this.end_=void 0!==c?this.start_+c:this.bytes_.length;this.cursor_=this.start_};jspb.BinaryDecoder.prototype.getEnd=function(){return this.end_};jspb.BinaryDecoder.prototype.setEnd=function(a){this.end_=a};jspb.BinaryDecoder.prototype.reset=function(){this.cursor_=this.start_};jspb.BinaryDecoder.prototype.getCursor=function(){return this.cursor_};\njspb.BinaryDecoder.prototype.setCursor=function(a){this.cursor_=a};jspb.BinaryDecoder.prototype.advance=function(a){this.cursor_+=a;jspb.asserts.assert(this.cursor_<=this.end_)};jspb.BinaryDecoder.prototype.atEnd=function(){return this.cursor_==this.end_};jspb.BinaryDecoder.prototype.pastEnd=function(){return this.cursor_>this.end_};jspb.BinaryDecoder.prototype.getError=function(){return this.error_||0>this.cursor_||this.cursor_>this.end_};\njspb.BinaryDecoder.prototype.readSplitVarint64=function(a){for(var b=128,c=0,d=0,e=0;4>e&&128<=b;e++)b=this.bytes_[this.cursor_++],c|=(b&127)<<7*e;128<=b&&(b=this.bytes_[this.cursor_++],c|=(b&127)<<28,d|=(b&127)>>4);if(128<=b)for(e=0;5>e&&128<=b;e++)b=this.bytes_[this.cursor_++],d|=(b&127)<<7*e+3;if(128>b)return a(c>>>0,d>>>0);jspb.asserts.fail(\"Failed to read varint, encoding is invalid.\");this.error_=!0};\njspb.BinaryDecoder.prototype.readSplitZigzagVarint64=function(a){return this.readSplitVarint64(function(b,c){return jspb.utils.fromZigzag64(b,c,a)})};jspb.BinaryDecoder.prototype.readSplitFixed64=function(a){var b=this.bytes_,c=this.cursor_;this.cursor_+=8;for(var d=0,e=0,f=c+7;f>=c;f--)d=d<<8|b[f],e=e<<8|b[f+4];return a(d,e)};jspb.BinaryDecoder.prototype.skipVarint=function(){for(;this.bytes_[this.cursor_]&128;)this.cursor_++;this.cursor_++};\njspb.BinaryDecoder.prototype.unskipVarint=function(a){for(;128<a;)this.cursor_--,a>>>=7;this.cursor_--};\njspb.BinaryDecoder.prototype.readUnsignedVarint32=function(){var a=this.bytes_;var b=a[this.cursor_+0];var c=b&127;if(128>b)return this.cursor_+=1,jspb.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+1];c|=(b&127)<<7;if(128>b)return this.cursor_+=2,jspb.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+2];c|=(b&127)<<14;if(128>b)return this.cursor_+=3,jspb.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+3];c|=(b&127)<<21;if(128>b)return this.cursor_+=4,jspb.asserts.assert(this.cursor_<=\nthis.end_),c;b=a[this.cursor_+4];c|=(b&15)<<28;if(128>b)return this.cursor_+=5,jspb.asserts.assert(this.cursor_<=this.end_),c>>>0;this.cursor_+=5;128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&jspb.asserts.assert(!1);jspb.asserts.assert(this.cursor_<=this.end_);return c};jspb.BinaryDecoder.prototype.readSignedVarint32=function(){return~~this.readUnsignedVarint32()};jspb.BinaryDecoder.prototype.readUnsignedVarint32String=function(){return this.readUnsignedVarint32().toString()};\njspb.BinaryDecoder.prototype.readSignedVarint32String=function(){return this.readSignedVarint32().toString()};jspb.BinaryDecoder.prototype.readZigzagVarint32=function(){var a=this.readUnsignedVarint32();return a>>>1^-(a&1)};jspb.BinaryDecoder.prototype.readUnsignedVarint64=function(){return this.readSplitVarint64(jspb.utils.joinUint64)};jspb.BinaryDecoder.prototype.readUnsignedVarint64String=function(){return this.readSplitVarint64(jspb.utils.joinUnsignedDecimalString)};\njspb.BinaryDecoder.prototype.readSignedVarint64=function(){return this.readSplitVarint64(jspb.utils.joinInt64)};jspb.BinaryDecoder.prototype.readSignedVarint64String=function(){return this.readSplitVarint64(jspb.utils.joinSignedDecimalString)};jspb.BinaryDecoder.prototype.readZigzagVarint64=function(){return this.readSplitVarint64(jspb.utils.joinZigzag64)};jspb.BinaryDecoder.prototype.readZigzagVarintHash64=function(){return this.readSplitZigzagVarint64(jspb.utils.joinHash64)};\njspb.BinaryDecoder.prototype.readZigzagVarint64String=function(){return this.readSplitZigzagVarint64(jspb.utils.joinSignedDecimalString)};jspb.BinaryDecoder.prototype.readUint8=function(){var a=this.bytes_[this.cursor_+0];this.cursor_+=1;jspb.asserts.assert(this.cursor_<=this.end_);return a};jspb.BinaryDecoder.prototype.readUint16=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1];this.cursor_+=2;jspb.asserts.assert(this.cursor_<=this.end_);return a<<0|b<<8};\njspb.BinaryDecoder.prototype.readUint32=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1],c=this.bytes_[this.cursor_+2],d=this.bytes_[this.cursor_+3];this.cursor_+=4;jspb.asserts.assert(this.cursor_<=this.end_);return(a<<0|b<<8|c<<16|d<<24)>>>0};jspb.BinaryDecoder.prototype.readUint64=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinUint64(a,b)};\njspb.BinaryDecoder.prototype.readUint64String=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinUnsignedDecimalString(a,b)};jspb.BinaryDecoder.prototype.readInt8=function(){var a=this.bytes_[this.cursor_+0];this.cursor_+=1;jspb.asserts.assert(this.cursor_<=this.end_);return a<<24>>24};\njspb.BinaryDecoder.prototype.readInt16=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1];this.cursor_+=2;jspb.asserts.assert(this.cursor_<=this.end_);return(a<<0|b<<8)<<16>>16};jspb.BinaryDecoder.prototype.readInt32=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1],c=this.bytes_[this.cursor_+2],d=this.bytes_[this.cursor_+3];this.cursor_+=4;jspb.asserts.assert(this.cursor_<=this.end_);return a<<0|b<<8|c<<16|d<<24};\njspb.BinaryDecoder.prototype.readInt64=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinInt64(a,b)};jspb.BinaryDecoder.prototype.readInt64String=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinSignedDecimalString(a,b)};jspb.BinaryDecoder.prototype.readFloat=function(){var a=this.readUint32();return jspb.utils.joinFloat32(a,0)};\njspb.BinaryDecoder.prototype.readDouble=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinFloat64(a,b)};jspb.BinaryDecoder.prototype.readBool=function(){return!!this.bytes_[this.cursor_++]};jspb.BinaryDecoder.prototype.readEnum=function(){return this.readSignedVarint32()};\njspb.BinaryDecoder.prototype.readString=function(a){var b=this.bytes_,c=this.cursor_;a=c+a;for(var d=[],e=\"\";c<a;){var f=b[c++];if(128>f)d.push(f);else if(192>f)continue;else if(224>f){var g=b[c++];d.push((f&31)<<6|g&63)}else if(240>f){g=b[c++];var h=b[c++];d.push((f&15)<<12|(g&63)<<6|h&63)}else if(248>f){g=b[c++];h=b[c++];var k=b[c++];f=(f&7)<<18|(g&63)<<12|(h&63)<<6|k&63;f-=65536;d.push((f>>10&1023)+55296,(f&1023)+56320)}8192<=d.length&&(e+=String.fromCharCode.apply(null,d),d.length=0)}e+=goog.crypt.byteArrayToString(d);\nthis.cursor_=c;return e};jspb.BinaryDecoder.prototype.readStringWithLength=function(){var a=this.readUnsignedVarint32();return this.readString(a)};jspb.BinaryDecoder.prototype.readBytes=function(a){if(0>a||this.cursor_+a>this.bytes_.length)return this.error_=!0,jspb.asserts.fail(\"Invalid byte length!\"),new Uint8Array(0);var b=this.bytes_.subarray(this.cursor_,this.cursor_+a);this.cursor_+=a;jspb.asserts.assert(this.cursor_<=this.end_);return b};jspb.BinaryDecoder.prototype.readVarintHash64=function(){return this.readSplitVarint64(jspb.utils.joinHash64)};\njspb.BinaryDecoder.prototype.readFixedHash64=function(){var a=this.bytes_,b=this.cursor_,c=a[b+0],d=a[b+1],e=a[b+2],f=a[b+3],g=a[b+4],h=a[b+5],k=a[b+6];a=a[b+7];this.cursor_+=8;return String.fromCharCode(c,d,e,f,g,h,k,a)};jspb.BinaryReader=function(a,b,c){this.decoder_=jspb.BinaryDecoder.alloc(a,b,c);this.fieldCursor_=this.decoder_.getCursor();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;this.error_=!1;this.readCallbacks_=null};jspb.BinaryReader.instanceCache_=[];\njspb.BinaryReader.alloc=function(a,b,c){if(jspb.BinaryReader.instanceCache_.length){var d=jspb.BinaryReader.instanceCache_.pop();a&&d.decoder_.setBlock(a,b,c);return d}return new jspb.BinaryReader(a,b,c)};jspb.BinaryReader.prototype.alloc=jspb.BinaryReader.alloc;\njspb.BinaryReader.prototype.free=function(){this.decoder_.clear();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;this.error_=!1;this.readCallbacks_=null;100>jspb.BinaryReader.instanceCache_.length&&jspb.BinaryReader.instanceCache_.push(this)};jspb.BinaryReader.prototype.getFieldCursor=function(){return this.fieldCursor_};jspb.BinaryReader.prototype.getCursor=function(){return this.decoder_.getCursor()};\njspb.BinaryReader.prototype.getBuffer=function(){return this.decoder_.getBuffer()};jspb.BinaryReader.prototype.getFieldNumber=function(){return this.nextField_};goog.exportProperty(jspb.BinaryReader.prototype,\"getFieldNumber\",jspb.BinaryReader.prototype.getFieldNumber);jspb.BinaryReader.prototype.getWireType=function(){return this.nextWireType_};jspb.BinaryReader.prototype.isDelimited=function(){return this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"isDelimited\",jspb.BinaryReader.prototype.isDelimited);jspb.BinaryReader.prototype.isEndGroup=function(){return this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP};goog.exportProperty(jspb.BinaryReader.prototype,\"isEndGroup\",jspb.BinaryReader.prototype.isEndGroup);jspb.BinaryReader.prototype.getError=function(){return this.error_||this.decoder_.getError()};\njspb.BinaryReader.prototype.setBlock=function(a,b,c){this.decoder_.setBlock(a,b,c);this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID};jspb.BinaryReader.prototype.reset=function(){this.decoder_.reset();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID};jspb.BinaryReader.prototype.advance=function(a){this.decoder_.advance(a)};\njspb.BinaryReader.prototype.nextField=function(){if(this.decoder_.atEnd())return!1;if(this.getError())return jspb.asserts.fail(\"Decoder hit an error\"),!1;this.fieldCursor_=this.decoder_.getCursor();var a=this.decoder_.readUnsignedVarint32(),b=a>>>3;a&=7;if(a!=jspb.BinaryConstants.WireType.VARINT&&a!=jspb.BinaryConstants.WireType.FIXED32&&a!=jspb.BinaryConstants.WireType.FIXED64&&a!=jspb.BinaryConstants.WireType.DELIMITED&&a!=jspb.BinaryConstants.WireType.START_GROUP&&a!=jspb.BinaryConstants.WireType.END_GROUP)return jspb.asserts.fail(\"Invalid wire type: %s (at position %s)\",\na,this.fieldCursor_),this.error_=!0,!1;this.nextField_=b;this.nextWireType_=a;return!0};goog.exportProperty(jspb.BinaryReader.prototype,\"nextField\",jspb.BinaryReader.prototype.nextField);jspb.BinaryReader.prototype.unskipHeader=function(){this.decoder_.unskipVarint(this.nextField_<<3|this.nextWireType_)};jspb.BinaryReader.prototype.skipMatchingFields=function(){var a=this.nextField_;for(this.unskipHeader();this.nextField()&&this.getFieldNumber()==a;)this.skipField();this.decoder_.atEnd()||this.unskipHeader()};\njspb.BinaryReader.prototype.skipVarintField=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.VARINT?(jspb.asserts.fail(\"Invalid wire type for skipVarintField\"),this.skipField()):this.decoder_.skipVarint()};jspb.BinaryReader.prototype.skipDelimitedField=function(){if(this.nextWireType_!=jspb.BinaryConstants.WireType.DELIMITED)jspb.asserts.fail(\"Invalid wire type for skipDelimitedField\"),this.skipField();else{var a=this.decoder_.readUnsignedVarint32();this.decoder_.advance(a)}};\njspb.BinaryReader.prototype.skipFixed32Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED32?(jspb.asserts.fail(\"Invalid wire type for skipFixed32Field\"),this.skipField()):this.decoder_.advance(4)};jspb.BinaryReader.prototype.skipFixed64Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED64?(jspb.asserts.fail(\"Invalid wire type for skipFixed64Field\"),this.skipField()):this.decoder_.advance(8)};\njspb.BinaryReader.prototype.skipGroup=function(){var a=this.nextField_;do{if(!this.nextField()){jspb.asserts.fail(\"Unmatched start-group tag: stream EOF\");this.error_=!0;break}if(this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP){this.nextField_!=a&&(jspb.asserts.fail(\"Unmatched end-group tag\"),this.error_=!0);break}this.skipField()}while(1)};\njspb.BinaryReader.prototype.skipField=function(){switch(this.nextWireType_){case jspb.BinaryConstants.WireType.VARINT:this.skipVarintField();break;case jspb.BinaryConstants.WireType.FIXED64:this.skipFixed64Field();break;case jspb.BinaryConstants.WireType.DELIMITED:this.skipDelimitedField();break;case jspb.BinaryConstants.WireType.FIXED32:this.skipFixed32Field();break;case jspb.BinaryConstants.WireType.START_GROUP:this.skipGroup();break;default:jspb.asserts.fail(\"Invalid wire encoding for field.\")}};\njspb.BinaryReader.prototype.registerReadCallback=function(a,b){null===this.readCallbacks_&&(this.readCallbacks_={});jspb.asserts.assert(!this.readCallbacks_[a]);this.readCallbacks_[a]=b};jspb.BinaryReader.prototype.runReadCallback=function(a){jspb.asserts.assert(null!==this.readCallbacks_);a=this.readCallbacks_[a];jspb.asserts.assert(a);return a(this)};\njspb.BinaryReader.prototype.readAny=function(a){this.nextWireType_=jspb.BinaryConstants.FieldTypeToWireType(a);var b=jspb.BinaryConstants.FieldType;switch(a){case b.DOUBLE:return this.readDouble();case b.FLOAT:return this.readFloat();case b.INT64:return this.readInt64();case b.UINT64:return this.readUint64();case b.INT32:return this.readInt32();case b.FIXED64:return this.readFixed64();case b.FIXED32:return this.readFixed32();case b.BOOL:return this.readBool();case b.STRING:return this.readString();\ncase b.GROUP:jspb.asserts.fail(\"Group field type not supported in readAny()\");case b.MESSAGE:jspb.asserts.fail(\"Message field type not supported in readAny()\");case b.BYTES:return this.readBytes();case b.UINT32:return this.readUint32();case b.ENUM:return this.readEnum();case b.SFIXED32:return this.readSfixed32();case b.SFIXED64:return this.readSfixed64();case b.SINT32:return this.readSint32();case b.SINT64:return this.readSint64();case b.FHASH64:return this.readFixedHash64();case b.VHASH64:return this.readVarintHash64();\ndefault:jspb.asserts.fail(\"Invalid field type in readAny()\")}return 0};jspb.BinaryReader.prototype.readMessage=function(a,b){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var c=this.decoder_.getEnd(),d=this.decoder_.readUnsignedVarint32();d=this.decoder_.getCursor()+d;this.decoder_.setEnd(d);b(a,this);this.decoder_.setCursor(d);this.decoder_.setEnd(c)};goog.exportProperty(jspb.BinaryReader.prototype,\"readMessage\",jspb.BinaryReader.prototype.readMessage);\njspb.BinaryReader.prototype.readGroup=function(a,b,c){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.START_GROUP);jspb.asserts.assert(this.nextField_==a);c(b,this);this.error_||this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP||(jspb.asserts.fail(\"Group submessage did not end with an END_GROUP tag\"),this.error_=!0)};goog.exportProperty(jspb.BinaryReader.prototype,\"readGroup\",jspb.BinaryReader.prototype.readGroup);\njspb.BinaryReader.prototype.getFieldDecoder=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32(),b=this.decoder_.getCursor(),c=b+a;a=jspb.BinaryDecoder.alloc(this.decoder_.getBuffer(),b,a);this.decoder_.setCursor(c);return a};jspb.BinaryReader.prototype.readInt32=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint32()};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readInt32\",jspb.BinaryReader.prototype.readInt32);jspb.BinaryReader.prototype.readInt32String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint32String()};jspb.BinaryReader.prototype.readInt64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64()};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readInt64\",jspb.BinaryReader.prototype.readInt64);jspb.BinaryReader.prototype.readInt64String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64String()};jspb.BinaryReader.prototype.readUint32=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint32()};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readUint32\",jspb.BinaryReader.prototype.readUint32);jspb.BinaryReader.prototype.readUint32String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint32String()};jspb.BinaryReader.prototype.readUint64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint64()};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readUint64\",jspb.BinaryReader.prototype.readUint64);jspb.BinaryReader.prototype.readUint64String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint64String()};jspb.BinaryReader.prototype.readSint32=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint32()};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readSint32\",jspb.BinaryReader.prototype.readSint32);jspb.BinaryReader.prototype.readSint64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint64()};goog.exportProperty(jspb.BinaryReader.prototype,\"readSint64\",jspb.BinaryReader.prototype.readSint64);\njspb.BinaryReader.prototype.readSint64String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint64String()};jspb.BinaryReader.prototype.readFixed32=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readUint32()};goog.exportProperty(jspb.BinaryReader.prototype,\"readFixed32\",jspb.BinaryReader.prototype.readFixed32);\njspb.BinaryReader.prototype.readFixed64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readUint64()};goog.exportProperty(jspb.BinaryReader.prototype,\"readFixed64\",jspb.BinaryReader.prototype.readFixed64);jspb.BinaryReader.prototype.readFixed64String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readUint64String()};\njspb.BinaryReader.prototype.readSfixed32=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readInt32()};goog.exportProperty(jspb.BinaryReader.prototype,\"readSfixed32\",jspb.BinaryReader.prototype.readSfixed32);jspb.BinaryReader.prototype.readSfixed32String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readInt32().toString()};\njspb.BinaryReader.prototype.readSfixed64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readInt64()};goog.exportProperty(jspb.BinaryReader.prototype,\"readSfixed64\",jspb.BinaryReader.prototype.readSfixed64);jspb.BinaryReader.prototype.readSfixed64String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readInt64String()};\njspb.BinaryReader.prototype.readFloat=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readFloat()};goog.exportProperty(jspb.BinaryReader.prototype,\"readFloat\",jspb.BinaryReader.prototype.readFloat);jspb.BinaryReader.prototype.readDouble=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readDouble()};goog.exportProperty(jspb.BinaryReader.prototype,\"readDouble\",jspb.BinaryReader.prototype.readDouble);\njspb.BinaryReader.prototype.readBool=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return!!this.decoder_.readUnsignedVarint32()};goog.exportProperty(jspb.BinaryReader.prototype,\"readBool\",jspb.BinaryReader.prototype.readBool);jspb.BinaryReader.prototype.readEnum=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64()};goog.exportProperty(jspb.BinaryReader.prototype,\"readEnum\",jspb.BinaryReader.prototype.readEnum);\njspb.BinaryReader.prototype.readString=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32();return this.decoder_.readString(a)};goog.exportProperty(jspb.BinaryReader.prototype,\"readString\",jspb.BinaryReader.prototype.readString);jspb.BinaryReader.prototype.readBytes=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32();return this.decoder_.readBytes(a)};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readBytes\",jspb.BinaryReader.prototype.readBytes);jspb.BinaryReader.prototype.readVarintHash64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readVarintHash64()};jspb.BinaryReader.prototype.readSintHash64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarintHash64()};\njspb.BinaryReader.prototype.readSplitVarint64=function(a){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSplitVarint64(a)};jspb.BinaryReader.prototype.readSplitZigzagVarint64=function(a){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSplitVarint64(function(b,c){return jspb.utils.fromZigzag64(b,c,a)})};\njspb.BinaryReader.prototype.readFixedHash64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readFixedHash64()};jspb.BinaryReader.prototype.readSplitFixed64=function(a){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readSplitFixed64(a)};\njspb.BinaryReader.prototype.readPackedField_=function(a){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var b=this.decoder_.readUnsignedVarint32();b=this.decoder_.getCursor()+b;for(var c=[];this.decoder_.getCursor()<b;)c.push(a.call(this.decoder_));return c};jspb.BinaryReader.prototype.readPackedInt32=function(){return this.readPackedField_(this.decoder_.readSignedVarint32)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedInt32\",jspb.BinaryReader.prototype.readPackedInt32);\njspb.BinaryReader.prototype.readPackedInt32String=function(){return this.readPackedField_(this.decoder_.readSignedVarint32String)};jspb.BinaryReader.prototype.readPackedInt64=function(){return this.readPackedField_(this.decoder_.readSignedVarint64)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedInt64\",jspb.BinaryReader.prototype.readPackedInt64);jspb.BinaryReader.prototype.readPackedInt64String=function(){return this.readPackedField_(this.decoder_.readSignedVarint64String)};\njspb.BinaryReader.prototype.readPackedUint32=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedUint32\",jspb.BinaryReader.prototype.readPackedUint32);jspb.BinaryReader.prototype.readPackedUint32String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32String)};jspb.BinaryReader.prototype.readPackedUint64=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64)};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readPackedUint64\",jspb.BinaryReader.prototype.readPackedUint64);jspb.BinaryReader.prototype.readPackedUint64String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64String)};jspb.BinaryReader.prototype.readPackedSint32=function(){return this.readPackedField_(this.decoder_.readZigzagVarint32)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedSint32\",jspb.BinaryReader.prototype.readPackedSint32);\njspb.BinaryReader.prototype.readPackedSint64=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedSint64\",jspb.BinaryReader.prototype.readPackedSint64);jspb.BinaryReader.prototype.readPackedSint64String=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64String)};jspb.BinaryReader.prototype.readPackedFixed32=function(){return this.readPackedField_(this.decoder_.readUint32)};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readPackedFixed32\",jspb.BinaryReader.prototype.readPackedFixed32);jspb.BinaryReader.prototype.readPackedFixed64=function(){return this.readPackedField_(this.decoder_.readUint64)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedFixed64\",jspb.BinaryReader.prototype.readPackedFixed64);jspb.BinaryReader.prototype.readPackedFixed64String=function(){return this.readPackedField_(this.decoder_.readUint64String)};\njspb.BinaryReader.prototype.readPackedSfixed32=function(){return this.readPackedField_(this.decoder_.readInt32)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedSfixed32\",jspb.BinaryReader.prototype.readPackedSfixed32);jspb.BinaryReader.prototype.readPackedSfixed64=function(){return this.readPackedField_(this.decoder_.readInt64)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedSfixed64\",jspb.BinaryReader.prototype.readPackedSfixed64);\njspb.BinaryReader.prototype.readPackedSfixed64String=function(){return this.readPackedField_(this.decoder_.readInt64String)};jspb.BinaryReader.prototype.readPackedFloat=function(){return this.readPackedField_(this.decoder_.readFloat)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedFloat\",jspb.BinaryReader.prototype.readPackedFloat);jspb.BinaryReader.prototype.readPackedDouble=function(){return this.readPackedField_(this.decoder_.readDouble)};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readPackedDouble\",jspb.BinaryReader.prototype.readPackedDouble);jspb.BinaryReader.prototype.readPackedBool=function(){return this.readPackedField_(this.decoder_.readBool)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedBool\",jspb.BinaryReader.prototype.readPackedBool);jspb.BinaryReader.prototype.readPackedEnum=function(){return this.readPackedField_(this.decoder_.readEnum)};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readPackedEnum\",jspb.BinaryReader.prototype.readPackedEnum);jspb.BinaryReader.prototype.readPackedVarintHash64=function(){return this.readPackedField_(this.decoder_.readVarintHash64)};jspb.BinaryReader.prototype.readPackedFixedHash64=function(){return this.readPackedField_(this.decoder_.readFixedHash64)};jspb.BinaryEncoder=function(){this.buffer_=[]};jspb.BinaryEncoder.prototype.length=function(){return this.buffer_.length};jspb.BinaryEncoder.prototype.end=function(){var a=this.buffer_;this.buffer_=[];return a};\njspb.BinaryEncoder.prototype.writeSplitVarint64=function(a,b){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(b==Math.floor(b));jspb.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);for(jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32);0<b||127<a;)this.buffer_.push(a&127|128),a=(a>>>7|b<<25)>>>0,b>>>=7;this.buffer_.push(a)};\njspb.BinaryEncoder.prototype.writeSplitFixed64=function(a,b){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(b==Math.floor(b));jspb.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32);this.writeUint32(a);this.writeUint32(b)};\njspb.BinaryEncoder.prototype.writeUnsignedVarint32=function(a){jspb.asserts.assert(a==Math.floor(a));for(jspb.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);127<a;)this.buffer_.push(a&127|128),a>>>=7;this.buffer_.push(a)};\njspb.BinaryEncoder.prototype.writeSignedVarint32=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);if(0<=a)this.writeUnsignedVarint32(a);else{for(var b=0;9>b;b++)this.buffer_.push(a&127|128),a>>=7;this.buffer_.push(1)}};\njspb.BinaryEncoder.prototype.writeUnsignedVarint64=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_64);jspb.utils.splitInt64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};\njspb.BinaryEncoder.prototype.writeSignedVarint64=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitInt64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};\njspb.BinaryEncoder.prototype.writeZigzagVarint32=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.writeUnsignedVarint32((a<<1^a>>31)>>>0)};jspb.BinaryEncoder.prototype.writeZigzagVarint64=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitZigzag64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};\njspb.BinaryEncoder.prototype.writeZigzagVarint64String=function(a){this.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(a))};jspb.BinaryEncoder.prototype.writeZigzagVarintHash64=function(a){var b=this;jspb.utils.splitHash64(a);jspb.utils.toZigzag64(jspb.utils.split64Low,jspb.utils.split64High,function(a,d){b.writeSplitVarint64(a>>>0,d>>>0)})};\njspb.BinaryEncoder.prototype.writeUint8=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(0<=a&&256>a);this.buffer_.push(a>>>0&255)};jspb.BinaryEncoder.prototype.writeUint16=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(0<=a&&65536>a);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255)};\njspb.BinaryEncoder.prototype.writeUint32=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);this.buffer_.push(a>>>16&255);this.buffer_.push(a>>>24&255)};jspb.BinaryEncoder.prototype.writeUint64=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_64);jspb.utils.splitUint64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High)};\njspb.BinaryEncoder.prototype.writeInt8=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(-128<=a&&128>a);this.buffer_.push(a>>>0&255)};jspb.BinaryEncoder.prototype.writeInt16=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(-32768<=a&&32768>a);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255)};\njspb.BinaryEncoder.prototype.writeInt32=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);this.buffer_.push(a>>>16&255);this.buffer_.push(a>>>24&255)};\njspb.BinaryEncoder.prototype.writeInt64=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitInt64(a);this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High)};\njspb.BinaryEncoder.prototype.writeInt64String=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(+a>=-jspb.BinaryConstants.TWO_TO_63&&+a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a));this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High)};\njspb.BinaryEncoder.prototype.writeFloat=function(a){jspb.asserts.assert(Infinity===a||-Infinity===a||isNaN(a)||a>=-jspb.BinaryConstants.FLOAT32_MAX&&a<=jspb.BinaryConstants.FLOAT32_MAX);jspb.utils.splitFloat32(a);this.writeUint32(jspb.utils.split64Low)};\njspb.BinaryEncoder.prototype.writeDouble=function(a){jspb.asserts.assert(Infinity===a||-Infinity===a||isNaN(a)||a>=-jspb.BinaryConstants.FLOAT64_MAX&&a<=jspb.BinaryConstants.FLOAT64_MAX);jspb.utils.splitFloat64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High)};jspb.BinaryEncoder.prototype.writeBool=function(a){jspb.asserts.assert(\"boolean\"===typeof a||\"number\"===typeof a);this.buffer_.push(a?1:0)};\njspb.BinaryEncoder.prototype.writeEnum=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.writeSignedVarint32(a)};jspb.BinaryEncoder.prototype.writeBytes=function(a){this.buffer_.push.apply(this.buffer_,a)};jspb.BinaryEncoder.prototype.writeVarintHash64=function(a){jspb.utils.splitHash64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};\njspb.BinaryEncoder.prototype.writeFixedHash64=function(a){jspb.utils.splitHash64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High)};\njspb.BinaryEncoder.prototype.writeString=function(a){var b=this.buffer_.length;jspb.asserts.assertString(a);for(var c=0;c<a.length;c++){var d=a.charCodeAt(c);if(128>d)this.buffer_.push(d);else if(2048>d)this.buffer_.push(d>>6|192),this.buffer_.push(d&63|128);else if(65536>d)if(55296<=d&&56319>=d&&c+1<a.length){var e=a.charCodeAt(c+1);56320<=e&&57343>=e&&(d=1024*(d-55296)+e-56320+65536,this.buffer_.push(d>>18|240),this.buffer_.push(d>>12&63|128),this.buffer_.push(d>>6&63|128),this.buffer_.push(d&63|\n128),c++)}else this.buffer_.push(d>>12|224),this.buffer_.push(d>>6&63|128),this.buffer_.push(d&63|128)}return this.buffer_.length-b};jspb.arith={};jspb.arith.UInt64=function(a,b){this.lo=a;this.hi=b};jspb.arith.UInt64.prototype.cmp=function(a){return this.hi<a.hi||this.hi==a.hi&&this.lo<a.lo?-1:this.hi==a.hi&&this.lo==a.lo?0:1};jspb.arith.UInt64.prototype.rightShift=function(){return new jspb.arith.UInt64((this.lo>>>1|(this.hi&1)<<31)>>>0,this.hi>>>1>>>0)};jspb.arith.UInt64.prototype.leftShift=function(){return new jspb.arith.UInt64(this.lo<<1>>>0,(this.hi<<1|this.lo>>>31)>>>0)};\njspb.arith.UInt64.prototype.msb=function(){return!!(this.hi&2147483648)};jspb.arith.UInt64.prototype.lsb=function(){return!!(this.lo&1)};jspb.arith.UInt64.prototype.zero=function(){return 0==this.lo&&0==this.hi};jspb.arith.UInt64.prototype.add=function(a){return new jspb.arith.UInt64((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0)};\njspb.arith.UInt64.prototype.sub=function(a){return new jspb.arith.UInt64((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0)};jspb.arith.UInt64.mul32x32=function(a,b){var c=a&65535;a>>>=16;var d=b&65535,e=b>>>16;b=c*d+65536*(c*e&65535)+65536*(a*d&65535);for(c=a*e+(c*e>>>16)+(a*d>>>16);4294967296<=b;)b-=4294967296,c+=1;return new jspb.arith.UInt64(b>>>0,c>>>0)};\njspb.arith.UInt64.prototype.mul=function(a){var b=jspb.arith.UInt64.mul32x32(this.lo,a);a=jspb.arith.UInt64.mul32x32(this.hi,a);a.hi=a.lo;a.lo=0;return b.add(a)};\njspb.arith.UInt64.prototype.div=function(a){if(0==a)return[];var b=new jspb.arith.UInt64(0,0),c=new jspb.arith.UInt64(this.lo,this.hi);a=new jspb.arith.UInt64(a,0);for(var d=new jspb.arith.UInt64(1,0);!a.msb();)a=a.leftShift(),d=d.leftShift();for(;!d.zero();)0>=a.cmp(c)&&(b=b.add(d),c=c.sub(a)),a=a.rightShift(),d=d.rightShift();return[b,c]};jspb.arith.UInt64.prototype.toString=function(){for(var a=\"\",b=this;!b.zero();){b=b.div(10);var c=b[0];a=b[1].lo+a;b=c}\"\"==a&&(a=\"0\");return a};\njspb.arith.UInt64.fromString=function(a){for(var b=new jspb.arith.UInt64(0,0),c=new jspb.arith.UInt64(0,0),d=0;d<a.length;d++){if(\"0\">a[d]||\"9\"<a[d])return null;var e=parseInt(a[d],10);c.lo=e;b=b.mul(10).add(c)}return b};jspb.arith.UInt64.prototype.clone=function(){return new jspb.arith.UInt64(this.lo,this.hi)};jspb.arith.Int64=function(a,b){this.lo=a;this.hi=b};\njspb.arith.Int64.prototype.add=function(a){return new jspb.arith.Int64((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0)};jspb.arith.Int64.prototype.sub=function(a){return new jspb.arith.Int64((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0)};jspb.arith.Int64.prototype.clone=function(){return new jspb.arith.Int64(this.lo,this.hi)};\njspb.arith.Int64.prototype.toString=function(){var a=0!=(this.hi&2147483648),b=new jspb.arith.UInt64(this.lo,this.hi);a&&(b=(new jspb.arith.UInt64(0,0)).sub(b));return(a?\"-\":\"\")+b.toString()};jspb.arith.Int64.fromString=function(a){var b=0<a.length&&\"-\"==a[0];b&&(a=a.substring(1));a=jspb.arith.UInt64.fromString(a);if(null===a)return null;b&&(a=(new jspb.arith.UInt64(0,0)).sub(a));return new jspb.arith.Int64(a.lo,a.hi)};jspb.BinaryWriter=function(){this.blocks_=[];this.totalLength_=0;this.encoder_=new jspb.BinaryEncoder;this.bookmarks_=[]};jspb.BinaryWriter.prototype.appendUint8Array_=function(a){var b=this.encoder_.end();this.blocks_.push(b);this.blocks_.push(a);this.totalLength_+=b.length+a.length};\njspb.BinaryWriter.prototype.beginDelimited_=function(a){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);a=this.encoder_.end();this.blocks_.push(a);this.totalLength_+=a.length;a.push(this.totalLength_);return a};jspb.BinaryWriter.prototype.endDelimited_=function(a){var b=a.pop();b=this.totalLength_+this.encoder_.length()-b;for(jspb.asserts.assert(0<=b);127<b;)a.push(b&127|128),b>>>=7,this.totalLength_++;a.push(b);this.totalLength_++};\njspb.BinaryWriter.prototype.writeSerializedMessage=function(a,b,c){this.appendUint8Array_(a.subarray(b,c))};jspb.BinaryWriter.prototype.maybeWriteSerializedMessage=function(a,b,c){null!=a&&null!=b&&null!=c&&this.writeSerializedMessage(a,b,c)};jspb.BinaryWriter.prototype.reset=function(){this.blocks_=[];this.encoder_.end();this.totalLength_=0;this.bookmarks_=[]};\njspb.BinaryWriter.prototype.getResultBuffer=function(){jspb.asserts.assert(0==this.bookmarks_.length);for(var a=new Uint8Array(this.totalLength_+this.encoder_.length()),b=this.blocks_,c=b.length,d=0,e=0;e<c;e++){var f=b[e];a.set(f,d);d+=f.length}b=this.encoder_.end();a.set(b,d);d+=b.length;jspb.asserts.assert(d==a.length);this.blocks_=[a];return a};goog.exportProperty(jspb.BinaryWriter.prototype,\"getResultBuffer\",jspb.BinaryWriter.prototype.getResultBuffer);\njspb.BinaryWriter.prototype.getResultBase64String=function(a){return goog.crypt.base64.encodeByteArray(this.getResultBuffer(),a)};jspb.BinaryWriter.prototype.beginSubMessage=function(a){this.bookmarks_.push(this.beginDelimited_(a))};jspb.BinaryWriter.prototype.endSubMessage=function(){jspb.asserts.assert(0<=this.bookmarks_.length);this.endDelimited_(this.bookmarks_.pop())};\njspb.BinaryWriter.prototype.writeFieldHeader_=function(a,b){jspb.asserts.assert(1<=a&&a==Math.floor(a));this.encoder_.writeUnsignedVarint32(8*a+b)};\njspb.BinaryWriter.prototype.writeAny=function(a,b,c){var d=jspb.BinaryConstants.FieldType;switch(a){case d.DOUBLE:this.writeDouble(b,c);break;case d.FLOAT:this.writeFloat(b,c);break;case d.INT64:this.writeInt64(b,c);break;case d.UINT64:this.writeUint64(b,c);break;case d.INT32:this.writeInt32(b,c);break;case d.FIXED64:this.writeFixed64(b,c);break;case d.FIXED32:this.writeFixed32(b,c);break;case d.BOOL:this.writeBool(b,c);break;case d.STRING:this.writeString(b,c);break;case d.GROUP:jspb.asserts.fail(\"Group field type not supported in writeAny()\");\nbreak;case d.MESSAGE:jspb.asserts.fail(\"Message field type not supported in writeAny()\");break;case d.BYTES:this.writeBytes(b,c);break;case d.UINT32:this.writeUint32(b,c);break;case d.ENUM:this.writeEnum(b,c);break;case d.SFIXED32:this.writeSfixed32(b,c);break;case d.SFIXED64:this.writeSfixed64(b,c);break;case d.SINT32:this.writeSint32(b,c);break;case d.SINT64:this.writeSint64(b,c);break;case d.FHASH64:this.writeFixedHash64(b,c);break;case d.VHASH64:this.writeVarintHash64(b,c);break;default:jspb.asserts.fail(\"Invalid field type in writeAny()\")}};\njspb.BinaryWriter.prototype.writeUnsignedVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint32(b))};jspb.BinaryWriter.prototype.writeSignedVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(b))};jspb.BinaryWriter.prototype.writeUnsignedVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint64(b))};\njspb.BinaryWriter.prototype.writeSignedVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint64(b))};jspb.BinaryWriter.prototype.writeZigzagVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint32(b))};jspb.BinaryWriter.prototype.writeZigzagVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64(b))};\njspb.BinaryWriter.prototype.writeZigzagVarint64String_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64String(b))};jspb.BinaryWriter.prototype.writeZigzagVarintHash64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarintHash64(b))};\njspb.BinaryWriter.prototype.writeInt32=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(a,b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeInt32\",jspb.BinaryWriter.prototype.writeInt32);jspb.BinaryWriter.prototype.writeInt32String=function(a,b){null!=b&&(b=parseInt(b,10),jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(a,b))};\njspb.BinaryWriter.prototype.writeInt64=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeSignedVarint64_(a,b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeInt64\",jspb.BinaryWriter.prototype.writeInt64);jspb.BinaryWriter.prototype.writeInt64String=function(a,b){null!=b&&(b=jspb.arith.Int64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(b.lo,b.hi))};\njspb.BinaryWriter.prototype.writeUint32=function(a,b){null!=b&&(jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(a,b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeUint32\",jspb.BinaryWriter.prototype.writeUint32);jspb.BinaryWriter.prototype.writeUint32String=function(a,b){null!=b&&(b=parseInt(b,10),jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(a,b))};\njspb.BinaryWriter.prototype.writeUint64=function(a,b){null!=b&&(jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_64),this.writeUnsignedVarint64_(a,b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeUint64\",jspb.BinaryWriter.prototype.writeUint64);jspb.BinaryWriter.prototype.writeUint64String=function(a,b){null!=b&&(b=jspb.arith.UInt64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(b.lo,b.hi))};\njspb.BinaryWriter.prototype.writeSint32=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeZigzagVarint32_(a,b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeSint32\",jspb.BinaryWriter.prototype.writeSint32);jspb.BinaryWriter.prototype.writeSint64=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeZigzagVarint64_(a,b))};\ngoog.exportProperty(jspb.BinaryWriter.prototype,\"writeSint64\",jspb.BinaryWriter.prototype.writeSint64);jspb.BinaryWriter.prototype.writeSintHash64=function(a,b){null!=b&&this.writeZigzagVarintHash64_(a,b)};jspb.BinaryWriter.prototype.writeSint64String=function(a,b){null!=b&&this.writeZigzagVarint64String_(a,b)};\njspb.BinaryWriter.prototype.writeFixed32=function(a,b){null!=b&&(jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeUint32(b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeFixed32\",jspb.BinaryWriter.prototype.writeFixed32);\njspb.BinaryWriter.prototype.writeFixed64=function(a,b){null!=b&&(jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_64),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeUint64(b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeFixed64\",jspb.BinaryWriter.prototype.writeFixed64);\njspb.BinaryWriter.prototype.writeFixed64String=function(a,b){null!=b&&(b=jspb.arith.UInt64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(b.lo,b.hi))};jspb.BinaryWriter.prototype.writeSfixed32=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeInt32(b))};\ngoog.exportProperty(jspb.BinaryWriter.prototype,\"writeSfixed32\",jspb.BinaryWriter.prototype.writeSfixed32);jspb.BinaryWriter.prototype.writeSfixed64=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeInt64(b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeSfixed64\",jspb.BinaryWriter.prototype.writeSfixed64);\njspb.BinaryWriter.prototype.writeSfixed64String=function(a,b){null!=b&&(b=jspb.arith.Int64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(b.lo,b.hi))};jspb.BinaryWriter.prototype.writeFloat=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeFloat(b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeFloat\",jspb.BinaryWriter.prototype.writeFloat);\njspb.BinaryWriter.prototype.writeDouble=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeDouble(b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeDouble\",jspb.BinaryWriter.prototype.writeDouble);jspb.BinaryWriter.prototype.writeBool=function(a,b){null!=b&&(jspb.asserts.assert(\"boolean\"===typeof b||\"number\"===typeof b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeBool(b))};\ngoog.exportProperty(jspb.BinaryWriter.prototype,\"writeBool\",jspb.BinaryWriter.prototype.writeBool);jspb.BinaryWriter.prototype.writeEnum=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeEnum\",jspb.BinaryWriter.prototype.writeEnum);\njspb.BinaryWriter.prototype.writeString=function(a,b){null!=b&&(a=this.beginDelimited_(a),this.encoder_.writeString(b),this.endDelimited_(a))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeString\",jspb.BinaryWriter.prototype.writeString);jspb.BinaryWriter.prototype.writeBytes=function(a,b){null!=b&&(b=jspb.utils.byteSourceToUint8Array(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(b.length),this.appendUint8Array_(b))};\ngoog.exportProperty(jspb.BinaryWriter.prototype,\"writeBytes\",jspb.BinaryWriter.prototype.writeBytes);jspb.BinaryWriter.prototype.writeMessage=function(a,b,c){null!=b&&(a=this.beginDelimited_(a),c(b,this),this.endDelimited_(a))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeMessage\",jspb.BinaryWriter.prototype.writeMessage);\njspb.BinaryWriter.prototype.writeMessageSet=function(a,b,c){null!=b&&(this.writeFieldHeader_(1,jspb.BinaryConstants.WireType.START_GROUP),this.writeFieldHeader_(2,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(a),a=this.beginDelimited_(3),c(b,this),this.endDelimited_(a),this.writeFieldHeader_(1,jspb.BinaryConstants.WireType.END_GROUP))};\njspb.BinaryWriter.prototype.writeGroup=function(a,b,c){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.START_GROUP),c(b,this),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.END_GROUP))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeGroup\",jspb.BinaryWriter.prototype.writeGroup);jspb.BinaryWriter.prototype.writeFixedHash64=function(a,b){null!=b&&(jspb.asserts.assert(8==b.length),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeFixedHash64(b))};\njspb.BinaryWriter.prototype.writeVarintHash64=function(a,b){null!=b&&(jspb.asserts.assert(8==b.length),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeVarintHash64(b))};jspb.BinaryWriter.prototype.writeSplitFixed64=function(a,b,c){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64);this.encoder_.writeSplitFixed64(b,c)};\njspb.BinaryWriter.prototype.writeSplitVarint64=function(a,b,c){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT);this.encoder_.writeSplitVarint64(b,c)};jspb.BinaryWriter.prototype.writeSplitZigzagVarint64=function(a,b,c){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT);var d=this.encoder_;jspb.utils.toZigzag64(b,c,function(a,b){d.writeSplitVarint64(a>>>0,b>>>0)})};\njspb.BinaryWriter.prototype.writeRepeatedInt32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSignedVarint32_(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedInt32\",jspb.BinaryWriter.prototype.writeRepeatedInt32);jspb.BinaryWriter.prototype.writeRepeatedInt32String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeInt32String(a,b[c])};\njspb.BinaryWriter.prototype.writeRepeatedInt64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSignedVarint64_(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedInt64\",jspb.BinaryWriter.prototype.writeRepeatedInt64);jspb.BinaryWriter.prototype.writeRepeatedSplitFixed64=function(a,b,c,d){if(null!=b)for(var e=0;e<b.length;e++)this.writeSplitFixed64(a,c(b[e]),d(b[e]))};\njspb.BinaryWriter.prototype.writeRepeatedSplitVarint64=function(a,b,c,d){if(null!=b)for(var e=0;e<b.length;e++)this.writeSplitVarint64(a,c(b[e]),d(b[e]))};jspb.BinaryWriter.prototype.writeRepeatedSplitZigzagVarint64=function(a,b,c,d){if(null!=b)for(var e=0;e<b.length;e++)this.writeSplitZigzagVarint64(a,c(b[e]),d(b[e]))};jspb.BinaryWriter.prototype.writeRepeatedInt64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeInt64String(a,b[c])};\njspb.BinaryWriter.prototype.writeRepeatedUint32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUnsignedVarint32_(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedUint32\",jspb.BinaryWriter.prototype.writeRepeatedUint32);jspb.BinaryWriter.prototype.writeRepeatedUint32String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUint32String(a,b[c])};\njspb.BinaryWriter.prototype.writeRepeatedUint64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUnsignedVarint64_(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedUint64\",jspb.BinaryWriter.prototype.writeRepeatedUint64);jspb.BinaryWriter.prototype.writeRepeatedUint64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUint64String(a,b[c])};\njspb.BinaryWriter.prototype.writeRepeatedSint32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint32_(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedSint32\",jspb.BinaryWriter.prototype.writeRepeatedSint32);jspb.BinaryWriter.prototype.writeRepeatedSint64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint64_(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedSint64\",jspb.BinaryWriter.prototype.writeRepeatedSint64);\njspb.BinaryWriter.prototype.writeRepeatedSint64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint64String_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedSintHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarintHash64_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedFixed32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed32(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedFixed32\",jspb.BinaryWriter.prototype.writeRepeatedFixed32);\njspb.BinaryWriter.prototype.writeRepeatedFixed64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed64(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedFixed64\",jspb.BinaryWriter.prototype.writeRepeatedFixed64);jspb.BinaryWriter.prototype.writeRepeatedFixed64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed64String(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedFixed64String\",jspb.BinaryWriter.prototype.writeRepeatedFixed64String);\njspb.BinaryWriter.prototype.writeRepeatedSfixed32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed32(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedSfixed32\",jspb.BinaryWriter.prototype.writeRepeatedSfixed32);jspb.BinaryWriter.prototype.writeRepeatedSfixed64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed64(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedSfixed64\",jspb.BinaryWriter.prototype.writeRepeatedSfixed64);\njspb.BinaryWriter.prototype.writeRepeatedSfixed64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed64String(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedFloat=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFloat(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedFloat\",jspb.BinaryWriter.prototype.writeRepeatedFloat);\njspb.BinaryWriter.prototype.writeRepeatedDouble=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeDouble(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedDouble\",jspb.BinaryWriter.prototype.writeRepeatedDouble);jspb.BinaryWriter.prototype.writeRepeatedBool=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeBool(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedBool\",jspb.BinaryWriter.prototype.writeRepeatedBool);\njspb.BinaryWriter.prototype.writeRepeatedEnum=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeEnum(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedEnum\",jspb.BinaryWriter.prototype.writeRepeatedEnum);jspb.BinaryWriter.prototype.writeRepeatedString=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeString(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedString\",jspb.BinaryWriter.prototype.writeRepeatedString);\njspb.BinaryWriter.prototype.writeRepeatedBytes=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeBytes(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedBytes\",jspb.BinaryWriter.prototype.writeRepeatedBytes);jspb.BinaryWriter.prototype.writeRepeatedMessage=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++){var e=this.beginDelimited_(a);c(b[d],this);this.endDelimited_(e)}};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedMessage\",jspb.BinaryWriter.prototype.writeRepeatedMessage);\njspb.BinaryWriter.prototype.writeRepeatedGroup=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++)this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.START_GROUP),c(b[d],this),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.END_GROUP)};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedGroup\",jspb.BinaryWriter.prototype.writeRepeatedGroup);jspb.BinaryWriter.prototype.writeRepeatedFixedHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixedHash64(a,b[c])};\njspb.BinaryWriter.prototype.writeRepeatedVarintHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeVarintHash64(a,b[c])};jspb.BinaryWriter.prototype.writePackedInt32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint32(b[c]);this.endDelimited_(a)}};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedInt32\",jspb.BinaryWriter.prototype.writePackedInt32);\njspb.BinaryWriter.prototype.writePackedInt32String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint32(parseInt(b[c],10));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedInt64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint64(b[c]);this.endDelimited_(a)}};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedInt64\",jspb.BinaryWriter.prototype.writePackedInt64);\njspb.BinaryWriter.prototype.writePackedSplitFixed64=function(a,b,c,d){if(null!=b){a=this.beginDelimited_(a);for(var e=0;e<b.length;e++)this.encoder_.writeSplitFixed64(c(b[e]),d(b[e]));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedSplitVarint64=function(a,b,c,d){if(null!=b){a=this.beginDelimited_(a);for(var e=0;e<b.length;e++)this.encoder_.writeSplitVarint64(c(b[e]),d(b[e]));this.endDelimited_(a)}};\njspb.BinaryWriter.prototype.writePackedSplitZigzagVarint64=function(a,b,c,d){if(null!=b){a=this.beginDelimited_(a);for(var e=this.encoder_,f=0;f<b.length;f++)jspb.utils.toZigzag64(c(b[f]),d(b[f]),function(a,b){e.writeSplitVarint64(a>>>0,b>>>0)});this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedInt64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++){var d=jspb.arith.Int64.fromString(b[c]);this.encoder_.writeSplitVarint64(d.lo,d.hi)}this.endDelimited_(a)}};\njspb.BinaryWriter.prototype.writePackedUint32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint32(b[c]);this.endDelimited_(a)}};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedUint32\",jspb.BinaryWriter.prototype.writePackedUint32);\njspb.BinaryWriter.prototype.writePackedUint32String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint32(parseInt(b[c],10));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedUint64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint64(b[c]);this.endDelimited_(a)}};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedUint64\",jspb.BinaryWriter.prototype.writePackedUint64);\njspb.BinaryWriter.prototype.writePackedUint64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++){var d=jspb.arith.UInt64.fromString(b[c]);this.encoder_.writeSplitVarint64(d.lo,d.hi)}this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedSint32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarint32(b[c]);this.endDelimited_(a)}};\ngoog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedSint32\",jspb.BinaryWriter.prototype.writePackedSint32);jspb.BinaryWriter.prototype.writePackedSint64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarint64(b[c]);this.endDelimited_(a)}};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedSint64\",jspb.BinaryWriter.prototype.writePackedSint64);\njspb.BinaryWriter.prototype.writePackedSint64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(b[c]));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedSintHash64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarintHash64(b[c]);this.endDelimited_(a)}};\njspb.BinaryWriter.prototype.writePackedFixed32=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeUint32(b[a])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedFixed32\",jspb.BinaryWriter.prototype.writePackedFixed32);\njspb.BinaryWriter.prototype.writePackedFixed64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeUint64(b[a])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedFixed64\",jspb.BinaryWriter.prototype.writePackedFixed64);\njspb.BinaryWriter.prototype.writePackedFixed64String=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++){var c=jspb.arith.UInt64.fromString(b[a]);this.encoder_.writeSplitFixed64(c.lo,c.hi)}};\njspb.BinaryWriter.prototype.writePackedSfixed32=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeInt32(b[a])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedSfixed32\",jspb.BinaryWriter.prototype.writePackedSfixed32);\njspb.BinaryWriter.prototype.writePackedSfixed64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeInt64(b[a])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedSfixed64\",jspb.BinaryWriter.prototype.writePackedSfixed64);\njspb.BinaryWriter.prototype.writePackedSfixed64String=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeInt64String(b[a])};jspb.BinaryWriter.prototype.writePackedFloat=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeFloat(b[a])};\ngoog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedFloat\",jspb.BinaryWriter.prototype.writePackedFloat);jspb.BinaryWriter.prototype.writePackedDouble=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeDouble(b[a])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedDouble\",jspb.BinaryWriter.prototype.writePackedDouble);\njspb.BinaryWriter.prototype.writePackedBool=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(b.length),a=0;a<b.length;a++)this.encoder_.writeBool(b[a])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedBool\",jspb.BinaryWriter.prototype.writePackedBool);\njspb.BinaryWriter.prototype.writePackedEnum=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeEnum(b[c]);this.endDelimited_(a)}};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedEnum\",jspb.BinaryWriter.prototype.writePackedEnum);\njspb.BinaryWriter.prototype.writePackedFixedHash64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeFixedHash64(b[a])};jspb.BinaryWriter.prototype.writePackedVarintHash64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeVarintHash64(b[c]);this.endDelimited_(a)}};jspb.Map=function(a,b){this.arr_=a;this.valueCtor_=b;this.map_={};this.arrClean=!0;0<this.arr_.length&&this.loadFromArray_()};goog.exportSymbol(\"jspb.Map\",jspb.Map);jspb.Map.prototype.loadFromArray_=function(){for(var a=0;a<this.arr_.length;a++){var b=this.arr_[a],c=b[0];this.map_[c.toString()]=new jspb.Map.Entry_(c,b[1])}this.arrClean=!0};\njspb.Map.prototype.toArray=function(){if(this.arrClean){if(this.valueCtor_){var a=this.map_,b;for(b in a)if(Object.prototype.hasOwnProperty.call(a,b)){var c=a[b].valueWrapper;c&&c.toArray()}}}else{this.arr_.length=0;a=this.stringKeys_();a.sort();for(b=0;b<a.length;b++){var d=this.map_[a[b]];(c=d.valueWrapper)&&c.toArray();this.arr_.push([d.key,d.value])}this.arrClean=!0}return this.arr_};goog.exportProperty(jspb.Map.prototype,\"toArray\",jspb.Map.prototype.toArray);\njspb.Map.prototype.toObject=function(a,b){for(var c=this.toArray(),d=[],e=0;e<c.length;e++){var f=this.map_[c[e][0].toString()];this.wrapEntry_(f);var g=f.valueWrapper;g?(jspb.asserts.assert(b),d.push([f.key,b(a,g)])):d.push([f.key,f.value])}return d};goog.exportProperty(jspb.Map.prototype,\"toObject\",jspb.Map.prototype.toObject);jspb.Map.fromObject=function(a,b,c){b=new jspb.Map([],b);for(var d=0;d<a.length;d++){var e=a[d][0],f=c(a[d][1]);b.set(e,f)}return b};\ngoog.exportProperty(jspb.Map,\"fromObject\",jspb.Map.fromObject);jspb.Map.ArrayIteratorIterable_=function(a){this.idx_=0;this.arr_=a};jspb.Map.ArrayIteratorIterable_.prototype.next=function(){return this.idx_<this.arr_.length?{done:!1,value:this.arr_[this.idx_++]}:{done:!0,value:void 0}};\"undefined\"!=typeof Symbol&&(jspb.Map.ArrayIteratorIterable_.prototype[Symbol.iterator]=function(){return this});jspb.Map.prototype.getLength=function(){return this.stringKeys_().length};\ngoog.exportProperty(jspb.Map.prototype,\"getLength\",jspb.Map.prototype.getLength);jspb.Map.prototype.clear=function(){this.map_={};this.arrClean=!1};goog.exportProperty(jspb.Map.prototype,\"clear\",jspb.Map.prototype.clear);jspb.Map.prototype.del=function(a){a=a.toString();var b=this.map_.hasOwnProperty(a);delete this.map_[a];this.arrClean=!1;return b};goog.exportProperty(jspb.Map.prototype,\"del\",jspb.Map.prototype.del);\njspb.Map.prototype.getEntryList=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){var d=this.map_[b[c]];a.push([d.key,d.value])}return a};goog.exportProperty(jspb.Map.prototype,\"getEntryList\",jspb.Map.prototype.getEntryList);jspb.Map.prototype.entries=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){var d=this.map_[b[c]];a.push([d.key,this.wrapEntry_(d)])}return new jspb.Map.ArrayIteratorIterable_(a)};\ngoog.exportProperty(jspb.Map.prototype,\"entries\",jspb.Map.prototype.entries);jspb.Map.prototype.keys=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++)a.push(this.map_[b[c]].key);return new jspb.Map.ArrayIteratorIterable_(a)};goog.exportProperty(jspb.Map.prototype,\"keys\",jspb.Map.prototype.keys);jspb.Map.prototype.values=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++)a.push(this.wrapEntry_(this.map_[b[c]]));return new jspb.Map.ArrayIteratorIterable_(a)};\ngoog.exportProperty(jspb.Map.prototype,\"values\",jspb.Map.prototype.values);jspb.Map.prototype.forEach=function(a,b){var c=this.stringKeys_();c.sort();for(var d=0;d<c.length;d++){var e=this.map_[c[d]];a.call(b,this.wrapEntry_(e),e.key,this)}};goog.exportProperty(jspb.Map.prototype,\"forEach\",jspb.Map.prototype.forEach);jspb.Map.prototype.set=function(a,b){var c=new jspb.Map.Entry_(a);this.valueCtor_?(c.valueWrapper=b,c.value=b.toArray()):c.value=b;this.map_[a.toString()]=c;this.arrClean=!1;return this};\ngoog.exportProperty(jspb.Map.prototype,\"set\",jspb.Map.prototype.set);jspb.Map.prototype.wrapEntry_=function(a){return this.valueCtor_?(a.valueWrapper||(a.valueWrapper=new this.valueCtor_(a.value)),a.valueWrapper):a.value};jspb.Map.prototype.get=function(a){if(a=this.map_[a.toString()])return this.wrapEntry_(a)};goog.exportProperty(jspb.Map.prototype,\"get\",jspb.Map.prototype.get);jspb.Map.prototype.has=function(a){return a.toString()in this.map_};goog.exportProperty(jspb.Map.prototype,\"has\",jspb.Map.prototype.has);\njspb.Map.prototype.serializeBinary=function(a,b,c,d,e){var f=this.stringKeys_();f.sort();for(var g=0;g<f.length;g++){var h=this.map_[f[g]];b.beginSubMessage(a);c.call(b,1,h.key);this.valueCtor_?d.call(b,2,this.wrapEntry_(h),e):d.call(b,2,h.value);b.endSubMessage()}};goog.exportProperty(jspb.Map.prototype,\"serializeBinary\",jspb.Map.prototype.serializeBinary);\njspb.Map.deserializeBinary=function(a,b,c,d,e,f,g){for(;b.nextField()&&!b.isEndGroup();){var h=b.getFieldNumber();1==h?f=c.call(b):2==h&&(a.valueCtor_?(jspb.asserts.assert(e),g||(g=new a.valueCtor_),d.call(b,g,e)):g=d.call(b))}jspb.asserts.assert(void 0!=f);jspb.asserts.assert(void 0!=g);a.set(f,g)};goog.exportProperty(jspb.Map,\"deserializeBinary\",jspb.Map.deserializeBinary);\njspb.Map.prototype.stringKeys_=function(){var a=this.map_,b=[],c;for(c in a)Object.prototype.hasOwnProperty.call(a,c)&&b.push(c);return b};jspb.Map.Entry_=function(a,b){this.key=a;this.value=b;this.valueWrapper=void 0};jspb.ExtensionFieldInfo=function(a,b,c,d,e){this.fieldIndex=a;this.fieldName=b;this.ctor=c;this.toObjectFn=d;this.isRepeated=e};goog.exportSymbol(\"jspb.ExtensionFieldInfo\",jspb.ExtensionFieldInfo);jspb.ExtensionFieldBinaryInfo=function(a,b,c,d,e,f){this.fieldInfo=a;this.binaryReaderFn=b;this.binaryWriterFn=c;this.binaryMessageSerializeFn=d;this.binaryMessageDeserializeFn=e;this.isPacked=f};goog.exportSymbol(\"jspb.ExtensionFieldBinaryInfo\",jspb.ExtensionFieldBinaryInfo);\njspb.ExtensionFieldInfo.prototype.isMessageType=function(){return!!this.ctor};goog.exportProperty(jspb.ExtensionFieldInfo.prototype,\"isMessageType\",jspb.ExtensionFieldInfo.prototype.isMessageType);jspb.Message=function(){};goog.exportSymbol(\"jspb.Message\",jspb.Message);jspb.Message.GENERATE_TO_OBJECT=!0;goog.exportProperty(jspb.Message,\"GENERATE_TO_OBJECT\",jspb.Message.GENERATE_TO_OBJECT);jspb.Message.GENERATE_FROM_OBJECT=!goog.DISALLOW_TEST_ONLY_CODE;\ngoog.exportProperty(jspb.Message,\"GENERATE_FROM_OBJECT\",jspb.Message.GENERATE_FROM_OBJECT);jspb.Message.GENERATE_TO_STRING=!0;jspb.Message.ASSUME_LOCAL_ARRAYS=!1;jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS=!0;jspb.Message.SUPPORTS_UINT8ARRAY_=\"function\"==typeof Uint8Array;jspb.Message.prototype.getJsPbMessageId=function(){return this.messageId_};goog.exportProperty(jspb.Message.prototype,\"getJsPbMessageId\",jspb.Message.prototype.getJsPbMessageId);jspb.Message.getIndex_=function(a,b){return b+a.arrayIndexOffset_};\njspb.Message.hiddenES6Property_=function(){};jspb.Message.getFieldNumber_=function(a,b){return b-a.arrayIndexOffset_};\njspb.Message.initialize=function(a,b,c,d,e,f){a.wrappers_=null;b||(b=c?[c]:[]);a.messageId_=c?String(c):void 0;a.arrayIndexOffset_=0===c?-1:0;a.array=b;jspb.Message.initPivotAndExtensionObject_(a,d);a.convertedPrimitiveFields_={};jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS||(a.repeatedFields=e);if(e)for(b=0;b<e.length;b++)c=e[b],c<a.pivot_?(c=jspb.Message.getIndex_(a,c),a.array[c]=a.array[c]||jspb.Message.EMPTY_LIST_SENTINEL_):(jspb.Message.maybeInitEmptyExtensionObject_(a),a.extensionObject_[c]=\na.extensionObject_[c]||jspb.Message.EMPTY_LIST_SENTINEL_);if(f&&f.length)for(b=0;b<f.length;b++)jspb.Message.computeOneofCase(a,f[b])};goog.exportProperty(jspb.Message,\"initialize\",jspb.Message.initialize);jspb.Message.EMPTY_LIST_SENTINEL_=goog.DEBUG&&Object.freeze?Object.freeze([]):[];jspb.Message.isArray_=function(a){return jspb.Message.ASSUME_LOCAL_ARRAYS?a instanceof Array:Array.isArray(a)};\njspb.Message.isExtensionObject_=function(a){return null!==a&&\"object\"==typeof a&&!jspb.Message.isArray_(a)&&!(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)};jspb.Message.initPivotAndExtensionObject_=function(a,b){var c=a.array.length,d=-1;if(c&&(d=c-1,c=a.array[d],jspb.Message.isExtensionObject_(c))){a.pivot_=jspb.Message.getFieldNumber_(a,d);a.extensionObject_=c;return}-1<b?(a.pivot_=Math.max(b,jspb.Message.getFieldNumber_(a,d+1)),a.extensionObject_=null):a.pivot_=Number.MAX_VALUE};\njspb.Message.maybeInitEmptyExtensionObject_=function(a){var b=jspb.Message.getIndex_(a,a.pivot_);a.array[b]||(a.extensionObject_=a.array[b]={})};jspb.Message.toObjectList=function(a,b,c){for(var d=[],e=0;e<a.length;e++)d[e]=b.call(a[e],c,a[e]);return d};goog.exportProperty(jspb.Message,\"toObjectList\",jspb.Message.toObjectList);\njspb.Message.toObjectExtension=function(a,b,c,d,e){for(var f in c){var g=c[f],h=d.call(a,g);if(null!=h){for(var k in g.fieldName)if(g.fieldName.hasOwnProperty(k))break;b[k]=g.toObjectFn?g.isRepeated?jspb.Message.toObjectList(h,g.toObjectFn,e):g.toObjectFn(e,h):h}}};goog.exportProperty(jspb.Message,\"toObjectExtension\",jspb.Message.toObjectExtension);\njspb.Message.serializeBinaryExtensions=function(a,b,c,d){for(var e in c){var f=c[e],g=f.fieldInfo;if(!f.binaryWriterFn)throw Error(\"Message extension present that was generated without binary serialization support\");var h=d.call(a,g);if(null!=h)if(g.isMessageType())if(f.binaryMessageSerializeFn)f.binaryWriterFn.call(b,g.fieldIndex,h,f.binaryMessageSerializeFn);else throw Error(\"Message extension present holding submessage without binary support enabled, and message is being serialized to binary format\");\nelse f.binaryWriterFn.call(b,g.fieldIndex,h)}};goog.exportProperty(jspb.Message,\"serializeBinaryExtensions\",jspb.Message.serializeBinaryExtensions);\njspb.Message.readBinaryExtension=function(a,b,c,d,e){var f=c[b.getFieldNumber()];if(f){c=f.fieldInfo;if(!f.binaryReaderFn)throw Error(\"Deserializing extension whose generated code does not support binary format\");if(c.isMessageType()){var g=new c.ctor;f.binaryReaderFn.call(b,g,f.binaryMessageDeserializeFn)}else g=f.binaryReaderFn.call(b);c.isRepeated&&!f.isPacked?(b=d.call(a,c))?b.push(g):e.call(a,c,[g]):e.call(a,c,g)}else b.skipField()};goog.exportProperty(jspb.Message,\"readBinaryExtension\",jspb.Message.readBinaryExtension);\njspb.Message.getField=function(a,b){if(b<a.pivot_){b=jspb.Message.getIndex_(a,b);var c=a.array[b];return c===jspb.Message.EMPTY_LIST_SENTINEL_?a.array[b]=[]:c}if(a.extensionObject_)return c=a.extensionObject_[b],c===jspb.Message.EMPTY_LIST_SENTINEL_?a.extensionObject_[b]=[]:c};goog.exportProperty(jspb.Message,\"getField\",jspb.Message.getField);jspb.Message.getRepeatedField=function(a,b){return jspb.Message.getField(a,b)};goog.exportProperty(jspb.Message,\"getRepeatedField\",jspb.Message.getRepeatedField);\njspb.Message.getOptionalFloatingPointField=function(a,b){a=jspb.Message.getField(a,b);return null==a?a:+a};goog.exportProperty(jspb.Message,\"getOptionalFloatingPointField\",jspb.Message.getOptionalFloatingPointField);jspb.Message.getBooleanField=function(a,b){a=jspb.Message.getField(a,b);return null==a?a:!!a};goog.exportProperty(jspb.Message,\"getBooleanField\",jspb.Message.getBooleanField);\njspb.Message.getRepeatedFloatingPointField=function(a,b){var c=jspb.Message.getRepeatedField(a,b);a.convertedPrimitiveFields_||(a.convertedPrimitiveFields_={});if(!a.convertedPrimitiveFields_[b]){for(var d=0;d<c.length;d++)c[d]=+c[d];a.convertedPrimitiveFields_[b]=!0}return c};goog.exportProperty(jspb.Message,\"getRepeatedFloatingPointField\",jspb.Message.getRepeatedFloatingPointField);\njspb.Message.getRepeatedBooleanField=function(a,b){var c=jspb.Message.getRepeatedField(a,b);a.convertedPrimitiveFields_||(a.convertedPrimitiveFields_={});if(!a.convertedPrimitiveFields_[b]){for(var d=0;d<c.length;d++)c[d]=!!c[d];a.convertedPrimitiveFields_[b]=!0}return c};goog.exportProperty(jspb.Message,\"getRepeatedBooleanField\",jspb.Message.getRepeatedBooleanField);\njspb.Message.bytesAsB64=function(a){if(null==a||\"string\"===typeof a)return a;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)return goog.crypt.base64.encodeByteArray(a);jspb.asserts.fail(\"Cannot coerce to b64 string: \"+goog.typeOf(a));return null};goog.exportProperty(jspb.Message,\"bytesAsB64\",jspb.Message.bytesAsB64);\njspb.Message.bytesAsU8=function(a){if(null==a||a instanceof Uint8Array)return a;if(\"string\"===typeof a)return goog.crypt.base64.decodeStringToUint8Array(a);jspb.asserts.fail(\"Cannot coerce to Uint8Array: \"+goog.typeOf(a));return null};goog.exportProperty(jspb.Message,\"bytesAsU8\",jspb.Message.bytesAsU8);jspb.Message.bytesListAsB64=function(a){jspb.Message.assertConsistentTypes_(a);return a.length&&\"string\"!==typeof a[0]?goog.array.map(a,jspb.Message.bytesAsB64):a};\ngoog.exportProperty(jspb.Message,\"bytesListAsB64\",jspb.Message.bytesListAsB64);jspb.Message.bytesListAsU8=function(a){jspb.Message.assertConsistentTypes_(a);return!a.length||a[0]instanceof Uint8Array?a:goog.array.map(a,jspb.Message.bytesAsU8)};goog.exportProperty(jspb.Message,\"bytesListAsU8\",jspb.Message.bytesListAsU8);\njspb.Message.assertConsistentTypes_=function(a){if(goog.DEBUG&&a&&1<a.length){var b=goog.typeOf(a[0]);goog.array.forEach(a,function(a){goog.typeOf(a)!=b&&jspb.asserts.fail(\"Inconsistent type in JSPB repeated field array. Got \"+goog.typeOf(a)+\" expected \"+b)})}};jspb.Message.getFieldWithDefault=function(a,b,c){a=jspb.Message.getField(a,b);return null==a?c:a};goog.exportProperty(jspb.Message,\"getFieldWithDefault\",jspb.Message.getFieldWithDefault);\njspb.Message.getBooleanFieldWithDefault=function(a,b,c){a=jspb.Message.getBooleanField(a,b);return null==a?c:a};goog.exportProperty(jspb.Message,\"getBooleanFieldWithDefault\",jspb.Message.getBooleanFieldWithDefault);jspb.Message.getFloatingPointFieldWithDefault=function(a,b,c){a=jspb.Message.getOptionalFloatingPointField(a,b);return null==a?c:a};goog.exportProperty(jspb.Message,\"getFloatingPointFieldWithDefault\",jspb.Message.getFloatingPointFieldWithDefault);jspb.Message.getFieldProto3=jspb.Message.getFieldWithDefault;\ngoog.exportProperty(jspb.Message,\"getFieldProto3\",jspb.Message.getFieldProto3);jspb.Message.getMapField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});if(b in a.wrappers_)return a.wrappers_[b];var e=jspb.Message.getField(a,b);if(!e){if(c)return;e=[];jspb.Message.setField(a,b,e)}return a.wrappers_[b]=new jspb.Map(e,d)};goog.exportProperty(jspb.Message,\"getMapField\",jspb.Message.getMapField);\njspb.Message.setField=function(a,b,c){jspb.asserts.assertInstanceof(a,jspb.Message);b<a.pivot_?a.array[jspb.Message.getIndex_(a,b)]=c:(jspb.Message.maybeInitEmptyExtensionObject_(a),a.extensionObject_[b]=c);return a};goog.exportProperty(jspb.Message,\"setField\",jspb.Message.setField);jspb.Message.setProto3IntField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,0)};goog.exportProperty(jspb.Message,\"setProto3IntField\",jspb.Message.setProto3IntField);\njspb.Message.setProto3FloatField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,0)};goog.exportProperty(jspb.Message,\"setProto3FloatField\",jspb.Message.setProto3FloatField);jspb.Message.setProto3BooleanField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,!1)};goog.exportProperty(jspb.Message,\"setProto3BooleanField\",jspb.Message.setProto3BooleanField);jspb.Message.setProto3StringField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,\"\")};\ngoog.exportProperty(jspb.Message,\"setProto3StringField\",jspb.Message.setProto3StringField);jspb.Message.setProto3BytesField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,\"\")};goog.exportProperty(jspb.Message,\"setProto3BytesField\",jspb.Message.setProto3BytesField);jspb.Message.setProto3EnumField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,0)};goog.exportProperty(jspb.Message,\"setProto3EnumField\",jspb.Message.setProto3EnumField);\njspb.Message.setProto3StringIntField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,\"0\")};goog.exportProperty(jspb.Message,\"setProto3StringIntField\",jspb.Message.setProto3StringIntField);jspb.Message.setFieldIgnoringDefault_=function(a,b,c,d){jspb.asserts.assertInstanceof(a,jspb.Message);c!==d?jspb.Message.setField(a,b,c):b<a.pivot_?a.array[jspb.Message.getIndex_(a,b)]=null:(jspb.Message.maybeInitEmptyExtensionObject_(a),delete a.extensionObject_[b]);return a};\njspb.Message.addToRepeatedField=function(a,b,c,d){jspb.asserts.assertInstanceof(a,jspb.Message);b=jspb.Message.getRepeatedField(a,b);void 0!=d?b.splice(d,0,c):b.push(c);return a};goog.exportProperty(jspb.Message,\"addToRepeatedField\",jspb.Message.addToRepeatedField);\njspb.Message.setOneofField=function(a,b,c,d){jspb.asserts.assertInstanceof(a,jspb.Message);(c=jspb.Message.computeOneofCase(a,c))&&c!==b&&void 0!==d&&(a.wrappers_&&c in a.wrappers_&&(a.wrappers_[c]=void 0),jspb.Message.setField(a,c,void 0));return jspb.Message.setField(a,b,d)};goog.exportProperty(jspb.Message,\"setOneofField\",jspb.Message.setOneofField);\njspb.Message.computeOneofCase=function(a,b){for(var c,d,e=0;e<b.length;e++){var f=b[e],g=jspb.Message.getField(a,f);null!=g&&(c=f,d=g,jspb.Message.setField(a,f,void 0))}return c?(jspb.Message.setField(a,c,d),c):0};goog.exportProperty(jspb.Message,\"computeOneofCase\",jspb.Message.computeOneofCase);jspb.Message.getWrapperField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});if(!a.wrappers_[c]){var e=jspb.Message.getField(a,c);if(d||e)a.wrappers_[c]=new b(e)}return a.wrappers_[c]};\ngoog.exportProperty(jspb.Message,\"getWrapperField\",jspb.Message.getWrapperField);jspb.Message.getRepeatedWrapperField=function(a,b,c){jspb.Message.wrapRepeatedField_(a,b,c);b=a.wrappers_[c];b==jspb.Message.EMPTY_LIST_SENTINEL_&&(b=a.wrappers_[c]=[]);return b};goog.exportProperty(jspb.Message,\"getRepeatedWrapperField\",jspb.Message.getRepeatedWrapperField);\njspb.Message.wrapRepeatedField_=function(a,b,c){a.wrappers_||(a.wrappers_={});if(!a.wrappers_[c]){for(var d=jspb.Message.getRepeatedField(a,c),e=[],f=0;f<d.length;f++)e[f]=new b(d[f]);a.wrappers_[c]=e}};jspb.Message.setWrapperField=function(a,b,c){jspb.asserts.assertInstanceof(a,jspb.Message);a.wrappers_||(a.wrappers_={});var d=c?c.toArray():c;a.wrappers_[b]=c;return jspb.Message.setField(a,b,d)};goog.exportProperty(jspb.Message,\"setWrapperField\",jspb.Message.setWrapperField);\njspb.Message.setOneofWrapperField=function(a,b,c,d){jspb.asserts.assertInstanceof(a,jspb.Message);a.wrappers_||(a.wrappers_={});var e=d?d.toArray():d;a.wrappers_[b]=d;return jspb.Message.setOneofField(a,b,c,e)};goog.exportProperty(jspb.Message,\"setOneofWrapperField\",jspb.Message.setOneofWrapperField);\njspb.Message.setRepeatedWrapperField=function(a,b,c){jspb.asserts.assertInstanceof(a,jspb.Message);a.wrappers_||(a.wrappers_={});c=c||[];for(var d=[],e=0;e<c.length;e++)d[e]=c[e].toArray();a.wrappers_[b]=c;return jspb.Message.setField(a,b,d)};goog.exportProperty(jspb.Message,\"setRepeatedWrapperField\",jspb.Message.setRepeatedWrapperField);\njspb.Message.addToRepeatedWrapperField=function(a,b,c,d,e){jspb.Message.wrapRepeatedField_(a,d,b);var f=a.wrappers_[b];f||(f=a.wrappers_[b]=[]);c=c?c:new d;a=jspb.Message.getRepeatedField(a,b);void 0!=e?(f.splice(e,0,c),a.splice(e,0,c.toArray())):(f.push(c),a.push(c.toArray()));return c};goog.exportProperty(jspb.Message,\"addToRepeatedWrapperField\",jspb.Message.addToRepeatedWrapperField);\njspb.Message.toMap=function(a,b,c,d){for(var e={},f=0;f<a.length;f++)e[b.call(a[f])]=c?c.call(a[f],d,a[f]):a[f];return e};goog.exportProperty(jspb.Message,\"toMap\",jspb.Message.toMap);jspb.Message.prototype.syncMapFields_=function(){if(this.wrappers_)for(var a in this.wrappers_){var b=this.wrappers_[a];if(Array.isArray(b))for(var c=0;c<b.length;c++)b[c]&&b[c].toArray();else b&&b.toArray()}};jspb.Message.prototype.toArray=function(){this.syncMapFields_();return this.array};\ngoog.exportProperty(jspb.Message.prototype,\"toArray\",jspb.Message.prototype.toArray);jspb.Message.GENERATE_TO_STRING&&(jspb.Message.prototype.toString=function(){this.syncMapFields_();return this.array.toString()});\njspb.Message.prototype.getExtension=function(a){if(this.extensionObject_){this.wrappers_||(this.wrappers_={});var b=a.fieldIndex;if(a.isRepeated){if(a.isMessageType())return this.wrappers_[b]||(this.wrappers_[b]=goog.array.map(this.extensionObject_[b]||[],function(b){return new a.ctor(b)})),this.wrappers_[b]}else if(a.isMessageType())return!this.wrappers_[b]&&this.extensionObject_[b]&&(this.wrappers_[b]=new a.ctor(this.extensionObject_[b])),this.wrappers_[b];return this.extensionObject_[b]}};\ngoog.exportProperty(jspb.Message.prototype,\"getExtension\",jspb.Message.prototype.getExtension);\njspb.Message.prototype.setExtension=function(a,b){this.wrappers_||(this.wrappers_={});jspb.Message.maybeInitEmptyExtensionObject_(this);var c=a.fieldIndex;a.isRepeated?(b=b||[],a.isMessageType()?(this.wrappers_[c]=b,this.extensionObject_[c]=goog.array.map(b,function(a){return a.toArray()})):this.extensionObject_[c]=b):a.isMessageType()?(this.wrappers_[c]=b,this.extensionObject_[c]=b?b.toArray():b):this.extensionObject_[c]=b;return this};goog.exportProperty(jspb.Message.prototype,\"setExtension\",jspb.Message.prototype.setExtension);\njspb.Message.difference=function(a,b){if(!(a instanceof b.constructor))throw Error(\"Messages have different types.\");var c=a.toArray();b=b.toArray();var d=[],e=0,f=c.length>b.length?c.length:b.length;a.getJsPbMessageId()&&(d[0]=a.getJsPbMessageId(),e=1);for(;e<f;e++)jspb.Message.compareFields(c[e],b[e])||(d[e]=b[e]);return new a.constructor(d)};goog.exportProperty(jspb.Message,\"difference\",jspb.Message.difference);\njspb.Message.equals=function(a,b){return a==b||!(!a||!b)&&a instanceof b.constructor&&jspb.Message.compareFields(a.toArray(),b.toArray())};goog.exportProperty(jspb.Message,\"equals\",jspb.Message.equals);jspb.Message.compareExtensions=function(a,b){a=a||{};b=b||{};var c={},d;for(d in a)c[d]=0;for(d in b)c[d]=0;for(d in c)if(!jspb.Message.compareFields(a[d],b[d]))return!1;return!0};goog.exportProperty(jspb.Message,\"compareExtensions\",jspb.Message.compareExtensions);\njspb.Message.compareFields=function(a,b){if(a==b)return!0;if(!goog.isObject(a)||!goog.isObject(b))return\"number\"===typeof a&&isNaN(a)||\"number\"===typeof b&&isNaN(b)?String(a)==String(b):!1;if(a.constructor!=b.constructor)return!1;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a.constructor===Uint8Array){if(a.length!=b.length)return!1;for(var c=0;c<a.length;c++)if(a[c]!=b[c])return!1;return!0}if(a.constructor===Array){var d=void 0,e=void 0,f=Math.max(a.length,b.length);for(c=0;c<f;c++){var g=a[c],h=b[c];g&&\ng.constructor==Object&&(jspb.asserts.assert(void 0===d),jspb.asserts.assert(c===a.length-1),d=g,g=void 0);h&&h.constructor==Object&&(jspb.asserts.assert(void 0===e),jspb.asserts.assert(c===b.length-1),e=h,h=void 0);if(!jspb.Message.compareFields(g,h))return!1}return d||e?(d=d||{},e=e||{},jspb.Message.compareExtensions(d,e)):!0}if(a.constructor===Object)return jspb.Message.compareExtensions(a,b);throw Error(\"Invalid type in JSPB array\");};goog.exportProperty(jspb.Message,\"compareFields\",jspb.Message.compareFields);\njspb.Message.prototype.cloneMessage=function(){return jspb.Message.cloneMessage(this)};goog.exportProperty(jspb.Message.prototype,\"cloneMessage\",jspb.Message.prototype.cloneMessage);jspb.Message.prototype.clone=function(){return jspb.Message.cloneMessage(this)};goog.exportProperty(jspb.Message.prototype,\"clone\",jspb.Message.prototype.clone);jspb.Message.clone=function(a){return jspb.Message.cloneMessage(a)};goog.exportProperty(jspb.Message,\"clone\",jspb.Message.clone);jspb.Message.cloneMessage=function(a){return new a.constructor(jspb.Message.clone_(a.toArray()))};\njspb.Message.copyInto=function(a,b){jspb.asserts.assertInstanceof(a,jspb.Message);jspb.asserts.assertInstanceof(b,jspb.Message);jspb.asserts.assert(a.constructor==b.constructor,\"Copy source and target message should have the same type.\");a=jspb.Message.clone(a);for(var c=b.toArray(),d=a.toArray(),e=c.length=0;e<d.length;e++)c[e]=d[e];b.wrappers_=a.wrappers_;b.extensionObject_=a.extensionObject_};goog.exportProperty(jspb.Message,\"copyInto\",jspb.Message.copyInto);\njspb.Message.clone_=function(a){if(Array.isArray(a)){for(var b=Array(a.length),c=0;c<a.length;c++){var d=a[c];null!=d&&(b[c]=\"object\"==typeof d?jspb.Message.clone_(jspb.asserts.assert(d)):d)}return b}if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)return new Uint8Array(a);b={};for(c in a)d=a[c],null!=d&&(b[c]=\"object\"==typeof d?jspb.Message.clone_(jspb.asserts.assert(d)):d);return b};jspb.Message.registerMessageType=function(a,b){b.messageId=a};\ngoog.exportProperty(jspb.Message,\"registerMessageType\",jspb.Message.registerMessageType);jspb.Message.messageSetExtensions={};jspb.Message.messageSetExtensionsBinary={};jspb.Export={};\"object\"===typeof exports&&(exports.Map=jspb.Map,exports.Message=jspb.Message,exports.BinaryReader=jspb.BinaryReader,exports.BinaryWriter=jspb.BinaryWriter,exports.ExtensionFieldInfo=jspb.ExtensionFieldInfo,exports.ExtensionFieldBinaryInfo=jspb.ExtensionFieldBinaryInfo,exports.exportSymbol=goog.exportSymbol,exports.inherits=goog.inherits,exports.object={extend:goog.object.extend},exports.typeOf=goog.typeOf);\n","// source: google/protobuf/any.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global =\n    (typeof globalThis !== 'undefined' && globalThis) ||\n    (typeof window !== 'undefined' && window) ||\n    (typeof global !== 'undefined' && global) ||\n    (typeof self !== 'undefined' && self) ||\n    (function () { return this; }).call(null) ||\n    Function('return this')();\n\ngoog.exportSymbol('proto.google.protobuf.Any', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.google.protobuf.Any = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.google.protobuf.Any, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.google.protobuf.Any.displayName = 'proto.google.protobuf.Any';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.google.protobuf.Any.prototype.toObject = function(opt_includeInstance) {\n  return proto.google.protobuf.Any.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.google.protobuf.Any} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.google.protobuf.Any.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    typeUrl: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    value: msg.getValue_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.google.protobuf.Any}\n */\nproto.google.protobuf.Any.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.google.protobuf.Any;\n  return proto.google.protobuf.Any.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.google.protobuf.Any} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.google.protobuf.Any}\n */\nproto.google.protobuf.Any.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setTypeUrl(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setValue(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.google.protobuf.Any.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.google.protobuf.Any.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.google.protobuf.Any} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.google.protobuf.Any.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getTypeUrl();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getValue_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string type_url = 1;\n * @return {string}\n */\nproto.google.protobuf.Any.prototype.getTypeUrl = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.google.protobuf.Any} returns this\n */\nproto.google.protobuf.Any.prototype.setTypeUrl = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional bytes value = 2;\n * @return {!(string|Uint8Array)}\n */\nproto.google.protobuf.Any.prototype.getValue = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes value = 2;\n * This is a type-conversion wrapper around `getValue()`\n * @return {string}\n */\nproto.google.protobuf.Any.prototype.getValue_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getValue()));\n};\n\n\n/**\n * optional bytes value = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getValue()`\n * @return {!Uint8Array}\n */\nproto.google.protobuf.Any.prototype.getValue_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getValue()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.google.protobuf.Any} returns this\n */\nproto.google.protobuf.Any.prototype.setValue = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\ngoog.object.extend(exports, proto.google.protobuf);\n/* This code will be inserted into generated code for\n * google/protobuf/any.proto. */\n\n/**\n * Returns the type name contained in this instance, if any.\n * @return {string|undefined}\n */\nproto.google.protobuf.Any.prototype.getTypeName = function() {\n  return this.getTypeUrl().split('/').pop();\n};\n\n\n/**\n * Packs the given message instance into this Any.\n * For binary format usage only.\n * @param {!Uint8Array} serialized The serialized data to pack.\n * @param {string} name The type name of this message object.\n * @param {string=} opt_typeUrlPrefix the type URL prefix.\n */\nproto.google.protobuf.Any.prototype.pack = function(serialized, name,\n                                                    opt_typeUrlPrefix) {\n  if (!opt_typeUrlPrefix) {\n    opt_typeUrlPrefix = 'type.googleapis.com/';\n  }\n\n  if (opt_typeUrlPrefix.substr(-1) != '/') {\n    this.setTypeUrl(opt_typeUrlPrefix + '/' + name);\n  } else {\n    this.setTypeUrl(opt_typeUrlPrefix + name);\n  }\n\n  this.setValue(serialized);\n};\n\n\n/**\n * @template T\n * Unpacks this Any into the given message object.\n * @param {function(Uint8Array):T} deserialize Function that will deserialize\n *     the binary data properly.\n * @param {string} name The expected type name of this message object.\n * @return {?T} If the name matched the expected name, returns the deserialized\n *     object, otherwise returns null.\n */\nproto.google.protobuf.Any.prototype.unpack = function(deserialize, name) {\n  if (this.getTypeName() == name) {\n    return deserialize(this.getValue_asU8());\n  } else {\n    return null;\n  }\n};\n","'use strict';\n\nvar require$$0 = require('google-protobuf');\nvar require$$2 = require('google-protobuf/google/protobuf/any_pb.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0);\nvar require$$2__default = /*#__PURE__*/_interopDefaultLegacy(require$$2);\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar vision$2 = {};\n\nvar vision$1 = {};\n\nvar image_classifier_options = {};\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(image_classifier_options, \"__esModule\", { value: true });\n\nvar image_classifier_result = {};\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(image_classifier_result, \"__esModule\", { value: true });\n\nvar image_classifier = {};\n\nvar calculator_pb = {};\n\nvar calculator_options_pb = {};\nvar mediapipe_framework_calculator_options_pb = calculator_options_pb;\n\n(function (exports) {\n\t// source: mediapipe/framework/calculator_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.CalculatorOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.CalculatorOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 2, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.CalculatorOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.CalculatorOptions.displayName = 'proto.mediapipe.CalculatorOptions';\n\t}\n\n\t/**\n\t * The extensions registered with this message class. This is a map of\n\t * extension field number to fieldInfo object.\n\t *\n\t * For example:\n\t *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n\t *\n\t * fieldName contains the JsCompiler renamed field name property so that it\n\t * works in OPTIMIZED mode.\n\t *\n\t * @type {!Object<number, jspb.ExtensionFieldInfo>}\n\t */\n\tproto.mediapipe.CalculatorOptions.extensions = {};\n\n\n\t/**\n\t * The extensions registered with this message class. This is a map of\n\t * extension field number to fieldInfo object.\n\t *\n\t * For example:\n\t *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n\t *\n\t * fieldName contains the JsCompiler renamed field name property so that it\n\t * works in OPTIMIZED mode.\n\t *\n\t * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}\n\t */\n\tproto.mediapipe.CalculatorOptions.extensionsBinary = {};\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.CalculatorOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.CalculatorOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.CalculatorOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.CalculatorOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    mergeFields: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f\n\t  };\n\n\t  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,\n\t      proto.mediapipe.CalculatorOptions.extensions, proto.mediapipe.CalculatorOptions.prototype.getExtension,\n\t      includeInstance);\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.CalculatorOptions}\n\t */\n\tproto.mediapipe.CalculatorOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.CalculatorOptions;\n\t  return proto.mediapipe.CalculatorOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.CalculatorOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.CalculatorOptions}\n\t */\n\tproto.mediapipe.CalculatorOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setMergeFields(value);\n\t      break;\n\t    default:\n\t      jspb.Message.readBinaryExtension(msg, reader,\n\t        proto.mediapipe.CalculatorOptions.extensionsBinary,\n\t        proto.mediapipe.CalculatorOptions.prototype.getExtension,\n\t        proto.mediapipe.CalculatorOptions.prototype.setExtension);\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.CalculatorOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.CalculatorOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.CalculatorOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.CalculatorOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeBool(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  jspb.Message.serializeBinaryExtensions(message, writer,\n\t    proto.mediapipe.CalculatorOptions.extensionsBinary, proto.mediapipe.CalculatorOptions.prototype.getExtension);\n\t};\n\n\n\t/**\n\t * optional bool merge_fields = 1;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorOptions.prototype.getMergeFields = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.CalculatorOptions} returns this\n\t */\n\tproto.mediapipe.CalculatorOptions.prototype.setMergeFields = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.CalculatorOptions} returns this\n\t */\n\tproto.mediapipe.CalculatorOptions.prototype.clearMergeFields = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorOptions.prototype.hasMergeFields = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (calculator_options_pb));\n\nvar mediapipe_options_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/framework/mediapipe_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.MediaPipeOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.MediaPipeOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.MediaPipeOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.MediaPipeOptions.displayName = 'proto.mediapipe.MediaPipeOptions';\n\t}\n\n\t/**\n\t * The extensions registered with this message class. This is a map of\n\t * extension field number to fieldInfo object.\n\t *\n\t * For example:\n\t *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n\t *\n\t * fieldName contains the JsCompiler renamed field name property so that it\n\t * works in OPTIMIZED mode.\n\t *\n\t * @type {!Object<number, jspb.ExtensionFieldInfo>}\n\t */\n\tproto.mediapipe.MediaPipeOptions.extensions = {};\n\n\n\t/**\n\t * The extensions registered with this message class. This is a map of\n\t * extension field number to fieldInfo object.\n\t *\n\t * For example:\n\t *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n\t *\n\t * fieldName contains the JsCompiler renamed field name property so that it\n\t * works in OPTIMIZED mode.\n\t *\n\t * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}\n\t */\n\tproto.mediapipe.MediaPipeOptions.extensionsBinary = {};\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.MediaPipeOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.MediaPipeOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.MediaPipeOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.MediaPipeOptions.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\n\t  };\n\n\t  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,\n\t      proto.mediapipe.MediaPipeOptions.extensions, proto.mediapipe.MediaPipeOptions.prototype.getExtension,\n\t      includeInstance);\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.MediaPipeOptions}\n\t */\n\tproto.mediapipe.MediaPipeOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.MediaPipeOptions;\n\t  return proto.mediapipe.MediaPipeOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.MediaPipeOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.MediaPipeOptions}\n\t */\n\tproto.mediapipe.MediaPipeOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    default:\n\t      jspb.Message.readBinaryExtension(msg, reader,\n\t        proto.mediapipe.MediaPipeOptions.extensionsBinary,\n\t        proto.mediapipe.MediaPipeOptions.prototype.getExtension,\n\t        proto.mediapipe.MediaPipeOptions.prototype.setExtension);\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.MediaPipeOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.MediaPipeOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.MediaPipeOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.MediaPipeOptions.serializeBinaryToWriter = function(message, writer) {\n\t  jspb.Message.serializeBinaryExtensions(message, writer,\n\t    proto.mediapipe.MediaPipeOptions.extensionsBinary, proto.mediapipe.MediaPipeOptions.prototype.getExtension);\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (mediapipe_options_pb));\n\nvar packet_factory_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/framework/packet_factory.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.PacketFactoryConfig', null, global);\n\tgoog.exportSymbol('proto.mediapipe.PacketFactoryOptions', null, global);\n\tgoog.exportSymbol('proto.mediapipe.PacketManagerConfig', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.PacketFactoryOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.PacketFactoryOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.PacketFactoryOptions.displayName = 'proto.mediapipe.PacketFactoryOptions';\n\t}\n\n\t/**\n\t * The extensions registered with this message class. This is a map of\n\t * extension field number to fieldInfo object.\n\t *\n\t * For example:\n\t *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n\t *\n\t * fieldName contains the JsCompiler renamed field name property so that it\n\t * works in OPTIMIZED mode.\n\t *\n\t * @type {!Object<number, jspb.ExtensionFieldInfo>}\n\t */\n\tproto.mediapipe.PacketFactoryOptions.extensions = {};\n\n\n\t/**\n\t * The extensions registered with this message class. This is a map of\n\t * extension field number to fieldInfo object.\n\t *\n\t * For example:\n\t *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n\t *\n\t * fieldName contains the JsCompiler renamed field name property so that it\n\t * works in OPTIMIZED mode.\n\t *\n\t * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}\n\t */\n\tproto.mediapipe.PacketFactoryOptions.extensionsBinary = {};\n\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.PacketFactoryConfig = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 500, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.PacketFactoryConfig, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.PacketFactoryConfig.displayName = 'proto.mediapipe.PacketFactoryConfig';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.PacketManagerConfig = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.PacketManagerConfig.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.PacketManagerConfig, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.PacketManagerConfig.displayName = 'proto.mediapipe.PacketManagerConfig';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.PacketFactoryOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.PacketFactoryOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.PacketFactoryOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketFactoryOptions.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\n\t  };\n\n\t  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,\n\t      proto.mediapipe.PacketFactoryOptions.extensions, proto.mediapipe.PacketFactoryOptions.prototype.getExtension,\n\t      includeInstance);\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.PacketFactoryOptions}\n\t */\n\tproto.mediapipe.PacketFactoryOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.PacketFactoryOptions;\n\t  return proto.mediapipe.PacketFactoryOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.PacketFactoryOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.PacketFactoryOptions}\n\t */\n\tproto.mediapipe.PacketFactoryOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    default:\n\t      jspb.Message.readBinaryExtension(msg, reader,\n\t        proto.mediapipe.PacketFactoryOptions.extensionsBinary,\n\t        proto.mediapipe.PacketFactoryOptions.prototype.getExtension,\n\t        proto.mediapipe.PacketFactoryOptions.prototype.setExtension);\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.PacketFactoryOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.PacketFactoryOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.PacketFactoryOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketFactoryOptions.serializeBinaryToWriter = function(message, writer) {\n\t  jspb.Message.serializeBinaryExtensions(message, writer,\n\t    proto.mediapipe.PacketFactoryOptions.extensionsBinary, proto.mediapipe.PacketFactoryOptions.prototype.getExtension);\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.PacketFactoryConfig.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.PacketFactoryConfig} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketFactoryConfig.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    packetFactory: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    outputSidePacket: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    externalOutput: (f = jspb.Message.getField(msg, 1002)) == null ? undefined : f,\n\t    options: (f = msg.getOptions()) && proto.mediapipe.PacketFactoryOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.PacketFactoryConfig}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.PacketFactoryConfig;\n\t  return proto.mediapipe.PacketFactoryConfig.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.PacketFactoryConfig} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.PacketFactoryConfig}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setPacketFactory(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setOutputSidePacket(value);\n\t      break;\n\t    case 1002:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setExternalOutput(value);\n\t      break;\n\t    case 3:\n\t      var value = new proto.mediapipe.PacketFactoryOptions;\n\t      reader.readMessage(value,proto.mediapipe.PacketFactoryOptions.deserializeBinaryFromReader);\n\t      msg.setOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.PacketFactoryConfig.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.PacketFactoryConfig} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketFactoryConfig.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 1002));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      1002,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      proto.mediapipe.PacketFactoryOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string packet_factory = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.getPacketFactory = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.PacketFactoryConfig} returns this\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.setPacketFactory = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.PacketFactoryConfig} returns this\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.clearPacketFactory = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.hasPacketFactory = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional string output_side_packet = 2;\n\t * @return {string}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.getOutputSidePacket = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.PacketFactoryConfig} returns this\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.setOutputSidePacket = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.PacketFactoryConfig} returns this\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.clearOutputSidePacket = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.hasOutputSidePacket = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional string external_output = 1002;\n\t * @return {string}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.getExternalOutput = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1002, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.PacketFactoryConfig} returns this\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.setExternalOutput = function(value) {\n\t  return jspb.Message.setField(this, 1002, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.PacketFactoryConfig} returns this\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.clearExternalOutput = function() {\n\t  return jspb.Message.setField(this, 1002, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.hasExternalOutput = function() {\n\t  return jspb.Message.getField(this, 1002) != null;\n\t};\n\n\n\t/**\n\t * optional PacketFactoryOptions options = 3;\n\t * @return {?proto.mediapipe.PacketFactoryOptions}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.getOptions = function() {\n\t  return /** @type{?proto.mediapipe.PacketFactoryOptions} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.PacketFactoryOptions, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.PacketFactoryOptions|undefined} value\n\t * @return {!proto.mediapipe.PacketFactoryConfig} returns this\n\t*/\n\tproto.mediapipe.PacketFactoryConfig.prototype.setOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.PacketFactoryConfig} returns this\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.clearOptions = function() {\n\t  return this.setOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.hasOptions = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.PacketManagerConfig.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.PacketManagerConfig.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.PacketManagerConfig.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.PacketManagerConfig} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketManagerConfig.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    packetList: jspb.Message.toObjectList(msg.getPacketList(),\n\t    proto.mediapipe.PacketFactoryConfig.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.PacketManagerConfig}\n\t */\n\tproto.mediapipe.PacketManagerConfig.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.PacketManagerConfig;\n\t  return proto.mediapipe.PacketManagerConfig.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.PacketManagerConfig} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.PacketManagerConfig}\n\t */\n\tproto.mediapipe.PacketManagerConfig.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.PacketFactoryConfig;\n\t      reader.readMessage(value,proto.mediapipe.PacketFactoryConfig.deserializeBinaryFromReader);\n\t      msg.addPacket(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.PacketManagerConfig.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.PacketManagerConfig.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.PacketManagerConfig} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketManagerConfig.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getPacketList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.PacketFactoryConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated PacketFactoryConfig packet = 1;\n\t * @return {!Array<!proto.mediapipe.PacketFactoryConfig>}\n\t */\n\tproto.mediapipe.PacketManagerConfig.prototype.getPacketList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.PacketFactoryConfig>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.PacketFactoryConfig, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.PacketFactoryConfig>} value\n\t * @return {!proto.mediapipe.PacketManagerConfig} returns this\n\t*/\n\tproto.mediapipe.PacketManagerConfig.prototype.setPacketList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.PacketFactoryConfig=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.PacketFactoryConfig}\n\t */\n\tproto.mediapipe.PacketManagerConfig.prototype.addPacket = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.PacketFactoryConfig, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.PacketManagerConfig} returns this\n\t */\n\tproto.mediapipe.PacketManagerConfig.prototype.clearPacketList = function() {\n\t  return this.setPacketList([]);\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (packet_factory_pb));\n\nvar packet_generator_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/framework/packet_generator.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.PacketGeneratorConfig', null, global);\n\tgoog.exportSymbol('proto.mediapipe.PacketGeneratorOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.PacketGeneratorOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 2, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.PacketGeneratorOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.PacketGeneratorOptions.displayName = 'proto.mediapipe.PacketGeneratorOptions';\n\t}\n\n\t/**\n\t * The extensions registered with this message class. This is a map of\n\t * extension field number to fieldInfo object.\n\t *\n\t * For example:\n\t *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n\t *\n\t * fieldName contains the JsCompiler renamed field name property so that it\n\t * works in OPTIMIZED mode.\n\t *\n\t * @type {!Object<number, jspb.ExtensionFieldInfo>}\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.extensions = {};\n\n\n\t/**\n\t * The extensions registered with this message class. This is a map of\n\t * extension field number to fieldInfo object.\n\t *\n\t * For example:\n\t *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n\t *\n\t * fieldName contains the JsCompiler renamed field name property so that it\n\t * works in OPTIMIZED mode.\n\t *\n\t * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.extensionsBinary = {};\n\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.PacketGeneratorConfig = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 500, proto.mediapipe.PacketGeneratorConfig.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.PacketGeneratorConfig, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.PacketGeneratorConfig.displayName = 'proto.mediapipe.PacketGeneratorConfig';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.PacketGeneratorOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.PacketGeneratorOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    mergeFields: jspb.Message.getBooleanFieldWithDefault(msg, 1, true)\n\t  };\n\n\t  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,\n\t      proto.mediapipe.PacketGeneratorOptions.extensions, proto.mediapipe.PacketGeneratorOptions.prototype.getExtension,\n\t      includeInstance);\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.PacketGeneratorOptions}\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.PacketGeneratorOptions;\n\t  return proto.mediapipe.PacketGeneratorOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.PacketGeneratorOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.PacketGeneratorOptions}\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setMergeFields(value);\n\t      break;\n\t    default:\n\t      jspb.Message.readBinaryExtension(msg, reader,\n\t        proto.mediapipe.PacketGeneratorOptions.extensionsBinary,\n\t        proto.mediapipe.PacketGeneratorOptions.prototype.getExtension,\n\t        proto.mediapipe.PacketGeneratorOptions.prototype.setExtension);\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.PacketGeneratorOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.PacketGeneratorOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeBool(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  jspb.Message.serializeBinaryExtensions(message, writer,\n\t    proto.mediapipe.PacketGeneratorOptions.extensionsBinary, proto.mediapipe.PacketGeneratorOptions.prototype.getExtension);\n\t};\n\n\n\t/**\n\t * optional bool merge_fields = 1;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.prototype.getMergeFields = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, true));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.PacketGeneratorOptions} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.prototype.setMergeFields = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.PacketGeneratorOptions} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.prototype.clearMergeFields = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.prototype.hasMergeFields = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.repeatedFields_ = [2,1002,3,1003];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.PacketGeneratorConfig.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.PacketGeneratorConfig} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    packetGenerator: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    inputSidePacketList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n\t    externalInputList: (f = jspb.Message.getRepeatedField(msg, 1002)) == null ? undefined : f,\n\t    outputSidePacketList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,\n\t    externalOutputList: (f = jspb.Message.getRepeatedField(msg, 1003)) == null ? undefined : f,\n\t    options: (f = msg.getOptions()) && proto.mediapipe.PacketGeneratorOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.PacketGeneratorConfig}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.PacketGeneratorConfig;\n\t  return proto.mediapipe.PacketGeneratorConfig.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.PacketGeneratorConfig} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.PacketGeneratorConfig}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setPacketGenerator(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addInputSidePacket(value);\n\t      break;\n\t    case 1002:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addExternalInput(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addOutputSidePacket(value);\n\t      break;\n\t    case 1003:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addExternalOutput(value);\n\t      break;\n\t    case 4:\n\t      var value = new proto.mediapipe.PacketGeneratorOptions;\n\t      reader.readMessage(value,proto.mediapipe.PacketGeneratorOptions.deserializeBinaryFromReader);\n\t      msg.setOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.PacketGeneratorConfig.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.PacketGeneratorConfig} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getInputSidePacketList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getExternalInputList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      1002,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOutputSidePacketList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = message.getExternalOutputList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      1003,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      4,\n\t      f,\n\t      proto.mediapipe.PacketGeneratorOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string packet_generator = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.getPacketGenerator = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.setPacketGenerator = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.clearPacketGenerator = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.hasPacketGenerator = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * repeated string input_side_packet = 2;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.getInputSidePacketList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.setInputSidePacketList = function(value) {\n\t  return jspb.Message.setField(this, 2, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.addInputSidePacket = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.clearInputSidePacketList = function() {\n\t  return this.setInputSidePacketList([]);\n\t};\n\n\n\t/**\n\t * repeated string external_input = 1002;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.getExternalInputList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1002));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.setExternalInputList = function(value) {\n\t  return jspb.Message.setField(this, 1002, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.addExternalInput = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 1002, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.clearExternalInputList = function() {\n\t  return this.setExternalInputList([]);\n\t};\n\n\n\t/**\n\t * repeated string output_side_packet = 3;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.getOutputSidePacketList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.setOutputSidePacketList = function(value) {\n\t  return jspb.Message.setField(this, 3, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.addOutputSidePacket = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.clearOutputSidePacketList = function() {\n\t  return this.setOutputSidePacketList([]);\n\t};\n\n\n\t/**\n\t * repeated string external_output = 1003;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.getExternalOutputList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1003));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.setExternalOutputList = function(value) {\n\t  return jspb.Message.setField(this, 1003, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.addExternalOutput = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 1003, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.clearExternalOutputList = function() {\n\t  return this.setExternalOutputList([]);\n\t};\n\n\n\t/**\n\t * optional PacketGeneratorOptions options = 4;\n\t * @return {?proto.mediapipe.PacketGeneratorOptions}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.getOptions = function() {\n\t  return /** @type{?proto.mediapipe.PacketGeneratorOptions} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.PacketGeneratorOptions, 4));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.PacketGeneratorOptions|undefined} value\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t*/\n\tproto.mediapipe.PacketGeneratorConfig.prototype.setOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.clearOptions = function() {\n\t  return this.setOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.hasOptions = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (packet_generator_pb));\n\nvar status_handler_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/framework/status_handler.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_mediapipe_options_pb = mediapipe_options_pb;\n\tgoog.object.extend(proto, mediapipe_framework_mediapipe_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.StatusHandlerConfig', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.StatusHandlerConfig = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 500, proto.mediapipe.StatusHandlerConfig.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.StatusHandlerConfig, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.StatusHandlerConfig.displayName = 'proto.mediapipe.StatusHandlerConfig';\n\t}\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.StatusHandlerConfig.repeatedFields_ = [2,1002];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.StatusHandlerConfig.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.StatusHandlerConfig} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.StatusHandlerConfig.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    statusHandler: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    inputSidePacketList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n\t    externalInputList: (f = jspb.Message.getRepeatedField(msg, 1002)) == null ? undefined : f,\n\t    options: (f = msg.getOptions()) && mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.StatusHandlerConfig}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.StatusHandlerConfig;\n\t  return proto.mediapipe.StatusHandlerConfig.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.StatusHandlerConfig} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.StatusHandlerConfig}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setStatusHandler(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addInputSidePacket(value);\n\t      break;\n\t    case 1002:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addExternalInput(value);\n\t      break;\n\t    case 3:\n\t      var value = new mediapipe_framework_mediapipe_options_pb.MediaPipeOptions;\n\t      reader.readMessage(value,mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.deserializeBinaryFromReader);\n\t      msg.setOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.StatusHandlerConfig.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.StatusHandlerConfig} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.StatusHandlerConfig.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getInputSidePacketList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getExternalInputList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      1002,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string status_handler = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.getStatusHandler = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.setStatusHandler = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.clearStatusHandler = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.hasStatusHandler = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * repeated string input_side_packet = 2;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.getInputSidePacketList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.setInputSidePacketList = function(value) {\n\t  return jspb.Message.setField(this, 2, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.addInputSidePacket = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.clearInputSidePacketList = function() {\n\t  return this.setInputSidePacketList([]);\n\t};\n\n\n\t/**\n\t * repeated string external_input = 1002;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.getExternalInputList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1002));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.setExternalInputList = function(value) {\n\t  return jspb.Message.setField(this, 1002, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.addExternalInput = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 1002, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.clearExternalInputList = function() {\n\t  return this.setExternalInputList([]);\n\t};\n\n\n\t/**\n\t * optional MediaPipeOptions options = 3;\n\t * @return {?proto.mediapipe.MediaPipeOptions}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.getOptions = function() {\n\t  return /** @type{?proto.mediapipe.MediaPipeOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_mediapipe_options_pb.MediaPipeOptions, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.MediaPipeOptions|undefined} value\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t*/\n\tproto.mediapipe.StatusHandlerConfig.prototype.setOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.clearOptions = function() {\n\t  return this.setOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.hasOptions = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (status_handler_pb));\n\nvar stream_handler_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/framework/stream_handler.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_mediapipe_options_pb = mediapipe_options_pb;\n\tgoog.object.extend(proto, mediapipe_framework_mediapipe_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.InputStreamHandlerConfig', null, global);\n\tgoog.exportSymbol('proto.mediapipe.OutputStreamHandlerConfig', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.InputStreamHandlerConfig, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InputStreamHandlerConfig.displayName = 'proto.mediapipe.InputStreamHandlerConfig';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.OutputStreamHandlerConfig.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.OutputStreamHandlerConfig, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.OutputStreamHandlerConfig.displayName = 'proto.mediapipe.OutputStreamHandlerConfig';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InputStreamHandlerConfig.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InputStreamHandlerConfig} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    inputStreamHandler: jspb.Message.getFieldWithDefault(msg, 1, \"DefaultInputStreamHandler\"),\n\t    options: (f = msg.getOptions()) && mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InputStreamHandlerConfig}\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InputStreamHandlerConfig;\n\t  return proto.mediapipe.InputStreamHandlerConfig.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InputStreamHandlerConfig} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InputStreamHandlerConfig}\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setInputStreamHandler(value);\n\t      break;\n\t    case 3:\n\t      var value = new mediapipe_framework_mediapipe_options_pb.MediaPipeOptions;\n\t      reader.readMessage(value,mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.deserializeBinaryFromReader);\n\t      msg.setOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InputStreamHandlerConfig.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InputStreamHandlerConfig} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string input_stream_handler = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.getInputStreamHandler = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"DefaultInputStreamHandler\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InputStreamHandlerConfig} returns this\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.setInputStreamHandler = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InputStreamHandlerConfig} returns this\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.clearInputStreamHandler = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.hasInputStreamHandler = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional MediaPipeOptions options = 3;\n\t * @return {?proto.mediapipe.MediaPipeOptions}\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.getOptions = function() {\n\t  return /** @type{?proto.mediapipe.MediaPipeOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_mediapipe_options_pb.MediaPipeOptions, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.MediaPipeOptions|undefined} value\n\t * @return {!proto.mediapipe.InputStreamHandlerConfig} returns this\n\t*/\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.setOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.InputStreamHandlerConfig} returns this\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.clearOptions = function() {\n\t  return this.setOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.hasOptions = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.repeatedFields_ = [2];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.OutputStreamHandlerConfig.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.OutputStreamHandlerConfig} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    outputStreamHandler: jspb.Message.getFieldWithDefault(msg, 1, \"InOrderOutputStreamHandler\"),\n\t    inputSidePacketList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n\t    options: (f = msg.getOptions()) && mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.OutputStreamHandlerConfig}\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.OutputStreamHandlerConfig;\n\t  return proto.mediapipe.OutputStreamHandlerConfig.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.OutputStreamHandlerConfig} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.OutputStreamHandlerConfig}\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setOutputStreamHandler(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addInputSidePacket(value);\n\t      break;\n\t    case 3:\n\t      var value = new mediapipe_framework_mediapipe_options_pb.MediaPipeOptions;\n\t      reader.readMessage(value,mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.deserializeBinaryFromReader);\n\t      msg.setOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.OutputStreamHandlerConfig.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.OutputStreamHandlerConfig} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getInputSidePacketList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string output_stream_handler = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.getOutputStreamHandler = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"InOrderOutputStreamHandler\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.OutputStreamHandlerConfig} returns this\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.setOutputStreamHandler = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.OutputStreamHandlerConfig} returns this\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.clearOutputStreamHandler = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.hasOutputStreamHandler = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * repeated string input_side_packet = 2;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.getInputSidePacketList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.OutputStreamHandlerConfig} returns this\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.setInputSidePacketList = function(value) {\n\t  return jspb.Message.setField(this, 2, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.OutputStreamHandlerConfig} returns this\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.addInputSidePacket = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.OutputStreamHandlerConfig} returns this\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.clearInputSidePacketList = function() {\n\t  return this.setInputSidePacketList([]);\n\t};\n\n\n\t/**\n\t * optional MediaPipeOptions options = 3;\n\t * @return {?proto.mediapipe.MediaPipeOptions}\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.getOptions = function() {\n\t  return /** @type{?proto.mediapipe.MediaPipeOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_mediapipe_options_pb.MediaPipeOptions, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.MediaPipeOptions|undefined} value\n\t * @return {!proto.mediapipe.OutputStreamHandlerConfig} returns this\n\t*/\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.setOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.OutputStreamHandlerConfig} returns this\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.clearOptions = function() {\n\t  return this.setOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.hasOptions = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (stream_handler_pb));\n\n(function (exports) {\n\t// source: mediapipe/framework/calculator.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_options_pb = calculator_options_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_options_pb);\n\tvar google_protobuf_any_pb = require$$2__default[\"default\"];\n\tgoog.object.extend(proto, google_protobuf_any_pb);\n\tvar mediapipe_framework_mediapipe_options_pb = mediapipe_options_pb;\n\tgoog.object.extend(proto, mediapipe_framework_mediapipe_options_pb);\n\tvar mediapipe_framework_packet_factory_pb = packet_factory_pb;\n\tgoog.object.extend(proto, mediapipe_framework_packet_factory_pb);\n\tvar mediapipe_framework_packet_generator_pb = packet_generator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_packet_generator_pb);\n\tvar mediapipe_framework_status_handler_pb = status_handler_pb;\n\tgoog.object.extend(proto, mediapipe_framework_status_handler_pb);\n\tvar mediapipe_framework_stream_handler_pb = stream_handler_pb;\n\tgoog.object.extend(proto, mediapipe_framework_stream_handler_pb);\n\tgoog.exportSymbol('proto.mediapipe.CalculatorGraphConfig', null, global);\n\tgoog.exportSymbol('proto.mediapipe.CalculatorGraphConfig.Node', null, global);\n\tgoog.exportSymbol('proto.mediapipe.ExecutorConfig', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InputCollection', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InputCollection.InputType', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InputCollectionSet', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InputStreamInfo', null, global);\n\tgoog.exportSymbol('proto.mediapipe.ProfilerConfig', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.ExecutorConfig = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.ExecutorConfig, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.ExecutorConfig.displayName = 'proto.mediapipe.ExecutorConfig';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InputCollection = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 500, proto.mediapipe.InputCollection.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.InputCollection, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InputCollection.displayName = 'proto.mediapipe.InputCollection';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InputCollectionSet = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.InputCollectionSet.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.InputCollectionSet, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InputCollectionSet.displayName = 'proto.mediapipe.InputCollectionSet';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InputStreamInfo = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.InputStreamInfo, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InputStreamInfo.displayName = 'proto.mediapipe.InputStreamInfo';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.ProfilerConfig = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.ProfilerConfig.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.ProfilerConfig, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.ProfilerConfig.displayName = 'proto.mediapipe.ProfilerConfig';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.CalculatorGraphConfig = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 500, proto.mediapipe.CalculatorGraphConfig.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.CalculatorGraphConfig, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.CalculatorGraphConfig.displayName = 'proto.mediapipe.CalculatorGraphConfig';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 500, proto.mediapipe.CalculatorGraphConfig.Node.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.CalculatorGraphConfig.Node, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.CalculatorGraphConfig.Node.displayName = 'proto.mediapipe.CalculatorGraphConfig.Node';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.ExecutorConfig.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.ExecutorConfig.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.ExecutorConfig} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.ExecutorConfig.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n\t    type: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n\t    options: (f = msg.getOptions()) && mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.ExecutorConfig}\n\t */\n\tproto.mediapipe.ExecutorConfig.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.ExecutorConfig;\n\t  return proto.mediapipe.ExecutorConfig.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.ExecutorConfig} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.ExecutorConfig}\n\t */\n\tproto.mediapipe.ExecutorConfig.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setName(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setType(value);\n\t      break;\n\t    case 3:\n\t      var value = new mediapipe_framework_mediapipe_options_pb.MediaPipeOptions;\n\t      reader.readMessage(value,mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.deserializeBinaryFromReader);\n\t      msg.setOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.ExecutorConfig.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.ExecutorConfig.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.ExecutorConfig} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.ExecutorConfig.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getName();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getType();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string name = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.ExecutorConfig.prototype.getName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.ExecutorConfig} returns this\n\t */\n\tproto.mediapipe.ExecutorConfig.prototype.setName = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 1, value);\n\t};\n\n\n\t/**\n\t * optional string type = 2;\n\t * @return {string}\n\t */\n\tproto.mediapipe.ExecutorConfig.prototype.getType = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.ExecutorConfig} returns this\n\t */\n\tproto.mediapipe.ExecutorConfig.prototype.setType = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 2, value);\n\t};\n\n\n\t/**\n\t * optional MediaPipeOptions options = 3;\n\t * @return {?proto.mediapipe.MediaPipeOptions}\n\t */\n\tproto.mediapipe.ExecutorConfig.prototype.getOptions = function() {\n\t  return /** @type{?proto.mediapipe.MediaPipeOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_mediapipe_options_pb.MediaPipeOptions, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.MediaPipeOptions|undefined} value\n\t * @return {!proto.mediapipe.ExecutorConfig} returns this\n\t*/\n\tproto.mediapipe.ExecutorConfig.prototype.setOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.ExecutorConfig} returns this\n\t */\n\tproto.mediapipe.ExecutorConfig.prototype.clearOptions = function() {\n\t  return this.setOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.ExecutorConfig.prototype.hasOptions = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.InputCollection.repeatedFields_ = [2,1002];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InputCollection.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InputCollection.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InputCollection} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InputCollection.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n\t    sidePacketNameList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n\t    externalInputNameList: (f = jspb.Message.getRepeatedField(msg, 1002)) == null ? undefined : f,\n\t    inputType: jspb.Message.getFieldWithDefault(msg, 3, 0),\n\t    fileName: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InputCollection}\n\t */\n\tproto.mediapipe.InputCollection.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InputCollection;\n\t  return proto.mediapipe.InputCollection.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InputCollection} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InputCollection}\n\t */\n\tproto.mediapipe.InputCollection.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setName(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addSidePacketName(value);\n\t      break;\n\t    case 1002:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addExternalInputName(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {!proto.mediapipe.InputCollection.InputType} */ (reader.readEnum());\n\t      msg.setInputType(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setFileName(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InputCollection.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InputCollection.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InputCollection} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InputCollection.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getName();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getSidePacketNameList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getExternalInputNameList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      1002,\n\t      f\n\t    );\n\t  }\n\t  f = message.getInputType();\n\t  if (f !== 0.0) {\n\t    writer.writeEnum(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = message.getFileName();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * @enum {number}\n\t */\n\tproto.mediapipe.InputCollection.InputType = {\n\t  UNKNOWN: 0,\n\t  RECORDIO: 1,\n\t  FOREIGN_RECORDIO: 2,\n\t  FOREIGN_CSV_TEXT: 3,\n\t  INVALID_UPPER_BOUND: 4\n\t};\n\n\t/**\n\t * optional string name = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InputCollection.prototype.getName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InputCollection} returns this\n\t */\n\tproto.mediapipe.InputCollection.prototype.setName = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 1, value);\n\t};\n\n\n\t/**\n\t * repeated string side_packet_name = 2;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.InputCollection.prototype.getSidePacketNameList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.InputCollection} returns this\n\t */\n\tproto.mediapipe.InputCollection.prototype.setSidePacketNameList = function(value) {\n\t  return jspb.Message.setField(this, 2, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.InputCollection} returns this\n\t */\n\tproto.mediapipe.InputCollection.prototype.addSidePacketName = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.InputCollection} returns this\n\t */\n\tproto.mediapipe.InputCollection.prototype.clearSidePacketNameList = function() {\n\t  return this.setSidePacketNameList([]);\n\t};\n\n\n\t/**\n\t * repeated string external_input_name = 1002;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.InputCollection.prototype.getExternalInputNameList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1002));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.InputCollection} returns this\n\t */\n\tproto.mediapipe.InputCollection.prototype.setExternalInputNameList = function(value) {\n\t  return jspb.Message.setField(this, 1002, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.InputCollection} returns this\n\t */\n\tproto.mediapipe.InputCollection.prototype.addExternalInputName = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 1002, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.InputCollection} returns this\n\t */\n\tproto.mediapipe.InputCollection.prototype.clearExternalInputNameList = function() {\n\t  return this.setExternalInputNameList([]);\n\t};\n\n\n\t/**\n\t * optional InputType input_type = 3;\n\t * @return {!proto.mediapipe.InputCollection.InputType}\n\t */\n\tproto.mediapipe.InputCollection.prototype.getInputType = function() {\n\t  return /** @type {!proto.mediapipe.InputCollection.InputType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.InputCollection.InputType} value\n\t * @return {!proto.mediapipe.InputCollection} returns this\n\t */\n\tproto.mediapipe.InputCollection.prototype.setInputType = function(value) {\n\t  return jspb.Message.setProto3EnumField(this, 3, value);\n\t};\n\n\n\t/**\n\t * optional string file_name = 4;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InputCollection.prototype.getFileName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InputCollection} returns this\n\t */\n\tproto.mediapipe.InputCollection.prototype.setFileName = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 4, value);\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.InputCollectionSet.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InputCollectionSet.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InputCollectionSet.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InputCollectionSet} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InputCollectionSet.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    inputCollectionList: jspb.Message.toObjectList(msg.getInputCollectionList(),\n\t    proto.mediapipe.InputCollection.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InputCollectionSet}\n\t */\n\tproto.mediapipe.InputCollectionSet.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InputCollectionSet;\n\t  return proto.mediapipe.InputCollectionSet.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InputCollectionSet} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InputCollectionSet}\n\t */\n\tproto.mediapipe.InputCollectionSet.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.InputCollection;\n\t      reader.readMessage(value,proto.mediapipe.InputCollection.deserializeBinaryFromReader);\n\t      msg.addInputCollection(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InputCollectionSet.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InputCollectionSet.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InputCollectionSet} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InputCollectionSet.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getInputCollectionList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.InputCollection.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated InputCollection input_collection = 1;\n\t * @return {!Array<!proto.mediapipe.InputCollection>}\n\t */\n\tproto.mediapipe.InputCollectionSet.prototype.getInputCollectionList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.InputCollection>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.InputCollection, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.InputCollection>} value\n\t * @return {!proto.mediapipe.InputCollectionSet} returns this\n\t*/\n\tproto.mediapipe.InputCollectionSet.prototype.setInputCollectionList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.InputCollection=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.InputCollection}\n\t */\n\tproto.mediapipe.InputCollectionSet.prototype.addInputCollection = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.InputCollection, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.InputCollectionSet} returns this\n\t */\n\tproto.mediapipe.InputCollectionSet.prototype.clearInputCollectionList = function() {\n\t  return this.setInputCollectionList([]);\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InputStreamInfo.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InputStreamInfo.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InputStreamInfo} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InputStreamInfo.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    tagIndex: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n\t    backEdge: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InputStreamInfo}\n\t */\n\tproto.mediapipe.InputStreamInfo.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InputStreamInfo;\n\t  return proto.mediapipe.InputStreamInfo.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InputStreamInfo} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InputStreamInfo}\n\t */\n\tproto.mediapipe.InputStreamInfo.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setTagIndex(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setBackEdge(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InputStreamInfo.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InputStreamInfo.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InputStreamInfo} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InputStreamInfo.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getTagIndex();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getBackEdge();\n\t  if (f) {\n\t    writer.writeBool(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string tag_index = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InputStreamInfo.prototype.getTagIndex = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InputStreamInfo} returns this\n\t */\n\tproto.mediapipe.InputStreamInfo.prototype.setTagIndex = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 1, value);\n\t};\n\n\n\t/**\n\t * optional bool back_edge = 2;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InputStreamInfo.prototype.getBackEdge = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.InputStreamInfo} returns this\n\t */\n\tproto.mediapipe.InputStreamInfo.prototype.setBackEdge = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 2, value);\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.ProfilerConfig.repeatedFields_ = [8];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.ProfilerConfig.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.ProfilerConfig} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.ProfilerConfig.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    histogramIntervalSizeUsec: jspb.Message.getFieldWithDefault(msg, 1, 0),\n\t    numHistogramIntervals: jspb.Message.getFieldWithDefault(msg, 2, 0),\n\t    enableInputOutputLatency: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),\n\t    enableProfiler: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),\n\t    enableStreamLatency: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),\n\t    usePacketTimestampForAddedPacket: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),\n\t    traceLogCapacity: jspb.Message.getFieldWithDefault(msg, 7, 0),\n\t    traceEventTypesDisabledList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,\n\t    traceLogPath: jspb.Message.getFieldWithDefault(msg, 9, \"\"),\n\t    traceLogCount: jspb.Message.getFieldWithDefault(msg, 10, 0),\n\t    traceLogIntervalUsec: jspb.Message.getFieldWithDefault(msg, 11, 0),\n\t    traceLogMarginUsec: jspb.Message.getFieldWithDefault(msg, 12, 0),\n\t    traceLogDurationEvents: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),\n\t    traceLogIntervalCount: jspb.Message.getFieldWithDefault(msg, 14, 0),\n\t    traceLogDisabled: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),\n\t    traceEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),\n\t    traceLogInstantEvents: jspb.Message.getBooleanFieldWithDefault(msg, 17, false),\n\t    calculatorFilter: jspb.Message.getFieldWithDefault(msg, 18, \"\")\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.ProfilerConfig}\n\t */\n\tproto.mediapipe.ProfilerConfig.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.ProfilerConfig;\n\t  return proto.mediapipe.ProfilerConfig.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.ProfilerConfig} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.ProfilerConfig}\n\t */\n\tproto.mediapipe.ProfilerConfig.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setHistogramIntervalSizeUsec(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setNumHistogramIntervals(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setEnableInputOutputLatency(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setEnableProfiler(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setEnableStreamLatency(value);\n\t      break;\n\t    case 6:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setUsePacketTimestampForAddedPacket(value);\n\t      break;\n\t    case 7:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setTraceLogCapacity(value);\n\t      break;\n\t    case 8:\n\t      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);\n\t      for (var i = 0; i < values.length; i++) {\n\t        msg.addTraceEventTypesDisabled(values[i]);\n\t      }\n\t      break;\n\t    case 9:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setTraceLogPath(value);\n\t      break;\n\t    case 10:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setTraceLogCount(value);\n\t      break;\n\t    case 11:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setTraceLogIntervalUsec(value);\n\t      break;\n\t    case 12:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setTraceLogMarginUsec(value);\n\t      break;\n\t    case 13:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setTraceLogDurationEvents(value);\n\t      break;\n\t    case 14:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setTraceLogIntervalCount(value);\n\t      break;\n\t    case 15:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setTraceLogDisabled(value);\n\t      break;\n\t    case 16:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setTraceEnabled(value);\n\t      break;\n\t    case 17:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setTraceLogInstantEvents(value);\n\t      break;\n\t    case 18:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setCalculatorFilter(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.ProfilerConfig.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.ProfilerConfig} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.ProfilerConfig.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getHistogramIntervalSizeUsec();\n\t  if (f !== 0) {\n\t    writer.writeInt64(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getNumHistogramIntervals();\n\t  if (f !== 0) {\n\t    writer.writeInt64(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getEnableInputOutputLatency();\n\t  if (f) {\n\t    writer.writeBool(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = message.getEnableProfiler();\n\t  if (f) {\n\t    writer.writeBool(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = message.getEnableStreamLatency();\n\t  if (f) {\n\t    writer.writeBool(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t  f = message.getUsePacketTimestampForAddedPacket();\n\t  if (f) {\n\t    writer.writeBool(\n\t      6,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceLogCapacity();\n\t  if (f !== 0) {\n\t    writer.writeInt64(\n\t      7,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceEventTypesDisabledList();\n\t  if (f.length > 0) {\n\t    writer.writePackedInt32(\n\t      8,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceLogPath();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      9,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceLogCount();\n\t  if (f !== 0) {\n\t    writer.writeInt32(\n\t      10,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceLogIntervalUsec();\n\t  if (f !== 0) {\n\t    writer.writeInt64(\n\t      11,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceLogMarginUsec();\n\t  if (f !== 0) {\n\t    writer.writeInt64(\n\t      12,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceLogDurationEvents();\n\t  if (f) {\n\t    writer.writeBool(\n\t      13,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceLogIntervalCount();\n\t  if (f !== 0) {\n\t    writer.writeInt32(\n\t      14,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceLogDisabled();\n\t  if (f) {\n\t    writer.writeBool(\n\t      15,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceEnabled();\n\t  if (f) {\n\t    writer.writeBool(\n\t      16,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceLogInstantEvents();\n\t  if (f) {\n\t    writer.writeBool(\n\t      17,\n\t      f\n\t    );\n\t  }\n\t  f = message.getCalculatorFilter();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      18,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional int64 histogram_interval_size_usec = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getHistogramIntervalSizeUsec = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setHistogramIntervalSizeUsec = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 1, value);\n\t};\n\n\n\t/**\n\t * optional int64 num_histogram_intervals = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getNumHistogramIntervals = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setNumHistogramIntervals = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 2, value);\n\t};\n\n\n\t/**\n\t * optional bool enable_input_output_latency = 3;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getEnableInputOutputLatency = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setEnableInputOutputLatency = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 3, value);\n\t};\n\n\n\t/**\n\t * optional bool enable_profiler = 4;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getEnableProfiler = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setEnableProfiler = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 4, value);\n\t};\n\n\n\t/**\n\t * optional bool enable_stream_latency = 5;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getEnableStreamLatency = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setEnableStreamLatency = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 5, value);\n\t};\n\n\n\t/**\n\t * optional bool use_packet_timestamp_for_added_packet = 6;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getUsePacketTimestampForAddedPacket = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setUsePacketTimestampForAddedPacket = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 6, value);\n\t};\n\n\n\t/**\n\t * optional int64 trace_log_capacity = 7;\n\t * @return {number}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceLogCapacity = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceLogCapacity = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 7, value);\n\t};\n\n\n\t/**\n\t * repeated int32 trace_event_types_disabled = 8;\n\t * @return {!Array<number>}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceEventTypesDisabledList = function() {\n\t  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 8));\n\t};\n\n\n\t/**\n\t * @param {!Array<number>} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceEventTypesDisabledList = function(value) {\n\t  return jspb.Message.setField(this, 8, value || []);\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.addTraceEventTypesDisabled = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.clearTraceEventTypesDisabledList = function() {\n\t  return this.setTraceEventTypesDisabledList([]);\n\t};\n\n\n\t/**\n\t * optional string trace_log_path = 9;\n\t * @return {string}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceLogPath = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceLogPath = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 9, value);\n\t};\n\n\n\t/**\n\t * optional int32 trace_log_count = 10;\n\t * @return {number}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceLogCount = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceLogCount = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 10, value);\n\t};\n\n\n\t/**\n\t * optional int64 trace_log_interval_usec = 11;\n\t * @return {number}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceLogIntervalUsec = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceLogIntervalUsec = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 11, value);\n\t};\n\n\n\t/**\n\t * optional int64 trace_log_margin_usec = 12;\n\t * @return {number}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceLogMarginUsec = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceLogMarginUsec = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 12, value);\n\t};\n\n\n\t/**\n\t * optional bool trace_log_duration_events = 13;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceLogDurationEvents = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceLogDurationEvents = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 13, value);\n\t};\n\n\n\t/**\n\t * optional int32 trace_log_interval_count = 14;\n\t * @return {number}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceLogIntervalCount = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceLogIntervalCount = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 14, value);\n\t};\n\n\n\t/**\n\t * optional bool trace_log_disabled = 15;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceLogDisabled = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceLogDisabled = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 15, value);\n\t};\n\n\n\t/**\n\t * optional bool trace_enabled = 16;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceEnabled = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceEnabled = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 16, value);\n\t};\n\n\n\t/**\n\t * optional bool trace_log_instant_events = 17;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceLogInstantEvents = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceLogInstantEvents = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 17, value);\n\t};\n\n\n\t/**\n\t * optional string calculator_filter = 18;\n\t * @return {string}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getCalculatorFilter = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setCalculatorFilter = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 18, value);\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.repeatedFields_ = [1,6,7,9,10,15,16,17,14,1002];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.CalculatorGraphConfig.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.CalculatorGraphConfig} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    nodeList: jspb.Message.toObjectList(msg.getNodeList(),\n\t    proto.mediapipe.CalculatorGraphConfig.Node.toObject, includeInstance),\n\t    packetFactoryList: jspb.Message.toObjectList(msg.getPacketFactoryList(),\n\t    mediapipe_framework_packet_factory_pb.PacketFactoryConfig.toObject, includeInstance),\n\t    packetGeneratorList: jspb.Message.toObjectList(msg.getPacketGeneratorList(),\n\t    mediapipe_framework_packet_generator_pb.PacketGeneratorConfig.toObject, includeInstance),\n\t    numThreads: jspb.Message.getFieldWithDefault(msg, 8, 0),\n\t    statusHandlerList: jspb.Message.toObjectList(msg.getStatusHandlerList(),\n\t    mediapipe_framework_status_handler_pb.StatusHandlerConfig.toObject, includeInstance),\n\t    inputStreamList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,\n\t    outputStreamList: (f = jspb.Message.getRepeatedField(msg, 15)) == null ? undefined : f,\n\t    inputSidePacketList: (f = jspb.Message.getRepeatedField(msg, 16)) == null ? undefined : f,\n\t    outputSidePacketList: (f = jspb.Message.getRepeatedField(msg, 17)) == null ? undefined : f,\n\t    maxQueueSize: jspb.Message.getFieldWithDefault(msg, 11, 0),\n\t    reportDeadlock: jspb.Message.getBooleanFieldWithDefault(msg, 21, false),\n\t    inputStreamHandler: (f = msg.getInputStreamHandler()) && mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig.toObject(includeInstance, f),\n\t    outputStreamHandler: (f = msg.getOutputStreamHandler()) && mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig.toObject(includeInstance, f),\n\t    executorList: jspb.Message.toObjectList(msg.getExecutorList(),\n\t    proto.mediapipe.ExecutorConfig.toObject, includeInstance),\n\t    profilerConfig: (f = msg.getProfilerConfig()) && proto.mediapipe.ProfilerConfig.toObject(includeInstance, f),\n\t    pb_package: jspb.Message.getFieldWithDefault(msg, 19, \"\"),\n\t    type: jspb.Message.getFieldWithDefault(msg, 20, \"\"),\n\t    options: (f = msg.getOptions()) && mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.toObject(includeInstance, f),\n\t    graphOptionsList: jspb.Message.toObjectList(msg.getGraphOptionsList(),\n\t    google_protobuf_any_pb.Any.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.CalculatorGraphConfig;\n\t  return proto.mediapipe.CalculatorGraphConfig.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.CalculatorGraphConfig} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.CalculatorGraphConfig.Node;\n\t      reader.readMessage(value,proto.mediapipe.CalculatorGraphConfig.Node.deserializeBinaryFromReader);\n\t      msg.addNode(value);\n\t      break;\n\t    case 6:\n\t      var value = new mediapipe_framework_packet_factory_pb.PacketFactoryConfig;\n\t      reader.readMessage(value,mediapipe_framework_packet_factory_pb.PacketFactoryConfig.deserializeBinaryFromReader);\n\t      msg.addPacketFactory(value);\n\t      break;\n\t    case 7:\n\t      var value = new mediapipe_framework_packet_generator_pb.PacketGeneratorConfig;\n\t      reader.readMessage(value,mediapipe_framework_packet_generator_pb.PacketGeneratorConfig.deserializeBinaryFromReader);\n\t      msg.addPacketGenerator(value);\n\t      break;\n\t    case 8:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setNumThreads(value);\n\t      break;\n\t    case 9:\n\t      var value = new mediapipe_framework_status_handler_pb.StatusHandlerConfig;\n\t      reader.readMessage(value,mediapipe_framework_status_handler_pb.StatusHandlerConfig.deserializeBinaryFromReader);\n\t      msg.addStatusHandler(value);\n\t      break;\n\t    case 10:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addInputStream(value);\n\t      break;\n\t    case 15:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addOutputStream(value);\n\t      break;\n\t    case 16:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addInputSidePacket(value);\n\t      break;\n\t    case 17:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addOutputSidePacket(value);\n\t      break;\n\t    case 11:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setMaxQueueSize(value);\n\t      break;\n\t    case 21:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setReportDeadlock(value);\n\t      break;\n\t    case 12:\n\t      var value = new mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig;\n\t      reader.readMessage(value,mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig.deserializeBinaryFromReader);\n\t      msg.setInputStreamHandler(value);\n\t      break;\n\t    case 13:\n\t      var value = new mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig;\n\t      reader.readMessage(value,mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig.deserializeBinaryFromReader);\n\t      msg.setOutputStreamHandler(value);\n\t      break;\n\t    case 14:\n\t      var value = new proto.mediapipe.ExecutorConfig;\n\t      reader.readMessage(value,proto.mediapipe.ExecutorConfig.deserializeBinaryFromReader);\n\t      msg.addExecutor(value);\n\t      break;\n\t    case 18:\n\t      var value = new proto.mediapipe.ProfilerConfig;\n\t      reader.readMessage(value,proto.mediapipe.ProfilerConfig.deserializeBinaryFromReader);\n\t      msg.setProfilerConfig(value);\n\t      break;\n\t    case 19:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setPackage(value);\n\t      break;\n\t    case 20:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setType(value);\n\t      break;\n\t    case 1001:\n\t      var value = new mediapipe_framework_mediapipe_options_pb.MediaPipeOptions;\n\t      reader.readMessage(value,mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.deserializeBinaryFromReader);\n\t      msg.setOptions(value);\n\t      break;\n\t    case 1002:\n\t      var value = new google_protobuf_any_pb.Any;\n\t      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);\n\t      msg.addGraphOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.CalculatorGraphConfig.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.CalculatorGraphConfig} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getNodeList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.CalculatorGraphConfig.Node.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getPacketFactoryList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      6,\n\t      f,\n\t      mediapipe_framework_packet_factory_pb.PacketFactoryConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getPacketGeneratorList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      7,\n\t      f,\n\t      mediapipe_framework_packet_generator_pb.PacketGeneratorConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getNumThreads();\n\t  if (f !== 0) {\n\t    writer.writeInt32(\n\t      8,\n\t      f\n\t    );\n\t  }\n\t  f = message.getStatusHandlerList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      9,\n\t      f,\n\t      mediapipe_framework_status_handler_pb.StatusHandlerConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getInputStreamList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      10,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOutputStreamList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      15,\n\t      f\n\t    );\n\t  }\n\t  f = message.getInputSidePacketList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      16,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOutputSidePacketList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      17,\n\t      f\n\t    );\n\t  }\n\t  f = message.getMaxQueueSize();\n\t  if (f !== 0) {\n\t    writer.writeInt32(\n\t      11,\n\t      f\n\t    );\n\t  }\n\t  f = message.getReportDeadlock();\n\t  if (f) {\n\t    writer.writeBool(\n\t      21,\n\t      f\n\t    );\n\t  }\n\t  f = message.getInputStreamHandler();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      12,\n\t      f,\n\t      mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getOutputStreamHandler();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      13,\n\t      f,\n\t      mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getExecutorList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      14,\n\t      f,\n\t      proto.mediapipe.ExecutorConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getProfilerConfig();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      18,\n\t      f,\n\t      proto.mediapipe.ProfilerConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getPackage();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      19,\n\t      f\n\t    );\n\t  }\n\t  f = message.getType();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      20,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1001,\n\t      f,\n\t      mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getGraphOptionsList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1002,\n\t      f,\n\t      google_protobuf_any_pb.Any.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.repeatedFields_ = [3,4,5,6,8,13,17,1005];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.CalculatorGraphConfig.Node.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.CalculatorGraphConfig.Node} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n\t    calculator: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n\t    inputStreamList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,\n\t    outputStreamList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,\n\t    inputSidePacketList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,\n\t    outputSidePacketList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,\n\t    options: (f = msg.getOptions()) && mediapipe_framework_calculator_options_pb.CalculatorOptions.toObject(includeInstance, f),\n\t    nodeOptionsList: jspb.Message.toObjectList(msg.getNodeOptionsList(),\n\t    google_protobuf_any_pb.Any.toObject, includeInstance),\n\t    sourceLayer: jspb.Message.getFieldWithDefault(msg, 9, 0),\n\t    bufferSizeHint: jspb.Message.getFieldWithDefault(msg, 10, 0),\n\t    inputStreamHandler: (f = msg.getInputStreamHandler()) && mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig.toObject(includeInstance, f),\n\t    outputStreamHandler: (f = msg.getOutputStreamHandler()) && mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig.toObject(includeInstance, f),\n\t    inputStreamInfoList: jspb.Message.toObjectList(msg.getInputStreamInfoList(),\n\t    proto.mediapipe.InputStreamInfo.toObject, includeInstance),\n\t    executor: jspb.Message.getFieldWithDefault(msg, 14, \"\"),\n\t    profilerConfig: (f = msg.getProfilerConfig()) && proto.mediapipe.ProfilerConfig.toObject(includeInstance, f),\n\t    maxInFlight: jspb.Message.getFieldWithDefault(msg, 16, 0),\n\t    optionValueList: (f = jspb.Message.getRepeatedField(msg, 17)) == null ? undefined : f,\n\t    externalInputList: (f = jspb.Message.getRepeatedField(msg, 1005)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.CalculatorGraphConfig.Node;\n\t  return proto.mediapipe.CalculatorGraphConfig.Node.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.CalculatorGraphConfig.Node} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setName(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setCalculator(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addInputStream(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addOutputStream(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addInputSidePacket(value);\n\t      break;\n\t    case 6:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addOutputSidePacket(value);\n\t      break;\n\t    case 7:\n\t      var value = new mediapipe_framework_calculator_options_pb.CalculatorOptions;\n\t      reader.readMessage(value,mediapipe_framework_calculator_options_pb.CalculatorOptions.deserializeBinaryFromReader);\n\t      msg.setOptions(value);\n\t      break;\n\t    case 8:\n\t      var value = new google_protobuf_any_pb.Any;\n\t      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);\n\t      msg.addNodeOptions(value);\n\t      break;\n\t    case 9:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setSourceLayer(value);\n\t      break;\n\t    case 10:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setBufferSizeHint(value);\n\t      break;\n\t    case 11:\n\t      var value = new mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig;\n\t      reader.readMessage(value,mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig.deserializeBinaryFromReader);\n\t      msg.setInputStreamHandler(value);\n\t      break;\n\t    case 12:\n\t      var value = new mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig;\n\t      reader.readMessage(value,mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig.deserializeBinaryFromReader);\n\t      msg.setOutputStreamHandler(value);\n\t      break;\n\t    case 13:\n\t      var value = new proto.mediapipe.InputStreamInfo;\n\t      reader.readMessage(value,proto.mediapipe.InputStreamInfo.deserializeBinaryFromReader);\n\t      msg.addInputStreamInfo(value);\n\t      break;\n\t    case 14:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setExecutor(value);\n\t      break;\n\t    case 15:\n\t      var value = new proto.mediapipe.ProfilerConfig;\n\t      reader.readMessage(value,proto.mediapipe.ProfilerConfig.deserializeBinaryFromReader);\n\t      msg.setProfilerConfig(value);\n\t      break;\n\t    case 16:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setMaxInFlight(value);\n\t      break;\n\t    case 17:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addOptionValue(value);\n\t      break;\n\t    case 1005:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addExternalInput(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.CalculatorGraphConfig.Node.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.CalculatorGraphConfig.Node} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getName();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getCalculator();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getInputStreamList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOutputStreamList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = message.getInputSidePacketList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOutputSidePacketList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      6,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      7,\n\t      f,\n\t      mediapipe_framework_calculator_options_pb.CalculatorOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getNodeOptionsList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      8,\n\t      f,\n\t      google_protobuf_any_pb.Any.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getSourceLayer();\n\t  if (f !== 0) {\n\t    writer.writeInt32(\n\t      9,\n\t      f\n\t    );\n\t  }\n\t  f = message.getBufferSizeHint();\n\t  if (f !== 0) {\n\t    writer.writeInt32(\n\t      10,\n\t      f\n\t    );\n\t  }\n\t  f = message.getInputStreamHandler();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      11,\n\t      f,\n\t      mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getOutputStreamHandler();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      12,\n\t      f,\n\t      mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getInputStreamInfoList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      13,\n\t      f,\n\t      proto.mediapipe.InputStreamInfo.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getExecutor();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      14,\n\t      f\n\t    );\n\t  }\n\t  f = message.getProfilerConfig();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      15,\n\t      f,\n\t      proto.mediapipe.ProfilerConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getMaxInFlight();\n\t  if (f !== 0) {\n\t    writer.writeInt32(\n\t      16,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOptionValueList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      17,\n\t      f\n\t    );\n\t  }\n\t  f = message.getExternalInputList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      1005,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string name = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setName = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 1, value);\n\t};\n\n\n\t/**\n\t * optional string calculator = 2;\n\t * @return {string}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getCalculator = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setCalculator = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 2, value);\n\t};\n\n\n\t/**\n\t * repeated string input_stream = 3;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getInputStreamList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setInputStreamList = function(value) {\n\t  return jspb.Message.setField(this, 3, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.addInputStream = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearInputStreamList = function() {\n\t  return this.setInputStreamList([]);\n\t};\n\n\n\t/**\n\t * repeated string output_stream = 4;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getOutputStreamList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setOutputStreamList = function(value) {\n\t  return jspb.Message.setField(this, 4, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.addOutputStream = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearOutputStreamList = function() {\n\t  return this.setOutputStreamList([]);\n\t};\n\n\n\t/**\n\t * repeated string input_side_packet = 5;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getInputSidePacketList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setInputSidePacketList = function(value) {\n\t  return jspb.Message.setField(this, 5, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.addInputSidePacket = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearInputSidePacketList = function() {\n\t  return this.setInputSidePacketList([]);\n\t};\n\n\n\t/**\n\t * repeated string output_side_packet = 6;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getOutputSidePacketList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setOutputSidePacketList = function(value) {\n\t  return jspb.Message.setField(this, 6, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.addOutputSidePacket = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearOutputSidePacketList = function() {\n\t  return this.setOutputSidePacketList([]);\n\t};\n\n\n\t/**\n\t * optional CalculatorOptions options = 7;\n\t * @return {?proto.mediapipe.CalculatorOptions}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getOptions = function() {\n\t  return /** @type{?proto.mediapipe.CalculatorOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_calculator_options_pb.CalculatorOptions, 7));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.CalculatorOptions|undefined} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 7, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearOptions = function() {\n\t  return this.setOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.hasOptions = function() {\n\t  return jspb.Message.getField(this, 7) != null;\n\t};\n\n\n\t/**\n\t * repeated google.protobuf.Any node_options = 8;\n\t * @return {!Array<!proto.google.protobuf.Any>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getNodeOptionsList = function() {\n\t  return /** @type{!Array<!proto.google.protobuf.Any>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, google_protobuf_any_pb.Any, 8));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.google.protobuf.Any>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setNodeOptionsList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 8, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.google.protobuf.Any=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.google.protobuf.Any}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.addNodeOptions = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.google.protobuf.Any, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearNodeOptionsList = function() {\n\t  return this.setNodeOptionsList([]);\n\t};\n\n\n\t/**\n\t * optional int32 source_layer = 9;\n\t * @return {number}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getSourceLayer = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setSourceLayer = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 9, value);\n\t};\n\n\n\t/**\n\t * optional int32 buffer_size_hint = 10;\n\t * @return {number}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getBufferSizeHint = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setBufferSizeHint = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 10, value);\n\t};\n\n\n\t/**\n\t * optional InputStreamHandlerConfig input_stream_handler = 11;\n\t * @return {?proto.mediapipe.InputStreamHandlerConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getInputStreamHandler = function() {\n\t  return /** @type{?proto.mediapipe.InputStreamHandlerConfig} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig, 11));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InputStreamHandlerConfig|undefined} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setInputStreamHandler = function(value) {\n\t  return jspb.Message.setWrapperField(this, 11, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearInputStreamHandler = function() {\n\t  return this.setInputStreamHandler(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.hasInputStreamHandler = function() {\n\t  return jspb.Message.getField(this, 11) != null;\n\t};\n\n\n\t/**\n\t * optional OutputStreamHandlerConfig output_stream_handler = 12;\n\t * @return {?proto.mediapipe.OutputStreamHandlerConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getOutputStreamHandler = function() {\n\t  return /** @type{?proto.mediapipe.OutputStreamHandlerConfig} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig, 12));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.OutputStreamHandlerConfig|undefined} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setOutputStreamHandler = function(value) {\n\t  return jspb.Message.setWrapperField(this, 12, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearOutputStreamHandler = function() {\n\t  return this.setOutputStreamHandler(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.hasOutputStreamHandler = function() {\n\t  return jspb.Message.getField(this, 12) != null;\n\t};\n\n\n\t/**\n\t * repeated InputStreamInfo input_stream_info = 13;\n\t * @return {!Array<!proto.mediapipe.InputStreamInfo>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getInputStreamInfoList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.InputStreamInfo>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.InputStreamInfo, 13));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.InputStreamInfo>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setInputStreamInfoList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 13, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.InputStreamInfo=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.InputStreamInfo}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.addInputStreamInfo = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.mediapipe.InputStreamInfo, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearInputStreamInfoList = function() {\n\t  return this.setInputStreamInfoList([]);\n\t};\n\n\n\t/**\n\t * optional string executor = 14;\n\t * @return {string}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getExecutor = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setExecutor = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 14, value);\n\t};\n\n\n\t/**\n\t * optional ProfilerConfig profiler_config = 15;\n\t * @return {?proto.mediapipe.ProfilerConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getProfilerConfig = function() {\n\t  return /** @type{?proto.mediapipe.ProfilerConfig} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.ProfilerConfig, 15));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.ProfilerConfig|undefined} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setProfilerConfig = function(value) {\n\t  return jspb.Message.setWrapperField(this, 15, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearProfilerConfig = function() {\n\t  return this.setProfilerConfig(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.hasProfilerConfig = function() {\n\t  return jspb.Message.getField(this, 15) != null;\n\t};\n\n\n\t/**\n\t * optional int32 max_in_flight = 16;\n\t * @return {number}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getMaxInFlight = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setMaxInFlight = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 16, value);\n\t};\n\n\n\t/**\n\t * repeated string option_value = 17;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getOptionValueList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 17));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setOptionValueList = function(value) {\n\t  return jspb.Message.setField(this, 17, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.addOptionValue = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 17, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearOptionValueList = function() {\n\t  return this.setOptionValueList([]);\n\t};\n\n\n\t/**\n\t * repeated string external_input = 1005;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getExternalInputList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1005));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setExternalInputList = function(value) {\n\t  return jspb.Message.setField(this, 1005, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.addExternalInput = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 1005, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearExternalInputList = function() {\n\t  return this.setExternalInputList([]);\n\t};\n\n\n\t/**\n\t * repeated Node node = 1;\n\t * @return {!Array<!proto.mediapipe.CalculatorGraphConfig.Node>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getNodeList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.CalculatorGraphConfig.Node>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.CalculatorGraphConfig.Node, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.CalculatorGraphConfig.Node>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setNodeList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.CalculatorGraphConfig.Node=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addNode = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.CalculatorGraphConfig.Node, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearNodeList = function() {\n\t  return this.setNodeList([]);\n\t};\n\n\n\t/**\n\t * repeated PacketFactoryConfig packet_factory = 6;\n\t * @return {!Array<!proto.mediapipe.PacketFactoryConfig>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getPacketFactoryList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.PacketFactoryConfig>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, mediapipe_framework_packet_factory_pb.PacketFactoryConfig, 6));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.PacketFactoryConfig>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setPacketFactoryList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 6, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.PacketFactoryConfig=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.PacketFactoryConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addPacketFactory = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.mediapipe.PacketFactoryConfig, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearPacketFactoryList = function() {\n\t  return this.setPacketFactoryList([]);\n\t};\n\n\n\t/**\n\t * repeated PacketGeneratorConfig packet_generator = 7;\n\t * @return {!Array<!proto.mediapipe.PacketGeneratorConfig>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getPacketGeneratorList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.PacketGeneratorConfig>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, mediapipe_framework_packet_generator_pb.PacketGeneratorConfig, 7));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.PacketGeneratorConfig>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setPacketGeneratorList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 7, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.PacketGeneratorConfig=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.PacketGeneratorConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addPacketGenerator = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.mediapipe.PacketGeneratorConfig, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearPacketGeneratorList = function() {\n\t  return this.setPacketGeneratorList([]);\n\t};\n\n\n\t/**\n\t * optional int32 num_threads = 8;\n\t * @return {number}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getNumThreads = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setNumThreads = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 8, value);\n\t};\n\n\n\t/**\n\t * repeated StatusHandlerConfig status_handler = 9;\n\t * @return {!Array<!proto.mediapipe.StatusHandlerConfig>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getStatusHandlerList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.StatusHandlerConfig>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, mediapipe_framework_status_handler_pb.StatusHandlerConfig, 9));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.StatusHandlerConfig>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setStatusHandlerList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 9, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.StatusHandlerConfig=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.StatusHandlerConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addStatusHandler = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.mediapipe.StatusHandlerConfig, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearStatusHandlerList = function() {\n\t  return this.setStatusHandlerList([]);\n\t};\n\n\n\t/**\n\t * repeated string input_stream = 10;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getInputStreamList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setInputStreamList = function(value) {\n\t  return jspb.Message.setField(this, 10, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addInputStream = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearInputStreamList = function() {\n\t  return this.setInputStreamList([]);\n\t};\n\n\n\t/**\n\t * repeated string output_stream = 15;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getOutputStreamList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 15));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setOutputStreamList = function(value) {\n\t  return jspb.Message.setField(this, 15, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addOutputStream = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearOutputStreamList = function() {\n\t  return this.setOutputStreamList([]);\n\t};\n\n\n\t/**\n\t * repeated string input_side_packet = 16;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getInputSidePacketList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 16));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setInputSidePacketList = function(value) {\n\t  return jspb.Message.setField(this, 16, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addInputSidePacket = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 16, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearInputSidePacketList = function() {\n\t  return this.setInputSidePacketList([]);\n\t};\n\n\n\t/**\n\t * repeated string output_side_packet = 17;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getOutputSidePacketList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 17));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setOutputSidePacketList = function(value) {\n\t  return jspb.Message.setField(this, 17, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addOutputSidePacket = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 17, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearOutputSidePacketList = function() {\n\t  return this.setOutputSidePacketList([]);\n\t};\n\n\n\t/**\n\t * optional int32 max_queue_size = 11;\n\t * @return {number}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getMaxQueueSize = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setMaxQueueSize = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 11, value);\n\t};\n\n\n\t/**\n\t * optional bool report_deadlock = 21;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getReportDeadlock = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 21, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setReportDeadlock = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 21, value);\n\t};\n\n\n\t/**\n\t * optional InputStreamHandlerConfig input_stream_handler = 12;\n\t * @return {?proto.mediapipe.InputStreamHandlerConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getInputStreamHandler = function() {\n\t  return /** @type{?proto.mediapipe.InputStreamHandlerConfig} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig, 12));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InputStreamHandlerConfig|undefined} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setInputStreamHandler = function(value) {\n\t  return jspb.Message.setWrapperField(this, 12, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearInputStreamHandler = function() {\n\t  return this.setInputStreamHandler(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.hasInputStreamHandler = function() {\n\t  return jspb.Message.getField(this, 12) != null;\n\t};\n\n\n\t/**\n\t * optional OutputStreamHandlerConfig output_stream_handler = 13;\n\t * @return {?proto.mediapipe.OutputStreamHandlerConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getOutputStreamHandler = function() {\n\t  return /** @type{?proto.mediapipe.OutputStreamHandlerConfig} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig, 13));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.OutputStreamHandlerConfig|undefined} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setOutputStreamHandler = function(value) {\n\t  return jspb.Message.setWrapperField(this, 13, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearOutputStreamHandler = function() {\n\t  return this.setOutputStreamHandler(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.hasOutputStreamHandler = function() {\n\t  return jspb.Message.getField(this, 13) != null;\n\t};\n\n\n\t/**\n\t * repeated ExecutorConfig executor = 14;\n\t * @return {!Array<!proto.mediapipe.ExecutorConfig>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getExecutorList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.ExecutorConfig>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.ExecutorConfig, 14));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.ExecutorConfig>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setExecutorList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 14, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.ExecutorConfig=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.ExecutorConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addExecutor = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.mediapipe.ExecutorConfig, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearExecutorList = function() {\n\t  return this.setExecutorList([]);\n\t};\n\n\n\t/**\n\t * optional ProfilerConfig profiler_config = 18;\n\t * @return {?proto.mediapipe.ProfilerConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getProfilerConfig = function() {\n\t  return /** @type{?proto.mediapipe.ProfilerConfig} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.ProfilerConfig, 18));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.ProfilerConfig|undefined} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setProfilerConfig = function(value) {\n\t  return jspb.Message.setWrapperField(this, 18, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearProfilerConfig = function() {\n\t  return this.setProfilerConfig(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.hasProfilerConfig = function() {\n\t  return jspb.Message.getField(this, 18) != null;\n\t};\n\n\n\t/**\n\t * optional string package = 19;\n\t * @return {string}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getPackage = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setPackage = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 19, value);\n\t};\n\n\n\t/**\n\t * optional string type = 20;\n\t * @return {string}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getType = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setType = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 20, value);\n\t};\n\n\n\t/**\n\t * optional MediaPipeOptions options = 1001;\n\t * @return {?proto.mediapipe.MediaPipeOptions}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getOptions = function() {\n\t  return /** @type{?proto.mediapipe.MediaPipeOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_mediapipe_options_pb.MediaPipeOptions, 1001));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.MediaPipeOptions|undefined} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1001, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearOptions = function() {\n\t  return this.setOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.hasOptions = function() {\n\t  return jspb.Message.getField(this, 1001) != null;\n\t};\n\n\n\t/**\n\t * repeated google.protobuf.Any graph_options = 1002;\n\t * @return {!Array<!proto.google.protobuf.Any>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getGraphOptionsList = function() {\n\t  return /** @type{!Array<!proto.google.protobuf.Any>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, google_protobuf_any_pb.Any, 1002));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.google.protobuf.Any>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setGraphOptionsList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1002, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.google.protobuf.Any=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.google.protobuf.Any}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addGraphOptions = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1002, opt_value, proto.google.protobuf.Any, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearGraphOptionsList = function() {\n\t  return this.setGraphOptionsList([]);\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (calculator_pb));\n\nvar classifications_pb = {};\n\nvar classification_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/framework/formats/classification.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.Classification', null, global);\n\tgoog.exportSymbol('proto.mediapipe.ClassificationList', null, global);\n\tgoog.exportSymbol('proto.mediapipe.ClassificationListCollection', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.Classification = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.Classification, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.Classification.displayName = 'proto.mediapipe.Classification';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.ClassificationList = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.ClassificationList.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.ClassificationList, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.ClassificationList.displayName = 'proto.mediapipe.ClassificationList';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.ClassificationListCollection = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.ClassificationListCollection.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.ClassificationListCollection, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.ClassificationListCollection.displayName = 'proto.mediapipe.ClassificationListCollection';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.Classification.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.Classification.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.Classification} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Classification.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    index: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    score: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,\n\t    label: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,\n\t    displayName: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.Classification}\n\t */\n\tproto.mediapipe.Classification.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.Classification;\n\t  return proto.mediapipe.Classification.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.Classification} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.Classification}\n\t */\n\tproto.mediapipe.Classification.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setIndex(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setScore(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setLabel(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setDisplayName(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.Classification.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.Classification.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.Classification} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Classification.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional int32 index = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Classification.prototype.getIndex = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Classification} returns this\n\t */\n\tproto.mediapipe.Classification.prototype.setIndex = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Classification} returns this\n\t */\n\tproto.mediapipe.Classification.prototype.clearIndex = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Classification.prototype.hasIndex = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional float score = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Classification.prototype.getScore = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Classification} returns this\n\t */\n\tproto.mediapipe.Classification.prototype.setScore = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Classification} returns this\n\t */\n\tproto.mediapipe.Classification.prototype.clearScore = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Classification.prototype.hasScore = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional string label = 3;\n\t * @return {string}\n\t */\n\tproto.mediapipe.Classification.prototype.getLabel = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.Classification} returns this\n\t */\n\tproto.mediapipe.Classification.prototype.setLabel = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Classification} returns this\n\t */\n\tproto.mediapipe.Classification.prototype.clearLabel = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Classification.prototype.hasLabel = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional string display_name = 4;\n\t * @return {string}\n\t */\n\tproto.mediapipe.Classification.prototype.getDisplayName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.Classification} returns this\n\t */\n\tproto.mediapipe.Classification.prototype.setDisplayName = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Classification} returns this\n\t */\n\tproto.mediapipe.Classification.prototype.clearDisplayName = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Classification.prototype.hasDisplayName = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.ClassificationList.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.ClassificationList.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.ClassificationList.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.ClassificationList} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.ClassificationList.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    classificationList: jspb.Message.toObjectList(msg.getClassificationList(),\n\t    proto.mediapipe.Classification.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.ClassificationList}\n\t */\n\tproto.mediapipe.ClassificationList.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.ClassificationList;\n\t  return proto.mediapipe.ClassificationList.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.ClassificationList} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.ClassificationList}\n\t */\n\tproto.mediapipe.ClassificationList.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.Classification;\n\t      reader.readMessage(value,proto.mediapipe.Classification.deserializeBinaryFromReader);\n\t      msg.addClassification(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.ClassificationList.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.ClassificationList.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.ClassificationList} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.ClassificationList.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getClassificationList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.Classification.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated Classification classification = 1;\n\t * @return {!Array<!proto.mediapipe.Classification>}\n\t */\n\tproto.mediapipe.ClassificationList.prototype.getClassificationList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.Classification>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.Classification, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.Classification>} value\n\t * @return {!proto.mediapipe.ClassificationList} returns this\n\t*/\n\tproto.mediapipe.ClassificationList.prototype.setClassificationList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.Classification=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.Classification}\n\t */\n\tproto.mediapipe.ClassificationList.prototype.addClassification = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.Classification, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.ClassificationList} returns this\n\t */\n\tproto.mediapipe.ClassificationList.prototype.clearClassificationList = function() {\n\t  return this.setClassificationList([]);\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.ClassificationListCollection.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.ClassificationListCollection.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.ClassificationListCollection.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.ClassificationListCollection} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.ClassificationListCollection.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    classificationListList: jspb.Message.toObjectList(msg.getClassificationListList(),\n\t    proto.mediapipe.ClassificationList.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.ClassificationListCollection}\n\t */\n\tproto.mediapipe.ClassificationListCollection.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.ClassificationListCollection;\n\t  return proto.mediapipe.ClassificationListCollection.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.ClassificationListCollection} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.ClassificationListCollection}\n\t */\n\tproto.mediapipe.ClassificationListCollection.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.ClassificationList;\n\t      reader.readMessage(value,proto.mediapipe.ClassificationList.deserializeBinaryFromReader);\n\t      msg.addClassificationList(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.ClassificationListCollection.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.ClassificationListCollection.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.ClassificationListCollection} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.ClassificationListCollection.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getClassificationListList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.ClassificationList.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated ClassificationList classification_list = 1;\n\t * @return {!Array<!proto.mediapipe.ClassificationList>}\n\t */\n\tproto.mediapipe.ClassificationListCollection.prototype.getClassificationListList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.ClassificationList>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.ClassificationList, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.ClassificationList>} value\n\t * @return {!proto.mediapipe.ClassificationListCollection} returns this\n\t*/\n\tproto.mediapipe.ClassificationListCollection.prototype.setClassificationListList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.ClassificationList=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.ClassificationList}\n\t */\n\tproto.mediapipe.ClassificationListCollection.prototype.addClassificationList = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.ClassificationList, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.ClassificationListCollection} returns this\n\t */\n\tproto.mediapipe.ClassificationListCollection.prototype.clearClassificationListList = function() {\n\t  return this.setClassificationListList([]);\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (classification_pb));\n\nvar category_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/components/containers/proto/category.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.tasks.components.containers.proto.Category', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.components.containers.proto.Category, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.components.containers.proto.Category.displayName = 'proto.mediapipe.tasks.components.containers.proto.Category';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.components.containers.proto.Category.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.Category} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    index: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    score: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,\n\t    displayName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,\n\t    categoryName: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.components.containers.proto.Category;\n\t  return proto.mediapipe.tasks.components.containers.proto.Category.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.Category} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setIndex(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setScore(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setDisplayName(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setCategoryName(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.components.containers.proto.Category.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.Category} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional int32 index = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.getIndex = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.setIndex = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.clearIndex = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.hasIndex = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional float score = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.getScore = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.setScore = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.clearScore = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.hasScore = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional string display_name = 3;\n\t * @return {string}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.getDisplayName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.setDisplayName = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.clearDisplayName = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.hasDisplayName = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional string category_name = 4;\n\t * @return {string}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.getCategoryName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.setCategoryName = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.clearCategoryName = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.hasCategoryName = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.components.containers.proto);\n} (category_pb));\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/components/containers/proto/classifications.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_formats_classification_pb = classification_pb;\n\tgoog.object.extend(proto, mediapipe_framework_formats_classification_pb);\n\tvar mediapipe_tasks_cc_components_containers_proto_category_pb = category_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_components_containers_proto_category_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.components.containers.proto.ClassificationEntry', null, global);\n\tgoog.exportSymbol('proto.mediapipe.tasks.components.containers.proto.ClassificationResult', null, global);\n\tgoog.exportSymbol('proto.mediapipe.tasks.components.containers.proto.Classifications', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.tasks.components.containers.proto.ClassificationEntry.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.components.containers.proto.ClassificationEntry, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.components.containers.proto.ClassificationEntry.displayName = 'proto.mediapipe.tasks.components.containers.proto.ClassificationEntry';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.tasks.components.containers.proto.Classifications.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.components.containers.proto.Classifications, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.components.containers.proto.Classifications.displayName = 'proto.mediapipe.tasks.components.containers.proto.Classifications';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.tasks.components.containers.proto.ClassificationResult.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.components.containers.proto.ClassificationResult, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.components.containers.proto.ClassificationResult.displayName = 'proto.mediapipe.tasks.components.containers.proto.ClassificationResult';\n\t}\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.components.containers.proto.ClassificationEntry.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    categoriesList: jspb.Message.toObjectList(msg.getCategoriesList(),\n\t    mediapipe_tasks_cc_components_containers_proto_category_pb.Category.toObject, includeInstance),\n\t    timestampMs: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.components.containers.proto.ClassificationEntry;\n\t  return proto.mediapipe.tasks.components.containers.proto.ClassificationEntry.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_components_containers_proto_category_pb.Category;\n\t      reader.readMessage(value,mediapipe_tasks_cc_components_containers_proto_category_pb.Category.deserializeBinaryFromReader);\n\t      msg.addCategories(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setTimestampMs(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.components.containers.proto.ClassificationEntry.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getCategoriesList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_components_containers_proto_category_pb.Category.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt64(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated Category categories = 1;\n\t * @return {!Array<!proto.mediapipe.tasks.components.containers.proto.Category>}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.getCategoriesList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.tasks.components.containers.proto.Category>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, mediapipe_tasks_cc_components_containers_proto_category_pb.Category, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.tasks.components.containers.proto.Category>} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry} returns this\n\t*/\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.setCategoriesList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.Category=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.addCategories = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.tasks.components.containers.proto.Category, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.clearCategoriesList = function() {\n\t  return this.setCategoriesList([]);\n\t};\n\n\n\t/**\n\t * optional int64 timestamp_ms = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.getTimestampMs = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.setTimestampMs = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.clearTimestampMs = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.hasTimestampMs = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.components.containers.proto.Classifications.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.Classifications} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),\n\t    proto.mediapipe.tasks.components.containers.proto.ClassificationEntry.toObject, includeInstance),\n\t    classificationList: (f = msg.getClassificationList()) && mediapipe_framework_formats_classification_pb.ClassificationList.toObject(includeInstance, f),\n\t    headIndex: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    headName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.components.containers.proto.Classifications;\n\t  return proto.mediapipe.tasks.components.containers.proto.Classifications.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.Classifications} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.tasks.components.containers.proto.ClassificationEntry;\n\t      reader.readMessage(value,proto.mediapipe.tasks.components.containers.proto.ClassificationEntry.deserializeBinaryFromReader);\n\t      msg.addEntries(value);\n\t      break;\n\t    case 4:\n\t      var value = new mediapipe_framework_formats_classification_pb.ClassificationList;\n\t      reader.readMessage(value,mediapipe_framework_formats_classification_pb.ClassificationList.deserializeBinaryFromReader);\n\t      msg.setClassificationList(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setHeadIndex(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setHeadName(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.components.containers.proto.Classifications.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.Classifications} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getEntriesList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.tasks.components.containers.proto.ClassificationEntry.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getClassificationList();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      4,\n\t      f,\n\t      mediapipe_framework_formats_classification_pb.ClassificationList.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated ClassificationEntry entries = 1;\n\t * @return {!Array<!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry>}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.getEntriesList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.tasks.components.containers.proto.ClassificationEntry, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry>} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications} returns this\n\t*/\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.setEntriesList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.addEntries = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.tasks.components.containers.proto.ClassificationEntry, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.clearEntriesList = function() {\n\t  return this.setEntriesList([]);\n\t};\n\n\n\t/**\n\t * optional mediapipe.ClassificationList classification_list = 4;\n\t * @return {?proto.mediapipe.ClassificationList}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.getClassificationList = function() {\n\t  return /** @type{?proto.mediapipe.ClassificationList} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_formats_classification_pb.ClassificationList, 4));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.ClassificationList|undefined} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications} returns this\n\t*/\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.setClassificationList = function(value) {\n\t  return jspb.Message.setWrapperField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.clearClassificationList = function() {\n\t  return this.setClassificationList(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.hasClassificationList = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * optional int32 head_index = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.getHeadIndex = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.setHeadIndex = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.clearHeadIndex = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.hasHeadIndex = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional string head_name = 3;\n\t * @return {string}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.getHeadName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.setHeadName = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.clearHeadName = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.hasHeadName = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.components.containers.proto.ClassificationResult.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.ClassificationResult} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    classificationsList: jspb.Message.toObjectList(msg.getClassificationsList(),\n\t    proto.mediapipe.tasks.components.containers.proto.Classifications.toObject, includeInstance),\n\t    timestampMs: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationResult}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.components.containers.proto.ClassificationResult;\n\t  return proto.mediapipe.tasks.components.containers.proto.ClassificationResult.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.ClassificationResult} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationResult}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.tasks.components.containers.proto.Classifications;\n\t      reader.readMessage(value,proto.mediapipe.tasks.components.containers.proto.Classifications.deserializeBinaryFromReader);\n\t      msg.addClassifications(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setTimestampMs(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.components.containers.proto.ClassificationResult.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.ClassificationResult} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getClassificationsList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.tasks.components.containers.proto.Classifications.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt64(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated Classifications classifications = 1;\n\t * @return {!Array<!proto.mediapipe.tasks.components.containers.proto.Classifications>}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.getClassificationsList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.tasks.components.containers.proto.Classifications>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.tasks.components.containers.proto.Classifications, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.tasks.components.containers.proto.Classifications>} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationResult} returns this\n\t*/\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.setClassificationsList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.Classifications=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.addClassifications = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.tasks.components.containers.proto.Classifications, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationResult} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.clearClassificationsList = function() {\n\t  return this.setClassificationsList([]);\n\t};\n\n\n\t/**\n\t * optional int64 timestamp_ms = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.getTimestampMs = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationResult} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.setTimestampMs = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationResult} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.clearTimestampMs = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.hasTimestampMs = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.components.containers.proto);\n} (classifications_pb));\n\nvar image_classifier_graph_options_pb = {};\n\nvar classifier_options_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/components/processors/proto/classifier_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.tasks.components.processors.proto.ClassifierOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.tasks.components.processors.proto.ClassifierOptions.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.components.processors.proto.ClassifierOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.components.processors.proto.ClassifierOptions.displayName = 'proto.mediapipe.tasks.components.processors.proto.ClassifierOptions';\n\t}\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.repeatedFields_ = [4,5];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.components.processors.proto.ClassifierOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    displayNamesLocale: jspb.Message.getFieldWithDefault(msg, 1, \"en\"),\n\t    maxResults: jspb.Message.getFieldWithDefault(msg, 2, -1),\n\t    scoreThreshold: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,\n\t    categoryAllowlistList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,\n\t    categoryDenylistList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.components.processors.proto.ClassifierOptions;\n\t  return proto.mediapipe.tasks.components.processors.proto.ClassifierOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setDisplayNamesLocale(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setMaxResults(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setScoreThreshold(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addCategoryAllowlist(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addCategoryDenylist(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.components.processors.proto.ClassifierOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = message.getCategoryAllowlistList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = message.getCategoryDenylistList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string display_names_locale = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.getDisplayNamesLocale = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"en\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.setDisplayNamesLocale = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.clearDisplayNamesLocale = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.hasDisplayNamesLocale = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional int32 max_results = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.getMaxResults = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, -1));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.setMaxResults = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.clearMaxResults = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.hasMaxResults = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional float score_threshold = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.getScoreThreshold = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.setScoreThreshold = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.clearScoreThreshold = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.hasScoreThreshold = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * repeated string category_allowlist = 4;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.getCategoryAllowlistList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.setCategoryAllowlistList = function(value) {\n\t  return jspb.Message.setField(this, 4, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.addCategoryAllowlist = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.clearCategoryAllowlistList = function() {\n\t  return this.setCategoryAllowlistList([]);\n\t};\n\n\n\t/**\n\t * repeated string category_denylist = 5;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.getCategoryDenylistList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.setCategoryDenylistList = function(value) {\n\t  return jspb.Message.setField(this, 5, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.addCategoryDenylist = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.clearCategoryDenylistList = function() {\n\t  return this.setCategoryDenylistList([]);\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.components.processors.proto);\n} (classifier_options_pb));\n\nvar base_options_pb = {};\n\nvar acceleration_pb = {};\n\nvar inference_calculator_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/calculators/tensor/inference_calculator.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tgoog.exportSymbol('proto.mediapipe.InferenceCalculatorOptions', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InferenceCalculatorOptions.Delegate', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InferenceCalculatorOptions.Delegate.DelegateCase', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.Api', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.InferenceUsage', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.InferenceCalculatorOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InferenceCalculatorOptions.displayName = 'proto.mediapipe.InferenceCalculatorOptions';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.mediapipe.InferenceCalculatorOptions.Delegate.oneofGroups_);\n\t};\n\tgoog.inherits(proto.mediapipe.InferenceCalculatorOptions.Delegate, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.displayName = 'proto.mediapipe.InferenceCalculatorOptions.Delegate';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.displayName = 'proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.displayName = 'proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.displayName = 'proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.displayName = 'proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InferenceCalculatorOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    modelPath: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    useGpu: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),\n\t    useNnapi: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),\n\t    cpuNumThread: jspb.Message.getFieldWithDefault(msg, 4, -1),\n\t    delegate: (f = msg.getDelegate()) && proto.mediapipe.InferenceCalculatorOptions.Delegate.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InferenceCalculatorOptions;\n\t  return proto.mediapipe.InferenceCalculatorOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setModelPath(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setUseGpu(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setUseNnapi(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setCpuNumThread(value);\n\t      break;\n\t    case 5:\n\t      var value = new proto.mediapipe.InferenceCalculatorOptions.Delegate;\n\t      reader.readMessage(value,proto.mediapipe.InferenceCalculatorOptions.Delegate.deserializeBinaryFromReader);\n\t      msg.setDelegate(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InferenceCalculatorOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeBool(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeBool(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = message.getDelegate();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      5,\n\t      f,\n\t      proto.mediapipe.InferenceCalculatorOptions.Delegate.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * Oneof group definitions for this message. Each group defines the field\n\t * numbers belonging to that group. When of these fields' value is set, all\n\t * other fields in the group are cleared. During deserialization, if multiple\n\t * fields are encountered for a group, only the last value seen will be kept.\n\t * @private {!Array<!Array<number>>}\n\t * @const\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.oneofGroups_ = [[1,2,3,4]];\n\n\t/**\n\t * @enum {number}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.DelegateCase = {\n\t  DELEGATE_NOT_SET: 0,\n\t  TFLITE: 1,\n\t  GPU: 2,\n\t  NNAPI: 3,\n\t  XNNPACK: 4\n\t};\n\n\t/**\n\t * @return {proto.mediapipe.InferenceCalculatorOptions.Delegate.DelegateCase}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.getDelegateCase = function() {\n\t  return /** @type {proto.mediapipe.InferenceCalculatorOptions.Delegate.DelegateCase} */(jspb.Message.computeOneofCase(this, proto.mediapipe.InferenceCalculatorOptions.Delegate.oneofGroups_[0]));\n\t};\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    tflite: (f = msg.getTflite()) && proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.toObject(includeInstance, f),\n\t    gpu: (f = msg.getGpu()) && proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.toObject(includeInstance, f),\n\t    nnapi: (f = msg.getNnapi()) && proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.toObject(includeInstance, f),\n\t    xnnpack: (f = msg.getXnnpack()) && proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InferenceCalculatorOptions.Delegate;\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite;\n\t      reader.readMessage(value,proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.deserializeBinaryFromReader);\n\t      msg.setTflite(value);\n\t      break;\n\t    case 2:\n\t      var value = new proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu;\n\t      reader.readMessage(value,proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.deserializeBinaryFromReader);\n\t      msg.setGpu(value);\n\t      break;\n\t    case 3:\n\t      var value = new proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi;\n\t      reader.readMessage(value,proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.deserializeBinaryFromReader);\n\t      msg.setNnapi(value);\n\t      break;\n\t    case 4:\n\t      var value = new proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack;\n\t      reader.readMessage(value,proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.deserializeBinaryFromReader);\n\t      msg.setXnnpack(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getTflite();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getGpu();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      2,\n\t      f,\n\t      proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getNnapi();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getXnnpack();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      4,\n\t      f,\n\t      proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite;\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.serializeBinaryToWriter = function(message, writer) {\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    useAdvancedGpuApi: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),\n\t    api: jspb.Message.getFieldWithDefault(msg, 4, 0),\n\t    allowPrecisionLoss: jspb.Message.getBooleanFieldWithDefault(msg, 3, true),\n\t    cachedKernelPath: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    serializedModelDir: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,\n\t    modelToken: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,\n\t    usage: jspb.Message.getFieldWithDefault(msg, 5, 2)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu;\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setUseAdvancedGpuApi(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.Api} */ (reader.readEnum());\n\t      msg.setApi(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setAllowPrecisionLoss(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setCachedKernelPath(value);\n\t      break;\n\t    case 7:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setSerializedModelDir(value);\n\t      break;\n\t    case 8:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setModelToken(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.InferenceUsage} */ (reader.readEnum());\n\t      msg.setUsage(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeBool(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.Api} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeEnum(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeBool(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 7));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      7,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 8));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      8,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.InferenceUsage} */ (jspb.Message.getField(message, 5));\n\t  if (f != null) {\n\t    writer.writeEnum(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * @enum {number}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.Api = {\n\t  ANY: 0,\n\t  OPENGL: 1,\n\t  OPENCL: 2\n\t};\n\n\t/**\n\t * @enum {number}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.InferenceUsage = {\n\t  UNSPECIFIED: 0,\n\t  FAST_SINGLE_ANSWER: 1,\n\t  SUSTAINED_SPEED: 2\n\t};\n\n\t/**\n\t * optional bool use_advanced_gpu_api = 1;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.getUseAdvancedGpuApi = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.setUseAdvancedGpuApi = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.clearUseAdvancedGpuApi = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.hasUseAdvancedGpuApi = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional Api api = 4;\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.Api}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.getApi = function() {\n\t  return /** @type {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.Api} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.Api} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.setApi = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.clearApi = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.hasApi = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * optional bool allow_precision_loss = 3;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.getAllowPrecisionLoss = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, true));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.setAllowPrecisionLoss = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.clearAllowPrecisionLoss = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.hasAllowPrecisionLoss = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional string cached_kernel_path = 2;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.getCachedKernelPath = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.setCachedKernelPath = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.clearCachedKernelPath = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.hasCachedKernelPath = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional string serialized_model_dir = 7;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.getSerializedModelDir = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.setSerializedModelDir = function(value) {\n\t  return jspb.Message.setField(this, 7, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.clearSerializedModelDir = function() {\n\t  return jspb.Message.setField(this, 7, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.hasSerializedModelDir = function() {\n\t  return jspb.Message.getField(this, 7) != null;\n\t};\n\n\n\t/**\n\t * optional string model_token = 8;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.getModelToken = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.setModelToken = function(value) {\n\t  return jspb.Message.setField(this, 8, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.clearModelToken = function() {\n\t  return jspb.Message.setField(this, 8, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.hasModelToken = function() {\n\t  return jspb.Message.getField(this, 8) != null;\n\t};\n\n\n\t/**\n\t * optional InferenceUsage usage = 5;\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.InferenceUsage}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.getUsage = function() {\n\t  return /** @type {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.InferenceUsage} */ (jspb.Message.getFieldWithDefault(this, 5, 2));\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.InferenceUsage} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.setUsage = function(value) {\n\t  return jspb.Message.setField(this, 5, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.clearUsage = function() {\n\t  return jspb.Message.setField(this, 5, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.hasUsage = function() {\n\t  return jspb.Message.getField(this, 5) != null;\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    cacheDir: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    modelToken: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    acceleratorName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi;\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setCacheDir(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setModelToken(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setAcceleratorName(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string cache_dir = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.getCacheDir = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.setCacheDir = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.clearCacheDir = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.hasCacheDir = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional string model_token = 2;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.getModelToken = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.setModelToken = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.clearModelToken = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.hasModelToken = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional string accelerator_name = 3;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.getAcceleratorName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.setAcceleratorName = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.clearAcceleratorName = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.hasAcceleratorName = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    numThreads: jspb.Message.getFieldWithDefault(msg, 1, -1)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack;\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setNumThreads(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional int32 num_threads = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.prototype.getNumThreads = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, -1));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.prototype.setNumThreads = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.prototype.clearNumThreads = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.prototype.hasNumThreads = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional TfLite tflite = 1;\n\t * @return {?proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.getTflite = function() {\n\t  return /** @type{?proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite|undefined} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate} returns this\n\t*/\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.setTflite = function(value) {\n\t  return jspb.Message.setOneofWrapperField(this, 1, proto.mediapipe.InferenceCalculatorOptions.Delegate.oneofGroups_[0], value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.clearTflite = function() {\n\t  return this.setTflite(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.hasTflite = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional Gpu gpu = 2;\n\t * @return {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.getGpu = function() {\n\t  return /** @type{?proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu, 2));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu|undefined} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate} returns this\n\t*/\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.setGpu = function(value) {\n\t  return jspb.Message.setOneofWrapperField(this, 2, proto.mediapipe.InferenceCalculatorOptions.Delegate.oneofGroups_[0], value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.clearGpu = function() {\n\t  return this.setGpu(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.hasGpu = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional Nnapi nnapi = 3;\n\t * @return {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.getNnapi = function() {\n\t  return /** @type{?proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi|undefined} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate} returns this\n\t*/\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.setNnapi = function(value) {\n\t  return jspb.Message.setOneofWrapperField(this, 3, proto.mediapipe.InferenceCalculatorOptions.Delegate.oneofGroups_[0], value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.clearNnapi = function() {\n\t  return this.setNnapi(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.hasNnapi = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional Xnnpack xnnpack = 4;\n\t * @return {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.getXnnpack = function() {\n\t  return /** @type{?proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack, 4));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack|undefined} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate} returns this\n\t*/\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.setXnnpack = function(value) {\n\t  return jspb.Message.setOneofWrapperField(this, 4, proto.mediapipe.InferenceCalculatorOptions.Delegate.oneofGroups_[0], value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.clearXnnpack = function() {\n\t  return this.setXnnpack(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.hasXnnpack = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.InferenceCalculatorOptions>}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.ext = new jspb.ExtensionFieldInfo(\n\t    336783863,\n\t    {ext: 0},\n\t    proto.mediapipe.InferenceCalculatorOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.InferenceCalculatorOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[336783863] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.InferenceCalculatorOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.InferenceCalculatorOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.InferenceCalculatorOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[336783863] = proto.mediapipe.InferenceCalculatorOptions.ext;\n\n\t/**\n\t * optional string model_path = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.getModelPath = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.setModelPath = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.clearModelPath = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.hasModelPath = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional bool use_gpu = 2;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.getUseGpu = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.setUseGpu = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.clearUseGpu = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.hasUseGpu = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional bool use_nnapi = 3;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.getUseNnapi = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.setUseNnapi = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.clearUseNnapi = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.hasUseNnapi = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional int32 cpu_num_thread = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.getCpuNumThread = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, -1));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.setCpuNumThread = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.clearCpuNumThread = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.hasCpuNumThread = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * optional Delegate delegate = 5;\n\t * @return {?proto.mediapipe.InferenceCalculatorOptions.Delegate}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.getDelegate = function() {\n\t  return /** @type{?proto.mediapipe.InferenceCalculatorOptions.Delegate} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.InferenceCalculatorOptions.Delegate, 5));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InferenceCalculatorOptions.Delegate|undefined} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t*/\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.setDelegate = function(value) {\n\t  return jspb.Message.setWrapperField(this, 5, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.clearDelegate = function() {\n\t  return this.setDelegate(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.hasDelegate = function() {\n\t  return jspb.Message.getField(this, 5) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.InferenceCalculatorOptions>}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.ext = new jspb.ExtensionFieldInfo(\n\t    336783863,\n\t    {ext: 0},\n\t    proto.mediapipe.InferenceCalculatorOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.InferenceCalculatorOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[336783863] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.InferenceCalculatorOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.InferenceCalculatorOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.InferenceCalculatorOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[336783863] = proto.mediapipe.InferenceCalculatorOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (inference_calculator_pb));\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/core/proto/acceleration.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_calculators_tensor_inference_calculator_pb = inference_calculator_pb;\n\tgoog.object.extend(proto, mediapipe_calculators_tensor_inference_calculator_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.core.proto.Acceleration', null, global);\n\tgoog.exportSymbol('proto.mediapipe.tasks.core.proto.Acceleration.DelegateCase', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.mediapipe.tasks.core.proto.Acceleration.oneofGroups_);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.core.proto.Acceleration, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.core.proto.Acceleration.displayName = 'proto.mediapipe.tasks.core.proto.Acceleration';\n\t}\n\n\t/**\n\t * Oneof group definitions for this message. Each group defines the field\n\t * numbers belonging to that group. When of these fields' value is set, all\n\t * other fields in the group are cleared. During deserialization, if multiple\n\t * fields are encountered for a group, only the last value seen will be kept.\n\t * @private {!Array<!Array<number>>}\n\t * @const\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.oneofGroups_ = [[1,2,4]];\n\n\t/**\n\t * @enum {number}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.DelegateCase = {\n\t  DELEGATE_NOT_SET: 0,\n\t  XNNPACK: 1,\n\t  GPU: 2,\n\t  TFLITE: 4\n\t};\n\n\t/**\n\t * @return {proto.mediapipe.tasks.core.proto.Acceleration.DelegateCase}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.getDelegateCase = function() {\n\t  return /** @type {proto.mediapipe.tasks.core.proto.Acceleration.DelegateCase} */(jspb.Message.computeOneofCase(this, proto.mediapipe.tasks.core.proto.Acceleration.oneofGroups_[0]));\n\t};\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.core.proto.Acceleration.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.core.proto.Acceleration} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    xnnpack: (f = msg.getXnnpack()) && mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Xnnpack.toObject(includeInstance, f),\n\t    gpu: (f = msg.getGpu()) && mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Gpu.toObject(includeInstance, f),\n\t    tflite: (f = msg.getTflite()) && mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.TfLite.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.core.proto.Acceleration}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.core.proto.Acceleration;\n\t  return proto.mediapipe.tasks.core.proto.Acceleration.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.core.proto.Acceleration} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.core.proto.Acceleration}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Xnnpack;\n\t      reader.readMessage(value,mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Xnnpack.deserializeBinaryFromReader);\n\t      msg.setXnnpack(value);\n\t      break;\n\t    case 2:\n\t      var value = new mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Gpu;\n\t      reader.readMessage(value,mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Gpu.deserializeBinaryFromReader);\n\t      msg.setGpu(value);\n\t      break;\n\t    case 4:\n\t      var value = new mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.TfLite;\n\t      reader.readMessage(value,mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.TfLite.deserializeBinaryFromReader);\n\t      msg.setTflite(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.core.proto.Acceleration.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.core.proto.Acceleration} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getXnnpack();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Xnnpack.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getGpu();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      2,\n\t      f,\n\t      mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Gpu.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getTflite();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      4,\n\t      f,\n\t      mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.TfLite.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack xnnpack = 1;\n\t * @return {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.getXnnpack = function() {\n\t  return /** @type{?proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Xnnpack, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack|undefined} value\n\t * @return {!proto.mediapipe.tasks.core.proto.Acceleration} returns this\n\t*/\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.setXnnpack = function(value) {\n\t  return jspb.Message.setOneofWrapperField(this, 1, proto.mediapipe.tasks.core.proto.Acceleration.oneofGroups_[0], value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.Acceleration} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.clearXnnpack = function() {\n\t  return this.setXnnpack(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.hasXnnpack = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional mediapipe.InferenceCalculatorOptions.Delegate.Gpu gpu = 2;\n\t * @return {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.getGpu = function() {\n\t  return /** @type{?proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Gpu, 2));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu|undefined} value\n\t * @return {!proto.mediapipe.tasks.core.proto.Acceleration} returns this\n\t*/\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.setGpu = function(value) {\n\t  return jspb.Message.setOneofWrapperField(this, 2, proto.mediapipe.tasks.core.proto.Acceleration.oneofGroups_[0], value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.Acceleration} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.clearGpu = function() {\n\t  return this.setGpu(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.hasGpu = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional mediapipe.InferenceCalculatorOptions.Delegate.TfLite tflite = 4;\n\t * @return {?proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.getTflite = function() {\n\t  return /** @type{?proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.TfLite, 4));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite|undefined} value\n\t * @return {!proto.mediapipe.tasks.core.proto.Acceleration} returns this\n\t*/\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.setTflite = function(value) {\n\t  return jspb.Message.setOneofWrapperField(this, 4, proto.mediapipe.tasks.core.proto.Acceleration.oneofGroups_[0], value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.Acceleration} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.clearTflite = function() {\n\t  return this.setTflite(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.hasTflite = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.core.proto);\n} (acceleration_pb));\n\nvar external_file_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/core/proto/external_file.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.tasks.core.proto.ExternalFile', null, global);\n\tgoog.exportSymbol('proto.mediapipe.tasks.core.proto.FileDescriptorMeta', null, global);\n\tgoog.exportSymbol('proto.mediapipe.tasks.core.proto.FilePointerMeta', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.core.proto.ExternalFile, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.core.proto.ExternalFile.displayName = 'proto.mediapipe.tasks.core.proto.ExternalFile';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.core.proto.FileDescriptorMeta, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.core.proto.FileDescriptorMeta.displayName = 'proto.mediapipe.tasks.core.proto.FileDescriptorMeta';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.core.proto.FilePointerMeta, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.core.proto.FilePointerMeta.displayName = 'proto.mediapipe.tasks.core.proto.FilePointerMeta';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.core.proto.ExternalFile.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.core.proto.ExternalFile} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    fileContent: msg.getFileContent_asB64(),\n\t    fileName: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    fileDescriptorMeta: (f = msg.getFileDescriptorMeta()) && proto.mediapipe.tasks.core.proto.FileDescriptorMeta.toObject(includeInstance, f),\n\t    filePointerMeta: (f = msg.getFilePointerMeta()) && proto.mediapipe.tasks.core.proto.FilePointerMeta.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.core.proto.ExternalFile;\n\t  return proto.mediapipe.tasks.core.proto.ExternalFile.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.core.proto.ExternalFile} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n\t      msg.setFileContent(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setFileName(value);\n\t      break;\n\t    case 3:\n\t      var value = new proto.mediapipe.tasks.core.proto.FileDescriptorMeta;\n\t      reader.readMessage(value,proto.mediapipe.tasks.core.proto.FileDescriptorMeta.deserializeBinaryFromReader);\n\t      msg.setFileDescriptorMeta(value);\n\t      break;\n\t    case 4:\n\t      var value = new proto.mediapipe.tasks.core.proto.FilePointerMeta;\n\t      reader.readMessage(value,proto.mediapipe.tasks.core.proto.FilePointerMeta.deserializeBinaryFromReader);\n\t      msg.setFilePointerMeta(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.core.proto.ExternalFile.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.core.proto.ExternalFile} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeBytes(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getFileDescriptorMeta();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      proto.mediapipe.tasks.core.proto.FileDescriptorMeta.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getFilePointerMeta();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      4,\n\t      f,\n\t      proto.mediapipe.tasks.core.proto.FilePointerMeta.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional bytes file_content = 1;\n\t * @return {!(string|Uint8Array)}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.getFileContent = function() {\n\t  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * optional bytes file_content = 1;\n\t * This is a type-conversion wrapper around `getFileContent()`\n\t * @return {string}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.getFileContent_asB64 = function() {\n\t  return /** @type {string} */ (jspb.Message.bytesAsB64(\n\t      this.getFileContent()));\n\t};\n\n\n\t/**\n\t * optional bytes file_content = 1;\n\t * Note that Uint8Array is not supported on all browsers.\n\t * @see http://caniuse.com/Uint8Array\n\t * This is a type-conversion wrapper around `getFileContent()`\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.getFileContent_asU8 = function() {\n\t  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n\t      this.getFileContent()));\n\t};\n\n\n\t/**\n\t * @param {!(string|Uint8Array)} value\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.setFileContent = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.clearFileContent = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.hasFileContent = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional string file_name = 2;\n\t * @return {string}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.getFileName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.setFileName = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.clearFileName = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.hasFileName = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional FileDescriptorMeta file_descriptor_meta = 3;\n\t * @return {?proto.mediapipe.tasks.core.proto.FileDescriptorMeta}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.getFileDescriptorMeta = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.FileDescriptorMeta} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.tasks.core.proto.FileDescriptorMeta, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.FileDescriptorMeta|undefined} value\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile} returns this\n\t*/\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.setFileDescriptorMeta = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.clearFileDescriptorMeta = function() {\n\t  return this.setFileDescriptorMeta(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.hasFileDescriptorMeta = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional FilePointerMeta file_pointer_meta = 4;\n\t * @return {?proto.mediapipe.tasks.core.proto.FilePointerMeta}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.getFilePointerMeta = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.FilePointerMeta} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.tasks.core.proto.FilePointerMeta, 4));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.FilePointerMeta|undefined} value\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile} returns this\n\t*/\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.setFilePointerMeta = function(value) {\n\t  return jspb.Message.setWrapperField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.clearFilePointerMeta = function() {\n\t  return this.setFilePointerMeta(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.hasFilePointerMeta = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.core.proto.FileDescriptorMeta.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    fd: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    length: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    offset: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.core.proto.FileDescriptorMeta;\n\t  return proto.mediapipe.tasks.core.proto.FileDescriptorMeta.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setFd(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setLength(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setOffset(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.core.proto.FileDescriptorMeta.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt64(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeInt64(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional int32 fd = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.getFd = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.setFd = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.clearFd = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.hasFd = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional int64 length = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.getLength = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.setLength = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.clearLength = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.hasLength = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional int64 offset = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.getOffset = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.setOffset = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.clearOffset = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.hasOffset = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.core.proto.FilePointerMeta.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.core.proto.FilePointerMeta} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    pointer: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    length: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.core.proto.FilePointerMeta}\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.core.proto.FilePointerMeta;\n\t  return proto.mediapipe.tasks.core.proto.FilePointerMeta.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.core.proto.FilePointerMeta} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.core.proto.FilePointerMeta}\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readUint64());\n\t      msg.setPointer(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setLength(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.core.proto.FilePointerMeta.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.core.proto.FilePointerMeta} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeUint64(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt64(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional uint64 pointer = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.getPointer = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.core.proto.FilePointerMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.setPointer = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.FilePointerMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.clearPointer = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.hasPointer = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional int64 length = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.getLength = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.core.proto.FilePointerMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.setLength = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.FilePointerMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.clearLength = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.hasLength = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.core.proto);\n} (external_file_pb));\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/core/proto/base_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_tasks_cc_core_proto_acceleration_pb = acceleration_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_acceleration_pb);\n\tvar mediapipe_tasks_cc_core_proto_external_file_pb = external_file_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_external_file_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.core.proto.BaseOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.core.proto.BaseOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.core.proto.BaseOptions.displayName = 'proto.mediapipe.tasks.core.proto.BaseOptions';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.core.proto.BaseOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.core.proto.BaseOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    modelAsset: (f = msg.getModelAsset()) && mediapipe_tasks_cc_core_proto_external_file_pb.ExternalFile.toObject(includeInstance, f),\n\t    useStreamMode: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),\n\t    acceleration: (f = msg.getAcceleration()) && mediapipe_tasks_cc_core_proto_acceleration_pb.Acceleration.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.core.proto.BaseOptions;\n\t  return proto.mediapipe.tasks.core.proto.BaseOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.core.proto.BaseOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_external_file_pb.ExternalFile;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_external_file_pb.ExternalFile.deserializeBinaryFromReader);\n\t      msg.setModelAsset(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setUseStreamMode(value);\n\t      break;\n\t    case 3:\n\t      var value = new mediapipe_tasks_cc_core_proto_acceleration_pb.Acceleration;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_acceleration_pb.Acceleration.deserializeBinaryFromReader);\n\t      msg.setAcceleration(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.core.proto.BaseOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.core.proto.BaseOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getModelAsset();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_external_file_pb.ExternalFile.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeBool(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getAcceleration();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_acceleration_pb.Acceleration.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional ExternalFile model_asset = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.ExternalFile}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.getModelAsset = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.ExternalFile} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_external_file_pb.ExternalFile, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.ExternalFile|undefined} value\n\t * @return {!proto.mediapipe.tasks.core.proto.BaseOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.setModelAsset = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.BaseOptions} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.clearModelAsset = function() {\n\t  return this.setModelAsset(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.hasModelAsset = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional bool use_stream_mode = 2;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.getUseStreamMode = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.tasks.core.proto.BaseOptions} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.setUseStreamMode = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.BaseOptions} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.clearUseStreamMode = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.hasUseStreamMode = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional Acceleration acceleration = 3;\n\t * @return {?proto.mediapipe.tasks.core.proto.Acceleration}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.getAcceleration = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.Acceleration} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_acceleration_pb.Acceleration, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.Acceleration|undefined} value\n\t * @return {!proto.mediapipe.tasks.core.proto.BaseOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.setAcceleration = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.BaseOptions} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.clearAcceleration = function() {\n\t  return this.setAcceleration(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.hasAcceleration = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.core.proto);\n} (base_options_pb));\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/vision/image_classifier/proto/image_classifier_graph_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tvar mediapipe_tasks_cc_components_processors_proto_classifier_options_pb = classifier_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_components_processors_proto_classifier_options_pb);\n\tvar mediapipe_tasks_cc_core_proto_base_options_pb = base_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_base_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.displayName = 'proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    baseOptions: (f = msg.getBaseOptions()) && mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.toObject(includeInstance, f),\n\t    classifierOptions: (f = msg.getClassifierOptions()) && mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions;\n\t  return proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.deserializeBinaryFromReader);\n\t      msg.setBaseOptions(value);\n\t      break;\n\t    case 2:\n\t      var value = new mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions.deserializeBinaryFromReader);\n\t      msg.setClassifierOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getBaseOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getClassifierOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      2,\n\t      f,\n\t      mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    456383383,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[456383383] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[456383383] = proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.ext;\n\n\t/**\n\t * optional mediapipe.tasks.core.proto.BaseOptions base_options = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.getBaseOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.BaseOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.BaseOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.setBaseOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.clearBaseOptions = function() {\n\t  return this.setBaseOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.hasBaseOptions = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional mediapipe.tasks.components.processors.proto.ClassifierOptions classifier_options = 2;\n\t * @return {?proto.mediapipe.tasks.components.processors.proto.ClassifierOptions}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.getClassifierOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions, 2));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.components.processors.proto.ClassifierOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.setClassifierOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.clearClassifierOptions = function() {\n\t  return this.setClassifierOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.hasClassifierOptions = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    456383383,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[456383383] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[456383383] = proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.vision.image_classifier.proto);\n} (image_classifier_graph_options_pb));\n\nvar base_options = {};\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(base_options, \"__esModule\", { value: true });\nbase_options.convertBaseOptionsToProto = void 0;\nconst inference_calculator_pb_1 = inference_calculator_pb;\nconst acceleration_pb_1 = acceleration_pb;\nconst base_options_pb_1 = base_options_pb;\nconst external_file_pb_1 = external_file_pb;\n// The OSS JS API does not support the builder pattern.\n// tslint:disable:jspb-use-builder-pattern\n/**\n * Converts a BaseOptions API object to its Protobuf representation.\n * @throws If neither a model assset path or buffer is provided\n */\nasync function convertBaseOptionsToProto(updatedOptions, currentOptions) {\n    const result = currentOptions ? currentOptions.clone() : new base_options_pb_1.BaseOptions();\n    await configureExternalFile(updatedOptions, result);\n    configureAcceleration(updatedOptions, result);\n    return result;\n}\nbase_options.convertBaseOptionsToProto = convertBaseOptionsToProto;\n/**\n * Configues the `externalFile` option and validates that a single model is\n * provided.\n */\nasync function configureExternalFile(options, proto) {\n    const externalFile = proto.getModelAsset() || new external_file_pb_1.ExternalFile();\n    proto.setModelAsset(externalFile);\n    if (options.modelAssetPath || options.modelAssetBuffer) {\n        if (options.modelAssetPath && options.modelAssetBuffer) {\n            throw new Error('Cannot set both baseOptions.modelAssetPath and baseOptions.modelAssetBuffer');\n        }\n        let modelAssetBuffer = options.modelAssetBuffer;\n        if (!modelAssetBuffer) {\n            const response = await fetch(options.modelAssetPath.toString());\n            modelAssetBuffer = new Uint8Array(await response.arrayBuffer());\n        }\n        externalFile.setFileContent(modelAssetBuffer);\n    }\n    if (!externalFile.hasFileContent()) {\n        throw new Error('Either baseOptions.modelAssetPath or baseOptions.modelAssetBuffer must be set');\n    }\n}\n/** Configues the `acceleration` option. */\nfunction configureAcceleration(options, proto) {\n    var _a;\n    const acceleration = (_a = proto.getAcceleration()) !== null && _a !== void 0 ? _a : new acceleration_pb_1.Acceleration();\n    if (options.delegate === 'gpu') {\n        acceleration.setGpu(new inference_calculator_pb_1.InferenceCalculatorOptions.Delegate.Gpu());\n    }\n    else {\n        acceleration.setTflite(new inference_calculator_pb_1.InferenceCalculatorOptions.Delegate.TfLite());\n    }\n    proto.setAcceleration(acceleration);\n}\n\nvar classifier_options = {};\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(classifier_options, \"__esModule\", { value: true });\nclassifier_options.convertClassifierOptionsToProto = void 0;\nconst classifier_options_pb_1 = classifier_options_pb;\n/**\n * Converts a ClassifierOptions object to its Proto representation, optionally\n * based on existing definition.\n * @param options The options object to convert to a Proto. Only options that\n *     are expliclty provided are set.\n * @param baseOptions A base object that options can be merged into.\n */\nfunction convertClassifierOptionsToProto(options, baseOptions) {\n    const classifierOptions = baseOptions ? baseOptions.clone() : new classifier_options_pb_1.ClassifierOptions();\n    if (options.displayNamesLocale !== undefined) {\n        classifierOptions.setDisplayNamesLocale(options.displayNamesLocale);\n    }\n    else if (options.displayNamesLocale === undefined) {\n        classifierOptions.clearDisplayNamesLocale();\n    }\n    if (options.maxResults !== undefined) {\n        classifierOptions.setMaxResults(options.maxResults);\n    }\n    else if ('maxResults' in options) { // Check for undefined\n        classifierOptions.clearMaxResults();\n    }\n    if (options.scoreThreshold !== undefined) {\n        classifierOptions.setScoreThreshold(options.scoreThreshold);\n    }\n    else if ('scoreThreshold' in options) { // Check for undefined\n        classifierOptions.clearScoreThreshold();\n    }\n    if (options.categoryAllowlist !== undefined) {\n        classifierOptions.setCategoryAllowlistList(options.categoryAllowlist);\n    }\n    else if ('categoryAllowlist' in options) { // Check for undefined\n        classifierOptions.clearCategoryAllowlistList();\n    }\n    if (options.categoryDenylist !== undefined) {\n        classifierOptions.setCategoryDenylistList(options.categoryDenylist);\n    }\n    else if ('categoryDenylist' in options) { // Check for undefined\n        classifierOptions.clearCategoryDenylistList();\n    }\n    return classifierOptions;\n}\nclassifier_options.convertClassifierOptionsToProto = convertClassifierOptionsToProto;\n\nvar classifier_result = {};\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(classifier_result, \"__esModule\", { value: true });\nclassifier_result.convertFromClassificationResultProto = void 0;\nconst DEFAULT_INDEX = -1;\nconst DEFAULT_SCORE = 0.0;\n/**\n * Converts a Classifications proto to a Classifications object.\n */\nfunction convertFromClassificationsProto(source) {\n    var _a, _b, _c, _d;\n    const categories = (_b = (_a = source.getClassificationList()) === null || _a === void 0 ? void 0 : _a.getClassificationList().map(classification => {\n        var _a, _b, _c, _d;\n        return {\n            index: (_a = classification.getIndex()) !== null && _a !== void 0 ? _a : DEFAULT_INDEX,\n            score: (_b = classification.getScore()) !== null && _b !== void 0 ? _b : DEFAULT_SCORE,\n            categoryName: (_c = classification.getLabel()) !== null && _c !== void 0 ? _c : '',\n            displayName: (_d = classification.getDisplayName()) !== null && _d !== void 0 ? _d : '',\n        };\n    })) !== null && _b !== void 0 ? _b : [];\n    return {\n        categories,\n        headIndex: (_c = source.getHeadIndex()) !== null && _c !== void 0 ? _c : DEFAULT_INDEX,\n        headName: (_d = source.getHeadName()) !== null && _d !== void 0 ? _d : '',\n    };\n}\n/**\n * Converts a ClassificationResult proto to a ClassificationResult object.\n */\nfunction convertFromClassificationResultProto(source) {\n    const result = {\n        classifications: source.getClassificationsList().map(classififications => convertFromClassificationsProto(classififications))\n    };\n    if (source.hasTimestampMs()) {\n        result.timestampMs = source.getTimestampMs();\n    }\n    return result;\n}\nclassifier_result.convertFromClassificationResultProto = convertFromClassificationResultProto;\n\nvar task_runner = {};\n\nvar register_model_resources_graph_service = {};\n\nObject.defineProperty(register_model_resources_graph_service, \"__esModule\", { value: true });\nregister_model_resources_graph_service.SupportModelResourcesGraphService = void 0;\n/**\n * An implementation of WasmMediaPipeLib that supports registering model\n * resources to a cache, in the form of a GraphService C++-side. We implement as\n * a proper TS mixin, to allow for effective multiple inheritance. Sample usage:\n * `const WasmMediaPipeImageLib = SupportModelResourcesGraphService(\n *     WasmMediaPipeLib);`\n */\n// tslint:disable:enforce-name-casing\nfunction SupportModelResourcesGraphService(Base) {\n    return class extends Base {\n        // tslint:enable:enforce-name-casing\n        /**\n         * Instructs the graph runner to use the model resource caching graph\n         * service for both graph expansion/inintialization, as well as for graph\n         * run.\n         */\n        registerModelResourcesGraphService() {\n            this.wasmModule\n                ._registerModelResourcesGraphService();\n        }\n    };\n}\nregister_model_resources_graph_service.SupportModelResourcesGraphService = SupportModelResourcesGraphService;\n\nvar wasm_mediapipe_image_lib = {};\n\nObject.defineProperty(wasm_mediapipe_image_lib, \"__esModule\", { value: true });\nwasm_mediapipe_image_lib.SupportImage = void 0;\n/**\n * An implementation of WasmMediaPipeLib that supports binding GPU image data as\n * `mediapipe::Image` instances. We implement as a proper TS mixin, to allow for\n * effective multiple inheritance. Example usage:\n * `const WasmMediaPipeImageLib = SupportImage(WasmMediaPipeLib);`\n */\n// tslint:disable-next-line:enforce-name-casing\nfunction SupportImage(Base) {\n    return class extends Base {\n        /**\n         * Takes the relevant information from the HTML video or image element, and\n         * passes it into the WebGL-based graph for processing on the given stream\n         * at the given timestamp as a MediaPipe image. Processing will not occur\n         * until a blocking call (like processVideoGl or finishProcessing) is made.\n         * @param imageSource Reference to the video frame we wish to add into our\n         *     graph.\n         * @param streamName The name of the MediaPipe graph stream to add the frame\n         *     to.\n         * @param timestamp The timestamp of the input frame, in ms.\n         */\n        addGpuBufferAsImageToStream(imageSource, streamName, timestamp) {\n            this.wrapStringPtr(streamName, (streamNamePtr) => {\n                const [width, height] = this.bindTextureToStream(imageSource, streamNamePtr);\n                this.wasmModule\n                    ._addBoundTextureAsImageToStream(streamNamePtr, width, height, timestamp);\n            });\n        }\n    };\n}\nwasm_mediapipe_image_lib.SupportImage = SupportImage;\n\nvar wasm_mediapipe_lib = {};\n\n// Placeholder for internal dependency on assertTruthy\n// Placeholder for internal dependency on jsloader\n// Placeholder for internal dependency on trusted resource url\nObject.defineProperty(wasm_mediapipe_lib, \"__esModule\", { value: true });\nwasm_mediapipe_lib.createWasmMediaPipeLib = wasm_mediapipe_lib.createMediaPipeLib = wasm_mediapipe_lib.WasmMediaPipeLib = void 0;\n/**\n * Simple class to run an arbitrary image-in/image-out MediaPipe graph (i.e.\n * as created by wasm_mediapipe_demo BUILD macro), and either render results\n * into canvas, or else return the output WebGLTexture. Takes a WebAssembly\n * Module (must be instantiated to self.Module).\n */\nclass WasmMediaPipeLib {\n    /**\n     * Creates a new MediaPipe WASM module. Must be called *after* wasm Module has\n     * initialized. Note that we take control of the GL canvas from here on out,\n     * and will resize it to fit input.\n     *\n     * @param module The underlying Wasm Module to use.\n     * @param glCanvas The type of the GL canvas to use, or `null` if no GL\n     *    canvas should be initialzed. Initializes an offscreen canvas if not\n     *    provided.\n     */\n    constructor(module, glCanvas) {\n        this.autoResizeCanvas = true;\n        this.wasmModule = module;\n        this.audioPtr = null;\n        this.audioSize = 0;\n        this.hasMultiStreamSupport =\n            (typeof this.wasmModule._addIntToInputStream === 'function');\n        if (glCanvas !== undefined) {\n            this.wasmModule.canvas = glCanvas;\n        }\n        else {\n            // If no canvas is provided, assume Chrome/Firefox and just make an\n            // OffscreenCanvas for GPU processing.\n            this.wasmModule.canvas = new OffscreenCanvas(1, 1);\n        }\n    }\n    /**\n     * Convenience helper to load a MediaPipe graph from a file and pass it to\n     * setGraph.\n     * @param graphFile The url of the MediaPipe graph file to load.\n     */\n    async initializeGraph(graphFile) {\n        // Fetch and set graph\n        const response = await fetch(graphFile);\n        const graphData = await response.arrayBuffer();\n        const isBinary = !(graphFile.endsWith('.pbtxt') || graphFile.endsWith('.textproto'));\n        this.setGraph(new Uint8Array(graphData), isBinary);\n    }\n    /**\n     * Convenience helper for calling setGraph with a string representing a text\n     * proto config.\n     * @param graphConfig The text proto graph config, expected to be a string in\n     * default JavaScript UTF-16 format.\n     */\n    setGraphFromString(graphConfig) {\n        this.setGraph((new TextEncoder()).encode(graphConfig), false);\n    }\n    /**\n     * Takes the raw data from a MediaPipe graph, and passes it to C++ to be run\n     * over the video stream. Will replace the previously running MediaPipe graph,\n     * if there is one.\n     * @param graphData The raw MediaPipe graph data, either in binary\n     *     protobuffer format (.binarypb), or else in raw text format (.pbtxt or\n     *     .textproto).\n     * @param isBinary This should be set to true if the graph is in\n     *     binary format, and false if it is in human-readable text format.\n     */\n    setGraph(graphData, isBinary) {\n        const size = graphData.length;\n        const dataPtr = this.wasmModule._malloc(size);\n        this.wasmModule.HEAPU8.set(graphData, dataPtr);\n        if (isBinary) {\n            this.wasmModule._changeBinaryGraph(size, dataPtr);\n        }\n        else {\n            this.wasmModule._changeTextGraph(size, dataPtr);\n        }\n        this.wasmModule._free(dataPtr);\n    }\n    /**\n     * Configures the current graph to handle audio in a certain way. Must be\n     * called before the graph is set/started in order to use processAudio.\n     * @param numChannels The number of channels of audio input. Only 1\n     *     is supported for now.\n     * @param numSamples The number of samples that are taken in each\n     *     audio capture.\n     * @param sampleRate The rate, in Hz, of the sampling.\n     */\n    configureAudio(numChannels, numSamples, sampleRate) {\n        this.wasmModule._configureAudio(numChannels, numSamples, sampleRate);\n        if (this.wasmModule._attachAudioOutputListener) {\n            this.wasmModule._attachAudioOutputListener();\n        }\n    }\n    /**\n     * Allows disabling automatic canvas resizing, in case clients want to control\n     * control this.\n     * @param resize True will re-enable automatic canvas resizing, while false\n     *     will disable the feature.\n     */\n    setAutoResizeCanvas(resize) {\n        this.autoResizeCanvas = resize;\n    }\n    /**\n     * Allows disabling the automatic render-to-screen code, in case clients don't\n     * need/want this. In particular, this removes the requirement for pipelines\n     * to have access to GPU resources, as well as the requirement for graphs to\n     * have \"input_frames_gpu\" and \"output_frames_gpu\" streams defined, so pure\n     * CPU pipelines and non-video pipelines can be created.\n     * NOTE: This only affects future graph initializations (via setGraph or\n     *     initializeGraph), and does NOT affect the currently running graph, so\n     *     calls to this should be made *before* setGraph/initializeGraph for the\n     *     graph file being targeted.\n     * @param enabled True will re-enable automatic render-to-screen code and\n     *     cause GPU resources to once again be requested, while false will\n     *     disable the feature.\n     */\n    setAutoRenderToScreen(enabled) {\n        this.wasmModule._setAutoRenderToScreen(enabled);\n    }\n    /**\n     * Bind texture to our internal canvas, and upload image source to GPU.\n     * Returns tuple [width, height] of texture.  Intended for internal usage.\n     */\n    bindTextureToStream(imageSource, streamNamePtr) {\n        if (!this.wasmModule.canvas) {\n            throw new Error('No OpenGL canvas configured.');\n        }\n        if (!streamNamePtr) {\n            // TODO: Remove this path once completely refactored away.\n            console.assert(this.wasmModule._bindTextureToCanvas());\n        }\n        else {\n            this.wasmModule._bindTextureToStream(streamNamePtr);\n        }\n        const gl = this.wasmModule.canvas.getContext('webgl2') ||\n            this.wasmModule.canvas.getContext('webgl');\n        console.assert(gl);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, imageSource);\n        let width, height;\n        if (imageSource.videoWidth) {\n            width = imageSource.videoWidth;\n            height = imageSource.videoHeight;\n        }\n        else {\n            width = imageSource.width;\n            height = imageSource.height;\n        }\n        if (this.autoResizeCanvas &&\n            (width !== this.wasmModule.canvas.width ||\n                height !== this.wasmModule.canvas.height)) {\n            this.wasmModule.canvas.width = width;\n            this.wasmModule.canvas.height = height;\n        }\n        return [width, height];\n    }\n    /**\n     * Takes the raw data from a JS image source, and sends it to C++ to be\n     * processed, waiting synchronously for the response. Note that we will resize\n     * our GL canvas to fit the input, so input size should only change\n     * infrequently.\n     * @param imageSource An image source to process.\n     * @param timestamp The timestamp of the current frame, in ms.\n     * @return texture? The WebGL texture reference, if one was produced.\n     */\n    processGl(imageSource, timestamp) {\n        // Bind to default input stream\n        const [width, height] = this.bindTextureToStream(imageSource);\n        // 2 ints and a ll (timestamp)\n        const frameDataPtr = this.wasmModule._malloc(16);\n        this.wasmModule.HEAPU32[frameDataPtr / 4] = width;\n        this.wasmModule.HEAPU32[(frameDataPtr / 4) + 1] = height;\n        this.wasmModule.HEAPF64[(frameDataPtr / 8) + 1] = timestamp;\n        // outputPtr points in HEAPF32-space to running mspf calculations, which we\n        // don't use at the moment.\n        // tslint:disable-next-line:no-unused-variable\n        this.wasmModule._processGl(frameDataPtr) / 4;\n        this.wasmModule._free(frameDataPtr);\n        // TODO: Hook up WebGLTexture output, when given.\n        // TODO: Allow user to toggle whether or not to render output into canvas.\n        return undefined;\n    }\n    /**\n     * Converts JavaScript string input parameters into C++ c-string pointers.\n     * See b/204830158 for more details. Intended for internal usage.\n     */\n    wrapStringPtr(stringData, stringPtrFunc) {\n        if (!this.hasMultiStreamSupport) {\n            console.error('No wasm multistream support detected: ensure dependency ' +\n                'inclusion of :gl_graph_runner_internal_multi_input target');\n        }\n        const stringDataPtr = this.wasmModule.stringToNewUTF8(stringData);\n        stringPtrFunc(stringDataPtr);\n        this.wasmModule._free(stringDataPtr);\n    }\n    /**\n     * Converts JavaScript string input parameters into C++ c-string pointers.\n     * See b/204830158 for more details.\n     */\n    wrapStringPtrPtr(stringData, ptrFunc) {\n        if (!this.hasMultiStreamSupport) {\n            console.error('No wasm multistream support detected: ensure dependency ' +\n                'inclusion of :gl_graph_runner_internal_multi_input target');\n        }\n        const uint32Array = new Uint32Array(stringData.length);\n        for (let i = 0; i < stringData.length; i++) {\n            uint32Array[i] = this.wasmModule.stringToNewUTF8(stringData[i]);\n        }\n        const heapSpace = this.wasmModule._malloc(uint32Array.length * 4);\n        this.wasmModule.HEAPU32.set(uint32Array, heapSpace >> 2);\n        ptrFunc(heapSpace);\n        for (const uint32ptr of uint32Array) {\n            this.wasmModule._free(uint32ptr);\n        }\n        this.wasmModule._free(heapSpace);\n    }\n    /**\n     * Ensures existence of the simple listeners table and registers the callback.\n     * Intended for internal usage.\n     */\n    setListener(outputStreamName, callbackFcn) {\n        this.wasmModule.simpleListeners = this.wasmModule.simpleListeners || {};\n        this.wasmModule.simpleListeners[outputStreamName] =\n            callbackFcn;\n    }\n    /**\n     * Ensures existence of the vector listeners table and registers the callback.\n     * Intended for internal usage.\n     */\n    setVectorListener(outputStreamName, callbackFcn) {\n        const buffer = [];\n        this.wasmModule.vectorListeners = this.wasmModule.vectorListeners || {};\n        this.wasmModule.vectorListeners[outputStreamName] =\n            (data, index, length) => {\n                // The Wasm listener gets invoked once for each element. Once we\n                // receive all elements, we invoke the registered callback with the\n                // full array.\n                buffer[index] = data;\n                if (index === length - 1) {\n                    // Invoke the user callback directly, as the Wasm layer may clean up\n                    // the underlying data elements once we leave the scope of the\n                    // listener.\n                    callbackFcn(buffer);\n                }\n            };\n    }\n    /**\n     * Attaches a listener that will be invoked when the MediaPipe framework\n     * returns an error.\n     */\n    attachErrorListener(callbackFcn) {\n        this.wasmModule.errorListener = callbackFcn;\n    }\n    /**\n     * Takes the raw data from a JS audio capture array, and sends it to C++ to be\n     * processed.\n     * @param audioData An array of raw audio capture data, like\n     *     from a call to getChannelData on an AudioBuffer.\n     * @param timestamp The timestamp of the current frame, in ms.\n     */\n    addAudioToStream(audioData, timestamp) {\n        // 4 bytes for each F32\n        const size = audioData.length * 4;\n        if (this.audioSize !== size) {\n            if (this.audioPtr) {\n                this.wasmModule._free(this.audioPtr);\n            }\n            this.audioPtr = this.wasmModule._malloc(size);\n            this.audioSize = size;\n        }\n        this.wasmModule.HEAPF32.set(audioData, this.audioPtr / 4);\n        this.wasmModule._processAudio(this.audioPtr, timestamp);\n    }\n    /**\n     * Takes the relevant information from the HTML video or image element, and\n     * passes it into the WebGL-based graph for processing on the given stream at\n     * the given timestamp. Can be used for additional auxiliary GpuBuffer input\n     * streams. Processing will not occur until a blocking call (like\n     * processVideoGl or finishProcessing) is made. For use with\n     * 'gl_graph_runner_internal_multi_input'.\n     * @param imageSource Reference to the video frame we wish to add into our\n     *     graph.\n     * @param streamName The name of the MediaPipe graph stream to add the frame\n     *     to.\n     * @param timestamp The timestamp of the input frame, in ms.\n     */\n    addGpuBufferToStream(imageSource, streamName, timestamp) {\n        this.wrapStringPtr(streamName, (streamNamePtr) => {\n            const [width, height] = this.bindTextureToStream(imageSource, streamNamePtr);\n            this.wasmModule._addBoundTextureToStream(streamNamePtr, width, height, timestamp);\n        });\n    }\n    /**\n     * Sends a boolean packet into the specified stream at the given timestamp.\n     * @param data The boolean data to send.\n     * @param streamName The name of the graph input stream to send data into.\n     * @param timestamp The timestamp of the input data, in ms.\n     */\n    addBoolToStream(data, streamName, timestamp) {\n        this.wrapStringPtr(streamName, (streamNamePtr) => {\n            this.wasmModule._addBoolToInputStream(data, streamNamePtr, timestamp);\n        });\n    }\n    /**\n     * Sends a double packet into the specified stream at the given timestamp.\n     * @param data The double data to send.\n     * @param streamName The name of the graph input stream to send data into.\n     * @param timestamp The timestamp of the input data, in ms.\n     */\n    addDoubleToStream(data, streamName, timestamp) {\n        this.wrapStringPtr(streamName, (streamNamePtr) => {\n            this.wasmModule._addDoubleToInputStream(data, streamNamePtr, timestamp);\n        });\n    }\n    /**\n     * Sends a float packet into the specified stream at the given timestamp.\n     * @param data The float data to send.\n     * @param streamName The name of the graph input stream to send data into.\n     * @param timestamp The timestamp of the input data, in ms.\n     */\n    addFloatToStream(data, streamName, timestamp) {\n        this.wrapStringPtr(streamName, (streamNamePtr) => {\n            // NOTE: _addFloatToStream and _addIntToStream are reserved for JS\n            // Calculators currently; we may want to revisit this naming scheme in the\n            // future.\n            this.wasmModule._addFloatToInputStream(data, streamNamePtr, timestamp);\n        });\n    }\n    /**\n     * Sends an integer packet into the specified stream at the given timestamp.\n     * @param data The integer data to send.\n     * @param streamName The name of the graph input stream to send data into.\n     * @param timestamp The timestamp of the input data, in ms.\n     */\n    addIntToStream(data, streamName, timestamp) {\n        this.wrapStringPtr(streamName, (streamNamePtr) => {\n            this.wasmModule._addIntToInputStream(data, streamNamePtr, timestamp);\n        });\n    }\n    /**\n     * Sends a string packet into the specified stream at the given timestamp.\n     * @param data The string data to send.\n     * @param streamName The name of the graph input stream to send data into.\n     * @param timestamp The timestamp of the input data, in ms.\n     */\n    addStringToStream(data, streamName, timestamp) {\n        this.wrapStringPtr(streamName, (streamNamePtr) => {\n            this.wrapStringPtr(data, (dataPtr) => {\n                this.wasmModule._addStringToInputStream(dataPtr, streamNamePtr, timestamp);\n            });\n        });\n    }\n    /**\n     * Sends a Record<string, string> packet into the specified stream at the\n     * given timestamp.\n     * @param data The records to send (will become a\n     *             std::flat_hash_map<std::string, std::string).\n     * @param streamName The name of the graph input stream to send data into.\n     * @param timestamp The timestamp of the input data, in ms.\n     */\n    addStringRecordToStream(data, streamName, timestamp) {\n        this.wrapStringPtr(streamName, (streamNamePtr) => {\n            this.wrapStringPtrPtr(Object.keys(data), (keyList) => {\n                this.wrapStringPtrPtr(Object.values(data), (valueList) => {\n                    this.wasmModule._addFlatHashMapToInputStream(keyList, valueList, Object.keys(data).length, streamNamePtr, timestamp);\n                });\n            });\n        });\n    }\n    /**\n     * Sends a serialized protobuffer packet into the specified stream at the\n     *     given timestamp, to be parsed into the specified protobuffer type.\n     * @param data The binary (serialized) raw protobuffer data.\n     * @param protoType The C++ namespaced type this protobuffer data corresponds\n     *     to. It will be converted to this type when output as a packet into the\n     *     graph.\n     * @param streamName The name of the graph input stream to send data into.\n     * @param timestamp The timestamp of the input data, in ms.\n     */\n    addProtoToStream(data, protoType, streamName, timestamp) {\n        this.wrapStringPtr(streamName, (streamNamePtr) => {\n            this.wrapStringPtr(protoType, (protoTypePtr) => {\n                // Deep-copy proto data into Wasm heap\n                const dataPtr = this.wasmModule._malloc(data.length);\n                // TODO: Ensure this is the fastest way to copy this data.\n                this.wasmModule.HEAPU8.set(data, dataPtr);\n                this.wasmModule._addProtoToInputStream(dataPtr, data.length, protoTypePtr, streamNamePtr, timestamp);\n                this.wasmModule._free(dataPtr);\n            });\n        });\n    }\n    /**\n     * Attaches a boolean packet to the specified input_side_packet.\n     * @param data The boolean data to send.\n     * @param sidePacketName The name of the graph input side packet to send data\n     *     into.\n     */\n    addBoolToInputSidePacket(data, sidePacketName) {\n        this.wrapStringPtr(sidePacketName, (sidePacketNamePtr) => {\n            this.wasmModule._addBoolToInputSidePacket(data, sidePacketNamePtr);\n        });\n    }\n    /**\n     * Attaches a double packet to the specified input_side_packet.\n     * @param data The double data to send.\n     * @param sidePacketName The name of the graph input side packet to send data\n     *     into.\n     */\n    addDoubleToInputSidePacket(data, sidePacketName) {\n        this.wrapStringPtr(sidePacketName, (sidePacketNamePtr) => {\n            this.wasmModule._addDoubleToInputSidePacket(data, sidePacketNamePtr);\n        });\n    }\n    /**\n     * Attaches a float packet to the specified input_side_packet.\n     * @param data The float data to send.\n     * @param sidePacketName The name of the graph input side packet to send data\n     *     into.\n     */\n    addFloatToInputSidePacket(data, sidePacketName) {\n        this.wrapStringPtr(sidePacketName, (sidePacketNamePtr) => {\n            this.wasmModule._addFloatToInputSidePacket(data, sidePacketNamePtr);\n        });\n    }\n    /**\n     * Attaches a integer packet to the specified input_side_packet.\n     * @param data The integer data to send.\n     * @param sidePacketName The name of the graph input side packet to send data\n     *     into.\n     */\n    addIntToInputSidePacket(data, sidePacketName) {\n        this.wrapStringPtr(sidePacketName, (sidePacketNamePtr) => {\n            this.wasmModule._addIntToInputSidePacket(data, sidePacketNamePtr);\n        });\n    }\n    /**\n     * Attaches a string packet to the specified input_side_packet.\n     * @param data The string data to send.\n     * @param sidePacketName The name of the graph input side packet to send data\n     *     into.\n     */\n    addStringToInputSidePacket(data, sidePacketName) {\n        this.wrapStringPtr(sidePacketName, (sidePacketNamePtr) => {\n            this.wrapStringPtr(data, (dataPtr) => {\n                this.wasmModule._addStringToInputSidePacket(dataPtr, sidePacketNamePtr);\n            });\n        });\n    }\n    /**\n     * Attaches a serialized proto packet to the specified input_side_packet.\n     * @param data The binary (serialized) raw protobuffer data.\n     * @param protoType The C++ namespaced type this protobuffer data corresponds\n     *     to. It will be converted to this type for use in the graph.\n     * @param sidePacketName The name of the graph input side packet to send data\n     *     into.\n     */\n    addProtoToInputSidePacket(data, protoType, sidePacketName) {\n        this.wrapStringPtr(sidePacketName, (sidePacketNamePtr) => {\n            this.wrapStringPtr(protoType, (protoTypePtr) => {\n                // Deep-copy proto data into Wasm heap\n                const dataPtr = this.wasmModule._malloc(data.length);\n                // TODO: Ensure this is the fastest way to copy this data.\n                this.wasmModule.HEAPU8.set(data, dataPtr);\n                this.wasmModule._addProtoToInputSidePacket(dataPtr, data.length, protoTypePtr, sidePacketNamePtr);\n                this.wasmModule._free(dataPtr);\n            });\n        });\n    }\n    /**\n     * Attaches a boolean packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab boolean\n     *     data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachBoolListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for bool packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachBoolListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches a bool[] packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab\n     *     std::vector<bool> data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachBoolVectorListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setVectorListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for std::vector<bool> packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachBoolVectorListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches an int packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab int\n     *     data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachIntListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for int packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachIntListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches an int[] packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab\n     *     std::vector<int> data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachIntVectorListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setVectorListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for std::vector<int> packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachIntVectorListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches a double packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab double\n     *     data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachDoubleListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for double packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachDoubleListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches a double[] packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab\n     *     std::vector<double> data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachDoubleVectorListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setVectorListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for std::vector<double> packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachDoubleVectorListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches a float packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab float\n     *     data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachFloatListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for float packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachFloatListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches a float[] packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab\n     *     std::vector<float> data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachFloatVectorListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setVectorListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for std::vector<float> packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachFloatVectorListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches a string packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab string\n     *     data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachStringListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for string packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachStringListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches a string[] packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab\n     *     std::vector<std::string> data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachStringVectorListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setVectorListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for std::vector<string> packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachStringVectorListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches a serialized proto packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab binary\n     *     serialized proto data from (in Uint8Array format).\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that by default the data is only guaranteed to\n     *     exist for the duration of the callback, and the callback will be called\n     *     inline, so it should not perform overly complicated (or any async)\n     *     behavior. If the proto data needs to be able to outlive the call, you\n     *     may set the optional makeDeepCopy parameter to true, or can manually\n     *     deep-copy the data yourself.\n     * @param makeDeepCopy Optional convenience parameter which, if set to true,\n     *     will override the default memory management behavior and make a deep\n     *     copy of the underlying data, rather than just returning a view into the\n     *     C++-managed memory. At the cost of a data copy, this allows the\n     *     returned data to outlive the callback lifetime (and it will be cleaned\n     *     up automatically by JS garbage collection whenever the user is finished\n     *     with it).\n     */\n    attachProtoListener(outputStreamName, callbackFcn, makeDeepCopy) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for binary serialized proto data packets on this\n        // stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachProtoListener(outputStreamNamePtr, makeDeepCopy || false);\n        });\n    }\n    /**\n     * Attaches a listener for an array of serialized proto packets to the\n     * specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab a\n     *     vector of binary serialized proto data from (in Uint8Array[] format).\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that by default the data is only guaranteed to\n     *     exist for the duration of the callback, and the callback will be called\n     *     inline, so it should not perform overly complicated (or any async)\n     *     behavior. If the proto data needs to be able to outlive the call, you\n     *     may set the optional makeDeepCopy parameter to true, or can manually\n     *     deep-copy the data yourself.\n     * @param makeDeepCopy Optional convenience parameter which, if set to true,\n     *     will override the default memory management behavior and make a deep\n     *     copy of the underlying data, rather than just returning a view into the\n     *     C++-managed memory. At the cost of a data copy, this allows the\n     *     returned data to outlive the callback lifetime (and it will be cleaned\n     *     up automatically by JS garbage collection whenever the user is finished\n     *     with it).\n     */\n    attachProtoVectorListener(outputStreamName, callbackFcn, makeDeepCopy) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setVectorListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for a vector of binary serialized proto packets\n        // on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachProtoVectorListener(outputStreamNamePtr, makeDeepCopy || false);\n        });\n    }\n    /**\n     * Sets a listener to be called back with audio output packet data, as a\n     * Float32Array, when graph has finished processing it.\n     * @param audioOutputListener The caller's listener function.\n     */\n    setOnAudioOutput(audioOutputListener) {\n        this.wasmModule.onAudioOutput = audioOutputListener;\n        if (!this.wasmModule._attachAudioOutputListener) {\n            console.warn('Attempting to use AudioOutputListener without support for ' +\n                'output audio. Is build dep \":gl_graph_runner_audio_out\" missing?');\n        }\n    }\n    /**\n     * Forces all queued-up packets to be pushed through the MediaPipe graph as\n     * far as possible, performing all processing until no more processing can be\n     * done.\n     */\n    finishProcessing() {\n        this.wasmModule._waitUntilIdle();\n    }\n}\nwasm_mediapipe_lib.WasmMediaPipeLib = WasmMediaPipeLib;\n// Quick private helper to run the given script safely\nasync function runScript(scriptUrl) {\n    if (typeof importScripts === 'function') {\n        importScripts(scriptUrl.toString());\n    }\n    else {\n        const script = document.createElement('script');\n        script.setAttribute('src', scriptUrl);\n        script.setAttribute('crossorigin', 'anonymous');\n        return new Promise((resolve) => {\n            script.addEventListener('load', () => {\n                resolve();\n            }, false);\n            script.addEventListener('error', () => {\n                resolve();\n            }, false);\n            document.body.appendChild(script);\n        });\n    }\n}\n/**\n * Global function to initialize Wasm blob and load runtime assets for a\n *     specialized MediaPipe library. This allows us to create a requested\n *     subclass inheriting from WasmMediaPipeLib.\n * @param constructorFcn The name of the class to instantiate via \"new\".\n * @param wasmLoaderScript Url for the wasm-runner script; produced by the build\n *     process.\n * @param assetLoaderScript Url for the asset-loading script; produced by the\n *     build process.\n * @param fileLocator A function to override the file locations for assets\n *     loaded by the MediaPipe library.\n * @return promise A promise which will resolve when initialization has\n *     completed successfully.\n */\nasync function createMediaPipeLib(constructorFcn, wasmLoaderScript, assetLoaderScript, glCanvas, fileLocator) {\n    const scripts = [];\n    // Run wasm-loader script here\n    if (wasmLoaderScript) {\n        scripts.push(wasmLoaderScript);\n    }\n    // Run asset-loader script here\n    if (assetLoaderScript) {\n        scripts.push(assetLoaderScript);\n    }\n    // Load scripts in parallel, browser will execute them in sequence.\n    if (scripts.length) {\n        await Promise.all(scripts.map(runScript));\n    }\n    if (!self.ModuleFactory) {\n        throw new Error('ModuleFactory not set.');\n    }\n    // TODO: Ensure that fileLocator is passed in by all users\n    // and make it required\n    const module = await self.ModuleFactory(fileLocator || self.Module);\n    // Don't reuse factory or module seed\n    self.ModuleFactory = self.Module = undefined;\n    return new constructorFcn(module, glCanvas);\n}\nwasm_mediapipe_lib.createMediaPipeLib = createMediaPipeLib;\n/**\n * Global function to initialize Wasm blob and load runtime assets for a generic\n *     MediaPipe library.\n * @param wasmLoaderScript Url for the wasm-runner script; produced by the build\n *     process.\n * @param assetLoaderScript Url for the asset-loading script; produced by the\n *     build process.\n * @param fileLocator A function to override the file locations for assets\n *     loaded by the MediaPipe library.\n * @return promise A promise which will resolve when initialization has\n *     completed successfully.\n */\nasync function createWasmMediaPipeLib(wasmLoaderScript, assetLoaderScript, glCanvas, fileLocator) {\n    return createMediaPipeLib(WasmMediaPipeLib, wasmLoaderScript, assetLoaderScript, glCanvas, fileLocator);\n}\nwasm_mediapipe_lib.createWasmMediaPipeLib = createWasmMediaPipeLib;\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(task_runner, \"__esModule\", { value: true });\ntask_runner.TaskRunner = void 0;\nconst register_model_resources_graph_service_1 = register_model_resources_graph_service;\nconst wasm_mediapipe_image_lib_1 = wasm_mediapipe_image_lib;\nconst wasm_mediapipe_lib_1$3 = wasm_mediapipe_lib;\n// tslint:disable-next-line:enforce-name-casing\nconst WasmMediaPipeImageLib = (0, register_model_resources_graph_service_1.SupportModelResourcesGraphService)((0, wasm_mediapipe_image_lib_1.SupportImage)(wasm_mediapipe_lib_1$3.WasmMediaPipeLib));\n/** Base class for all MediaPipe Tasks. */\nclass TaskRunner extends WasmMediaPipeImageLib {\n    constructor(wasmModule) {\n        super(wasmModule);\n        this.processingErrors = [];\n        // Disables the automatic render-to-screen code, which allows for pure\n        // CPU processing.\n        this.setAutoRenderToScreen(false);\n        // Enables use of our model resource caching graph service.\n        this.registerModelResourcesGraphService();\n    }\n    /**\n     * Takes the raw data from a MediaPipe graph, and passes it to C++ to be run\n     * over the video stream. Will replace the previously running MediaPipe graph,\n     * if there is one.\n     * @param graphData The raw MediaPipe graph data, either in binary\n     *     protobuffer format (.binarypb), or else in raw text format (.pbtxt or\n     *     .textproto).\n     * @param isBinary This should be set to true if the graph is in\n     *     binary format, and false if it is in human-readable text format.\n     */\n    setGraph(graphData, isBinary) {\n        this.attachErrorListener((code, message) => {\n            this.processingErrors.push(new Error(message));\n        });\n        super.setGraph(graphData, isBinary);\n        this.handleErrors();\n    }\n    /**\n     * Forces all queued-up packets to be pushed through the MediaPipe graph as\n     * far as possible, performing all processing until no more processing can be\n     * done.\n     */\n    finishProcessing() {\n        super.finishProcessing();\n        this.handleErrors();\n    }\n    /** Throws the error from the error listener if an error was raised. */\n    handleErrors() {\n        const errorCount = this.processingErrors.length;\n        if (errorCount === 1) {\n            // Re-throw error to get a more meaningful stacktrace\n            throw new Error(this.processingErrors[0].message);\n        }\n        else if (errorCount > 1) {\n            throw new Error('Encountered multiple errors: ' +\n                this.processingErrors.map(e => e.message).join(', '));\n        }\n        this.processingErrors = [];\n    }\n}\ntask_runner.TaskRunner = TaskRunner;\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(image_classifier, \"__esModule\", { value: true });\nimage_classifier.ImageClassifier = void 0;\nconst calculator_pb_1$2 = calculator_pb;\nconst calculator_options_pb_1$2 = calculator_options_pb;\nconst classifications_pb_1 = classifications_pb;\nconst image_classifier_graph_options_pb_1 = image_classifier_graph_options_pb;\nconst base_options_1$2 = base_options;\nconst classifier_options_1$1 = classifier_options;\nconst classifier_result_1 = classifier_result;\nconst task_runner_1$2 = task_runner;\nconst wasm_mediapipe_lib_1$2 = wasm_mediapipe_lib;\nconst IMAGE_CLASSIFIER_GRAPH = 'mediapipe.tasks.vision.image_classifier.ImageClassifierGraph';\nconst INPUT_STREAM$1 = 'input_image';\nconst CLASSIFICATIONS_STREAM = 'classifications';\n// The OSS JS API does not support the builder pattern.\n// tslint:disable:jspb-use-builder-pattern\n/** Performs classification on images. */\nclass ImageClassifier extends task_runner_1$2.TaskRunner {\n    constructor() {\n        super(...arguments);\n        this.classificationResult = { classifications: [] };\n        this.options = new image_classifier_graph_options_pb_1.ImageClassifierGraphOptions();\n    }\n    /**\n     * Initializes the Wasm runtime and creates a new image classifier from the\n     * provided options.\n     * @param wasmLoaderOptions A configuration object that provides the location\n     *     of the Wasm binary and its loader.\n     * @param imageClassifierOptions The options for the image classifier. Note\n     *     that either a path to the model asset or a model buffer needs to be\n     *     provided (via `baseOptions`).\n     */\n    static async createFromOptions(wasmLoaderOptions, imageClassifierOptions) {\n        // Create a file locator based on the loader options\n        const fileLocator = {\n            locateFile() {\n                // The only file we load is the Wasm binary\n                return wasmLoaderOptions.wasmBinaryPath.toString();\n            }\n        };\n        const classifier = await (0, wasm_mediapipe_lib_1$2.createMediaPipeLib)(ImageClassifier, wasmLoaderOptions.wasmLoaderPath, \n        /* assetLoaderScript= */ undefined, \n        /* glCanvas= */ undefined, fileLocator);\n        await classifier.setOptions(imageClassifierOptions);\n        return classifier;\n    }\n    /**\n     * Initializes the Wasm runtime and creates a new image classifier based on\n     * the provided model asset buffer.\n     * @param wasmLoaderOptions A configuration object that provides the location\n     *     of the Wasm binary and its loader.\n     * @param modelAssetBuffer A binary representation of the model.\n     */\n    static createFromModelBuffer(wasmLoaderOptions, modelAssetBuffer) {\n        return ImageClassifier.createFromOptions(wasmLoaderOptions, { baseOptions: { modelAssetBuffer } });\n    }\n    /**\n     * Initializes the Wasm runtime and creates a new image classifier based on\n     * the path to the model asset.\n     * @param wasmLoaderOptions A configuration object that provides the location\n     *     of the Wasm binary and its loader.\n     * @param modelAssetPath The path to the model asset.\n     */\n    static async createFromModelPath(wasmLoaderOptions, modelAssetPath) {\n        const response = await fetch(modelAssetPath.toString());\n        const graphData = await response.arrayBuffer();\n        return ImageClassifier.createFromModelBuffer(wasmLoaderOptions, new Uint8Array(graphData));\n    }\n    /**\n     * Sets new options for the image classifier.\n     *\n     * Calling `setOptions()` with a subset of options only affects those options.\n     * You can reset an option back to its default value by explicitly setting it\n     * to `undefined`.\n     *\n     * @param options The options for the image classifier.\n     */\n    async setOptions(options) {\n        if (options.baseOptions) {\n            const baseOptionsProto = await (0, base_options_1$2.convertBaseOptionsToProto)(options.baseOptions, this.options.getBaseOptions());\n            this.options.setBaseOptions(baseOptionsProto);\n        }\n        this.options.setClassifierOptions((0, classifier_options_1$1.convertClassifierOptionsToProto)(options, this.options.getClassifierOptions()));\n        this.refreshGraph();\n    }\n    /**\n     * Performs image classification on the provided image and waits synchronously\n     * for the response.\n     *\n     * @param imageSource An image source to process.\n     * @param timestamp The timestamp of the current frame, in ms. If not\n     *     provided, defaults to `performance.now()`.\n     * @return The classification result of the image\n     */\n    classify(imageSource, timestamp) {\n        // Get classification result by running our MediaPipe graph.\n        this.classificationResult = { classifications: [] };\n        this.addGpuBufferAsImageToStream(imageSource, INPUT_STREAM$1, timestamp !== null && timestamp !== void 0 ? timestamp : performance.now());\n        this.finishProcessing();\n        return this.classificationResult;\n    }\n    /** Updates the MediaPipe graph configuration. */\n    refreshGraph() {\n        const graphConfig = new calculator_pb_1$2.CalculatorGraphConfig();\n        graphConfig.addInputStream(INPUT_STREAM$1);\n        graphConfig.addOutputStream(CLASSIFICATIONS_STREAM);\n        const calculatorOptions = new calculator_options_pb_1$2.CalculatorOptions();\n        calculatorOptions.setExtension(image_classifier_graph_options_pb_1.ImageClassifierGraphOptions.ext, this.options);\n        // Perform image classification. Pre-processing and results post-processing\n        // are built-in.\n        const classifierNode = new calculator_pb_1$2.CalculatorGraphConfig.Node();\n        classifierNode.setCalculator(IMAGE_CLASSIFIER_GRAPH);\n        classifierNode.addInputStream('IMAGE:' + INPUT_STREAM$1);\n        classifierNode.addOutputStream('CLASSIFICATIONS:' + CLASSIFICATIONS_STREAM);\n        classifierNode.setOptions(calculatorOptions);\n        graphConfig.addNode(classifierNode);\n        this.attachProtoListener(CLASSIFICATIONS_STREAM, binaryProto => {\n            this.classificationResult = (0, classifier_result_1.convertFromClassificationResultProto)(classifications_pb_1.ClassificationResult.deserializeBinary(binaryProto));\n        });\n        const binaryGraph = graphConfig.serializeBinary();\n        this.setGraph(new Uint8Array(binaryGraph), /* isBinary= */ true);\n    }\n}\nimage_classifier.ImageClassifier = ImageClassifier;\n\nvar gesture_recognizer_options = {};\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(gesture_recognizer_options, \"__esModule\", { value: true });\n\nvar gesture_recognizer_result = {};\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(gesture_recognizer_result, \"__esModule\", { value: true });\n\nvar gesture_recognizer = {};\n\nvar landmark_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/framework/formats/landmark.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.Landmark', null, global);\n\tgoog.exportSymbol('proto.mediapipe.LandmarkList', null, global);\n\tgoog.exportSymbol('proto.mediapipe.LandmarkListCollection', null, global);\n\tgoog.exportSymbol('proto.mediapipe.NormalizedLandmark', null, global);\n\tgoog.exportSymbol('proto.mediapipe.NormalizedLandmarkList', null, global);\n\tgoog.exportSymbol('proto.mediapipe.NormalizedLandmarkListCollection', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.Landmark = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.Landmark, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.Landmark.displayName = 'proto.mediapipe.Landmark';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.LandmarkList = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.LandmarkList.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.LandmarkList, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.LandmarkList.displayName = 'proto.mediapipe.LandmarkList';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.LandmarkListCollection = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.LandmarkListCollection.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.LandmarkListCollection, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.LandmarkListCollection.displayName = 'proto.mediapipe.LandmarkListCollection';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.NormalizedLandmark = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.NormalizedLandmark, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.NormalizedLandmark.displayName = 'proto.mediapipe.NormalizedLandmark';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.NormalizedLandmarkList = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.NormalizedLandmarkList.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.NormalizedLandmarkList, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.NormalizedLandmarkList.displayName = 'proto.mediapipe.NormalizedLandmarkList';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.NormalizedLandmarkListCollection.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.NormalizedLandmarkListCollection, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.NormalizedLandmarkListCollection.displayName = 'proto.mediapipe.NormalizedLandmarkListCollection';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.Landmark.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.Landmark.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.Landmark} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Landmark.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,\n\t    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,\n\t    z: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,\n\t    visibility: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,\n\t    presence: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.Landmark}\n\t */\n\tproto.mediapipe.Landmark.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.Landmark;\n\t  return proto.mediapipe.Landmark.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.Landmark} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.Landmark}\n\t */\n\tproto.mediapipe.Landmark.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setX(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setY(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setZ(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setVisibility(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setPresence(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.Landmark.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.Landmark.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.Landmark} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Landmark.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 5));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional float x = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Landmark.prototype.getX = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.setX = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.clearX = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Landmark.prototype.hasX = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional float y = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Landmark.prototype.getY = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.setY = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.clearY = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Landmark.prototype.hasY = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional float z = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Landmark.prototype.getZ = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.setZ = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.clearZ = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Landmark.prototype.hasZ = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional float visibility = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Landmark.prototype.getVisibility = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.setVisibility = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.clearVisibility = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Landmark.prototype.hasVisibility = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * optional float presence = 5;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Landmark.prototype.getPresence = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.setPresence = function(value) {\n\t  return jspb.Message.setField(this, 5, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.clearPresence = function() {\n\t  return jspb.Message.setField(this, 5, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Landmark.prototype.hasPresence = function() {\n\t  return jspb.Message.getField(this, 5) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.LandmarkList.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.LandmarkList.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.LandmarkList.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.LandmarkList} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LandmarkList.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    landmarkList: jspb.Message.toObjectList(msg.getLandmarkList(),\n\t    proto.mediapipe.Landmark.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.LandmarkList}\n\t */\n\tproto.mediapipe.LandmarkList.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.LandmarkList;\n\t  return proto.mediapipe.LandmarkList.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.LandmarkList} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.LandmarkList}\n\t */\n\tproto.mediapipe.LandmarkList.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.Landmark;\n\t      reader.readMessage(value,proto.mediapipe.Landmark.deserializeBinaryFromReader);\n\t      msg.addLandmark(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.LandmarkList.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.LandmarkList.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.LandmarkList} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LandmarkList.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getLandmarkList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.Landmark.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated Landmark landmark = 1;\n\t * @return {!Array<!proto.mediapipe.Landmark>}\n\t */\n\tproto.mediapipe.LandmarkList.prototype.getLandmarkList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.Landmark>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.Landmark, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.Landmark>} value\n\t * @return {!proto.mediapipe.LandmarkList} returns this\n\t*/\n\tproto.mediapipe.LandmarkList.prototype.setLandmarkList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.Landmark=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.Landmark}\n\t */\n\tproto.mediapipe.LandmarkList.prototype.addLandmark = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.Landmark, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.LandmarkList} returns this\n\t */\n\tproto.mediapipe.LandmarkList.prototype.clearLandmarkList = function() {\n\t  return this.setLandmarkList([]);\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.LandmarkListCollection.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.LandmarkListCollection.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.LandmarkListCollection.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.LandmarkListCollection} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LandmarkListCollection.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    landmarkListList: jspb.Message.toObjectList(msg.getLandmarkListList(),\n\t    proto.mediapipe.LandmarkList.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.LandmarkListCollection}\n\t */\n\tproto.mediapipe.LandmarkListCollection.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.LandmarkListCollection;\n\t  return proto.mediapipe.LandmarkListCollection.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.LandmarkListCollection} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.LandmarkListCollection}\n\t */\n\tproto.mediapipe.LandmarkListCollection.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.LandmarkList;\n\t      reader.readMessage(value,proto.mediapipe.LandmarkList.deserializeBinaryFromReader);\n\t      msg.addLandmarkList(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.LandmarkListCollection.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.LandmarkListCollection.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.LandmarkListCollection} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LandmarkListCollection.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getLandmarkListList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.LandmarkList.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated LandmarkList landmark_list = 1;\n\t * @return {!Array<!proto.mediapipe.LandmarkList>}\n\t */\n\tproto.mediapipe.LandmarkListCollection.prototype.getLandmarkListList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.LandmarkList>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.LandmarkList, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.LandmarkList>} value\n\t * @return {!proto.mediapipe.LandmarkListCollection} returns this\n\t*/\n\tproto.mediapipe.LandmarkListCollection.prototype.setLandmarkListList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.LandmarkList=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.LandmarkList}\n\t */\n\tproto.mediapipe.LandmarkListCollection.prototype.addLandmarkList = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.LandmarkList, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.LandmarkListCollection} returns this\n\t */\n\tproto.mediapipe.LandmarkListCollection.prototype.clearLandmarkListList = function() {\n\t  return this.setLandmarkListList([]);\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.NormalizedLandmark.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.NormalizedLandmark} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.NormalizedLandmark.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,\n\t    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,\n\t    z: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,\n\t    visibility: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,\n\t    presence: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.NormalizedLandmark}\n\t */\n\tproto.mediapipe.NormalizedLandmark.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.NormalizedLandmark;\n\t  return proto.mediapipe.NormalizedLandmark.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.NormalizedLandmark} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.NormalizedLandmark}\n\t */\n\tproto.mediapipe.NormalizedLandmark.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setX(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setY(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setZ(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setVisibility(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setPresence(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.NormalizedLandmark.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.NormalizedLandmark} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.NormalizedLandmark.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 5));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional float x = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.getX = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.setX = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.clearX = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.hasX = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional float y = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.getY = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.setY = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.clearY = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.hasY = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional float z = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.getZ = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.setZ = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.clearZ = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.hasZ = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional float visibility = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.getVisibility = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.setVisibility = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.clearVisibility = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.hasVisibility = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * optional float presence = 5;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.getPresence = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.setPresence = function(value) {\n\t  return jspb.Message.setField(this, 5, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.clearPresence = function() {\n\t  return jspb.Message.setField(this, 5, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.hasPresence = function() {\n\t  return jspb.Message.getField(this, 5) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.NormalizedLandmarkList.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.NormalizedLandmarkList} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    landmarkList: jspb.Message.toObjectList(msg.getLandmarkList(),\n\t    proto.mediapipe.NormalizedLandmark.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.NormalizedLandmarkList}\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.NormalizedLandmarkList;\n\t  return proto.mediapipe.NormalizedLandmarkList.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.NormalizedLandmarkList} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.NormalizedLandmarkList}\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.NormalizedLandmark;\n\t      reader.readMessage(value,proto.mediapipe.NormalizedLandmark.deserializeBinaryFromReader);\n\t      msg.addLandmark(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.NormalizedLandmarkList.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.NormalizedLandmarkList} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getLandmarkList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.NormalizedLandmark.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated NormalizedLandmark landmark = 1;\n\t * @return {!Array<!proto.mediapipe.NormalizedLandmark>}\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.prototype.getLandmarkList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.NormalizedLandmark>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.NormalizedLandmark, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.NormalizedLandmark>} value\n\t * @return {!proto.mediapipe.NormalizedLandmarkList} returns this\n\t*/\n\tproto.mediapipe.NormalizedLandmarkList.prototype.setLandmarkList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.NormalizedLandmark=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.NormalizedLandmark}\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.prototype.addLandmark = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.NormalizedLandmark, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.NormalizedLandmarkList} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.prototype.clearLandmarkList = function() {\n\t  return this.setLandmarkList([]);\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.NormalizedLandmarkListCollection.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.NormalizedLandmarkListCollection} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    landmarkListList: jspb.Message.toObjectList(msg.getLandmarkListList(),\n\t    proto.mediapipe.NormalizedLandmarkList.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.NormalizedLandmarkListCollection}\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.NormalizedLandmarkListCollection;\n\t  return proto.mediapipe.NormalizedLandmarkListCollection.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.NormalizedLandmarkListCollection} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.NormalizedLandmarkListCollection}\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.NormalizedLandmarkList;\n\t      reader.readMessage(value,proto.mediapipe.NormalizedLandmarkList.deserializeBinaryFromReader);\n\t      msg.addLandmarkList(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.NormalizedLandmarkListCollection.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.NormalizedLandmarkListCollection} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getLandmarkListList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.NormalizedLandmarkList.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated NormalizedLandmarkList landmark_list = 1;\n\t * @return {!Array<!proto.mediapipe.NormalizedLandmarkList>}\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.prototype.getLandmarkListList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.NormalizedLandmarkList>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.NormalizedLandmarkList, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.NormalizedLandmarkList>} value\n\t * @return {!proto.mediapipe.NormalizedLandmarkListCollection} returns this\n\t*/\n\tproto.mediapipe.NormalizedLandmarkListCollection.prototype.setLandmarkListList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.NormalizedLandmarkList=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.NormalizedLandmarkList}\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.prototype.addLandmarkList = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.NormalizedLandmarkList, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.NormalizedLandmarkListCollection} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.prototype.clearLandmarkListList = function() {\n\t  return this.setLandmarkListList([]);\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (landmark_pb));\n\nvar rect_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/framework/formats/rect.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.NormalizedRect', null, global);\n\tgoog.exportSymbol('proto.mediapipe.Rect', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.Rect = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.Rect, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.Rect.displayName = 'proto.mediapipe.Rect';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.NormalizedRect = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.NormalizedRect, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.NormalizedRect.displayName = 'proto.mediapipe.NormalizedRect';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.Rect.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.Rect.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.Rect} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Rect.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    xCenter: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    yCenter: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    height: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,\n\t    width: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,\n\t    rotation: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),\n\t    rectId: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.Rect}\n\t */\n\tproto.mediapipe.Rect.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.Rect;\n\t  return proto.mediapipe.Rect.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.Rect} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.Rect}\n\t */\n\tproto.mediapipe.Rect.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setXCenter(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setYCenter(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setHeight(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setWidth(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setRotation(value);\n\t      break;\n\t    case 6:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setRectId(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.Rect.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.Rect.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.Rect} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Rect.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 5));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 6));\n\t  if (f != null) {\n\t    writer.writeInt64(\n\t      6,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * required int32 x_center = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Rect.prototype.getXCenter = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.setXCenter = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.clearXCenter = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Rect.prototype.hasXCenter = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * required int32 y_center = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Rect.prototype.getYCenter = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.setYCenter = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.clearYCenter = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Rect.prototype.hasYCenter = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * required int32 height = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Rect.prototype.getHeight = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.setHeight = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.clearHeight = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Rect.prototype.hasHeight = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * required int32 width = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Rect.prototype.getWidth = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.setWidth = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.clearWidth = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Rect.prototype.hasWidth = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * optional float rotation = 5;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Rect.prototype.getRotation = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.setRotation = function(value) {\n\t  return jspb.Message.setField(this, 5, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.clearRotation = function() {\n\t  return jspb.Message.setField(this, 5, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Rect.prototype.hasRotation = function() {\n\t  return jspb.Message.getField(this, 5) != null;\n\t};\n\n\n\t/**\n\t * optional int64 rect_id = 6;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Rect.prototype.getRectId = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.setRectId = function(value) {\n\t  return jspb.Message.setField(this, 6, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.clearRectId = function() {\n\t  return jspb.Message.setField(this, 6, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Rect.prototype.hasRectId = function() {\n\t  return jspb.Message.getField(this, 6) != null;\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.NormalizedRect.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.NormalizedRect} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.NormalizedRect.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    xCenter: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,\n\t    yCenter: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,\n\t    height: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,\n\t    width: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,\n\t    rotation: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),\n\t    rectId: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.NormalizedRect}\n\t */\n\tproto.mediapipe.NormalizedRect.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.NormalizedRect;\n\t  return proto.mediapipe.NormalizedRect.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.NormalizedRect} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.NormalizedRect}\n\t */\n\tproto.mediapipe.NormalizedRect.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setXCenter(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setYCenter(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setHeight(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setWidth(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setRotation(value);\n\t      break;\n\t    case 6:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setRectId(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.NormalizedRect.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.NormalizedRect} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.NormalizedRect.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 5));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 6));\n\t  if (f != null) {\n\t    writer.writeInt64(\n\t      6,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * required float x_center = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.getXCenter = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.setXCenter = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.clearXCenter = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.hasXCenter = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * required float y_center = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.getYCenter = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.setYCenter = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.clearYCenter = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.hasYCenter = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * required float height = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.getHeight = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.setHeight = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.clearHeight = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.hasHeight = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * required float width = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.getWidth = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.setWidth = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.clearWidth = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.hasWidth = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * optional float rotation = 5;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.getRotation = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.setRotation = function(value) {\n\t  return jspb.Message.setField(this, 5, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.clearRotation = function() {\n\t  return jspb.Message.setField(this, 5, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.hasRotation = function() {\n\t  return jspb.Message.getField(this, 5) != null;\n\t};\n\n\n\t/**\n\t * optional int64 rect_id = 6;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.getRectId = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.setRectId = function(value) {\n\t  return jspb.Message.setField(this, 6, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.clearRectId = function() {\n\t  return jspb.Message.setField(this, 6, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.hasRectId = function() {\n\t  return jspb.Message.getField(this, 6) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (rect_pb));\n\nvar gesture_classifier_graph_options_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/vision/gesture_recognizer/proto/gesture_classifier_graph_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tvar mediapipe_tasks_cc_components_processors_proto_classifier_options_pb = classifier_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_components_processors_proto_classifier_options_pb);\n\tvar mediapipe_tasks_cc_core_proto_base_options_pb = base_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_base_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.displayName = 'proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    baseOptions: (f = msg.getBaseOptions()) && mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.toObject(includeInstance, f),\n\t    classifierOptions: (f = msg.getClassifierOptions()) && mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions;\n\t  return proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.deserializeBinaryFromReader);\n\t      msg.setBaseOptions(value);\n\t      break;\n\t    case 2:\n\t      var value = new mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions.deserializeBinaryFromReader);\n\t      msg.setClassifierOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getBaseOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getClassifierOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      2,\n\t      f,\n\t      mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    478825465,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[478825465] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[478825465] = proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.ext;\n\n\t/**\n\t * optional mediapipe.tasks.core.proto.BaseOptions base_options = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.getBaseOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.BaseOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.BaseOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.setBaseOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.clearBaseOptions = function() {\n\t  return this.setBaseOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.hasBaseOptions = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional mediapipe.tasks.components.processors.proto.ClassifierOptions classifier_options = 2;\n\t * @return {?proto.mediapipe.tasks.components.processors.proto.ClassifierOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.getClassifierOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions, 2));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.components.processors.proto.ClassifierOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.setClassifierOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.clearClassifierOptions = function() {\n\t  return this.setClassifierOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.hasClassifierOptions = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    478825465,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[478825465] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[478825465] = proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.vision.gesture_recognizer.proto);\n} (gesture_classifier_graph_options_pb));\n\nvar gesture_recognizer_graph_options_pb = {};\n\nvar hand_gesture_recognizer_graph_options_pb = {};\n\nvar gesture_embedder_graph_options_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/vision/gesture_recognizer/proto/gesture_embedder_graph_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tvar mediapipe_tasks_cc_core_proto_base_options_pb = base_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_base_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.displayName = 'proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    baseOptions: (f = msg.getBaseOptions()) && mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions;\n\t  return proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.deserializeBinaryFromReader);\n\t      msg.setBaseOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getBaseOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    478825422,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[478825422] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[478825422] = proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.ext;\n\n\t/**\n\t * optional mediapipe.tasks.core.proto.BaseOptions base_options = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.prototype.getBaseOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.BaseOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.BaseOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.prototype.setBaseOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.prototype.clearBaseOptions = function() {\n\t  return this.setBaseOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.prototype.hasBaseOptions = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    478825422,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[478825422] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[478825422] = proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.vision.gesture_recognizer.proto);\n} (gesture_embedder_graph_options_pb));\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/vision/gesture_recognizer/proto/hand_gesture_recognizer_graph_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tvar mediapipe_tasks_cc_core_proto_base_options_pb = base_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_base_options_pb);\n\tvar mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb = gesture_classifier_graph_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb);\n\tvar mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_embedder_graph_options_pb = gesture_embedder_graph_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_embedder_graph_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.displayName = 'proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    baseOptions: (f = msg.getBaseOptions()) && mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.toObject(includeInstance, f),\n\t    gestureEmbedderGraphOptions: (f = msg.getGestureEmbedderGraphOptions()) && mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_embedder_graph_options_pb.GestureEmbedderGraphOptions.toObject(includeInstance, f),\n\t    cannedGestureClassifierGraphOptions: (f = msg.getCannedGestureClassifierGraphOptions()) && mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions.toObject(includeInstance, f),\n\t    customGestureClassifierGraphOptions: (f = msg.getCustomGestureClassifierGraphOptions()) && mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions;\n\t  return proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.deserializeBinaryFromReader);\n\t      msg.setBaseOptions(value);\n\t      break;\n\t    case 2:\n\t      var value = new mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_embedder_graph_options_pb.GestureEmbedderGraphOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_embedder_graph_options_pb.GestureEmbedderGraphOptions.deserializeBinaryFromReader);\n\t      msg.setGestureEmbedderGraphOptions(value);\n\t      break;\n\t    case 3:\n\t      var value = new mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions.deserializeBinaryFromReader);\n\t      msg.setCannedGestureClassifierGraphOptions(value);\n\t      break;\n\t    case 4:\n\t      var value = new mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions.deserializeBinaryFromReader);\n\t      msg.setCustomGestureClassifierGraphOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getBaseOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getGestureEmbedderGraphOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      2,\n\t      f,\n\t      mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_embedder_graph_options_pb.GestureEmbedderGraphOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getCannedGestureClassifierGraphOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getCustomGestureClassifierGraphOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      4,\n\t      f,\n\t      mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    463370452,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[463370452] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[463370452] = proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.ext;\n\n\t/**\n\t * optional mediapipe.tasks.core.proto.BaseOptions base_options = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.getBaseOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.BaseOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.BaseOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.setBaseOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.clearBaseOptions = function() {\n\t  return this.setBaseOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.hasBaseOptions = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional GestureEmbedderGraphOptions gesture_embedder_graph_options = 2;\n\t * @return {?proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.getGestureEmbedderGraphOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_embedder_graph_options_pb.GestureEmbedderGraphOptions, 2));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.setGestureEmbedderGraphOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.clearGestureEmbedderGraphOptions = function() {\n\t  return this.setGestureEmbedderGraphOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.hasGestureEmbedderGraphOptions = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional GestureClassifierGraphOptions canned_gesture_classifier_graph_options = 3;\n\t * @return {?proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.getCannedGestureClassifierGraphOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.setCannedGestureClassifierGraphOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.clearCannedGestureClassifierGraphOptions = function() {\n\t  return this.setCannedGestureClassifierGraphOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.hasCannedGestureClassifierGraphOptions = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional GestureClassifierGraphOptions custom_gesture_classifier_graph_options = 4;\n\t * @return {?proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.getCustomGestureClassifierGraphOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions, 4));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.setCustomGestureClassifierGraphOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.clearCustomGestureClassifierGraphOptions = function() {\n\t  return this.setCustomGestureClassifierGraphOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.hasCustomGestureClassifierGraphOptions = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    463370452,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[463370452] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[463370452] = proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.vision.gesture_recognizer.proto);\n} (hand_gesture_recognizer_graph_options_pb));\n\nvar hand_landmarker_graph_options_pb = {};\n\nvar hand_detector_graph_options_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/vision/hand_detector/proto/hand_detector_graph_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tvar mediapipe_tasks_cc_core_proto_base_options_pb = base_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_base_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.displayName = 'proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    baseOptions: (f = msg.getBaseOptions()) && mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.toObject(includeInstance, f),\n\t    minDetectionConfidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.5),\n\t    numHands: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions;\n\t  return proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.deserializeBinaryFromReader);\n\t      msg.setBaseOptions(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setMinDetectionConfidence(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setNumHands(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getBaseOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    464864288,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[464864288] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[464864288] = proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.ext;\n\n\t/**\n\t * optional mediapipe.tasks.core.proto.BaseOptions base_options = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.getBaseOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.BaseOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.BaseOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.setBaseOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.clearBaseOptions = function() {\n\t  return this.setBaseOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.hasBaseOptions = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional float min_detection_confidence = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.getMinDetectionConfidence = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.5));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.setMinDetectionConfidence = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.clearMinDetectionConfidence = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.hasMinDetectionConfidence = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional int32 num_hands = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.getNumHands = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.setNumHands = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.clearNumHands = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.hasNumHands = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    464864288,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[464864288] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[464864288] = proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.vision.hand_detector.proto);\n} (hand_detector_graph_options_pb));\n\nvar hand_landmarks_detector_graph_options_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/vision/hand_landmarker/proto/hand_landmarks_detector_graph_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tvar mediapipe_tasks_cc_core_proto_base_options_pb = base_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_base_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.displayName = 'proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    baseOptions: (f = msg.getBaseOptions()) && mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.toObject(includeInstance, f),\n\t    minDetectionConfidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.5)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions;\n\t  return proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.deserializeBinaryFromReader);\n\t      msg.setBaseOptions(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setMinDetectionConfidence(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getBaseOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    474472470,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[474472470] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[474472470] = proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.ext;\n\n\t/**\n\t * optional mediapipe.tasks.core.proto.BaseOptions base_options = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.getBaseOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.BaseOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.BaseOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.setBaseOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.clearBaseOptions = function() {\n\t  return this.setBaseOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.hasBaseOptions = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional float min_detection_confidence = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.getMinDetectionConfidence = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.5));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.setMinDetectionConfidence = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.clearMinDetectionConfidence = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.hasMinDetectionConfidence = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    474472470,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[474472470] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[474472470] = proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.vision.hand_landmarker.proto);\n} (hand_landmarks_detector_graph_options_pb));\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/vision/hand_landmarker/proto/hand_landmarker_graph_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tvar mediapipe_tasks_cc_core_proto_base_options_pb = base_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_base_options_pb);\n\tvar mediapipe_tasks_cc_vision_hand_detector_proto_hand_detector_graph_options_pb = hand_detector_graph_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_vision_hand_detector_proto_hand_detector_graph_options_pb);\n\tvar mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarks_detector_graph_options_pb = hand_landmarks_detector_graph_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarks_detector_graph_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.displayName = 'proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    baseOptions: (f = msg.getBaseOptions()) && mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.toObject(includeInstance, f),\n\t    handDetectorGraphOptions: (f = msg.getHandDetectorGraphOptions()) && mediapipe_tasks_cc_vision_hand_detector_proto_hand_detector_graph_options_pb.HandDetectorGraphOptions.toObject(includeInstance, f),\n\t    handLandmarksDetectorGraphOptions: (f = msg.getHandLandmarksDetectorGraphOptions()) && mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarks_detector_graph_options_pb.HandLandmarksDetectorGraphOptions.toObject(includeInstance, f),\n\t    minTrackingConfidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.5)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions;\n\t  return proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.deserializeBinaryFromReader);\n\t      msg.setBaseOptions(value);\n\t      break;\n\t    case 2:\n\t      var value = new mediapipe_tasks_cc_vision_hand_detector_proto_hand_detector_graph_options_pb.HandDetectorGraphOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_vision_hand_detector_proto_hand_detector_graph_options_pb.HandDetectorGraphOptions.deserializeBinaryFromReader);\n\t      msg.setHandDetectorGraphOptions(value);\n\t      break;\n\t    case 3:\n\t      var value = new mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarks_detector_graph_options_pb.HandLandmarksDetectorGraphOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarks_detector_graph_options_pb.HandLandmarksDetectorGraphOptions.deserializeBinaryFromReader);\n\t      msg.setHandLandmarksDetectorGraphOptions(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setMinTrackingConfidence(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getBaseOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getHandDetectorGraphOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      2,\n\t      f,\n\t      mediapipe_tasks_cc_vision_hand_detector_proto_hand_detector_graph_options_pb.HandDetectorGraphOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getHandLandmarksDetectorGraphOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarks_detector_graph_options_pb.HandLandmarksDetectorGraphOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    462713202,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[462713202] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[462713202] = proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.ext;\n\n\t/**\n\t * optional mediapipe.tasks.core.proto.BaseOptions base_options = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.getBaseOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.BaseOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.BaseOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.setBaseOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.clearBaseOptions = function() {\n\t  return this.setBaseOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.hasBaseOptions = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions hand_detector_graph_options = 2;\n\t * @return {?proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.getHandDetectorGraphOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_vision_hand_detector_proto_hand_detector_graph_options_pb.HandDetectorGraphOptions, 2));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.setHandDetectorGraphOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.clearHandDetectorGraphOptions = function() {\n\t  return this.setHandDetectorGraphOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.hasHandDetectorGraphOptions = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional HandLandmarksDetectorGraphOptions hand_landmarks_detector_graph_options = 3;\n\t * @return {?proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.getHandLandmarksDetectorGraphOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarks_detector_graph_options_pb.HandLandmarksDetectorGraphOptions, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.setHandLandmarksDetectorGraphOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.clearHandLandmarksDetectorGraphOptions = function() {\n\t  return this.setHandLandmarksDetectorGraphOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.hasHandLandmarksDetectorGraphOptions = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional float min_tracking_confidence = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.getMinTrackingConfidence = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.5));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.setMinTrackingConfidence = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.clearMinTrackingConfidence = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.hasMinTrackingConfidence = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    462713202,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[462713202] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[462713202] = proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.vision.hand_landmarker.proto);\n} (hand_landmarker_graph_options_pb));\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/vision/gesture_recognizer/proto/gesture_recognizer_graph_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tvar mediapipe_tasks_cc_core_proto_base_options_pb = base_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_base_options_pb);\n\tvar mediapipe_tasks_cc_vision_gesture_recognizer_proto_hand_gesture_recognizer_graph_options_pb = hand_gesture_recognizer_graph_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_vision_gesture_recognizer_proto_hand_gesture_recognizer_graph_options_pb);\n\tvar mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarker_graph_options_pb = hand_landmarker_graph_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarker_graph_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.displayName = 'proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    baseOptions: (f = msg.getBaseOptions()) && mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.toObject(includeInstance, f),\n\t    handLandmarkerGraphOptions: (f = msg.getHandLandmarkerGraphOptions()) && mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarker_graph_options_pb.HandLandmarkerGraphOptions.toObject(includeInstance, f),\n\t    handGestureRecognizerGraphOptions: (f = msg.getHandGestureRecognizerGraphOptions()) && mediapipe_tasks_cc_vision_gesture_recognizer_proto_hand_gesture_recognizer_graph_options_pb.HandGestureRecognizerGraphOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions;\n\t  return proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.deserializeBinaryFromReader);\n\t      msg.setBaseOptions(value);\n\t      break;\n\t    case 2:\n\t      var value = new mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarker_graph_options_pb.HandLandmarkerGraphOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarker_graph_options_pb.HandLandmarkerGraphOptions.deserializeBinaryFromReader);\n\t      msg.setHandLandmarkerGraphOptions(value);\n\t      break;\n\t    case 3:\n\t      var value = new mediapipe_tasks_cc_vision_gesture_recognizer_proto_hand_gesture_recognizer_graph_options_pb.HandGestureRecognizerGraphOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_vision_gesture_recognizer_proto_hand_gesture_recognizer_graph_options_pb.HandGestureRecognizerGraphOptions.deserializeBinaryFromReader);\n\t      msg.setHandGestureRecognizerGraphOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getBaseOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getHandLandmarkerGraphOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      2,\n\t      f,\n\t      mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarker_graph_options_pb.HandLandmarkerGraphOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getHandGestureRecognizerGraphOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      mediapipe_tasks_cc_vision_gesture_recognizer_proto_hand_gesture_recognizer_graph_options_pb.HandGestureRecognizerGraphOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    479097054,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[479097054] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[479097054] = proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.ext;\n\n\t/**\n\t * optional mediapipe.tasks.core.proto.BaseOptions base_options = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.getBaseOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.BaseOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.BaseOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.setBaseOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.clearBaseOptions = function() {\n\t  return this.setBaseOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.hasBaseOptions = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions hand_landmarker_graph_options = 2;\n\t * @return {?proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.getHandLandmarkerGraphOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarker_graph_options_pb.HandLandmarkerGraphOptions, 2));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.setHandLandmarkerGraphOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.clearHandLandmarkerGraphOptions = function() {\n\t  return this.setHandLandmarkerGraphOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.hasHandLandmarkerGraphOptions = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional HandGestureRecognizerGraphOptions hand_gesture_recognizer_graph_options = 3;\n\t * @return {?proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.getHandGestureRecognizerGraphOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_vision_gesture_recognizer_proto_hand_gesture_recognizer_graph_options_pb.HandGestureRecognizerGraphOptions, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.setHandGestureRecognizerGraphOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.clearHandGestureRecognizerGraphOptions = function() {\n\t  return this.setHandGestureRecognizerGraphOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.hasHandGestureRecognizerGraphOptions = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    479097054,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[479097054] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[479097054] = proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.vision.gesture_recognizer.proto);\n} (gesture_recognizer_graph_options_pb));\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(gesture_recognizer, \"__esModule\", { value: true });\ngesture_recognizer.GestureRecognizer = void 0;\nconst calculator_pb_1$1 = calculator_pb;\nconst calculator_options_pb_1$1 = calculator_options_pb;\nconst classification_pb_1 = classification_pb;\nconst landmark_pb_1 = landmark_pb;\nconst rect_pb_1 = rect_pb;\nconst gesture_classifier_graph_options_pb_1 = gesture_classifier_graph_options_pb;\nconst gesture_recognizer_graph_options_pb_1 = gesture_recognizer_graph_options_pb;\nconst hand_gesture_recognizer_graph_options_pb_1 = hand_gesture_recognizer_graph_options_pb;\nconst hand_detector_graph_options_pb_1 = hand_detector_graph_options_pb;\nconst hand_landmarker_graph_options_pb_1 = hand_landmarker_graph_options_pb;\nconst hand_landmarks_detector_graph_options_pb_1 = hand_landmarks_detector_graph_options_pb;\nconst base_options_1$1 = base_options;\nconst classifier_options_1 = classifier_options;\nconst task_runner_1$1 = task_runner;\nconst wasm_mediapipe_lib_1$1 = wasm_mediapipe_lib;\n// The OSS JS API does not support the builder pattern.\n// tslint:disable:jspb-use-builder-pattern\nconst IMAGE_STREAM = 'image_in';\nconst NORM_RECT_STREAM = 'norm_rect';\nconst HAND_GESTURES_STREAM = 'hand_gestures';\nconst LANDMARKS_STREAM = 'hand_landmarks';\nconst WORLD_LANDMARKS_STREAM = 'world_hand_landmarks';\nconst HANDEDNESS_STREAM = 'handedness';\nconst GESTURE_RECOGNIZER_GRAPH = 'mediapipe.tasks.vision.gesture_recognizer.GestureRecognizerGraph';\nconst DEFAULT_NUM_HANDS = 1;\nconst DEFAULT_SCORE_THRESHOLD = 0.5;\nconst DEFAULT_CATEGORY_INDEX$1 = -1;\nconst FULL_IMAGE_RECT = new rect_pb_1.NormalizedRect();\nFULL_IMAGE_RECT.setXCenter(0.5);\nFULL_IMAGE_RECT.setYCenter(0.5);\nFULL_IMAGE_RECT.setWidth(1);\nFULL_IMAGE_RECT.setHeight(1);\n/** Performs hand gesture recognition on images. */\nclass GestureRecognizer extends task_runner_1$1.TaskRunner {\n    constructor(wasmModule) {\n        super(wasmModule);\n        this.gestures = [];\n        this.landmarks = [];\n        this.worldLandmarks = [];\n        this.handednesses = [];\n        this.options = new gesture_recognizer_graph_options_pb_1.GestureRecognizerGraphOptions();\n        this.handLandmarkerGraphOptions = new hand_landmarker_graph_options_pb_1.HandLandmarkerGraphOptions();\n        this.options.setHandLandmarkerGraphOptions(this.handLandmarkerGraphOptions);\n        this.handLandmarksDetectorGraphOptions =\n            new hand_landmarks_detector_graph_options_pb_1.HandLandmarksDetectorGraphOptions();\n        this.handLandmarkerGraphOptions.setHandLandmarksDetectorGraphOptions(this.handLandmarksDetectorGraphOptions);\n        this.handDetectorGraphOptions = new hand_detector_graph_options_pb_1.HandDetectorGraphOptions();\n        this.handLandmarkerGraphOptions.setHandDetectorGraphOptions(this.handDetectorGraphOptions);\n        this.handGestureRecognizerGraphOptions =\n            new hand_gesture_recognizer_graph_options_pb_1.HandGestureRecognizerGraphOptions();\n        this.options.setHandGestureRecognizerGraphOptions(this.handGestureRecognizerGraphOptions);\n        this.initDefaults();\n        // Disables the automatic render-to-screen code, which allows for pure\n        // CPU processing.\n        this.setAutoRenderToScreen(false);\n    }\n    /**\n     * Initializes the Wasm runtime and creates a new gesture recognizer from the\n     * provided options.\n     * @param wasmLoaderOptions A configuration object that provides the location\n     *     of the Wasm binary and its loader.\n     * @param gestureRecognizerOptions The options for the gesture recognizer.\n     *     Note that either a path to the model asset or a model buffer needs to\n     *     be provided (via `baseOptions`).\n     */\n    static async createFromOptions(wasmLoaderOptions, gestureRecognizerOptions) {\n        // Create a file locator based on the loader options\n        const fileLocator = {\n            locateFile() {\n                // The only file we load via this mechanism is the Wasm binary\n                return wasmLoaderOptions.wasmBinaryPath.toString();\n            }\n        };\n        const recognizer = await (0, wasm_mediapipe_lib_1$1.createMediaPipeLib)(GestureRecognizer, wasmLoaderOptions.wasmLoaderPath, \n        /* assetLoaderScript= */ undefined, \n        /* glCanvas= */ undefined, fileLocator);\n        await recognizer.setOptions(gestureRecognizerOptions);\n        return recognizer;\n    }\n    /**\n     * Initializes the Wasm runtime and creates a new gesture recognizer based on\n     * the provided model asset buffer.\n     * @param wasmLoaderOptions A configuration object that provides the location\n     *     of the Wasm binary and its loader.\n     * @param modelAssetBuffer A binary representation of the model.\n     */\n    static createFromModelBuffer(wasmLoaderOptions, modelAssetBuffer) {\n        return GestureRecognizer.createFromOptions(wasmLoaderOptions, { baseOptions: { modelAssetBuffer } });\n    }\n    /**\n     * Initializes the Wasm runtime and creates a new gesture recognizer based on\n     * the path to the model asset.\n     * @param wasmLoaderOptions A configuration object that provides the location\n     *     of the Wasm binary and its loader.\n     * @param modelAssetPath The path to the model asset.\n     */\n    static async createFromModelPath(wasmLoaderOptions, modelAssetPath) {\n        const response = await fetch(modelAssetPath.toString());\n        const graphData = await response.arrayBuffer();\n        return GestureRecognizer.createFromModelBuffer(wasmLoaderOptions, new Uint8Array(graphData));\n    }\n    /**\n     * Sets new options for the gesture recognizer.\n     *\n     * Calling `setOptions()` with a subset of options only affects those options.\n     * You can reset an option back to its default value by explicitly setting it\n     * to `undefined`.\n     *\n     * @param options The options for the gesture recognizer.\n     */\n    async setOptions(options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if (options.baseOptions) {\n            const baseOptionsProto = await (0, base_options_1$1.convertBaseOptionsToProto)(options.baseOptions, this.options.getBaseOptions());\n            this.options.setBaseOptions(baseOptionsProto);\n        }\n        if ('numHands' in options) {\n            this.handDetectorGraphOptions.setNumHands((_a = options.numHands) !== null && _a !== void 0 ? _a : DEFAULT_NUM_HANDS);\n        }\n        if ('minHandDetectionConfidence' in options) {\n            this.handDetectorGraphOptions.setMinDetectionConfidence((_b = options.minHandDetectionConfidence) !== null && _b !== void 0 ? _b : DEFAULT_SCORE_THRESHOLD);\n        }\n        if ('minHandPresenceConfidence' in options) {\n            this.handLandmarksDetectorGraphOptions.setMinDetectionConfidence((_c = options.minHandPresenceConfidence) !== null && _c !== void 0 ? _c : DEFAULT_SCORE_THRESHOLD);\n        }\n        if ('minTrackingConfidence' in options) {\n            this.handLandmarkerGraphOptions.setMinTrackingConfidence((_d = options.minTrackingConfidence) !== null && _d !== void 0 ? _d : DEFAULT_SCORE_THRESHOLD);\n        }\n        if (options.cannedGesturesClassifierOptions) {\n            // Note that we have to support both JSPB and ProtobufJS and cannot\n            // use JSPB's getMutableX() APIs.\n            const graphOptions = new gesture_classifier_graph_options_pb_1.GestureClassifierGraphOptions();\n            graphOptions.setClassifierOptions((0, classifier_options_1.convertClassifierOptionsToProto)(options.cannedGesturesClassifierOptions, (_e = this.handGestureRecognizerGraphOptions\n                .getCannedGestureClassifierGraphOptions()) === null || _e === void 0 ? void 0 : _e.getClassifierOptions()));\n            this.handGestureRecognizerGraphOptions\n                .setCannedGestureClassifierGraphOptions(graphOptions);\n        }\n        else if (options.cannedGesturesClassifierOptions === undefined) {\n            (_f = this.handGestureRecognizerGraphOptions\n                .getCannedGestureClassifierGraphOptions()) === null || _f === void 0 ? void 0 : _f.clearClassifierOptions();\n        }\n        if (options.customGesturesClassifierOptions) {\n            const graphOptions = new gesture_classifier_graph_options_pb_1.GestureClassifierGraphOptions();\n            graphOptions.setClassifierOptions((0, classifier_options_1.convertClassifierOptionsToProto)(options.customGesturesClassifierOptions, (_g = this.handGestureRecognizerGraphOptions\n                .getCustomGestureClassifierGraphOptions()) === null || _g === void 0 ? void 0 : _g.getClassifierOptions()));\n            this.handGestureRecognizerGraphOptions\n                .setCustomGestureClassifierGraphOptions(graphOptions);\n        }\n        else if (options.customGesturesClassifierOptions === undefined) {\n            (_h = this.handGestureRecognizerGraphOptions\n                .getCustomGestureClassifierGraphOptions()) === null || _h === void 0 ? void 0 : _h.clearClassifierOptions();\n        }\n        this.refreshGraph();\n    }\n    /**\n     * Performs gesture recognition on the provided single image and waits\n     * synchronously for the response.\n     * @param imageSource An image source to process.\n     * @param timestamp The timestamp of the current frame, in ms. If not\n     *    provided, defaults to `performance.now()`.\n     * @return The detected gestures.\n     */\n    recognize(imageSource, timestamp = performance.now()) {\n        this.gestures = [];\n        this.landmarks = [];\n        this.worldLandmarks = [];\n        this.handednesses = [];\n        this.addGpuBufferAsImageToStream(imageSource, IMAGE_STREAM, timestamp);\n        this.addProtoToStream(FULL_IMAGE_RECT.serializeBinary(), 'mediapipe.NormalizedRect', NORM_RECT_STREAM, timestamp);\n        this.finishProcessing();\n        return {\n            gestures: this.gestures,\n            landmarks: this.landmarks,\n            worldLandmarks: this.worldLandmarks,\n            handednesses: this.handednesses\n        };\n    }\n    /** Sets the default values for the graph. */\n    initDefaults() {\n        this.handDetectorGraphOptions.setNumHands(DEFAULT_NUM_HANDS);\n        this.handDetectorGraphOptions.setMinDetectionConfidence(DEFAULT_SCORE_THRESHOLD);\n        this.handLandmarksDetectorGraphOptions.setMinDetectionConfidence(DEFAULT_SCORE_THRESHOLD);\n        this.handLandmarkerGraphOptions.setMinTrackingConfidence(DEFAULT_SCORE_THRESHOLD);\n    }\n    /** Converts the proto data to a Category[][] structure. */\n    toJsCategories(data) {\n        var _a, _b, _c, _d;\n        const result = [];\n        for (const binaryProto of data) {\n            const inputList = classification_pb_1.ClassificationList.deserializeBinary(binaryProto);\n            const outputList = [];\n            for (const classification of inputList.getClassificationList()) {\n                outputList.push({\n                    score: (_a = classification.getScore()) !== null && _a !== void 0 ? _a : 0,\n                    index: (_b = classification.getIndex()) !== null && _b !== void 0 ? _b : DEFAULT_CATEGORY_INDEX$1,\n                    categoryName: (_c = classification.getLabel()) !== null && _c !== void 0 ? _c : '',\n                    displayName: (_d = classification.getDisplayName()) !== null && _d !== void 0 ? _d : '',\n                });\n            }\n            result.push(outputList);\n        }\n        return result;\n    }\n    /** Converts raw data into a landmark, and adds it to our landmarks list. */\n    addJsLandmarks(data) {\n        var _a, _b, _c;\n        for (const binaryProto of data) {\n            const handLandmarksProto = landmark_pb_1.NormalizedLandmarkList.deserializeBinary(binaryProto);\n            const landmarks = [];\n            for (const handLandmarkProto of handLandmarksProto.getLandmarkList()) {\n                landmarks.push({\n                    x: (_a = handLandmarkProto.getX()) !== null && _a !== void 0 ? _a : 0,\n                    y: (_b = handLandmarkProto.getY()) !== null && _b !== void 0 ? _b : 0,\n                    z: (_c = handLandmarkProto.getZ()) !== null && _c !== void 0 ? _c : 0,\n                    normalized: true\n                });\n            }\n            this.landmarks.push(landmarks);\n        }\n    }\n    /**\n     * Converts raw data into a landmark, and adds it to our worldLandmarks\n     * list.\n     */\n    adddJsWorldLandmarks(data) {\n        var _a, _b, _c;\n        for (const binaryProto of data) {\n            const handWorldLandmarksProto = landmark_pb_1.LandmarkList.deserializeBinary(binaryProto);\n            const worldLandmarks = [];\n            for (const handWorldLandmarkProto of handWorldLandmarksProto.getLandmarkList()) {\n                worldLandmarks.push({\n                    x: (_a = handWorldLandmarkProto.getX()) !== null && _a !== void 0 ? _a : 0,\n                    y: (_b = handWorldLandmarkProto.getY()) !== null && _b !== void 0 ? _b : 0,\n                    z: (_c = handWorldLandmarkProto.getZ()) !== null && _c !== void 0 ? _c : 0,\n                    normalized: false\n                });\n            }\n            this.worldLandmarks.push(worldLandmarks);\n        }\n    }\n    /** Updates the MediaPipe graph configuration. */\n    refreshGraph() {\n        const graphConfig = new calculator_pb_1$1.CalculatorGraphConfig();\n        graphConfig.addInputStream(IMAGE_STREAM);\n        graphConfig.addInputStream(NORM_RECT_STREAM);\n        graphConfig.addOutputStream(HAND_GESTURES_STREAM);\n        graphConfig.addOutputStream(LANDMARKS_STREAM);\n        graphConfig.addOutputStream(WORLD_LANDMARKS_STREAM);\n        graphConfig.addOutputStream(HANDEDNESS_STREAM);\n        const calculatorOptions = new calculator_options_pb_1$1.CalculatorOptions();\n        calculatorOptions.setExtension(gesture_recognizer_graph_options_pb_1.GestureRecognizerGraphOptions.ext, this.options);\n        const recognizerNode = new calculator_pb_1$1.CalculatorGraphConfig.Node();\n        recognizerNode.setCalculator(GESTURE_RECOGNIZER_GRAPH);\n        recognizerNode.addInputStream('IMAGE:' + IMAGE_STREAM);\n        recognizerNode.addInputStream('NORM_RECT:' + NORM_RECT_STREAM);\n        recognizerNode.addOutputStream('HAND_GESTURES:' + HAND_GESTURES_STREAM);\n        recognizerNode.addOutputStream('LANDMARKS:' + LANDMARKS_STREAM);\n        recognizerNode.addOutputStream('WORLD_LANDMARKS:' + WORLD_LANDMARKS_STREAM);\n        recognizerNode.addOutputStream('HANDEDNESS:' + HANDEDNESS_STREAM);\n        recognizerNode.setOptions(calculatorOptions);\n        graphConfig.addNode(recognizerNode);\n        this.attachProtoVectorListener(LANDMARKS_STREAM, binaryProto => {\n            this.addJsLandmarks(binaryProto);\n        });\n        this.attachProtoVectorListener(WORLD_LANDMARKS_STREAM, binaryProto => {\n            this.adddJsWorldLandmarks(binaryProto);\n        });\n        this.attachProtoVectorListener(HAND_GESTURES_STREAM, binaryProto => {\n            this.gestures.push(...this.toJsCategories(binaryProto));\n        });\n        this.attachProtoVectorListener(HANDEDNESS_STREAM, binaryProto => {\n            this.handednesses.push(...this.toJsCategories(binaryProto));\n        });\n        const binaryGraph = graphConfig.serializeBinary();\n        this.setGraph(new Uint8Array(binaryGraph), /* isBinary= */ true);\n    }\n}\ngesture_recognizer.GestureRecognizer = GestureRecognizer;\n\nvar object_detector_options = {};\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(object_detector_options, \"__esModule\", { value: true });\n\nvar object_detector_result = {};\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(object_detector_result, \"__esModule\", { value: true });\n\nvar object_detector = {};\n\nvar detection_pb = {};\n\nvar location_data_pb = {};\n\nvar rasterization_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/framework/formats/annotation/rasterization.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.Rasterization', null, global);\n\tgoog.exportSymbol('proto.mediapipe.Rasterization.Interval', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.Rasterization = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.Rasterization.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.Rasterization, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.Rasterization.displayName = 'proto.mediapipe.Rasterization';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.Rasterization.Interval = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.Rasterization.Interval, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.Rasterization.Interval.displayName = 'proto.mediapipe.Rasterization.Interval';\n\t}\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.Rasterization.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.Rasterization.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.Rasterization.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.Rasterization} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Rasterization.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    intervalList: jspb.Message.toObjectList(msg.getIntervalList(),\n\t    proto.mediapipe.Rasterization.Interval.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.Rasterization}\n\t */\n\tproto.mediapipe.Rasterization.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.Rasterization;\n\t  return proto.mediapipe.Rasterization.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.Rasterization} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.Rasterization}\n\t */\n\tproto.mediapipe.Rasterization.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.Rasterization.Interval;\n\t      reader.readMessage(value,proto.mediapipe.Rasterization.Interval.deserializeBinaryFromReader);\n\t      msg.addInterval(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.Rasterization.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.Rasterization.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.Rasterization} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Rasterization.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getIntervalList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.Rasterization.Interval.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.Rasterization.Interval.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.Rasterization.Interval} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Rasterization.Interval.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    y: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    leftX: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    rightX: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.Rasterization.Interval}\n\t */\n\tproto.mediapipe.Rasterization.Interval.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.Rasterization.Interval;\n\t  return proto.mediapipe.Rasterization.Interval.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.Rasterization.Interval} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.Rasterization.Interval}\n\t */\n\tproto.mediapipe.Rasterization.Interval.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setY(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setLeftX(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setRightX(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.Rasterization.Interval.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.Rasterization.Interval} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Rasterization.Interval.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * required int32 y = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.getY = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Rasterization.Interval} returns this\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.setY = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Rasterization.Interval} returns this\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.clearY = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.hasY = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * required int32 left_x = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.getLeftX = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Rasterization.Interval} returns this\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.setLeftX = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Rasterization.Interval} returns this\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.clearLeftX = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.hasLeftX = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * required int32 right_x = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.getRightX = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Rasterization.Interval} returns this\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.setRightX = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Rasterization.Interval} returns this\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.clearRightX = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.hasRightX = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * repeated Interval interval = 1;\n\t * @return {!Array<!proto.mediapipe.Rasterization.Interval>}\n\t */\n\tproto.mediapipe.Rasterization.prototype.getIntervalList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.Rasterization.Interval>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.Rasterization.Interval, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.Rasterization.Interval>} value\n\t * @return {!proto.mediapipe.Rasterization} returns this\n\t*/\n\tproto.mediapipe.Rasterization.prototype.setIntervalList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.Rasterization.Interval=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.Rasterization.Interval}\n\t */\n\tproto.mediapipe.Rasterization.prototype.addInterval = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.Rasterization.Interval, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.Rasterization} returns this\n\t */\n\tproto.mediapipe.Rasterization.prototype.clearIntervalList = function() {\n\t  return this.setIntervalList([]);\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (rasterization_pb));\n\n(function (exports) {\n\t// source: mediapipe/framework/formats/location_data.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_formats_annotation_rasterization_pb = rasterization_pb;\n\tgoog.object.extend(proto, mediapipe_framework_formats_annotation_rasterization_pb);\n\tgoog.exportSymbol('proto.mediapipe.LocationData', null, global);\n\tgoog.exportSymbol('proto.mediapipe.LocationData.BinaryMask', null, global);\n\tgoog.exportSymbol('proto.mediapipe.LocationData.BoundingBox', null, global);\n\tgoog.exportSymbol('proto.mediapipe.LocationData.Format', null, global);\n\tgoog.exportSymbol('proto.mediapipe.LocationData.RelativeBoundingBox', null, global);\n\tgoog.exportSymbol('proto.mediapipe.LocationData.RelativeKeypoint', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.LocationData = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.LocationData.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.LocationData, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.LocationData.displayName = 'proto.mediapipe.LocationData';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.LocationData.BoundingBox = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.LocationData.BoundingBox, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.LocationData.BoundingBox.displayName = 'proto.mediapipe.LocationData.BoundingBox';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.LocationData.RelativeBoundingBox, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.LocationData.RelativeBoundingBox.displayName = 'proto.mediapipe.LocationData.RelativeBoundingBox';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.LocationData.BinaryMask = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.LocationData.BinaryMask, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.LocationData.BinaryMask.displayName = 'proto.mediapipe.LocationData.BinaryMask';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.LocationData.RelativeKeypoint, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.LocationData.RelativeKeypoint.displayName = 'proto.mediapipe.LocationData.RelativeKeypoint';\n\t}\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.LocationData.repeatedFields_ = [5];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.LocationData.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.LocationData.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.LocationData} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    format: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    boundingBox: (f = msg.getBoundingBox()) && proto.mediapipe.LocationData.BoundingBox.toObject(includeInstance, f),\n\t    relativeBoundingBox: (f = msg.getRelativeBoundingBox()) && proto.mediapipe.LocationData.RelativeBoundingBox.toObject(includeInstance, f),\n\t    mask: (f = msg.getMask()) && proto.mediapipe.LocationData.BinaryMask.toObject(includeInstance, f),\n\t    relativeKeypointsList: jspb.Message.toObjectList(msg.getRelativeKeypointsList(),\n\t    proto.mediapipe.LocationData.RelativeKeypoint.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.LocationData}\n\t */\n\tproto.mediapipe.LocationData.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.LocationData;\n\t  return proto.mediapipe.LocationData.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.LocationData} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.LocationData}\n\t */\n\tproto.mediapipe.LocationData.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {!proto.mediapipe.LocationData.Format} */ (reader.readEnum());\n\t      msg.setFormat(value);\n\t      break;\n\t    case 2:\n\t      var value = new proto.mediapipe.LocationData.BoundingBox;\n\t      reader.readMessage(value,proto.mediapipe.LocationData.BoundingBox.deserializeBinaryFromReader);\n\t      msg.setBoundingBox(value);\n\t      break;\n\t    case 3:\n\t      var value = new proto.mediapipe.LocationData.RelativeBoundingBox;\n\t      reader.readMessage(value,proto.mediapipe.LocationData.RelativeBoundingBox.deserializeBinaryFromReader);\n\t      msg.setRelativeBoundingBox(value);\n\t      break;\n\t    case 4:\n\t      var value = new proto.mediapipe.LocationData.BinaryMask;\n\t      reader.readMessage(value,proto.mediapipe.LocationData.BinaryMask.deserializeBinaryFromReader);\n\t      msg.setMask(value);\n\t      break;\n\t    case 5:\n\t      var value = new proto.mediapipe.LocationData.RelativeKeypoint;\n\t      reader.readMessage(value,proto.mediapipe.LocationData.RelativeKeypoint.deserializeBinaryFromReader);\n\t      msg.addRelativeKeypoints(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.LocationData.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.LocationData.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.LocationData} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {!proto.mediapipe.LocationData.Format} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeEnum(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getBoundingBox();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      2,\n\t      f,\n\t      proto.mediapipe.LocationData.BoundingBox.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getRelativeBoundingBox();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      proto.mediapipe.LocationData.RelativeBoundingBox.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getMask();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      4,\n\t      f,\n\t      proto.mediapipe.LocationData.BinaryMask.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getRelativeKeypointsList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      5,\n\t      f,\n\t      proto.mediapipe.LocationData.RelativeKeypoint.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * @enum {number}\n\t */\n\tproto.mediapipe.LocationData.Format = {\n\t  GLOBAL: 0,\n\t  BOUNDING_BOX: 1,\n\t  RELATIVE_BOUNDING_BOX: 2,\n\t  MASK: 3\n\t};\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.LocationData.BoundingBox.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.LocationData.BoundingBox} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    xmin: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    ymin: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    width: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,\n\t    height: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.LocationData.BoundingBox}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.LocationData.BoundingBox;\n\t  return proto.mediapipe.LocationData.BoundingBox.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.LocationData.BoundingBox} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.LocationData.BoundingBox}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setXmin(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setYmin(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setWidth(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setHeight(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.LocationData.BoundingBox.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.LocationData.BoundingBox} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional int32 xmin = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.getXmin = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.BoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.setXmin = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.BoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.clearXmin = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.hasXmin = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional int32 ymin = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.getYmin = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.BoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.setYmin = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.BoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.clearYmin = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.hasYmin = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional int32 width = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.getWidth = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.BoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.setWidth = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.BoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.clearWidth = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.hasWidth = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional int32 height = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.getHeight = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.BoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.setHeight = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.BoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.clearHeight = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.hasHeight = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.LocationData.RelativeBoundingBox.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.LocationData.RelativeBoundingBox} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    xmin: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,\n\t    ymin: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,\n\t    width: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,\n\t    height: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.LocationData.RelativeBoundingBox;\n\t  return proto.mediapipe.LocationData.RelativeBoundingBox.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.LocationData.RelativeBoundingBox} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setXmin(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setYmin(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setWidth(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setHeight(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.LocationData.RelativeBoundingBox.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.LocationData.RelativeBoundingBox} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional float xmin = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.getXmin = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.setXmin = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.clearXmin = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.hasXmin = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional float ymin = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.getYmin = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.setYmin = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.clearYmin = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.hasYmin = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional float width = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.getWidth = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.setWidth = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.clearWidth = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.hasWidth = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional float height = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.getHeight = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.setHeight = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.clearHeight = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.hasHeight = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.LocationData.BinaryMask.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.LocationData.BinaryMask} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    width: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    height: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    rasterization: (f = msg.getRasterization()) && mediapipe_framework_formats_annotation_rasterization_pb.Rasterization.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.LocationData.BinaryMask}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.LocationData.BinaryMask;\n\t  return proto.mediapipe.LocationData.BinaryMask.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.LocationData.BinaryMask} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.LocationData.BinaryMask}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setWidth(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setHeight(value);\n\t      break;\n\t    case 3:\n\t      var value = new mediapipe_framework_formats_annotation_rasterization_pb.Rasterization;\n\t      reader.readMessage(value,mediapipe_framework_formats_annotation_rasterization_pb.Rasterization.deserializeBinaryFromReader);\n\t      msg.setRasterization(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.LocationData.BinaryMask.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.LocationData.BinaryMask} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getRasterization();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      mediapipe_framework_formats_annotation_rasterization_pb.Rasterization.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional int32 width = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.getWidth = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.BinaryMask} returns this\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.setWidth = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.BinaryMask} returns this\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.clearWidth = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.hasWidth = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional int32 height = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.getHeight = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.BinaryMask} returns this\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.setHeight = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.BinaryMask} returns this\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.clearHeight = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.hasHeight = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional Rasterization rasterization = 3;\n\t * @return {?proto.mediapipe.Rasterization}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.getRasterization = function() {\n\t  return /** @type{?proto.mediapipe.Rasterization} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_formats_annotation_rasterization_pb.Rasterization, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.Rasterization|undefined} value\n\t * @return {!proto.mediapipe.LocationData.BinaryMask} returns this\n\t*/\n\tproto.mediapipe.LocationData.BinaryMask.prototype.setRasterization = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.BinaryMask} returns this\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.clearRasterization = function() {\n\t  return this.setRasterization(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.hasRasterization = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.LocationData.RelativeKeypoint.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.LocationData.RelativeKeypoint} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,\n\t    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,\n\t    keypointLabel: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,\n\t    score: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.LocationData.RelativeKeypoint;\n\t  return proto.mediapipe.LocationData.RelativeKeypoint.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.LocationData.RelativeKeypoint} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setX(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setY(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setKeypointLabel(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setScore(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.LocationData.RelativeKeypoint.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.LocationData.RelativeKeypoint} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional float x = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.getX = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.setX = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.clearX = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.hasX = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional float y = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.getY = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.setY = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.clearY = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.hasY = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional string keypoint_label = 3;\n\t * @return {string}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.getKeypointLabel = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.setKeypointLabel = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.clearKeypointLabel = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.hasKeypointLabel = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional float score = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.getScore = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.setScore = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.clearScore = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.hasScore = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * optional Format format = 1;\n\t * @return {!proto.mediapipe.LocationData.Format}\n\t */\n\tproto.mediapipe.LocationData.prototype.getFormat = function() {\n\t  return /** @type {!proto.mediapipe.LocationData.Format} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.LocationData.Format} value\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t */\n\tproto.mediapipe.LocationData.prototype.setFormat = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t */\n\tproto.mediapipe.LocationData.prototype.clearFormat = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.prototype.hasFormat = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional BoundingBox bounding_box = 2;\n\t * @return {?proto.mediapipe.LocationData.BoundingBox}\n\t */\n\tproto.mediapipe.LocationData.prototype.getBoundingBox = function() {\n\t  return /** @type{?proto.mediapipe.LocationData.BoundingBox} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.LocationData.BoundingBox, 2));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.LocationData.BoundingBox|undefined} value\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t*/\n\tproto.mediapipe.LocationData.prototype.setBoundingBox = function(value) {\n\t  return jspb.Message.setWrapperField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t */\n\tproto.mediapipe.LocationData.prototype.clearBoundingBox = function() {\n\t  return this.setBoundingBox(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.prototype.hasBoundingBox = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional RelativeBoundingBox relative_bounding_box = 3;\n\t * @return {?proto.mediapipe.LocationData.RelativeBoundingBox}\n\t */\n\tproto.mediapipe.LocationData.prototype.getRelativeBoundingBox = function() {\n\t  return /** @type{?proto.mediapipe.LocationData.RelativeBoundingBox} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.LocationData.RelativeBoundingBox, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.LocationData.RelativeBoundingBox|undefined} value\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t*/\n\tproto.mediapipe.LocationData.prototype.setRelativeBoundingBox = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t */\n\tproto.mediapipe.LocationData.prototype.clearRelativeBoundingBox = function() {\n\t  return this.setRelativeBoundingBox(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.prototype.hasRelativeBoundingBox = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional BinaryMask mask = 4;\n\t * @return {?proto.mediapipe.LocationData.BinaryMask}\n\t */\n\tproto.mediapipe.LocationData.prototype.getMask = function() {\n\t  return /** @type{?proto.mediapipe.LocationData.BinaryMask} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.LocationData.BinaryMask, 4));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.LocationData.BinaryMask|undefined} value\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t*/\n\tproto.mediapipe.LocationData.prototype.setMask = function(value) {\n\t  return jspb.Message.setWrapperField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t */\n\tproto.mediapipe.LocationData.prototype.clearMask = function() {\n\t  return this.setMask(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.prototype.hasMask = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * repeated RelativeKeypoint relative_keypoints = 5;\n\t * @return {!Array<!proto.mediapipe.LocationData.RelativeKeypoint>}\n\t */\n\tproto.mediapipe.LocationData.prototype.getRelativeKeypointsList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.LocationData.RelativeKeypoint>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.LocationData.RelativeKeypoint, 5));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.LocationData.RelativeKeypoint>} value\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t*/\n\tproto.mediapipe.LocationData.prototype.setRelativeKeypointsList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 5, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.LocationData.RelativeKeypoint=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint}\n\t */\n\tproto.mediapipe.LocationData.prototype.addRelativeKeypoints = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.mediapipe.LocationData.RelativeKeypoint, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t */\n\tproto.mediapipe.LocationData.prototype.clearRelativeKeypointsList = function() {\n\t  return this.setRelativeKeypointsList([]);\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (location_data_pb));\n\n(function (exports) {\n\t// source: mediapipe/framework/formats/detection.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_formats_location_data_pb = location_data_pb;\n\tgoog.object.extend(proto, mediapipe_framework_formats_location_data_pb);\n\tgoog.exportSymbol('proto.mediapipe.Detection', null, global);\n\tgoog.exportSymbol('proto.mediapipe.Detection.AssociatedDetection', null, global);\n\tgoog.exportSymbol('proto.mediapipe.DetectionList', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.Detection = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.Detection.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.Detection, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.Detection.displayName = 'proto.mediapipe.Detection';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.Detection.AssociatedDetection, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.Detection.AssociatedDetection.displayName = 'proto.mediapipe.Detection.AssociatedDetection';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.DetectionList = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.DetectionList.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.DetectionList, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.DetectionList.displayName = 'proto.mediapipe.DetectionList';\n\t}\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.Detection.repeatedFields_ = [1,2,3,8,9];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.Detection.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.Detection.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.Detection} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Detection.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    labelList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n\t    labelIdList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n\t    scoreList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f,\n\t    locationData: (f = msg.getLocationData()) && mediapipe_framework_formats_location_data_pb.LocationData.toObject(includeInstance, f),\n\t    featureTag: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,\n\t    trackId: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,\n\t    detectionId: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,\n\t    associatedDetectionsList: jspb.Message.toObjectList(msg.getAssociatedDetectionsList(),\n\t    proto.mediapipe.Detection.AssociatedDetection.toObject, includeInstance),\n\t    displayNameList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,\n\t    timestampUsec: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.Detection}\n\t */\n\tproto.mediapipe.Detection.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.Detection;\n\t  return proto.mediapipe.Detection.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.Detection} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.Detection}\n\t */\n\tproto.mediapipe.Detection.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addLabel(value);\n\t      break;\n\t    case 2:\n\t      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);\n\t      for (var i = 0; i < values.length; i++) {\n\t        msg.addLabelId(values[i]);\n\t      }\n\t      break;\n\t    case 3:\n\t      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);\n\t      for (var i = 0; i < values.length; i++) {\n\t        msg.addScore(values[i]);\n\t      }\n\t      break;\n\t    case 4:\n\t      var value = new mediapipe_framework_formats_location_data_pb.LocationData;\n\t      reader.readMessage(value,mediapipe_framework_formats_location_data_pb.LocationData.deserializeBinaryFromReader);\n\t      msg.setLocationData(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setFeatureTag(value);\n\t      break;\n\t    case 6:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setTrackId(value);\n\t      break;\n\t    case 7:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setDetectionId(value);\n\t      break;\n\t    case 8:\n\t      var value = new proto.mediapipe.Detection.AssociatedDetection;\n\t      reader.readMessage(value,proto.mediapipe.Detection.AssociatedDetection.deserializeBinaryFromReader);\n\t      msg.addAssociatedDetections(value);\n\t      break;\n\t    case 9:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addDisplayName(value);\n\t      break;\n\t    case 10:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setTimestampUsec(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.Detection.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.Detection.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.Detection} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Detection.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getLabelList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getLabelIdList();\n\t  if (f.length > 0) {\n\t    writer.writePackedInt32(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getScoreList();\n\t  if (f.length > 0) {\n\t    writer.writePackedFloat(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = message.getLocationData();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      4,\n\t      f,\n\t      mediapipe_framework_formats_location_data_pb.LocationData.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 5));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 6));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      6,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 7));\n\t  if (f != null) {\n\t    writer.writeInt64(\n\t      7,\n\t      f\n\t    );\n\t  }\n\t  f = message.getAssociatedDetectionsList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      8,\n\t      f,\n\t      proto.mediapipe.Detection.AssociatedDetection.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getDisplayNameList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      9,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 10));\n\t  if (f != null) {\n\t    writer.writeInt64(\n\t      10,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.Detection.AssociatedDetection.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.Detection.AssociatedDetection} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    confidence: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.Detection.AssociatedDetection}\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.Detection.AssociatedDetection;\n\t  return proto.mediapipe.Detection.AssociatedDetection.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.Detection.AssociatedDetection} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.Detection.AssociatedDetection}\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setId(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setConfidence(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.Detection.AssociatedDetection.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.Detection.AssociatedDetection} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional int32 id = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.getId = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Detection.AssociatedDetection} returns this\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.setId = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Detection.AssociatedDetection} returns this\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.clearId = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.hasId = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional float confidence = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.getConfidence = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Detection.AssociatedDetection} returns this\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.setConfidence = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Detection.AssociatedDetection} returns this\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.clearConfidence = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.hasConfidence = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * repeated string label = 1;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.Detection.prototype.getLabelList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.setLabelList = function(value) {\n\t  return jspb.Message.setField(this, 1, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.addLabel = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearLabelList = function() {\n\t  return this.setLabelList([]);\n\t};\n\n\n\t/**\n\t * repeated int32 label_id = 2;\n\t * @return {!Array<number>}\n\t */\n\tproto.mediapipe.Detection.prototype.getLabelIdList = function() {\n\t  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));\n\t};\n\n\n\t/**\n\t * @param {!Array<number>} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.setLabelIdList = function(value) {\n\t  return jspb.Message.setField(this, 2, value || []);\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.addLabelId = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearLabelIdList = function() {\n\t  return this.setLabelIdList([]);\n\t};\n\n\n\t/**\n\t * repeated float score = 3;\n\t * @return {!Array<number>}\n\t */\n\tproto.mediapipe.Detection.prototype.getScoreList = function() {\n\t  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));\n\t};\n\n\n\t/**\n\t * @param {!Array<number>} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.setScoreList = function(value) {\n\t  return jspb.Message.setField(this, 3, value || []);\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.addScore = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearScoreList = function() {\n\t  return this.setScoreList([]);\n\t};\n\n\n\t/**\n\t * optional LocationData location_data = 4;\n\t * @return {?proto.mediapipe.LocationData}\n\t */\n\tproto.mediapipe.Detection.prototype.getLocationData = function() {\n\t  return /** @type{?proto.mediapipe.LocationData} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_formats_location_data_pb.LocationData, 4));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.LocationData|undefined} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t*/\n\tproto.mediapipe.Detection.prototype.setLocationData = function(value) {\n\t  return jspb.Message.setWrapperField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearLocationData = function() {\n\t  return this.setLocationData(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Detection.prototype.hasLocationData = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * optional string feature_tag = 5;\n\t * @return {string}\n\t */\n\tproto.mediapipe.Detection.prototype.getFeatureTag = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.setFeatureTag = function(value) {\n\t  return jspb.Message.setField(this, 5, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearFeatureTag = function() {\n\t  return jspb.Message.setField(this, 5, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Detection.prototype.hasFeatureTag = function() {\n\t  return jspb.Message.getField(this, 5) != null;\n\t};\n\n\n\t/**\n\t * optional string track_id = 6;\n\t * @return {string}\n\t */\n\tproto.mediapipe.Detection.prototype.getTrackId = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.setTrackId = function(value) {\n\t  return jspb.Message.setField(this, 6, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearTrackId = function() {\n\t  return jspb.Message.setField(this, 6, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Detection.prototype.hasTrackId = function() {\n\t  return jspb.Message.getField(this, 6) != null;\n\t};\n\n\n\t/**\n\t * optional int64 detection_id = 7;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Detection.prototype.getDetectionId = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.setDetectionId = function(value) {\n\t  return jspb.Message.setField(this, 7, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearDetectionId = function() {\n\t  return jspb.Message.setField(this, 7, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Detection.prototype.hasDetectionId = function() {\n\t  return jspb.Message.getField(this, 7) != null;\n\t};\n\n\n\t/**\n\t * repeated AssociatedDetection associated_detections = 8;\n\t * @return {!Array<!proto.mediapipe.Detection.AssociatedDetection>}\n\t */\n\tproto.mediapipe.Detection.prototype.getAssociatedDetectionsList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.Detection.AssociatedDetection>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.Detection.AssociatedDetection, 8));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.Detection.AssociatedDetection>} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t*/\n\tproto.mediapipe.Detection.prototype.setAssociatedDetectionsList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 8, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.Detection.AssociatedDetection=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.Detection.AssociatedDetection}\n\t */\n\tproto.mediapipe.Detection.prototype.addAssociatedDetections = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.mediapipe.Detection.AssociatedDetection, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearAssociatedDetectionsList = function() {\n\t  return this.setAssociatedDetectionsList([]);\n\t};\n\n\n\t/**\n\t * repeated string display_name = 9;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.Detection.prototype.getDisplayNameList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.setDisplayNameList = function(value) {\n\t  return jspb.Message.setField(this, 9, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.addDisplayName = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearDisplayNameList = function() {\n\t  return this.setDisplayNameList([]);\n\t};\n\n\n\t/**\n\t * optional int64 timestamp_usec = 10;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Detection.prototype.getTimestampUsec = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.setTimestampUsec = function(value) {\n\t  return jspb.Message.setField(this, 10, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearTimestampUsec = function() {\n\t  return jspb.Message.setField(this, 10, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Detection.prototype.hasTimestampUsec = function() {\n\t  return jspb.Message.getField(this, 10) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.DetectionList.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.DetectionList.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.DetectionList.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.DetectionList} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.DetectionList.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    detectionList: jspb.Message.toObjectList(msg.getDetectionList(),\n\t    proto.mediapipe.Detection.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.DetectionList}\n\t */\n\tproto.mediapipe.DetectionList.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.DetectionList;\n\t  return proto.mediapipe.DetectionList.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.DetectionList} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.DetectionList}\n\t */\n\tproto.mediapipe.DetectionList.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.Detection;\n\t      reader.readMessage(value,proto.mediapipe.Detection.deserializeBinaryFromReader);\n\t      msg.addDetection(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.DetectionList.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.DetectionList.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.DetectionList} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.DetectionList.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getDetectionList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.Detection.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated Detection detection = 1;\n\t * @return {!Array<!proto.mediapipe.Detection>}\n\t */\n\tproto.mediapipe.DetectionList.prototype.getDetectionList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.Detection>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.Detection, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.Detection>} value\n\t * @return {!proto.mediapipe.DetectionList} returns this\n\t*/\n\tproto.mediapipe.DetectionList.prototype.setDetectionList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.Detection=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.Detection}\n\t */\n\tproto.mediapipe.DetectionList.prototype.addDetection = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.Detection, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.DetectionList} returns this\n\t */\n\tproto.mediapipe.DetectionList.prototype.clearDetectionList = function() {\n\t  return this.setDetectionList([]);\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (detection_pb));\n\nvar object_detector_options_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/vision/object_detector/proto/object_detector_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0__default[\"default\"];\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tvar mediapipe_tasks_cc_core_proto_base_options_pb = base_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_base_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.displayName = 'proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions';\n\t}\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.repeatedFields_ = [5,6];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    baseOptions: (f = msg.getBaseOptions()) && mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.toObject(includeInstance, f),\n\t    displayNamesLocale: jspb.Message.getFieldWithDefault(msg, 2, \"en\"),\n\t    maxResults: jspb.Message.getFieldWithDefault(msg, 3, -1),\n\t    scoreThreshold: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,\n\t    categoryAllowlistList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,\n\t    categoryDenylistList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions;\n\t  return proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.deserializeBinaryFromReader);\n\t      msg.setBaseOptions(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setDisplayNamesLocale(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setMaxResults(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setScoreThreshold(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addCategoryAllowlist(value);\n\t      break;\n\t    case 6:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addCategoryDenylist(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getBaseOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = message.getCategoryAllowlistList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t  f = message.getCategoryDenylistList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      6,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.ext = new jspb.ExtensionFieldInfo(\n\t    443442058,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[443442058] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[443442058] = proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.ext;\n\n\t/**\n\t * optional mediapipe.tasks.core.proto.BaseOptions base_options = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.getBaseOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.BaseOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.BaseOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.setBaseOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.clearBaseOptions = function() {\n\t  return this.setBaseOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.hasBaseOptions = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional string display_names_locale = 2;\n\t * @return {string}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.getDisplayNamesLocale = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"en\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.setDisplayNamesLocale = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.clearDisplayNamesLocale = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.hasDisplayNamesLocale = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional int32 max_results = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.getMaxResults = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, -1));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.setMaxResults = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.clearMaxResults = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.hasMaxResults = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional float score_threshold = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.getScoreThreshold = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.setScoreThreshold = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.clearScoreThreshold = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.hasScoreThreshold = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * repeated string category_allowlist = 5;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.getCategoryAllowlistList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.setCategoryAllowlistList = function(value) {\n\t  return jspb.Message.setField(this, 5, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.addCategoryAllowlist = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.clearCategoryAllowlistList = function() {\n\t  return this.setCategoryAllowlistList([]);\n\t};\n\n\n\t/**\n\t * repeated string category_denylist = 6;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.getCategoryDenylistList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.setCategoryDenylistList = function(value) {\n\t  return jspb.Message.setField(this, 6, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.addCategoryDenylist = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.clearCategoryDenylistList = function() {\n\t  return this.setCategoryDenylistList([]);\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.ext = new jspb.ExtensionFieldInfo(\n\t    443442058,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[443442058] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[443442058] = proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.vision.object_detector.proto);\n} (object_detector_options_pb));\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(object_detector, \"__esModule\", { value: true });\nobject_detector.ObjectDetector = void 0;\nconst calculator_pb_1 = calculator_pb;\nconst calculator_options_pb_1 = calculator_options_pb;\nconst detection_pb_1 = detection_pb;\nconst object_detector_options_pb_1 = object_detector_options_pb;\nconst base_options_1 = base_options;\nconst task_runner_1 = task_runner;\nconst wasm_mediapipe_lib_1 = wasm_mediapipe_lib;\nconst INPUT_STREAM = 'input_frame_gpu';\nconst DETECTIONS_STREAM = 'detections';\nconst OBJECT_DETECTOR_GRAPH = 'mediapipe.tasks.vision.ObjectDetectorGraph';\nconst DEFAULT_CATEGORY_INDEX = -1;\n// The OSS JS API does not support the builder pattern.\n// tslint:disable:jspb-use-builder-pattern\n/** Performs object detection on images. */\nclass ObjectDetector extends task_runner_1.TaskRunner {\n    constructor() {\n        super(...arguments);\n        this.detections = [];\n        this.options = new object_detector_options_pb_1.ObjectDetectorOptions();\n    }\n    /**\n     * Initializes the Wasm runtime and creates a new object detector from the\n     * provided options.\n     * @param wasmLoaderOptions A configuration object that provides the location\n     *     of the Wasm binary and its loader.\n     * @param objectDetectorOptions The options for the Object Detector. Note that\n     *     either a path to the model asset or a model buffer needs to be\n     *     provided (via `baseOptions`).\n     */\n    static async createFromOptions(wasmLoaderOptions, objectDetectorOptions) {\n        // Create a file locator based on the loader options\n        const fileLocator = {\n            locateFile() {\n                // The only file we load is the Wasm binary\n                return wasmLoaderOptions.wasmBinaryPath.toString();\n            }\n        };\n        const detector = await (0, wasm_mediapipe_lib_1.createMediaPipeLib)(ObjectDetector, wasmLoaderOptions.wasmLoaderPath, \n        /* assetLoaderScript= */ undefined, \n        /* glCanvas= */ undefined, fileLocator);\n        await detector.setOptions(objectDetectorOptions);\n        return detector;\n    }\n    /**\n     * Initializes the Wasm runtime and creates a new object detector based on the\n     * provided model asset buffer.\n     * @param wasmLoaderOptions A configuration object that provides the location\n     *     of the Wasm binary and its loader.\n     * @param modelAssetBuffer A binary representation of the model.\n     */\n    static createFromModelBuffer(wasmLoaderOptions, modelAssetBuffer) {\n        return ObjectDetector.createFromOptions(wasmLoaderOptions, { baseOptions: { modelAssetBuffer } });\n    }\n    /**\n     * Initializes the Wasm runtime and creates a new object detector based on the\n     * path to the model asset.\n     * @param wasmLoaderOptions A configuration object that provides the location\n     *     of the Wasm binary and its loader.\n     * @param modelAssetPath The path to the model asset.\n     */\n    static async createFromModelPath(wasmLoaderOptions, modelAssetPath) {\n        const response = await fetch(modelAssetPath.toString());\n        const graphData = await response.arrayBuffer();\n        return ObjectDetector.createFromModelBuffer(wasmLoaderOptions, new Uint8Array(graphData));\n    }\n    /**\n     * Sets new options for the object detector.\n     *\n     * Calling `setOptions()` with a subset of options only affects those options.\n     * You can reset an option back to its default value by explicitly setting it\n     * to `undefined`.\n     *\n     * @param options The options for the object detector.\n     */\n    async setOptions(options) {\n        if (options.baseOptions) {\n            const baseOptionsProto = await (0, base_options_1.convertBaseOptionsToProto)(options.baseOptions, this.options.getBaseOptions());\n            this.options.setBaseOptions(baseOptionsProto);\n        }\n        // Note that we have to support both JSPB and ProtobufJS, hence we\n        // have to expliclity clear the values instead of setting them to\n        // `undefined`.\n        if (options.displayNamesLocale !== undefined) {\n            this.options.setDisplayNamesLocale(options.displayNamesLocale);\n        }\n        else if ('displayNamesLocale' in options) { // Check for undefined\n            this.options.clearDisplayNamesLocale();\n        }\n        if (options.maxResults !== undefined) {\n            this.options.setMaxResults(options.maxResults);\n        }\n        else if ('maxResults' in options) { // Check for undefined\n            this.options.clearMaxResults();\n        }\n        if (options.scoreThreshold !== undefined) {\n            this.options.setScoreThreshold(options.scoreThreshold);\n        }\n        else if ('scoreThreshold' in options) { // Check for undefined\n            this.options.clearScoreThreshold();\n        }\n        if (options.categoryAllowlist !== undefined) {\n            this.options.setCategoryAllowlistList(options.categoryAllowlist);\n        }\n        else if ('categoryAllowlist' in options) { // Check for undefined\n            this.options.clearCategoryAllowlistList();\n        }\n        if (options.categoryDenylist !== undefined) {\n            this.options.setCategoryDenylistList(options.categoryDenylist);\n        }\n        else if ('categoryDenylist' in options) { // Check for undefined\n            this.options.clearCategoryDenylistList();\n        }\n        this.refreshGraph();\n    }\n    /**\n     * Performs object detection on the provided single image and waits\n     * synchronously for the response.\n     * @param imageSource An image source to process.\n     * @param timestamp The timestamp of the current frame, in ms. If not\n     *    provided, defaults to `performance.now()`.\n     * @return The list of detected objects\n     */\n    detect(imageSource, timestamp) {\n        // Get detections by running our MediaPipe graph.\n        this.detections = [];\n        this.addGpuBufferAsImageToStream(imageSource, INPUT_STREAM, timestamp !== null && timestamp !== void 0 ? timestamp : performance.now());\n        this.finishProcessing();\n        return [...this.detections];\n    }\n    /** Converts raw data into a Detection, and adds it to our detection list. */\n    addJsObjectDetections(data) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        for (const binaryProto of data) {\n            const detectionProto = detection_pb_1.Detection.deserializeBinary(binaryProto);\n            const scores = detectionProto.getScoreList();\n            const indexes = detectionProto.getLabelIdList();\n            const labels = detectionProto.getLabelList();\n            const displayNames = detectionProto.getDisplayNameList();\n            const detection = { categories: [] };\n            for (let i = 0; i < scores.length; i++) {\n                detection.categories.push({\n                    score: scores[i],\n                    index: (_a = indexes[i]) !== null && _a !== void 0 ? _a : DEFAULT_CATEGORY_INDEX,\n                    categoryName: (_b = labels[i]) !== null && _b !== void 0 ? _b : '',\n                    displayName: (_c = displayNames[i]) !== null && _c !== void 0 ? _c : '',\n                });\n            }\n            const boundingBox = (_d = detectionProto.getLocationData()) === null || _d === void 0 ? void 0 : _d.getBoundingBox();\n            if (boundingBox) {\n                detection.boundingBox = {\n                    originX: (_e = boundingBox.getXmin()) !== null && _e !== void 0 ? _e : 0,\n                    originY: (_f = boundingBox.getYmin()) !== null && _f !== void 0 ? _f : 0,\n                    width: (_g = boundingBox.getWidth()) !== null && _g !== void 0 ? _g : 0,\n                    height: (_h = boundingBox.getHeight()) !== null && _h !== void 0 ? _h : 0\n                };\n            }\n            this.detections.push(detection);\n        }\n    }\n    /** Updates the MediaPipe graph configuration. */\n    refreshGraph() {\n        const graphConfig = new calculator_pb_1.CalculatorGraphConfig();\n        graphConfig.addInputStream(INPUT_STREAM);\n        graphConfig.addOutputStream(DETECTIONS_STREAM);\n        const calculatorOptions = new calculator_options_pb_1.CalculatorOptions();\n        calculatorOptions.setExtension(object_detector_options_pb_1.ObjectDetectorOptions.ext, this.options);\n        const detectorNode = new calculator_pb_1.CalculatorGraphConfig.Node();\n        detectorNode.setCalculator(OBJECT_DETECTOR_GRAPH);\n        detectorNode.addInputStream('IMAGE:' + INPUT_STREAM);\n        detectorNode.addOutputStream('DETECTIONS:' + DETECTIONS_STREAM);\n        detectorNode.setOptions(calculatorOptions);\n        graphConfig.addNode(detectorNode);\n        this.attachProtoVectorListener(DETECTIONS_STREAM, binaryProto => {\n            this.addJsObjectDetections(binaryProto);\n        });\n        const binaryGraph = graphConfig.serializeBinary();\n        this.setGraph(new Uint8Array(binaryGraph), /* isBinary= */ true);\n    }\n}\nobject_detector.ObjectDetector = ObjectDetector;\n\n(function (exports) {\n\t/**\n\t * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\tvar __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n\t    if (k2 === undefined) k2 = k;\n\t    var desc = Object.getOwnPropertyDescriptor(m, k);\n\t    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n\t      desc = { enumerable: true, get: function() { return m[k]; } };\n\t    }\n\t    Object.defineProperty(o, k2, desc);\n\t}) : (function(o, m, k, k2) {\n\t    if (k2 === undefined) k2 = k;\n\t    o[k2] = m[k];\n\t}));\n\tvar __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {\n\t    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t// Image Classifier\n\t__exportStar(image_classifier_options, exports);\n\t__exportStar(image_classifier_result, exports);\n\t__exportStar(image_classifier, exports);\n\t// Gesture Recognizer\n\t__exportStar(gesture_recognizer_options, exports);\n\t__exportStar(gesture_recognizer_result, exports);\n\t__exportStar(gesture_recognizer, exports);\n\t// Object Detector\n\t__exportStar(object_detector_options, exports);\n\t__exportStar(object_detector_result, exports);\n\t__exportStar(object_detector, exports);\n\t\n} (vision$1));\n\n(function (exports) {\n\t/**\n\t * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\tvar __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n\t    if (k2 === undefined) k2 = k;\n\t    var desc = Object.getOwnPropertyDescriptor(m, k);\n\t    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n\t      desc = { enumerable: true, get: function() { return m[k]; } };\n\t    }\n\t    Object.defineProperty(o, k2, desc);\n\t}) : (function(o, m, k, k2) {\n\t    if (k2 === undefined) k2 = k;\n\t    o[k2] = m[k];\n\t}));\n\tvar __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {\n\t    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t__exportStar(vision$1, exports);\n\t\n} (vision$2));\n\nvar vision = /*@__PURE__*/getDefaultExportFromCjs(vision$2);\n\nmodule.exports = vision;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n","import {ObjectDetector, Detection} from '@mediapipe/tasks-vision';\n\nlet detector: ObjectDetector;\nlet video: HTMLVideoElement;\n\n// Interval in seconds at which we refresh the results.\nconst DRAW_OBJECTS_INTERVAL = 0.1;\nconst DRAW_PROCESSING_TIME_INTERVAL = 0.25;\n\nconst messageTag = document.getElementById('message') as HTMLElement;\nconst outputBox = document.getElementById('container') as HTMLElement;\noutputBox.style.bottom = '-30px';\n\nconst canvas = document.getElementById('output') as HTMLCanvasElement;\nconst ctx = canvas.getContext('2d')!;\n\nfunction drawBox(\n    label: string, x: number, y: number, w: number, h: number): void {\n    ctx.strokeStyle = 'red';\n    ctx.lineWidth = 3;\n    ctx.font = '24px roboto';\n    ctx.beginPath();\n    ctx.strokeStyle = 'white';\n    ctx.strokeText(label, x, y - 8);\n    ctx.strokeStyle = 'red';\n    ctx.moveTo(x, y);\n    ctx.lineTo(x + w, y);\n    ctx.lineTo(x + w, y + h);\n    ctx.lineTo(x, y + h);\n    ctx.lineTo(x, y);\n    ctx.closePath();\n    ctx.stroke();\n}\n\n// The last time in ms we processed data. Since we do not special handle the\n// first detection, we only display accurate value after the second frame.\nlet lastVideoTime = -1;\nlet lastObjectDrawTime = -1;\nlet lastProcessingTimeDrawTime = -1;\nlet detectionsSinceLastRefresh = 0;\n\n// Process video detections in a loop\nfunction detectLoop(): void {\n    if (video.currentTime !== lastVideoTime) {\n        const startTime = performance.now();\n        const detections = detector.detect(video, startTime);\n        const endTime = performance.now();\n        ++detectionsSinceLastRefresh;\n\n        if (endTime - lastObjectDrawTime > DRAW_OBJECTS_INTERVAL) {\n            drawObjects(detections);\n            lastObjectDrawTime = endTime;\n        }\n\n        if (endTime - lastProcessingTimeDrawTime > DRAW_PROCESSING_TIME_INTERVAL) {\n            drawProcessingTime(\n                (endTime - lastProcessingTimeDrawTime) / detectionsSinceLastRefresh);\n            lastProcessingTimeDrawTime = endTime;\n            detectionsSinceLastRefresh = 0;\n        }\n\n        lastVideoTime = video.currentTime;\n    }\n\n    requestAnimationFrame(() => {\n        detectLoop();\n    });\n}\n\nfunction drawObjects(detections: Detection[]): void {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    for (const detection of detections) {\n        const box = detection.boundingBox!;\n        for (const category of detection.categories) {\n            const label = `${category.categoryName} (${category.index}): ${\n                category.score.toFixed(2)}`;\n            drawBox(label, box.originX, box.originY, box.width, box.height);\n        }\n    }\n}\n\nfunction drawProcessingTime(frameAverage: number): void {\n    messageTag.textContent = `Throughput: ${frameAverage.toFixed(2)} ms`;\n}\n\n// Stream webcam into detections loop (and also make video visible)\nasync function streamWebcamThroughDetector(): Promise<void> {\n    video = document.getElementById('video') as HTMLVideoElement;\n\n    function onAcquiredUserMedia(stream: MediaStream): void {\n        video.srcObject = stream;\n        video.onloadedmetadata = () => {\n            canvas.width = video.videoWidth;\n            canvas.height = video.videoHeight;\n            video.play();\n            detectLoop();\n        };\n    }\n\n    try {\n        const evt = await navigator.mediaDevices.getUserMedia({\n            'audio': false,\n            'video': {\n                facingMode: 'user',\n                width: 1280,\n                height: 720,\n            }\n        });\n        onAcquiredUserMedia(evt);\n    } catch (e) {\n        console.error(`Failed to acquire camera feed: ${e}`);\n    }\n}\n\nasync function runDemo() {\n    detector = await ObjectDetector.createFromOptions(\n        {\n            wasmLoaderPath: `https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.1.0-alpha-1668420868/wasm/vision_wasm_internal.js`,\n            wasmBinaryPath: `https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.1.0-alpha-1668420868/wasm/vision_wasm_internal.wasm`,\n        },\n        {\n            baseOptions: {\n                modelAssetPath:\n                    `coco_ssd_mobilenet_v1_1.0_quant_2018_06_29.tflite`\n            },\n            maxResults: 1\n        });\n    await streamWebcamThroughDetector();\n}\n\nrunDemo();\n"],"names":["global","this","jspb","require$$0","require$$2","commonjsGlobal","ObjectDetector"],"mappings":"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IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC1gB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAA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AC,WAAW,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM;IACxf,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,C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"}