{"version":3,"file":"bundle.js","sources":["node_modules/tslib/tslib.es6.js","node_modules/google-protobuf/google-protobuf.js","node_modules/google-protobuf/google/protobuf/any_pb.js","node_modules/@mediapipe/tasks-vision/vision_bundle.js","index.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","/*\n\n Copyright The Closure Library Authors.\n SPDX-License-Identifier: Apache-2.0\n*/\nvar $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.findInternal=function(a,b,c){a instanceof String&&(a=String(a));for(var d=a.length,e=0;e<d;e++){var f=a[e];if(b.call(c,f,e,a))return{i:e,v:f}}return{i:-1,v:void 0}};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.SIMPLE_FROUND_POLYFILL=!1;\n$jscomp.defineProperty=$jscomp.ASSUME_ES5||\"function\"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};$jscomp.getGlobal=function(a){return\"undefined\"!=typeof window&&window===a?a:\"undefined\"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);\n$jscomp.polyfill=function(a,b,c,d){if(b){c=$jscomp.global;a=a.split(\".\");for(d=0;d<a.length-1;d++){var e=a[d];e in c||(c[e]={});c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&$jscomp.defineProperty(c,a,{configurable:!0,writable:!0,value:b})}};$jscomp.polyfill(\"Array.prototype.findIndex\",function(a){return a?a:function(a,c){return $jscomp.findInternal(this,a,c).i}},\"es6\",\"es3\");\n$jscomp.checkStringArgs=function(a,b,c){if(null==a)throw new TypeError(\"The 'this' value for String.prototype.\"+c+\" must not be null or undefined\");if(b instanceof RegExp)throw new TypeError(\"First argument to String.prototype.\"+c+\" must not be a regular expression\");return a+\"\"};\n$jscomp.polyfill(\"String.prototype.endsWith\",function(a){return a?a:function(a,c){var b=$jscomp.checkStringArgs(this,a,\"endsWith\");a+=\"\";void 0===c&&(c=b.length);c=Math.max(0,Math.min(c|0,b.length));for(var e=a.length;0<e&&0<c;)if(b[--c]!=a[--e])return!1;return 0>=e}},\"es6\",\"es3\");$jscomp.polyfill(\"Array.prototype.find\",function(a){return a?a:function(a,c){return $jscomp.findInternal(this,a,c).v}},\"es6\",\"es3\");\n$jscomp.polyfill(\"String.prototype.startsWith\",function(a){return a?a:function(a,c){var b=$jscomp.checkStringArgs(this,a,\"startsWith\");a+=\"\";var e=b.length,f=a.length;c=Math.max(0,Math.min(c|0,b.length));for(var g=0;g<f&&c<e;)if(b[c++]!=a[g++])return!1;return g>=f}},\"es6\",\"es3\");\n$jscomp.polyfill(\"String.prototype.repeat\",function(a){return a?a:function(a){var b=$jscomp.checkStringArgs(this,null,\"repeat\");if(0>a||1342177279<a)throw new RangeError(\"Invalid count value\");a|=0;for(var d=\"\";a;)if(a&1&&(d+=b),a>>>=1)b+=b;return d}},\"es6\",\"es3\");var COMPILED=!0,goog=goog||{};goog.global=this||self;\ngoog.exportPath_=function(a,b,c){a=a.split(\".\");c=c||goog.global;a[0]in c||\"undefined\"==typeof c.execScript||c.execScript(\"var \"+a[0]);for(var d;a.length&&(d=a.shift());)a.length||void 0===b?c=c[d]&&c[d]!==Object.prototype[d]?c[d]:c[d]={}:c[d]=b};\ngoog.define=function(a,b){if(!COMPILED){var c=goog.global.CLOSURE_UNCOMPILED_DEFINES,d=goog.global.CLOSURE_DEFINES;c&&void 0===c.nodeType&&Object.prototype.hasOwnProperty.call(c,a)?b=c[a]:d&&void 0===d.nodeType&&Object.prototype.hasOwnProperty.call(d,a)&&(b=d[a])}return b};goog.FEATURESET_YEAR=2012;goog.DEBUG=!0;goog.LOCALE=\"en\";goog.TRUSTED_SITE=!0;goog.STRICT_MODE_COMPATIBLE=!1;goog.DISALLOW_TEST_ONLY_CODE=COMPILED&&!goog.DEBUG;goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING=!1;\ngoog.provide=function(a){if(goog.isInModuleLoader_())throw Error(\"goog.provide cannot be used within a module.\");if(!COMPILED&&goog.isProvided_(a))throw Error('Namespace \"'+a+'\" already declared.');goog.constructNamespace_(a)};goog.constructNamespace_=function(a,b){if(!COMPILED){delete goog.implicitNamespaces_[a];for(var c=a;(c=c.substring(0,c.lastIndexOf(\".\")))&&!goog.getObjectByName(c);)goog.implicitNamespaces_[c]=!0}goog.exportPath_(a,b)};\ngoog.getScriptNonce=function(a){if(a&&a!=goog.global)return goog.getScriptNonce_(a.document);null===goog.cspNonce_&&(goog.cspNonce_=goog.getScriptNonce_(goog.global.document));return goog.cspNonce_};goog.NONCE_PATTERN_=/^[\\w+/_-]+[=]{0,2}$/;goog.cspNonce_=null;goog.getScriptNonce_=function(a){return(a=a.querySelector&&a.querySelector(\"script[nonce]\"))&&(a=a.nonce||a.getAttribute(\"nonce\"))&&goog.NONCE_PATTERN_.test(a)?a:\"\"};goog.VALID_MODULE_RE_=/^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\ngoog.module=function(a){if(\"string\"!==typeof a||!a||-1==a.search(goog.VALID_MODULE_RE_))throw Error(\"Invalid module identifier\");if(!goog.isInGoogModuleLoader_())throw Error(\"Module \"+a+\" has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.\");\nif(goog.moduleLoaderState_.moduleName)throw Error(\"goog.module may only be called once per module.\");goog.moduleLoaderState_.moduleName=a;if(!COMPILED){if(goog.isProvided_(a))throw Error('Namespace \"'+a+'\" already declared.');delete goog.implicitNamespaces_[a]}};goog.module.get=function(a){return goog.module.getInternal_(a)};\ngoog.module.getInternal_=function(a){if(!COMPILED){if(a in goog.loadedModules_)return goog.loadedModules_[a].exports;if(!goog.implicitNamespaces_[a])return a=goog.getObjectByName(a),null!=a?a:null}return null};goog.ModuleType={ES6:\"es6\",GOOG:\"goog\"};goog.moduleLoaderState_=null;goog.isInModuleLoader_=function(){return goog.isInGoogModuleLoader_()||goog.isInEs6ModuleLoader_()};goog.isInGoogModuleLoader_=function(){return!!goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.GOOG};\ngoog.isInEs6ModuleLoader_=function(){if(goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.ES6)return!0;var a=goog.global.$jscomp;return a?\"function\"!=typeof a.getCurrentModulePath?!1:!!a.getCurrentModulePath():!1};\ngoog.module.declareLegacyNamespace=function(){if(!COMPILED&&!goog.isInGoogModuleLoader_())throw Error(\"goog.module.declareLegacyNamespace must be called from within a goog.module\");if(!COMPILED&&!goog.moduleLoaderState_.moduleName)throw Error(\"goog.module must be called prior to goog.module.declareLegacyNamespace.\");goog.moduleLoaderState_.declareLegacyNamespace=!0};\ngoog.declareModuleId=function(a){if(!COMPILED){if(!goog.isInEs6ModuleLoader_())throw Error(\"goog.declareModuleId may only be called from within an ES6 module\");if(goog.moduleLoaderState_&&goog.moduleLoaderState_.moduleName)throw Error(\"goog.declareModuleId may only be called once per module.\");if(a in goog.loadedModules_)throw Error('Module with namespace \"'+a+'\" already exists.');}if(goog.moduleLoaderState_)goog.moduleLoaderState_.moduleName=a;else{var b=goog.global.$jscomp;if(!b||\"function\"!=typeof b.getCurrentModulePath)throw Error('Module with namespace \"'+\na+'\" has been loaded incorrectly.');b=b.require(b.getCurrentModulePath());goog.loadedModules_[a]={exports:b,type:goog.ModuleType.ES6,moduleId:a}}};goog.setTestOnly=function(a){if(goog.DISALLOW_TEST_ONLY_CODE)throw a=a||\"\",Error(\"Importing test-only code into non-debug environment\"+(a?\": \"+a:\".\"));};goog.forwardDeclare=function(a){};COMPILED||(goog.isProvided_=function(a){return a in goog.loadedModules_||!goog.implicitNamespaces_[a]&&null!=goog.getObjectByName(a)},goog.implicitNamespaces_={\"goog.module\":!0});\ngoog.getObjectByName=function(a,b){a=a.split(\".\");b=b||goog.global;for(var c=0;c<a.length;c++)if(b=b[a[c]],null==b)return null;return b};goog.globalize=function(a,b){b=b||goog.global;for(var c in a)b[c]=a[c]};goog.addDependency=function(a,b,c,d){!COMPILED&&goog.DEPENDENCIES_ENABLED&&goog.debugLoader_.addDependency(a,b,c,d)};goog.ENABLE_DEBUG_LOADER=!0;goog.logToConsole_=function(a){goog.global.console&&goog.global.console.error(a)};\ngoog.require=function(a){if(!COMPILED){goog.ENABLE_DEBUG_LOADER&&goog.debugLoader_.requested(a);if(goog.isProvided_(a)){if(goog.isInModuleLoader_())return goog.module.getInternal_(a)}else if(goog.ENABLE_DEBUG_LOADER){var b=goog.moduleLoaderState_;goog.moduleLoaderState_=null;try{goog.debugLoader_.load_(a)}finally{goog.moduleLoaderState_=b}}return null}};goog.requireType=function(a){return{}};goog.basePath=\"\";goog.nullFunction=function(){};\ngoog.abstractMethod=function(){throw Error(\"unimplemented abstract method\");};goog.addSingletonGetter=function(a){a.instance_=void 0;a.getInstance=function(){if(a.instance_)return a.instance_;goog.DEBUG&&(goog.instantiatedSingletons_[goog.instantiatedSingletons_.length]=a);return a.instance_=new a}};goog.instantiatedSingletons_=[];goog.LOAD_MODULE_USING_EVAL=!0;goog.SEAL_MODULE_EXPORTS=goog.DEBUG;goog.loadedModules_={};goog.DEPENDENCIES_ENABLED=!COMPILED&&goog.ENABLE_DEBUG_LOADER;goog.TRANSPILE=\"detect\";\ngoog.ASSUME_ES_MODULES_TRANSPILED=!1;goog.TRANSPILE_TO_LANGUAGE=\"\";goog.TRANSPILER=\"transpile.js\";goog.hasBadLetScoping=null;goog.useSafari10Workaround=function(){if(null==goog.hasBadLetScoping){try{var a=!eval('\"use strict\";let x = 1; function f() { return typeof x; };f() == \"number\";')}catch(b){a=!1}goog.hasBadLetScoping=a}return goog.hasBadLetScoping};goog.workaroundSafari10EvalBug=function(a){return\"(function(){\"+a+\"\\n;})();\\n\"};\ngoog.loadModule=function(a){var b=goog.moduleLoaderState_;try{goog.moduleLoaderState_={moduleName:\"\",declareLegacyNamespace:!1,type:goog.ModuleType.GOOG};if(goog.isFunction(a))var c=a.call(void 0,{});else if(\"string\"===typeof a)goog.useSafari10Workaround()&&(a=goog.workaroundSafari10EvalBug(a)),c=goog.loadModuleFromSource_.call(void 0,a);else throw Error(\"Invalid module definition\");var d=goog.moduleLoaderState_.moduleName;if(\"string\"===typeof d&&d)goog.moduleLoaderState_.declareLegacyNamespace?goog.constructNamespace_(d,\nc):goog.SEAL_MODULE_EXPORTS&&Object.seal&&\"object\"==typeof c&&null!=c&&Object.seal(c),goog.loadedModules_[d]={exports:c,type:goog.ModuleType.GOOG,moduleId:goog.moduleLoaderState_.moduleName};else throw Error('Invalid module name \"'+d+'\"');}finally{goog.moduleLoaderState_=b}};goog.loadModuleFromSource_=function(a){eval(a);return{}};goog.normalizePath_=function(a){a=a.split(\"/\");for(var b=0;b<a.length;)\".\"==a[b]?a.splice(b,1):b&&\"..\"==a[b]&&a[b-1]&&\"..\"!=a[b-1]?a.splice(--b,2):b++;return a.join(\"/\")};\ngoog.loadFileSync_=function(a){if(goog.global.CLOSURE_LOAD_FILE_SYNC)return goog.global.CLOSURE_LOAD_FILE_SYNC(a);try{var b=new goog.global.XMLHttpRequest;b.open(\"get\",a,!1);b.send();return 0==b.status||200==b.status?b.responseText:null}catch(c){return null}};\ngoog.transpile_=function(a,b,c){var d=goog.global.$jscomp;d||(goog.global.$jscomp=d={});var e=d.transpile;if(!e){var f=goog.basePath+goog.TRANSPILER,g=goog.loadFileSync_(f);if(g){(function(){(0,eval)(g+\"\\n//# sourceURL=\"+f)}).call(goog.global);if(goog.global.$gwtExport&&goog.global.$gwtExport.$jscomp&&!goog.global.$gwtExport.$jscomp.transpile)throw Error('The transpiler did not properly export the \"transpile\" method. $gwtExport: '+JSON.stringify(goog.global.$gwtExport));goog.global.$jscomp.transpile=\ngoog.global.$gwtExport.$jscomp.transpile;d=goog.global.$jscomp;e=d.transpile}}e||(e=d.transpile=function(a,b){goog.logToConsole_(b+\" requires transpilation but no transpiler was found.\");return a});return e(a,b,c)};\ngoog.typeOf=function(a){var b=typeof a;if(\"object\"==b)if(a){if(a instanceof Array)return\"array\";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if(\"[object Window]\"==c)return\"object\";if(\"[object Array]\"==c||\"number\"==typeof a.length&&\"undefined\"!=typeof a.splice&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"splice\"))return\"array\";if(\"[object Function]\"==c||\"undefined\"!=typeof a.call&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"call\"))return\"function\"}else return\"null\";\nelse if(\"function\"==b&&\"undefined\"==typeof a.call)return\"object\";return b};goog.isArray=function(a){return\"array\"==goog.typeOf(a)};goog.isArrayLike=function(a){var b=goog.typeOf(a);return\"array\"==b||\"object\"==b&&\"number\"==typeof a.length};goog.isDateLike=function(a){return goog.isObject(a)&&\"function\"==typeof a.getFullYear};goog.isFunction=function(a){return\"function\"==goog.typeOf(a)};goog.isObject=function(a){var b=typeof a;return\"object\"==b&&null!=a||\"function\"==b};\ngoog.getUid=function(a){return Object.prototype.hasOwnProperty.call(a,goog.UID_PROPERTY_)&&a[goog.UID_PROPERTY_]||(a[goog.UID_PROPERTY_]=++goog.uidCounter_)};goog.hasUid=function(a){return!!a[goog.UID_PROPERTY_]};goog.removeUid=function(a){null!==a&&\"removeAttribute\"in a&&a.removeAttribute(goog.UID_PROPERTY_);try{delete a[goog.UID_PROPERTY_]}catch(b){}};goog.UID_PROPERTY_=\"closure_uid_\"+(1E9*Math.random()>>>0);goog.uidCounter_=0;goog.getHashCode=goog.getUid;goog.removeHashCode=goog.removeUid;\ngoog.cloneObject=function(a){var b=goog.typeOf(a);if(\"object\"==b||\"array\"==b){if(\"function\"===typeof a.clone)return a.clone();b=\"array\"==b?[]:{};for(var c in a)b[c]=goog.cloneObject(a[c]);return b}return a};goog.bindNative_=function(a,b,c){return a.call.apply(a.bind,arguments)};\ngoog.bindJs_=function(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}};goog.bind=function(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?goog.bind=goog.bindNative_:goog.bind=goog.bindJs_;return goog.bind.apply(null,arguments)};\ngoog.partial=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}};goog.mixin=function(a,b){for(var c in b)a[c]=b[c]};goog.now=goog.TRUSTED_SITE&&Date.now||function(){return+new Date};\ngoog.globalEval=function(a){if(goog.global.execScript)goog.global.execScript(a,\"JavaScript\");else if(goog.global.eval){if(null==goog.evalWorksForGlobals_){try{goog.global.eval(\"var _evalTest_ = 1;\")}catch(d){}if(\"undefined\"!=typeof goog.global._evalTest_){try{delete goog.global._evalTest_}catch(d){}goog.evalWorksForGlobals_=!0}else goog.evalWorksForGlobals_=!1}if(goog.evalWorksForGlobals_)goog.global.eval(a);else{var b=goog.global.document,c=b.createElement(\"script\");c.type=\"text/javascript\";c.defer=\n!1;c.appendChild(b.createTextNode(a));b.head.appendChild(c);b.head.removeChild(c)}}else throw Error(\"goog.globalEval not available\");};goog.evalWorksForGlobals_=null;\ngoog.getCssName=function(a,b){if(\".\"==String(a).charAt(0))throw Error('className passed in goog.getCssName must not start with \".\". You passed: '+a);var c=function(a){return goog.cssNameMapping_[a]||a},d=function(a){a=a.split(\"-\");for(var b=[],d=0;d<a.length;d++)b.push(c(a[d]));return b.join(\"-\")};d=goog.cssNameMapping_?\"BY_WHOLE\"==goog.cssNameMappingStyle_?c:d:function(a){return a};a=b?a+\"-\"+d(b):d(a);return goog.global.CLOSURE_CSS_NAME_MAP_FN?goog.global.CLOSURE_CSS_NAME_MAP_FN(a):a};\ngoog.setCssNameMapping=function(a,b){goog.cssNameMapping_=a;goog.cssNameMappingStyle_=b};!COMPILED&&goog.global.CLOSURE_CSS_NAME_MAPPING&&(goog.cssNameMapping_=goog.global.CLOSURE_CSS_NAME_MAPPING);goog.getMsg=function(a,b,c){c&&c.html&&(a=a.replace(/</g,\"&lt;\"));b&&(a=a.replace(/\\{\\$([^}]+)}/g,function(a,c){return null!=b&&c in b?b[c]:a}));return a};goog.getMsgWithFallback=function(a,b){return a};goog.exportSymbol=function(a,b,c){goog.exportPath_(a,b,c)};\ngoog.exportProperty=function(a,b,c){a[b]=c};goog.inherits=function(a,b){function c(){}c.prototype=b.prototype;a.superClass_=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.base=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};goog.scope=function(a){if(goog.isInModuleLoader_())throw Error(\"goog.scope is not supported within a module.\");a.call(goog.global)};COMPILED||(goog.global.COMPILED=COMPILED);\ngoog.defineClass=function(a,b){var c=b.constructor,d=b.statics;c&&c!=Object.prototype.constructor||(c=function(){throw Error(\"cannot instantiate an interface (no constructor defined).\");});c=goog.defineClass.createSealingConstructor_(c,a);a&&goog.inherits(c,a);delete b.constructor;delete b.statics;goog.defineClass.applyProperties_(c.prototype,b);null!=d&&(d instanceof Function?d(c):goog.defineClass.applyProperties_(c,d));return c};goog.defineClass.SEAL_CLASS_INSTANCES=goog.DEBUG;\ngoog.defineClass.createSealingConstructor_=function(a,b){if(!goog.defineClass.SEAL_CLASS_INSTANCES)return a;var c=!goog.defineClass.isUnsealable_(b),d=function(){var b=a.apply(this,arguments)||this;b[goog.UID_PROPERTY_]=b[goog.UID_PROPERTY_];this.constructor===d&&c&&Object.seal instanceof Function&&Object.seal(b);return b};return d};goog.defineClass.isUnsealable_=function(a){return a&&a.prototype&&a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]};goog.defineClass.OBJECT_PROTOTYPE_FIELDS_=\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\".split(\" \");\ngoog.defineClass.applyProperties_=function(a,b){for(var c in b)Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c]);for(var d=0;d<goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;d++)c=goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d],Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c])};goog.tagUnsealableClass=function(a){!COMPILED&&goog.defineClass.SEAL_CLASS_INSTANCES&&(a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]=!0)};goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_=\"goog_defineClass_legacy_unsealable\";\n!COMPILED&&goog.DEPENDENCIES_ENABLED&&(goog.inHtmlDocument_=function(){var a=goog.global.document;return null!=a&&\"write\"in a},goog.isDocumentLoading_=function(){var a=goog.global.document;return a.attachEvent?\"complete\"!=a.readyState:\"loading\"==a.readyState},goog.findBasePath_=function(){if(void 0!=goog.global.CLOSURE_BASE_PATH&&\"string\"===typeof goog.global.CLOSURE_BASE_PATH)goog.basePath=goog.global.CLOSURE_BASE_PATH;else if(goog.inHtmlDocument_()){var a=goog.global.document,b=a.currentScript;\na=b?[b]:a.getElementsByTagName(\"SCRIPT\");for(b=a.length-1;0<=b;--b){var c=a[b].src,d=c.lastIndexOf(\"?\");d=-1==d?c.length:d;if(\"base.js\"==c.substr(d-7,7)){goog.basePath=c.substr(0,d-7);break}}}},goog.findBasePath_(),goog.Transpiler=function(){this.requiresTranspilation_=null;this.transpilationTarget_=goog.TRANSPILE_TO_LANGUAGE},goog.Transpiler.prototype.createRequiresTranspilation_=function(){function a(a,b){e?d[a]=!0:b()?(c=a,d[a]=!1):e=d[a]=!0}function b(a){try{return!!eval(a)}catch(h){return!1}}\nvar c=\"es3\",d={es3:!1},e=!1,f=goog.global.navigator&&goog.global.navigator.userAgent?goog.global.navigator.userAgent:\"\";a(\"es5\",function(){return b(\"[1,].length==1\")});a(\"es6\",function(){return f.match(/Edge\\/(\\d+)(\\.\\d)*/i)?!1:b('(()=>{\"use strict\";class X{constructor(){if(new.target!=String)throw 1;this.x=42}}let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof String))throw 1;for(const a of[2,3]){if(a==2)continue;function f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()==3}})()')});\na(\"es7\",function(){return b(\"2 ** 2 == 4\")});a(\"es8\",function(){return b(\"async () => 1, true\")});a(\"es9\",function(){return b(\"({...rest} = {}), true\")});a(\"es_next\",function(){return!1});return{target:c,map:d}},goog.Transpiler.prototype.needsTranspile=function(a,b){if(\"always\"==goog.TRANSPILE)return!0;if(\"never\"==goog.TRANSPILE)return!1;if(!this.requiresTranspilation_){var c=this.createRequiresTranspilation_();this.requiresTranspilation_=c.map;this.transpilationTarget_=this.transpilationTarget_||\nc.target}if(a in this.requiresTranspilation_)return this.requiresTranspilation_[a]?!0:!goog.inHtmlDocument_()||\"es6\"!=b||\"noModule\"in goog.global.document.createElement(\"script\")?!1:!0;throw Error(\"Unknown language mode: \"+a);},goog.Transpiler.prototype.transpile=function(a,b){return goog.transpile_(a,b,this.transpilationTarget_)},goog.transpiler_=new goog.Transpiler,goog.protectScriptTag_=function(a){return a.replace(/<\\/(SCRIPT)/ig,\"\\\\x3c/$1\")},goog.DebugLoader_=function(){this.dependencies_={};\nthis.idToPath_={};this.written_={};this.loadingDeps_=[];this.depsToLoad_=[];this.paused_=!1;this.factory_=new goog.DependencyFactory(goog.transpiler_);this.deferredCallbacks_={};this.deferredQueue_=[]},goog.DebugLoader_.prototype.bootstrap=function(a,b){function c(){d&&(goog.global.setTimeout(d,0),d=null)}var d=b;if(a.length){b=[];for(var e=0;e<a.length;e++){var f=this.getPathFromDeps_(a[e]);if(!f)throw Error(\"Unregonized namespace: \"+a[e]);b.push(this.dependencies_[f])}f=goog.require;var g=0;for(e=\n0;e<a.length;e++)f(a[e]),b[e].onLoad(function(){++g==a.length&&c()})}else c()},goog.DebugLoader_.prototype.loadClosureDeps=function(){this.depsToLoad_.push(this.factory_.createDependency(goog.normalizePath_(goog.basePath+\"deps.js\"),\"deps.js\",[],[],{},!1));this.loadDeps_()},goog.DebugLoader_.prototype.requested=function(a,b){(a=this.getPathFromDeps_(a))&&(b||this.areDepsLoaded_(this.dependencies_[a].requires))&&(b=this.deferredCallbacks_[a])&&(delete this.deferredCallbacks_[a],b())},goog.DebugLoader_.prototype.setDependencyFactory=\nfunction(a){this.factory_=a},goog.DebugLoader_.prototype.load_=function(a){if(this.getPathFromDeps_(a)){var b=this,c=[],d=function(a){var e=b.getPathFromDeps_(a);if(!e)throw Error(\"Bad dependency path or symbol: \"+a);if(!b.written_[e]){b.written_[e]=!0;a=b.dependencies_[e];for(e=0;e<a.requires.length;e++)goog.isProvided_(a.requires[e])||d(a.requires[e]);c.push(a)}};d(a);a=!!this.depsToLoad_.length;this.depsToLoad_=this.depsToLoad_.concat(c);this.paused_||a||this.loadDeps_()}else throw a=\"goog.require could not find: \"+\na,goog.logToConsole_(a),Error(a);},goog.DebugLoader_.prototype.loadDeps_=function(){for(var a=this,b=this.paused_;this.depsToLoad_.length&&!b;)(function(){var c=!1,d=a.depsToLoad_.shift(),e=!1;a.loading_(d);var f={pause:function(){if(c)throw Error(\"Cannot call pause after the call to load.\");b=!0},resume:function(){c?a.resume_():b=!1},loaded:function(){if(e)throw Error(\"Double call to loaded.\");e=!0;a.loaded_(d)},pending:function(){for(var b=[],c=0;c<a.loadingDeps_.length;c++)b.push(a.loadingDeps_[c]);\nreturn b},setModuleState:function(a){goog.moduleLoaderState_={type:a,moduleName:\"\",declareLegacyNamespace:!1}},registerEs6ModuleExports:function(a,b,c){c&&(goog.loadedModules_[c]={exports:b,type:goog.ModuleType.ES6,moduleId:c||\"\"})},registerGoogModuleExports:function(a,b){goog.loadedModules_[a]={exports:b,type:goog.ModuleType.GOOG,moduleId:a}},clearModuleState:function(){goog.moduleLoaderState_=null},defer:function(b){if(c)throw Error(\"Cannot register with defer after the call to load.\");a.defer_(d,\nb)},areDepsLoaded:function(){return a.areDepsLoaded_(d.requires)}};try{d.load(f)}finally{c=!0}})();b&&this.pause_()},goog.DebugLoader_.prototype.pause_=function(){this.paused_=!0},goog.DebugLoader_.prototype.resume_=function(){this.paused_&&(this.paused_=!1,this.loadDeps_())},goog.DebugLoader_.prototype.loading_=function(a){this.loadingDeps_.push(a)},goog.DebugLoader_.prototype.loaded_=function(a){for(var b=0;b<this.loadingDeps_.length;b++)if(this.loadingDeps_[b]==a){this.loadingDeps_.splice(b,1);\nbreak}for(b=0;b<this.deferredQueue_.length;b++)if(this.deferredQueue_[b]==a.path){this.deferredQueue_.splice(b,1);break}if(this.loadingDeps_.length==this.deferredQueue_.length&&!this.depsToLoad_.length)for(;this.deferredQueue_.length;)this.requested(this.deferredQueue_.shift(),!0);a.loaded()},goog.DebugLoader_.prototype.areDepsLoaded_=function(a){for(var b=0;b<a.length;b++){var c=this.getPathFromDeps_(a[b]);if(!c||!(c in this.deferredCallbacks_||goog.isProvided_(a[b])))return!1}return!0},goog.DebugLoader_.prototype.getPathFromDeps_=\nfunction(a){return a in this.idToPath_?this.idToPath_[a]:a in this.dependencies_?a:null},goog.DebugLoader_.prototype.defer_=function(a,b){this.deferredCallbacks_[a.path]=b;this.deferredQueue_.push(a.path)},goog.LoadController=function(){},goog.LoadController.prototype.pause=function(){},goog.LoadController.prototype.resume=function(){},goog.LoadController.prototype.loaded=function(){},goog.LoadController.prototype.pending=function(){},goog.LoadController.prototype.registerEs6ModuleExports=function(a,\nb,c){},goog.LoadController.prototype.setModuleState=function(a){},goog.LoadController.prototype.clearModuleState=function(){},goog.LoadController.prototype.defer=function(a){},goog.LoadController.prototype.areDepsLoaded=function(){},goog.Dependency=function(a,b,c,d,e){this.path=a;this.relativePath=b;this.provides=c;this.requires=d;this.loadFlags=e;this.loaded_=!1;this.loadCallbacks_=[]},goog.Dependency.prototype.getPathName=function(){var a=this.path,b=a.indexOf(\"://\");0<=b&&(a=a.substring(b+3),b=\na.indexOf(\"/\"),0<=b&&(a=a.substring(b+1)));return a},goog.Dependency.prototype.onLoad=function(a){this.loaded_?a():this.loadCallbacks_.push(a)},goog.Dependency.prototype.loaded=function(){this.loaded_=!0;var a=this.loadCallbacks_;this.loadCallbacks_=[];for(var b=0;b<a.length;b++)a[b]()},goog.Dependency.defer_=!1,goog.Dependency.callbackMap_={},goog.Dependency.registerCallback_=function(a){var b=Math.random().toString(32);goog.Dependency.callbackMap_[b]=a;return b},goog.Dependency.unregisterCallback_=\nfunction(a){delete goog.Dependency.callbackMap_[a]},goog.Dependency.callback_=function(a,b){if(a in goog.Dependency.callbackMap_){for(var c=goog.Dependency.callbackMap_[a],d=[],e=1;e<arguments.length;e++)d.push(arguments[e]);c.apply(void 0,d)}else throw Error(\"Callback key \"+a+\" does not exist (was base.js loaded more than once?).\");},goog.Dependency.prototype.load=function(a){if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var b=\ngoog.global.document;if(\"complete\"==b.readyState&&!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING){if(/\\bdeps.js$/.test(this.path)){a.loaded();return}throw Error('Cannot write \"'+this.path+'\" after document load');}if(!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING&&goog.isDocumentLoading_()){var c=goog.Dependency.registerCallback_(function(b){goog.DebugLoader_.IS_OLD_IE_&&\"complete\"!=b.readyState||(goog.Dependency.unregisterCallback_(c),a.loaded())}),d=!goog.DebugLoader_.IS_OLD_IE_&&goog.getScriptNonce()?\n' nonce=\"'+goog.getScriptNonce()+'\"':\"\";d='<script src=\"'+this.path+'\" '+(goog.DebugLoader_.IS_OLD_IE_?\"onreadystatechange\":\"onload\")+\"=\\\"goog.Dependency.callback_('\"+c+'\\', this)\" type=\"text/javascript\" '+(goog.Dependency.defer_?\"defer\":\"\")+d+\">\\x3c/script>\";b.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(d):d)}else{var e=b.createElement(\"script\");e.defer=goog.Dependency.defer_;e.async=!1;e.type=\"text/javascript\";(d=goog.getScriptNonce())&&e.setAttribute(\"nonce\",d);goog.DebugLoader_.IS_OLD_IE_?\n(a.pause(),e.onreadystatechange=function(){if(\"loaded\"==e.readyState||\"complete\"==e.readyState)a.loaded(),a.resume()}):e.onload=function(){e.onload=null;a.loaded()};e.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path):this.path;b.head.appendChild(e)}}else goog.logToConsole_(\"Cannot use default debug loader outside of HTML documents.\"),\"deps.js\"==this.relativePath?(goog.logToConsole_(\"Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, or setting CLOSURE_NO_DEPS to true.\"),\na.loaded()):a.pause()},goog.Es6ModuleDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,b,c,d,e)},goog.inherits(goog.Es6ModuleDependency,goog.Dependency),goog.Es6ModuleDependency.prototype.load=function(a){function b(a,b){a=b?'<script type=\"module\" crossorigin>'+b+\"\\x3c/script>\":'<script type=\"module\" crossorigin src=\"'+a+'\">\\x3c/script>';d.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(a):a)}function c(a,b){var c=d.createElement(\"script\");c.defer=!0;c.async=!1;c.type=\n\"module\";c.setAttribute(\"crossorigin\",!0);var e=goog.getScriptNonce();e&&c.setAttribute(\"nonce\",e);b?c.textContent=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScript(b):b:c.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(a):a;d.head.appendChild(c)}if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var d=goog.global.document,e=this;if(goog.isDocumentLoading_()){var f=b;goog.Dependency.defer_=\n!0}else f=c;var g=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(g);a.setModuleState(goog.ModuleType.ES6)});f(void 0,'goog.Dependency.callback_(\"'+g+'\")');f(this.path,void 0);var h=goog.Dependency.registerCallback_(function(b){goog.Dependency.unregisterCallback_(h);a.registerEs6ModuleExports(e.path,b,goog.moduleLoaderState_.moduleName)});f(void 0,'import * as m from \"'+this.path+'\"; goog.Dependency.callback_(\"'+h+'\", m)');var k=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(k);\na.clearModuleState();a.loaded()});f(void 0,'goog.Dependency.callback_(\"'+k+'\")')}else goog.logToConsole_(\"Cannot use default debug loader outside of HTML documents.\"),a.pause()},goog.TransformedDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,b,c,d,e);this.contents_=null;this.lazyFetch_=!goog.inHtmlDocument_()||!(\"noModule\"in goog.global.document.createElement(\"script\"))},goog.inherits(goog.TransformedDependency,goog.Dependency),goog.TransformedDependency.prototype.load=function(a){function b(){e.contents_=\ngoog.loadFileSync_(e.path);e.contents_&&(e.contents_=e.transform(e.contents_),e.contents_&&(e.contents_+=\"\\n//# sourceURL=\"+e.path))}function c(){e.lazyFetch_&&b();if(e.contents_){f&&a.setModuleState(goog.ModuleType.ES6);try{var c=e.contents_;e.contents_=null;goog.globalEval(c);if(f)var d=goog.moduleLoaderState_.moduleName}finally{f&&a.clearModuleState()}f&&goog.global.$jscomp.require.ensure([e.getPathName()],function(){a.registerEs6ModuleExports(e.path,goog.global.$jscomp.require(e.getPathName()),\nd)});a.loaded()}}function d(){var a=goog.global.document,b=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(b);c()}),d='<script type=\"text/javascript\">'+goog.protectScriptTag_('goog.Dependency.callback_(\"'+b+'\");')+\"\\x3c/script>\";a.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(d):d)}var e=this;if(goog.global.CLOSURE_IMPORT_SCRIPT)b(),this.contents_&&goog.global.CLOSURE_IMPORT_SCRIPT(\"\",this.contents_)?(this.contents_=null,a.loaded()):a.pause();\nelse{var f=this.loadFlags.module==goog.ModuleType.ES6;this.lazyFetch_||b();var g=1<a.pending().length,h=g&&goog.DebugLoader_.IS_OLD_IE_;g=goog.Dependency.defer_&&(g||goog.isDocumentLoading_());if(h||g)a.defer(function(){c()});else{var k=goog.global.document;h=goog.inHtmlDocument_()&&\"ActiveXObject\"in goog.global;if(f&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()&&!h){goog.Dependency.defer_=!0;a.pause();var l=k.onreadystatechange;k.onreadystatechange=function(){\"interactive\"==k.readyState&&(k.onreadystatechange=\nl,c(),a.resume());goog.isFunction(l)&&l.apply(void 0,arguments)}}else!goog.DebugLoader_.IS_OLD_IE_&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()?d():c()}}},goog.TransformedDependency.prototype.transform=function(a){},goog.TranspiledDependency=function(a,b,c,d,e,f){goog.TransformedDependency.call(this,a,b,c,d,e);this.transpiler=f},goog.inherits(goog.TranspiledDependency,goog.TransformedDependency),goog.TranspiledDependency.prototype.transform=function(a){return this.transpiler.transpile(a,this.getPathName())},\ngoog.PreTranspiledEs6ModuleDependency=function(a,b,c,d,e){goog.TransformedDependency.call(this,a,b,c,d,e)},goog.inherits(goog.PreTranspiledEs6ModuleDependency,goog.TransformedDependency),goog.PreTranspiledEs6ModuleDependency.prototype.transform=function(a){return a},goog.GoogModuleDependency=function(a,b,c,d,e,f,g){goog.TransformedDependency.call(this,a,b,c,d,e);this.needsTranspile_=f;this.transpiler_=g},goog.inherits(goog.GoogModuleDependency,goog.TransformedDependency),goog.GoogModuleDependency.prototype.transform=\nfunction(a){this.needsTranspile_&&(a=this.transpiler_.transpile(a,this.getPathName()));return goog.LOAD_MODULE_USING_EVAL&&void 0!==goog.global.JSON?\"goog.loadModule(\"+goog.global.JSON.stringify(a+\"\\n//# sourceURL=\"+this.path+\"\\n\")+\");\":'goog.loadModule(function(exports) {\"use strict\";'+a+\"\\n;return exports});\\n//# sourceURL=\"+this.path+\"\\n\"},goog.DebugLoader_.IS_OLD_IE_=!(goog.global.atob||!goog.global.document||!goog.global.document.all),goog.DebugLoader_.prototype.addDependency=function(a,b,c,\nd){b=b||[];a=a.replace(/\\\\/g,\"/\");var e=goog.normalizePath_(goog.basePath+a);d&&\"boolean\"!==typeof d||(d=d?{module:goog.ModuleType.GOOG}:{});c=this.factory_.createDependency(e,a,b,c,d,goog.transpiler_.needsTranspile(d.lang||\"es3\",d.module));this.dependencies_[e]=c;for(c=0;c<b.length;c++)this.idToPath_[b[c]]=e;this.idToPath_[a]=e},goog.DependencyFactory=function(a){this.transpiler=a},goog.DependencyFactory.prototype.createDependency=function(a,b,c,d,e,f){return e.module==goog.ModuleType.GOOG?new goog.GoogModuleDependency(a,\nb,c,d,e,f,this.transpiler):f?new goog.TranspiledDependency(a,b,c,d,e,this.transpiler):e.module==goog.ModuleType.ES6?\"never\"==goog.TRANSPILE&&goog.ASSUME_ES_MODULES_TRANSPILED?new goog.PreTranspiledEs6ModuleDependency(a,b,c,d,e):new goog.Es6ModuleDependency(a,b,c,d,e):new goog.Dependency(a,b,c,d,e)},goog.debugLoader_=new goog.DebugLoader_,goog.loadClosureDeps=function(){goog.debugLoader_.loadClosureDeps()},goog.setDependencyFactory=function(a){goog.debugLoader_.setDependencyFactory(a)},goog.global.CLOSURE_NO_DEPS||\ngoog.debugLoader_.loadClosureDeps(),goog.bootstrap=function(a,b){goog.debugLoader_.bootstrap(a,b)});goog.TRUSTED_TYPES_POLICY_NAME=\"\";goog.identity_=function(a){return a};goog.createTrustedTypesPolicy=function(a){var b=null,c=goog.global.trustedTypes||goog.global.TrustedTypes;if(!c||!c.createPolicy)return b;try{b=c.createPolicy(a,{createHTML:goog.identity_,createScript:goog.identity_,createScriptURL:goog.identity_,createURL:goog.identity_})}catch(d){goog.logToConsole_(d.message)}return b};\ngoog.TRUSTED_TYPES_POLICY_=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+\"#base\"):null;goog.object={};goog.object.is=function(a,b){return a===b?0!==a||1/a===1/b:a!==a&&b!==b};goog.object.forEach=function(a,b,c){for(var d in a)b.call(c,a[d],d,a)};goog.object.filter=function(a,b,c){var d={},e;for(e in a)b.call(c,a[e],e,a)&&(d[e]=a[e]);return d};goog.object.map=function(a,b,c){var d={},e;for(e in a)d[e]=b.call(c,a[e],e,a);return d};goog.object.some=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return!0;return!1};\ngoog.object.every=function(a,b,c){for(var d in a)if(!b.call(c,a[d],d,a))return!1;return!0};goog.object.getCount=function(a){var b=0,c;for(c in a)b++;return b};goog.object.getAnyKey=function(a){for(var b in a)return b};goog.object.getAnyValue=function(a){for(var b in a)return a[b]};goog.object.contains=function(a,b){return goog.object.containsValue(a,b)};goog.object.getValues=function(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b};\ngoog.object.getKeys=function(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b};goog.object.getValueByKeys=function(a,b){var c=goog.isArrayLike(b),d=c?b:arguments;for(c=c?0:1;c<d.length;c++){if(null==a)return;a=a[d[c]]}return a};goog.object.containsKey=function(a,b){return null!==a&&b in a};goog.object.containsValue=function(a,b){for(var c in a)if(a[c]==b)return!0;return!1};goog.object.findKey=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return d};\ngoog.object.findValue=function(a,b,c){return(b=goog.object.findKey(a,b,c))&&a[b]};goog.object.isEmpty=function(a){for(var b in a)return!1;return!0};goog.object.clear=function(a){for(var b in a)delete a[b]};goog.object.remove=function(a,b){var c;(c=b in a)&&delete a[b];return c};goog.object.add=function(a,b,c){if(null!==a&&b in a)throw Error('The object already contains the key \"'+b+'\"');goog.object.set(a,b,c)};goog.object.get=function(a,b,c){return null!==a&&b in a?a[b]:c};\ngoog.object.set=function(a,b,c){a[b]=c};goog.object.setIfUndefined=function(a,b,c){return b in a?a[b]:a[b]=c};goog.object.setWithReturnValueIfNotSet=function(a,b,c){if(b in a)return a[b];c=c();return a[b]=c};goog.object.equals=function(a,b){for(var c in a)if(!(c in b)||a[c]!==b[c])return!1;for(var d in b)if(!(d in a))return!1;return!0};goog.object.clone=function(a){var b={},c;for(c in a)b[c]=a[c];return b};\ngoog.object.unsafeClone=function(a){var b=goog.typeOf(a);if(\"object\"==b||\"array\"==b){if(goog.isFunction(a.clone))return a.clone();b=\"array\"==b?[]:{};for(var c in a)b[c]=goog.object.unsafeClone(a[c]);return b}return a};goog.object.transpose=function(a){var b={},c;for(c in a)b[a[c]]=c;return b};goog.object.PROTOTYPE_FIELDS_=\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\".split(\" \");\ngoog.object.extend=function(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<goog.object.PROTOTYPE_FIELDS_.length;f++)c=goog.object.PROTOTYPE_FIELDS_[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};\ngoog.object.create=function(a){var b=arguments.length;if(1==b&&Array.isArray(arguments[0]))return goog.object.create.apply(null,arguments[0]);if(b%2)throw Error(\"Uneven number of arguments\");for(var c={},d=0;d<b;d+=2)c[arguments[d]]=arguments[d+1];return c};goog.object.createSet=function(a){var b=arguments.length;if(1==b&&Array.isArray(arguments[0]))return goog.object.createSet.apply(null,arguments[0]);for(var c={},d=0;d<b;d++)c[arguments[d]]=!0;return c};\ngoog.object.createImmutableView=function(a){var b=a;Object.isFrozen&&!Object.isFrozen(a)&&(b=Object.create(a),Object.freeze(b));return b};goog.object.isImmutableView=function(a){return!!Object.isFrozen&&Object.isFrozen(a)};\ngoog.object.getAllPropertyNames=function(a,b,c){if(!a)return[];if(!Object.getOwnPropertyNames||!Object.getPrototypeOf)return goog.object.getKeys(a);for(var d={};a&&(a!==Object.prototype||b)&&(a!==Function.prototype||c);){for(var e=Object.getOwnPropertyNames(a),f=0;f<e.length;f++)d[e[f]]=!0;a=Object.getPrototypeOf(a)}return goog.object.getKeys(d)};goog.object.getSuperClass=function(a){return(a=Object.getPrototypeOf(a.prototype))&&a.constructor};var jspb={asserts:{}};jspb.asserts.doAssertFailure=function(a,b,c,d){var e=\"Assertion failed\";if(c){e+=\": \"+c;var f=d}else a&&(e+=\": \"+a,f=b);throw Error(\"\"+e,f||[]);};jspb.asserts.assert=function(a,b,c){for(var d=[],e=2;e<arguments.length;++e)d[e-2]=arguments[e];a||jspb.asserts.doAssertFailure(\"\",null,b,d);return a};\njspb.asserts.assertString=function(a,b,c){for(var d=[],e=2;e<arguments.length;++e)d[e-2]=arguments[e];\"string\"!==typeof a&&jspb.asserts.doAssertFailure(\"Expected string but got %s: %s.\",[goog.typeOf(a),a],b,d);return a};jspb.asserts.assertArray=function(a,b,c){for(var d=[],e=2;e<arguments.length;++e)d[e-2]=arguments[e];Array.isArray(a)||jspb.asserts.doAssertFailure(\"Expected array but got %s: %s.\",[goog.typeOf(a),a],b,d);return a};\njspb.asserts.fail=function(a,b){for(var c=[],d=1;d<arguments.length;++d)c[d-1]=arguments[d];throw Error(\"Failure\"+(a?\": \"+a:\"\"),c);};jspb.asserts.assertInstanceof=function(a,b,c,d){for(var e=[],f=3;f<arguments.length;++f)e[f-3]=arguments[f];a instanceof b||jspb.asserts.doAssertFailure(\"Expected instanceof %s but got %s.\",[jspb.asserts.getType(b),jspb.asserts.getType(a)],c,e);return a};\njspb.asserts.getType=function(a){return a instanceof Function?a.displayName||a.name||\"unknown type name\":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?\"null\":typeof a};jspb.BinaryConstants={};jspb.ConstBinaryMessage=function(){};jspb.BinaryMessage=function(){};jspb.BinaryConstants.FieldType={INVALID:-1,DOUBLE:1,FLOAT:2,INT64:3,UINT64:4,INT32:5,FIXED64:6,FIXED32:7,BOOL:8,STRING:9,GROUP:10,MESSAGE:11,BYTES:12,UINT32:13,ENUM:14,SFIXED32:15,SFIXED64:16,SINT32:17,SINT64:18,FHASH64:30,VHASH64:31};jspb.BinaryConstants.WireType={INVALID:-1,VARINT:0,FIXED64:1,DELIMITED:2,START_GROUP:3,END_GROUP:4,FIXED32:5};\njspb.BinaryConstants.FieldTypeToWireType=function(a){var b=jspb.BinaryConstants.FieldType,c=jspb.BinaryConstants.WireType;switch(a){case b.INT32:case b.INT64:case b.UINT32:case b.UINT64:case b.SINT32:case b.SINT64:case b.BOOL:case b.ENUM:case b.VHASH64:return c.VARINT;case b.DOUBLE:case b.FIXED64:case b.SFIXED64:case b.FHASH64:return c.FIXED64;case b.STRING:case b.MESSAGE:case b.BYTES:return c.DELIMITED;case b.FLOAT:case b.FIXED32:case b.SFIXED32:return c.FIXED32;default:return c.INVALID}};\njspb.BinaryConstants.INVALID_FIELD_NUMBER=-1;jspb.BinaryConstants.FLOAT32_EPS=1.401298464324817E-45;jspb.BinaryConstants.FLOAT32_MIN=1.1754943508222875E-38;jspb.BinaryConstants.FLOAT32_MAX=3.4028234663852886E38;jspb.BinaryConstants.FLOAT64_EPS=4.9E-324;jspb.BinaryConstants.FLOAT64_MIN=2.2250738585072014E-308;jspb.BinaryConstants.FLOAT64_MAX=1.7976931348623157E308;jspb.BinaryConstants.TWO_TO_20=1048576;jspb.BinaryConstants.TWO_TO_23=8388608;jspb.BinaryConstants.TWO_TO_31=2147483648;\njspb.BinaryConstants.TWO_TO_32=4294967296;jspb.BinaryConstants.TWO_TO_52=4503599627370496;jspb.BinaryConstants.TWO_TO_63=0x7fffffffffffffff;jspb.BinaryConstants.TWO_TO_64=1.8446744073709552E19;jspb.BinaryConstants.ZERO_HASH=\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";goog.debug={};goog.debug.Error=function(a){if(Error.captureStackTrace)Error.captureStackTrace(this,goog.debug.Error);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a));this.reportErrorToServer=!0};goog.inherits(goog.debug.Error,Error);goog.debug.Error.prototype.name=\"CustomError\";goog.dom={};goog.dom.NodeType={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,ENTITY_REFERENCE:5,ENTITY:6,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9,DOCUMENT_TYPE:10,DOCUMENT_FRAGMENT:11,NOTATION:12};goog.asserts={};goog.asserts.ENABLE_ASSERTS=goog.DEBUG;goog.asserts.AssertionError=function(a,b){goog.debug.Error.call(this,goog.asserts.subs_(a,b));this.messagePattern=a};goog.inherits(goog.asserts.AssertionError,goog.debug.Error);goog.asserts.AssertionError.prototype.name=\"AssertionError\";goog.asserts.DEFAULT_ERROR_HANDLER=function(a){throw a;};goog.asserts.errorHandler_=goog.asserts.DEFAULT_ERROR_HANDLER;\ngoog.asserts.subs_=function(a,b){a=a.split(\"%s\");for(var c=\"\",d=a.length-1,e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:\"%s\");return c+a[d]};goog.asserts.doAssertFailure_=function(a,b,c,d){var e=\"Assertion failed\";if(c){e+=\": \"+c;var f=d}else a&&(e+=\": \"+a,f=b);a=new goog.asserts.AssertionError(\"\"+e,f||[]);goog.asserts.errorHandler_(a)};goog.asserts.setErrorHandler=function(a){goog.asserts.ENABLE_ASSERTS&&(goog.asserts.errorHandler_=a)};\ngoog.asserts.assert=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!a&&goog.asserts.doAssertFailure_(\"\",null,b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertExists=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&null==a&&goog.asserts.doAssertFailure_(\"Expected to exist: %s.\",[a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.fail=function(a,b){goog.asserts.ENABLE_ASSERTS&&goog.asserts.errorHandler_(new goog.asserts.AssertionError(\"Failure\"+(a?\": \"+a:\"\"),Array.prototype.slice.call(arguments,1)))};goog.asserts.assertNumber=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&\"number\"!==typeof a&&goog.asserts.doAssertFailure_(\"Expected number but got %s: %s.\",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertString=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&\"string\"!==typeof a&&goog.asserts.doAssertFailure_(\"Expected string but got %s: %s.\",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertFunction=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isFunction(a)&&goog.asserts.doAssertFailure_(\"Expected function but got %s: %s.\",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertObject=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isObject(a)&&goog.asserts.doAssertFailure_(\"Expected object but got %s: %s.\",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertArray=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!Array.isArray(a)&&goog.asserts.doAssertFailure_(\"Expected array but got %s: %s.\",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertBoolean=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&\"boolean\"!==typeof a&&goog.asserts.doAssertFailure_(\"Expected boolean but got %s: %s.\",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertElement=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||goog.isObject(a)&&a.nodeType==goog.dom.NodeType.ELEMENT||goog.asserts.doAssertFailure_(\"Expected Element but got %s: %s.\",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertInstanceof=function(a,b,c,d){!goog.asserts.ENABLE_ASSERTS||a instanceof b||goog.asserts.doAssertFailure_(\"Expected instanceof %s but got %s.\",[goog.asserts.getType_(b),goog.asserts.getType_(a)],c,Array.prototype.slice.call(arguments,3));return a};goog.asserts.assertFinite=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||\"number\"==typeof a&&isFinite(a)||goog.asserts.doAssertFailure_(\"Expected %s to be a finite number but it is not.\",[a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertObjectPrototypeIsIntact=function(){for(var a in Object.prototype)goog.asserts.fail(a+\" should not be enumerable in Object.prototype.\")};goog.asserts.getType_=function(a){return a instanceof Function?a.displayName||a.name||\"unknown type name\":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?\"null\":typeof a};goog.array={};goog.NATIVE_ARRAY_PROTOTYPES=goog.TRUSTED_SITE;goog.array.ASSUME_NATIVE_FUNCTIONS=2012<goog.FEATURESET_YEAR;goog.array.peek=function(a){return a[a.length-1]};goog.array.last=goog.array.peek;\ngoog.array.indexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.indexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(\"string\"===typeof a)return\"string\"!==typeof b||1!=b.length?-1:a.indexOf(b,c);for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1};\ngoog.array.lastIndexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.lastIndexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.lastIndexOf.call(a,b,null==c?a.length-1:c)}:function(a,b,c){c=null==c?a.length-1:c;0>c&&(c=Math.max(0,a.length+c));if(\"string\"===typeof a)return\"string\"!==typeof b||1!=b.length?-1:a.lastIndexOf(b,c);for(;0<=c;c--)if(c in a&&a[c]===b)return c;return-1};\ngoog.array.forEach=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.forEach)?function(a,b,c){goog.asserts.assert(null!=a.length);Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=\"string\"===typeof a?a.split(\"\"):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};goog.array.forEachRight=function(a,b,c){var d=a.length,e=\"string\"===typeof a?a.split(\"\"):a;for(--d;0<=d;--d)d in e&&b.call(c,e[d],d,a)};\ngoog.array.filter=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.filter)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.filter.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=[],f=0,g=\"string\"===typeof a?a.split(\"\"):a,h=0;h<d;h++)if(h in g){var k=g[h];b.call(c,k,h,a)&&(e[f++]=k)}return e};\ngoog.array.map=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.map)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.map.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=Array(d),f=\"string\"===typeof a?a.split(\"\"):a,g=0;g<d;g++)g in f&&(e[g]=b.call(c,f[g],g,a));return e};\ngoog.array.reduce=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduce)?function(a,b,c,d){goog.asserts.assert(null!=a.length);d&&(b=goog.bind(b,d));return Array.prototype.reduce.call(a,b,c)}:function(a,b,c,d){var e=c;goog.array.forEach(a,function(c,g){e=b.call(d,e,c,g,a)});return e};\ngoog.array.reduceRight=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduceRight)?function(a,b,c,d){goog.asserts.assert(null!=a.length);goog.asserts.assert(null!=b);d&&(b=goog.bind(b,d));return Array.prototype.reduceRight.call(a,b,c)}:function(a,b,c,d){var e=c;goog.array.forEachRight(a,function(c,g){e=b.call(d,e,c,g,a)});return e};\ngoog.array.some=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.some)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.some.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=\"string\"===typeof a?a.split(\"\"):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return!0;return!1};\ngoog.array.every=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.every)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.every.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=\"string\"===typeof a?a.split(\"\"):a,f=0;f<d;f++)if(f in e&&!b.call(c,e[f],f,a))return!1;return!0};goog.array.count=function(a,b,c){var d=0;goog.array.forEach(a,function(a,f,g){b.call(c,a,f,g)&&++d},c);return d};\ngoog.array.find=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0>b?null:\"string\"===typeof a?a.charAt(b):a[b]};goog.array.findIndex=function(a,b,c){for(var d=a.length,e=\"string\"===typeof a?a.split(\"\"):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return f;return-1};goog.array.findRight=function(a,b,c){b=goog.array.findIndexRight(a,b,c);return 0>b?null:\"string\"===typeof a?a.charAt(b):a[b]};\ngoog.array.findIndexRight=function(a,b,c){var d=a.length,e=\"string\"===typeof a?a.split(\"\"):a;for(--d;0<=d;d--)if(d in e&&b.call(c,e[d],d,a))return d;return-1};goog.array.contains=function(a,b){return 0<=goog.array.indexOf(a,b)};goog.array.isEmpty=function(a){return 0==a.length};goog.array.clear=function(a){if(!Array.isArray(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0};goog.array.insert=function(a,b){goog.array.contains(a,b)||a.push(b)};\ngoog.array.insertAt=function(a,b,c){goog.array.splice(a,c,0,b)};goog.array.insertArrayAt=function(a,b,c){goog.partial(goog.array.splice,a,c,0).apply(null,b)};goog.array.insertBefore=function(a,b,c){var d;2==arguments.length||0>(d=goog.array.indexOf(a,c))?a.push(b):goog.array.insertAt(a,b,d)};goog.array.remove=function(a,b){b=goog.array.indexOf(a,b);var c;(c=0<=b)&&goog.array.removeAt(a,b);return c};\ngoog.array.removeLast=function(a,b){b=goog.array.lastIndexOf(a,b);return 0<=b?(goog.array.removeAt(a,b),!0):!1};goog.array.removeAt=function(a,b){goog.asserts.assert(null!=a.length);return 1==Array.prototype.splice.call(a,b,1).length};goog.array.removeIf=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0<=b?(goog.array.removeAt(a,b),!0):!1};goog.array.removeAllIf=function(a,b,c){var d=0;goog.array.forEachRight(a,function(e,f){b.call(c,e,f,a)&&goog.array.removeAt(a,f)&&d++});return d};\ngoog.array.concat=function(a){return Array.prototype.concat.apply([],arguments)};goog.array.join=function(a){return Array.prototype.concat.apply([],arguments)};goog.array.toArray=function(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};goog.array.clone=goog.array.toArray;goog.array.extend=function(a,b){for(var c=1;c<arguments.length;c++){var d=arguments[c];if(goog.isArrayLike(d)){var e=a.length||0,f=d.length||0;a.length=e+f;for(var g=0;g<f;g++)a[e+g]=d[g]}else a.push(d)}};\ngoog.array.splice=function(a,b,c,d){goog.asserts.assert(null!=a.length);return Array.prototype.splice.apply(a,goog.array.slice(arguments,1))};goog.array.slice=function(a,b,c){goog.asserts.assert(null!=a.length);return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,c)};\ngoog.array.removeDuplicates=function(a,b,c){b=b||a;var d=function(a){return goog.isObject(a)?\"o\"+goog.getUid(a):(typeof a).charAt(0)+a};c=c||d;d={};for(var e=0,f=0;f<a.length;){var g=a[f++],h=c(g);Object.prototype.hasOwnProperty.call(d,h)||(d[h]=!0,b[e++]=g)}b.length=e};goog.array.binarySearch=function(a,b,c){return goog.array.binarySearch_(a,c||goog.array.defaultCompare,!1,b)};goog.array.binarySelect=function(a,b,c){return goog.array.binarySearch_(a,b,!0,void 0,c)};\ngoog.array.binarySearch_=function(a,b,c,d,e){for(var f=0,g=a.length,h;f<g;){var k=f+(g-f>>>1);var l=c?b.call(e,a[k],k,a):b(d,a[k]);0<l?f=k+1:(g=k,h=!l)}return h?f:-f-1};goog.array.sort=function(a,b){a.sort(b||goog.array.defaultCompare)};goog.array.stableSort=function(a,b){for(var c=Array(a.length),d=0;d<a.length;d++)c[d]={index:d,value:a[d]};var e=b||goog.array.defaultCompare;goog.array.sort(c,function(a,b){return e(a.value,b.value)||a.index-b.index});for(d=0;d<a.length;d++)a[d]=c[d].value};\ngoog.array.sortByKey=function(a,b,c){var d=c||goog.array.defaultCompare;goog.array.sort(a,function(a,c){return d(b(a),b(c))})};goog.array.sortObjectsByKey=function(a,b,c){goog.array.sortByKey(a,function(a){return a[b]},c)};goog.array.isSorted=function(a,b,c){b=b||goog.array.defaultCompare;for(var d=1;d<a.length;d++){var e=b(a[d-1],a[d]);if(0<e||0==e&&c)return!1}return!0};\ngoog.array.equals=function(a,b,c){if(!goog.isArrayLike(a)||!goog.isArrayLike(b)||a.length!=b.length)return!1;var d=a.length;c=c||goog.array.defaultCompareEquality;for(var e=0;e<d;e++)if(!c(a[e],b[e]))return!1;return!0};goog.array.compare3=function(a,b,c){c=c||goog.array.defaultCompare;for(var d=Math.min(a.length,b.length),e=0;e<d;e++){var f=c(a[e],b[e]);if(0!=f)return f}return goog.array.defaultCompare(a.length,b.length)};goog.array.defaultCompare=function(a,b){return a>b?1:a<b?-1:0};\ngoog.array.inverseDefaultCompare=function(a,b){return-goog.array.defaultCompare(a,b)};goog.array.defaultCompareEquality=function(a,b){return a===b};goog.array.binaryInsert=function(a,b,c){c=goog.array.binarySearch(a,b,c);return 0>c?(goog.array.insertAt(a,b,-(c+1)),!0):!1};goog.array.binaryRemove=function(a,b,c){b=goog.array.binarySearch(a,b,c);return 0<=b?goog.array.removeAt(a,b):!1};\ngoog.array.bucket=function(a,b,c){for(var d={},e=0;e<a.length;e++){var f=a[e],g=b.call(c,f,e,a);void 0!==g&&(d[g]||(d[g]=[])).push(f)}return d};goog.array.toObject=function(a,b,c){var d={};goog.array.forEach(a,function(e,f){d[b.call(c,e,f,a)]=e});return d};goog.array.range=function(a,b,c){var d=[],e=0,f=a;c=c||1;void 0!==b&&(e=a,f=b);if(0>c*(f-e))return[];if(0<c)for(a=e;a<f;a+=c)d.push(a);else for(a=e;a>f;a+=c)d.push(a);return d};goog.array.repeat=function(a,b){for(var c=[],d=0;d<b;d++)c[d]=a;return c};\ngoog.array.flatten=function(a){for(var b=[],c=0;c<arguments.length;c++){var d=arguments[c];if(Array.isArray(d))for(var e=0;e<d.length;e+=8192){var f=goog.array.slice(d,e,e+8192);f=goog.array.flatten.apply(null,f);for(var g=0;g<f.length;g++)b.push(f[g])}else b.push(d)}return b};goog.array.rotate=function(a,b){goog.asserts.assert(null!=a.length);a.length&&(b%=a.length,0<b?Array.prototype.unshift.apply(a,a.splice(-b,b)):0>b&&Array.prototype.push.apply(a,a.splice(0,-b)));return a};\ngoog.array.moveItem=function(a,b,c){goog.asserts.assert(0<=b&&b<a.length);goog.asserts.assert(0<=c&&c<a.length);b=Array.prototype.splice.call(a,b,1);Array.prototype.splice.call(a,c,0,b[0])};goog.array.zip=function(a){if(!arguments.length)return[];for(var b=[],c=arguments[0].length,d=1;d<arguments.length;d++)arguments[d].length<c&&(c=arguments[d].length);for(d=0;d<c;d++){for(var e=[],f=0;f<arguments.length;f++)e.push(arguments[f][d]);b.push(e)}return b};\ngoog.array.shuffle=function(a,b){b=b||Math.random;for(var c=a.length-1;0<c;c--){var d=Math.floor(b()*(c+1)),e=a[c];a[c]=a[d];a[d]=e}};goog.array.copyByIndex=function(a,b){var c=[];goog.array.forEach(b,function(b){c.push(a[b])});return c};goog.array.concatMap=function(a,b,c){return goog.array.concat.apply([],goog.array.map(a,b,c))};goog.crypt={};goog.crypt.stringToByteArray=function(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);255<e&&(b[c++]=e&255,e>>=8);b[c++]=e}return b};goog.crypt.byteArrayToString=function(a){if(8192>=a.length)return String.fromCharCode.apply(null,a);for(var b=\"\",c=0;c<a.length;c+=8192){var d=goog.array.slice(a,c,c+8192);b+=String.fromCharCode.apply(null,d)}return b};\ngoog.crypt.byteArrayToHex=function(a,b){return goog.array.map(a,function(a){a=a.toString(16);return 1<a.length?a:\"0\"+a}).join(b||\"\")};goog.crypt.hexToByteArray=function(a){goog.asserts.assert(0==a.length%2,\"Key string length must be multiple of 2\");for(var b=[],c=0;c<a.length;c+=2)b.push(parseInt(a.substring(c,c+2),16));return b};\ngoog.crypt.stringToUtf8ByteArray=function(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);128>e?b[c++]=e:(2048>e?b[c++]=e>>6|192:(55296==(e&64512)&&d+1<a.length&&56320==(a.charCodeAt(d+1)&64512)?(e=65536+((e&1023)<<10)+(a.charCodeAt(++d)&1023),b[c++]=e>>18|240,b[c++]=e>>12&63|128):b[c++]=e>>12|224,b[c++]=e>>6&63|128),b[c++]=e&63|128)}return b};\ngoog.crypt.utf8ByteArrayToString=function(a){for(var b=[],c=0,d=0;c<a.length;){var e=a[c++];if(128>e)b[d++]=String.fromCharCode(e);else if(191<e&&224>e){var f=a[c++];b[d++]=String.fromCharCode((e&31)<<6|f&63)}else if(239<e&&365>e){f=a[c++];var g=a[c++],h=a[c++];e=((e&7)<<18|(f&63)<<12|(g&63)<<6|h&63)-65536;b[d++]=String.fromCharCode(55296+(e>>10));b[d++]=String.fromCharCode(56320+(e&1023))}else f=a[c++],g=a[c++],b[d++]=String.fromCharCode((e&15)<<12|(f&63)<<6|g&63)}return b.join(\"\")};\ngoog.crypt.xorByteArray=function(a,b){goog.asserts.assert(a.length==b.length,\"XOR array lengths must match\");for(var c=[],d=0;d<a.length;d++)c.push(a[d]^b[d]);return c};goog.dom.asserts={};goog.dom.asserts.assertIsLocation=function(a){if(goog.asserts.ENABLE_ASSERTS){var b=goog.dom.asserts.getWindow_(a);b&&(!a||!(a instanceof b.Location)&&a instanceof b.Element)&&goog.asserts.fail(\"Argument is not a Location (or a non-Element mock); got: %s\",goog.dom.asserts.debugStringForType_(a))}return a};\ngoog.dom.asserts.assertIsElementType_=function(a,b){if(goog.asserts.ENABLE_ASSERTS){var c=goog.dom.asserts.getWindow_(a);c&&\"undefined\"!=typeof c[b]&&(a&&(a instanceof c[b]||!(a instanceof c.Location||a instanceof c.Element))||goog.asserts.fail(\"Argument is not a %s (or a non-Element, non-Location mock); got: %s\",b,goog.dom.asserts.debugStringForType_(a)))}return a};goog.dom.asserts.assertIsHTMLAnchorElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLAnchorElement\")};\ngoog.dom.asserts.assertIsHTMLButtonElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLButtonElement\")};goog.dom.asserts.assertIsHTMLLinkElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLLinkElement\")};goog.dom.asserts.assertIsHTMLImageElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLImageElement\")};goog.dom.asserts.assertIsHTMLAudioElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLAudioElement\")};\ngoog.dom.asserts.assertIsHTMLVideoElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLVideoElement\")};goog.dom.asserts.assertIsHTMLInputElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLInputElement\")};goog.dom.asserts.assertIsHTMLTextAreaElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLTextAreaElement\")};goog.dom.asserts.assertIsHTMLCanvasElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLCanvasElement\")};\ngoog.dom.asserts.assertIsHTMLEmbedElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLEmbedElement\")};goog.dom.asserts.assertIsHTMLFormElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLFormElement\")};goog.dom.asserts.assertIsHTMLFrameElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLFrameElement\")};goog.dom.asserts.assertIsHTMLIFrameElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLIFrameElement\")};\ngoog.dom.asserts.assertIsHTMLObjectElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLObjectElement\")};goog.dom.asserts.assertIsHTMLScriptElement=function(a){return goog.dom.asserts.assertIsElementType_(a,\"HTMLScriptElement\")};\ngoog.dom.asserts.debugStringForType_=function(a){if(goog.isObject(a))try{return a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a)}catch(b){return\"<object could not be stringified>\"}else return void 0===a?\"undefined\":null===a?\"null\":typeof a};goog.dom.asserts.getWindow_=function(a){try{var b=a&&a.ownerDocument,c=b&&(b.defaultView||b.parentWindow);c=c||goog.global;if(c.Element&&c.Location)return c}catch(d){}return null};goog.functions={};goog.functions.constant=function(a){return function(){return a}};goog.functions.FALSE=function(){return!1};goog.functions.TRUE=function(){return!0};goog.functions.NULL=function(){return null};goog.functions.identity=function(a,b){return a};goog.functions.error=function(a){return function(){throw Error(a);}};goog.functions.fail=function(a){return function(){throw a;}};\ngoog.functions.lock=function(a,b){b=b||0;return function(){return a.apply(this,Array.prototype.slice.call(arguments,0,b))}};goog.functions.nth=function(a){return function(){return arguments[a]}};goog.functions.partialRight=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=Array.prototype.slice.call(arguments);b.push.apply(b,c);return a.apply(this,b)}};goog.functions.withReturnValue=function(a,b){return goog.functions.sequence(a,goog.functions.constant(b))};\ngoog.functions.equalTo=function(a,b){return function(c){return b?a==c:a===c}};goog.functions.compose=function(a,b){var c=arguments,d=c.length;return function(){var a;d&&(a=c[d-1].apply(this,arguments));for(var b=d-2;0<=b;b--)a=c[b].call(this,a);return a}};goog.functions.sequence=function(a){var b=arguments,c=b.length;return function(){for(var a,e=0;e<c;e++)a=b[e].apply(this,arguments);return a}};\ngoog.functions.and=function(a){var b=arguments,c=b.length;return function(){for(var a=0;a<c;a++)if(!b[a].apply(this,arguments))return!1;return!0}};goog.functions.or=function(a){var b=arguments,c=b.length;return function(){for(var a=0;a<c;a++)if(b[a].apply(this,arguments))return!0;return!1}};goog.functions.not=function(a){return function(){return!a.apply(this,arguments)}};\ngoog.functions.create=function(a,b){var c=function(){};c.prototype=a.prototype;c=new c;a.apply(c,Array.prototype.slice.call(arguments,1));return c};goog.functions.CACHE_RETURN_VALUE=!0;goog.functions.cacheReturnValue=function(a){var b=!1,c;return function(){if(!goog.functions.CACHE_RETURN_VALUE)return a();b||(c=a(),b=!0);return c}};goog.functions.once=function(a){var b=a;return function(){if(b){var a=b;b=null;a()}}};\ngoog.functions.debounce=function(a,b,c){var d=0;return function(e){goog.global.clearTimeout(d);var f=arguments;d=goog.global.setTimeout(function(){a.apply(c,f)},b)}};goog.functions.throttle=function(a,b,c){var d=0,e=!1,f=[],g=function(){d=0;e&&(e=!1,h())},h=function(){d=goog.global.setTimeout(g,b);a.apply(c,f)};return function(a){f=arguments;d?e=!0:h()}};goog.functions.rateLimit=function(a,b,c){var d=0,e=function(){d=0};return function(f){d||(d=goog.global.setTimeout(e,b),a.apply(c,arguments))}};goog.dom.HtmlElement=function(){};goog.dom.TagName=function(a){this.tagName_=a};goog.dom.TagName.prototype.toString=function(){return this.tagName_};goog.dom.TagName.A=new goog.dom.TagName(\"A\");goog.dom.TagName.ABBR=new goog.dom.TagName(\"ABBR\");goog.dom.TagName.ACRONYM=new goog.dom.TagName(\"ACRONYM\");goog.dom.TagName.ADDRESS=new goog.dom.TagName(\"ADDRESS\");goog.dom.TagName.APPLET=new goog.dom.TagName(\"APPLET\");goog.dom.TagName.AREA=new goog.dom.TagName(\"AREA\");goog.dom.TagName.ARTICLE=new goog.dom.TagName(\"ARTICLE\");\ngoog.dom.TagName.ASIDE=new goog.dom.TagName(\"ASIDE\");goog.dom.TagName.AUDIO=new goog.dom.TagName(\"AUDIO\");goog.dom.TagName.B=new goog.dom.TagName(\"B\");goog.dom.TagName.BASE=new goog.dom.TagName(\"BASE\");goog.dom.TagName.BASEFONT=new goog.dom.TagName(\"BASEFONT\");goog.dom.TagName.BDI=new goog.dom.TagName(\"BDI\");goog.dom.TagName.BDO=new goog.dom.TagName(\"BDO\");goog.dom.TagName.BIG=new goog.dom.TagName(\"BIG\");goog.dom.TagName.BLOCKQUOTE=new goog.dom.TagName(\"BLOCKQUOTE\");goog.dom.TagName.BODY=new goog.dom.TagName(\"BODY\");\ngoog.dom.TagName.BR=new goog.dom.TagName(\"BR\");goog.dom.TagName.BUTTON=new goog.dom.TagName(\"BUTTON\");goog.dom.TagName.CANVAS=new goog.dom.TagName(\"CANVAS\");goog.dom.TagName.CAPTION=new goog.dom.TagName(\"CAPTION\");goog.dom.TagName.CENTER=new goog.dom.TagName(\"CENTER\");goog.dom.TagName.CITE=new goog.dom.TagName(\"CITE\");goog.dom.TagName.CODE=new goog.dom.TagName(\"CODE\");goog.dom.TagName.COL=new goog.dom.TagName(\"COL\");goog.dom.TagName.COLGROUP=new goog.dom.TagName(\"COLGROUP\");\ngoog.dom.TagName.COMMAND=new goog.dom.TagName(\"COMMAND\");goog.dom.TagName.DATA=new goog.dom.TagName(\"DATA\");goog.dom.TagName.DATALIST=new goog.dom.TagName(\"DATALIST\");goog.dom.TagName.DD=new goog.dom.TagName(\"DD\");goog.dom.TagName.DEL=new goog.dom.TagName(\"DEL\");goog.dom.TagName.DETAILS=new goog.dom.TagName(\"DETAILS\");goog.dom.TagName.DFN=new goog.dom.TagName(\"DFN\");goog.dom.TagName.DIALOG=new goog.dom.TagName(\"DIALOG\");goog.dom.TagName.DIR=new goog.dom.TagName(\"DIR\");goog.dom.TagName.DIV=new goog.dom.TagName(\"DIV\");\ngoog.dom.TagName.DL=new goog.dom.TagName(\"DL\");goog.dom.TagName.DT=new goog.dom.TagName(\"DT\");goog.dom.TagName.EM=new goog.dom.TagName(\"EM\");goog.dom.TagName.EMBED=new goog.dom.TagName(\"EMBED\");goog.dom.TagName.FIELDSET=new goog.dom.TagName(\"FIELDSET\");goog.dom.TagName.FIGCAPTION=new goog.dom.TagName(\"FIGCAPTION\");goog.dom.TagName.FIGURE=new goog.dom.TagName(\"FIGURE\");goog.dom.TagName.FONT=new goog.dom.TagName(\"FONT\");goog.dom.TagName.FOOTER=new goog.dom.TagName(\"FOOTER\");goog.dom.TagName.FORM=new goog.dom.TagName(\"FORM\");\ngoog.dom.TagName.FRAME=new goog.dom.TagName(\"FRAME\");goog.dom.TagName.FRAMESET=new goog.dom.TagName(\"FRAMESET\");goog.dom.TagName.H1=new goog.dom.TagName(\"H1\");goog.dom.TagName.H2=new goog.dom.TagName(\"H2\");goog.dom.TagName.H3=new goog.dom.TagName(\"H3\");goog.dom.TagName.H4=new goog.dom.TagName(\"H4\");goog.dom.TagName.H5=new goog.dom.TagName(\"H5\");goog.dom.TagName.H6=new goog.dom.TagName(\"H6\");goog.dom.TagName.HEAD=new goog.dom.TagName(\"HEAD\");goog.dom.TagName.HEADER=new goog.dom.TagName(\"HEADER\");\ngoog.dom.TagName.HGROUP=new goog.dom.TagName(\"HGROUP\");goog.dom.TagName.HR=new goog.dom.TagName(\"HR\");goog.dom.TagName.HTML=new goog.dom.TagName(\"HTML\");goog.dom.TagName.I=new goog.dom.TagName(\"I\");goog.dom.TagName.IFRAME=new goog.dom.TagName(\"IFRAME\");goog.dom.TagName.IMG=new goog.dom.TagName(\"IMG\");goog.dom.TagName.INPUT=new goog.dom.TagName(\"INPUT\");goog.dom.TagName.INS=new goog.dom.TagName(\"INS\");goog.dom.TagName.ISINDEX=new goog.dom.TagName(\"ISINDEX\");goog.dom.TagName.KBD=new goog.dom.TagName(\"KBD\");\ngoog.dom.TagName.KEYGEN=new goog.dom.TagName(\"KEYGEN\");goog.dom.TagName.LABEL=new goog.dom.TagName(\"LABEL\");goog.dom.TagName.LEGEND=new goog.dom.TagName(\"LEGEND\");goog.dom.TagName.LI=new goog.dom.TagName(\"LI\");goog.dom.TagName.LINK=new goog.dom.TagName(\"LINK\");goog.dom.TagName.MAIN=new goog.dom.TagName(\"MAIN\");goog.dom.TagName.MAP=new goog.dom.TagName(\"MAP\");goog.dom.TagName.MARK=new goog.dom.TagName(\"MARK\");goog.dom.TagName.MATH=new goog.dom.TagName(\"MATH\");goog.dom.TagName.MENU=new goog.dom.TagName(\"MENU\");\ngoog.dom.TagName.MENUITEM=new goog.dom.TagName(\"MENUITEM\");goog.dom.TagName.META=new goog.dom.TagName(\"META\");goog.dom.TagName.METER=new goog.dom.TagName(\"METER\");goog.dom.TagName.NAV=new goog.dom.TagName(\"NAV\");goog.dom.TagName.NOFRAMES=new goog.dom.TagName(\"NOFRAMES\");goog.dom.TagName.NOSCRIPT=new goog.dom.TagName(\"NOSCRIPT\");goog.dom.TagName.OBJECT=new goog.dom.TagName(\"OBJECT\");goog.dom.TagName.OL=new goog.dom.TagName(\"OL\");goog.dom.TagName.OPTGROUP=new goog.dom.TagName(\"OPTGROUP\");\ngoog.dom.TagName.OPTION=new goog.dom.TagName(\"OPTION\");goog.dom.TagName.OUTPUT=new goog.dom.TagName(\"OUTPUT\");goog.dom.TagName.P=new goog.dom.TagName(\"P\");goog.dom.TagName.PARAM=new goog.dom.TagName(\"PARAM\");goog.dom.TagName.PICTURE=new goog.dom.TagName(\"PICTURE\");goog.dom.TagName.PRE=new goog.dom.TagName(\"PRE\");goog.dom.TagName.PROGRESS=new goog.dom.TagName(\"PROGRESS\");goog.dom.TagName.Q=new goog.dom.TagName(\"Q\");goog.dom.TagName.RP=new goog.dom.TagName(\"RP\");goog.dom.TagName.RT=new goog.dom.TagName(\"RT\");\ngoog.dom.TagName.RTC=new goog.dom.TagName(\"RTC\");goog.dom.TagName.RUBY=new goog.dom.TagName(\"RUBY\");goog.dom.TagName.S=new goog.dom.TagName(\"S\");goog.dom.TagName.SAMP=new goog.dom.TagName(\"SAMP\");goog.dom.TagName.SCRIPT=new goog.dom.TagName(\"SCRIPT\");goog.dom.TagName.SECTION=new goog.dom.TagName(\"SECTION\");goog.dom.TagName.SELECT=new goog.dom.TagName(\"SELECT\");goog.dom.TagName.SMALL=new goog.dom.TagName(\"SMALL\");goog.dom.TagName.SOURCE=new goog.dom.TagName(\"SOURCE\");goog.dom.TagName.SPAN=new goog.dom.TagName(\"SPAN\");\ngoog.dom.TagName.STRIKE=new goog.dom.TagName(\"STRIKE\");goog.dom.TagName.STRONG=new goog.dom.TagName(\"STRONG\");goog.dom.TagName.STYLE=new goog.dom.TagName(\"STYLE\");goog.dom.TagName.SUB=new goog.dom.TagName(\"SUB\");goog.dom.TagName.SUMMARY=new goog.dom.TagName(\"SUMMARY\");goog.dom.TagName.SUP=new goog.dom.TagName(\"SUP\");goog.dom.TagName.SVG=new goog.dom.TagName(\"SVG\");goog.dom.TagName.TABLE=new goog.dom.TagName(\"TABLE\");goog.dom.TagName.TBODY=new goog.dom.TagName(\"TBODY\");goog.dom.TagName.TD=new goog.dom.TagName(\"TD\");\ngoog.dom.TagName.TEMPLATE=new goog.dom.TagName(\"TEMPLATE\");goog.dom.TagName.TEXTAREA=new goog.dom.TagName(\"TEXTAREA\");goog.dom.TagName.TFOOT=new goog.dom.TagName(\"TFOOT\");goog.dom.TagName.TH=new goog.dom.TagName(\"TH\");goog.dom.TagName.THEAD=new goog.dom.TagName(\"THEAD\");goog.dom.TagName.TIME=new goog.dom.TagName(\"TIME\");goog.dom.TagName.TITLE=new goog.dom.TagName(\"TITLE\");goog.dom.TagName.TR=new goog.dom.TagName(\"TR\");goog.dom.TagName.TRACK=new goog.dom.TagName(\"TRACK\");goog.dom.TagName.TT=new goog.dom.TagName(\"TT\");\ngoog.dom.TagName.U=new goog.dom.TagName(\"U\");goog.dom.TagName.UL=new goog.dom.TagName(\"UL\");goog.dom.TagName.VAR=new goog.dom.TagName(\"VAR\");goog.dom.TagName.VIDEO=new goog.dom.TagName(\"VIDEO\");goog.dom.TagName.WBR=new goog.dom.TagName(\"WBR\");goog.dom.tags={};goog.dom.tags.VOID_TAGS_={area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};goog.dom.tags.isVoidTag=function(a){return!0===goog.dom.tags.VOID_TAGS_[a]};goog.html={};goog.html.trustedtypes={};goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+\"#html\"):null;goog.string={};goog.string.TypedString=function(){};goog.string.Const=function(a,b){this.stringConstValueWithSecurityContract__googStringSecurityPrivate_=a===goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_&&b||\"\";this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_=goog.string.Const.TYPE_MARKER_};goog.string.Const.prototype.implementsGoogStringTypedString=!0;goog.string.Const.prototype.getTypedStringValue=function(){return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_};\ngoog.DEBUG&&(goog.string.Const.prototype.toString=function(){return\"Const{\"+this.stringConstValueWithSecurityContract__googStringSecurityPrivate_+\"}\"});goog.string.Const.unwrap=function(a){if(a instanceof goog.string.Const&&a.constructor===goog.string.Const&&a.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_===goog.string.Const.TYPE_MARKER_)return a.stringConstValueWithSecurityContract__googStringSecurityPrivate_;goog.asserts.fail(\"expected object of type Const, got '\"+a+\"'\");return\"type_error:Const\"};\ngoog.string.Const.from=function(a){return new goog.string.Const(goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_,a)};goog.string.Const.TYPE_MARKER_={};goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_={};goog.string.Const.EMPTY=goog.string.Const.from(\"\");goog.html.SafeScript=function(){this.privateDoNotAccessOrElseSafeScriptWrappedValue_=\"\";this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeScript.prototype.implementsGoogStringTypedString=!0;goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeScript.fromConstant=function(a){a=goog.string.Const.unwrap(a);return 0===a.length?goog.html.SafeScript.EMPTY:goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeScript.fromConstantAndArgs=function(a,b){for(var c=[],d=1;d<arguments.length;d++)c.push(goog.html.SafeScript.stringify_(arguments[d]));return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(\"(\"+goog.string.Const.unwrap(a)+\")(\"+c.join(\", \")+\");\")};goog.html.SafeScript.fromJson=function(a){return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(goog.html.SafeScript.stringify_(a))};goog.html.SafeScript.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString()};\ngoog.DEBUG&&(goog.html.SafeScript.prototype.toString=function(){return\"SafeScript{\"+this.privateDoNotAccessOrElseSafeScriptWrappedValue_+\"}\"});goog.html.SafeScript.unwrap=function(a){return goog.html.SafeScript.unwrapTrustedScript(a).toString()};\ngoog.html.SafeScript.unwrapTrustedScript=function(a){if(a instanceof goog.html.SafeScript&&a.constructor===goog.html.SafeScript&&a.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeScriptWrappedValue_;goog.asserts.fail(\"expected object of type SafeScript, got '\"+a+\"' of type \"+goog.typeOf(a));return\"type_error:SafeScript\"};\ngoog.html.SafeScript.stringify_=function(a){return JSON.stringify(a).replace(/</g,\"\\\\x3c\")};goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeScript).initSecurityPrivateDoNotAccessOrElse_(a)};\ngoog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeScriptWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScript(a):a;return this};goog.html.SafeScript.EMPTY=goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(\"\");goog.fs={};goog.fs.url={};goog.fs.url.createObjectUrl=function(a){return goog.fs.url.getUrlObject_().createObjectURL(a)};goog.fs.url.revokeObjectUrl=function(a){goog.fs.url.getUrlObject_().revokeObjectURL(a)};goog.fs.url.UrlObject_=function(){};goog.fs.url.UrlObject_.prototype.createObjectURL=function(a){};goog.fs.url.UrlObject_.prototype.revokeObjectURL=function(a){};\ngoog.fs.url.getUrlObject_=function(){var a=goog.fs.url.findUrlObject_();if(null!=a)return a;throw Error(\"This browser doesn't seem to support blob URLs\");};goog.fs.url.findUrlObject_=function(){return void 0!==goog.global.URL&&void 0!==goog.global.URL.createObjectURL?goog.global.URL:void 0!==goog.global.webkitURL&&void 0!==goog.global.webkitURL.createObjectURL?goog.global.webkitURL:void 0!==goog.global.createObjectURL?goog.global:null};\ngoog.fs.url.browserSupportsObjectUrls=function(){return null!=goog.fs.url.findUrlObject_()};goog.fs.blob={};goog.fs.blob.getBlob=function(a){var b=goog.global.BlobBuilder||goog.global.WebKitBlobBuilder;if(void 0!==b){b=new b;for(var c=0;c<arguments.length;c++)b.append(arguments[c]);return b.getBlob()}return goog.fs.blob.getBlobWithProperties(goog.array.toArray(arguments))};\ngoog.fs.blob.getBlobWithProperties=function(a,b,c){var d=goog.global.BlobBuilder||goog.global.WebKitBlobBuilder;if(void 0!==d){d=new d;for(var e=0;e<a.length;e++)d.append(a[e],c);return d.getBlob(b)}if(void 0!==goog.global.Blob)return d={},b&&(d.type=b),c&&(d.endings=c),new Blob(a,d);throw Error(\"This browser doesn't seem to support creating Blobs\");};goog.i18n={};goog.i18n.bidi={};goog.i18n.bidi.FORCE_RTL=!1;\ngoog.i18n.bidi.IS_RTL=goog.i18n.bidi.FORCE_RTL||(\"ar\"==goog.LOCALE.substring(0,2).toLowerCase()||\"fa\"==goog.LOCALE.substring(0,2).toLowerCase()||\"he\"==goog.LOCALE.substring(0,2).toLowerCase()||\"iw\"==goog.LOCALE.substring(0,2).toLowerCase()||\"ps\"==goog.LOCALE.substring(0,2).toLowerCase()||\"sd\"==goog.LOCALE.substring(0,2).toLowerCase()||\"ug\"==goog.LOCALE.substring(0,2).toLowerCase()||\"ur\"==goog.LOCALE.substring(0,2).toLowerCase()||\"yi\"==goog.LOCALE.substring(0,2).toLowerCase())&&(2==goog.LOCALE.length||\n\"-\"==goog.LOCALE.substring(2,3)||\"_\"==goog.LOCALE.substring(2,3))||3<=goog.LOCALE.length&&\"ckb\"==goog.LOCALE.substring(0,3).toLowerCase()&&(3==goog.LOCALE.length||\"-\"==goog.LOCALE.substring(3,4)||\"_\"==goog.LOCALE.substring(3,4))||7<=goog.LOCALE.length&&(\"-\"==goog.LOCALE.substring(2,3)||\"_\"==goog.LOCALE.substring(2,3))&&(\"adlm\"==goog.LOCALE.substring(3,7).toLowerCase()||\"arab\"==goog.LOCALE.substring(3,7).toLowerCase()||\"hebr\"==goog.LOCALE.substring(3,7).toLowerCase()||\"nkoo\"==goog.LOCALE.substring(3,\n7).toLowerCase()||\"rohg\"==goog.LOCALE.substring(3,7).toLowerCase()||\"thaa\"==goog.LOCALE.substring(3,7).toLowerCase())||8<=goog.LOCALE.length&&(\"-\"==goog.LOCALE.substring(3,4)||\"_\"==goog.LOCALE.substring(3,4))&&(\"adlm\"==goog.LOCALE.substring(4,8).toLowerCase()||\"arab\"==goog.LOCALE.substring(4,8).toLowerCase()||\"hebr\"==goog.LOCALE.substring(4,8).toLowerCase()||\"nkoo\"==goog.LOCALE.substring(4,8).toLowerCase()||\"rohg\"==goog.LOCALE.substring(4,8).toLowerCase()||\"thaa\"==goog.LOCALE.substring(4,8).toLowerCase());\ngoog.i18n.bidi.Format={LRE:\"\\u202a\",RLE:\"\\u202b\",PDF:\"\\u202c\",LRM:\"\\u200e\",RLM:\"\\u200f\"};goog.i18n.bidi.Dir={LTR:1,RTL:-1,NEUTRAL:0};goog.i18n.bidi.RIGHT=\"right\";goog.i18n.bidi.LEFT=\"left\";goog.i18n.bidi.I18N_RIGHT=goog.i18n.bidi.IS_RTL?goog.i18n.bidi.LEFT:goog.i18n.bidi.RIGHT;goog.i18n.bidi.I18N_LEFT=goog.i18n.bidi.IS_RTL?goog.i18n.bidi.RIGHT:goog.i18n.bidi.LEFT;\ngoog.i18n.bidi.toDir=function(a,b){return\"number\"==typeof a?0<a?goog.i18n.bidi.Dir.LTR:0>a?goog.i18n.bidi.Dir.RTL:b?null:goog.i18n.bidi.Dir.NEUTRAL:null==a?null:a?goog.i18n.bidi.Dir.RTL:goog.i18n.bidi.Dir.LTR};goog.i18n.bidi.ltrChars_=\"A-Za-z\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u02b8\\u0300-\\u0590\\u0900-\\u1fff\\u200e\\u2c00-\\ud801\\ud804-\\ud839\\ud83c-\\udbff\\uf900-\\ufb1c\\ufe00-\\ufe6f\\ufefd-\\uffff\";goog.i18n.bidi.rtlChars_=\"\\u0591-\\u06ef\\u06fa-\\u08ff\\u200f\\ud802-\\ud803\\ud83a-\\ud83b\\ufb1d-\\ufdff\\ufe70-\\ufefc\";\ngoog.i18n.bidi.htmlSkipReg_=/<[^>]*>|&[^;]+;/g;goog.i18n.bidi.stripHtmlIfNeeded_=function(a,b){return b?a.replace(goog.i18n.bidi.htmlSkipReg_,\"\"):a};goog.i18n.bidi.rtlCharReg_=new RegExp(\"[\"+goog.i18n.bidi.rtlChars_+\"]\");goog.i18n.bidi.ltrCharReg_=new RegExp(\"[\"+goog.i18n.bidi.ltrChars_+\"]\");goog.i18n.bidi.hasAnyRtl=function(a,b){return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.hasRtlChar=goog.i18n.bidi.hasAnyRtl;\ngoog.i18n.bidi.hasAnyLtr=function(a,b){return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.ltrRe_=new RegExp(\"^[\"+goog.i18n.bidi.ltrChars_+\"]\");goog.i18n.bidi.rtlRe_=new RegExp(\"^[\"+goog.i18n.bidi.rtlChars_+\"]\");goog.i18n.bidi.isRtlChar=function(a){return goog.i18n.bidi.rtlRe_.test(a)};goog.i18n.bidi.isLtrChar=function(a){return goog.i18n.bidi.ltrRe_.test(a)};goog.i18n.bidi.isNeutralChar=function(a){return!goog.i18n.bidi.isLtrChar(a)&&!goog.i18n.bidi.isRtlChar(a)};\ngoog.i18n.bidi.ltrDirCheckRe_=new RegExp(\"^[^\"+goog.i18n.bidi.rtlChars_+\"]*[\"+goog.i18n.bidi.ltrChars_+\"]\");goog.i18n.bidi.rtlDirCheckRe_=new RegExp(\"^[^\"+goog.i18n.bidi.ltrChars_+\"]*[\"+goog.i18n.bidi.rtlChars_+\"]\");goog.i18n.bidi.startsWithRtl=function(a,b){return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isRtlText=goog.i18n.bidi.startsWithRtl;\ngoog.i18n.bidi.startsWithLtr=function(a,b){return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isLtrText=goog.i18n.bidi.startsWithLtr;goog.i18n.bidi.isRequiredLtrRe_=/^http:\\/\\/.*/;goog.i18n.bidi.isNeutralText=function(a,b){a=goog.i18n.bidi.stripHtmlIfNeeded_(a,b);return goog.i18n.bidi.isRequiredLtrRe_.test(a)||!goog.i18n.bidi.hasAnyLtr(a)&&!goog.i18n.bidi.hasAnyRtl(a)};\ngoog.i18n.bidi.ltrExitDirCheckRe_=new RegExp(\"[\"+goog.i18n.bidi.ltrChars_+\"][^\"+goog.i18n.bidi.rtlChars_+\"]*$\");goog.i18n.bidi.rtlExitDirCheckRe_=new RegExp(\"[\"+goog.i18n.bidi.rtlChars_+\"][^\"+goog.i18n.bidi.ltrChars_+\"]*$\");goog.i18n.bidi.endsWithLtr=function(a,b){return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isLtrExitText=goog.i18n.bidi.endsWithLtr;\ngoog.i18n.bidi.endsWithRtl=function(a,b){return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isRtlExitText=goog.i18n.bidi.endsWithRtl;goog.i18n.bidi.rtlLocalesRe_=/^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;goog.i18n.bidi.isRtlLanguage=function(a){return goog.i18n.bidi.rtlLocalesRe_.test(a)};goog.i18n.bidi.bracketGuardTextRe_=/(\\(.*?\\)+)|(\\[.*?\\]+)|(\\{.*?\\}+)|(<.*?>+)/g;\ngoog.i18n.bidi.guardBracketInText=function(a,b){b=(void 0===b?goog.i18n.bidi.hasAnyRtl(a):b)?goog.i18n.bidi.Format.RLM:goog.i18n.bidi.Format.LRM;return a.replace(goog.i18n.bidi.bracketGuardTextRe_,b+\"$&\"+b)};goog.i18n.bidi.enforceRtlInHtml=function(a){return\"<\"==a.charAt(0)?a.replace(/<\\w+/,\"$& dir=rtl\"):\"\\n<span dir=rtl>\"+a+\"</span>\"};goog.i18n.bidi.enforceRtlInText=function(a){return goog.i18n.bidi.Format.RLE+a+goog.i18n.bidi.Format.PDF};\ngoog.i18n.bidi.enforceLtrInHtml=function(a){return\"<\"==a.charAt(0)?a.replace(/<\\w+/,\"$& dir=ltr\"):\"\\n<span dir=ltr>\"+a+\"</span>\"};goog.i18n.bidi.enforceLtrInText=function(a){return goog.i18n.bidi.Format.LRE+a+goog.i18n.bidi.Format.PDF};goog.i18n.bidi.dimensionsRe_=/:\\s*([.\\d][.\\w]*)\\s+([.\\d][.\\w]*)\\s+([.\\d][.\\w]*)\\s+([.\\d][.\\w]*)/g;goog.i18n.bidi.leftRe_=/left/gi;goog.i18n.bidi.rightRe_=/right/gi;goog.i18n.bidi.tempRe_=/%%%%/g;\ngoog.i18n.bidi.mirrorCSS=function(a){return a.replace(goog.i18n.bidi.dimensionsRe_,\":$1 $4 $3 $2\").replace(goog.i18n.bidi.leftRe_,\"%%%%\").replace(goog.i18n.bidi.rightRe_,goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_,goog.i18n.bidi.RIGHT)};goog.i18n.bidi.doubleQuoteSubstituteRe_=/([\\u0591-\\u05f2])\"/g;goog.i18n.bidi.singleQuoteSubstituteRe_=/([\\u0591-\\u05f2])'/g;\ngoog.i18n.bidi.normalizeHebrewQuote=function(a){return a.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_,\"$1\\u05f4\").replace(goog.i18n.bidi.singleQuoteSubstituteRe_,\"$1\\u05f3\")};goog.i18n.bidi.wordSeparatorRe_=/\\s+/;goog.i18n.bidi.hasNumeralsRe_=/[\\d\\u06f0-\\u06f9]/;goog.i18n.bidi.rtlDetectionThreshold_=.4;\ngoog.i18n.bidi.estimateDirection=function(a,b){var c=0,d=0,e=!1;a=goog.i18n.bidi.stripHtmlIfNeeded_(a,b).split(goog.i18n.bidi.wordSeparatorRe_);for(b=0;b<a.length;b++){var f=a[b];goog.i18n.bidi.startsWithRtl(f)?(c++,d++):goog.i18n.bidi.isRequiredLtrRe_.test(f)?e=!0:goog.i18n.bidi.hasAnyLtr(f)?d++:goog.i18n.bidi.hasNumeralsRe_.test(f)&&(e=!0)}return 0==d?e?goog.i18n.bidi.Dir.LTR:goog.i18n.bidi.Dir.NEUTRAL:c/d>goog.i18n.bidi.rtlDetectionThreshold_?goog.i18n.bidi.Dir.RTL:goog.i18n.bidi.Dir.LTR};\ngoog.i18n.bidi.detectRtlDirectionality=function(a,b){return goog.i18n.bidi.estimateDirection(a,b)==goog.i18n.bidi.Dir.RTL};goog.i18n.bidi.setElementDirAndAlign=function(a,b){a&&(b=goog.i18n.bidi.toDir(b))&&(a.style.textAlign=b==goog.i18n.bidi.Dir.RTL?goog.i18n.bidi.RIGHT:goog.i18n.bidi.LEFT,a.dir=b==goog.i18n.bidi.Dir.RTL?\"rtl\":\"ltr\")};\ngoog.i18n.bidi.setElementDirByTextDirectionality=function(a,b){switch(goog.i18n.bidi.estimateDirection(b)){case goog.i18n.bidi.Dir.LTR:a.dir=\"ltr\";break;case goog.i18n.bidi.Dir.RTL:a.dir=\"rtl\";break;default:a.removeAttribute(\"dir\")}};goog.i18n.bidi.DirectionalString=function(){};goog.html.TrustedResourceUrl=function(a,b){this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_=a===goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_&&b||\"\";this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString=!0;goog.html.TrustedResourceUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_.toString()};\ngoog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.TrustedResourceUrl.prototype.getDirection=function(){return goog.i18n.bidi.Dir.LTR};\ngoog.html.TrustedResourceUrl.prototype.cloneWithParams=function(a,b){var c=goog.html.TrustedResourceUrl.unwrap(this);c=goog.html.TrustedResourceUrl.URL_PARAM_PARSER_.exec(c);var d=c[3]||\"\";return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(c[1]+goog.html.TrustedResourceUrl.stringifyParams_(\"?\",c[2]||\"\",a)+goog.html.TrustedResourceUrl.stringifyParams_(\"#\",d,b))};\ngoog.DEBUG&&(goog.html.TrustedResourceUrl.prototype.toString=function(){return\"TrustedResourceUrl{\"+this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_+\"}\"});goog.html.TrustedResourceUrl.unwrap=function(a){return goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(a).toString()};\ngoog.html.TrustedResourceUrl.unwrapTrustedScriptURL=function(a){if(a instanceof goog.html.TrustedResourceUrl&&a.constructor===goog.html.TrustedResourceUrl&&a.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;goog.asserts.fail(\"expected object of type TrustedResourceUrl, got '\"+a+\"' of type \"+goog.typeOf(a));return\"type_error:TrustedResourceUrl\"};\ngoog.html.TrustedResourceUrl.format=function(a,b){var c=goog.string.Const.unwrap(a);if(!goog.html.TrustedResourceUrl.BASE_URL_.test(c))throw Error(\"Invalid TrustedResourceUrl format: \"+c);a=c.replace(goog.html.TrustedResourceUrl.FORMAT_MARKER_,function(a,e){if(!Object.prototype.hasOwnProperty.call(b,e))throw Error('Found marker, \"'+e+'\", in format string, \"'+c+'\", but no valid label mapping found in args: '+JSON.stringify(b));a=b[e];return a instanceof goog.string.Const?goog.string.Const.unwrap(a):\nencodeURIComponent(String(a))});return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.TrustedResourceUrl.FORMAT_MARKER_=/%{(\\w+)}/g;goog.html.TrustedResourceUrl.BASE_URL_=/^((https:)?\\/\\/[0-9a-z.:[\\]-]+\\/|\\/[^/\\\\]|[^:/\\\\%]+\\/|[^:/\\\\%]*[?#]|about:blank#)/i;goog.html.TrustedResourceUrl.URL_PARAM_PARSER_=/^([^?#]*)(\\?[^#]*)?(#[\\s\\S]*)?/;\ngoog.html.TrustedResourceUrl.formatWithParams=function(a,b,c,d){return goog.html.TrustedResourceUrl.format(a,b).cloneWithParams(c,d)};goog.html.TrustedResourceUrl.fromConstant=function(a){return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};goog.html.TrustedResourceUrl.fromConstants=function(a){for(var b=\"\",c=0;c<a.length;c++)b+=goog.string.Const.unwrap(a[c]);return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.TrustedResourceUrl.fromSafeScript=function(a){a=goog.fs.blob.getBlobWithProperties([goog.html.SafeScript.unwrap(a)],\"text/javascript\");a=goog.fs.url.createObjectUrl(a);return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};\ngoog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse=function(a){a=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScriptURL(a):a;return new goog.html.TrustedResourceUrl(goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_,a)};\ngoog.html.TrustedResourceUrl.stringifyParams_=function(a,b,c){if(null==c)return b;if(\"string\"===typeof c)return c?a+encodeURIComponent(c):\"\";for(var d in c){var e=c[d];e=Array.isArray(e)?e:[e];for(var f=0;f<e.length;f++){var g=e[f];null!=g&&(b||(b=a),b+=(b.length>a.length?\"&\":\"\")+encodeURIComponent(d)+\"=\"+encodeURIComponent(String(g)))}}return b};goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_={};goog.string.internal={};goog.string.internal.startsWith=function(a,b){return 0==a.lastIndexOf(b,0)};goog.string.internal.endsWith=function(a,b){var c=a.length-b.length;return 0<=c&&a.indexOf(b,c)==c};goog.string.internal.caseInsensitiveStartsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.substr(0,b.length))};goog.string.internal.caseInsensitiveEndsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.substr(a.length-b.length,b.length))};\ngoog.string.internal.caseInsensitiveEquals=function(a,b){return a.toLowerCase()==b.toLowerCase()};goog.string.internal.isEmptyOrWhitespace=function(a){return/^[\\s\\xa0]*$/.test(a)};goog.string.internal.trim=goog.TRUSTED_SITE&&String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\\s\\xa0]*([\\s\\S]*?)[\\s\\xa0]*$/.exec(a)[1]};goog.string.internal.caseInsensitiveCompare=function(a,b){a=String(a).toLowerCase();b=String(b).toLowerCase();return a<b?-1:a==b?0:1};\ngoog.string.internal.newLineToBr=function(a,b){return a.replace(/(\\r\\n|\\r|\\n)/g,b?\"<br />\":\"<br>\")};\ngoog.string.internal.htmlEscape=function(a,b){if(b)a=a.replace(goog.string.internal.AMP_RE_,\"&amp;\").replace(goog.string.internal.LT_RE_,\"&lt;\").replace(goog.string.internal.GT_RE_,\"&gt;\").replace(goog.string.internal.QUOT_RE_,\"&quot;\").replace(goog.string.internal.SINGLE_QUOTE_RE_,\"&#39;\").replace(goog.string.internal.NULL_RE_,\"&#0;\");else{if(!goog.string.internal.ALL_RE_.test(a))return a;-1!=a.indexOf(\"&\")&&(a=a.replace(goog.string.internal.AMP_RE_,\"&amp;\"));-1!=a.indexOf(\"<\")&&(a=a.replace(goog.string.internal.LT_RE_,\n\"&lt;\"));-1!=a.indexOf(\">\")&&(a=a.replace(goog.string.internal.GT_RE_,\"&gt;\"));-1!=a.indexOf('\"')&&(a=a.replace(goog.string.internal.QUOT_RE_,\"&quot;\"));-1!=a.indexOf(\"'\")&&(a=a.replace(goog.string.internal.SINGLE_QUOTE_RE_,\"&#39;\"));-1!=a.indexOf(\"\\x00\")&&(a=a.replace(goog.string.internal.NULL_RE_,\"&#0;\"))}return a};goog.string.internal.AMP_RE_=/&/g;goog.string.internal.LT_RE_=/</g;goog.string.internal.GT_RE_=/>/g;goog.string.internal.QUOT_RE_=/\"/g;goog.string.internal.SINGLE_QUOTE_RE_=/'/g;\ngoog.string.internal.NULL_RE_=/\\x00/g;goog.string.internal.ALL_RE_=/[\\x00&<>\"']/;goog.string.internal.whitespaceEscape=function(a,b){return goog.string.internal.newLineToBr(a.replace(/  /g,\" &#160;\"),b)};goog.string.internal.contains=function(a,b){return-1!=a.indexOf(b)};goog.string.internal.caseInsensitiveContains=function(a,b){return goog.string.internal.contains(a.toLowerCase(),b.toLowerCase())};\ngoog.string.internal.compareVersions=function(a,b){var c=0;a=goog.string.internal.trim(String(a)).split(\".\");b=goog.string.internal.trim(String(b)).split(\".\");for(var d=Math.max(a.length,b.length),e=0;0==c&&e<d;e++){var f=a[e]||\"\",g=b[e]||\"\";do{f=/(\\d*)(\\D*)(.*)/.exec(f)||[\"\",\"\",\"\",\"\"];g=/(\\d*)(\\D*)(.*)/.exec(g)||[\"\",\"\",\"\",\"\"];if(0==f[0].length&&0==g[0].length)break;c=0==f[1].length?0:parseInt(f[1],10);var h=0==g[1].length?0:parseInt(g[1],10);c=goog.string.internal.compareElements_(c,h)||goog.string.internal.compareElements_(0==\nf[2].length,0==g[2].length)||goog.string.internal.compareElements_(f[2],g[2]);f=f[3];g=g[3]}while(0==c)}return c};goog.string.internal.compareElements_=function(a,b){return a<b?-1:a>b?1:0};goog.html.SafeUrl=function(a,b){this.privateDoNotAccessOrElseSafeUrlWrappedValue_=a===goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_&&b||\"\";this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeUrl.INNOCUOUS_STRING=\"about:invalid#zClosurez\";goog.html.SafeUrl.prototype.implementsGoogStringTypedString=!0;goog.html.SafeUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString()};\ngoog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.SafeUrl.prototype.getDirection=function(){return goog.i18n.bidi.Dir.LTR};goog.DEBUG&&(goog.html.SafeUrl.prototype.toString=function(){return\"SafeUrl{\"+this.privateDoNotAccessOrElseSafeUrlWrappedValue_+\"}\"});\ngoog.html.SafeUrl.unwrap=function(a){if(a instanceof goog.html.SafeUrl&&a.constructor===goog.html.SafeUrl&&a.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeUrlWrappedValue_;goog.asserts.fail(\"expected object of type SafeUrl, got '\"+a+\"' of type \"+goog.typeOf(a));return\"type_error:SafeUrl\"};goog.html.SafeUrl.fromConstant=function(a){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};\ngoog.html.SAFE_MIME_TYPE_PATTERN_=/^(?:audio\\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\\/csv|video\\/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\\w+=(?:\\w+|\"[\\w;,= ]+\"))*$/i;goog.html.SafeUrl.isSafeMimeType=function(a){return goog.html.SAFE_MIME_TYPE_PATTERN_.test(a)};\ngoog.html.SafeUrl.fromBlob=function(a){a=goog.html.SafeUrl.isSafeMimeType(a.type)?goog.fs.url.createObjectUrl(a):goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromMediaSource=function(a){goog.asserts.assert(\"MediaSource\"in goog.global,\"No support for MediaSource\");a=a instanceof MediaSource?goog.fs.url.createObjectUrl(a):goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.DATA_URL_PATTERN_=/^data:(.*);base64,[a-z0-9+\\/]+=*$/i;goog.html.SafeUrl.fromDataUrl=function(a){a=a.replace(/(%0A|%0D)/g,\"\");var b=a.match(goog.html.DATA_URL_PATTERN_);b=b&&goog.html.SafeUrl.isSafeMimeType(b[1]);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b?a:goog.html.SafeUrl.INNOCUOUS_STRING)};goog.html.SafeUrl.fromTelUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,\"tel:\")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SIP_URL_PATTERN_=/^sip[s]?:[+a-z0-9_.!$%&'*\\/=^`{|}~-]+@([a-z0-9-]+\\.)+[a-z0-9]{2,63}$/i;goog.html.SafeUrl.fromSipUrl=function(a){goog.html.SIP_URL_PATTERN_.test(decodeURIComponent(a))||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromFacebookMessengerUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,\"fb-messenger://share\")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeUrl.fromWhatsAppUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,\"whatsapp://send\")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromSmsUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,\"sms:\")&&goog.html.SafeUrl.isSmsUrlBodyValid_(a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeUrl.isSmsUrlBodyValid_=function(a){var b=a.indexOf(\"#\");0<b&&(a=a.substring(0,b));b=a.match(/[?&]body=/gi);if(!b)return!0;if(1<b.length)return!1;a=a.match(/[?&]body=([^&]*)/)[1];if(!a)return!0;try{decodeURIComponent(a)}catch(c){return!1}return/^(?:[a-z0-9\\-_.~]|%[0-9a-f]{2})+$/i.test(a)};goog.html.SafeUrl.fromSshUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,\"ssh://\")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeUrl.sanitizeChromeExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^chrome-extension:\\/\\/([^\\/]+)\\//,a,b)};goog.html.SafeUrl.sanitizeFirefoxExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^moz-extension:\\/\\/([^\\/]+)\\//,a,b)};goog.html.SafeUrl.sanitizeEdgeExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^ms-browser-extension:\\/\\/([^\\/]+)\\//,a,b)};\ngoog.html.SafeUrl.sanitizeExtensionUrl_=function(a,b,c){(a=a.exec(b))?(a=a[1],-1==(c instanceof goog.string.Const?[goog.string.Const.unwrap(c)]:c.map(function(a){return goog.string.Const.unwrap(a)})).indexOf(a)&&(b=goog.html.SafeUrl.INNOCUOUS_STRING)):b=goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};goog.html.SafeUrl.fromTrustedResourceUrl=function(a){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.TrustedResourceUrl.unwrap(a))};\ngoog.html.SAFE_URL_PATTERN_=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;goog.html.SafeUrl.SAFE_URL_PATTERN=goog.html.SAFE_URL_PATTERN_;goog.html.SafeUrl.sanitize=function(a){if(a instanceof goog.html.SafeUrl)return a;a=\"object\"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);goog.html.SAFE_URL_PATTERN_.test(a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeUrl.sanitizeAssertUnchanged=function(a,b){if(a instanceof goog.html.SafeUrl)return a;a=\"object\"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);if(b&&/^data:/i.test(a)&&(b=goog.html.SafeUrl.fromDataUrl(a),b.getTypedStringValue()==a))return b;goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(a),\"%s does not match the safe URL pattern\",a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse=function(a){return new goog.html.SafeUrl(goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_,a)};goog.html.SafeUrl.ABOUT_BLANK=goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\"about:blank\");goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_={};goog.html.SafeStyle=function(){this.privateDoNotAccessOrElseSafeStyleWrappedValue_=\"\";this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeStyle.prototype.implementsGoogStringTypedString=!0;goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};\ngoog.html.SafeStyle.fromConstant=function(a){a=goog.string.Const.unwrap(a);if(0===a.length)return goog.html.SafeStyle.EMPTY;goog.asserts.assert(goog.string.internal.endsWith(a,\";\"),\"Last character of style string is not ';': \"+a);goog.asserts.assert(goog.string.internal.contains(a,\":\"),\"Style string must contain at least one ':', to specify a \\\"name: value\\\" pair: \"+a);return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeStyle.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_};goog.DEBUG&&(goog.html.SafeStyle.prototype.toString=function(){return\"SafeStyle{\"+this.privateDoNotAccessOrElseSafeStyleWrappedValue_+\"}\"});\ngoog.html.SafeStyle.unwrap=function(a){if(a instanceof goog.html.SafeStyle&&a.constructor===goog.html.SafeStyle&&a.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeStyleWrappedValue_;goog.asserts.fail(\"expected object of type SafeStyle, got '\"+a+\"' of type \"+goog.typeOf(a));return\"type_error:SafeStyle\"};goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(a)};\ngoog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeStyleWrappedValue_=a;return this};goog.html.SafeStyle.EMPTY=goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\"\");goog.html.SafeStyle.INNOCUOUS_STRING=\"zClosurez\";\ngoog.html.SafeStyle.create=function(a){var b=\"\",c;for(c in a){if(!/^[-_a-zA-Z0-9]+$/.test(c))throw Error(\"Name allows only [-_a-zA-Z0-9], got: \"+c);var d=a[c];null!=d&&(d=Array.isArray(d)?goog.array.map(d,goog.html.SafeStyle.sanitizePropertyValue_).join(\" \"):goog.html.SafeStyle.sanitizePropertyValue_(d),b+=c+\":\"+d+\";\")}return b?goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):goog.html.SafeStyle.EMPTY};\ngoog.html.SafeStyle.sanitizePropertyValue_=function(a){if(a instanceof goog.html.SafeUrl)return'url(\"'+goog.html.SafeUrl.unwrap(a).replace(/</g,\"%3c\").replace(/[\\\\\"]/g,\"\\\\$&\")+'\")';a=a instanceof goog.string.Const?goog.string.Const.unwrap(a):goog.html.SafeStyle.sanitizePropertyValueString_(String(a));if(/[{;}]/.test(a))throw new goog.asserts.AssertionError(\"Value does not allow [{;}], got: %s.\",[a]);return a};\ngoog.html.SafeStyle.sanitizePropertyValueString_=function(a){var b=a.replace(goog.html.SafeStyle.FUNCTIONS_RE_,\"$1\").replace(goog.html.SafeStyle.FUNCTIONS_RE_,\"$1\").replace(goog.html.SafeStyle.URL_RE_,\"url\");if(goog.html.SafeStyle.VALUE_RE_.test(b)){if(goog.html.SafeStyle.COMMENT_RE_.test(a))return goog.asserts.fail(\"String value disallows comments, got: \"+a),goog.html.SafeStyle.INNOCUOUS_STRING;if(!goog.html.SafeStyle.hasBalancedQuotes_(a))return goog.asserts.fail(\"String value requires balanced quotes, got: \"+\na),goog.html.SafeStyle.INNOCUOUS_STRING;if(!goog.html.SafeStyle.hasBalancedSquareBrackets_(a))return goog.asserts.fail(\"String value requires balanced square brackets and one identifier per pair of brackets, got: \"+a),goog.html.SafeStyle.INNOCUOUS_STRING}else return goog.asserts.fail(\"String value allows only \"+goog.html.SafeStyle.VALUE_ALLOWED_CHARS_+\" and simple functions, got: \"+a),goog.html.SafeStyle.INNOCUOUS_STRING;return goog.html.SafeStyle.sanitizeUrl_(a)};\ngoog.html.SafeStyle.hasBalancedQuotes_=function(a){for(var b=!0,c=!0,d=0;d<a.length;d++){var e=a.charAt(d);\"'\"==e&&c?b=!b:'\"'==e&&b&&(c=!c)}return b&&c};goog.html.SafeStyle.hasBalancedSquareBrackets_=function(a){for(var b=!0,c=/^[-_a-zA-Z0-9]$/,d=0;d<a.length;d++){var e=a.charAt(d);if(\"]\"==e){if(b)return!1;b=!0}else if(\"[\"==e){if(!b)return!1;b=!1}else if(!b&&!c.test(e))return!1}return b};goog.html.SafeStyle.VALUE_ALLOWED_CHARS_=\"[-,.\\\"'%_!# a-zA-Z0-9\\\\[\\\\]]\";\ngoog.html.SafeStyle.VALUE_RE_=new RegExp(\"^\"+goog.html.SafeStyle.VALUE_ALLOWED_CHARS_+\"+$\");goog.html.SafeStyle.URL_RE_=/\\b(url\\([ \\t\\n]*)('[ -&(-\\[\\]-~]*'|\"[ !#-\\[\\]-~]*\"|[!#-&*-\\[\\]-~]*)([ \\t\\n]*\\))/g;goog.html.SafeStyle.ALLOWED_FUNCTIONS_=\"calc cubic-bezier fit-content hsl hsla linear-gradient matrix minmax repeat rgb rgba (rotate|scale|translate)(X|Y|Z|3d)?\".split(\" \");\ngoog.html.SafeStyle.FUNCTIONS_RE_=new RegExp(\"\\\\b(\"+goog.html.SafeStyle.ALLOWED_FUNCTIONS_.join(\"|\")+\")\\\\([-+*/0-9a-z.%\\\\[\\\\], ]+\\\\)\",\"g\");goog.html.SafeStyle.COMMENT_RE_=/\\/\\*/;goog.html.SafeStyle.sanitizeUrl_=function(a){return a.replace(goog.html.SafeStyle.URL_RE_,function(a,c,d,e){var b=\"\";d=d.replace(/^(['\"])(.*)\\1$/,function(a,c,d){b=c;return d});a=goog.html.SafeUrl.sanitize(d).getTypedStringValue();return c+b+a+b+e})};\ngoog.html.SafeStyle.concat=function(a){var b=\"\",c=function(a){Array.isArray(a)?goog.array.forEach(a,c):b+=goog.html.SafeStyle.unwrap(a)};goog.array.forEach(arguments,c);return b?goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):goog.html.SafeStyle.EMPTY};goog.html.SafeStyleSheet=function(){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_=\"\";this.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString=!0;goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};\ngoog.html.SafeStyleSheet.createRule=function(a,b){if(goog.string.internal.contains(a,\"<\"))throw Error(\"Selector does not allow '<', got: \"+a);var c=a.replace(/('|\")((?!\\1)[^\\r\\n\\f\\\\]|\\\\[\\s\\S])*\\1/g,\"\");if(!/^[-_a-zA-Z0-9#.:* ,>+~[\\]()=^$|]+$/.test(c))throw Error(\"Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\\\]()=^$|] and strings, got: \"+a);if(!goog.html.SafeStyleSheet.hasBalancedBrackets_(c))throw Error(\"() and [] in selector must be balanced, got: \"+a);b instanceof goog.html.SafeStyle||(b=goog.html.SafeStyle.create(b));\na=a+\"{\"+goog.html.SafeStyle.unwrap(b).replace(/</g,\"\\\\3C \")+\"}\";return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeStyleSheet.hasBalancedBrackets_=function(a){for(var b={\"(\":\")\",\"[\":\"]\"},c=[],d=0;d<a.length;d++){var e=a[d];if(b[e])c.push(b[e]);else if(goog.object.contains(b,e)&&c.pop()!=e)return!1}return 0==c.length};\ngoog.html.SafeStyleSheet.concat=function(a){var b=\"\",c=function(a){Array.isArray(a)?goog.array.forEach(a,c):b+=goog.html.SafeStyleSheet.unwrap(a)};goog.array.forEach(arguments,c);return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.SafeStyleSheet.fromConstant=function(a){a=goog.string.Const.unwrap(a);if(0===a.length)return goog.html.SafeStyleSheet.EMPTY;goog.asserts.assert(!goog.string.internal.contains(a,\"<\"),\"Forbidden '<' character in style sheet string: \"+a);return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeStyleSheet.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_};\ngoog.DEBUG&&(goog.html.SafeStyleSheet.prototype.toString=function(){return\"SafeStyleSheet{\"+this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_+\"}\"});\ngoog.html.SafeStyleSheet.unwrap=function(a){if(a instanceof goog.html.SafeStyleSheet&&a.constructor===goog.html.SafeStyleSheet&&a.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;goog.asserts.fail(\"expected object of type SafeStyleSheet, got '\"+a+\"' of type \"+goog.typeOf(a));return\"type_error:SafeStyleSheet\"};\ngoog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeStyleSheet).initSecurityPrivateDoNotAccessOrElse_(a)};goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_=a;return this};goog.html.SafeStyleSheet.EMPTY=goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(\"\");goog.labs={};goog.labs.userAgent={};goog.labs.userAgent.util={};goog.labs.userAgent.util.getNativeUserAgentString_=function(){var a=goog.labs.userAgent.util.getNavigator_();return a&&(a=a.userAgent)?a:\"\"};goog.labs.userAgent.util.getNavigator_=function(){return goog.global.navigator};goog.labs.userAgent.util.userAgent_=goog.labs.userAgent.util.getNativeUserAgentString_();goog.labs.userAgent.util.setUserAgent=function(a){goog.labs.userAgent.util.userAgent_=a||goog.labs.userAgent.util.getNativeUserAgentString_()};\ngoog.labs.userAgent.util.getUserAgent=function(){return goog.labs.userAgent.util.userAgent_};goog.labs.userAgent.util.matchUserAgent=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.internal.contains(b,a)};goog.labs.userAgent.util.matchUserAgentIgnoreCase=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.internal.caseInsensitiveContains(b,a)};\ngoog.labs.userAgent.util.extractVersionTuples=function(a){for(var b=/(\\w[\\w ]+)\\/([^\\s]+)\\s*(?:\\((.*?)\\))?/g,c=[],d;d=b.exec(a);)c.push([d[1],d[2],d[3]||void 0]);return c};goog.labs.userAgent.browser={};goog.labs.userAgent.browser.matchOpera_=function(){return goog.labs.userAgent.util.matchUserAgent(\"Opera\")};goog.labs.userAgent.browser.matchIE_=function(){return goog.labs.userAgent.util.matchUserAgent(\"Trident\")||goog.labs.userAgent.util.matchUserAgent(\"MSIE\")};goog.labs.userAgent.browser.matchEdgeHtml_=function(){return goog.labs.userAgent.util.matchUserAgent(\"Edge\")};goog.labs.userAgent.browser.matchEdgeChromium_=function(){return goog.labs.userAgent.util.matchUserAgent(\"Edg/\")};\ngoog.labs.userAgent.browser.matchOperaChromium_=function(){return goog.labs.userAgent.util.matchUserAgent(\"OPR\")};goog.labs.userAgent.browser.matchFirefox_=function(){return goog.labs.userAgent.util.matchUserAgent(\"Firefox\")||goog.labs.userAgent.util.matchUserAgent(\"FxiOS\")};\ngoog.labs.userAgent.browser.matchSafari_=function(){return goog.labs.userAgent.util.matchUserAgent(\"Safari\")&&!(goog.labs.userAgent.browser.matchChrome_()||goog.labs.userAgent.browser.matchCoast_()||goog.labs.userAgent.browser.matchOpera_()||goog.labs.userAgent.browser.matchEdgeHtml_()||goog.labs.userAgent.browser.matchEdgeChromium_()||goog.labs.userAgent.browser.matchOperaChromium_()||goog.labs.userAgent.browser.matchFirefox_()||goog.labs.userAgent.browser.isSilk()||goog.labs.userAgent.util.matchUserAgent(\"Android\"))};\ngoog.labs.userAgent.browser.matchCoast_=function(){return goog.labs.userAgent.util.matchUserAgent(\"Coast\")};goog.labs.userAgent.browser.matchIosWebview_=function(){return(goog.labs.userAgent.util.matchUserAgent(\"iPad\")||goog.labs.userAgent.util.matchUserAgent(\"iPhone\"))&&!goog.labs.userAgent.browser.matchSafari_()&&!goog.labs.userAgent.browser.matchChrome_()&&!goog.labs.userAgent.browser.matchCoast_()&&!goog.labs.userAgent.browser.matchFirefox_()&&goog.labs.userAgent.util.matchUserAgent(\"AppleWebKit\")};\ngoog.labs.userAgent.browser.matchChrome_=function(){return(goog.labs.userAgent.util.matchUserAgent(\"Chrome\")||goog.labs.userAgent.util.matchUserAgent(\"CriOS\"))&&!goog.labs.userAgent.browser.matchEdgeHtml_()};goog.labs.userAgent.browser.matchAndroidBrowser_=function(){return goog.labs.userAgent.util.matchUserAgent(\"Android\")&&!(goog.labs.userAgent.browser.isChrome()||goog.labs.userAgent.browser.isFirefox()||goog.labs.userAgent.browser.isOpera()||goog.labs.userAgent.browser.isSilk())};\ngoog.labs.userAgent.browser.isOpera=goog.labs.userAgent.browser.matchOpera_;goog.labs.userAgent.browser.isIE=goog.labs.userAgent.browser.matchIE_;goog.labs.userAgent.browser.isEdge=goog.labs.userAgent.browser.matchEdgeHtml_;goog.labs.userAgent.browser.isEdgeChromium=goog.labs.userAgent.browser.matchEdgeChromium_;goog.labs.userAgent.browser.isOperaChromium=goog.labs.userAgent.browser.matchOperaChromium_;goog.labs.userAgent.browser.isFirefox=goog.labs.userAgent.browser.matchFirefox_;\ngoog.labs.userAgent.browser.isSafari=goog.labs.userAgent.browser.matchSafari_;goog.labs.userAgent.browser.isCoast=goog.labs.userAgent.browser.matchCoast_;goog.labs.userAgent.browser.isIosWebview=goog.labs.userAgent.browser.matchIosWebview_;goog.labs.userAgent.browser.isChrome=goog.labs.userAgent.browser.matchChrome_;goog.labs.userAgent.browser.isAndroidBrowser=goog.labs.userAgent.browser.matchAndroidBrowser_;goog.labs.userAgent.browser.isSilk=function(){return goog.labs.userAgent.util.matchUserAgent(\"Silk\")};\ngoog.labs.userAgent.browser.getVersion=function(){function a(a){a=goog.array.find(a,d);return c[a]||\"\"}var b=goog.labs.userAgent.util.getUserAgent();if(goog.labs.userAgent.browser.isIE())return goog.labs.userAgent.browser.getIEVersion_(b);b=goog.labs.userAgent.util.extractVersionTuples(b);var c={};goog.array.forEach(b,function(a){c[a[0]]=a[1]});var d=goog.partial(goog.object.containsKey,c);return goog.labs.userAgent.browser.isOpera()?a([\"Version\",\"Opera\"]):goog.labs.userAgent.browser.isEdge()?a([\"Edge\"]):\ngoog.labs.userAgent.browser.isEdgeChromium()?a([\"Edg\"]):goog.labs.userAgent.browser.isChrome()?a([\"Chrome\",\"CriOS\",\"HeadlessChrome\"]):(b=b[2])&&b[1]||\"\"};goog.labs.userAgent.browser.isVersionOrHigher=function(a){return 0<=goog.string.internal.compareVersions(goog.labs.userAgent.browser.getVersion(),a)};\ngoog.labs.userAgent.browser.getIEVersion_=function(a){var b=/rv: *([\\d\\.]*)/.exec(a);if(b&&b[1])return b[1];b=\"\";var c=/MSIE +([\\d\\.]+)/.exec(a);if(c&&c[1])if(a=/Trident\\/(\\d.\\d)/.exec(a),\"7.0\"==c[1])if(a&&a[1])switch(a[1]){case \"4.0\":b=\"8.0\";break;case \"5.0\":b=\"9.0\";break;case \"6.0\":b=\"10.0\";break;case \"7.0\":b=\"11.0\"}else b=\"7.0\";else b=c[1];return b};goog.html.SafeHtml=function(){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_=\"\";this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;this.dir_=null};goog.html.SafeHtml.ENABLE_ERROR_MESSAGES=goog.DEBUG;goog.html.SafeHtml.SUPPORT_STYLE_ATTRIBUTE=!0;goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.SafeHtml.prototype.getDirection=function(){return this.dir_};\ngoog.html.SafeHtml.prototype.implementsGoogStringTypedString=!0;goog.html.SafeHtml.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString()};goog.DEBUG&&(goog.html.SafeHtml.prototype.toString=function(){return\"SafeHtml{\"+this.privateDoNotAccessOrElseSafeHtmlWrappedValue_+\"}\"});goog.html.SafeHtml.unwrap=function(a){return goog.html.SafeHtml.unwrapTrustedHTML(a).toString()};\ngoog.html.SafeHtml.unwrapTrustedHTML=function(a){if(a instanceof goog.html.SafeHtml&&a.constructor===goog.html.SafeHtml&&a.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeHtmlWrappedValue_;goog.asserts.fail(\"expected object of type SafeHtml, got '\"+a+\"' of type \"+goog.typeOf(a));return\"type_error:SafeHtml\"};\ngoog.html.SafeHtml.htmlEscape=function(a){if(a instanceof goog.html.SafeHtml)return a;var b=\"object\"==typeof a,c=null;b&&a.implementsGoogI18nBidiDirectionalString&&(c=a.getDirection());a=b&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.htmlEscape(a),c)};\ngoog.html.SafeHtml.htmlEscapePreservingNewlines=function(a){if(a instanceof goog.html.SafeHtml)return a;a=goog.html.SafeHtml.htmlEscape(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.newLineToBr(goog.html.SafeHtml.unwrap(a)),a.getDirection())};\ngoog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces=function(a){if(a instanceof goog.html.SafeHtml)return a;a=goog.html.SafeHtml.htmlEscape(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.whitespaceEscape(goog.html.SafeHtml.unwrap(a)),a.getDirection())};goog.html.SafeHtml.from=goog.html.SafeHtml.htmlEscape;\ngoog.html.SafeHtml.comment=function(a){return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\"\\x3c!--\"+goog.string.internal.htmlEscape(a)+\"--\\x3e\",null)};goog.html.SafeHtml.VALID_NAMES_IN_TAG_=/^[a-zA-Z0-9-]+$/;goog.html.SafeHtml.URL_ATTRIBUTES_={action:!0,cite:!0,data:!0,formaction:!0,href:!0,manifest:!0,poster:!0,src:!0};goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_={APPLET:!0,BASE:!0,EMBED:!0,IFRAME:!0,LINK:!0,MATH:!0,META:!0,OBJECT:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};\ngoog.html.SafeHtml.create=function(a,b,c){goog.html.SafeHtml.verifyTagName(String(a));return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(String(a),b,c)};\ngoog.html.SafeHtml.verifyTagName=function(a){if(!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(a))throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?\"Invalid tag name <\"+a+\">.\":\"\");if(a.toUpperCase()in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_)throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?\"Tag name <\"+a+\"> is not allowed for SafeHtml.\":\"\");};\ngoog.html.SafeHtml.createIframe=function(a,b,c,d){a&&goog.html.TrustedResourceUrl.unwrap(a);var e={};e.src=a||null;e.srcdoc=b&&goog.html.SafeHtml.unwrap(b);a=goog.html.SafeHtml.combineAttributes(e,{sandbox:\"\"},c);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\"iframe\",a,d)};\ngoog.html.SafeHtml.createSandboxIframe=function(a,b,c,d){if(!goog.html.SafeHtml.canUseSandboxIframe())throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?\"The browser does not support sandboxed iframes.\":\"\");var e={};e.src=a?goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a)):null;e.srcdoc=b||null;e.sandbox=\"\";a=goog.html.SafeHtml.combineAttributes(e,{},c);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\"iframe\",a,d)};\ngoog.html.SafeHtml.canUseSandboxIframe=function(){return goog.global.HTMLIFrameElement&&\"sandbox\"in goog.global.HTMLIFrameElement.prototype};goog.html.SafeHtml.createScriptSrc=function(a,b){goog.html.TrustedResourceUrl.unwrap(a);a=goog.html.SafeHtml.combineAttributes({src:a},{},b);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\"script\",a)};\ngoog.html.SafeHtml.createScript=function(a,b){for(var c in b){var d=c.toLowerCase();if(\"language\"==d||\"src\"==d||\"text\"==d||\"type\"==d)throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'Cannot set \"'+d+'\" attribute':\"\");}c=\"\";a=goog.array.concat(a);for(d=0;d<a.length;d++)c+=goog.html.SafeScript.unwrap(a[d]);a=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c,goog.i18n.bidi.Dir.NEUTRAL);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\"script\",b,a)};\ngoog.html.SafeHtml.createStyle=function(a,b){b=goog.html.SafeHtml.combineAttributes({type:\"text/css\"},{},b);var c=\"\";a=goog.array.concat(a);for(var d=0;d<a.length;d++)c+=goog.html.SafeStyleSheet.unwrap(a[d]);a=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c,goog.i18n.bidi.Dir.NEUTRAL);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\"style\",b,a)};\ngoog.html.SafeHtml.createMetaRefresh=function(a,b){a=goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a));(goog.labs.userAgent.browser.isIE()||goog.labs.userAgent.browser.isEdge())&&goog.string.internal.contains(a,\";\")&&(a=\"'\"+a.replace(/'/g,\"%27\")+\"'\");return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\"meta\",{\"http-equiv\":\"refresh\",content:(b||0)+\"; url=\"+a})};\ngoog.html.SafeHtml.getAttrNameAndValue_=function(a,b,c){if(c instanceof goog.string.Const)c=goog.string.Const.unwrap(c);else if(\"style\"==b.toLowerCase())if(goog.html.SafeHtml.SUPPORT_STYLE_ATTRIBUTE)c=goog.html.SafeHtml.getStyleValue_(c);else throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'Attribute \"style\" not supported.':\"\");else{if(/^on/i.test(b))throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'Attribute \"'+b+'\" requires goog.string.Const value, \"'+c+'\" given.':\"\");if(b.toLowerCase()in\ngoog.html.SafeHtml.URL_ATTRIBUTES_)if(c instanceof goog.html.TrustedResourceUrl)c=goog.html.TrustedResourceUrl.unwrap(c);else if(c instanceof goog.html.SafeUrl)c=goog.html.SafeUrl.unwrap(c);else if(\"string\"===typeof c)c=goog.html.SafeUrl.sanitize(c).getTypedStringValue();else throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'Attribute \"'+b+'\" on tag \"'+a+'\" requires goog.html.SafeUrl, goog.string.Const, or string, value \"'+c+'\" given.':\"\");}c.implementsGoogStringTypedString&&(c=c.getTypedStringValue());\ngoog.asserts.assert(\"string\"===typeof c||\"number\"===typeof c,\"String or number value expected, got \"+typeof c+\" with value: \"+c);return b+'=\"'+goog.string.internal.htmlEscape(String(c))+'\"'};goog.html.SafeHtml.getStyleValue_=function(a){if(!goog.isObject(a))throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'The \"style\" attribute requires goog.html.SafeStyle or map of style properties, '+typeof a+\" given: \"+a:\"\");a instanceof goog.html.SafeStyle||(a=goog.html.SafeStyle.create(a));return goog.html.SafeStyle.unwrap(a)};\ngoog.html.SafeHtml.createWithDir=function(a,b,c,d){b=goog.html.SafeHtml.create(b,c,d);b.dir_=a;return b};\ngoog.html.SafeHtml.join=function(a,b){a=goog.html.SafeHtml.htmlEscape(a);var c=a.getDirection(),d=[],e=function(a){Array.isArray(a)?goog.array.forEach(a,e):(a=goog.html.SafeHtml.htmlEscape(a),d.push(goog.html.SafeHtml.unwrap(a)),a=a.getDirection(),c==goog.i18n.bidi.Dir.NEUTRAL?c=a:a!=goog.i18n.bidi.Dir.NEUTRAL&&c!=a&&(c=null))};goog.array.forEach(b,e);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(d.join(goog.html.SafeHtml.unwrap(a)),c)};\ngoog.html.SafeHtml.concat=function(a){return goog.html.SafeHtml.join(goog.html.SafeHtml.EMPTY,Array.prototype.slice.call(arguments))};goog.html.SafeHtml.concatWithDir=function(a,b){var c=goog.html.SafeHtml.concat(goog.array.slice(arguments,1));c.dir_=a;return c};goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse=function(a,b){return(new goog.html.SafeHtml).initSecurityPrivateDoNotAccessOrElse_(a,b)};\ngoog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a,b){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createHTML(a):a;this.dir_=b;return this};\ngoog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse=function(a,b,c){var d=null;var e=\"<\"+a+goog.html.SafeHtml.stringifyAttributes(a,b);null==c?c=[]:Array.isArray(c)||(c=[c]);goog.dom.tags.isVoidTag(a.toLowerCase())?(goog.asserts.assert(!c.length,\"Void tag <\"+a+\"> does not allow content.\"),e+=\">\"):(d=goog.html.SafeHtml.concat(c),e+=\">\"+goog.html.SafeHtml.unwrap(d)+\"</\"+a+\">\",d=d.getDirection());(a=b&&b.dir)&&(d=/^(ltr|rtl|auto)$/i.test(a)?goog.i18n.bidi.Dir.NEUTRAL:null);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(e,\nd)};goog.html.SafeHtml.stringifyAttributes=function(a,b){var c=\"\";if(b)for(var d in b){if(!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(d))throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'Invalid attribute name \"'+d+'\".':\"\");var e=b[d];null!=e&&(c+=\" \"+goog.html.SafeHtml.getAttrNameAndValue_(a,d,e))}return c};\ngoog.html.SafeHtml.combineAttributes=function(a,b,c){var d={},e;for(e in a)goog.asserts.assert(e.toLowerCase()==e,\"Must be lower case\"),d[e]=a[e];for(e in b)goog.asserts.assert(e.toLowerCase()==e,\"Must be lower case\"),d[e]=b[e];if(c)for(e in c){var f=e.toLowerCase();if(f in a)throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'Cannot override \"'+f+'\" attribute, got \"'+e+'\" with value \"'+c[e]+'\"':\"\");f in b&&delete d[f];d[e]=c[e]}return d};\ngoog.html.SafeHtml.DOCTYPE_HTML=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\"<!DOCTYPE html>\",goog.i18n.bidi.Dir.NEUTRAL);goog.html.SafeHtml.EMPTY=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\"\",goog.i18n.bidi.Dir.NEUTRAL);goog.html.SafeHtml.BR=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\"<br>\",goog.i18n.bidi.Dir.NEUTRAL);goog.html.uncheckedconversions={};goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract=function(a,b,c){goog.asserts.assertString(goog.string.Const.unwrap(a),\"must provide justification\");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),\"must provide non-empty justification\");return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(b,c||null)};\ngoog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),\"must provide justification\");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),\"must provide non-empty justification\");return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),\"must provide justification\");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),\"must provide non-empty justification\");return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),\"must provide justification\");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),\"must provide non-empty justification\");return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),\"must provide justification\");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),\"must provide non-empty justification\");return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),\"must provide justification\");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),\"must provide non-empty justification\");return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};goog.dom.safe={};goog.dom.safe.InsertAdjacentHtmlPosition={AFTERBEGIN:\"afterbegin\",AFTEREND:\"afterend\",BEFOREBEGIN:\"beforebegin\",BEFOREEND:\"beforeend\"};goog.dom.safe.insertAdjacentHtml=function(a,b,c){a.insertAdjacentHTML(b,goog.html.SafeHtml.unwrapTrustedHTML(c))};goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_={MATH:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};\ngoog.dom.safe.isInnerHtmlCleanupRecursive_=goog.functions.cacheReturnValue(function(){if(goog.DEBUG&&\"undefined\"===typeof document)return!1;var a=document.createElement(\"div\"),b=document.createElement(\"div\");b.appendChild(document.createElement(\"div\"));a.appendChild(b);if(goog.DEBUG&&!a.firstChild)return!1;b=a.firstChild.firstChild;a.innerHTML=goog.html.SafeHtml.unwrapTrustedHTML(goog.html.SafeHtml.EMPTY);return!b.parentElement});\ngoog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse=function(a,b){if(goog.dom.safe.isInnerHtmlCleanupRecursive_())for(;a.lastChild;)a.removeChild(a.lastChild);a.innerHTML=goog.html.SafeHtml.unwrapTrustedHTML(b)};\ngoog.dom.safe.setInnerHtml=function(a,b){if(goog.asserts.ENABLE_ASSERTS){var c=a.tagName.toUpperCase();if(goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[c])throw Error(\"goog.dom.safe.setInnerHtml cannot be used to set content of \"+a.tagName+\".\");}goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(a,b)};goog.dom.safe.setOuterHtml=function(a,b){a.outerHTML=goog.html.SafeHtml.unwrapTrustedHTML(b)};\ngoog.dom.safe.setFormElementAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLFormElement(a).action=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setButtonFormAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLButtonElement(a).formAction=goog.html.SafeUrl.unwrap(b)};\ngoog.dom.safe.setInputFormAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLInputElement(a).formAction=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setStyle=function(a,b){a.style.cssText=goog.html.SafeStyle.unwrap(b)};goog.dom.safe.documentWrite=function(a,b){a.write(goog.html.SafeHtml.unwrapTrustedHTML(b))};\ngoog.dom.safe.setAnchorHref=function(a,b){goog.dom.asserts.assertIsHTMLAnchorElement(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setImageSrc=function(a,b){goog.dom.asserts.assertIsHTMLImageElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:image\\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrap(b)};\ngoog.dom.safe.setAudioSrc=function(a,b){goog.dom.asserts.assertIsHTMLAudioElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:audio\\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setVideoSrc=function(a,b){goog.dom.asserts.assertIsHTMLVideoElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:video\\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrap(b)};\ngoog.dom.safe.setEmbedSrc=function(a,b){goog.dom.asserts.assertIsHTMLEmbedElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};goog.dom.safe.setFrameSrc=function(a,b){goog.dom.asserts.assertIsHTMLFrameElement(a);a.src=goog.html.TrustedResourceUrl.unwrap(b)};goog.dom.safe.setIframeSrc=function(a,b){goog.dom.asserts.assertIsHTMLIFrameElement(a);a.src=goog.html.TrustedResourceUrl.unwrap(b)};\ngoog.dom.safe.setIframeSrcdoc=function(a,b){goog.dom.asserts.assertIsHTMLIFrameElement(a);a.srcdoc=goog.html.SafeHtml.unwrapTrustedHTML(b)};\ngoog.dom.safe.setLinkHrefAndRel=function(a,b,c){goog.dom.asserts.assertIsHTMLLinkElement(a);a.rel=c;goog.string.internal.caseInsensitiveContains(c,\"stylesheet\")?(goog.asserts.assert(b instanceof goog.html.TrustedResourceUrl,'URL must be TrustedResourceUrl because \"rel\" contains \"stylesheet\"'),a.href=goog.html.TrustedResourceUrl.unwrap(b)):a.href=b instanceof goog.html.TrustedResourceUrl?goog.html.TrustedResourceUrl.unwrap(b):b instanceof goog.html.SafeUrl?goog.html.SafeUrl.unwrap(b):goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitizeAssertUnchanged(b))};\ngoog.dom.safe.setObjectData=function(a,b){goog.dom.asserts.assertIsHTMLObjectElement(a);a.data=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};goog.dom.safe.setScriptSrc=function(a,b){goog.dom.asserts.assertIsHTMLScriptElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b);(b=goog.getScriptNonce())&&a.setAttribute(\"nonce\",b)};\ngoog.dom.safe.setScriptContent=function(a,b){goog.dom.asserts.assertIsHTMLScriptElement(a);a.text=goog.html.SafeScript.unwrapTrustedScript(b);(b=goog.getScriptNonce())&&a.setAttribute(\"nonce\",b)};goog.dom.safe.setLocationHref=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=goog.html.SafeUrl.unwrap(b)};\ngoog.dom.safe.assignLocation=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.assign(goog.html.SafeUrl.unwrap(b))};goog.dom.safe.replaceLocation=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.replace(goog.html.SafeUrl.unwrap(b))};\ngoog.dom.safe.openInWindow=function(a,b,c,d,e){a=a instanceof goog.html.SafeUrl?a:goog.html.SafeUrl.sanitizeAssertUnchanged(a);b=b||goog.global;c=c instanceof goog.string.Const?goog.string.Const.unwrap(c):c||\"\";return b.open(goog.html.SafeUrl.unwrap(a),c,d,e)};goog.dom.safe.parseFromStringHtml=function(a,b){return goog.dom.safe.parseFromString(a,b,\"text/html\")};goog.dom.safe.parseFromString=function(a,b,c){return a.parseFromString(goog.html.SafeHtml.unwrapTrustedHTML(b),c)};\ngoog.dom.safe.createImageFromBlob=function(a){if(!/^image\\/.*/g.test(a.type))throw Error(\"goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.\");var b=goog.global.URL.createObjectURL(a);a=new goog.global.Image;a.onload=function(){goog.global.URL.revokeObjectURL(b)};goog.dom.safe.setImageSrc(a,goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from(\"Image blob URL.\"),b));return a};goog.string.DETECT_DOUBLE_ESCAPING=!1;goog.string.FORCE_NON_DOM_HTML_UNESCAPING=!1;goog.string.Unicode={NBSP:\"\\u00a0\"};goog.string.startsWith=goog.string.internal.startsWith;goog.string.endsWith=goog.string.internal.endsWith;goog.string.caseInsensitiveStartsWith=goog.string.internal.caseInsensitiveStartsWith;goog.string.caseInsensitiveEndsWith=goog.string.internal.caseInsensitiveEndsWith;goog.string.caseInsensitiveEquals=goog.string.internal.caseInsensitiveEquals;\ngoog.string.subs=function(a,b){for(var c=a.split(\"%s\"),d=\"\",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join(\"%s\")};goog.string.collapseWhitespace=function(a){return a.replace(/[\\s\\xa0]+/g,\" \").replace(/^\\s+|\\s+$/g,\"\")};goog.string.isEmptyOrWhitespace=goog.string.internal.isEmptyOrWhitespace;goog.string.isEmptyString=function(a){return 0==a.length};goog.string.isEmpty=goog.string.isEmptyOrWhitespace;goog.string.isEmptyOrWhitespaceSafe=function(a){return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(a))};\ngoog.string.isEmptySafe=goog.string.isEmptyOrWhitespaceSafe;goog.string.isBreakingWhitespace=function(a){return!/[^\\t\\n\\r ]/.test(a)};goog.string.isAlpha=function(a){return!/[^a-zA-Z]/.test(a)};goog.string.isNumeric=function(a){return!/[^0-9]/.test(a)};goog.string.isAlphaNumeric=function(a){return!/[^a-zA-Z0-9]/.test(a)};goog.string.isSpace=function(a){return\" \"==a};goog.string.isUnicodeChar=function(a){return 1==a.length&&\" \"<=a&&\"~\">=a||\"\\u0080\"<=a&&\"\\ufffd\">=a};\ngoog.string.stripNewlines=function(a){return a.replace(/(\\r\\n|\\r|\\n)+/g,\" \")};goog.string.canonicalizeNewlines=function(a){return a.replace(/(\\r\\n|\\r|\\n)/g,\"\\n\")};goog.string.normalizeWhitespace=function(a){return a.replace(/\\xa0|\\s/g,\" \")};goog.string.normalizeSpaces=function(a){return a.replace(/\\xa0|[ \\t]+/g,\" \")};goog.string.collapseBreakingSpaces=function(a){return a.replace(/[\\t\\r\\n ]+/g,\" \").replace(/^[\\t\\r\\n ]+|[\\t\\r\\n ]+$/g,\"\")};goog.string.trim=goog.string.internal.trim;\ngoog.string.trimLeft=function(a){return a.replace(/^[\\s\\xa0]+/,\"\")};goog.string.trimRight=function(a){return a.replace(/[\\s\\xa0]+$/,\"\")};goog.string.caseInsensitiveCompare=goog.string.internal.caseInsensitiveCompare;\ngoog.string.numberAwareCompare_=function(a,b,c){if(a==b)return 0;if(!a)return-1;if(!b)return 1;for(var d=a.toLowerCase().match(c),e=b.toLowerCase().match(c),f=Math.min(d.length,e.length),g=0;g<f;g++){c=d[g];var h=e[g];if(c!=h)return a=parseInt(c,10),!isNaN(a)&&(b=parseInt(h,10),!isNaN(b)&&a-b)?a-b:c<h?-1:1}return d.length!=e.length?d.length-e.length:a<b?-1:1};goog.string.intAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\\d+|\\D+/g)};\ngoog.string.floatAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\\d+|\\.\\d+|\\D+/g)};goog.string.numerateCompare=goog.string.floatAwareCompare;goog.string.urlEncode=function(a){return encodeURIComponent(String(a))};goog.string.urlDecode=function(a){return decodeURIComponent(a.replace(/\\+/g,\" \"))};goog.string.newLineToBr=goog.string.internal.newLineToBr;\ngoog.string.htmlEscape=function(a,b){a=goog.string.internal.htmlEscape(a,b);goog.string.DETECT_DOUBLE_ESCAPING&&(a=a.replace(goog.string.E_RE_,\"&#101;\"));return a};goog.string.E_RE_=/e/g;goog.string.unescapeEntities=function(a){return goog.string.contains(a,\"&\")?!goog.string.FORCE_NON_DOM_HTML_UNESCAPING&&\"document\"in goog.global?goog.string.unescapeEntitiesUsingDom_(a):goog.string.unescapePureXmlEntities_(a):a};\ngoog.string.unescapeEntitiesWithDocument=function(a,b){return goog.string.contains(a,\"&\")?goog.string.unescapeEntitiesUsingDom_(a,b):a};\ngoog.string.unescapeEntitiesUsingDom_=function(a,b){var c={\"&amp;\":\"&\",\"&lt;\":\"<\",\"&gt;\":\">\",\"&quot;\":'\"'};var d=b?b.createElement(\"div\"):goog.global.document.createElement(\"div\");return a.replace(goog.string.HTML_ENTITY_PATTERN_,function(a,b){var e=c[a];if(e)return e;\"#\"==b.charAt(0)&&(b=Number(\"0\"+b.substr(1)),isNaN(b)||(e=String.fromCharCode(b)));e||(goog.dom.safe.setInnerHtml(d,goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from(\"Single HTML entity.\"),\na+\" \")),e=d.firstChild.nodeValue.slice(0,-1));return c[a]=e})};goog.string.unescapePureXmlEntities_=function(a){return a.replace(/&([^;]+);/g,function(a,c){switch(c){case \"amp\":return\"&\";case \"lt\":return\"<\";case \"gt\":return\">\";case \"quot\":return'\"';default:return\"#\"!=c.charAt(0)||(c=Number(\"0\"+c.substr(1)),isNaN(c))?a:String.fromCharCode(c)}})};goog.string.HTML_ENTITY_PATTERN_=/&([^;\\s<&]+);?/g;goog.string.whitespaceEscape=function(a,b){return goog.string.newLineToBr(a.replace(/  /g,\" &#160;\"),b)};\ngoog.string.preserveSpaces=function(a){return a.replace(/(^|[\\n ]) /g,\"$1\"+goog.string.Unicode.NBSP)};goog.string.stripQuotes=function(a,b){for(var c=b.length,d=0;d<c;d++){var e=1==c?b:b.charAt(d);if(a.charAt(0)==e&&a.charAt(a.length-1)==e)return a.substring(1,a.length-1)}return a};goog.string.truncate=function(a,b,c){c&&(a=goog.string.unescapeEntities(a));a.length>b&&(a=a.substring(0,b-3)+\"...\");c&&(a=goog.string.htmlEscape(a));return a};\ngoog.string.truncateMiddle=function(a,b,c,d){c&&(a=goog.string.unescapeEntities(a));if(d&&a.length>b){d>b&&(d=b);var e=a.length-d;a=a.substring(0,b-d)+\"...\"+a.substring(e)}else a.length>b&&(d=Math.floor(b/2),e=a.length-d,a=a.substring(0,d+b%2)+\"...\"+a.substring(e));c&&(a=goog.string.htmlEscape(a));return a};goog.string.specialEscapeChars_={\"\\x00\":\"\\\\0\",\"\\b\":\"\\\\b\",\"\\f\":\"\\\\f\",\"\\n\":\"\\\\n\",\"\\r\":\"\\\\r\",\"\\t\":\"\\\\t\",\"\\x0B\":\"\\\\x0B\",'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\",\"<\":\"\\\\u003C\"};goog.string.jsEscapeCache_={\"'\":\"\\\\'\"};\ngoog.string.quote=function(a){a=String(a);for(var b=['\"'],c=0;c<a.length;c++){var d=a.charAt(c),e=d.charCodeAt(0);b[c+1]=goog.string.specialEscapeChars_[d]||(31<e&&127>e?d:goog.string.escapeChar(d))}b.push('\"');return b.join(\"\")};goog.string.escapeString=function(a){for(var b=[],c=0;c<a.length;c++)b[c]=goog.string.escapeChar(a.charAt(c));return b.join(\"\")};\ngoog.string.escapeChar=function(a){if(a in goog.string.jsEscapeCache_)return goog.string.jsEscapeCache_[a];if(a in goog.string.specialEscapeChars_)return goog.string.jsEscapeCache_[a]=goog.string.specialEscapeChars_[a];var b=a.charCodeAt(0);if(31<b&&127>b)var c=a;else{if(256>b){if(c=\"\\\\x\",16>b||256<b)c+=\"0\"}else c=\"\\\\u\",4096>b&&(c+=\"0\");c+=b.toString(16).toUpperCase()}return goog.string.jsEscapeCache_[a]=c};goog.string.contains=goog.string.internal.contains;goog.string.caseInsensitiveContains=goog.string.internal.caseInsensitiveContains;\ngoog.string.countOf=function(a,b){return a&&b?a.split(b).length-1:0};goog.string.removeAt=function(a,b,c){var d=a;0<=b&&b<a.length&&0<c&&(d=a.substr(0,b)+a.substr(b+c,a.length-b-c));return d};goog.string.remove=function(a,b){return a.replace(b,\"\")};goog.string.removeAll=function(a,b){b=new RegExp(goog.string.regExpEscape(b),\"g\");return a.replace(b,\"\")};goog.string.replaceAll=function(a,b,c){b=new RegExp(goog.string.regExpEscape(b),\"g\");return a.replace(b,c.replace(/\\$/g,\"$$$$\"))};\ngoog.string.regExpEscape=function(a){return String(a).replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g,\"\\\\$1\").replace(/\\x08/g,\"\\\\x08\")};goog.string.repeat=String.prototype.repeat?function(a,b){return a.repeat(b)}:function(a,b){return Array(b+1).join(a)};goog.string.padNumber=function(a,b,c){a=void 0!==c?a.toFixed(c):String(a);c=a.indexOf(\".\");-1==c&&(c=a.length);return goog.string.repeat(\"0\",Math.max(0,b-c))+a};goog.string.makeSafe=function(a){return null==a?\"\":String(a)};\ngoog.string.buildString=function(a){return Array.prototype.join.call(arguments,\"\")};goog.string.getRandomString=function(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^goog.now()).toString(36)};goog.string.compareVersions=goog.string.internal.compareVersions;goog.string.hashCode=function(a){for(var b=0,c=0;c<a.length;++c)b=31*b+a.charCodeAt(c)>>>0;return b};goog.string.uniqueStringCounter_=2147483648*Math.random()|0;\ngoog.string.createUniqueString=function(){return\"goog_\"+goog.string.uniqueStringCounter_++};goog.string.toNumber=function(a){var b=Number(a);return 0==b&&goog.string.isEmptyOrWhitespace(a)?NaN:b};goog.string.isLowerCamelCase=function(a){return/^[a-z]+([A-Z][a-z]*)*$/.test(a)};goog.string.isUpperCamelCase=function(a){return/^([A-Z][a-z]*)+$/.test(a)};goog.string.toCamelCase=function(a){return String(a).replace(/\\-([a-z])/g,function(a,c){return c.toUpperCase()})};\ngoog.string.toSelectorCase=function(a){return String(a).replace(/([A-Z])/g,\"-$1\").toLowerCase()};goog.string.toTitleCase=function(a,b){b=\"string\"===typeof b?goog.string.regExpEscape(b):\"\\\\s\";return a.replace(new RegExp(\"(^\"+(b?\"|[\"+b+\"]+\":\"\")+\")([a-z])\",\"g\"),function(a,b,e){return b+e.toUpperCase()})};goog.string.capitalize=function(a){return String(a.charAt(0)).toUpperCase()+String(a.substr(1)).toLowerCase()};\ngoog.string.parseInt=function(a){isFinite(a)&&(a=String(a));return\"string\"===typeof a?/^\\s*-?0x/i.test(a)?parseInt(a,16):parseInt(a,10):NaN};goog.string.splitLimit=function(a,b,c){a=a.split(b);for(var d=[];0<c&&a.length;)d.push(a.shift()),c--;a.length&&d.push(a.join(b));return d};goog.string.lastComponent=function(a,b){if(b)\"string\"==typeof b&&(b=[b]);else return a;for(var c=-1,d=0;d<b.length;d++)if(\"\"!=b[d]){var e=a.lastIndexOf(b[d]);e>c&&(c=e)}return-1==c?a:a.slice(c+1)};\ngoog.string.editDistance=function(a,b){var c=[],d=[];if(a==b)return 0;if(!a.length||!b.length)return Math.max(a.length,b.length);for(var e=0;e<b.length+1;e++)c[e]=e;for(e=0;e<a.length;e++){d[0]=e+1;for(var f=0;f<b.length;f++)d[f+1]=Math.min(d[f]+1,c[f+1]+1,c[f]+Number(a[e]!=b[f]));for(f=0;f<c.length;f++)c[f]=d[f]}return d[b.length]};goog.labs.userAgent.engine={};goog.labs.userAgent.engine.isPresto=function(){return goog.labs.userAgent.util.matchUserAgent(\"Presto\")};goog.labs.userAgent.engine.isTrident=function(){return goog.labs.userAgent.util.matchUserAgent(\"Trident\")||goog.labs.userAgent.util.matchUserAgent(\"MSIE\")};goog.labs.userAgent.engine.isEdge=function(){return goog.labs.userAgent.util.matchUserAgent(\"Edge\")};\ngoog.labs.userAgent.engine.isWebKit=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase(\"WebKit\")&&!goog.labs.userAgent.engine.isEdge()};goog.labs.userAgent.engine.isGecko=function(){return goog.labs.userAgent.util.matchUserAgent(\"Gecko\")&&!goog.labs.userAgent.engine.isWebKit()&&!goog.labs.userAgent.engine.isTrident()&&!goog.labs.userAgent.engine.isEdge()};\ngoog.labs.userAgent.engine.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent();if(a){a=goog.labs.userAgent.util.extractVersionTuples(a);var b=goog.labs.userAgent.engine.getEngineTuple_(a);if(b)return\"Gecko\"==b[0]?goog.labs.userAgent.engine.getVersionForKey_(a,\"Firefox\"):b[1];a=a[0];var c;if(a&&(c=a[2])&&(c=/Trident\\/([^\\s;]+)/.exec(c)))return c[1]}return\"\"};\ngoog.labs.userAgent.engine.getEngineTuple_=function(a){if(!goog.labs.userAgent.engine.isEdge())return a[1];for(var b=0;b<a.length;b++){var c=a[b];if(\"Edge\"==c[0])return c}};goog.labs.userAgent.engine.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(),a)};goog.labs.userAgent.engine.getVersionForKey_=function(a,b){return(a=goog.array.find(a,function(a){return b==a[0]}))&&a[1]||\"\"};goog.labs.userAgent.platform={};goog.labs.userAgent.platform.isAndroid=function(){return goog.labs.userAgent.util.matchUserAgent(\"Android\")};goog.labs.userAgent.platform.isIpod=function(){return goog.labs.userAgent.util.matchUserAgent(\"iPod\")};goog.labs.userAgent.platform.isIphone=function(){return goog.labs.userAgent.util.matchUserAgent(\"iPhone\")&&!goog.labs.userAgent.util.matchUserAgent(\"iPod\")&&!goog.labs.userAgent.util.matchUserAgent(\"iPad\")};goog.labs.userAgent.platform.isIpad=function(){return goog.labs.userAgent.util.matchUserAgent(\"iPad\")};\ngoog.labs.userAgent.platform.isIos=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpad()||goog.labs.userAgent.platform.isIpod()};goog.labs.userAgent.platform.isMacintosh=function(){return goog.labs.userAgent.util.matchUserAgent(\"Macintosh\")};goog.labs.userAgent.platform.isLinux=function(){return goog.labs.userAgent.util.matchUserAgent(\"Linux\")};goog.labs.userAgent.platform.isWindows=function(){return goog.labs.userAgent.util.matchUserAgent(\"Windows\")};\ngoog.labs.userAgent.platform.isChromeOS=function(){return goog.labs.userAgent.util.matchUserAgent(\"CrOS\")};goog.labs.userAgent.platform.isChromecast=function(){return goog.labs.userAgent.util.matchUserAgent(\"CrKey\")};goog.labs.userAgent.platform.isKaiOS=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase(\"KaiOS\")};\ngoog.labs.userAgent.platform.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent(),b=\"\";goog.labs.userAgent.platform.isWindows()?(b=/Windows (?:NT|Phone) ([0-9.]+)/,b=(a=b.exec(a))?a[1]:\"0.0\"):goog.labs.userAgent.platform.isIos()?(b=/(?:iPhone|iPod|iPad|CPU)\\s+OS\\s+(\\S+)/,b=(a=b.exec(a))&&a[1].replace(/_/g,\".\")):goog.labs.userAgent.platform.isMacintosh()?(b=/Mac OS X ([0-9_.]+)/,b=(a=b.exec(a))?a[1].replace(/_/g,\".\"):\"10\"):goog.labs.userAgent.platform.isKaiOS()?(b=/(?:KaiOS)\\/(\\S+)/i,\nb=(a=b.exec(a))&&a[1]):goog.labs.userAgent.platform.isAndroid()?(b=/Android\\s+([^\\);]+)(\\)|;)/,b=(a=b.exec(a))&&a[1]):goog.labs.userAgent.platform.isChromeOS()&&(b=/(?:CrOS\\s+(?:i686|x86_64)\\s+([0-9.]+))/,b=(a=b.exec(a))&&a[1]);return b||\"\"};goog.labs.userAgent.platform.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(),a)};goog.reflect={};goog.reflect.object=function(a,b){return b};goog.reflect.objectProperty=function(a,b){return a};goog.reflect.sinkValue=function(a){goog.reflect.sinkValue[\" \"](a);return a};goog.reflect.sinkValue[\" \"]=goog.nullFunction;goog.reflect.canAccessProperty=function(a,b){try{return goog.reflect.sinkValue(a[b]),!0}catch(c){}return!1};goog.reflect.cache=function(a,b,c,d){d=d?d(b):b;return Object.prototype.hasOwnProperty.call(a,d)?a[d]:a[d]=c(b)};goog.userAgent={};goog.userAgent.ASSUME_IE=!1;goog.userAgent.ASSUME_EDGE=!1;goog.userAgent.ASSUME_GECKO=!1;goog.userAgent.ASSUME_WEBKIT=!1;goog.userAgent.ASSUME_MOBILE_WEBKIT=!1;goog.userAgent.ASSUME_OPERA=!1;goog.userAgent.ASSUME_ANY_VERSION=!1;goog.userAgent.BROWSER_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_GECKO||goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_OPERA;goog.userAgent.getUserAgentString=function(){return goog.labs.userAgent.util.getUserAgent()};\ngoog.userAgent.getNavigatorTyped=function(){return goog.global.navigator||null};goog.userAgent.getNavigator=function(){return goog.userAgent.getNavigatorTyped()};goog.userAgent.OPERA=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_OPERA:goog.labs.userAgent.browser.isOpera();goog.userAgent.IE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_IE:goog.labs.userAgent.browser.isIE();goog.userAgent.EDGE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_EDGE:goog.labs.userAgent.engine.isEdge();\ngoog.userAgent.EDGE_OR_IE=goog.userAgent.EDGE||goog.userAgent.IE;goog.userAgent.GECKO=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_GECKO:goog.labs.userAgent.engine.isGecko();goog.userAgent.WEBKIT=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_MOBILE_WEBKIT:goog.labs.userAgent.engine.isWebKit();goog.userAgent.isMobile_=function(){return goog.userAgent.WEBKIT&&goog.labs.userAgent.util.matchUserAgent(\"Mobile\")};\ngoog.userAgent.MOBILE=goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.isMobile_();goog.userAgent.SAFARI=goog.userAgent.WEBKIT;goog.userAgent.determinePlatform_=function(){var a=goog.userAgent.getNavigatorTyped();return a&&a.platform||\"\"};goog.userAgent.PLATFORM=goog.userAgent.determinePlatform_();goog.userAgent.ASSUME_MAC=!1;goog.userAgent.ASSUME_WINDOWS=!1;goog.userAgent.ASSUME_LINUX=!1;goog.userAgent.ASSUME_X11=!1;goog.userAgent.ASSUME_ANDROID=!1;goog.userAgent.ASSUME_IPHONE=!1;\ngoog.userAgent.ASSUME_IPAD=!1;goog.userAgent.ASSUME_IPOD=!1;goog.userAgent.ASSUME_KAIOS=!1;goog.userAgent.PLATFORM_KNOWN_=goog.userAgent.ASSUME_MAC||goog.userAgent.ASSUME_WINDOWS||goog.userAgent.ASSUME_LINUX||goog.userAgent.ASSUME_X11||goog.userAgent.ASSUME_ANDROID||goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD;goog.userAgent.MAC=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_MAC:goog.labs.userAgent.platform.isMacintosh();\ngoog.userAgent.WINDOWS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_WINDOWS:goog.labs.userAgent.platform.isWindows();goog.userAgent.isLegacyLinux_=function(){return goog.labs.userAgent.platform.isLinux()||goog.labs.userAgent.platform.isChromeOS()};goog.userAgent.LINUX=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_LINUX:goog.userAgent.isLegacyLinux_();goog.userAgent.isX11_=function(){var a=goog.userAgent.getNavigatorTyped();return!!a&&goog.string.contains(a.appVersion||\"\",\"X11\")};\ngoog.userAgent.X11=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_X11:goog.userAgent.isX11_();goog.userAgent.ANDROID=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_ANDROID:goog.labs.userAgent.platform.isAndroid();goog.userAgent.IPHONE=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE:goog.labs.userAgent.platform.isIphone();goog.userAgent.IPAD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad();\ngoog.userAgent.IPOD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIpod();goog.userAgent.IOS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIos();goog.userAgent.KAIOS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_KAIOS:goog.labs.userAgent.platform.isKaiOS();\ngoog.userAgent.determineVersion_=function(){var a=\"\",b=goog.userAgent.getVersionRegexResult_();b&&(a=b?b[1]:\"\");return goog.userAgent.IE&&(b=goog.userAgent.getDocumentMode_(),null!=b&&b>parseFloat(a))?String(b):a};\ngoog.userAgent.getVersionRegexResult_=function(){var a=goog.userAgent.getUserAgentString();if(goog.userAgent.GECKO)return/rv:([^\\);]+)(\\)|;)/.exec(a);if(goog.userAgent.EDGE)return/Edge\\/([\\d\\.]+)/.exec(a);if(goog.userAgent.IE)return/\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(a);if(goog.userAgent.WEBKIT)return/WebKit\\/(\\S+)/.exec(a);if(goog.userAgent.OPERA)return/(?:Version)[ \\/]?(\\S+)/.exec(a)};goog.userAgent.getDocumentMode_=function(){var a=goog.global.document;return a?a.documentMode:void 0};\ngoog.userAgent.VERSION=goog.userAgent.determineVersion_();goog.userAgent.compare=function(a,b){return goog.string.compareVersions(a,b)};goog.userAgent.isVersionOrHigherCache_={};goog.userAgent.isVersionOrHigher=function(a){return goog.userAgent.ASSUME_ANY_VERSION||goog.reflect.cache(goog.userAgent.isVersionOrHigherCache_,a,function(){return 0<=goog.string.compareVersions(goog.userAgent.VERSION,a)})};goog.userAgent.isVersion=goog.userAgent.isVersionOrHigher;\ngoog.userAgent.isDocumentModeOrHigher=function(a){return Number(goog.userAgent.DOCUMENT_MODE)>=a};goog.userAgent.isDocumentMode=goog.userAgent.isDocumentModeOrHigher;goog.userAgent.DOCUMENT_MODE=function(){if(goog.global.document&&goog.userAgent.IE){var a=goog.userAgent.getDocumentMode_();return a?a:parseInt(goog.userAgent.VERSION,10)||void 0}}();goog.userAgent.product={};goog.userAgent.product.ASSUME_FIREFOX=!1;goog.userAgent.product.ASSUME_IPHONE=!1;goog.userAgent.product.ASSUME_IPAD=!1;goog.userAgent.product.ASSUME_ANDROID=!1;goog.userAgent.product.ASSUME_CHROME=!1;goog.userAgent.product.ASSUME_SAFARI=!1;\ngoog.userAgent.product.PRODUCT_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_OPERA||goog.userAgent.product.ASSUME_FIREFOX||goog.userAgent.product.ASSUME_IPHONE||goog.userAgent.product.ASSUME_IPAD||goog.userAgent.product.ASSUME_ANDROID||goog.userAgent.product.ASSUME_CHROME||goog.userAgent.product.ASSUME_SAFARI;goog.userAgent.product.OPERA=goog.userAgent.OPERA;goog.userAgent.product.IE=goog.userAgent.IE;goog.userAgent.product.EDGE=goog.userAgent.EDGE;\ngoog.userAgent.product.FIREFOX=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_FIREFOX:goog.labs.userAgent.browser.isFirefox();goog.userAgent.product.isIphoneOrIpod_=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpod()};goog.userAgent.product.IPHONE=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPHONE:goog.userAgent.product.isIphoneOrIpod_();\ngoog.userAgent.product.IPAD=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad();goog.userAgent.product.ANDROID=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_ANDROID:goog.labs.userAgent.browser.isAndroidBrowser();goog.userAgent.product.CHROME=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_CHROME:goog.labs.userAgent.browser.isChrome();\ngoog.userAgent.product.isSafariDesktop_=function(){return goog.labs.userAgent.browser.isSafari()&&!goog.labs.userAgent.platform.isIos()};goog.userAgent.product.SAFARI=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_SAFARI:goog.userAgent.product.isSafariDesktop_();goog.crypt.base64={};goog.crypt.base64.DEFAULT_ALPHABET_COMMON_=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";goog.crypt.base64.ENCODED_VALS=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_+\"+/=\";goog.crypt.base64.ENCODED_VALS_WEBSAFE=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_+\"-_.\";goog.crypt.base64.Alphabet={DEFAULT:0,NO_PADDING:1,WEBSAFE:2,WEBSAFE_DOT_PADDING:3,WEBSAFE_NO_PADDING:4};goog.crypt.base64.paddingChars_=\"=.\";\ngoog.crypt.base64.isPadding_=function(a){return goog.string.contains(goog.crypt.base64.paddingChars_,a)};goog.crypt.base64.byteToCharMaps_={};goog.crypt.base64.charToByteMap_=null;goog.crypt.base64.ASSUME_NATIVE_SUPPORT_=goog.userAgent.GECKO||goog.userAgent.WEBKIT&&!goog.userAgent.product.SAFARI||goog.userAgent.OPERA;goog.crypt.base64.HAS_NATIVE_ENCODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||\"function\"==typeof goog.global.btoa;\ngoog.crypt.base64.HAS_NATIVE_DECODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||!goog.userAgent.product.SAFARI&&!goog.userAgent.IE&&\"function\"==typeof goog.global.atob;\ngoog.crypt.base64.encodeByteArray=function(a,b){goog.asserts.assert(goog.isArrayLike(a),\"encodeByteArray takes an array as a parameter\");void 0===b&&(b=goog.crypt.base64.Alphabet.DEFAULT);goog.crypt.base64.init_();b=goog.crypt.base64.byteToCharMaps_[b];for(var c=[],d=0;d<a.length;d+=3){var e=a[d],f=d+1<a.length,g=f?a[d+1]:0,h=d+2<a.length,k=h?a[d+2]:0,l=e>>2;e=(e&3)<<4|g>>4;g=(g&15)<<2|k>>6;k&=63;h||(k=64,f||(g=64));c.push(b[l],b[e],b[g]||\"\",b[k]||\"\")}return c.join(\"\")};\ngoog.crypt.base64.encodeString=function(a,b){return goog.crypt.base64.HAS_NATIVE_ENCODE_&&!b?goog.global.btoa(a):goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(a),b)};goog.crypt.base64.decodeString=function(a,b){if(goog.crypt.base64.HAS_NATIVE_DECODE_&&!b)return goog.global.atob(a);var c=\"\";goog.crypt.base64.decodeStringInternal_(a,function(a){c+=String.fromCharCode(a)});return c};\ngoog.crypt.base64.decodeStringToByteArray=function(a,b){var c=[];goog.crypt.base64.decodeStringInternal_(a,function(a){c.push(a)});return c};\ngoog.crypt.base64.decodeStringToUint8Array=function(a){goog.asserts.assert(!goog.userAgent.IE||goog.userAgent.isVersionOrHigher(\"10\"),\"Browser does not support typed arrays\");var b=a.length,c=3*b/4;c%3?c=Math.floor(c):goog.crypt.base64.isPadding_(a[b-1])&&(c=goog.crypt.base64.isPadding_(a[b-2])?c-2:c-1);var d=new Uint8Array(c),e=0;goog.crypt.base64.decodeStringInternal_(a,function(a){d[e++]=a});return d.subarray(0,e)};\ngoog.crypt.base64.decodeStringInternal_=function(a,b){function c(b){for(;d<a.length;){var c=a.charAt(d++),e=goog.crypt.base64.charToByteMap_[c];if(null!=e)return e;if(!goog.string.isEmptyOrWhitespace(c))throw Error(\"Unknown base64 encoding at char: \"+c);}return b}goog.crypt.base64.init_();for(var d=0;;){var e=c(-1),f=c(0),g=c(64),h=c(64);if(64===h&&-1===e)break;b(e<<2|f>>4);64!=g&&(b(f<<4&240|g>>2),64!=h&&b(g<<6&192|h))}};\ngoog.crypt.base64.init_=function(){if(!goog.crypt.base64.charToByteMap_){goog.crypt.base64.charToByteMap_={};for(var a=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_.split(\"\"),b=[\"+/=\",\"+/\",\"-_=\",\"-_.\",\"-_\"],c=0;5>c;c++){var d=a.concat(b[c].split(\"\"));goog.crypt.base64.byteToCharMaps_[c]=d;for(var e=0;e<d.length;e++){var f=d[e],g=goog.crypt.base64.charToByteMap_[f];void 0===g?goog.crypt.base64.charToByteMap_[f]=e:goog.asserts.assert(g===e)}}}};jspb.utils={};jspb.utils.split64Low=0;jspb.utils.split64High=0;jspb.utils.splitUint64=function(a){var b=a>>>0;a=Math.floor((a-b)/jspb.BinaryConstants.TWO_TO_32)>>>0;jspb.utils.split64Low=b;jspb.utils.split64High=a};jspb.utils.splitInt64=function(a){var b=0>a;a=Math.abs(a);var c=a>>>0;a=Math.floor((a-c)/jspb.BinaryConstants.TWO_TO_32);a>>>=0;b&&(a=~a>>>0,c=(~c>>>0)+1,4294967295<c&&(c=0,a++,4294967295<a&&(a=0)));jspb.utils.split64Low=c;jspb.utils.split64High=a};\njspb.utils.splitZigzag64=function(a){var b=0>a;a=2*Math.abs(a);jspb.utils.splitUint64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;b&&(0==a?0==c?c=a=4294967295:(c--,a=4294967295):a--);jspb.utils.split64Low=a;jspb.utils.split64High=c};\njspb.utils.splitFloat32=function(a){var b=0>a?1:0;a=b?-a:a;if(0===a)0<1/a?(jspb.utils.split64High=0,jspb.utils.split64Low=0):(jspb.utils.split64High=0,jspb.utils.split64Low=2147483648);else if(isNaN(a))jspb.utils.split64High=0,jspb.utils.split64Low=2147483647;else if(a>jspb.BinaryConstants.FLOAT32_MAX)jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|2139095040)>>>0;else if(a<jspb.BinaryConstants.FLOAT32_MIN)a=Math.round(a/Math.pow(2,-149)),jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|\na)>>>0;else{var c=Math.floor(Math.log(a)/Math.LN2);a*=Math.pow(2,-c);a=Math.round(a*jspb.BinaryConstants.TWO_TO_23);16777216<=a&&++c;jspb.utils.split64High=0;jspb.utils.split64Low=(b<<31|c+127<<23|a&8388607)>>>0}};\njspb.utils.splitFloat64=function(a){var b=0>a?1:0;a=b?-a:a;if(0===a)jspb.utils.split64High=0<1/a?0:2147483648,jspb.utils.split64Low=0;else if(isNaN(a))jspb.utils.split64High=2147483647,jspb.utils.split64Low=4294967295;else if(a>jspb.BinaryConstants.FLOAT64_MAX)jspb.utils.split64High=(b<<31|2146435072)>>>0,jspb.utils.split64Low=0;else if(a<jspb.BinaryConstants.FLOAT64_MIN){var c=a/Math.pow(2,-1074);a=c/jspb.BinaryConstants.TWO_TO_32;jspb.utils.split64High=(b<<31|a)>>>0;jspb.utils.split64Low=c>>>0}else{c=\na;var d=0;if(2<=c)for(;2<=c&&1023>d;)d++,c/=2;else for(;1>c&&-1022<d;)c*=2,d--;c=a*Math.pow(2,-d);a=c*jspb.BinaryConstants.TWO_TO_20&1048575;c=c*jspb.BinaryConstants.TWO_TO_52>>>0;jspb.utils.split64High=(b<<31|d+1023<<20|a)>>>0;jspb.utils.split64Low=c}};\njspb.utils.splitHash64=function(a){var b=a.charCodeAt(0),c=a.charCodeAt(1),d=a.charCodeAt(2),e=a.charCodeAt(3),f=a.charCodeAt(4),g=a.charCodeAt(5),h=a.charCodeAt(6);a=a.charCodeAt(7);jspb.utils.split64Low=b+(c<<8)+(d<<16)+(e<<24)>>>0;jspb.utils.split64High=f+(g<<8)+(h<<16)+(a<<24)>>>0};jspb.utils.joinUint64=function(a,b){return b*jspb.BinaryConstants.TWO_TO_32+(a>>>0)};\njspb.utils.joinInt64=function(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b>>>0,0==a&&(b=b+1>>>0));a=jspb.utils.joinUint64(a,b);return c?-a:a};jspb.utils.toZigzag64=function(a,b,c){var d=b>>31;return c(a<<1^d,(b<<1|a>>>31)^d)};jspb.utils.joinZigzag64=function(a,b){return jspb.utils.fromZigzag64(a,b,jspb.utils.joinInt64)};jspb.utils.fromZigzag64=function(a,b,c){var d=-(a&1);return c((a>>>1|b<<31)^d,b>>>1^d)};\njspb.utils.joinFloat32=function(a,b){b=2*(a>>31)+1;var c=a>>>23&255;a&=8388607;return 255==c?a?NaN:Infinity*b:0==c?b*Math.pow(2,-149)*a:b*Math.pow(2,c-150)*(a+Math.pow(2,23))};jspb.utils.joinFloat64=function(a,b){var c=2*(b>>31)+1,d=b>>>20&2047;a=jspb.BinaryConstants.TWO_TO_32*(b&1048575)+a;return 2047==d?a?NaN:Infinity*c:0==d?c*Math.pow(2,-1074)*a:c*Math.pow(2,d-1075)*(a+jspb.BinaryConstants.TWO_TO_52)};\njspb.utils.joinHash64=function(a,b){return String.fromCharCode(a>>>0&255,a>>>8&255,a>>>16&255,a>>>24&255,b>>>0&255,b>>>8&255,b>>>16&255,b>>>24&255)};jspb.utils.DIGITS=\"0123456789abcdef\".split(\"\");jspb.utils.ZERO_CHAR_CODE_=48;jspb.utils.A_CHAR_CODE_=97;\njspb.utils.joinUnsignedDecimalString=function(a,b){function c(a,b){a=a?String(a):\"\";return b?\"0000000\".slice(a.length)+a:a}if(2097151>=b)return\"\"+jspb.utils.joinUint64(a,b);var d=(a>>>24|b<<8)>>>0&16777215;b=b>>16&65535;a=(a&16777215)+6777216*d+6710656*b;d+=8147497*b;b*=2;1E7<=a&&(d+=Math.floor(a/1E7),a%=1E7);1E7<=d&&(b+=Math.floor(d/1E7),d%=1E7);return c(b,0)+c(d,b)+c(a,1)};\njspb.utils.joinSignedDecimalString=function(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b+(0==a?1:0)>>>0);a=jspb.utils.joinUnsignedDecimalString(a,b);return c?\"-\"+a:a};jspb.utils.hash64ToDecimalString=function(a,b){jspb.utils.splitHash64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;return b?jspb.utils.joinSignedDecimalString(a,c):jspb.utils.joinUnsignedDecimalString(a,c)};\njspb.utils.hash64ArrayToDecimalStrings=function(a,b){for(var c=Array(a.length),d=0;d<a.length;d++)c[d]=jspb.utils.hash64ToDecimalString(a[d],b);return c};\njspb.utils.decimalStringToHash64=function(a){function b(a,b){for(var c=0;8>c&&(1!==a||0<b);c++)b=a*e[c]+b,e[c]=b&255,b>>>=8}function c(){for(var a=0;8>a;a++)e[a]=~e[a]&255}jspb.asserts.assert(0<a.length);var d=!1;\"-\"===a[0]&&(d=!0,a=a.slice(1));for(var e=[0,0,0,0,0,0,0,0],f=0;f<a.length;f++)b(10,a.charCodeAt(f)-jspb.utils.ZERO_CHAR_CODE_);d&&(c(),b(1,1));return goog.crypt.byteArrayToString(e)};jspb.utils.splitDecimalString=function(a){jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a))};\njspb.utils.toHexDigit_=function(a){return String.fromCharCode(10>a?jspb.utils.ZERO_CHAR_CODE_+a:jspb.utils.A_CHAR_CODE_-10+a)};jspb.utils.fromHexCharCode_=function(a){return a>=jspb.utils.A_CHAR_CODE_?a-jspb.utils.A_CHAR_CODE_+10:a-jspb.utils.ZERO_CHAR_CODE_};jspb.utils.hash64ToHexString=function(a){var b=Array(18);b[0]=\"0\";b[1]=\"x\";for(var c=0;8>c;c++){var d=a.charCodeAt(7-c);b[2*c+2]=jspb.utils.toHexDigit_(d>>4);b[2*c+3]=jspb.utils.toHexDigit_(d&15)}return b.join(\"\")};\njspb.utils.hexStringToHash64=function(a){a=a.toLowerCase();jspb.asserts.assert(18==a.length);jspb.asserts.assert(\"0\"==a[0]);jspb.asserts.assert(\"x\"==a[1]);for(var b=\"\",c=0;8>c;c++){var d=jspb.utils.fromHexCharCode_(a.charCodeAt(2*c+2)),e=jspb.utils.fromHexCharCode_(a.charCodeAt(2*c+3));b=String.fromCharCode(16*d+e)+b}return b};\njspb.utils.hash64ToNumber=function(a,b){jspb.utils.splitHash64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;return b?jspb.utils.joinInt64(a,c):jspb.utils.joinUint64(a,c)};jspb.utils.numberToHash64=function(a){jspb.utils.splitInt64(a);return jspb.utils.joinHash64(jspb.utils.split64Low,jspb.utils.split64High)};jspb.utils.countVarints=function(a,b,c){for(var d=0,e=b;e<c;e++)d+=a[e]>>7;return c-b-d};\njspb.utils.countVarintFields=function(a,b,c,d){var e=0;d=8*d+jspb.BinaryConstants.WireType.VARINT;if(128>d)for(;b<c&&a[b++]==d;)for(e++;;){var f=a[b++];if(0==(f&128))break}else for(;b<c;){for(f=d;128<f;){if(a[b]!=(f&127|128))return e;b++;f>>=7}if(a[b++]!=f)break;for(e++;f=a[b++],0!=(f&128););}return e};jspb.utils.countFixedFields_=function(a,b,c,d,e){var f=0;if(128>d)for(;b<c&&a[b++]==d;)f++,b+=e;else for(;b<c;){for(var g=d;128<g;){if(a[b++]!=(g&127|128))return f;g>>=7}if(a[b++]!=g)break;f++;b+=e}return f};\njspb.utils.countFixed32Fields=function(a,b,c,d){return jspb.utils.countFixedFields_(a,b,c,8*d+jspb.BinaryConstants.WireType.FIXED32,4)};jspb.utils.countFixed64Fields=function(a,b,c,d){return jspb.utils.countFixedFields_(a,b,c,8*d+jspb.BinaryConstants.WireType.FIXED64,8)};\njspb.utils.countDelimitedFields=function(a,b,c,d){var e=0;for(d=8*d+jspb.BinaryConstants.WireType.DELIMITED;b<c;){for(var f=d;128<f;){if(a[b++]!=(f&127|128))return e;f>>=7}if(a[b++]!=f)break;e++;for(var g=0,h=1;f=a[b++],g+=(f&127)*h,h*=128,0!=(f&128););b+=g}return e};jspb.utils.debugBytesToTextFormat=function(a){var b='\"';if(a){a=jspb.utils.byteSourceToUint8Array(a);for(var c=0;c<a.length;c++)b+=\"\\\\x\",16>a[c]&&(b+=\"0\"),b+=a[c].toString(16)}return b+'\"'};\njspb.utils.debugScalarToTextFormat=function(a){return\"string\"===typeof a?goog.string.quote(a):a.toString()};jspb.utils.stringToByteArray=function(a){for(var b=new Uint8Array(a.length),c=0;c<a.length;c++){var d=a.charCodeAt(c);if(255<d)throw Error(\"Conversion error: string contains codepoint outside of byte range\");b[c]=d}return b};\njspb.utils.byteSourceToUint8Array=function(a){if(a.constructor===Uint8Array)return a;if(a.constructor===ArrayBuffer||a.constructor===Array)return new Uint8Array(a);if(a.constructor===String)return goog.crypt.base64.decodeStringToUint8Array(a);if(a instanceof Uint8Array)return new Uint8Array(a.buffer,a.byteOffset,a.byteLength);jspb.asserts.fail(\"Type not convertible to Uint8Array.\");return new Uint8Array(0)};jspb.BinaryDecoder=function(a,b,c){this.bytes_=null;this.cursor_=this.end_=this.start_=0;this.error_=!1;a&&this.setBlock(a,b,c)};jspb.BinaryDecoder.instanceCache_=[];jspb.BinaryDecoder.alloc=function(a,b,c){if(jspb.BinaryDecoder.instanceCache_.length){var d=jspb.BinaryDecoder.instanceCache_.pop();a&&d.setBlock(a,b,c);return d}return new jspb.BinaryDecoder(a,b,c)};jspb.BinaryDecoder.prototype.free=function(){this.clear();100>jspb.BinaryDecoder.instanceCache_.length&&jspb.BinaryDecoder.instanceCache_.push(this)};\njspb.BinaryDecoder.prototype.clone=function(){return jspb.BinaryDecoder.alloc(this.bytes_,this.start_,this.end_-this.start_)};jspb.BinaryDecoder.prototype.clear=function(){this.bytes_=null;this.cursor_=this.end_=this.start_=0;this.error_=!1};jspb.BinaryDecoder.prototype.getBuffer=function(){return this.bytes_};\njspb.BinaryDecoder.prototype.setBlock=function(a,b,c){this.bytes_=jspb.utils.byteSourceToUint8Array(a);this.start_=void 0!==b?b:0;this.end_=void 0!==c?this.start_+c:this.bytes_.length;this.cursor_=this.start_};jspb.BinaryDecoder.prototype.getEnd=function(){return this.end_};jspb.BinaryDecoder.prototype.setEnd=function(a){this.end_=a};jspb.BinaryDecoder.prototype.reset=function(){this.cursor_=this.start_};jspb.BinaryDecoder.prototype.getCursor=function(){return this.cursor_};\njspb.BinaryDecoder.prototype.setCursor=function(a){this.cursor_=a};jspb.BinaryDecoder.prototype.advance=function(a){this.cursor_+=a;jspb.asserts.assert(this.cursor_<=this.end_)};jspb.BinaryDecoder.prototype.atEnd=function(){return this.cursor_==this.end_};jspb.BinaryDecoder.prototype.pastEnd=function(){return this.cursor_>this.end_};jspb.BinaryDecoder.prototype.getError=function(){return this.error_||0>this.cursor_||this.cursor_>this.end_};\njspb.BinaryDecoder.prototype.readSplitVarint64=function(a){for(var b=128,c=0,d=0,e=0;4>e&&128<=b;e++)b=this.bytes_[this.cursor_++],c|=(b&127)<<7*e;128<=b&&(b=this.bytes_[this.cursor_++],c|=(b&127)<<28,d|=(b&127)>>4);if(128<=b)for(e=0;5>e&&128<=b;e++)b=this.bytes_[this.cursor_++],d|=(b&127)<<7*e+3;if(128>b)return a(c>>>0,d>>>0);jspb.asserts.fail(\"Failed to read varint, encoding is invalid.\");this.error_=!0};\njspb.BinaryDecoder.prototype.readSplitZigzagVarint64=function(a){return this.readSplitVarint64(function(b,c){return jspb.utils.fromZigzag64(b,c,a)})};jspb.BinaryDecoder.prototype.readSplitFixed64=function(a){var b=this.bytes_,c=this.cursor_;this.cursor_+=8;for(var d=0,e=0,f=c+7;f>=c;f--)d=d<<8|b[f],e=e<<8|b[f+4];return a(d,e)};jspb.BinaryDecoder.prototype.skipVarint=function(){for(;this.bytes_[this.cursor_]&128;)this.cursor_++;this.cursor_++};\njspb.BinaryDecoder.prototype.unskipVarint=function(a){for(;128<a;)this.cursor_--,a>>>=7;this.cursor_--};\njspb.BinaryDecoder.prototype.readUnsignedVarint32=function(){var a=this.bytes_;var b=a[this.cursor_+0];var c=b&127;if(128>b)return this.cursor_+=1,jspb.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+1];c|=(b&127)<<7;if(128>b)return this.cursor_+=2,jspb.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+2];c|=(b&127)<<14;if(128>b)return this.cursor_+=3,jspb.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+3];c|=(b&127)<<21;if(128>b)return this.cursor_+=4,jspb.asserts.assert(this.cursor_<=\nthis.end_),c;b=a[this.cursor_+4];c|=(b&15)<<28;if(128>b)return this.cursor_+=5,jspb.asserts.assert(this.cursor_<=this.end_),c>>>0;this.cursor_+=5;128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&jspb.asserts.assert(!1);jspb.asserts.assert(this.cursor_<=this.end_);return c};jspb.BinaryDecoder.prototype.readSignedVarint32=function(){return~~this.readUnsignedVarint32()};jspb.BinaryDecoder.prototype.readUnsignedVarint32String=function(){return this.readUnsignedVarint32().toString()};\njspb.BinaryDecoder.prototype.readSignedVarint32String=function(){return this.readSignedVarint32().toString()};jspb.BinaryDecoder.prototype.readZigzagVarint32=function(){var a=this.readUnsignedVarint32();return a>>>1^-(a&1)};jspb.BinaryDecoder.prototype.readUnsignedVarint64=function(){return this.readSplitVarint64(jspb.utils.joinUint64)};jspb.BinaryDecoder.prototype.readUnsignedVarint64String=function(){return this.readSplitVarint64(jspb.utils.joinUnsignedDecimalString)};\njspb.BinaryDecoder.prototype.readSignedVarint64=function(){return this.readSplitVarint64(jspb.utils.joinInt64)};jspb.BinaryDecoder.prototype.readSignedVarint64String=function(){return this.readSplitVarint64(jspb.utils.joinSignedDecimalString)};jspb.BinaryDecoder.prototype.readZigzagVarint64=function(){return this.readSplitVarint64(jspb.utils.joinZigzag64)};jspb.BinaryDecoder.prototype.readZigzagVarintHash64=function(){return this.readSplitZigzagVarint64(jspb.utils.joinHash64)};\njspb.BinaryDecoder.prototype.readZigzagVarint64String=function(){return this.readSplitZigzagVarint64(jspb.utils.joinSignedDecimalString)};jspb.BinaryDecoder.prototype.readUint8=function(){var a=this.bytes_[this.cursor_+0];this.cursor_+=1;jspb.asserts.assert(this.cursor_<=this.end_);return a};jspb.BinaryDecoder.prototype.readUint16=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1];this.cursor_+=2;jspb.asserts.assert(this.cursor_<=this.end_);return a<<0|b<<8};\njspb.BinaryDecoder.prototype.readUint32=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1],c=this.bytes_[this.cursor_+2],d=this.bytes_[this.cursor_+3];this.cursor_+=4;jspb.asserts.assert(this.cursor_<=this.end_);return(a<<0|b<<8|c<<16|d<<24)>>>0};jspb.BinaryDecoder.prototype.readUint64=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinUint64(a,b)};\njspb.BinaryDecoder.prototype.readUint64String=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinUnsignedDecimalString(a,b)};jspb.BinaryDecoder.prototype.readInt8=function(){var a=this.bytes_[this.cursor_+0];this.cursor_+=1;jspb.asserts.assert(this.cursor_<=this.end_);return a<<24>>24};\njspb.BinaryDecoder.prototype.readInt16=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1];this.cursor_+=2;jspb.asserts.assert(this.cursor_<=this.end_);return(a<<0|b<<8)<<16>>16};jspb.BinaryDecoder.prototype.readInt32=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1],c=this.bytes_[this.cursor_+2],d=this.bytes_[this.cursor_+3];this.cursor_+=4;jspb.asserts.assert(this.cursor_<=this.end_);return a<<0|b<<8|c<<16|d<<24};\njspb.BinaryDecoder.prototype.readInt64=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinInt64(a,b)};jspb.BinaryDecoder.prototype.readInt64String=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinSignedDecimalString(a,b)};jspb.BinaryDecoder.prototype.readFloat=function(){var a=this.readUint32();return jspb.utils.joinFloat32(a,0)};\njspb.BinaryDecoder.prototype.readDouble=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinFloat64(a,b)};jspb.BinaryDecoder.prototype.readBool=function(){return!!this.bytes_[this.cursor_++]};jspb.BinaryDecoder.prototype.readEnum=function(){return this.readSignedVarint32()};\njspb.BinaryDecoder.prototype.readString=function(a){var b=this.bytes_,c=this.cursor_;a=c+a;for(var d=[],e=\"\";c<a;){var f=b[c++];if(128>f)d.push(f);else if(192>f)continue;else if(224>f){var g=b[c++];d.push((f&31)<<6|g&63)}else if(240>f){g=b[c++];var h=b[c++];d.push((f&15)<<12|(g&63)<<6|h&63)}else if(248>f){g=b[c++];h=b[c++];var k=b[c++];f=(f&7)<<18|(g&63)<<12|(h&63)<<6|k&63;f-=65536;d.push((f>>10&1023)+55296,(f&1023)+56320)}8192<=d.length&&(e+=String.fromCharCode.apply(null,d),d.length=0)}e+=goog.crypt.byteArrayToString(d);\nthis.cursor_=c;return e};jspb.BinaryDecoder.prototype.readStringWithLength=function(){var a=this.readUnsignedVarint32();return this.readString(a)};jspb.BinaryDecoder.prototype.readBytes=function(a){if(0>a||this.cursor_+a>this.bytes_.length)return this.error_=!0,jspb.asserts.fail(\"Invalid byte length!\"),new Uint8Array(0);var b=this.bytes_.subarray(this.cursor_,this.cursor_+a);this.cursor_+=a;jspb.asserts.assert(this.cursor_<=this.end_);return b};jspb.BinaryDecoder.prototype.readVarintHash64=function(){return this.readSplitVarint64(jspb.utils.joinHash64)};\njspb.BinaryDecoder.prototype.readFixedHash64=function(){var a=this.bytes_,b=this.cursor_,c=a[b+0],d=a[b+1],e=a[b+2],f=a[b+3],g=a[b+4],h=a[b+5],k=a[b+6];a=a[b+7];this.cursor_+=8;return String.fromCharCode(c,d,e,f,g,h,k,a)};jspb.BinaryReader=function(a,b,c){this.decoder_=jspb.BinaryDecoder.alloc(a,b,c);this.fieldCursor_=this.decoder_.getCursor();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;this.error_=!1;this.readCallbacks_=null};jspb.BinaryReader.instanceCache_=[];\njspb.BinaryReader.alloc=function(a,b,c){if(jspb.BinaryReader.instanceCache_.length){var d=jspb.BinaryReader.instanceCache_.pop();a&&d.decoder_.setBlock(a,b,c);return d}return new jspb.BinaryReader(a,b,c)};jspb.BinaryReader.prototype.alloc=jspb.BinaryReader.alloc;\njspb.BinaryReader.prototype.free=function(){this.decoder_.clear();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;this.error_=!1;this.readCallbacks_=null;100>jspb.BinaryReader.instanceCache_.length&&jspb.BinaryReader.instanceCache_.push(this)};jspb.BinaryReader.prototype.getFieldCursor=function(){return this.fieldCursor_};jspb.BinaryReader.prototype.getCursor=function(){return this.decoder_.getCursor()};\njspb.BinaryReader.prototype.getBuffer=function(){return this.decoder_.getBuffer()};jspb.BinaryReader.prototype.getFieldNumber=function(){return this.nextField_};goog.exportProperty(jspb.BinaryReader.prototype,\"getFieldNumber\",jspb.BinaryReader.prototype.getFieldNumber);jspb.BinaryReader.prototype.getWireType=function(){return this.nextWireType_};jspb.BinaryReader.prototype.isDelimited=function(){return this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"isDelimited\",jspb.BinaryReader.prototype.isDelimited);jspb.BinaryReader.prototype.isEndGroup=function(){return this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP};goog.exportProperty(jspb.BinaryReader.prototype,\"isEndGroup\",jspb.BinaryReader.prototype.isEndGroup);jspb.BinaryReader.prototype.getError=function(){return this.error_||this.decoder_.getError()};\njspb.BinaryReader.prototype.setBlock=function(a,b,c){this.decoder_.setBlock(a,b,c);this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID};jspb.BinaryReader.prototype.reset=function(){this.decoder_.reset();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID};jspb.BinaryReader.prototype.advance=function(a){this.decoder_.advance(a)};\njspb.BinaryReader.prototype.nextField=function(){if(this.decoder_.atEnd())return!1;if(this.getError())return jspb.asserts.fail(\"Decoder hit an error\"),!1;this.fieldCursor_=this.decoder_.getCursor();var a=this.decoder_.readUnsignedVarint32(),b=a>>>3;a&=7;if(a!=jspb.BinaryConstants.WireType.VARINT&&a!=jspb.BinaryConstants.WireType.FIXED32&&a!=jspb.BinaryConstants.WireType.FIXED64&&a!=jspb.BinaryConstants.WireType.DELIMITED&&a!=jspb.BinaryConstants.WireType.START_GROUP&&a!=jspb.BinaryConstants.WireType.END_GROUP)return jspb.asserts.fail(\"Invalid wire type: %s (at position %s)\",\na,this.fieldCursor_),this.error_=!0,!1;this.nextField_=b;this.nextWireType_=a;return!0};goog.exportProperty(jspb.BinaryReader.prototype,\"nextField\",jspb.BinaryReader.prototype.nextField);jspb.BinaryReader.prototype.unskipHeader=function(){this.decoder_.unskipVarint(this.nextField_<<3|this.nextWireType_)};jspb.BinaryReader.prototype.skipMatchingFields=function(){var a=this.nextField_;for(this.unskipHeader();this.nextField()&&this.getFieldNumber()==a;)this.skipField();this.decoder_.atEnd()||this.unskipHeader()};\njspb.BinaryReader.prototype.skipVarintField=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.VARINT?(jspb.asserts.fail(\"Invalid wire type for skipVarintField\"),this.skipField()):this.decoder_.skipVarint()};jspb.BinaryReader.prototype.skipDelimitedField=function(){if(this.nextWireType_!=jspb.BinaryConstants.WireType.DELIMITED)jspb.asserts.fail(\"Invalid wire type for skipDelimitedField\"),this.skipField();else{var a=this.decoder_.readUnsignedVarint32();this.decoder_.advance(a)}};\njspb.BinaryReader.prototype.skipFixed32Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED32?(jspb.asserts.fail(\"Invalid wire type for skipFixed32Field\"),this.skipField()):this.decoder_.advance(4)};jspb.BinaryReader.prototype.skipFixed64Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED64?(jspb.asserts.fail(\"Invalid wire type for skipFixed64Field\"),this.skipField()):this.decoder_.advance(8)};\njspb.BinaryReader.prototype.skipGroup=function(){var a=this.nextField_;do{if(!this.nextField()){jspb.asserts.fail(\"Unmatched start-group tag: stream EOF\");this.error_=!0;break}if(this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP){this.nextField_!=a&&(jspb.asserts.fail(\"Unmatched end-group tag\"),this.error_=!0);break}this.skipField()}while(1)};\njspb.BinaryReader.prototype.skipField=function(){switch(this.nextWireType_){case jspb.BinaryConstants.WireType.VARINT:this.skipVarintField();break;case jspb.BinaryConstants.WireType.FIXED64:this.skipFixed64Field();break;case jspb.BinaryConstants.WireType.DELIMITED:this.skipDelimitedField();break;case jspb.BinaryConstants.WireType.FIXED32:this.skipFixed32Field();break;case jspb.BinaryConstants.WireType.START_GROUP:this.skipGroup();break;default:jspb.asserts.fail(\"Invalid wire encoding for field.\")}};\njspb.BinaryReader.prototype.registerReadCallback=function(a,b){null===this.readCallbacks_&&(this.readCallbacks_={});jspb.asserts.assert(!this.readCallbacks_[a]);this.readCallbacks_[a]=b};jspb.BinaryReader.prototype.runReadCallback=function(a){jspb.asserts.assert(null!==this.readCallbacks_);a=this.readCallbacks_[a];jspb.asserts.assert(a);return a(this)};\njspb.BinaryReader.prototype.readAny=function(a){this.nextWireType_=jspb.BinaryConstants.FieldTypeToWireType(a);var b=jspb.BinaryConstants.FieldType;switch(a){case b.DOUBLE:return this.readDouble();case b.FLOAT:return this.readFloat();case b.INT64:return this.readInt64();case b.UINT64:return this.readUint64();case b.INT32:return this.readInt32();case b.FIXED64:return this.readFixed64();case b.FIXED32:return this.readFixed32();case b.BOOL:return this.readBool();case b.STRING:return this.readString();\ncase b.GROUP:jspb.asserts.fail(\"Group field type not supported in readAny()\");case b.MESSAGE:jspb.asserts.fail(\"Message field type not supported in readAny()\");case b.BYTES:return this.readBytes();case b.UINT32:return this.readUint32();case b.ENUM:return this.readEnum();case b.SFIXED32:return this.readSfixed32();case b.SFIXED64:return this.readSfixed64();case b.SINT32:return this.readSint32();case b.SINT64:return this.readSint64();case b.FHASH64:return this.readFixedHash64();case b.VHASH64:return this.readVarintHash64();\ndefault:jspb.asserts.fail(\"Invalid field type in readAny()\")}return 0};jspb.BinaryReader.prototype.readMessage=function(a,b){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var c=this.decoder_.getEnd(),d=this.decoder_.readUnsignedVarint32();d=this.decoder_.getCursor()+d;this.decoder_.setEnd(d);b(a,this);this.decoder_.setCursor(d);this.decoder_.setEnd(c)};goog.exportProperty(jspb.BinaryReader.prototype,\"readMessage\",jspb.BinaryReader.prototype.readMessage);\njspb.BinaryReader.prototype.readGroup=function(a,b,c){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.START_GROUP);jspb.asserts.assert(this.nextField_==a);c(b,this);this.error_||this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP||(jspb.asserts.fail(\"Group submessage did not end with an END_GROUP tag\"),this.error_=!0)};goog.exportProperty(jspb.BinaryReader.prototype,\"readGroup\",jspb.BinaryReader.prototype.readGroup);\njspb.BinaryReader.prototype.getFieldDecoder=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32(),b=this.decoder_.getCursor(),c=b+a;a=jspb.BinaryDecoder.alloc(this.decoder_.getBuffer(),b,a);this.decoder_.setCursor(c);return a};jspb.BinaryReader.prototype.readInt32=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint32()};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readInt32\",jspb.BinaryReader.prototype.readInt32);jspb.BinaryReader.prototype.readInt32String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint32String()};jspb.BinaryReader.prototype.readInt64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64()};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readInt64\",jspb.BinaryReader.prototype.readInt64);jspb.BinaryReader.prototype.readInt64String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64String()};jspb.BinaryReader.prototype.readUint32=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint32()};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readUint32\",jspb.BinaryReader.prototype.readUint32);jspb.BinaryReader.prototype.readUint32String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint32String()};jspb.BinaryReader.prototype.readUint64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint64()};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readUint64\",jspb.BinaryReader.prototype.readUint64);jspb.BinaryReader.prototype.readUint64String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint64String()};jspb.BinaryReader.prototype.readSint32=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint32()};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readSint32\",jspb.BinaryReader.prototype.readSint32);jspb.BinaryReader.prototype.readSint64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint64()};goog.exportProperty(jspb.BinaryReader.prototype,\"readSint64\",jspb.BinaryReader.prototype.readSint64);\njspb.BinaryReader.prototype.readSint64String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint64String()};jspb.BinaryReader.prototype.readFixed32=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readUint32()};goog.exportProperty(jspb.BinaryReader.prototype,\"readFixed32\",jspb.BinaryReader.prototype.readFixed32);\njspb.BinaryReader.prototype.readFixed64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readUint64()};goog.exportProperty(jspb.BinaryReader.prototype,\"readFixed64\",jspb.BinaryReader.prototype.readFixed64);jspb.BinaryReader.prototype.readFixed64String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readUint64String()};\njspb.BinaryReader.prototype.readSfixed32=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readInt32()};goog.exportProperty(jspb.BinaryReader.prototype,\"readSfixed32\",jspb.BinaryReader.prototype.readSfixed32);jspb.BinaryReader.prototype.readSfixed32String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readInt32().toString()};\njspb.BinaryReader.prototype.readSfixed64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readInt64()};goog.exportProperty(jspb.BinaryReader.prototype,\"readSfixed64\",jspb.BinaryReader.prototype.readSfixed64);jspb.BinaryReader.prototype.readSfixed64String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readInt64String()};\njspb.BinaryReader.prototype.readFloat=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readFloat()};goog.exportProperty(jspb.BinaryReader.prototype,\"readFloat\",jspb.BinaryReader.prototype.readFloat);jspb.BinaryReader.prototype.readDouble=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readDouble()};goog.exportProperty(jspb.BinaryReader.prototype,\"readDouble\",jspb.BinaryReader.prototype.readDouble);\njspb.BinaryReader.prototype.readBool=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return!!this.decoder_.readUnsignedVarint32()};goog.exportProperty(jspb.BinaryReader.prototype,\"readBool\",jspb.BinaryReader.prototype.readBool);jspb.BinaryReader.prototype.readEnum=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64()};goog.exportProperty(jspb.BinaryReader.prototype,\"readEnum\",jspb.BinaryReader.prototype.readEnum);\njspb.BinaryReader.prototype.readString=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32();return this.decoder_.readString(a)};goog.exportProperty(jspb.BinaryReader.prototype,\"readString\",jspb.BinaryReader.prototype.readString);jspb.BinaryReader.prototype.readBytes=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32();return this.decoder_.readBytes(a)};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readBytes\",jspb.BinaryReader.prototype.readBytes);jspb.BinaryReader.prototype.readVarintHash64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readVarintHash64()};jspb.BinaryReader.prototype.readSintHash64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarintHash64()};\njspb.BinaryReader.prototype.readSplitVarint64=function(a){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSplitVarint64(a)};jspb.BinaryReader.prototype.readSplitZigzagVarint64=function(a){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSplitVarint64(function(b,c){return jspb.utils.fromZigzag64(b,c,a)})};\njspb.BinaryReader.prototype.readFixedHash64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readFixedHash64()};jspb.BinaryReader.prototype.readSplitFixed64=function(a){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readSplitFixed64(a)};\njspb.BinaryReader.prototype.readPackedField_=function(a){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var b=this.decoder_.readUnsignedVarint32();b=this.decoder_.getCursor()+b;for(var c=[];this.decoder_.getCursor()<b;)c.push(a.call(this.decoder_));return c};jspb.BinaryReader.prototype.readPackedInt32=function(){return this.readPackedField_(this.decoder_.readSignedVarint32)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedInt32\",jspb.BinaryReader.prototype.readPackedInt32);\njspb.BinaryReader.prototype.readPackedInt32String=function(){return this.readPackedField_(this.decoder_.readSignedVarint32String)};jspb.BinaryReader.prototype.readPackedInt64=function(){return this.readPackedField_(this.decoder_.readSignedVarint64)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedInt64\",jspb.BinaryReader.prototype.readPackedInt64);jspb.BinaryReader.prototype.readPackedInt64String=function(){return this.readPackedField_(this.decoder_.readSignedVarint64String)};\njspb.BinaryReader.prototype.readPackedUint32=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedUint32\",jspb.BinaryReader.prototype.readPackedUint32);jspb.BinaryReader.prototype.readPackedUint32String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32String)};jspb.BinaryReader.prototype.readPackedUint64=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64)};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readPackedUint64\",jspb.BinaryReader.prototype.readPackedUint64);jspb.BinaryReader.prototype.readPackedUint64String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64String)};jspb.BinaryReader.prototype.readPackedSint32=function(){return this.readPackedField_(this.decoder_.readZigzagVarint32)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedSint32\",jspb.BinaryReader.prototype.readPackedSint32);\njspb.BinaryReader.prototype.readPackedSint64=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedSint64\",jspb.BinaryReader.prototype.readPackedSint64);jspb.BinaryReader.prototype.readPackedSint64String=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64String)};jspb.BinaryReader.prototype.readPackedFixed32=function(){return this.readPackedField_(this.decoder_.readUint32)};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readPackedFixed32\",jspb.BinaryReader.prototype.readPackedFixed32);jspb.BinaryReader.prototype.readPackedFixed64=function(){return this.readPackedField_(this.decoder_.readUint64)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedFixed64\",jspb.BinaryReader.prototype.readPackedFixed64);jspb.BinaryReader.prototype.readPackedFixed64String=function(){return this.readPackedField_(this.decoder_.readUint64String)};\njspb.BinaryReader.prototype.readPackedSfixed32=function(){return this.readPackedField_(this.decoder_.readInt32)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedSfixed32\",jspb.BinaryReader.prototype.readPackedSfixed32);jspb.BinaryReader.prototype.readPackedSfixed64=function(){return this.readPackedField_(this.decoder_.readInt64)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedSfixed64\",jspb.BinaryReader.prototype.readPackedSfixed64);\njspb.BinaryReader.prototype.readPackedSfixed64String=function(){return this.readPackedField_(this.decoder_.readInt64String)};jspb.BinaryReader.prototype.readPackedFloat=function(){return this.readPackedField_(this.decoder_.readFloat)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedFloat\",jspb.BinaryReader.prototype.readPackedFloat);jspb.BinaryReader.prototype.readPackedDouble=function(){return this.readPackedField_(this.decoder_.readDouble)};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readPackedDouble\",jspb.BinaryReader.prototype.readPackedDouble);jspb.BinaryReader.prototype.readPackedBool=function(){return this.readPackedField_(this.decoder_.readBool)};goog.exportProperty(jspb.BinaryReader.prototype,\"readPackedBool\",jspb.BinaryReader.prototype.readPackedBool);jspb.BinaryReader.prototype.readPackedEnum=function(){return this.readPackedField_(this.decoder_.readEnum)};\ngoog.exportProperty(jspb.BinaryReader.prototype,\"readPackedEnum\",jspb.BinaryReader.prototype.readPackedEnum);jspb.BinaryReader.prototype.readPackedVarintHash64=function(){return this.readPackedField_(this.decoder_.readVarintHash64)};jspb.BinaryReader.prototype.readPackedFixedHash64=function(){return this.readPackedField_(this.decoder_.readFixedHash64)};jspb.BinaryEncoder=function(){this.buffer_=[]};jspb.BinaryEncoder.prototype.length=function(){return this.buffer_.length};jspb.BinaryEncoder.prototype.end=function(){var a=this.buffer_;this.buffer_=[];return a};\njspb.BinaryEncoder.prototype.writeSplitVarint64=function(a,b){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(b==Math.floor(b));jspb.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);for(jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32);0<b||127<a;)this.buffer_.push(a&127|128),a=(a>>>7|b<<25)>>>0,b>>>=7;this.buffer_.push(a)};\njspb.BinaryEncoder.prototype.writeSplitFixed64=function(a,b){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(b==Math.floor(b));jspb.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32);this.writeUint32(a);this.writeUint32(b)};\njspb.BinaryEncoder.prototype.writeUnsignedVarint32=function(a){jspb.asserts.assert(a==Math.floor(a));for(jspb.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);127<a;)this.buffer_.push(a&127|128),a>>>=7;this.buffer_.push(a)};\njspb.BinaryEncoder.prototype.writeSignedVarint32=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);if(0<=a)this.writeUnsignedVarint32(a);else{for(var b=0;9>b;b++)this.buffer_.push(a&127|128),a>>=7;this.buffer_.push(1)}};\njspb.BinaryEncoder.prototype.writeUnsignedVarint64=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_64);jspb.utils.splitInt64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};\njspb.BinaryEncoder.prototype.writeSignedVarint64=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitInt64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};\njspb.BinaryEncoder.prototype.writeZigzagVarint32=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.writeUnsignedVarint32((a<<1^a>>31)>>>0)};jspb.BinaryEncoder.prototype.writeZigzagVarint64=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitZigzag64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};\njspb.BinaryEncoder.prototype.writeZigzagVarint64String=function(a){this.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(a))};jspb.BinaryEncoder.prototype.writeZigzagVarintHash64=function(a){var b=this;jspb.utils.splitHash64(a);jspb.utils.toZigzag64(jspb.utils.split64Low,jspb.utils.split64High,function(a,d){b.writeSplitVarint64(a>>>0,d>>>0)})};\njspb.BinaryEncoder.prototype.writeUint8=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(0<=a&&256>a);this.buffer_.push(a>>>0&255)};jspb.BinaryEncoder.prototype.writeUint16=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(0<=a&&65536>a);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255)};\njspb.BinaryEncoder.prototype.writeUint32=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);this.buffer_.push(a>>>16&255);this.buffer_.push(a>>>24&255)};jspb.BinaryEncoder.prototype.writeUint64=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_64);jspb.utils.splitUint64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High)};\njspb.BinaryEncoder.prototype.writeInt8=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(-128<=a&&128>a);this.buffer_.push(a>>>0&255)};jspb.BinaryEncoder.prototype.writeInt16=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(-32768<=a&&32768>a);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255)};\njspb.BinaryEncoder.prototype.writeInt32=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);this.buffer_.push(a>>>16&255);this.buffer_.push(a>>>24&255)};\njspb.BinaryEncoder.prototype.writeInt64=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitInt64(a);this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High)};\njspb.BinaryEncoder.prototype.writeInt64String=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(+a>=-jspb.BinaryConstants.TWO_TO_63&&+a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a));this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High)};\njspb.BinaryEncoder.prototype.writeFloat=function(a){jspb.asserts.assert(Infinity===a||-Infinity===a||isNaN(a)||a>=-jspb.BinaryConstants.FLOAT32_MAX&&a<=jspb.BinaryConstants.FLOAT32_MAX);jspb.utils.splitFloat32(a);this.writeUint32(jspb.utils.split64Low)};\njspb.BinaryEncoder.prototype.writeDouble=function(a){jspb.asserts.assert(Infinity===a||-Infinity===a||isNaN(a)||a>=-jspb.BinaryConstants.FLOAT64_MAX&&a<=jspb.BinaryConstants.FLOAT64_MAX);jspb.utils.splitFloat64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High)};jspb.BinaryEncoder.prototype.writeBool=function(a){jspb.asserts.assert(\"boolean\"===typeof a||\"number\"===typeof a);this.buffer_.push(a?1:0)};\njspb.BinaryEncoder.prototype.writeEnum=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.writeSignedVarint32(a)};jspb.BinaryEncoder.prototype.writeBytes=function(a){this.buffer_.push.apply(this.buffer_,a)};jspb.BinaryEncoder.prototype.writeVarintHash64=function(a){jspb.utils.splitHash64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};\njspb.BinaryEncoder.prototype.writeFixedHash64=function(a){jspb.utils.splitHash64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High)};\njspb.BinaryEncoder.prototype.writeString=function(a){var b=this.buffer_.length;jspb.asserts.assertString(a);for(var c=0;c<a.length;c++){var d=a.charCodeAt(c);if(128>d)this.buffer_.push(d);else if(2048>d)this.buffer_.push(d>>6|192),this.buffer_.push(d&63|128);else if(65536>d)if(55296<=d&&56319>=d&&c+1<a.length){var e=a.charCodeAt(c+1);56320<=e&&57343>=e&&(d=1024*(d-55296)+e-56320+65536,this.buffer_.push(d>>18|240),this.buffer_.push(d>>12&63|128),this.buffer_.push(d>>6&63|128),this.buffer_.push(d&63|\n128),c++)}else this.buffer_.push(d>>12|224),this.buffer_.push(d>>6&63|128),this.buffer_.push(d&63|128)}return this.buffer_.length-b};jspb.arith={};jspb.arith.UInt64=function(a,b){this.lo=a;this.hi=b};jspb.arith.UInt64.prototype.cmp=function(a){return this.hi<a.hi||this.hi==a.hi&&this.lo<a.lo?-1:this.hi==a.hi&&this.lo==a.lo?0:1};jspb.arith.UInt64.prototype.rightShift=function(){return new jspb.arith.UInt64((this.lo>>>1|(this.hi&1)<<31)>>>0,this.hi>>>1>>>0)};jspb.arith.UInt64.prototype.leftShift=function(){return new jspb.arith.UInt64(this.lo<<1>>>0,(this.hi<<1|this.lo>>>31)>>>0)};\njspb.arith.UInt64.prototype.msb=function(){return!!(this.hi&2147483648)};jspb.arith.UInt64.prototype.lsb=function(){return!!(this.lo&1)};jspb.arith.UInt64.prototype.zero=function(){return 0==this.lo&&0==this.hi};jspb.arith.UInt64.prototype.add=function(a){return new jspb.arith.UInt64((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0)};\njspb.arith.UInt64.prototype.sub=function(a){return new jspb.arith.UInt64((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0)};jspb.arith.UInt64.mul32x32=function(a,b){var c=a&65535;a>>>=16;var d=b&65535,e=b>>>16;b=c*d+65536*(c*e&65535)+65536*(a*d&65535);for(c=a*e+(c*e>>>16)+(a*d>>>16);4294967296<=b;)b-=4294967296,c+=1;return new jspb.arith.UInt64(b>>>0,c>>>0)};\njspb.arith.UInt64.prototype.mul=function(a){var b=jspb.arith.UInt64.mul32x32(this.lo,a);a=jspb.arith.UInt64.mul32x32(this.hi,a);a.hi=a.lo;a.lo=0;return b.add(a)};\njspb.arith.UInt64.prototype.div=function(a){if(0==a)return[];var b=new jspb.arith.UInt64(0,0),c=new jspb.arith.UInt64(this.lo,this.hi);a=new jspb.arith.UInt64(a,0);for(var d=new jspb.arith.UInt64(1,0);!a.msb();)a=a.leftShift(),d=d.leftShift();for(;!d.zero();)0>=a.cmp(c)&&(b=b.add(d),c=c.sub(a)),a=a.rightShift(),d=d.rightShift();return[b,c]};jspb.arith.UInt64.prototype.toString=function(){for(var a=\"\",b=this;!b.zero();){b=b.div(10);var c=b[0];a=b[1].lo+a;b=c}\"\"==a&&(a=\"0\");return a};\njspb.arith.UInt64.fromString=function(a){for(var b=new jspb.arith.UInt64(0,0),c=new jspb.arith.UInt64(0,0),d=0;d<a.length;d++){if(\"0\">a[d]||\"9\"<a[d])return null;var e=parseInt(a[d],10);c.lo=e;b=b.mul(10).add(c)}return b};jspb.arith.UInt64.prototype.clone=function(){return new jspb.arith.UInt64(this.lo,this.hi)};jspb.arith.Int64=function(a,b){this.lo=a;this.hi=b};\njspb.arith.Int64.prototype.add=function(a){return new jspb.arith.Int64((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0)};jspb.arith.Int64.prototype.sub=function(a){return new jspb.arith.Int64((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0)};jspb.arith.Int64.prototype.clone=function(){return new jspb.arith.Int64(this.lo,this.hi)};\njspb.arith.Int64.prototype.toString=function(){var a=0!=(this.hi&2147483648),b=new jspb.arith.UInt64(this.lo,this.hi);a&&(b=(new jspb.arith.UInt64(0,0)).sub(b));return(a?\"-\":\"\")+b.toString()};jspb.arith.Int64.fromString=function(a){var b=0<a.length&&\"-\"==a[0];b&&(a=a.substring(1));a=jspb.arith.UInt64.fromString(a);if(null===a)return null;b&&(a=(new jspb.arith.UInt64(0,0)).sub(a));return new jspb.arith.Int64(a.lo,a.hi)};jspb.BinaryWriter=function(){this.blocks_=[];this.totalLength_=0;this.encoder_=new jspb.BinaryEncoder;this.bookmarks_=[]};jspb.BinaryWriter.prototype.appendUint8Array_=function(a){var b=this.encoder_.end();this.blocks_.push(b);this.blocks_.push(a);this.totalLength_+=b.length+a.length};\njspb.BinaryWriter.prototype.beginDelimited_=function(a){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);a=this.encoder_.end();this.blocks_.push(a);this.totalLength_+=a.length;a.push(this.totalLength_);return a};jspb.BinaryWriter.prototype.endDelimited_=function(a){var b=a.pop();b=this.totalLength_+this.encoder_.length()-b;for(jspb.asserts.assert(0<=b);127<b;)a.push(b&127|128),b>>>=7,this.totalLength_++;a.push(b);this.totalLength_++};\njspb.BinaryWriter.prototype.writeSerializedMessage=function(a,b,c){this.appendUint8Array_(a.subarray(b,c))};jspb.BinaryWriter.prototype.maybeWriteSerializedMessage=function(a,b,c){null!=a&&null!=b&&null!=c&&this.writeSerializedMessage(a,b,c)};jspb.BinaryWriter.prototype.reset=function(){this.blocks_=[];this.encoder_.end();this.totalLength_=0;this.bookmarks_=[]};\njspb.BinaryWriter.prototype.getResultBuffer=function(){jspb.asserts.assert(0==this.bookmarks_.length);for(var a=new Uint8Array(this.totalLength_+this.encoder_.length()),b=this.blocks_,c=b.length,d=0,e=0;e<c;e++){var f=b[e];a.set(f,d);d+=f.length}b=this.encoder_.end();a.set(b,d);d+=b.length;jspb.asserts.assert(d==a.length);this.blocks_=[a];return a};goog.exportProperty(jspb.BinaryWriter.prototype,\"getResultBuffer\",jspb.BinaryWriter.prototype.getResultBuffer);\njspb.BinaryWriter.prototype.getResultBase64String=function(a){return goog.crypt.base64.encodeByteArray(this.getResultBuffer(),a)};jspb.BinaryWriter.prototype.beginSubMessage=function(a){this.bookmarks_.push(this.beginDelimited_(a))};jspb.BinaryWriter.prototype.endSubMessage=function(){jspb.asserts.assert(0<=this.bookmarks_.length);this.endDelimited_(this.bookmarks_.pop())};\njspb.BinaryWriter.prototype.writeFieldHeader_=function(a,b){jspb.asserts.assert(1<=a&&a==Math.floor(a));this.encoder_.writeUnsignedVarint32(8*a+b)};\njspb.BinaryWriter.prototype.writeAny=function(a,b,c){var d=jspb.BinaryConstants.FieldType;switch(a){case d.DOUBLE:this.writeDouble(b,c);break;case d.FLOAT:this.writeFloat(b,c);break;case d.INT64:this.writeInt64(b,c);break;case d.UINT64:this.writeUint64(b,c);break;case d.INT32:this.writeInt32(b,c);break;case d.FIXED64:this.writeFixed64(b,c);break;case d.FIXED32:this.writeFixed32(b,c);break;case d.BOOL:this.writeBool(b,c);break;case d.STRING:this.writeString(b,c);break;case d.GROUP:jspb.asserts.fail(\"Group field type not supported in writeAny()\");\nbreak;case d.MESSAGE:jspb.asserts.fail(\"Message field type not supported in writeAny()\");break;case d.BYTES:this.writeBytes(b,c);break;case d.UINT32:this.writeUint32(b,c);break;case d.ENUM:this.writeEnum(b,c);break;case d.SFIXED32:this.writeSfixed32(b,c);break;case d.SFIXED64:this.writeSfixed64(b,c);break;case d.SINT32:this.writeSint32(b,c);break;case d.SINT64:this.writeSint64(b,c);break;case d.FHASH64:this.writeFixedHash64(b,c);break;case d.VHASH64:this.writeVarintHash64(b,c);break;default:jspb.asserts.fail(\"Invalid field type in writeAny()\")}};\njspb.BinaryWriter.prototype.writeUnsignedVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint32(b))};jspb.BinaryWriter.prototype.writeSignedVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(b))};jspb.BinaryWriter.prototype.writeUnsignedVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint64(b))};\njspb.BinaryWriter.prototype.writeSignedVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint64(b))};jspb.BinaryWriter.prototype.writeZigzagVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint32(b))};jspb.BinaryWriter.prototype.writeZigzagVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64(b))};\njspb.BinaryWriter.prototype.writeZigzagVarint64String_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64String(b))};jspb.BinaryWriter.prototype.writeZigzagVarintHash64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarintHash64(b))};\njspb.BinaryWriter.prototype.writeInt32=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(a,b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeInt32\",jspb.BinaryWriter.prototype.writeInt32);jspb.BinaryWriter.prototype.writeInt32String=function(a,b){null!=b&&(b=parseInt(b,10),jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(a,b))};\njspb.BinaryWriter.prototype.writeInt64=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeSignedVarint64_(a,b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeInt64\",jspb.BinaryWriter.prototype.writeInt64);jspb.BinaryWriter.prototype.writeInt64String=function(a,b){null!=b&&(b=jspb.arith.Int64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(b.lo,b.hi))};\njspb.BinaryWriter.prototype.writeUint32=function(a,b){null!=b&&(jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(a,b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeUint32\",jspb.BinaryWriter.prototype.writeUint32);jspb.BinaryWriter.prototype.writeUint32String=function(a,b){null!=b&&(b=parseInt(b,10),jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(a,b))};\njspb.BinaryWriter.prototype.writeUint64=function(a,b){null!=b&&(jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_64),this.writeUnsignedVarint64_(a,b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeUint64\",jspb.BinaryWriter.prototype.writeUint64);jspb.BinaryWriter.prototype.writeUint64String=function(a,b){null!=b&&(b=jspb.arith.UInt64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(b.lo,b.hi))};\njspb.BinaryWriter.prototype.writeSint32=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeZigzagVarint32_(a,b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeSint32\",jspb.BinaryWriter.prototype.writeSint32);jspb.BinaryWriter.prototype.writeSint64=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeZigzagVarint64_(a,b))};\ngoog.exportProperty(jspb.BinaryWriter.prototype,\"writeSint64\",jspb.BinaryWriter.prototype.writeSint64);jspb.BinaryWriter.prototype.writeSintHash64=function(a,b){null!=b&&this.writeZigzagVarintHash64_(a,b)};jspb.BinaryWriter.prototype.writeSint64String=function(a,b){null!=b&&this.writeZigzagVarint64String_(a,b)};\njspb.BinaryWriter.prototype.writeFixed32=function(a,b){null!=b&&(jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeUint32(b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeFixed32\",jspb.BinaryWriter.prototype.writeFixed32);\njspb.BinaryWriter.prototype.writeFixed64=function(a,b){null!=b&&(jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_64),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeUint64(b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeFixed64\",jspb.BinaryWriter.prototype.writeFixed64);\njspb.BinaryWriter.prototype.writeFixed64String=function(a,b){null!=b&&(b=jspb.arith.UInt64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(b.lo,b.hi))};jspb.BinaryWriter.prototype.writeSfixed32=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeInt32(b))};\ngoog.exportProperty(jspb.BinaryWriter.prototype,\"writeSfixed32\",jspb.BinaryWriter.prototype.writeSfixed32);jspb.BinaryWriter.prototype.writeSfixed64=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeInt64(b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeSfixed64\",jspb.BinaryWriter.prototype.writeSfixed64);\njspb.BinaryWriter.prototype.writeSfixed64String=function(a,b){null!=b&&(b=jspb.arith.Int64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(b.lo,b.hi))};jspb.BinaryWriter.prototype.writeFloat=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeFloat(b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeFloat\",jspb.BinaryWriter.prototype.writeFloat);\njspb.BinaryWriter.prototype.writeDouble=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeDouble(b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeDouble\",jspb.BinaryWriter.prototype.writeDouble);jspb.BinaryWriter.prototype.writeBool=function(a,b){null!=b&&(jspb.asserts.assert(\"boolean\"===typeof b||\"number\"===typeof b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeBool(b))};\ngoog.exportProperty(jspb.BinaryWriter.prototype,\"writeBool\",jspb.BinaryWriter.prototype.writeBool);jspb.BinaryWriter.prototype.writeEnum=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(b))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeEnum\",jspb.BinaryWriter.prototype.writeEnum);\njspb.BinaryWriter.prototype.writeString=function(a,b){null!=b&&(a=this.beginDelimited_(a),this.encoder_.writeString(b),this.endDelimited_(a))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeString\",jspb.BinaryWriter.prototype.writeString);jspb.BinaryWriter.prototype.writeBytes=function(a,b){null!=b&&(b=jspb.utils.byteSourceToUint8Array(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(b.length),this.appendUint8Array_(b))};\ngoog.exportProperty(jspb.BinaryWriter.prototype,\"writeBytes\",jspb.BinaryWriter.prototype.writeBytes);jspb.BinaryWriter.prototype.writeMessage=function(a,b,c){null!=b&&(a=this.beginDelimited_(a),c(b,this),this.endDelimited_(a))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeMessage\",jspb.BinaryWriter.prototype.writeMessage);\njspb.BinaryWriter.prototype.writeMessageSet=function(a,b,c){null!=b&&(this.writeFieldHeader_(1,jspb.BinaryConstants.WireType.START_GROUP),this.writeFieldHeader_(2,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(a),a=this.beginDelimited_(3),c(b,this),this.endDelimited_(a),this.writeFieldHeader_(1,jspb.BinaryConstants.WireType.END_GROUP))};\njspb.BinaryWriter.prototype.writeGroup=function(a,b,c){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.START_GROUP),c(b,this),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.END_GROUP))};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeGroup\",jspb.BinaryWriter.prototype.writeGroup);jspb.BinaryWriter.prototype.writeFixedHash64=function(a,b){null!=b&&(jspb.asserts.assert(8==b.length),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeFixedHash64(b))};\njspb.BinaryWriter.prototype.writeVarintHash64=function(a,b){null!=b&&(jspb.asserts.assert(8==b.length),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeVarintHash64(b))};jspb.BinaryWriter.prototype.writeSplitFixed64=function(a,b,c){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64);this.encoder_.writeSplitFixed64(b,c)};\njspb.BinaryWriter.prototype.writeSplitVarint64=function(a,b,c){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT);this.encoder_.writeSplitVarint64(b,c)};jspb.BinaryWriter.prototype.writeSplitZigzagVarint64=function(a,b,c){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT);var d=this.encoder_;jspb.utils.toZigzag64(b,c,function(a,b){d.writeSplitVarint64(a>>>0,b>>>0)})};\njspb.BinaryWriter.prototype.writeRepeatedInt32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSignedVarint32_(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedInt32\",jspb.BinaryWriter.prototype.writeRepeatedInt32);jspb.BinaryWriter.prototype.writeRepeatedInt32String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeInt32String(a,b[c])};\njspb.BinaryWriter.prototype.writeRepeatedInt64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSignedVarint64_(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedInt64\",jspb.BinaryWriter.prototype.writeRepeatedInt64);jspb.BinaryWriter.prototype.writeRepeatedSplitFixed64=function(a,b,c,d){if(null!=b)for(var e=0;e<b.length;e++)this.writeSplitFixed64(a,c(b[e]),d(b[e]))};\njspb.BinaryWriter.prototype.writeRepeatedSplitVarint64=function(a,b,c,d){if(null!=b)for(var e=0;e<b.length;e++)this.writeSplitVarint64(a,c(b[e]),d(b[e]))};jspb.BinaryWriter.prototype.writeRepeatedSplitZigzagVarint64=function(a,b,c,d){if(null!=b)for(var e=0;e<b.length;e++)this.writeSplitZigzagVarint64(a,c(b[e]),d(b[e]))};jspb.BinaryWriter.prototype.writeRepeatedInt64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeInt64String(a,b[c])};\njspb.BinaryWriter.prototype.writeRepeatedUint32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUnsignedVarint32_(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedUint32\",jspb.BinaryWriter.prototype.writeRepeatedUint32);jspb.BinaryWriter.prototype.writeRepeatedUint32String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUint32String(a,b[c])};\njspb.BinaryWriter.prototype.writeRepeatedUint64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUnsignedVarint64_(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedUint64\",jspb.BinaryWriter.prototype.writeRepeatedUint64);jspb.BinaryWriter.prototype.writeRepeatedUint64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUint64String(a,b[c])};\njspb.BinaryWriter.prototype.writeRepeatedSint32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint32_(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedSint32\",jspb.BinaryWriter.prototype.writeRepeatedSint32);jspb.BinaryWriter.prototype.writeRepeatedSint64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint64_(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedSint64\",jspb.BinaryWriter.prototype.writeRepeatedSint64);\njspb.BinaryWriter.prototype.writeRepeatedSint64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint64String_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedSintHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarintHash64_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedFixed32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed32(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedFixed32\",jspb.BinaryWriter.prototype.writeRepeatedFixed32);\njspb.BinaryWriter.prototype.writeRepeatedFixed64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed64(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedFixed64\",jspb.BinaryWriter.prototype.writeRepeatedFixed64);jspb.BinaryWriter.prototype.writeRepeatedFixed64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed64String(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedFixed64String\",jspb.BinaryWriter.prototype.writeRepeatedFixed64String);\njspb.BinaryWriter.prototype.writeRepeatedSfixed32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed32(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedSfixed32\",jspb.BinaryWriter.prototype.writeRepeatedSfixed32);jspb.BinaryWriter.prototype.writeRepeatedSfixed64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed64(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedSfixed64\",jspb.BinaryWriter.prototype.writeRepeatedSfixed64);\njspb.BinaryWriter.prototype.writeRepeatedSfixed64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed64String(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedFloat=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFloat(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedFloat\",jspb.BinaryWriter.prototype.writeRepeatedFloat);\njspb.BinaryWriter.prototype.writeRepeatedDouble=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeDouble(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedDouble\",jspb.BinaryWriter.prototype.writeRepeatedDouble);jspb.BinaryWriter.prototype.writeRepeatedBool=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeBool(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedBool\",jspb.BinaryWriter.prototype.writeRepeatedBool);\njspb.BinaryWriter.prototype.writeRepeatedEnum=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeEnum(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedEnum\",jspb.BinaryWriter.prototype.writeRepeatedEnum);jspb.BinaryWriter.prototype.writeRepeatedString=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeString(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedString\",jspb.BinaryWriter.prototype.writeRepeatedString);\njspb.BinaryWriter.prototype.writeRepeatedBytes=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeBytes(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedBytes\",jspb.BinaryWriter.prototype.writeRepeatedBytes);jspb.BinaryWriter.prototype.writeRepeatedMessage=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++){var e=this.beginDelimited_(a);c(b[d],this);this.endDelimited_(e)}};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedMessage\",jspb.BinaryWriter.prototype.writeRepeatedMessage);\njspb.BinaryWriter.prototype.writeRepeatedGroup=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++)this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.START_GROUP),c(b[d],this),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.END_GROUP)};goog.exportProperty(jspb.BinaryWriter.prototype,\"writeRepeatedGroup\",jspb.BinaryWriter.prototype.writeRepeatedGroup);jspb.BinaryWriter.prototype.writeRepeatedFixedHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixedHash64(a,b[c])};\njspb.BinaryWriter.prototype.writeRepeatedVarintHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeVarintHash64(a,b[c])};jspb.BinaryWriter.prototype.writePackedInt32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint32(b[c]);this.endDelimited_(a)}};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedInt32\",jspb.BinaryWriter.prototype.writePackedInt32);\njspb.BinaryWriter.prototype.writePackedInt32String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint32(parseInt(b[c],10));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedInt64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint64(b[c]);this.endDelimited_(a)}};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedInt64\",jspb.BinaryWriter.prototype.writePackedInt64);\njspb.BinaryWriter.prototype.writePackedSplitFixed64=function(a,b,c,d){if(null!=b){a=this.beginDelimited_(a);for(var e=0;e<b.length;e++)this.encoder_.writeSplitFixed64(c(b[e]),d(b[e]));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedSplitVarint64=function(a,b,c,d){if(null!=b){a=this.beginDelimited_(a);for(var e=0;e<b.length;e++)this.encoder_.writeSplitVarint64(c(b[e]),d(b[e]));this.endDelimited_(a)}};\njspb.BinaryWriter.prototype.writePackedSplitZigzagVarint64=function(a,b,c,d){if(null!=b){a=this.beginDelimited_(a);for(var e=this.encoder_,f=0;f<b.length;f++)jspb.utils.toZigzag64(c(b[f]),d(b[f]),function(a,b){e.writeSplitVarint64(a>>>0,b>>>0)});this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedInt64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++){var d=jspb.arith.Int64.fromString(b[c]);this.encoder_.writeSplitVarint64(d.lo,d.hi)}this.endDelimited_(a)}};\njspb.BinaryWriter.prototype.writePackedUint32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint32(b[c]);this.endDelimited_(a)}};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedUint32\",jspb.BinaryWriter.prototype.writePackedUint32);\njspb.BinaryWriter.prototype.writePackedUint32String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint32(parseInt(b[c],10));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedUint64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint64(b[c]);this.endDelimited_(a)}};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedUint64\",jspb.BinaryWriter.prototype.writePackedUint64);\njspb.BinaryWriter.prototype.writePackedUint64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++){var d=jspb.arith.UInt64.fromString(b[c]);this.encoder_.writeSplitVarint64(d.lo,d.hi)}this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedSint32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarint32(b[c]);this.endDelimited_(a)}};\ngoog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedSint32\",jspb.BinaryWriter.prototype.writePackedSint32);jspb.BinaryWriter.prototype.writePackedSint64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarint64(b[c]);this.endDelimited_(a)}};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedSint64\",jspb.BinaryWriter.prototype.writePackedSint64);\njspb.BinaryWriter.prototype.writePackedSint64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(b[c]));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedSintHash64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarintHash64(b[c]);this.endDelimited_(a)}};\njspb.BinaryWriter.prototype.writePackedFixed32=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeUint32(b[a])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedFixed32\",jspb.BinaryWriter.prototype.writePackedFixed32);\njspb.BinaryWriter.prototype.writePackedFixed64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeUint64(b[a])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedFixed64\",jspb.BinaryWriter.prototype.writePackedFixed64);\njspb.BinaryWriter.prototype.writePackedFixed64String=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++){var c=jspb.arith.UInt64.fromString(b[a]);this.encoder_.writeSplitFixed64(c.lo,c.hi)}};\njspb.BinaryWriter.prototype.writePackedSfixed32=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeInt32(b[a])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedSfixed32\",jspb.BinaryWriter.prototype.writePackedSfixed32);\njspb.BinaryWriter.prototype.writePackedSfixed64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeInt64(b[a])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedSfixed64\",jspb.BinaryWriter.prototype.writePackedSfixed64);\njspb.BinaryWriter.prototype.writePackedSfixed64String=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeInt64String(b[a])};jspb.BinaryWriter.prototype.writePackedFloat=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeFloat(b[a])};\ngoog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedFloat\",jspb.BinaryWriter.prototype.writePackedFloat);jspb.BinaryWriter.prototype.writePackedDouble=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeDouble(b[a])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedDouble\",jspb.BinaryWriter.prototype.writePackedDouble);\njspb.BinaryWriter.prototype.writePackedBool=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(b.length),a=0;a<b.length;a++)this.encoder_.writeBool(b[a])};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedBool\",jspb.BinaryWriter.prototype.writePackedBool);\njspb.BinaryWriter.prototype.writePackedEnum=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeEnum(b[c]);this.endDelimited_(a)}};goog.exportProperty(jspb.BinaryWriter.prototype,\"writePackedEnum\",jspb.BinaryWriter.prototype.writePackedEnum);\njspb.BinaryWriter.prototype.writePackedFixedHash64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeFixedHash64(b[a])};jspb.BinaryWriter.prototype.writePackedVarintHash64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeVarintHash64(b[c]);this.endDelimited_(a)}};jspb.Map=function(a,b){this.arr_=a;this.valueCtor_=b;this.map_={};this.arrClean=!0;0<this.arr_.length&&this.loadFromArray_()};goog.exportSymbol(\"jspb.Map\",jspb.Map);jspb.Map.prototype.loadFromArray_=function(){for(var a=0;a<this.arr_.length;a++){var b=this.arr_[a],c=b[0];this.map_[c.toString()]=new jspb.Map.Entry_(c,b[1])}this.arrClean=!0};\njspb.Map.prototype.toArray=function(){if(this.arrClean){if(this.valueCtor_){var a=this.map_,b;for(b in a)if(Object.prototype.hasOwnProperty.call(a,b)){var c=a[b].valueWrapper;c&&c.toArray()}}}else{this.arr_.length=0;a=this.stringKeys_();a.sort();for(b=0;b<a.length;b++){var d=this.map_[a[b]];(c=d.valueWrapper)&&c.toArray();this.arr_.push([d.key,d.value])}this.arrClean=!0}return this.arr_};goog.exportProperty(jspb.Map.prototype,\"toArray\",jspb.Map.prototype.toArray);\njspb.Map.prototype.toObject=function(a,b){for(var c=this.toArray(),d=[],e=0;e<c.length;e++){var f=this.map_[c[e][0].toString()];this.wrapEntry_(f);var g=f.valueWrapper;g?(jspb.asserts.assert(b),d.push([f.key,b(a,g)])):d.push([f.key,f.value])}return d};goog.exportProperty(jspb.Map.prototype,\"toObject\",jspb.Map.prototype.toObject);jspb.Map.fromObject=function(a,b,c){b=new jspb.Map([],b);for(var d=0;d<a.length;d++){var e=a[d][0],f=c(a[d][1]);b.set(e,f)}return b};\ngoog.exportProperty(jspb.Map,\"fromObject\",jspb.Map.fromObject);jspb.Map.ArrayIteratorIterable_=function(a){this.idx_=0;this.arr_=a};jspb.Map.ArrayIteratorIterable_.prototype.next=function(){return this.idx_<this.arr_.length?{done:!1,value:this.arr_[this.idx_++]}:{done:!0,value:void 0}};\"undefined\"!=typeof Symbol&&(jspb.Map.ArrayIteratorIterable_.prototype[Symbol.iterator]=function(){return this});jspb.Map.prototype.getLength=function(){return this.stringKeys_().length};\ngoog.exportProperty(jspb.Map.prototype,\"getLength\",jspb.Map.prototype.getLength);jspb.Map.prototype.clear=function(){this.map_={};this.arrClean=!1};goog.exportProperty(jspb.Map.prototype,\"clear\",jspb.Map.prototype.clear);jspb.Map.prototype.del=function(a){a=a.toString();var b=this.map_.hasOwnProperty(a);delete this.map_[a];this.arrClean=!1;return b};goog.exportProperty(jspb.Map.prototype,\"del\",jspb.Map.prototype.del);\njspb.Map.prototype.getEntryList=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){var d=this.map_[b[c]];a.push([d.key,d.value])}return a};goog.exportProperty(jspb.Map.prototype,\"getEntryList\",jspb.Map.prototype.getEntryList);jspb.Map.prototype.entries=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){var d=this.map_[b[c]];a.push([d.key,this.wrapEntry_(d)])}return new jspb.Map.ArrayIteratorIterable_(a)};\ngoog.exportProperty(jspb.Map.prototype,\"entries\",jspb.Map.prototype.entries);jspb.Map.prototype.keys=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++)a.push(this.map_[b[c]].key);return new jspb.Map.ArrayIteratorIterable_(a)};goog.exportProperty(jspb.Map.prototype,\"keys\",jspb.Map.prototype.keys);jspb.Map.prototype.values=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++)a.push(this.wrapEntry_(this.map_[b[c]]));return new jspb.Map.ArrayIteratorIterable_(a)};\ngoog.exportProperty(jspb.Map.prototype,\"values\",jspb.Map.prototype.values);jspb.Map.prototype.forEach=function(a,b){var c=this.stringKeys_();c.sort();for(var d=0;d<c.length;d++){var e=this.map_[c[d]];a.call(b,this.wrapEntry_(e),e.key,this)}};goog.exportProperty(jspb.Map.prototype,\"forEach\",jspb.Map.prototype.forEach);jspb.Map.prototype.set=function(a,b){var c=new jspb.Map.Entry_(a);this.valueCtor_?(c.valueWrapper=b,c.value=b.toArray()):c.value=b;this.map_[a.toString()]=c;this.arrClean=!1;return this};\ngoog.exportProperty(jspb.Map.prototype,\"set\",jspb.Map.prototype.set);jspb.Map.prototype.wrapEntry_=function(a){return this.valueCtor_?(a.valueWrapper||(a.valueWrapper=new this.valueCtor_(a.value)),a.valueWrapper):a.value};jspb.Map.prototype.get=function(a){if(a=this.map_[a.toString()])return this.wrapEntry_(a)};goog.exportProperty(jspb.Map.prototype,\"get\",jspb.Map.prototype.get);jspb.Map.prototype.has=function(a){return a.toString()in this.map_};goog.exportProperty(jspb.Map.prototype,\"has\",jspb.Map.prototype.has);\njspb.Map.prototype.serializeBinary=function(a,b,c,d,e){var f=this.stringKeys_();f.sort();for(var g=0;g<f.length;g++){var h=this.map_[f[g]];b.beginSubMessage(a);c.call(b,1,h.key);this.valueCtor_?d.call(b,2,this.wrapEntry_(h),e):d.call(b,2,h.value);b.endSubMessage()}};goog.exportProperty(jspb.Map.prototype,\"serializeBinary\",jspb.Map.prototype.serializeBinary);\njspb.Map.deserializeBinary=function(a,b,c,d,e,f,g){for(;b.nextField()&&!b.isEndGroup();){var h=b.getFieldNumber();1==h?f=c.call(b):2==h&&(a.valueCtor_?(jspb.asserts.assert(e),g||(g=new a.valueCtor_),d.call(b,g,e)):g=d.call(b))}jspb.asserts.assert(void 0!=f);jspb.asserts.assert(void 0!=g);a.set(f,g)};goog.exportProperty(jspb.Map,\"deserializeBinary\",jspb.Map.deserializeBinary);\njspb.Map.prototype.stringKeys_=function(){var a=this.map_,b=[],c;for(c in a)Object.prototype.hasOwnProperty.call(a,c)&&b.push(c);return b};jspb.Map.Entry_=function(a,b){this.key=a;this.value=b;this.valueWrapper=void 0};jspb.ExtensionFieldInfo=function(a,b,c,d,e){this.fieldIndex=a;this.fieldName=b;this.ctor=c;this.toObjectFn=d;this.isRepeated=e};goog.exportSymbol(\"jspb.ExtensionFieldInfo\",jspb.ExtensionFieldInfo);jspb.ExtensionFieldBinaryInfo=function(a,b,c,d,e,f){this.fieldInfo=a;this.binaryReaderFn=b;this.binaryWriterFn=c;this.binaryMessageSerializeFn=d;this.binaryMessageDeserializeFn=e;this.isPacked=f};goog.exportSymbol(\"jspb.ExtensionFieldBinaryInfo\",jspb.ExtensionFieldBinaryInfo);\njspb.ExtensionFieldInfo.prototype.isMessageType=function(){return!!this.ctor};goog.exportProperty(jspb.ExtensionFieldInfo.prototype,\"isMessageType\",jspb.ExtensionFieldInfo.prototype.isMessageType);jspb.Message=function(){};goog.exportSymbol(\"jspb.Message\",jspb.Message);jspb.Message.GENERATE_TO_OBJECT=!0;goog.exportProperty(jspb.Message,\"GENERATE_TO_OBJECT\",jspb.Message.GENERATE_TO_OBJECT);jspb.Message.GENERATE_FROM_OBJECT=!goog.DISALLOW_TEST_ONLY_CODE;\ngoog.exportProperty(jspb.Message,\"GENERATE_FROM_OBJECT\",jspb.Message.GENERATE_FROM_OBJECT);jspb.Message.GENERATE_TO_STRING=!0;jspb.Message.ASSUME_LOCAL_ARRAYS=!1;jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS=!0;jspb.Message.SUPPORTS_UINT8ARRAY_=\"function\"==typeof Uint8Array;jspb.Message.prototype.getJsPbMessageId=function(){return this.messageId_};goog.exportProperty(jspb.Message.prototype,\"getJsPbMessageId\",jspb.Message.prototype.getJsPbMessageId);jspb.Message.getIndex_=function(a,b){return b+a.arrayIndexOffset_};\njspb.Message.hiddenES6Property_=function(){};jspb.Message.getFieldNumber_=function(a,b){return b-a.arrayIndexOffset_};\njspb.Message.initialize=function(a,b,c,d,e,f){a.wrappers_=null;b||(b=c?[c]:[]);a.messageId_=c?String(c):void 0;a.arrayIndexOffset_=0===c?-1:0;a.array=b;jspb.Message.initPivotAndExtensionObject_(a,d);a.convertedPrimitiveFields_={};jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS||(a.repeatedFields=e);if(e)for(b=0;b<e.length;b++)c=e[b],c<a.pivot_?(c=jspb.Message.getIndex_(a,c),a.array[c]=a.array[c]||jspb.Message.EMPTY_LIST_SENTINEL_):(jspb.Message.maybeInitEmptyExtensionObject_(a),a.extensionObject_[c]=\na.extensionObject_[c]||jspb.Message.EMPTY_LIST_SENTINEL_);if(f&&f.length)for(b=0;b<f.length;b++)jspb.Message.computeOneofCase(a,f[b])};goog.exportProperty(jspb.Message,\"initialize\",jspb.Message.initialize);jspb.Message.EMPTY_LIST_SENTINEL_=goog.DEBUG&&Object.freeze?Object.freeze([]):[];jspb.Message.isArray_=function(a){return jspb.Message.ASSUME_LOCAL_ARRAYS?a instanceof Array:Array.isArray(a)};\njspb.Message.isExtensionObject_=function(a){return null!==a&&\"object\"==typeof a&&!jspb.Message.isArray_(a)&&!(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)};jspb.Message.initPivotAndExtensionObject_=function(a,b){var c=a.array.length,d=-1;if(c&&(d=c-1,c=a.array[d],jspb.Message.isExtensionObject_(c))){a.pivot_=jspb.Message.getFieldNumber_(a,d);a.extensionObject_=c;return}-1<b?(a.pivot_=Math.max(b,jspb.Message.getFieldNumber_(a,d+1)),a.extensionObject_=null):a.pivot_=Number.MAX_VALUE};\njspb.Message.maybeInitEmptyExtensionObject_=function(a){var b=jspb.Message.getIndex_(a,a.pivot_);a.array[b]||(a.extensionObject_=a.array[b]={})};jspb.Message.toObjectList=function(a,b,c){for(var d=[],e=0;e<a.length;e++)d[e]=b.call(a[e],c,a[e]);return d};goog.exportProperty(jspb.Message,\"toObjectList\",jspb.Message.toObjectList);\njspb.Message.toObjectExtension=function(a,b,c,d,e){for(var f in c){var g=c[f],h=d.call(a,g);if(null!=h){for(var k in g.fieldName)if(g.fieldName.hasOwnProperty(k))break;b[k]=g.toObjectFn?g.isRepeated?jspb.Message.toObjectList(h,g.toObjectFn,e):g.toObjectFn(e,h):h}}};goog.exportProperty(jspb.Message,\"toObjectExtension\",jspb.Message.toObjectExtension);\njspb.Message.serializeBinaryExtensions=function(a,b,c,d){for(var e in c){var f=c[e],g=f.fieldInfo;if(!f.binaryWriterFn)throw Error(\"Message extension present that was generated without binary serialization support\");var h=d.call(a,g);if(null!=h)if(g.isMessageType())if(f.binaryMessageSerializeFn)f.binaryWriterFn.call(b,g.fieldIndex,h,f.binaryMessageSerializeFn);else throw Error(\"Message extension present holding submessage without binary support enabled, and message is being serialized to binary format\");\nelse f.binaryWriterFn.call(b,g.fieldIndex,h)}};goog.exportProperty(jspb.Message,\"serializeBinaryExtensions\",jspb.Message.serializeBinaryExtensions);\njspb.Message.readBinaryExtension=function(a,b,c,d,e){var f=c[b.getFieldNumber()];if(f){c=f.fieldInfo;if(!f.binaryReaderFn)throw Error(\"Deserializing extension whose generated code does not support binary format\");if(c.isMessageType()){var g=new c.ctor;f.binaryReaderFn.call(b,g,f.binaryMessageDeserializeFn)}else g=f.binaryReaderFn.call(b);c.isRepeated&&!f.isPacked?(b=d.call(a,c))?b.push(g):e.call(a,c,[g]):e.call(a,c,g)}else b.skipField()};goog.exportProperty(jspb.Message,\"readBinaryExtension\",jspb.Message.readBinaryExtension);\njspb.Message.getField=function(a,b){if(b<a.pivot_){b=jspb.Message.getIndex_(a,b);var c=a.array[b];return c===jspb.Message.EMPTY_LIST_SENTINEL_?a.array[b]=[]:c}if(a.extensionObject_)return c=a.extensionObject_[b],c===jspb.Message.EMPTY_LIST_SENTINEL_?a.extensionObject_[b]=[]:c};goog.exportProperty(jspb.Message,\"getField\",jspb.Message.getField);jspb.Message.getRepeatedField=function(a,b){return jspb.Message.getField(a,b)};goog.exportProperty(jspb.Message,\"getRepeatedField\",jspb.Message.getRepeatedField);\njspb.Message.getOptionalFloatingPointField=function(a,b){a=jspb.Message.getField(a,b);return null==a?a:+a};goog.exportProperty(jspb.Message,\"getOptionalFloatingPointField\",jspb.Message.getOptionalFloatingPointField);jspb.Message.getBooleanField=function(a,b){a=jspb.Message.getField(a,b);return null==a?a:!!a};goog.exportProperty(jspb.Message,\"getBooleanField\",jspb.Message.getBooleanField);\njspb.Message.getRepeatedFloatingPointField=function(a,b){var c=jspb.Message.getRepeatedField(a,b);a.convertedPrimitiveFields_||(a.convertedPrimitiveFields_={});if(!a.convertedPrimitiveFields_[b]){for(var d=0;d<c.length;d++)c[d]=+c[d];a.convertedPrimitiveFields_[b]=!0}return c};goog.exportProperty(jspb.Message,\"getRepeatedFloatingPointField\",jspb.Message.getRepeatedFloatingPointField);\njspb.Message.getRepeatedBooleanField=function(a,b){var c=jspb.Message.getRepeatedField(a,b);a.convertedPrimitiveFields_||(a.convertedPrimitiveFields_={});if(!a.convertedPrimitiveFields_[b]){for(var d=0;d<c.length;d++)c[d]=!!c[d];a.convertedPrimitiveFields_[b]=!0}return c};goog.exportProperty(jspb.Message,\"getRepeatedBooleanField\",jspb.Message.getRepeatedBooleanField);\njspb.Message.bytesAsB64=function(a){if(null==a||\"string\"===typeof a)return a;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)return goog.crypt.base64.encodeByteArray(a);jspb.asserts.fail(\"Cannot coerce to b64 string: \"+goog.typeOf(a));return null};goog.exportProperty(jspb.Message,\"bytesAsB64\",jspb.Message.bytesAsB64);\njspb.Message.bytesAsU8=function(a){if(null==a||a instanceof Uint8Array)return a;if(\"string\"===typeof a)return goog.crypt.base64.decodeStringToUint8Array(a);jspb.asserts.fail(\"Cannot coerce to Uint8Array: \"+goog.typeOf(a));return null};goog.exportProperty(jspb.Message,\"bytesAsU8\",jspb.Message.bytesAsU8);jspb.Message.bytesListAsB64=function(a){jspb.Message.assertConsistentTypes_(a);return a.length&&\"string\"!==typeof a[0]?goog.array.map(a,jspb.Message.bytesAsB64):a};\ngoog.exportProperty(jspb.Message,\"bytesListAsB64\",jspb.Message.bytesListAsB64);jspb.Message.bytesListAsU8=function(a){jspb.Message.assertConsistentTypes_(a);return!a.length||a[0]instanceof Uint8Array?a:goog.array.map(a,jspb.Message.bytesAsU8)};goog.exportProperty(jspb.Message,\"bytesListAsU8\",jspb.Message.bytesListAsU8);\njspb.Message.assertConsistentTypes_=function(a){if(goog.DEBUG&&a&&1<a.length){var b=goog.typeOf(a[0]);goog.array.forEach(a,function(a){goog.typeOf(a)!=b&&jspb.asserts.fail(\"Inconsistent type in JSPB repeated field array. Got \"+goog.typeOf(a)+\" expected \"+b)})}};jspb.Message.getFieldWithDefault=function(a,b,c){a=jspb.Message.getField(a,b);return null==a?c:a};goog.exportProperty(jspb.Message,\"getFieldWithDefault\",jspb.Message.getFieldWithDefault);\njspb.Message.getBooleanFieldWithDefault=function(a,b,c){a=jspb.Message.getBooleanField(a,b);return null==a?c:a};goog.exportProperty(jspb.Message,\"getBooleanFieldWithDefault\",jspb.Message.getBooleanFieldWithDefault);jspb.Message.getFloatingPointFieldWithDefault=function(a,b,c){a=jspb.Message.getOptionalFloatingPointField(a,b);return null==a?c:a};goog.exportProperty(jspb.Message,\"getFloatingPointFieldWithDefault\",jspb.Message.getFloatingPointFieldWithDefault);jspb.Message.getFieldProto3=jspb.Message.getFieldWithDefault;\ngoog.exportProperty(jspb.Message,\"getFieldProto3\",jspb.Message.getFieldProto3);jspb.Message.getMapField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});if(b in a.wrappers_)return a.wrappers_[b];var e=jspb.Message.getField(a,b);if(!e){if(c)return;e=[];jspb.Message.setField(a,b,e)}return a.wrappers_[b]=new jspb.Map(e,d)};goog.exportProperty(jspb.Message,\"getMapField\",jspb.Message.getMapField);\njspb.Message.setField=function(a,b,c){jspb.asserts.assertInstanceof(a,jspb.Message);b<a.pivot_?a.array[jspb.Message.getIndex_(a,b)]=c:(jspb.Message.maybeInitEmptyExtensionObject_(a),a.extensionObject_[b]=c);return a};goog.exportProperty(jspb.Message,\"setField\",jspb.Message.setField);jspb.Message.setProto3IntField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,0)};goog.exportProperty(jspb.Message,\"setProto3IntField\",jspb.Message.setProto3IntField);\njspb.Message.setProto3FloatField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,0)};goog.exportProperty(jspb.Message,\"setProto3FloatField\",jspb.Message.setProto3FloatField);jspb.Message.setProto3BooleanField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,!1)};goog.exportProperty(jspb.Message,\"setProto3BooleanField\",jspb.Message.setProto3BooleanField);jspb.Message.setProto3StringField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,\"\")};\ngoog.exportProperty(jspb.Message,\"setProto3StringField\",jspb.Message.setProto3StringField);jspb.Message.setProto3BytesField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,\"\")};goog.exportProperty(jspb.Message,\"setProto3BytesField\",jspb.Message.setProto3BytesField);jspb.Message.setProto3EnumField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,0)};goog.exportProperty(jspb.Message,\"setProto3EnumField\",jspb.Message.setProto3EnumField);\njspb.Message.setProto3StringIntField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,\"0\")};goog.exportProperty(jspb.Message,\"setProto3StringIntField\",jspb.Message.setProto3StringIntField);jspb.Message.setFieldIgnoringDefault_=function(a,b,c,d){jspb.asserts.assertInstanceof(a,jspb.Message);c!==d?jspb.Message.setField(a,b,c):b<a.pivot_?a.array[jspb.Message.getIndex_(a,b)]=null:(jspb.Message.maybeInitEmptyExtensionObject_(a),delete a.extensionObject_[b]);return a};\njspb.Message.addToRepeatedField=function(a,b,c,d){jspb.asserts.assertInstanceof(a,jspb.Message);b=jspb.Message.getRepeatedField(a,b);void 0!=d?b.splice(d,0,c):b.push(c);return a};goog.exportProperty(jspb.Message,\"addToRepeatedField\",jspb.Message.addToRepeatedField);\njspb.Message.setOneofField=function(a,b,c,d){jspb.asserts.assertInstanceof(a,jspb.Message);(c=jspb.Message.computeOneofCase(a,c))&&c!==b&&void 0!==d&&(a.wrappers_&&c in a.wrappers_&&(a.wrappers_[c]=void 0),jspb.Message.setField(a,c,void 0));return jspb.Message.setField(a,b,d)};goog.exportProperty(jspb.Message,\"setOneofField\",jspb.Message.setOneofField);\njspb.Message.computeOneofCase=function(a,b){for(var c,d,e=0;e<b.length;e++){var f=b[e],g=jspb.Message.getField(a,f);null!=g&&(c=f,d=g,jspb.Message.setField(a,f,void 0))}return c?(jspb.Message.setField(a,c,d),c):0};goog.exportProperty(jspb.Message,\"computeOneofCase\",jspb.Message.computeOneofCase);jspb.Message.getWrapperField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});if(!a.wrappers_[c]){var e=jspb.Message.getField(a,c);if(d||e)a.wrappers_[c]=new b(e)}return a.wrappers_[c]};\ngoog.exportProperty(jspb.Message,\"getWrapperField\",jspb.Message.getWrapperField);jspb.Message.getRepeatedWrapperField=function(a,b,c){jspb.Message.wrapRepeatedField_(a,b,c);b=a.wrappers_[c];b==jspb.Message.EMPTY_LIST_SENTINEL_&&(b=a.wrappers_[c]=[]);return b};goog.exportProperty(jspb.Message,\"getRepeatedWrapperField\",jspb.Message.getRepeatedWrapperField);\njspb.Message.wrapRepeatedField_=function(a,b,c){a.wrappers_||(a.wrappers_={});if(!a.wrappers_[c]){for(var d=jspb.Message.getRepeatedField(a,c),e=[],f=0;f<d.length;f++)e[f]=new b(d[f]);a.wrappers_[c]=e}};jspb.Message.setWrapperField=function(a,b,c){jspb.asserts.assertInstanceof(a,jspb.Message);a.wrappers_||(a.wrappers_={});var d=c?c.toArray():c;a.wrappers_[b]=c;return jspb.Message.setField(a,b,d)};goog.exportProperty(jspb.Message,\"setWrapperField\",jspb.Message.setWrapperField);\njspb.Message.setOneofWrapperField=function(a,b,c,d){jspb.asserts.assertInstanceof(a,jspb.Message);a.wrappers_||(a.wrappers_={});var e=d?d.toArray():d;a.wrappers_[b]=d;return jspb.Message.setOneofField(a,b,c,e)};goog.exportProperty(jspb.Message,\"setOneofWrapperField\",jspb.Message.setOneofWrapperField);\njspb.Message.setRepeatedWrapperField=function(a,b,c){jspb.asserts.assertInstanceof(a,jspb.Message);a.wrappers_||(a.wrappers_={});c=c||[];for(var d=[],e=0;e<c.length;e++)d[e]=c[e].toArray();a.wrappers_[b]=c;return jspb.Message.setField(a,b,d)};goog.exportProperty(jspb.Message,\"setRepeatedWrapperField\",jspb.Message.setRepeatedWrapperField);\njspb.Message.addToRepeatedWrapperField=function(a,b,c,d,e){jspb.Message.wrapRepeatedField_(a,d,b);var f=a.wrappers_[b];f||(f=a.wrappers_[b]=[]);c=c?c:new d;a=jspb.Message.getRepeatedField(a,b);void 0!=e?(f.splice(e,0,c),a.splice(e,0,c.toArray())):(f.push(c),a.push(c.toArray()));return c};goog.exportProperty(jspb.Message,\"addToRepeatedWrapperField\",jspb.Message.addToRepeatedWrapperField);\njspb.Message.toMap=function(a,b,c,d){for(var e={},f=0;f<a.length;f++)e[b.call(a[f])]=c?c.call(a[f],d,a[f]):a[f];return e};goog.exportProperty(jspb.Message,\"toMap\",jspb.Message.toMap);jspb.Message.prototype.syncMapFields_=function(){if(this.wrappers_)for(var a in this.wrappers_){var b=this.wrappers_[a];if(Array.isArray(b))for(var c=0;c<b.length;c++)b[c]&&b[c].toArray();else b&&b.toArray()}};jspb.Message.prototype.toArray=function(){this.syncMapFields_();return this.array};\ngoog.exportProperty(jspb.Message.prototype,\"toArray\",jspb.Message.prototype.toArray);jspb.Message.GENERATE_TO_STRING&&(jspb.Message.prototype.toString=function(){this.syncMapFields_();return this.array.toString()});\njspb.Message.prototype.getExtension=function(a){if(this.extensionObject_){this.wrappers_||(this.wrappers_={});var b=a.fieldIndex;if(a.isRepeated){if(a.isMessageType())return this.wrappers_[b]||(this.wrappers_[b]=goog.array.map(this.extensionObject_[b]||[],function(b){return new a.ctor(b)})),this.wrappers_[b]}else if(a.isMessageType())return!this.wrappers_[b]&&this.extensionObject_[b]&&(this.wrappers_[b]=new a.ctor(this.extensionObject_[b])),this.wrappers_[b];return this.extensionObject_[b]}};\ngoog.exportProperty(jspb.Message.prototype,\"getExtension\",jspb.Message.prototype.getExtension);\njspb.Message.prototype.setExtension=function(a,b){this.wrappers_||(this.wrappers_={});jspb.Message.maybeInitEmptyExtensionObject_(this);var c=a.fieldIndex;a.isRepeated?(b=b||[],a.isMessageType()?(this.wrappers_[c]=b,this.extensionObject_[c]=goog.array.map(b,function(a){return a.toArray()})):this.extensionObject_[c]=b):a.isMessageType()?(this.wrappers_[c]=b,this.extensionObject_[c]=b?b.toArray():b):this.extensionObject_[c]=b;return this};goog.exportProperty(jspb.Message.prototype,\"setExtension\",jspb.Message.prototype.setExtension);\njspb.Message.difference=function(a,b){if(!(a instanceof b.constructor))throw Error(\"Messages have different types.\");var c=a.toArray();b=b.toArray();var d=[],e=0,f=c.length>b.length?c.length:b.length;a.getJsPbMessageId()&&(d[0]=a.getJsPbMessageId(),e=1);for(;e<f;e++)jspb.Message.compareFields(c[e],b[e])||(d[e]=b[e]);return new a.constructor(d)};goog.exportProperty(jspb.Message,\"difference\",jspb.Message.difference);\njspb.Message.equals=function(a,b){return a==b||!(!a||!b)&&a instanceof b.constructor&&jspb.Message.compareFields(a.toArray(),b.toArray())};goog.exportProperty(jspb.Message,\"equals\",jspb.Message.equals);jspb.Message.compareExtensions=function(a,b){a=a||{};b=b||{};var c={},d;for(d in a)c[d]=0;for(d in b)c[d]=0;for(d in c)if(!jspb.Message.compareFields(a[d],b[d]))return!1;return!0};goog.exportProperty(jspb.Message,\"compareExtensions\",jspb.Message.compareExtensions);\njspb.Message.compareFields=function(a,b){if(a==b)return!0;if(!goog.isObject(a)||!goog.isObject(b))return\"number\"===typeof a&&isNaN(a)||\"number\"===typeof b&&isNaN(b)?String(a)==String(b):!1;if(a.constructor!=b.constructor)return!1;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a.constructor===Uint8Array){if(a.length!=b.length)return!1;for(var c=0;c<a.length;c++)if(a[c]!=b[c])return!1;return!0}if(a.constructor===Array){var d=void 0,e=void 0,f=Math.max(a.length,b.length);for(c=0;c<f;c++){var g=a[c],h=b[c];g&&\ng.constructor==Object&&(jspb.asserts.assert(void 0===d),jspb.asserts.assert(c===a.length-1),d=g,g=void 0);h&&h.constructor==Object&&(jspb.asserts.assert(void 0===e),jspb.asserts.assert(c===b.length-1),e=h,h=void 0);if(!jspb.Message.compareFields(g,h))return!1}return d||e?(d=d||{},e=e||{},jspb.Message.compareExtensions(d,e)):!0}if(a.constructor===Object)return jspb.Message.compareExtensions(a,b);throw Error(\"Invalid type in JSPB array\");};goog.exportProperty(jspb.Message,\"compareFields\",jspb.Message.compareFields);\njspb.Message.prototype.cloneMessage=function(){return jspb.Message.cloneMessage(this)};goog.exportProperty(jspb.Message.prototype,\"cloneMessage\",jspb.Message.prototype.cloneMessage);jspb.Message.prototype.clone=function(){return jspb.Message.cloneMessage(this)};goog.exportProperty(jspb.Message.prototype,\"clone\",jspb.Message.prototype.clone);jspb.Message.clone=function(a){return jspb.Message.cloneMessage(a)};goog.exportProperty(jspb.Message,\"clone\",jspb.Message.clone);jspb.Message.cloneMessage=function(a){return new a.constructor(jspb.Message.clone_(a.toArray()))};\njspb.Message.copyInto=function(a,b){jspb.asserts.assertInstanceof(a,jspb.Message);jspb.asserts.assertInstanceof(b,jspb.Message);jspb.asserts.assert(a.constructor==b.constructor,\"Copy source and target message should have the same type.\");a=jspb.Message.clone(a);for(var c=b.toArray(),d=a.toArray(),e=c.length=0;e<d.length;e++)c[e]=d[e];b.wrappers_=a.wrappers_;b.extensionObject_=a.extensionObject_};goog.exportProperty(jspb.Message,\"copyInto\",jspb.Message.copyInto);\njspb.Message.clone_=function(a){if(Array.isArray(a)){for(var b=Array(a.length),c=0;c<a.length;c++){var d=a[c];null!=d&&(b[c]=\"object\"==typeof d?jspb.Message.clone_(jspb.asserts.assert(d)):d)}return b}if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)return new Uint8Array(a);b={};for(c in a)d=a[c],null!=d&&(b[c]=\"object\"==typeof d?jspb.Message.clone_(jspb.asserts.assert(d)):d);return b};jspb.Message.registerMessageType=function(a,b){b.messageId=a};\ngoog.exportProperty(jspb.Message,\"registerMessageType\",jspb.Message.registerMessageType);jspb.Message.messageSetExtensions={};jspb.Message.messageSetExtensionsBinary={};jspb.Export={};\"object\"===typeof exports&&(exports.Map=jspb.Map,exports.Message=jspb.Message,exports.BinaryReader=jspb.BinaryReader,exports.BinaryWriter=jspb.BinaryWriter,exports.ExtensionFieldInfo=jspb.ExtensionFieldInfo,exports.ExtensionFieldBinaryInfo=jspb.ExtensionFieldBinaryInfo,exports.exportSymbol=goog.exportSymbol,exports.inherits=goog.inherits,exports.object={extend:goog.object.extend},exports.typeOf=goog.typeOf);\n","// source: google/protobuf/any.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global =\n    (typeof globalThis !== 'undefined' && globalThis) ||\n    (typeof window !== 'undefined' && window) ||\n    (typeof global !== 'undefined' && global) ||\n    (typeof self !== 'undefined' && self) ||\n    (function () { return this; }).call(null) ||\n    Function('return this')();\n\ngoog.exportSymbol('proto.google.protobuf.Any', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.google.protobuf.Any = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.google.protobuf.Any, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.google.protobuf.Any.displayName = 'proto.google.protobuf.Any';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.google.protobuf.Any.prototype.toObject = function(opt_includeInstance) {\n  return proto.google.protobuf.Any.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.google.protobuf.Any} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.google.protobuf.Any.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    typeUrl: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    value: msg.getValue_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.google.protobuf.Any}\n */\nproto.google.protobuf.Any.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.google.protobuf.Any;\n  return proto.google.protobuf.Any.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.google.protobuf.Any} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.google.protobuf.Any}\n */\nproto.google.protobuf.Any.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setTypeUrl(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setValue(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.google.protobuf.Any.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.google.protobuf.Any.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.google.protobuf.Any} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.google.protobuf.Any.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getTypeUrl();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getValue_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string type_url = 1;\n * @return {string}\n */\nproto.google.protobuf.Any.prototype.getTypeUrl = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.google.protobuf.Any} returns this\n */\nproto.google.protobuf.Any.prototype.setTypeUrl = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional bytes value = 2;\n * @return {!(string|Uint8Array)}\n */\nproto.google.protobuf.Any.prototype.getValue = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes value = 2;\n * This is a type-conversion wrapper around `getValue()`\n * @return {string}\n */\nproto.google.protobuf.Any.prototype.getValue_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getValue()));\n};\n\n\n/**\n * optional bytes value = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getValue()`\n * @return {!Uint8Array}\n */\nproto.google.protobuf.Any.prototype.getValue_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getValue()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.google.protobuf.Any} returns this\n */\nproto.google.protobuf.Any.prototype.setValue = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\ngoog.object.extend(exports, proto.google.protobuf);\n/* This code will be inserted into generated code for\n * google/protobuf/any.proto. */\n\n/**\n * Returns the type name contained in this instance, if any.\n * @return {string|undefined}\n */\nproto.google.protobuf.Any.prototype.getTypeName = function() {\n  return this.getTypeUrl().split('/').pop();\n};\n\n\n/**\n * Packs the given message instance into this Any.\n * For binary format usage only.\n * @param {!Uint8Array} serialized The serialized data to pack.\n * @param {string} name The type name of this message object.\n * @param {string=} opt_typeUrlPrefix the type URL prefix.\n */\nproto.google.protobuf.Any.prototype.pack = function(serialized, name,\n                                                    opt_typeUrlPrefix) {\n  if (!opt_typeUrlPrefix) {\n    opt_typeUrlPrefix = 'type.googleapis.com/';\n  }\n\n  if (opt_typeUrlPrefix.substr(-1) != '/') {\n    this.setTypeUrl(opt_typeUrlPrefix + '/' + name);\n  } else {\n    this.setTypeUrl(opt_typeUrlPrefix + name);\n  }\n\n  this.setValue(serialized);\n};\n\n\n/**\n * @template T\n * Unpacks this Any into the given message object.\n * @param {function(Uint8Array):T} deserialize Function that will deserialize\n *     the binary data properly.\n * @param {string} name The expected type name of this message object.\n * @return {?T} If the name matched the expected name, returns the deserialized\n *     object, otherwise returns null.\n */\nproto.google.protobuf.Any.prototype.unpack = function(deserialize, name) {\n  if (this.getTypeName() == name) {\n    return deserialize(this.getValue_asU8());\n  } else {\n    return null;\n  }\n};\n","import require$$0 from 'google-protobuf';\nimport require$$2 from 'google-protobuf/google/protobuf/any_pb.js';\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar vision$2 = {};\n\nvar vision$1 = {};\n\nvar image_classifier_options = {};\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(image_classifier_options, \"__esModule\", { value: true });\n\nvar image_classifier_result = {};\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(image_classifier_result, \"__esModule\", { value: true });\n\nvar image_classifier = {};\n\nvar calculator_pb = {};\n\nvar calculator_options_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/framework/calculator_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.CalculatorOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.CalculatorOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 2, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.CalculatorOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.CalculatorOptions.displayName = 'proto.mediapipe.CalculatorOptions';\n\t}\n\n\t/**\n\t * The extensions registered with this message class. This is a map of\n\t * extension field number to fieldInfo object.\n\t *\n\t * For example:\n\t *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n\t *\n\t * fieldName contains the JsCompiler renamed field name property so that it\n\t * works in OPTIMIZED mode.\n\t *\n\t * @type {!Object<number, jspb.ExtensionFieldInfo>}\n\t */\n\tproto.mediapipe.CalculatorOptions.extensions = {};\n\n\n\t/**\n\t * The extensions registered with this message class. This is a map of\n\t * extension field number to fieldInfo object.\n\t *\n\t * For example:\n\t *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n\t *\n\t * fieldName contains the JsCompiler renamed field name property so that it\n\t * works in OPTIMIZED mode.\n\t *\n\t * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}\n\t */\n\tproto.mediapipe.CalculatorOptions.extensionsBinary = {};\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.CalculatorOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.CalculatorOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.CalculatorOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.CalculatorOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    mergeFields: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f\n\t  };\n\n\t  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,\n\t      proto.mediapipe.CalculatorOptions.extensions, proto.mediapipe.CalculatorOptions.prototype.getExtension,\n\t      includeInstance);\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.CalculatorOptions}\n\t */\n\tproto.mediapipe.CalculatorOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.CalculatorOptions;\n\t  return proto.mediapipe.CalculatorOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.CalculatorOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.CalculatorOptions}\n\t */\n\tproto.mediapipe.CalculatorOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setMergeFields(value);\n\t      break;\n\t    default:\n\t      jspb.Message.readBinaryExtension(msg, reader,\n\t        proto.mediapipe.CalculatorOptions.extensionsBinary,\n\t        proto.mediapipe.CalculatorOptions.prototype.getExtension,\n\t        proto.mediapipe.CalculatorOptions.prototype.setExtension);\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.CalculatorOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.CalculatorOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.CalculatorOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.CalculatorOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeBool(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  jspb.Message.serializeBinaryExtensions(message, writer,\n\t    proto.mediapipe.CalculatorOptions.extensionsBinary, proto.mediapipe.CalculatorOptions.prototype.getExtension);\n\t};\n\n\n\t/**\n\t * optional bool merge_fields = 1;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorOptions.prototype.getMergeFields = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.CalculatorOptions} returns this\n\t */\n\tproto.mediapipe.CalculatorOptions.prototype.setMergeFields = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.CalculatorOptions} returns this\n\t */\n\tproto.mediapipe.CalculatorOptions.prototype.clearMergeFields = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorOptions.prototype.hasMergeFields = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (calculator_options_pb));\n\nvar mediapipe_options_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/framework/mediapipe_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.MediaPipeOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.MediaPipeOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.MediaPipeOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.MediaPipeOptions.displayName = 'proto.mediapipe.MediaPipeOptions';\n\t}\n\n\t/**\n\t * The extensions registered with this message class. This is a map of\n\t * extension field number to fieldInfo object.\n\t *\n\t * For example:\n\t *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n\t *\n\t * fieldName contains the JsCompiler renamed field name property so that it\n\t * works in OPTIMIZED mode.\n\t *\n\t * @type {!Object<number, jspb.ExtensionFieldInfo>}\n\t */\n\tproto.mediapipe.MediaPipeOptions.extensions = {};\n\n\n\t/**\n\t * The extensions registered with this message class. This is a map of\n\t * extension field number to fieldInfo object.\n\t *\n\t * For example:\n\t *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n\t *\n\t * fieldName contains the JsCompiler renamed field name property so that it\n\t * works in OPTIMIZED mode.\n\t *\n\t * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}\n\t */\n\tproto.mediapipe.MediaPipeOptions.extensionsBinary = {};\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.MediaPipeOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.MediaPipeOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.MediaPipeOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.MediaPipeOptions.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\n\t  };\n\n\t  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,\n\t      proto.mediapipe.MediaPipeOptions.extensions, proto.mediapipe.MediaPipeOptions.prototype.getExtension,\n\t      includeInstance);\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.MediaPipeOptions}\n\t */\n\tproto.mediapipe.MediaPipeOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.MediaPipeOptions;\n\t  return proto.mediapipe.MediaPipeOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.MediaPipeOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.MediaPipeOptions}\n\t */\n\tproto.mediapipe.MediaPipeOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    default:\n\t      jspb.Message.readBinaryExtension(msg, reader,\n\t        proto.mediapipe.MediaPipeOptions.extensionsBinary,\n\t        proto.mediapipe.MediaPipeOptions.prototype.getExtension,\n\t        proto.mediapipe.MediaPipeOptions.prototype.setExtension);\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.MediaPipeOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.MediaPipeOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.MediaPipeOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.MediaPipeOptions.serializeBinaryToWriter = function(message, writer) {\n\t  jspb.Message.serializeBinaryExtensions(message, writer,\n\t    proto.mediapipe.MediaPipeOptions.extensionsBinary, proto.mediapipe.MediaPipeOptions.prototype.getExtension);\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (mediapipe_options_pb));\n\nvar packet_factory_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/framework/packet_factory.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.PacketFactoryConfig', null, global);\n\tgoog.exportSymbol('proto.mediapipe.PacketFactoryOptions', null, global);\n\tgoog.exportSymbol('proto.mediapipe.PacketManagerConfig', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.PacketFactoryOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.PacketFactoryOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.PacketFactoryOptions.displayName = 'proto.mediapipe.PacketFactoryOptions';\n\t}\n\n\t/**\n\t * The extensions registered with this message class. This is a map of\n\t * extension field number to fieldInfo object.\n\t *\n\t * For example:\n\t *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n\t *\n\t * fieldName contains the JsCompiler renamed field name property so that it\n\t * works in OPTIMIZED mode.\n\t *\n\t * @type {!Object<number, jspb.ExtensionFieldInfo>}\n\t */\n\tproto.mediapipe.PacketFactoryOptions.extensions = {};\n\n\n\t/**\n\t * The extensions registered with this message class. This is a map of\n\t * extension field number to fieldInfo object.\n\t *\n\t * For example:\n\t *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n\t *\n\t * fieldName contains the JsCompiler renamed field name property so that it\n\t * works in OPTIMIZED mode.\n\t *\n\t * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}\n\t */\n\tproto.mediapipe.PacketFactoryOptions.extensionsBinary = {};\n\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.PacketFactoryConfig = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 500, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.PacketFactoryConfig, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.PacketFactoryConfig.displayName = 'proto.mediapipe.PacketFactoryConfig';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.PacketManagerConfig = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.PacketManagerConfig.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.PacketManagerConfig, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.PacketManagerConfig.displayName = 'proto.mediapipe.PacketManagerConfig';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.PacketFactoryOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.PacketFactoryOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.PacketFactoryOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketFactoryOptions.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\n\t  };\n\n\t  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,\n\t      proto.mediapipe.PacketFactoryOptions.extensions, proto.mediapipe.PacketFactoryOptions.prototype.getExtension,\n\t      includeInstance);\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.PacketFactoryOptions}\n\t */\n\tproto.mediapipe.PacketFactoryOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.PacketFactoryOptions;\n\t  return proto.mediapipe.PacketFactoryOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.PacketFactoryOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.PacketFactoryOptions}\n\t */\n\tproto.mediapipe.PacketFactoryOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    default:\n\t      jspb.Message.readBinaryExtension(msg, reader,\n\t        proto.mediapipe.PacketFactoryOptions.extensionsBinary,\n\t        proto.mediapipe.PacketFactoryOptions.prototype.getExtension,\n\t        proto.mediapipe.PacketFactoryOptions.prototype.setExtension);\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.PacketFactoryOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.PacketFactoryOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.PacketFactoryOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketFactoryOptions.serializeBinaryToWriter = function(message, writer) {\n\t  jspb.Message.serializeBinaryExtensions(message, writer,\n\t    proto.mediapipe.PacketFactoryOptions.extensionsBinary, proto.mediapipe.PacketFactoryOptions.prototype.getExtension);\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.PacketFactoryConfig.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.PacketFactoryConfig} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketFactoryConfig.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    packetFactory: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    outputSidePacket: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    externalOutput: (f = jspb.Message.getField(msg, 1002)) == null ? undefined : f,\n\t    options: (f = msg.getOptions()) && proto.mediapipe.PacketFactoryOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.PacketFactoryConfig}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.PacketFactoryConfig;\n\t  return proto.mediapipe.PacketFactoryConfig.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.PacketFactoryConfig} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.PacketFactoryConfig}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setPacketFactory(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setOutputSidePacket(value);\n\t      break;\n\t    case 1002:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setExternalOutput(value);\n\t      break;\n\t    case 3:\n\t      var value = new proto.mediapipe.PacketFactoryOptions;\n\t      reader.readMessage(value,proto.mediapipe.PacketFactoryOptions.deserializeBinaryFromReader);\n\t      msg.setOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.PacketFactoryConfig.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.PacketFactoryConfig} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketFactoryConfig.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 1002));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      1002,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      proto.mediapipe.PacketFactoryOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string packet_factory = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.getPacketFactory = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.PacketFactoryConfig} returns this\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.setPacketFactory = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.PacketFactoryConfig} returns this\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.clearPacketFactory = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.hasPacketFactory = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional string output_side_packet = 2;\n\t * @return {string}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.getOutputSidePacket = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.PacketFactoryConfig} returns this\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.setOutputSidePacket = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.PacketFactoryConfig} returns this\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.clearOutputSidePacket = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.hasOutputSidePacket = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional string external_output = 1002;\n\t * @return {string}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.getExternalOutput = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1002, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.PacketFactoryConfig} returns this\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.setExternalOutput = function(value) {\n\t  return jspb.Message.setField(this, 1002, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.PacketFactoryConfig} returns this\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.clearExternalOutput = function() {\n\t  return jspb.Message.setField(this, 1002, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.hasExternalOutput = function() {\n\t  return jspb.Message.getField(this, 1002) != null;\n\t};\n\n\n\t/**\n\t * optional PacketFactoryOptions options = 3;\n\t * @return {?proto.mediapipe.PacketFactoryOptions}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.getOptions = function() {\n\t  return /** @type{?proto.mediapipe.PacketFactoryOptions} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.PacketFactoryOptions, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.PacketFactoryOptions|undefined} value\n\t * @return {!proto.mediapipe.PacketFactoryConfig} returns this\n\t*/\n\tproto.mediapipe.PacketFactoryConfig.prototype.setOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.PacketFactoryConfig} returns this\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.clearOptions = function() {\n\t  return this.setOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.PacketFactoryConfig.prototype.hasOptions = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.PacketManagerConfig.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.PacketManagerConfig.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.PacketManagerConfig.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.PacketManagerConfig} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketManagerConfig.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    packetList: jspb.Message.toObjectList(msg.getPacketList(),\n\t    proto.mediapipe.PacketFactoryConfig.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.PacketManagerConfig}\n\t */\n\tproto.mediapipe.PacketManagerConfig.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.PacketManagerConfig;\n\t  return proto.mediapipe.PacketManagerConfig.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.PacketManagerConfig} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.PacketManagerConfig}\n\t */\n\tproto.mediapipe.PacketManagerConfig.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.PacketFactoryConfig;\n\t      reader.readMessage(value,proto.mediapipe.PacketFactoryConfig.deserializeBinaryFromReader);\n\t      msg.addPacket(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.PacketManagerConfig.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.PacketManagerConfig.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.PacketManagerConfig} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketManagerConfig.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getPacketList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.PacketFactoryConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated PacketFactoryConfig packet = 1;\n\t * @return {!Array<!proto.mediapipe.PacketFactoryConfig>}\n\t */\n\tproto.mediapipe.PacketManagerConfig.prototype.getPacketList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.PacketFactoryConfig>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.PacketFactoryConfig, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.PacketFactoryConfig>} value\n\t * @return {!proto.mediapipe.PacketManagerConfig} returns this\n\t*/\n\tproto.mediapipe.PacketManagerConfig.prototype.setPacketList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.PacketFactoryConfig=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.PacketFactoryConfig}\n\t */\n\tproto.mediapipe.PacketManagerConfig.prototype.addPacket = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.PacketFactoryConfig, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.PacketManagerConfig} returns this\n\t */\n\tproto.mediapipe.PacketManagerConfig.prototype.clearPacketList = function() {\n\t  return this.setPacketList([]);\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (packet_factory_pb));\n\nvar packet_generator_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/framework/packet_generator.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.PacketGeneratorConfig', null, global);\n\tgoog.exportSymbol('proto.mediapipe.PacketGeneratorOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.PacketGeneratorOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 2, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.PacketGeneratorOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.PacketGeneratorOptions.displayName = 'proto.mediapipe.PacketGeneratorOptions';\n\t}\n\n\t/**\n\t * The extensions registered with this message class. This is a map of\n\t * extension field number to fieldInfo object.\n\t *\n\t * For example:\n\t *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n\t *\n\t * fieldName contains the JsCompiler renamed field name property so that it\n\t * works in OPTIMIZED mode.\n\t *\n\t * @type {!Object<number, jspb.ExtensionFieldInfo>}\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.extensions = {};\n\n\n\t/**\n\t * The extensions registered with this message class. This is a map of\n\t * extension field number to fieldInfo object.\n\t *\n\t * For example:\n\t *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n\t *\n\t * fieldName contains the JsCompiler renamed field name property so that it\n\t * works in OPTIMIZED mode.\n\t *\n\t * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.extensionsBinary = {};\n\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.PacketGeneratorConfig = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 500, proto.mediapipe.PacketGeneratorConfig.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.PacketGeneratorConfig, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.PacketGeneratorConfig.displayName = 'proto.mediapipe.PacketGeneratorConfig';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.PacketGeneratorOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.PacketGeneratorOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    mergeFields: jspb.Message.getBooleanFieldWithDefault(msg, 1, true)\n\t  };\n\n\t  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,\n\t      proto.mediapipe.PacketGeneratorOptions.extensions, proto.mediapipe.PacketGeneratorOptions.prototype.getExtension,\n\t      includeInstance);\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.PacketGeneratorOptions}\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.PacketGeneratorOptions;\n\t  return proto.mediapipe.PacketGeneratorOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.PacketGeneratorOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.PacketGeneratorOptions}\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setMergeFields(value);\n\t      break;\n\t    default:\n\t      jspb.Message.readBinaryExtension(msg, reader,\n\t        proto.mediapipe.PacketGeneratorOptions.extensionsBinary,\n\t        proto.mediapipe.PacketGeneratorOptions.prototype.getExtension,\n\t        proto.mediapipe.PacketGeneratorOptions.prototype.setExtension);\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.PacketGeneratorOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.PacketGeneratorOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeBool(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  jspb.Message.serializeBinaryExtensions(message, writer,\n\t    proto.mediapipe.PacketGeneratorOptions.extensionsBinary, proto.mediapipe.PacketGeneratorOptions.prototype.getExtension);\n\t};\n\n\n\t/**\n\t * optional bool merge_fields = 1;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.prototype.getMergeFields = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, true));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.PacketGeneratorOptions} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.prototype.setMergeFields = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.PacketGeneratorOptions} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.prototype.clearMergeFields = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.PacketGeneratorOptions.prototype.hasMergeFields = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.repeatedFields_ = [2,1002,3,1003];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.PacketGeneratorConfig.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.PacketGeneratorConfig} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    packetGenerator: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    inputSidePacketList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n\t    externalInputList: (f = jspb.Message.getRepeatedField(msg, 1002)) == null ? undefined : f,\n\t    outputSidePacketList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,\n\t    externalOutputList: (f = jspb.Message.getRepeatedField(msg, 1003)) == null ? undefined : f,\n\t    options: (f = msg.getOptions()) && proto.mediapipe.PacketGeneratorOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.PacketGeneratorConfig}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.PacketGeneratorConfig;\n\t  return proto.mediapipe.PacketGeneratorConfig.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.PacketGeneratorConfig} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.PacketGeneratorConfig}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setPacketGenerator(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addInputSidePacket(value);\n\t      break;\n\t    case 1002:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addExternalInput(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addOutputSidePacket(value);\n\t      break;\n\t    case 1003:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addExternalOutput(value);\n\t      break;\n\t    case 4:\n\t      var value = new proto.mediapipe.PacketGeneratorOptions;\n\t      reader.readMessage(value,proto.mediapipe.PacketGeneratorOptions.deserializeBinaryFromReader);\n\t      msg.setOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.PacketGeneratorConfig.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.PacketGeneratorConfig} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getInputSidePacketList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getExternalInputList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      1002,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOutputSidePacketList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = message.getExternalOutputList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      1003,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      4,\n\t      f,\n\t      proto.mediapipe.PacketGeneratorOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string packet_generator = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.getPacketGenerator = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.setPacketGenerator = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.clearPacketGenerator = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.hasPacketGenerator = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * repeated string input_side_packet = 2;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.getInputSidePacketList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.setInputSidePacketList = function(value) {\n\t  return jspb.Message.setField(this, 2, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.addInputSidePacket = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.clearInputSidePacketList = function() {\n\t  return this.setInputSidePacketList([]);\n\t};\n\n\n\t/**\n\t * repeated string external_input = 1002;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.getExternalInputList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1002));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.setExternalInputList = function(value) {\n\t  return jspb.Message.setField(this, 1002, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.addExternalInput = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 1002, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.clearExternalInputList = function() {\n\t  return this.setExternalInputList([]);\n\t};\n\n\n\t/**\n\t * repeated string output_side_packet = 3;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.getOutputSidePacketList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.setOutputSidePacketList = function(value) {\n\t  return jspb.Message.setField(this, 3, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.addOutputSidePacket = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.clearOutputSidePacketList = function() {\n\t  return this.setOutputSidePacketList([]);\n\t};\n\n\n\t/**\n\t * repeated string external_output = 1003;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.getExternalOutputList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1003));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.setExternalOutputList = function(value) {\n\t  return jspb.Message.setField(this, 1003, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.addExternalOutput = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 1003, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.clearExternalOutputList = function() {\n\t  return this.setExternalOutputList([]);\n\t};\n\n\n\t/**\n\t * optional PacketGeneratorOptions options = 4;\n\t * @return {?proto.mediapipe.PacketGeneratorOptions}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.getOptions = function() {\n\t  return /** @type{?proto.mediapipe.PacketGeneratorOptions} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.PacketGeneratorOptions, 4));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.PacketGeneratorOptions|undefined} value\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t*/\n\tproto.mediapipe.PacketGeneratorConfig.prototype.setOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.PacketGeneratorConfig} returns this\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.clearOptions = function() {\n\t  return this.setOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.PacketGeneratorConfig.prototype.hasOptions = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (packet_generator_pb));\n\nvar status_handler_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/framework/status_handler.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_mediapipe_options_pb = mediapipe_options_pb;\n\tgoog.object.extend(proto, mediapipe_framework_mediapipe_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.StatusHandlerConfig', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.StatusHandlerConfig = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 500, proto.mediapipe.StatusHandlerConfig.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.StatusHandlerConfig, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.StatusHandlerConfig.displayName = 'proto.mediapipe.StatusHandlerConfig';\n\t}\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.StatusHandlerConfig.repeatedFields_ = [2,1002];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.StatusHandlerConfig.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.StatusHandlerConfig} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.StatusHandlerConfig.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    statusHandler: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    inputSidePacketList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n\t    externalInputList: (f = jspb.Message.getRepeatedField(msg, 1002)) == null ? undefined : f,\n\t    options: (f = msg.getOptions()) && mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.StatusHandlerConfig}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.StatusHandlerConfig;\n\t  return proto.mediapipe.StatusHandlerConfig.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.StatusHandlerConfig} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.StatusHandlerConfig}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setStatusHandler(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addInputSidePacket(value);\n\t      break;\n\t    case 1002:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addExternalInput(value);\n\t      break;\n\t    case 3:\n\t      var value = new mediapipe_framework_mediapipe_options_pb.MediaPipeOptions;\n\t      reader.readMessage(value,mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.deserializeBinaryFromReader);\n\t      msg.setOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.StatusHandlerConfig.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.StatusHandlerConfig} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.StatusHandlerConfig.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getInputSidePacketList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getExternalInputList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      1002,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string status_handler = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.getStatusHandler = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.setStatusHandler = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.clearStatusHandler = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.hasStatusHandler = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * repeated string input_side_packet = 2;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.getInputSidePacketList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.setInputSidePacketList = function(value) {\n\t  return jspb.Message.setField(this, 2, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.addInputSidePacket = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.clearInputSidePacketList = function() {\n\t  return this.setInputSidePacketList([]);\n\t};\n\n\n\t/**\n\t * repeated string external_input = 1002;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.getExternalInputList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1002));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.setExternalInputList = function(value) {\n\t  return jspb.Message.setField(this, 1002, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.addExternalInput = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 1002, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.clearExternalInputList = function() {\n\t  return this.setExternalInputList([]);\n\t};\n\n\n\t/**\n\t * optional MediaPipeOptions options = 3;\n\t * @return {?proto.mediapipe.MediaPipeOptions}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.getOptions = function() {\n\t  return /** @type{?proto.mediapipe.MediaPipeOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_mediapipe_options_pb.MediaPipeOptions, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.MediaPipeOptions|undefined} value\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t*/\n\tproto.mediapipe.StatusHandlerConfig.prototype.setOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.StatusHandlerConfig} returns this\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.clearOptions = function() {\n\t  return this.setOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.StatusHandlerConfig.prototype.hasOptions = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (status_handler_pb));\n\nvar stream_handler_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/framework/stream_handler.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_mediapipe_options_pb = mediapipe_options_pb;\n\tgoog.object.extend(proto, mediapipe_framework_mediapipe_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.InputStreamHandlerConfig', null, global);\n\tgoog.exportSymbol('proto.mediapipe.OutputStreamHandlerConfig', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.InputStreamHandlerConfig, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InputStreamHandlerConfig.displayName = 'proto.mediapipe.InputStreamHandlerConfig';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.OutputStreamHandlerConfig.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.OutputStreamHandlerConfig, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.OutputStreamHandlerConfig.displayName = 'proto.mediapipe.OutputStreamHandlerConfig';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InputStreamHandlerConfig.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InputStreamHandlerConfig} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    inputStreamHandler: jspb.Message.getFieldWithDefault(msg, 1, \"DefaultInputStreamHandler\"),\n\t    options: (f = msg.getOptions()) && mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InputStreamHandlerConfig}\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InputStreamHandlerConfig;\n\t  return proto.mediapipe.InputStreamHandlerConfig.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InputStreamHandlerConfig} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InputStreamHandlerConfig}\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setInputStreamHandler(value);\n\t      break;\n\t    case 3:\n\t      var value = new mediapipe_framework_mediapipe_options_pb.MediaPipeOptions;\n\t      reader.readMessage(value,mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.deserializeBinaryFromReader);\n\t      msg.setOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InputStreamHandlerConfig.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InputStreamHandlerConfig} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string input_stream_handler = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.getInputStreamHandler = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"DefaultInputStreamHandler\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InputStreamHandlerConfig} returns this\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.setInputStreamHandler = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InputStreamHandlerConfig} returns this\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.clearInputStreamHandler = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.hasInputStreamHandler = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional MediaPipeOptions options = 3;\n\t * @return {?proto.mediapipe.MediaPipeOptions}\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.getOptions = function() {\n\t  return /** @type{?proto.mediapipe.MediaPipeOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_mediapipe_options_pb.MediaPipeOptions, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.MediaPipeOptions|undefined} value\n\t * @return {!proto.mediapipe.InputStreamHandlerConfig} returns this\n\t*/\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.setOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.InputStreamHandlerConfig} returns this\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.clearOptions = function() {\n\t  return this.setOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InputStreamHandlerConfig.prototype.hasOptions = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.repeatedFields_ = [2];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.OutputStreamHandlerConfig.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.OutputStreamHandlerConfig} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    outputStreamHandler: jspb.Message.getFieldWithDefault(msg, 1, \"InOrderOutputStreamHandler\"),\n\t    inputSidePacketList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n\t    options: (f = msg.getOptions()) && mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.OutputStreamHandlerConfig}\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.OutputStreamHandlerConfig;\n\t  return proto.mediapipe.OutputStreamHandlerConfig.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.OutputStreamHandlerConfig} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.OutputStreamHandlerConfig}\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setOutputStreamHandler(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addInputSidePacket(value);\n\t      break;\n\t    case 3:\n\t      var value = new mediapipe_framework_mediapipe_options_pb.MediaPipeOptions;\n\t      reader.readMessage(value,mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.deserializeBinaryFromReader);\n\t      msg.setOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.OutputStreamHandlerConfig.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.OutputStreamHandlerConfig} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getInputSidePacketList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string output_stream_handler = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.getOutputStreamHandler = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"InOrderOutputStreamHandler\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.OutputStreamHandlerConfig} returns this\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.setOutputStreamHandler = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.OutputStreamHandlerConfig} returns this\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.clearOutputStreamHandler = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.hasOutputStreamHandler = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * repeated string input_side_packet = 2;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.getInputSidePacketList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.OutputStreamHandlerConfig} returns this\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.setInputSidePacketList = function(value) {\n\t  return jspb.Message.setField(this, 2, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.OutputStreamHandlerConfig} returns this\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.addInputSidePacket = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.OutputStreamHandlerConfig} returns this\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.clearInputSidePacketList = function() {\n\t  return this.setInputSidePacketList([]);\n\t};\n\n\n\t/**\n\t * optional MediaPipeOptions options = 3;\n\t * @return {?proto.mediapipe.MediaPipeOptions}\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.getOptions = function() {\n\t  return /** @type{?proto.mediapipe.MediaPipeOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_mediapipe_options_pb.MediaPipeOptions, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.MediaPipeOptions|undefined} value\n\t * @return {!proto.mediapipe.OutputStreamHandlerConfig} returns this\n\t*/\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.setOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.OutputStreamHandlerConfig} returns this\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.clearOptions = function() {\n\t  return this.setOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.OutputStreamHandlerConfig.prototype.hasOptions = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (stream_handler_pb));\n\n(function (exports) {\n\t// source: mediapipe/framework/calculator.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_options_pb = calculator_options_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_options_pb);\n\tvar google_protobuf_any_pb = require$$2;\n\tgoog.object.extend(proto, google_protobuf_any_pb);\n\tvar mediapipe_framework_mediapipe_options_pb = mediapipe_options_pb;\n\tgoog.object.extend(proto, mediapipe_framework_mediapipe_options_pb);\n\tvar mediapipe_framework_packet_factory_pb = packet_factory_pb;\n\tgoog.object.extend(proto, mediapipe_framework_packet_factory_pb);\n\tvar mediapipe_framework_packet_generator_pb = packet_generator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_packet_generator_pb);\n\tvar mediapipe_framework_status_handler_pb = status_handler_pb;\n\tgoog.object.extend(proto, mediapipe_framework_status_handler_pb);\n\tvar mediapipe_framework_stream_handler_pb = stream_handler_pb;\n\tgoog.object.extend(proto, mediapipe_framework_stream_handler_pb);\n\tgoog.exportSymbol('proto.mediapipe.CalculatorGraphConfig', null, global);\n\tgoog.exportSymbol('proto.mediapipe.CalculatorGraphConfig.Node', null, global);\n\tgoog.exportSymbol('proto.mediapipe.ExecutorConfig', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InputCollection', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InputCollection.InputType', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InputCollectionSet', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InputStreamInfo', null, global);\n\tgoog.exportSymbol('proto.mediapipe.ProfilerConfig', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.ExecutorConfig = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.ExecutorConfig, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.ExecutorConfig.displayName = 'proto.mediapipe.ExecutorConfig';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InputCollection = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 500, proto.mediapipe.InputCollection.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.InputCollection, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InputCollection.displayName = 'proto.mediapipe.InputCollection';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InputCollectionSet = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.InputCollectionSet.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.InputCollectionSet, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InputCollectionSet.displayName = 'proto.mediapipe.InputCollectionSet';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InputStreamInfo = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.InputStreamInfo, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InputStreamInfo.displayName = 'proto.mediapipe.InputStreamInfo';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.ProfilerConfig = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.ProfilerConfig.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.ProfilerConfig, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.ProfilerConfig.displayName = 'proto.mediapipe.ProfilerConfig';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.CalculatorGraphConfig = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 500, proto.mediapipe.CalculatorGraphConfig.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.CalculatorGraphConfig, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.CalculatorGraphConfig.displayName = 'proto.mediapipe.CalculatorGraphConfig';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, 500, proto.mediapipe.CalculatorGraphConfig.Node.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.CalculatorGraphConfig.Node, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.CalculatorGraphConfig.Node.displayName = 'proto.mediapipe.CalculatorGraphConfig.Node';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.ExecutorConfig.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.ExecutorConfig.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.ExecutorConfig} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.ExecutorConfig.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n\t    type: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n\t    options: (f = msg.getOptions()) && mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.ExecutorConfig}\n\t */\n\tproto.mediapipe.ExecutorConfig.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.ExecutorConfig;\n\t  return proto.mediapipe.ExecutorConfig.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.ExecutorConfig} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.ExecutorConfig}\n\t */\n\tproto.mediapipe.ExecutorConfig.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setName(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setType(value);\n\t      break;\n\t    case 3:\n\t      var value = new mediapipe_framework_mediapipe_options_pb.MediaPipeOptions;\n\t      reader.readMessage(value,mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.deserializeBinaryFromReader);\n\t      msg.setOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.ExecutorConfig.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.ExecutorConfig.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.ExecutorConfig} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.ExecutorConfig.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getName();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getType();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string name = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.ExecutorConfig.prototype.getName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.ExecutorConfig} returns this\n\t */\n\tproto.mediapipe.ExecutorConfig.prototype.setName = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 1, value);\n\t};\n\n\n\t/**\n\t * optional string type = 2;\n\t * @return {string}\n\t */\n\tproto.mediapipe.ExecutorConfig.prototype.getType = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.ExecutorConfig} returns this\n\t */\n\tproto.mediapipe.ExecutorConfig.prototype.setType = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 2, value);\n\t};\n\n\n\t/**\n\t * optional MediaPipeOptions options = 3;\n\t * @return {?proto.mediapipe.MediaPipeOptions}\n\t */\n\tproto.mediapipe.ExecutorConfig.prototype.getOptions = function() {\n\t  return /** @type{?proto.mediapipe.MediaPipeOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_mediapipe_options_pb.MediaPipeOptions, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.MediaPipeOptions|undefined} value\n\t * @return {!proto.mediapipe.ExecutorConfig} returns this\n\t*/\n\tproto.mediapipe.ExecutorConfig.prototype.setOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.ExecutorConfig} returns this\n\t */\n\tproto.mediapipe.ExecutorConfig.prototype.clearOptions = function() {\n\t  return this.setOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.ExecutorConfig.prototype.hasOptions = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.InputCollection.repeatedFields_ = [2,1002];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InputCollection.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InputCollection.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InputCollection} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InputCollection.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n\t    sidePacketNameList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n\t    externalInputNameList: (f = jspb.Message.getRepeatedField(msg, 1002)) == null ? undefined : f,\n\t    inputType: jspb.Message.getFieldWithDefault(msg, 3, 0),\n\t    fileName: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InputCollection}\n\t */\n\tproto.mediapipe.InputCollection.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InputCollection;\n\t  return proto.mediapipe.InputCollection.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InputCollection} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InputCollection}\n\t */\n\tproto.mediapipe.InputCollection.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setName(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addSidePacketName(value);\n\t      break;\n\t    case 1002:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addExternalInputName(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {!proto.mediapipe.InputCollection.InputType} */ (reader.readEnum());\n\t      msg.setInputType(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setFileName(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InputCollection.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InputCollection.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InputCollection} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InputCollection.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getName();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getSidePacketNameList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getExternalInputNameList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      1002,\n\t      f\n\t    );\n\t  }\n\t  f = message.getInputType();\n\t  if (f !== 0.0) {\n\t    writer.writeEnum(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = message.getFileName();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * @enum {number}\n\t */\n\tproto.mediapipe.InputCollection.InputType = {\n\t  UNKNOWN: 0,\n\t  RECORDIO: 1,\n\t  FOREIGN_RECORDIO: 2,\n\t  FOREIGN_CSV_TEXT: 3,\n\t  INVALID_UPPER_BOUND: 4\n\t};\n\n\t/**\n\t * optional string name = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InputCollection.prototype.getName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InputCollection} returns this\n\t */\n\tproto.mediapipe.InputCollection.prototype.setName = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 1, value);\n\t};\n\n\n\t/**\n\t * repeated string side_packet_name = 2;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.InputCollection.prototype.getSidePacketNameList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.InputCollection} returns this\n\t */\n\tproto.mediapipe.InputCollection.prototype.setSidePacketNameList = function(value) {\n\t  return jspb.Message.setField(this, 2, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.InputCollection} returns this\n\t */\n\tproto.mediapipe.InputCollection.prototype.addSidePacketName = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.InputCollection} returns this\n\t */\n\tproto.mediapipe.InputCollection.prototype.clearSidePacketNameList = function() {\n\t  return this.setSidePacketNameList([]);\n\t};\n\n\n\t/**\n\t * repeated string external_input_name = 1002;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.InputCollection.prototype.getExternalInputNameList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1002));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.InputCollection} returns this\n\t */\n\tproto.mediapipe.InputCollection.prototype.setExternalInputNameList = function(value) {\n\t  return jspb.Message.setField(this, 1002, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.InputCollection} returns this\n\t */\n\tproto.mediapipe.InputCollection.prototype.addExternalInputName = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 1002, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.InputCollection} returns this\n\t */\n\tproto.mediapipe.InputCollection.prototype.clearExternalInputNameList = function() {\n\t  return this.setExternalInputNameList([]);\n\t};\n\n\n\t/**\n\t * optional InputType input_type = 3;\n\t * @return {!proto.mediapipe.InputCollection.InputType}\n\t */\n\tproto.mediapipe.InputCollection.prototype.getInputType = function() {\n\t  return /** @type {!proto.mediapipe.InputCollection.InputType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.InputCollection.InputType} value\n\t * @return {!proto.mediapipe.InputCollection} returns this\n\t */\n\tproto.mediapipe.InputCollection.prototype.setInputType = function(value) {\n\t  return jspb.Message.setProto3EnumField(this, 3, value);\n\t};\n\n\n\t/**\n\t * optional string file_name = 4;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InputCollection.prototype.getFileName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InputCollection} returns this\n\t */\n\tproto.mediapipe.InputCollection.prototype.setFileName = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 4, value);\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.InputCollectionSet.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InputCollectionSet.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InputCollectionSet.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InputCollectionSet} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InputCollectionSet.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    inputCollectionList: jspb.Message.toObjectList(msg.getInputCollectionList(),\n\t    proto.mediapipe.InputCollection.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InputCollectionSet}\n\t */\n\tproto.mediapipe.InputCollectionSet.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InputCollectionSet;\n\t  return proto.mediapipe.InputCollectionSet.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InputCollectionSet} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InputCollectionSet}\n\t */\n\tproto.mediapipe.InputCollectionSet.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.InputCollection;\n\t      reader.readMessage(value,proto.mediapipe.InputCollection.deserializeBinaryFromReader);\n\t      msg.addInputCollection(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InputCollectionSet.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InputCollectionSet.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InputCollectionSet} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InputCollectionSet.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getInputCollectionList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.InputCollection.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated InputCollection input_collection = 1;\n\t * @return {!Array<!proto.mediapipe.InputCollection>}\n\t */\n\tproto.mediapipe.InputCollectionSet.prototype.getInputCollectionList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.InputCollection>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.InputCollection, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.InputCollection>} value\n\t * @return {!proto.mediapipe.InputCollectionSet} returns this\n\t*/\n\tproto.mediapipe.InputCollectionSet.prototype.setInputCollectionList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.InputCollection=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.InputCollection}\n\t */\n\tproto.mediapipe.InputCollectionSet.prototype.addInputCollection = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.InputCollection, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.InputCollectionSet} returns this\n\t */\n\tproto.mediapipe.InputCollectionSet.prototype.clearInputCollectionList = function() {\n\t  return this.setInputCollectionList([]);\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InputStreamInfo.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InputStreamInfo.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InputStreamInfo} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InputStreamInfo.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    tagIndex: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n\t    backEdge: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InputStreamInfo}\n\t */\n\tproto.mediapipe.InputStreamInfo.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InputStreamInfo;\n\t  return proto.mediapipe.InputStreamInfo.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InputStreamInfo} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InputStreamInfo}\n\t */\n\tproto.mediapipe.InputStreamInfo.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setTagIndex(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setBackEdge(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InputStreamInfo.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InputStreamInfo.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InputStreamInfo} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InputStreamInfo.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getTagIndex();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getBackEdge();\n\t  if (f) {\n\t    writer.writeBool(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string tag_index = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InputStreamInfo.prototype.getTagIndex = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InputStreamInfo} returns this\n\t */\n\tproto.mediapipe.InputStreamInfo.prototype.setTagIndex = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 1, value);\n\t};\n\n\n\t/**\n\t * optional bool back_edge = 2;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InputStreamInfo.prototype.getBackEdge = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.InputStreamInfo} returns this\n\t */\n\tproto.mediapipe.InputStreamInfo.prototype.setBackEdge = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 2, value);\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.ProfilerConfig.repeatedFields_ = [8];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.ProfilerConfig.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.ProfilerConfig} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.ProfilerConfig.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    histogramIntervalSizeUsec: jspb.Message.getFieldWithDefault(msg, 1, 0),\n\t    numHistogramIntervals: jspb.Message.getFieldWithDefault(msg, 2, 0),\n\t    enableInputOutputLatency: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),\n\t    enableProfiler: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),\n\t    enableStreamLatency: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),\n\t    usePacketTimestampForAddedPacket: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),\n\t    traceLogCapacity: jspb.Message.getFieldWithDefault(msg, 7, 0),\n\t    traceEventTypesDisabledList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,\n\t    traceLogPath: jspb.Message.getFieldWithDefault(msg, 9, \"\"),\n\t    traceLogCount: jspb.Message.getFieldWithDefault(msg, 10, 0),\n\t    traceLogIntervalUsec: jspb.Message.getFieldWithDefault(msg, 11, 0),\n\t    traceLogMarginUsec: jspb.Message.getFieldWithDefault(msg, 12, 0),\n\t    traceLogDurationEvents: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),\n\t    traceLogIntervalCount: jspb.Message.getFieldWithDefault(msg, 14, 0),\n\t    traceLogDisabled: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),\n\t    traceEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),\n\t    traceLogInstantEvents: jspb.Message.getBooleanFieldWithDefault(msg, 17, false),\n\t    calculatorFilter: jspb.Message.getFieldWithDefault(msg, 18, \"\")\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.ProfilerConfig}\n\t */\n\tproto.mediapipe.ProfilerConfig.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.ProfilerConfig;\n\t  return proto.mediapipe.ProfilerConfig.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.ProfilerConfig} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.ProfilerConfig}\n\t */\n\tproto.mediapipe.ProfilerConfig.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setHistogramIntervalSizeUsec(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setNumHistogramIntervals(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setEnableInputOutputLatency(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setEnableProfiler(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setEnableStreamLatency(value);\n\t      break;\n\t    case 6:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setUsePacketTimestampForAddedPacket(value);\n\t      break;\n\t    case 7:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setTraceLogCapacity(value);\n\t      break;\n\t    case 8:\n\t      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);\n\t      for (var i = 0; i < values.length; i++) {\n\t        msg.addTraceEventTypesDisabled(values[i]);\n\t      }\n\t      break;\n\t    case 9:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setTraceLogPath(value);\n\t      break;\n\t    case 10:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setTraceLogCount(value);\n\t      break;\n\t    case 11:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setTraceLogIntervalUsec(value);\n\t      break;\n\t    case 12:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setTraceLogMarginUsec(value);\n\t      break;\n\t    case 13:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setTraceLogDurationEvents(value);\n\t      break;\n\t    case 14:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setTraceLogIntervalCount(value);\n\t      break;\n\t    case 15:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setTraceLogDisabled(value);\n\t      break;\n\t    case 16:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setTraceEnabled(value);\n\t      break;\n\t    case 17:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setTraceLogInstantEvents(value);\n\t      break;\n\t    case 18:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setCalculatorFilter(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.ProfilerConfig.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.ProfilerConfig} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.ProfilerConfig.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getHistogramIntervalSizeUsec();\n\t  if (f !== 0) {\n\t    writer.writeInt64(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getNumHistogramIntervals();\n\t  if (f !== 0) {\n\t    writer.writeInt64(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getEnableInputOutputLatency();\n\t  if (f) {\n\t    writer.writeBool(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = message.getEnableProfiler();\n\t  if (f) {\n\t    writer.writeBool(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = message.getEnableStreamLatency();\n\t  if (f) {\n\t    writer.writeBool(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t  f = message.getUsePacketTimestampForAddedPacket();\n\t  if (f) {\n\t    writer.writeBool(\n\t      6,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceLogCapacity();\n\t  if (f !== 0) {\n\t    writer.writeInt64(\n\t      7,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceEventTypesDisabledList();\n\t  if (f.length > 0) {\n\t    writer.writePackedInt32(\n\t      8,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceLogPath();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      9,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceLogCount();\n\t  if (f !== 0) {\n\t    writer.writeInt32(\n\t      10,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceLogIntervalUsec();\n\t  if (f !== 0) {\n\t    writer.writeInt64(\n\t      11,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceLogMarginUsec();\n\t  if (f !== 0) {\n\t    writer.writeInt64(\n\t      12,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceLogDurationEvents();\n\t  if (f) {\n\t    writer.writeBool(\n\t      13,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceLogIntervalCount();\n\t  if (f !== 0) {\n\t    writer.writeInt32(\n\t      14,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceLogDisabled();\n\t  if (f) {\n\t    writer.writeBool(\n\t      15,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceEnabled();\n\t  if (f) {\n\t    writer.writeBool(\n\t      16,\n\t      f\n\t    );\n\t  }\n\t  f = message.getTraceLogInstantEvents();\n\t  if (f) {\n\t    writer.writeBool(\n\t      17,\n\t      f\n\t    );\n\t  }\n\t  f = message.getCalculatorFilter();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      18,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional int64 histogram_interval_size_usec = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getHistogramIntervalSizeUsec = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setHistogramIntervalSizeUsec = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 1, value);\n\t};\n\n\n\t/**\n\t * optional int64 num_histogram_intervals = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getNumHistogramIntervals = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setNumHistogramIntervals = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 2, value);\n\t};\n\n\n\t/**\n\t * optional bool enable_input_output_latency = 3;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getEnableInputOutputLatency = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setEnableInputOutputLatency = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 3, value);\n\t};\n\n\n\t/**\n\t * optional bool enable_profiler = 4;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getEnableProfiler = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setEnableProfiler = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 4, value);\n\t};\n\n\n\t/**\n\t * optional bool enable_stream_latency = 5;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getEnableStreamLatency = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setEnableStreamLatency = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 5, value);\n\t};\n\n\n\t/**\n\t * optional bool use_packet_timestamp_for_added_packet = 6;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getUsePacketTimestampForAddedPacket = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setUsePacketTimestampForAddedPacket = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 6, value);\n\t};\n\n\n\t/**\n\t * optional int64 trace_log_capacity = 7;\n\t * @return {number}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceLogCapacity = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceLogCapacity = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 7, value);\n\t};\n\n\n\t/**\n\t * repeated int32 trace_event_types_disabled = 8;\n\t * @return {!Array<number>}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceEventTypesDisabledList = function() {\n\t  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 8));\n\t};\n\n\n\t/**\n\t * @param {!Array<number>} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceEventTypesDisabledList = function(value) {\n\t  return jspb.Message.setField(this, 8, value || []);\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.addTraceEventTypesDisabled = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.clearTraceEventTypesDisabledList = function() {\n\t  return this.setTraceEventTypesDisabledList([]);\n\t};\n\n\n\t/**\n\t * optional string trace_log_path = 9;\n\t * @return {string}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceLogPath = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceLogPath = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 9, value);\n\t};\n\n\n\t/**\n\t * optional int32 trace_log_count = 10;\n\t * @return {number}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceLogCount = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceLogCount = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 10, value);\n\t};\n\n\n\t/**\n\t * optional int64 trace_log_interval_usec = 11;\n\t * @return {number}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceLogIntervalUsec = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceLogIntervalUsec = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 11, value);\n\t};\n\n\n\t/**\n\t * optional int64 trace_log_margin_usec = 12;\n\t * @return {number}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceLogMarginUsec = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceLogMarginUsec = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 12, value);\n\t};\n\n\n\t/**\n\t * optional bool trace_log_duration_events = 13;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceLogDurationEvents = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceLogDurationEvents = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 13, value);\n\t};\n\n\n\t/**\n\t * optional int32 trace_log_interval_count = 14;\n\t * @return {number}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceLogIntervalCount = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceLogIntervalCount = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 14, value);\n\t};\n\n\n\t/**\n\t * optional bool trace_log_disabled = 15;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceLogDisabled = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceLogDisabled = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 15, value);\n\t};\n\n\n\t/**\n\t * optional bool trace_enabled = 16;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceEnabled = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceEnabled = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 16, value);\n\t};\n\n\n\t/**\n\t * optional bool trace_log_instant_events = 17;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getTraceLogInstantEvents = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setTraceLogInstantEvents = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 17, value);\n\t};\n\n\n\t/**\n\t * optional string calculator_filter = 18;\n\t * @return {string}\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.getCalculatorFilter = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.ProfilerConfig} returns this\n\t */\n\tproto.mediapipe.ProfilerConfig.prototype.setCalculatorFilter = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 18, value);\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.repeatedFields_ = [1,6,7,9,10,15,16,17,14,1002];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.CalculatorGraphConfig.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.CalculatorGraphConfig} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    nodeList: jspb.Message.toObjectList(msg.getNodeList(),\n\t    proto.mediapipe.CalculatorGraphConfig.Node.toObject, includeInstance),\n\t    packetFactoryList: jspb.Message.toObjectList(msg.getPacketFactoryList(),\n\t    mediapipe_framework_packet_factory_pb.PacketFactoryConfig.toObject, includeInstance),\n\t    packetGeneratorList: jspb.Message.toObjectList(msg.getPacketGeneratorList(),\n\t    mediapipe_framework_packet_generator_pb.PacketGeneratorConfig.toObject, includeInstance),\n\t    numThreads: jspb.Message.getFieldWithDefault(msg, 8, 0),\n\t    statusHandlerList: jspb.Message.toObjectList(msg.getStatusHandlerList(),\n\t    mediapipe_framework_status_handler_pb.StatusHandlerConfig.toObject, includeInstance),\n\t    inputStreamList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,\n\t    outputStreamList: (f = jspb.Message.getRepeatedField(msg, 15)) == null ? undefined : f,\n\t    inputSidePacketList: (f = jspb.Message.getRepeatedField(msg, 16)) == null ? undefined : f,\n\t    outputSidePacketList: (f = jspb.Message.getRepeatedField(msg, 17)) == null ? undefined : f,\n\t    maxQueueSize: jspb.Message.getFieldWithDefault(msg, 11, 0),\n\t    reportDeadlock: jspb.Message.getBooleanFieldWithDefault(msg, 21, false),\n\t    inputStreamHandler: (f = msg.getInputStreamHandler()) && mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig.toObject(includeInstance, f),\n\t    outputStreamHandler: (f = msg.getOutputStreamHandler()) && mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig.toObject(includeInstance, f),\n\t    executorList: jspb.Message.toObjectList(msg.getExecutorList(),\n\t    proto.mediapipe.ExecutorConfig.toObject, includeInstance),\n\t    profilerConfig: (f = msg.getProfilerConfig()) && proto.mediapipe.ProfilerConfig.toObject(includeInstance, f),\n\t    pb_package: jspb.Message.getFieldWithDefault(msg, 19, \"\"),\n\t    type: jspb.Message.getFieldWithDefault(msg, 20, \"\"),\n\t    options: (f = msg.getOptions()) && mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.toObject(includeInstance, f),\n\t    graphOptionsList: jspb.Message.toObjectList(msg.getGraphOptionsList(),\n\t    google_protobuf_any_pb.Any.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.CalculatorGraphConfig;\n\t  return proto.mediapipe.CalculatorGraphConfig.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.CalculatorGraphConfig} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.CalculatorGraphConfig.Node;\n\t      reader.readMessage(value,proto.mediapipe.CalculatorGraphConfig.Node.deserializeBinaryFromReader);\n\t      msg.addNode(value);\n\t      break;\n\t    case 6:\n\t      var value = new mediapipe_framework_packet_factory_pb.PacketFactoryConfig;\n\t      reader.readMessage(value,mediapipe_framework_packet_factory_pb.PacketFactoryConfig.deserializeBinaryFromReader);\n\t      msg.addPacketFactory(value);\n\t      break;\n\t    case 7:\n\t      var value = new mediapipe_framework_packet_generator_pb.PacketGeneratorConfig;\n\t      reader.readMessage(value,mediapipe_framework_packet_generator_pb.PacketGeneratorConfig.deserializeBinaryFromReader);\n\t      msg.addPacketGenerator(value);\n\t      break;\n\t    case 8:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setNumThreads(value);\n\t      break;\n\t    case 9:\n\t      var value = new mediapipe_framework_status_handler_pb.StatusHandlerConfig;\n\t      reader.readMessage(value,mediapipe_framework_status_handler_pb.StatusHandlerConfig.deserializeBinaryFromReader);\n\t      msg.addStatusHandler(value);\n\t      break;\n\t    case 10:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addInputStream(value);\n\t      break;\n\t    case 15:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addOutputStream(value);\n\t      break;\n\t    case 16:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addInputSidePacket(value);\n\t      break;\n\t    case 17:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addOutputSidePacket(value);\n\t      break;\n\t    case 11:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setMaxQueueSize(value);\n\t      break;\n\t    case 21:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setReportDeadlock(value);\n\t      break;\n\t    case 12:\n\t      var value = new mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig;\n\t      reader.readMessage(value,mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig.deserializeBinaryFromReader);\n\t      msg.setInputStreamHandler(value);\n\t      break;\n\t    case 13:\n\t      var value = new mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig;\n\t      reader.readMessage(value,mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig.deserializeBinaryFromReader);\n\t      msg.setOutputStreamHandler(value);\n\t      break;\n\t    case 14:\n\t      var value = new proto.mediapipe.ExecutorConfig;\n\t      reader.readMessage(value,proto.mediapipe.ExecutorConfig.deserializeBinaryFromReader);\n\t      msg.addExecutor(value);\n\t      break;\n\t    case 18:\n\t      var value = new proto.mediapipe.ProfilerConfig;\n\t      reader.readMessage(value,proto.mediapipe.ProfilerConfig.deserializeBinaryFromReader);\n\t      msg.setProfilerConfig(value);\n\t      break;\n\t    case 19:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setPackage(value);\n\t      break;\n\t    case 20:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setType(value);\n\t      break;\n\t    case 1001:\n\t      var value = new mediapipe_framework_mediapipe_options_pb.MediaPipeOptions;\n\t      reader.readMessage(value,mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.deserializeBinaryFromReader);\n\t      msg.setOptions(value);\n\t      break;\n\t    case 1002:\n\t      var value = new google_protobuf_any_pb.Any;\n\t      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);\n\t      msg.addGraphOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.CalculatorGraphConfig.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.CalculatorGraphConfig} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getNodeList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.CalculatorGraphConfig.Node.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getPacketFactoryList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      6,\n\t      f,\n\t      mediapipe_framework_packet_factory_pb.PacketFactoryConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getPacketGeneratorList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      7,\n\t      f,\n\t      mediapipe_framework_packet_generator_pb.PacketGeneratorConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getNumThreads();\n\t  if (f !== 0) {\n\t    writer.writeInt32(\n\t      8,\n\t      f\n\t    );\n\t  }\n\t  f = message.getStatusHandlerList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      9,\n\t      f,\n\t      mediapipe_framework_status_handler_pb.StatusHandlerConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getInputStreamList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      10,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOutputStreamList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      15,\n\t      f\n\t    );\n\t  }\n\t  f = message.getInputSidePacketList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      16,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOutputSidePacketList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      17,\n\t      f\n\t    );\n\t  }\n\t  f = message.getMaxQueueSize();\n\t  if (f !== 0) {\n\t    writer.writeInt32(\n\t      11,\n\t      f\n\t    );\n\t  }\n\t  f = message.getReportDeadlock();\n\t  if (f) {\n\t    writer.writeBool(\n\t      21,\n\t      f\n\t    );\n\t  }\n\t  f = message.getInputStreamHandler();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      12,\n\t      f,\n\t      mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getOutputStreamHandler();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      13,\n\t      f,\n\t      mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getExecutorList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      14,\n\t      f,\n\t      proto.mediapipe.ExecutorConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getProfilerConfig();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      18,\n\t      f,\n\t      proto.mediapipe.ProfilerConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getPackage();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      19,\n\t      f\n\t    );\n\t  }\n\t  f = message.getType();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      20,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1001,\n\t      f,\n\t      mediapipe_framework_mediapipe_options_pb.MediaPipeOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getGraphOptionsList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1002,\n\t      f,\n\t      google_protobuf_any_pb.Any.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.repeatedFields_ = [3,4,5,6,8,13,17,1005];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.CalculatorGraphConfig.Node.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.CalculatorGraphConfig.Node} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n\t    calculator: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n\t    inputStreamList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,\n\t    outputStreamList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,\n\t    inputSidePacketList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,\n\t    outputSidePacketList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,\n\t    options: (f = msg.getOptions()) && mediapipe_framework_calculator_options_pb.CalculatorOptions.toObject(includeInstance, f),\n\t    nodeOptionsList: jspb.Message.toObjectList(msg.getNodeOptionsList(),\n\t    google_protobuf_any_pb.Any.toObject, includeInstance),\n\t    sourceLayer: jspb.Message.getFieldWithDefault(msg, 9, 0),\n\t    bufferSizeHint: jspb.Message.getFieldWithDefault(msg, 10, 0),\n\t    inputStreamHandler: (f = msg.getInputStreamHandler()) && mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig.toObject(includeInstance, f),\n\t    outputStreamHandler: (f = msg.getOutputStreamHandler()) && mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig.toObject(includeInstance, f),\n\t    inputStreamInfoList: jspb.Message.toObjectList(msg.getInputStreamInfoList(),\n\t    proto.mediapipe.InputStreamInfo.toObject, includeInstance),\n\t    executor: jspb.Message.getFieldWithDefault(msg, 14, \"\"),\n\t    profilerConfig: (f = msg.getProfilerConfig()) && proto.mediapipe.ProfilerConfig.toObject(includeInstance, f),\n\t    maxInFlight: jspb.Message.getFieldWithDefault(msg, 16, 0),\n\t    optionValueList: (f = jspb.Message.getRepeatedField(msg, 17)) == null ? undefined : f,\n\t    externalInputList: (f = jspb.Message.getRepeatedField(msg, 1005)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.CalculatorGraphConfig.Node;\n\t  return proto.mediapipe.CalculatorGraphConfig.Node.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.CalculatorGraphConfig.Node} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setName(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setCalculator(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addInputStream(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addOutputStream(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addInputSidePacket(value);\n\t      break;\n\t    case 6:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addOutputSidePacket(value);\n\t      break;\n\t    case 7:\n\t      var value = new mediapipe_framework_calculator_options_pb.CalculatorOptions;\n\t      reader.readMessage(value,mediapipe_framework_calculator_options_pb.CalculatorOptions.deserializeBinaryFromReader);\n\t      msg.setOptions(value);\n\t      break;\n\t    case 8:\n\t      var value = new google_protobuf_any_pb.Any;\n\t      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);\n\t      msg.addNodeOptions(value);\n\t      break;\n\t    case 9:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setSourceLayer(value);\n\t      break;\n\t    case 10:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setBufferSizeHint(value);\n\t      break;\n\t    case 11:\n\t      var value = new mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig;\n\t      reader.readMessage(value,mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig.deserializeBinaryFromReader);\n\t      msg.setInputStreamHandler(value);\n\t      break;\n\t    case 12:\n\t      var value = new mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig;\n\t      reader.readMessage(value,mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig.deserializeBinaryFromReader);\n\t      msg.setOutputStreamHandler(value);\n\t      break;\n\t    case 13:\n\t      var value = new proto.mediapipe.InputStreamInfo;\n\t      reader.readMessage(value,proto.mediapipe.InputStreamInfo.deserializeBinaryFromReader);\n\t      msg.addInputStreamInfo(value);\n\t      break;\n\t    case 14:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setExecutor(value);\n\t      break;\n\t    case 15:\n\t      var value = new proto.mediapipe.ProfilerConfig;\n\t      reader.readMessage(value,proto.mediapipe.ProfilerConfig.deserializeBinaryFromReader);\n\t      msg.setProfilerConfig(value);\n\t      break;\n\t    case 16:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setMaxInFlight(value);\n\t      break;\n\t    case 17:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addOptionValue(value);\n\t      break;\n\t    case 1005:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addExternalInput(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.CalculatorGraphConfig.Node.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.CalculatorGraphConfig.Node} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getName();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getCalculator();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getInputStreamList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOutputStreamList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = message.getInputSidePacketList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOutputSidePacketList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      6,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      7,\n\t      f,\n\t      mediapipe_framework_calculator_options_pb.CalculatorOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getNodeOptionsList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      8,\n\t      f,\n\t      google_protobuf_any_pb.Any.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getSourceLayer();\n\t  if (f !== 0) {\n\t    writer.writeInt32(\n\t      9,\n\t      f\n\t    );\n\t  }\n\t  f = message.getBufferSizeHint();\n\t  if (f !== 0) {\n\t    writer.writeInt32(\n\t      10,\n\t      f\n\t    );\n\t  }\n\t  f = message.getInputStreamHandler();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      11,\n\t      f,\n\t      mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getOutputStreamHandler();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      12,\n\t      f,\n\t      mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getInputStreamInfoList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      13,\n\t      f,\n\t      proto.mediapipe.InputStreamInfo.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getExecutor();\n\t  if (f.length > 0) {\n\t    writer.writeString(\n\t      14,\n\t      f\n\t    );\n\t  }\n\t  f = message.getProfilerConfig();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      15,\n\t      f,\n\t      proto.mediapipe.ProfilerConfig.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getMaxInFlight();\n\t  if (f !== 0) {\n\t    writer.writeInt32(\n\t      16,\n\t      f\n\t    );\n\t  }\n\t  f = message.getOptionValueList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      17,\n\t      f\n\t    );\n\t  }\n\t  f = message.getExternalInputList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      1005,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string name = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setName = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 1, value);\n\t};\n\n\n\t/**\n\t * optional string calculator = 2;\n\t * @return {string}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getCalculator = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setCalculator = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 2, value);\n\t};\n\n\n\t/**\n\t * repeated string input_stream = 3;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getInputStreamList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setInputStreamList = function(value) {\n\t  return jspb.Message.setField(this, 3, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.addInputStream = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearInputStreamList = function() {\n\t  return this.setInputStreamList([]);\n\t};\n\n\n\t/**\n\t * repeated string output_stream = 4;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getOutputStreamList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setOutputStreamList = function(value) {\n\t  return jspb.Message.setField(this, 4, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.addOutputStream = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearOutputStreamList = function() {\n\t  return this.setOutputStreamList([]);\n\t};\n\n\n\t/**\n\t * repeated string input_side_packet = 5;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getInputSidePacketList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setInputSidePacketList = function(value) {\n\t  return jspb.Message.setField(this, 5, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.addInputSidePacket = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearInputSidePacketList = function() {\n\t  return this.setInputSidePacketList([]);\n\t};\n\n\n\t/**\n\t * repeated string output_side_packet = 6;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getOutputSidePacketList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setOutputSidePacketList = function(value) {\n\t  return jspb.Message.setField(this, 6, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.addOutputSidePacket = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearOutputSidePacketList = function() {\n\t  return this.setOutputSidePacketList([]);\n\t};\n\n\n\t/**\n\t * optional CalculatorOptions options = 7;\n\t * @return {?proto.mediapipe.CalculatorOptions}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getOptions = function() {\n\t  return /** @type{?proto.mediapipe.CalculatorOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_calculator_options_pb.CalculatorOptions, 7));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.CalculatorOptions|undefined} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 7, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearOptions = function() {\n\t  return this.setOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.hasOptions = function() {\n\t  return jspb.Message.getField(this, 7) != null;\n\t};\n\n\n\t/**\n\t * repeated google.protobuf.Any node_options = 8;\n\t * @return {!Array<!proto.google.protobuf.Any>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getNodeOptionsList = function() {\n\t  return /** @type{!Array<!proto.google.protobuf.Any>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, google_protobuf_any_pb.Any, 8));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.google.protobuf.Any>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setNodeOptionsList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 8, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.google.protobuf.Any=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.google.protobuf.Any}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.addNodeOptions = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.google.protobuf.Any, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearNodeOptionsList = function() {\n\t  return this.setNodeOptionsList([]);\n\t};\n\n\n\t/**\n\t * optional int32 source_layer = 9;\n\t * @return {number}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getSourceLayer = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setSourceLayer = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 9, value);\n\t};\n\n\n\t/**\n\t * optional int32 buffer_size_hint = 10;\n\t * @return {number}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getBufferSizeHint = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setBufferSizeHint = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 10, value);\n\t};\n\n\n\t/**\n\t * optional InputStreamHandlerConfig input_stream_handler = 11;\n\t * @return {?proto.mediapipe.InputStreamHandlerConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getInputStreamHandler = function() {\n\t  return /** @type{?proto.mediapipe.InputStreamHandlerConfig} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig, 11));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InputStreamHandlerConfig|undefined} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setInputStreamHandler = function(value) {\n\t  return jspb.Message.setWrapperField(this, 11, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearInputStreamHandler = function() {\n\t  return this.setInputStreamHandler(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.hasInputStreamHandler = function() {\n\t  return jspb.Message.getField(this, 11) != null;\n\t};\n\n\n\t/**\n\t * optional OutputStreamHandlerConfig output_stream_handler = 12;\n\t * @return {?proto.mediapipe.OutputStreamHandlerConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getOutputStreamHandler = function() {\n\t  return /** @type{?proto.mediapipe.OutputStreamHandlerConfig} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig, 12));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.OutputStreamHandlerConfig|undefined} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setOutputStreamHandler = function(value) {\n\t  return jspb.Message.setWrapperField(this, 12, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearOutputStreamHandler = function() {\n\t  return this.setOutputStreamHandler(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.hasOutputStreamHandler = function() {\n\t  return jspb.Message.getField(this, 12) != null;\n\t};\n\n\n\t/**\n\t * repeated InputStreamInfo input_stream_info = 13;\n\t * @return {!Array<!proto.mediapipe.InputStreamInfo>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getInputStreamInfoList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.InputStreamInfo>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.InputStreamInfo, 13));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.InputStreamInfo>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setInputStreamInfoList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 13, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.InputStreamInfo=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.InputStreamInfo}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.addInputStreamInfo = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.mediapipe.InputStreamInfo, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearInputStreamInfoList = function() {\n\t  return this.setInputStreamInfoList([]);\n\t};\n\n\n\t/**\n\t * optional string executor = 14;\n\t * @return {string}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getExecutor = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setExecutor = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 14, value);\n\t};\n\n\n\t/**\n\t * optional ProfilerConfig profiler_config = 15;\n\t * @return {?proto.mediapipe.ProfilerConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getProfilerConfig = function() {\n\t  return /** @type{?proto.mediapipe.ProfilerConfig} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.ProfilerConfig, 15));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.ProfilerConfig|undefined} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setProfilerConfig = function(value) {\n\t  return jspb.Message.setWrapperField(this, 15, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearProfilerConfig = function() {\n\t  return this.setProfilerConfig(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.hasProfilerConfig = function() {\n\t  return jspb.Message.getField(this, 15) != null;\n\t};\n\n\n\t/**\n\t * optional int32 max_in_flight = 16;\n\t * @return {number}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getMaxInFlight = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setMaxInFlight = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 16, value);\n\t};\n\n\n\t/**\n\t * repeated string option_value = 17;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getOptionValueList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 17));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setOptionValueList = function(value) {\n\t  return jspb.Message.setField(this, 17, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.addOptionValue = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 17, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearOptionValueList = function() {\n\t  return this.setOptionValueList([]);\n\t};\n\n\n\t/**\n\t * repeated string external_input = 1005;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.getExternalInputList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1005));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.setExternalInputList = function(value) {\n\t  return jspb.Message.setField(this, 1005, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.addExternalInput = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 1005, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.Node.prototype.clearExternalInputList = function() {\n\t  return this.setExternalInputList([]);\n\t};\n\n\n\t/**\n\t * repeated Node node = 1;\n\t * @return {!Array<!proto.mediapipe.CalculatorGraphConfig.Node>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getNodeList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.CalculatorGraphConfig.Node>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.CalculatorGraphConfig.Node, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.CalculatorGraphConfig.Node>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setNodeList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.CalculatorGraphConfig.Node=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig.Node}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addNode = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.CalculatorGraphConfig.Node, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearNodeList = function() {\n\t  return this.setNodeList([]);\n\t};\n\n\n\t/**\n\t * repeated PacketFactoryConfig packet_factory = 6;\n\t * @return {!Array<!proto.mediapipe.PacketFactoryConfig>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getPacketFactoryList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.PacketFactoryConfig>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, mediapipe_framework_packet_factory_pb.PacketFactoryConfig, 6));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.PacketFactoryConfig>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setPacketFactoryList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 6, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.PacketFactoryConfig=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.PacketFactoryConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addPacketFactory = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.mediapipe.PacketFactoryConfig, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearPacketFactoryList = function() {\n\t  return this.setPacketFactoryList([]);\n\t};\n\n\n\t/**\n\t * repeated PacketGeneratorConfig packet_generator = 7;\n\t * @return {!Array<!proto.mediapipe.PacketGeneratorConfig>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getPacketGeneratorList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.PacketGeneratorConfig>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, mediapipe_framework_packet_generator_pb.PacketGeneratorConfig, 7));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.PacketGeneratorConfig>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setPacketGeneratorList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 7, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.PacketGeneratorConfig=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.PacketGeneratorConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addPacketGenerator = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.mediapipe.PacketGeneratorConfig, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearPacketGeneratorList = function() {\n\t  return this.setPacketGeneratorList([]);\n\t};\n\n\n\t/**\n\t * optional int32 num_threads = 8;\n\t * @return {number}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getNumThreads = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setNumThreads = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 8, value);\n\t};\n\n\n\t/**\n\t * repeated StatusHandlerConfig status_handler = 9;\n\t * @return {!Array<!proto.mediapipe.StatusHandlerConfig>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getStatusHandlerList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.StatusHandlerConfig>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, mediapipe_framework_status_handler_pb.StatusHandlerConfig, 9));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.StatusHandlerConfig>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setStatusHandlerList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 9, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.StatusHandlerConfig=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.StatusHandlerConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addStatusHandler = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.mediapipe.StatusHandlerConfig, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearStatusHandlerList = function() {\n\t  return this.setStatusHandlerList([]);\n\t};\n\n\n\t/**\n\t * repeated string input_stream = 10;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getInputStreamList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setInputStreamList = function(value) {\n\t  return jspb.Message.setField(this, 10, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addInputStream = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearInputStreamList = function() {\n\t  return this.setInputStreamList([]);\n\t};\n\n\n\t/**\n\t * repeated string output_stream = 15;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getOutputStreamList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 15));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setOutputStreamList = function(value) {\n\t  return jspb.Message.setField(this, 15, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addOutputStream = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearOutputStreamList = function() {\n\t  return this.setOutputStreamList([]);\n\t};\n\n\n\t/**\n\t * repeated string input_side_packet = 16;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getInputSidePacketList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 16));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setInputSidePacketList = function(value) {\n\t  return jspb.Message.setField(this, 16, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addInputSidePacket = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 16, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearInputSidePacketList = function() {\n\t  return this.setInputSidePacketList([]);\n\t};\n\n\n\t/**\n\t * repeated string output_side_packet = 17;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getOutputSidePacketList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 17));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setOutputSidePacketList = function(value) {\n\t  return jspb.Message.setField(this, 17, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addOutputSidePacket = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 17, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearOutputSidePacketList = function() {\n\t  return this.setOutputSidePacketList([]);\n\t};\n\n\n\t/**\n\t * optional int32 max_queue_size = 11;\n\t * @return {number}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getMaxQueueSize = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setMaxQueueSize = function(value) {\n\t  return jspb.Message.setProto3IntField(this, 11, value);\n\t};\n\n\n\t/**\n\t * optional bool report_deadlock = 21;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getReportDeadlock = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 21, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setReportDeadlock = function(value) {\n\t  return jspb.Message.setProto3BooleanField(this, 21, value);\n\t};\n\n\n\t/**\n\t * optional InputStreamHandlerConfig input_stream_handler = 12;\n\t * @return {?proto.mediapipe.InputStreamHandlerConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getInputStreamHandler = function() {\n\t  return /** @type{?proto.mediapipe.InputStreamHandlerConfig} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_stream_handler_pb.InputStreamHandlerConfig, 12));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InputStreamHandlerConfig|undefined} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setInputStreamHandler = function(value) {\n\t  return jspb.Message.setWrapperField(this, 12, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearInputStreamHandler = function() {\n\t  return this.setInputStreamHandler(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.hasInputStreamHandler = function() {\n\t  return jspb.Message.getField(this, 12) != null;\n\t};\n\n\n\t/**\n\t * optional OutputStreamHandlerConfig output_stream_handler = 13;\n\t * @return {?proto.mediapipe.OutputStreamHandlerConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getOutputStreamHandler = function() {\n\t  return /** @type{?proto.mediapipe.OutputStreamHandlerConfig} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_stream_handler_pb.OutputStreamHandlerConfig, 13));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.OutputStreamHandlerConfig|undefined} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setOutputStreamHandler = function(value) {\n\t  return jspb.Message.setWrapperField(this, 13, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearOutputStreamHandler = function() {\n\t  return this.setOutputStreamHandler(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.hasOutputStreamHandler = function() {\n\t  return jspb.Message.getField(this, 13) != null;\n\t};\n\n\n\t/**\n\t * repeated ExecutorConfig executor = 14;\n\t * @return {!Array<!proto.mediapipe.ExecutorConfig>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getExecutorList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.ExecutorConfig>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.ExecutorConfig, 14));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.ExecutorConfig>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setExecutorList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 14, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.ExecutorConfig=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.ExecutorConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addExecutor = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.mediapipe.ExecutorConfig, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearExecutorList = function() {\n\t  return this.setExecutorList([]);\n\t};\n\n\n\t/**\n\t * optional ProfilerConfig profiler_config = 18;\n\t * @return {?proto.mediapipe.ProfilerConfig}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getProfilerConfig = function() {\n\t  return /** @type{?proto.mediapipe.ProfilerConfig} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.ProfilerConfig, 18));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.ProfilerConfig|undefined} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setProfilerConfig = function(value) {\n\t  return jspb.Message.setWrapperField(this, 18, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearProfilerConfig = function() {\n\t  return this.setProfilerConfig(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.hasProfilerConfig = function() {\n\t  return jspb.Message.getField(this, 18) != null;\n\t};\n\n\n\t/**\n\t * optional string package = 19;\n\t * @return {string}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getPackage = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setPackage = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 19, value);\n\t};\n\n\n\t/**\n\t * optional string type = 20;\n\t * @return {string}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getType = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setType = function(value) {\n\t  return jspb.Message.setProto3StringField(this, 20, value);\n\t};\n\n\n\t/**\n\t * optional MediaPipeOptions options = 1001;\n\t * @return {?proto.mediapipe.MediaPipeOptions}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getOptions = function() {\n\t  return /** @type{?proto.mediapipe.MediaPipeOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_mediapipe_options_pb.MediaPipeOptions, 1001));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.MediaPipeOptions|undefined} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1001, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearOptions = function() {\n\t  return this.setOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.hasOptions = function() {\n\t  return jspb.Message.getField(this, 1001) != null;\n\t};\n\n\n\t/**\n\t * repeated google.protobuf.Any graph_options = 1002;\n\t * @return {!Array<!proto.google.protobuf.Any>}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.getGraphOptionsList = function() {\n\t  return /** @type{!Array<!proto.google.protobuf.Any>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, google_protobuf_any_pb.Any, 1002));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.google.protobuf.Any>} value\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t*/\n\tproto.mediapipe.CalculatorGraphConfig.prototype.setGraphOptionsList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1002, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.google.protobuf.Any=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.google.protobuf.Any}\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.addGraphOptions = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1002, opt_value, proto.google.protobuf.Any, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.CalculatorGraphConfig} returns this\n\t */\n\tproto.mediapipe.CalculatorGraphConfig.prototype.clearGraphOptionsList = function() {\n\t  return this.setGraphOptionsList([]);\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (calculator_pb));\n\nvar classifications_pb = {};\n\nvar classification_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/framework/formats/classification.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.Classification', null, global);\n\tgoog.exportSymbol('proto.mediapipe.ClassificationList', null, global);\n\tgoog.exportSymbol('proto.mediapipe.ClassificationListCollection', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.Classification = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.Classification, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.Classification.displayName = 'proto.mediapipe.Classification';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.ClassificationList = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.ClassificationList.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.ClassificationList, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.ClassificationList.displayName = 'proto.mediapipe.ClassificationList';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.ClassificationListCollection = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.ClassificationListCollection.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.ClassificationListCollection, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.ClassificationListCollection.displayName = 'proto.mediapipe.ClassificationListCollection';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.Classification.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.Classification.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.Classification} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Classification.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    index: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    score: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,\n\t    label: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,\n\t    displayName: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.Classification}\n\t */\n\tproto.mediapipe.Classification.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.Classification;\n\t  return proto.mediapipe.Classification.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.Classification} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.Classification}\n\t */\n\tproto.mediapipe.Classification.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setIndex(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setScore(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setLabel(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setDisplayName(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.Classification.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.Classification.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.Classification} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Classification.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional int32 index = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Classification.prototype.getIndex = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Classification} returns this\n\t */\n\tproto.mediapipe.Classification.prototype.setIndex = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Classification} returns this\n\t */\n\tproto.mediapipe.Classification.prototype.clearIndex = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Classification.prototype.hasIndex = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional float score = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Classification.prototype.getScore = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Classification} returns this\n\t */\n\tproto.mediapipe.Classification.prototype.setScore = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Classification} returns this\n\t */\n\tproto.mediapipe.Classification.prototype.clearScore = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Classification.prototype.hasScore = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional string label = 3;\n\t * @return {string}\n\t */\n\tproto.mediapipe.Classification.prototype.getLabel = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.Classification} returns this\n\t */\n\tproto.mediapipe.Classification.prototype.setLabel = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Classification} returns this\n\t */\n\tproto.mediapipe.Classification.prototype.clearLabel = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Classification.prototype.hasLabel = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional string display_name = 4;\n\t * @return {string}\n\t */\n\tproto.mediapipe.Classification.prototype.getDisplayName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.Classification} returns this\n\t */\n\tproto.mediapipe.Classification.prototype.setDisplayName = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Classification} returns this\n\t */\n\tproto.mediapipe.Classification.prototype.clearDisplayName = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Classification.prototype.hasDisplayName = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.ClassificationList.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.ClassificationList.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.ClassificationList.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.ClassificationList} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.ClassificationList.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    classificationList: jspb.Message.toObjectList(msg.getClassificationList(),\n\t    proto.mediapipe.Classification.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.ClassificationList}\n\t */\n\tproto.mediapipe.ClassificationList.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.ClassificationList;\n\t  return proto.mediapipe.ClassificationList.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.ClassificationList} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.ClassificationList}\n\t */\n\tproto.mediapipe.ClassificationList.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.Classification;\n\t      reader.readMessage(value,proto.mediapipe.Classification.deserializeBinaryFromReader);\n\t      msg.addClassification(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.ClassificationList.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.ClassificationList.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.ClassificationList} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.ClassificationList.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getClassificationList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.Classification.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated Classification classification = 1;\n\t * @return {!Array<!proto.mediapipe.Classification>}\n\t */\n\tproto.mediapipe.ClassificationList.prototype.getClassificationList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.Classification>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.Classification, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.Classification>} value\n\t * @return {!proto.mediapipe.ClassificationList} returns this\n\t*/\n\tproto.mediapipe.ClassificationList.prototype.setClassificationList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.Classification=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.Classification}\n\t */\n\tproto.mediapipe.ClassificationList.prototype.addClassification = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.Classification, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.ClassificationList} returns this\n\t */\n\tproto.mediapipe.ClassificationList.prototype.clearClassificationList = function() {\n\t  return this.setClassificationList([]);\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.ClassificationListCollection.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.ClassificationListCollection.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.ClassificationListCollection.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.ClassificationListCollection} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.ClassificationListCollection.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    classificationListList: jspb.Message.toObjectList(msg.getClassificationListList(),\n\t    proto.mediapipe.ClassificationList.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.ClassificationListCollection}\n\t */\n\tproto.mediapipe.ClassificationListCollection.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.ClassificationListCollection;\n\t  return proto.mediapipe.ClassificationListCollection.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.ClassificationListCollection} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.ClassificationListCollection}\n\t */\n\tproto.mediapipe.ClassificationListCollection.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.ClassificationList;\n\t      reader.readMessage(value,proto.mediapipe.ClassificationList.deserializeBinaryFromReader);\n\t      msg.addClassificationList(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.ClassificationListCollection.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.ClassificationListCollection.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.ClassificationListCollection} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.ClassificationListCollection.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getClassificationListList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.ClassificationList.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated ClassificationList classification_list = 1;\n\t * @return {!Array<!proto.mediapipe.ClassificationList>}\n\t */\n\tproto.mediapipe.ClassificationListCollection.prototype.getClassificationListList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.ClassificationList>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.ClassificationList, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.ClassificationList>} value\n\t * @return {!proto.mediapipe.ClassificationListCollection} returns this\n\t*/\n\tproto.mediapipe.ClassificationListCollection.prototype.setClassificationListList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.ClassificationList=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.ClassificationList}\n\t */\n\tproto.mediapipe.ClassificationListCollection.prototype.addClassificationList = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.ClassificationList, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.ClassificationListCollection} returns this\n\t */\n\tproto.mediapipe.ClassificationListCollection.prototype.clearClassificationListList = function() {\n\t  return this.setClassificationListList([]);\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (classification_pb));\n\nvar category_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/components/containers/proto/category.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.tasks.components.containers.proto.Category', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.components.containers.proto.Category, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.components.containers.proto.Category.displayName = 'proto.mediapipe.tasks.components.containers.proto.Category';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.components.containers.proto.Category.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.Category} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    index: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    score: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,\n\t    displayName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,\n\t    categoryName: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.components.containers.proto.Category;\n\t  return proto.mediapipe.tasks.components.containers.proto.Category.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.Category} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setIndex(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setScore(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setDisplayName(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setCategoryName(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.components.containers.proto.Category.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.Category} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional int32 index = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.getIndex = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.setIndex = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.clearIndex = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.hasIndex = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional float score = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.getScore = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.setScore = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.clearScore = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.hasScore = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional string display_name = 3;\n\t * @return {string}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.getDisplayName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.setDisplayName = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.clearDisplayName = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.hasDisplayName = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional string category_name = 4;\n\t * @return {string}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.getCategoryName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.setCategoryName = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.clearCategoryName = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Category.prototype.hasCategoryName = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.components.containers.proto);\n} (category_pb));\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/components/containers/proto/classifications.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_formats_classification_pb = classification_pb;\n\tgoog.object.extend(proto, mediapipe_framework_formats_classification_pb);\n\tvar mediapipe_tasks_cc_components_containers_proto_category_pb = category_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_components_containers_proto_category_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.components.containers.proto.ClassificationEntry', null, global);\n\tgoog.exportSymbol('proto.mediapipe.tasks.components.containers.proto.ClassificationResult', null, global);\n\tgoog.exportSymbol('proto.mediapipe.tasks.components.containers.proto.Classifications', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.tasks.components.containers.proto.ClassificationEntry.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.components.containers.proto.ClassificationEntry, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.components.containers.proto.ClassificationEntry.displayName = 'proto.mediapipe.tasks.components.containers.proto.ClassificationEntry';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.tasks.components.containers.proto.Classifications.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.components.containers.proto.Classifications, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.components.containers.proto.Classifications.displayName = 'proto.mediapipe.tasks.components.containers.proto.Classifications';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.tasks.components.containers.proto.ClassificationResult.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.components.containers.proto.ClassificationResult, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.components.containers.proto.ClassificationResult.displayName = 'proto.mediapipe.tasks.components.containers.proto.ClassificationResult';\n\t}\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.components.containers.proto.ClassificationEntry.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    categoriesList: jspb.Message.toObjectList(msg.getCategoriesList(),\n\t    mediapipe_tasks_cc_components_containers_proto_category_pb.Category.toObject, includeInstance),\n\t    timestampMs: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.components.containers.proto.ClassificationEntry;\n\t  return proto.mediapipe.tasks.components.containers.proto.ClassificationEntry.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_components_containers_proto_category_pb.Category;\n\t      reader.readMessage(value,mediapipe_tasks_cc_components_containers_proto_category_pb.Category.deserializeBinaryFromReader);\n\t      msg.addCategories(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setTimestampMs(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.components.containers.proto.ClassificationEntry.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getCategoriesList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_components_containers_proto_category_pb.Category.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt64(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated Category categories = 1;\n\t * @return {!Array<!proto.mediapipe.tasks.components.containers.proto.Category>}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.getCategoriesList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.tasks.components.containers.proto.Category>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, mediapipe_tasks_cc_components_containers_proto_category_pb.Category, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.tasks.components.containers.proto.Category>} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry} returns this\n\t*/\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.setCategoriesList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.Category=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Category}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.addCategories = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.tasks.components.containers.proto.Category, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.clearCategoriesList = function() {\n\t  return this.setCategoriesList([]);\n\t};\n\n\n\t/**\n\t * optional int64 timestamp_ms = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.getTimestampMs = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.setTimestampMs = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.clearTimestampMs = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationEntry.prototype.hasTimestampMs = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.components.containers.proto.Classifications.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.Classifications} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),\n\t    proto.mediapipe.tasks.components.containers.proto.ClassificationEntry.toObject, includeInstance),\n\t    classificationList: (f = msg.getClassificationList()) && mediapipe_framework_formats_classification_pb.ClassificationList.toObject(includeInstance, f),\n\t    headIndex: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    headName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.components.containers.proto.Classifications;\n\t  return proto.mediapipe.tasks.components.containers.proto.Classifications.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.Classifications} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.tasks.components.containers.proto.ClassificationEntry;\n\t      reader.readMessage(value,proto.mediapipe.tasks.components.containers.proto.ClassificationEntry.deserializeBinaryFromReader);\n\t      msg.addEntries(value);\n\t      break;\n\t    case 4:\n\t      var value = new mediapipe_framework_formats_classification_pb.ClassificationList;\n\t      reader.readMessage(value,mediapipe_framework_formats_classification_pb.ClassificationList.deserializeBinaryFromReader);\n\t      msg.setClassificationList(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setHeadIndex(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setHeadName(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.components.containers.proto.Classifications.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.Classifications} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getEntriesList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.tasks.components.containers.proto.ClassificationEntry.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getClassificationList();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      4,\n\t      f,\n\t      mediapipe_framework_formats_classification_pb.ClassificationList.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated ClassificationEntry entries = 1;\n\t * @return {!Array<!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry>}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.getEntriesList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.tasks.components.containers.proto.ClassificationEntry, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry>} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications} returns this\n\t*/\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.setEntriesList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationEntry}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.addEntries = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.tasks.components.containers.proto.ClassificationEntry, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.clearEntriesList = function() {\n\t  return this.setEntriesList([]);\n\t};\n\n\n\t/**\n\t * optional mediapipe.ClassificationList classification_list = 4;\n\t * @return {?proto.mediapipe.ClassificationList}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.getClassificationList = function() {\n\t  return /** @type{?proto.mediapipe.ClassificationList} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_formats_classification_pb.ClassificationList, 4));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.ClassificationList|undefined} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications} returns this\n\t*/\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.setClassificationList = function(value) {\n\t  return jspb.Message.setWrapperField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.clearClassificationList = function() {\n\t  return this.setClassificationList(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.hasClassificationList = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * optional int32 head_index = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.getHeadIndex = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.setHeadIndex = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.clearHeadIndex = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.hasHeadIndex = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional string head_name = 3;\n\t * @return {string}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.getHeadName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.setHeadName = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.clearHeadName = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.Classifications.prototype.hasHeadName = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.components.containers.proto.ClassificationResult.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.ClassificationResult} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    classificationsList: jspb.Message.toObjectList(msg.getClassificationsList(),\n\t    proto.mediapipe.tasks.components.containers.proto.Classifications.toObject, includeInstance),\n\t    timestampMs: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationResult}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.components.containers.proto.ClassificationResult;\n\t  return proto.mediapipe.tasks.components.containers.proto.ClassificationResult.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.ClassificationResult} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationResult}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.tasks.components.containers.proto.Classifications;\n\t      reader.readMessage(value,proto.mediapipe.tasks.components.containers.proto.Classifications.deserializeBinaryFromReader);\n\t      msg.addClassifications(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setTimestampMs(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.components.containers.proto.ClassificationResult.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.ClassificationResult} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getClassificationsList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.tasks.components.containers.proto.Classifications.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt64(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated Classifications classifications = 1;\n\t * @return {!Array<!proto.mediapipe.tasks.components.containers.proto.Classifications>}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.getClassificationsList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.tasks.components.containers.proto.Classifications>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.tasks.components.containers.proto.Classifications, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.tasks.components.containers.proto.Classifications>} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationResult} returns this\n\t*/\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.setClassificationsList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.tasks.components.containers.proto.Classifications=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.Classifications}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.addClassifications = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.tasks.components.containers.proto.Classifications, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationResult} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.clearClassificationsList = function() {\n\t  return this.setClassificationsList([]);\n\t};\n\n\n\t/**\n\t * optional int64 timestamp_ms = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.getTimestampMs = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationResult} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.setTimestampMs = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.containers.proto.ClassificationResult} returns this\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.clearTimestampMs = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.containers.proto.ClassificationResult.prototype.hasTimestampMs = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.components.containers.proto);\n} (classifications_pb));\n\nvar image_classifier_graph_options_pb = {};\n\nvar classifier_options_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/components/processors/proto/classifier_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.tasks.components.processors.proto.ClassifierOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.tasks.components.processors.proto.ClassifierOptions.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.components.processors.proto.ClassifierOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.components.processors.proto.ClassifierOptions.displayName = 'proto.mediapipe.tasks.components.processors.proto.ClassifierOptions';\n\t}\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.repeatedFields_ = [4,5];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.components.processors.proto.ClassifierOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    displayNamesLocale: jspb.Message.getFieldWithDefault(msg, 1, \"en\"),\n\t    maxResults: jspb.Message.getFieldWithDefault(msg, 2, -1),\n\t    scoreThreshold: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,\n\t    categoryAllowlistList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,\n\t    categoryDenylistList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.components.processors.proto.ClassifierOptions;\n\t  return proto.mediapipe.tasks.components.processors.proto.ClassifierOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setDisplayNamesLocale(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setMaxResults(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setScoreThreshold(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addCategoryAllowlist(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addCategoryDenylist(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.components.processors.proto.ClassifierOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = message.getCategoryAllowlistList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = message.getCategoryDenylistList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string display_names_locale = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.getDisplayNamesLocale = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"en\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.setDisplayNamesLocale = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.clearDisplayNamesLocale = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.hasDisplayNamesLocale = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional int32 max_results = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.getMaxResults = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, -1));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.setMaxResults = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.clearMaxResults = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.hasMaxResults = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional float score_threshold = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.getScoreThreshold = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.setScoreThreshold = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.clearScoreThreshold = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.hasScoreThreshold = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * repeated string category_allowlist = 4;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.getCategoryAllowlistList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.setCategoryAllowlistList = function(value) {\n\t  return jspb.Message.setField(this, 4, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.addCategoryAllowlist = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.clearCategoryAllowlistList = function() {\n\t  return this.setCategoryAllowlistList([]);\n\t};\n\n\n\t/**\n\t * repeated string category_denylist = 5;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.getCategoryDenylistList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.setCategoryDenylistList = function(value) {\n\t  return jspb.Message.setField(this, 5, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.addCategoryDenylist = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} returns this\n\t */\n\tproto.mediapipe.tasks.components.processors.proto.ClassifierOptions.prototype.clearCategoryDenylistList = function() {\n\t  return this.setCategoryDenylistList([]);\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.components.processors.proto);\n} (classifier_options_pb));\n\nvar base_options_pb = {};\n\nvar acceleration_pb = {};\n\nvar inference_calculator_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/calculators/tensor/inference_calculator.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tgoog.exportSymbol('proto.mediapipe.InferenceCalculatorOptions', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InferenceCalculatorOptions.Delegate', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InferenceCalculatorOptions.Delegate.DelegateCase', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.Api', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.InferenceUsage', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite', null, global);\n\tgoog.exportSymbol('proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.InferenceCalculatorOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InferenceCalculatorOptions.displayName = 'proto.mediapipe.InferenceCalculatorOptions';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.mediapipe.InferenceCalculatorOptions.Delegate.oneofGroups_);\n\t};\n\tgoog.inherits(proto.mediapipe.InferenceCalculatorOptions.Delegate, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.displayName = 'proto.mediapipe.InferenceCalculatorOptions.Delegate';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.displayName = 'proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.displayName = 'proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.displayName = 'proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.displayName = 'proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InferenceCalculatorOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    modelPath: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    useGpu: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),\n\t    useNnapi: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),\n\t    cpuNumThread: jspb.Message.getFieldWithDefault(msg, 4, -1),\n\t    delegate: (f = msg.getDelegate()) && proto.mediapipe.InferenceCalculatorOptions.Delegate.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InferenceCalculatorOptions;\n\t  return proto.mediapipe.InferenceCalculatorOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setModelPath(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setUseGpu(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setUseNnapi(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setCpuNumThread(value);\n\t      break;\n\t    case 5:\n\t      var value = new proto.mediapipe.InferenceCalculatorOptions.Delegate;\n\t      reader.readMessage(value,proto.mediapipe.InferenceCalculatorOptions.Delegate.deserializeBinaryFromReader);\n\t      msg.setDelegate(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InferenceCalculatorOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeBool(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeBool(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = message.getDelegate();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      5,\n\t      f,\n\t      proto.mediapipe.InferenceCalculatorOptions.Delegate.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * Oneof group definitions for this message. Each group defines the field\n\t * numbers belonging to that group. When of these fields' value is set, all\n\t * other fields in the group are cleared. During deserialization, if multiple\n\t * fields are encountered for a group, only the last value seen will be kept.\n\t * @private {!Array<!Array<number>>}\n\t * @const\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.oneofGroups_ = [[1,2,3,4]];\n\n\t/**\n\t * @enum {number}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.DelegateCase = {\n\t  DELEGATE_NOT_SET: 0,\n\t  TFLITE: 1,\n\t  GPU: 2,\n\t  NNAPI: 3,\n\t  XNNPACK: 4\n\t};\n\n\t/**\n\t * @return {proto.mediapipe.InferenceCalculatorOptions.Delegate.DelegateCase}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.getDelegateCase = function() {\n\t  return /** @type {proto.mediapipe.InferenceCalculatorOptions.Delegate.DelegateCase} */(jspb.Message.computeOneofCase(this, proto.mediapipe.InferenceCalculatorOptions.Delegate.oneofGroups_[0]));\n\t};\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    tflite: (f = msg.getTflite()) && proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.toObject(includeInstance, f),\n\t    gpu: (f = msg.getGpu()) && proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.toObject(includeInstance, f),\n\t    nnapi: (f = msg.getNnapi()) && proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.toObject(includeInstance, f),\n\t    xnnpack: (f = msg.getXnnpack()) && proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InferenceCalculatorOptions.Delegate;\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite;\n\t      reader.readMessage(value,proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.deserializeBinaryFromReader);\n\t      msg.setTflite(value);\n\t      break;\n\t    case 2:\n\t      var value = new proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu;\n\t      reader.readMessage(value,proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.deserializeBinaryFromReader);\n\t      msg.setGpu(value);\n\t      break;\n\t    case 3:\n\t      var value = new proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi;\n\t      reader.readMessage(value,proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.deserializeBinaryFromReader);\n\t      msg.setNnapi(value);\n\t      break;\n\t    case 4:\n\t      var value = new proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack;\n\t      reader.readMessage(value,proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.deserializeBinaryFromReader);\n\t      msg.setXnnpack(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getTflite();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getGpu();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      2,\n\t      f,\n\t      proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getNnapi();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getXnnpack();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      4,\n\t      f,\n\t      proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite;\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite.serializeBinaryToWriter = function(message, writer) {\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    useAdvancedGpuApi: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),\n\t    api: jspb.Message.getFieldWithDefault(msg, 4, 0),\n\t    allowPrecisionLoss: jspb.Message.getBooleanFieldWithDefault(msg, 3, true),\n\t    cachedKernelPath: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    serializedModelDir: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,\n\t    modelToken: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,\n\t    usage: jspb.Message.getFieldWithDefault(msg, 5, 2)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu;\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setUseAdvancedGpuApi(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.Api} */ (reader.readEnum());\n\t      msg.setApi(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setAllowPrecisionLoss(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setCachedKernelPath(value);\n\t      break;\n\t    case 7:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setSerializedModelDir(value);\n\t      break;\n\t    case 8:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setModelToken(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.InferenceUsage} */ (reader.readEnum());\n\t      msg.setUsage(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeBool(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.Api} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeEnum(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeBool(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 7));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      7,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 8));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      8,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.InferenceUsage} */ (jspb.Message.getField(message, 5));\n\t  if (f != null) {\n\t    writer.writeEnum(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * @enum {number}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.Api = {\n\t  ANY: 0,\n\t  OPENGL: 1,\n\t  OPENCL: 2\n\t};\n\n\t/**\n\t * @enum {number}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.InferenceUsage = {\n\t  UNSPECIFIED: 0,\n\t  FAST_SINGLE_ANSWER: 1,\n\t  SUSTAINED_SPEED: 2\n\t};\n\n\t/**\n\t * optional bool use_advanced_gpu_api = 1;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.getUseAdvancedGpuApi = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.setUseAdvancedGpuApi = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.clearUseAdvancedGpuApi = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.hasUseAdvancedGpuApi = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional Api api = 4;\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.Api}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.getApi = function() {\n\t  return /** @type {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.Api} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.Api} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.setApi = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.clearApi = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.hasApi = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * optional bool allow_precision_loss = 3;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.getAllowPrecisionLoss = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, true));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.setAllowPrecisionLoss = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.clearAllowPrecisionLoss = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.hasAllowPrecisionLoss = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional string cached_kernel_path = 2;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.getCachedKernelPath = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.setCachedKernelPath = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.clearCachedKernelPath = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.hasCachedKernelPath = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional string serialized_model_dir = 7;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.getSerializedModelDir = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.setSerializedModelDir = function(value) {\n\t  return jspb.Message.setField(this, 7, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.clearSerializedModelDir = function() {\n\t  return jspb.Message.setField(this, 7, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.hasSerializedModelDir = function() {\n\t  return jspb.Message.getField(this, 7) != null;\n\t};\n\n\n\t/**\n\t * optional string model_token = 8;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.getModelToken = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.setModelToken = function(value) {\n\t  return jspb.Message.setField(this, 8, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.clearModelToken = function() {\n\t  return jspb.Message.setField(this, 8, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.hasModelToken = function() {\n\t  return jspb.Message.getField(this, 8) != null;\n\t};\n\n\n\t/**\n\t * optional InferenceUsage usage = 5;\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.InferenceUsage}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.getUsage = function() {\n\t  return /** @type {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.InferenceUsage} */ (jspb.Message.getFieldWithDefault(this, 5, 2));\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.InferenceUsage} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.setUsage = function(value) {\n\t  return jspb.Message.setField(this, 5, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.clearUsage = function() {\n\t  return jspb.Message.setField(this, 5, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu.prototype.hasUsage = function() {\n\t  return jspb.Message.getField(this, 5) != null;\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    cacheDir: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    modelToken: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    acceleratorName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi;\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setCacheDir(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setModelToken(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setAcceleratorName(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional string cache_dir = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.getCacheDir = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.setCacheDir = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.clearCacheDir = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.hasCacheDir = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional string model_token = 2;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.getModelToken = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.setModelToken = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.clearModelToken = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.hasModelToken = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional string accelerator_name = 3;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.getAcceleratorName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.setAcceleratorName = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.clearAcceleratorName = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi.prototype.hasAcceleratorName = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    numThreads: jspb.Message.getFieldWithDefault(msg, 1, -1)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack;\n\t  return proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setNumThreads(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional int32 num_threads = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.prototype.getNumThreads = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, -1));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.prototype.setNumThreads = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.prototype.clearNumThreads = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack.prototype.hasNumThreads = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional TfLite tflite = 1;\n\t * @return {?proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.getTflite = function() {\n\t  return /** @type{?proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite|undefined} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate} returns this\n\t*/\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.setTflite = function(value) {\n\t  return jspb.Message.setOneofWrapperField(this, 1, proto.mediapipe.InferenceCalculatorOptions.Delegate.oneofGroups_[0], value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.clearTflite = function() {\n\t  return this.setTflite(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.hasTflite = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional Gpu gpu = 2;\n\t * @return {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.getGpu = function() {\n\t  return /** @type{?proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu, 2));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu|undefined} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate} returns this\n\t*/\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.setGpu = function(value) {\n\t  return jspb.Message.setOneofWrapperField(this, 2, proto.mediapipe.InferenceCalculatorOptions.Delegate.oneofGroups_[0], value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.clearGpu = function() {\n\t  return this.setGpu(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.hasGpu = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional Nnapi nnapi = 3;\n\t * @return {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.getNnapi = function() {\n\t  return /** @type{?proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Nnapi|undefined} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate} returns this\n\t*/\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.setNnapi = function(value) {\n\t  return jspb.Message.setOneofWrapperField(this, 3, proto.mediapipe.InferenceCalculatorOptions.Delegate.oneofGroups_[0], value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.clearNnapi = function() {\n\t  return this.setNnapi(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.hasNnapi = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional Xnnpack xnnpack = 4;\n\t * @return {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.getXnnpack = function() {\n\t  return /** @type{?proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack, 4));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack|undefined} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate} returns this\n\t*/\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.setXnnpack = function(value) {\n\t  return jspb.Message.setOneofWrapperField(this, 4, proto.mediapipe.InferenceCalculatorOptions.Delegate.oneofGroups_[0], value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions.Delegate} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.clearXnnpack = function() {\n\t  return this.setXnnpack(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.Delegate.prototype.hasXnnpack = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.InferenceCalculatorOptions>}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.ext = new jspb.ExtensionFieldInfo(\n\t    336783863,\n\t    {ext: 0},\n\t    proto.mediapipe.InferenceCalculatorOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.InferenceCalculatorOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[336783863] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.InferenceCalculatorOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.InferenceCalculatorOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.InferenceCalculatorOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[336783863] = proto.mediapipe.InferenceCalculatorOptions.ext;\n\n\t/**\n\t * optional string model_path = 1;\n\t * @return {string}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.getModelPath = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.setModelPath = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.clearModelPath = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.hasModelPath = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional bool use_gpu = 2;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.getUseGpu = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.setUseGpu = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.clearUseGpu = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.hasUseGpu = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional bool use_nnapi = 3;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.getUseNnapi = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.setUseNnapi = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.clearUseNnapi = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.hasUseNnapi = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional int32 cpu_num_thread = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.getCpuNumThread = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, -1));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.setCpuNumThread = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.clearCpuNumThread = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.hasCpuNumThread = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * optional Delegate delegate = 5;\n\t * @return {?proto.mediapipe.InferenceCalculatorOptions.Delegate}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.getDelegate = function() {\n\t  return /** @type{?proto.mediapipe.InferenceCalculatorOptions.Delegate} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.InferenceCalculatorOptions.Delegate, 5));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InferenceCalculatorOptions.Delegate|undefined} value\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t*/\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.setDelegate = function(value) {\n\t  return jspb.Message.setWrapperField(this, 5, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.InferenceCalculatorOptions} returns this\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.clearDelegate = function() {\n\t  return this.setDelegate(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.prototype.hasDelegate = function() {\n\t  return jspb.Message.getField(this, 5) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.InferenceCalculatorOptions>}\n\t */\n\tproto.mediapipe.InferenceCalculatorOptions.ext = new jspb.ExtensionFieldInfo(\n\t    336783863,\n\t    {ext: 0},\n\t    proto.mediapipe.InferenceCalculatorOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.InferenceCalculatorOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[336783863] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.InferenceCalculatorOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.InferenceCalculatorOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.InferenceCalculatorOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[336783863] = proto.mediapipe.InferenceCalculatorOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (inference_calculator_pb));\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/core/proto/acceleration.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_calculators_tensor_inference_calculator_pb = inference_calculator_pb;\n\tgoog.object.extend(proto, mediapipe_calculators_tensor_inference_calculator_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.core.proto.Acceleration', null, global);\n\tgoog.exportSymbol('proto.mediapipe.tasks.core.proto.Acceleration.DelegateCase', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.mediapipe.tasks.core.proto.Acceleration.oneofGroups_);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.core.proto.Acceleration, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.core.proto.Acceleration.displayName = 'proto.mediapipe.tasks.core.proto.Acceleration';\n\t}\n\n\t/**\n\t * Oneof group definitions for this message. Each group defines the field\n\t * numbers belonging to that group. When of these fields' value is set, all\n\t * other fields in the group are cleared. During deserialization, if multiple\n\t * fields are encountered for a group, only the last value seen will be kept.\n\t * @private {!Array<!Array<number>>}\n\t * @const\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.oneofGroups_ = [[1,2,4]];\n\n\t/**\n\t * @enum {number}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.DelegateCase = {\n\t  DELEGATE_NOT_SET: 0,\n\t  XNNPACK: 1,\n\t  GPU: 2,\n\t  TFLITE: 4\n\t};\n\n\t/**\n\t * @return {proto.mediapipe.tasks.core.proto.Acceleration.DelegateCase}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.getDelegateCase = function() {\n\t  return /** @type {proto.mediapipe.tasks.core.proto.Acceleration.DelegateCase} */(jspb.Message.computeOneofCase(this, proto.mediapipe.tasks.core.proto.Acceleration.oneofGroups_[0]));\n\t};\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.core.proto.Acceleration.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.core.proto.Acceleration} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    xnnpack: (f = msg.getXnnpack()) && mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Xnnpack.toObject(includeInstance, f),\n\t    gpu: (f = msg.getGpu()) && mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Gpu.toObject(includeInstance, f),\n\t    tflite: (f = msg.getTflite()) && mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.TfLite.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.core.proto.Acceleration}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.core.proto.Acceleration;\n\t  return proto.mediapipe.tasks.core.proto.Acceleration.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.core.proto.Acceleration} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.core.proto.Acceleration}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Xnnpack;\n\t      reader.readMessage(value,mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Xnnpack.deserializeBinaryFromReader);\n\t      msg.setXnnpack(value);\n\t      break;\n\t    case 2:\n\t      var value = new mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Gpu;\n\t      reader.readMessage(value,mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Gpu.deserializeBinaryFromReader);\n\t      msg.setGpu(value);\n\t      break;\n\t    case 4:\n\t      var value = new mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.TfLite;\n\t      reader.readMessage(value,mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.TfLite.deserializeBinaryFromReader);\n\t      msg.setTflite(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.core.proto.Acceleration.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.core.proto.Acceleration} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getXnnpack();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Xnnpack.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getGpu();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      2,\n\t      f,\n\t      mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Gpu.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getTflite();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      4,\n\t      f,\n\t      mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.TfLite.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack xnnpack = 1;\n\t * @return {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.getXnnpack = function() {\n\t  return /** @type{?proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Xnnpack, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Xnnpack|undefined} value\n\t * @return {!proto.mediapipe.tasks.core.proto.Acceleration} returns this\n\t*/\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.setXnnpack = function(value) {\n\t  return jspb.Message.setOneofWrapperField(this, 1, proto.mediapipe.tasks.core.proto.Acceleration.oneofGroups_[0], value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.Acceleration} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.clearXnnpack = function() {\n\t  return this.setXnnpack(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.hasXnnpack = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional mediapipe.InferenceCalculatorOptions.Delegate.Gpu gpu = 2;\n\t * @return {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.getGpu = function() {\n\t  return /** @type{?proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.Gpu, 2));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InferenceCalculatorOptions.Delegate.Gpu|undefined} value\n\t * @return {!proto.mediapipe.tasks.core.proto.Acceleration} returns this\n\t*/\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.setGpu = function(value) {\n\t  return jspb.Message.setOneofWrapperField(this, 2, proto.mediapipe.tasks.core.proto.Acceleration.oneofGroups_[0], value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.Acceleration} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.clearGpu = function() {\n\t  return this.setGpu(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.hasGpu = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional mediapipe.InferenceCalculatorOptions.Delegate.TfLite tflite = 4;\n\t * @return {?proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.getTflite = function() {\n\t  return /** @type{?proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_calculators_tensor_inference_calculator_pb.InferenceCalculatorOptions.Delegate.TfLite, 4));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.InferenceCalculatorOptions.Delegate.TfLite|undefined} value\n\t * @return {!proto.mediapipe.tasks.core.proto.Acceleration} returns this\n\t*/\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.setTflite = function(value) {\n\t  return jspb.Message.setOneofWrapperField(this, 4, proto.mediapipe.tasks.core.proto.Acceleration.oneofGroups_[0], value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.Acceleration} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.clearTflite = function() {\n\t  return this.setTflite(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.Acceleration.prototype.hasTflite = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.core.proto);\n} (acceleration_pb));\n\nvar external_file_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/core/proto/external_file.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.tasks.core.proto.ExternalFile', null, global);\n\tgoog.exportSymbol('proto.mediapipe.tasks.core.proto.FileDescriptorMeta', null, global);\n\tgoog.exportSymbol('proto.mediapipe.tasks.core.proto.FilePointerMeta', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.core.proto.ExternalFile, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.core.proto.ExternalFile.displayName = 'proto.mediapipe.tasks.core.proto.ExternalFile';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.core.proto.FileDescriptorMeta, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.core.proto.FileDescriptorMeta.displayName = 'proto.mediapipe.tasks.core.proto.FileDescriptorMeta';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.core.proto.FilePointerMeta, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.core.proto.FilePointerMeta.displayName = 'proto.mediapipe.tasks.core.proto.FilePointerMeta';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.core.proto.ExternalFile.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.core.proto.ExternalFile} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    fileContent: msg.getFileContent_asB64(),\n\t    fileName: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    fileDescriptorMeta: (f = msg.getFileDescriptorMeta()) && proto.mediapipe.tasks.core.proto.FileDescriptorMeta.toObject(includeInstance, f),\n\t    filePointerMeta: (f = msg.getFilePointerMeta()) && proto.mediapipe.tasks.core.proto.FilePointerMeta.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.core.proto.ExternalFile;\n\t  return proto.mediapipe.tasks.core.proto.ExternalFile.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.core.proto.ExternalFile} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n\t      msg.setFileContent(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setFileName(value);\n\t      break;\n\t    case 3:\n\t      var value = new proto.mediapipe.tasks.core.proto.FileDescriptorMeta;\n\t      reader.readMessage(value,proto.mediapipe.tasks.core.proto.FileDescriptorMeta.deserializeBinaryFromReader);\n\t      msg.setFileDescriptorMeta(value);\n\t      break;\n\t    case 4:\n\t      var value = new proto.mediapipe.tasks.core.proto.FilePointerMeta;\n\t      reader.readMessage(value,proto.mediapipe.tasks.core.proto.FilePointerMeta.deserializeBinaryFromReader);\n\t      msg.setFilePointerMeta(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.core.proto.ExternalFile.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.core.proto.ExternalFile} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeBytes(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getFileDescriptorMeta();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      proto.mediapipe.tasks.core.proto.FileDescriptorMeta.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getFilePointerMeta();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      4,\n\t      f,\n\t      proto.mediapipe.tasks.core.proto.FilePointerMeta.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional bytes file_content = 1;\n\t * @return {!(string|Uint8Array)}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.getFileContent = function() {\n\t  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n\t};\n\n\n\t/**\n\t * optional bytes file_content = 1;\n\t * This is a type-conversion wrapper around `getFileContent()`\n\t * @return {string}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.getFileContent_asB64 = function() {\n\t  return /** @type {string} */ (jspb.Message.bytesAsB64(\n\t      this.getFileContent()));\n\t};\n\n\n\t/**\n\t * optional bytes file_content = 1;\n\t * Note that Uint8Array is not supported on all browsers.\n\t * @see http://caniuse.com/Uint8Array\n\t * This is a type-conversion wrapper around `getFileContent()`\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.getFileContent_asU8 = function() {\n\t  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n\t      this.getFileContent()));\n\t};\n\n\n\t/**\n\t * @param {!(string|Uint8Array)} value\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.setFileContent = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.clearFileContent = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.hasFileContent = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional string file_name = 2;\n\t * @return {string}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.getFileName = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.setFileName = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.clearFileName = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.hasFileName = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional FileDescriptorMeta file_descriptor_meta = 3;\n\t * @return {?proto.mediapipe.tasks.core.proto.FileDescriptorMeta}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.getFileDescriptorMeta = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.FileDescriptorMeta} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.tasks.core.proto.FileDescriptorMeta, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.FileDescriptorMeta|undefined} value\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile} returns this\n\t*/\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.setFileDescriptorMeta = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.clearFileDescriptorMeta = function() {\n\t  return this.setFileDescriptorMeta(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.hasFileDescriptorMeta = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional FilePointerMeta file_pointer_meta = 4;\n\t * @return {?proto.mediapipe.tasks.core.proto.FilePointerMeta}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.getFilePointerMeta = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.FilePointerMeta} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.tasks.core.proto.FilePointerMeta, 4));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.FilePointerMeta|undefined} value\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile} returns this\n\t*/\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.setFilePointerMeta = function(value) {\n\t  return jspb.Message.setWrapperField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.ExternalFile} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.clearFilePointerMeta = function() {\n\t  return this.setFilePointerMeta(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.ExternalFile.prototype.hasFilePointerMeta = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.core.proto.FileDescriptorMeta.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    fd: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    length: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    offset: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.core.proto.FileDescriptorMeta;\n\t  return proto.mediapipe.tasks.core.proto.FileDescriptorMeta.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setFd(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setLength(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setOffset(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.core.proto.FileDescriptorMeta.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt64(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeInt64(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional int32 fd = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.getFd = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.setFd = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.clearFd = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.hasFd = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional int64 length = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.getLength = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.setLength = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.clearLength = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.hasLength = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional int64 offset = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.getOffset = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.setOffset = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.FileDescriptorMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.clearOffset = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.FileDescriptorMeta.prototype.hasOffset = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.core.proto.FilePointerMeta.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.core.proto.FilePointerMeta} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    pointer: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    length: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.core.proto.FilePointerMeta}\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.core.proto.FilePointerMeta;\n\t  return proto.mediapipe.tasks.core.proto.FilePointerMeta.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.core.proto.FilePointerMeta} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.core.proto.FilePointerMeta}\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readUint64());\n\t      msg.setPointer(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setLength(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.core.proto.FilePointerMeta.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.core.proto.FilePointerMeta} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeUint64(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt64(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional uint64 pointer = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.getPointer = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.core.proto.FilePointerMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.setPointer = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.FilePointerMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.clearPointer = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.hasPointer = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional int64 length = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.getLength = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.core.proto.FilePointerMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.setLength = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.FilePointerMeta} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.clearLength = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.FilePointerMeta.prototype.hasLength = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.core.proto);\n} (external_file_pb));\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/core/proto/base_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_tasks_cc_core_proto_acceleration_pb = acceleration_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_acceleration_pb);\n\tvar mediapipe_tasks_cc_core_proto_external_file_pb = external_file_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_external_file_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.core.proto.BaseOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.core.proto.BaseOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.core.proto.BaseOptions.displayName = 'proto.mediapipe.tasks.core.proto.BaseOptions';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.core.proto.BaseOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.core.proto.BaseOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    modelAsset: (f = msg.getModelAsset()) && mediapipe_tasks_cc_core_proto_external_file_pb.ExternalFile.toObject(includeInstance, f),\n\t    useStreamMode: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),\n\t    acceleration: (f = msg.getAcceleration()) && mediapipe_tasks_cc_core_proto_acceleration_pb.Acceleration.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.core.proto.BaseOptions;\n\t  return proto.mediapipe.tasks.core.proto.BaseOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.core.proto.BaseOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_external_file_pb.ExternalFile;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_external_file_pb.ExternalFile.deserializeBinaryFromReader);\n\t      msg.setModelAsset(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {boolean} */ (reader.readBool());\n\t      msg.setUseStreamMode(value);\n\t      break;\n\t    case 3:\n\t      var value = new mediapipe_tasks_cc_core_proto_acceleration_pb.Acceleration;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_acceleration_pb.Acceleration.deserializeBinaryFromReader);\n\t      msg.setAcceleration(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.core.proto.BaseOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.core.proto.BaseOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getModelAsset();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_external_file_pb.ExternalFile.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeBool(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getAcceleration();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_acceleration_pb.Acceleration.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional ExternalFile model_asset = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.ExternalFile}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.getModelAsset = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.ExternalFile} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_external_file_pb.ExternalFile, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.ExternalFile|undefined} value\n\t * @return {!proto.mediapipe.tasks.core.proto.BaseOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.setModelAsset = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.BaseOptions} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.clearModelAsset = function() {\n\t  return this.setModelAsset(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.hasModelAsset = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional bool use_stream_mode = 2;\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.getUseStreamMode = function() {\n\t  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));\n\t};\n\n\n\t/**\n\t * @param {boolean} value\n\t * @return {!proto.mediapipe.tasks.core.proto.BaseOptions} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.setUseStreamMode = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.BaseOptions} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.clearUseStreamMode = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.hasUseStreamMode = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional Acceleration acceleration = 3;\n\t * @return {?proto.mediapipe.tasks.core.proto.Acceleration}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.getAcceleration = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.Acceleration} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_acceleration_pb.Acceleration, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.Acceleration|undefined} value\n\t * @return {!proto.mediapipe.tasks.core.proto.BaseOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.setAcceleration = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.core.proto.BaseOptions} returns this\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.clearAcceleration = function() {\n\t  return this.setAcceleration(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.core.proto.BaseOptions.prototype.hasAcceleration = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.core.proto);\n} (base_options_pb));\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/vision/image_classifier/proto/image_classifier_graph_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tvar mediapipe_tasks_cc_components_processors_proto_classifier_options_pb = classifier_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_components_processors_proto_classifier_options_pb);\n\tvar mediapipe_tasks_cc_core_proto_base_options_pb = base_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_base_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.displayName = 'proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    baseOptions: (f = msg.getBaseOptions()) && mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.toObject(includeInstance, f),\n\t    classifierOptions: (f = msg.getClassifierOptions()) && mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions;\n\t  return proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.deserializeBinaryFromReader);\n\t      msg.setBaseOptions(value);\n\t      break;\n\t    case 2:\n\t      var value = new mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions.deserializeBinaryFromReader);\n\t      msg.setClassifierOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getBaseOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getClassifierOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      2,\n\t      f,\n\t      mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    456383383,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[456383383] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[456383383] = proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.ext;\n\n\t/**\n\t * optional mediapipe.tasks.core.proto.BaseOptions base_options = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.getBaseOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.BaseOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.BaseOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.setBaseOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.clearBaseOptions = function() {\n\t  return this.setBaseOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.hasBaseOptions = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional mediapipe.tasks.components.processors.proto.ClassifierOptions classifier_options = 2;\n\t * @return {?proto.mediapipe.tasks.components.processors.proto.ClassifierOptions}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.getClassifierOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions, 2));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.components.processors.proto.ClassifierOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.setClassifierOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.clearClassifierOptions = function() {\n\t  return this.setClassifierOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.prototype.hasClassifierOptions = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    456383383,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[456383383] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[456383383] = proto.mediapipe.tasks.vision.image_classifier.proto.ImageClassifierGraphOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.vision.image_classifier.proto);\n} (image_classifier_graph_options_pb));\n\nvar base_options = {};\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(base_options, \"__esModule\", { value: true });\nbase_options.convertBaseOptionsToProto = void 0;\nconst inference_calculator_pb_1 = inference_calculator_pb;\nconst acceleration_pb_1 = acceleration_pb;\nconst base_options_pb_1 = base_options_pb;\nconst external_file_pb_1 = external_file_pb;\n// The OSS JS API does not support the builder pattern.\n// tslint:disable:jspb-use-builder-pattern\n/**\n * Converts a BaseOptions API object to its Protobuf representation.\n * @throws If neither a model assset path or buffer is provided\n */\nasync function convertBaseOptionsToProto(updatedOptions, currentOptions) {\n    const result = currentOptions ? currentOptions.clone() : new base_options_pb_1.BaseOptions();\n    await configureExternalFile(updatedOptions, result);\n    configureAcceleration(updatedOptions, result);\n    return result;\n}\nbase_options.convertBaseOptionsToProto = convertBaseOptionsToProto;\n/**\n * Configues the `externalFile` option and validates that a single model is\n * provided.\n */\nasync function configureExternalFile(options, proto) {\n    const externalFile = proto.getModelAsset() || new external_file_pb_1.ExternalFile();\n    proto.setModelAsset(externalFile);\n    if (options.modelAssetPath || options.modelAssetBuffer) {\n        if (options.modelAssetPath && options.modelAssetBuffer) {\n            throw new Error('Cannot set both baseOptions.modelAssetPath and baseOptions.modelAssetBuffer');\n        }\n        let modelAssetBuffer = options.modelAssetBuffer;\n        if (!modelAssetBuffer) {\n            const response = await fetch(options.modelAssetPath.toString());\n            modelAssetBuffer = new Uint8Array(await response.arrayBuffer());\n        }\n        externalFile.setFileContent(modelAssetBuffer);\n    }\n    if (!externalFile.hasFileContent()) {\n        throw new Error('Either baseOptions.modelAssetPath or baseOptions.modelAssetBuffer must be set');\n    }\n}\n/** Configues the `acceleration` option. */\nfunction configureAcceleration(options, proto) {\n    var _a;\n    const acceleration = (_a = proto.getAcceleration()) !== null && _a !== void 0 ? _a : new acceleration_pb_1.Acceleration();\n    if (options.delegate === 'gpu') {\n        acceleration.setGpu(new inference_calculator_pb_1.InferenceCalculatorOptions.Delegate.Gpu());\n    }\n    else {\n        acceleration.setTflite(new inference_calculator_pb_1.InferenceCalculatorOptions.Delegate.TfLite());\n    }\n    proto.setAcceleration(acceleration);\n}\n\nvar classifier_options = {};\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(classifier_options, \"__esModule\", { value: true });\nclassifier_options.convertClassifierOptionsToProto = void 0;\nconst classifier_options_pb_1 = classifier_options_pb;\n/**\n * Converts a ClassifierOptions object to its Proto representation, optionally\n * based on existing definition.\n * @param options The options object to convert to a Proto. Only options that\n *     are expliclty provided are set.\n * @param baseOptions A base object that options can be merged into.\n */\nfunction convertClassifierOptionsToProto(options, baseOptions) {\n    const classifierOptions = baseOptions ? baseOptions.clone() : new classifier_options_pb_1.ClassifierOptions();\n    if (options.displayNamesLocale !== undefined) {\n        classifierOptions.setDisplayNamesLocale(options.displayNamesLocale);\n    }\n    else if (options.displayNamesLocale === undefined) {\n        classifierOptions.clearDisplayNamesLocale();\n    }\n    if (options.maxResults !== undefined) {\n        classifierOptions.setMaxResults(options.maxResults);\n    }\n    else if ('maxResults' in options) { // Check for undefined\n        classifierOptions.clearMaxResults();\n    }\n    if (options.scoreThreshold !== undefined) {\n        classifierOptions.setScoreThreshold(options.scoreThreshold);\n    }\n    else if ('scoreThreshold' in options) { // Check for undefined\n        classifierOptions.clearScoreThreshold();\n    }\n    if (options.categoryAllowlist !== undefined) {\n        classifierOptions.setCategoryAllowlistList(options.categoryAllowlist);\n    }\n    else if ('categoryAllowlist' in options) { // Check for undefined\n        classifierOptions.clearCategoryAllowlistList();\n    }\n    if (options.categoryDenylist !== undefined) {\n        classifierOptions.setCategoryDenylistList(options.categoryDenylist);\n    }\n    else if ('categoryDenylist' in options) { // Check for undefined\n        classifierOptions.clearCategoryDenylistList();\n    }\n    return classifierOptions;\n}\nclassifier_options.convertClassifierOptionsToProto = convertClassifierOptionsToProto;\n\nvar classifier_result = {};\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(classifier_result, \"__esModule\", { value: true });\nclassifier_result.convertFromClassificationResultProto = void 0;\nconst DEFAULT_INDEX = -1;\nconst DEFAULT_SCORE = 0.0;\n/**\n * Converts a Classifications proto to a Classifications object.\n */\nfunction convertFromClassificationsProto(source) {\n    var _a, _b, _c, _d;\n    const categories = (_b = (_a = source.getClassificationList()) === null || _a === void 0 ? void 0 : _a.getClassificationList().map(classification => {\n        var _a, _b, _c, _d;\n        return {\n            index: (_a = classification.getIndex()) !== null && _a !== void 0 ? _a : DEFAULT_INDEX,\n            score: (_b = classification.getScore()) !== null && _b !== void 0 ? _b : DEFAULT_SCORE,\n            categoryName: (_c = classification.getLabel()) !== null && _c !== void 0 ? _c : '',\n            displayName: (_d = classification.getDisplayName()) !== null && _d !== void 0 ? _d : '',\n        };\n    })) !== null && _b !== void 0 ? _b : [];\n    return {\n        categories,\n        headIndex: (_c = source.getHeadIndex()) !== null && _c !== void 0 ? _c : DEFAULT_INDEX,\n        headName: (_d = source.getHeadName()) !== null && _d !== void 0 ? _d : '',\n    };\n}\n/**\n * Converts a ClassificationResult proto to a ClassificationResult object.\n */\nfunction convertFromClassificationResultProto(source) {\n    const result = {\n        classifications: source.getClassificationsList().map(classififications => convertFromClassificationsProto(classififications))\n    };\n    if (source.hasTimestampMs()) {\n        result.timestampMs = source.getTimestampMs();\n    }\n    return result;\n}\nclassifier_result.convertFromClassificationResultProto = convertFromClassificationResultProto;\n\nvar task_runner = {};\n\nvar register_model_resources_graph_service = {};\n\nObject.defineProperty(register_model_resources_graph_service, \"__esModule\", { value: true });\nregister_model_resources_graph_service.SupportModelResourcesGraphService = void 0;\n/**\n * An implementation of WasmMediaPipeLib that supports registering model\n * resources to a cache, in the form of a GraphService C++-side. We implement as\n * a proper TS mixin, to allow for effective multiple inheritance. Sample usage:\n * `const WasmMediaPipeImageLib = SupportModelResourcesGraphService(\n *     WasmMediaPipeLib);`\n */\n// tslint:disable:enforce-name-casing\nfunction SupportModelResourcesGraphService(Base) {\n    return class extends Base {\n        // tslint:enable:enforce-name-casing\n        /**\n         * Instructs the graph runner to use the model resource caching graph\n         * service for both graph expansion/inintialization, as well as for graph\n         * run.\n         */\n        registerModelResourcesGraphService() {\n            this.wasmModule\n                ._registerModelResourcesGraphService();\n        }\n    };\n}\nregister_model_resources_graph_service.SupportModelResourcesGraphService = SupportModelResourcesGraphService;\n\nvar wasm_mediapipe_image_lib = {};\n\nObject.defineProperty(wasm_mediapipe_image_lib, \"__esModule\", { value: true });\nwasm_mediapipe_image_lib.SupportImage = void 0;\n/**\n * An implementation of WasmMediaPipeLib that supports binding GPU image data as\n * `mediapipe::Image` instances. We implement as a proper TS mixin, to allow for\n * effective multiple inheritance. Example usage:\n * `const WasmMediaPipeImageLib = SupportImage(WasmMediaPipeLib);`\n */\n// tslint:disable-next-line:enforce-name-casing\nfunction SupportImage(Base) {\n    return class extends Base {\n        /**\n         * Takes the relevant information from the HTML video or image element, and\n         * passes it into the WebGL-based graph for processing on the given stream\n         * at the given timestamp as a MediaPipe image. Processing will not occur\n         * until a blocking call (like processVideoGl or finishProcessing) is made.\n         * @param imageSource Reference to the video frame we wish to add into our\n         *     graph.\n         * @param streamName The name of the MediaPipe graph stream to add the frame\n         *     to.\n         * @param timestamp The timestamp of the input frame, in ms.\n         */\n        addGpuBufferAsImageToStream(imageSource, streamName, timestamp) {\n            this.wrapStringPtr(streamName, (streamNamePtr) => {\n                const [width, height] = this.bindTextureToStream(imageSource, streamNamePtr);\n                this.wasmModule\n                    ._addBoundTextureAsImageToStream(streamNamePtr, width, height, timestamp);\n            });\n        }\n    };\n}\nwasm_mediapipe_image_lib.SupportImage = SupportImage;\n\nvar wasm_mediapipe_lib = {};\n\n// Placeholder for internal dependency on assertTruthy\n// Placeholder for internal dependency on jsloader\n// Placeholder for internal dependency on trusted resource url\nObject.defineProperty(wasm_mediapipe_lib, \"__esModule\", { value: true });\nwasm_mediapipe_lib.createWasmMediaPipeLib = wasm_mediapipe_lib.createMediaPipeLib = wasm_mediapipe_lib.WasmMediaPipeLib = void 0;\n/**\n * Simple class to run an arbitrary image-in/image-out MediaPipe graph (i.e.\n * as created by wasm_mediapipe_demo BUILD macro), and either render results\n * into canvas, or else return the output WebGLTexture. Takes a WebAssembly\n * Module (must be instantiated to self.Module).\n */\nclass WasmMediaPipeLib {\n    /**\n     * Creates a new MediaPipe WASM module. Must be called *after* wasm Module has\n     * initialized. Note that we take control of the GL canvas from here on out,\n     * and will resize it to fit input.\n     *\n     * @param module The underlying Wasm Module to use.\n     * @param glCanvas The type of the GL canvas to use, or `null` if no GL\n     *    canvas should be initialzed. Initializes an offscreen canvas if not\n     *    provided.\n     */\n    constructor(module, glCanvas) {\n        this.autoResizeCanvas = true;\n        this.wasmModule = module;\n        this.audioPtr = null;\n        this.audioSize = 0;\n        this.hasMultiStreamSupport =\n            (typeof this.wasmModule._addIntToInputStream === 'function');\n        if (glCanvas !== undefined) {\n            this.wasmModule.canvas = glCanvas;\n        }\n        else {\n            // If no canvas is provided, assume Chrome/Firefox and just make an\n            // OffscreenCanvas for GPU processing.\n            this.wasmModule.canvas = new OffscreenCanvas(1, 1);\n        }\n    }\n    /**\n     * Convenience helper to load a MediaPipe graph from a file and pass it to\n     * setGraph.\n     * @param graphFile The url of the MediaPipe graph file to load.\n     */\n    async initializeGraph(graphFile) {\n        // Fetch and set graph\n        const response = await fetch(graphFile);\n        const graphData = await response.arrayBuffer();\n        const isBinary = !(graphFile.endsWith('.pbtxt') || graphFile.endsWith('.textproto'));\n        this.setGraph(new Uint8Array(graphData), isBinary);\n    }\n    /**\n     * Convenience helper for calling setGraph with a string representing a text\n     * proto config.\n     * @param graphConfig The text proto graph config, expected to be a string in\n     * default JavaScript UTF-16 format.\n     */\n    setGraphFromString(graphConfig) {\n        this.setGraph((new TextEncoder()).encode(graphConfig), false);\n    }\n    /**\n     * Takes the raw data from a MediaPipe graph, and passes it to C++ to be run\n     * over the video stream. Will replace the previously running MediaPipe graph,\n     * if there is one.\n     * @param graphData The raw MediaPipe graph data, either in binary\n     *     protobuffer format (.binarypb), or else in raw text format (.pbtxt or\n     *     .textproto).\n     * @param isBinary This should be set to true if the graph is in\n     *     binary format, and false if it is in human-readable text format.\n     */\n    setGraph(graphData, isBinary) {\n        const size = graphData.length;\n        const dataPtr = this.wasmModule._malloc(size);\n        this.wasmModule.HEAPU8.set(graphData, dataPtr);\n        if (isBinary) {\n            this.wasmModule._changeBinaryGraph(size, dataPtr);\n        }\n        else {\n            this.wasmModule._changeTextGraph(size, dataPtr);\n        }\n        this.wasmModule._free(dataPtr);\n    }\n    /**\n     * Configures the current graph to handle audio in a certain way. Must be\n     * called before the graph is set/started in order to use processAudio.\n     * @param numChannels The number of channels of audio input. Only 1\n     *     is supported for now.\n     * @param numSamples The number of samples that are taken in each\n     *     audio capture.\n     * @param sampleRate The rate, in Hz, of the sampling.\n     */\n    configureAudio(numChannels, numSamples, sampleRate) {\n        this.wasmModule._configureAudio(numChannels, numSamples, sampleRate);\n        if (this.wasmModule._attachAudioOutputListener) {\n            this.wasmModule._attachAudioOutputListener();\n        }\n    }\n    /**\n     * Allows disabling automatic canvas resizing, in case clients want to control\n     * control this.\n     * @param resize True will re-enable automatic canvas resizing, while false\n     *     will disable the feature.\n     */\n    setAutoResizeCanvas(resize) {\n        this.autoResizeCanvas = resize;\n    }\n    /**\n     * Allows disabling the automatic render-to-screen code, in case clients don't\n     * need/want this. In particular, this removes the requirement for pipelines\n     * to have access to GPU resources, as well as the requirement for graphs to\n     * have \"input_frames_gpu\" and \"output_frames_gpu\" streams defined, so pure\n     * CPU pipelines and non-video pipelines can be created.\n     * NOTE: This only affects future graph initializations (via setGraph or\n     *     initializeGraph), and does NOT affect the currently running graph, so\n     *     calls to this should be made *before* setGraph/initializeGraph for the\n     *     graph file being targeted.\n     * @param enabled True will re-enable automatic render-to-screen code and\n     *     cause GPU resources to once again be requested, while false will\n     *     disable the feature.\n     */\n    setAutoRenderToScreen(enabled) {\n        this.wasmModule._setAutoRenderToScreen(enabled);\n    }\n    /**\n     * Bind texture to our internal canvas, and upload image source to GPU.\n     * Returns tuple [width, height] of texture.  Intended for internal usage.\n     */\n    bindTextureToStream(imageSource, streamNamePtr) {\n        if (!this.wasmModule.canvas) {\n            throw new Error('No OpenGL canvas configured.');\n        }\n        if (!streamNamePtr) {\n            // TODO: Remove this path once completely refactored away.\n            console.assert(this.wasmModule._bindTextureToCanvas());\n        }\n        else {\n            this.wasmModule._bindTextureToStream(streamNamePtr);\n        }\n        const gl = this.wasmModule.canvas.getContext('webgl2') ||\n            this.wasmModule.canvas.getContext('webgl');\n        console.assert(gl);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, imageSource);\n        let width, height;\n        if (imageSource.videoWidth) {\n            width = imageSource.videoWidth;\n            height = imageSource.videoHeight;\n        }\n        else {\n            width = imageSource.width;\n            height = imageSource.height;\n        }\n        if (this.autoResizeCanvas &&\n            (width !== this.wasmModule.canvas.width ||\n                height !== this.wasmModule.canvas.height)) {\n            this.wasmModule.canvas.width = width;\n            this.wasmModule.canvas.height = height;\n        }\n        return [width, height];\n    }\n    /**\n     * Takes the raw data from a JS image source, and sends it to C++ to be\n     * processed, waiting synchronously for the response. Note that we will resize\n     * our GL canvas to fit the input, so input size should only change\n     * infrequently.\n     * @param imageSource An image source to process.\n     * @param timestamp The timestamp of the current frame, in ms.\n     * @return texture? The WebGL texture reference, if one was produced.\n     */\n    processGl(imageSource, timestamp) {\n        // Bind to default input stream\n        const [width, height] = this.bindTextureToStream(imageSource);\n        // 2 ints and a ll (timestamp)\n        const frameDataPtr = this.wasmModule._malloc(16);\n        this.wasmModule.HEAPU32[frameDataPtr / 4] = width;\n        this.wasmModule.HEAPU32[(frameDataPtr / 4) + 1] = height;\n        this.wasmModule.HEAPF64[(frameDataPtr / 8) + 1] = timestamp;\n        // outputPtr points in HEAPF32-space to running mspf calculations, which we\n        // don't use at the moment.\n        // tslint:disable-next-line:no-unused-variable\n        this.wasmModule._processGl(frameDataPtr) / 4;\n        this.wasmModule._free(frameDataPtr);\n        // TODO: Hook up WebGLTexture output, when given.\n        // TODO: Allow user to toggle whether or not to render output into canvas.\n        return undefined;\n    }\n    /**\n     * Converts JavaScript string input parameters into C++ c-string pointers.\n     * See b/204830158 for more details. Intended for internal usage.\n     */\n    wrapStringPtr(stringData, stringPtrFunc) {\n        if (!this.hasMultiStreamSupport) {\n            console.error('No wasm multistream support detected: ensure dependency ' +\n                'inclusion of :gl_graph_runner_internal_multi_input target');\n        }\n        const stringDataPtr = this.wasmModule.stringToNewUTF8(stringData);\n        stringPtrFunc(stringDataPtr);\n        this.wasmModule._free(stringDataPtr);\n    }\n    /**\n     * Converts JavaScript string input parameters into C++ c-string pointers.\n     * See b/204830158 for more details.\n     */\n    wrapStringPtrPtr(stringData, ptrFunc) {\n        if (!this.hasMultiStreamSupport) {\n            console.error('No wasm multistream support detected: ensure dependency ' +\n                'inclusion of :gl_graph_runner_internal_multi_input target');\n        }\n        const uint32Array = new Uint32Array(stringData.length);\n        for (let i = 0; i < stringData.length; i++) {\n            uint32Array[i] = this.wasmModule.stringToNewUTF8(stringData[i]);\n        }\n        const heapSpace = this.wasmModule._malloc(uint32Array.length * 4);\n        this.wasmModule.HEAPU32.set(uint32Array, heapSpace >> 2);\n        ptrFunc(heapSpace);\n        for (const uint32ptr of uint32Array) {\n            this.wasmModule._free(uint32ptr);\n        }\n        this.wasmModule._free(heapSpace);\n    }\n    /**\n     * Ensures existence of the simple listeners table and registers the callback.\n     * Intended for internal usage.\n     */\n    setListener(outputStreamName, callbackFcn) {\n        this.wasmModule.simpleListeners = this.wasmModule.simpleListeners || {};\n        this.wasmModule.simpleListeners[outputStreamName] =\n            callbackFcn;\n    }\n    /**\n     * Ensures existence of the vector listeners table and registers the callback.\n     * Intended for internal usage.\n     */\n    setVectorListener(outputStreamName, callbackFcn) {\n        const buffer = [];\n        this.wasmModule.vectorListeners = this.wasmModule.vectorListeners || {};\n        this.wasmModule.vectorListeners[outputStreamName] =\n            (data, index, length) => {\n                // The Wasm listener gets invoked once for each element. Once we\n                // receive all elements, we invoke the registered callback with the\n                // full array.\n                buffer[index] = data;\n                if (index === length - 1) {\n                    // Invoke the user callback directly, as the Wasm layer may clean up\n                    // the underlying data elements once we leave the scope of the\n                    // listener.\n                    callbackFcn(buffer);\n                }\n            };\n    }\n    /**\n     * Attaches a listener that will be invoked when the MediaPipe framework\n     * returns an error.\n     */\n    attachErrorListener(callbackFcn) {\n        this.wasmModule.errorListener = callbackFcn;\n    }\n    /**\n     * Takes the raw data from a JS audio capture array, and sends it to C++ to be\n     * processed.\n     * @param audioData An array of raw audio capture data, like\n     *     from a call to getChannelData on an AudioBuffer.\n     * @param timestamp The timestamp of the current frame, in ms.\n     */\n    addAudioToStream(audioData, timestamp) {\n        // 4 bytes for each F32\n        const size = audioData.length * 4;\n        if (this.audioSize !== size) {\n            if (this.audioPtr) {\n                this.wasmModule._free(this.audioPtr);\n            }\n            this.audioPtr = this.wasmModule._malloc(size);\n            this.audioSize = size;\n        }\n        this.wasmModule.HEAPF32.set(audioData, this.audioPtr / 4);\n        this.wasmModule._processAudio(this.audioPtr, timestamp);\n    }\n    /**\n     * Takes the relevant information from the HTML video or image element, and\n     * passes it into the WebGL-based graph for processing on the given stream at\n     * the given timestamp. Can be used for additional auxiliary GpuBuffer input\n     * streams. Processing will not occur until a blocking call (like\n     * processVideoGl or finishProcessing) is made. For use with\n     * 'gl_graph_runner_internal_multi_input'.\n     * @param imageSource Reference to the video frame we wish to add into our\n     *     graph.\n     * @param streamName The name of the MediaPipe graph stream to add the frame\n     *     to.\n     * @param timestamp The timestamp of the input frame, in ms.\n     */\n    addGpuBufferToStream(imageSource, streamName, timestamp) {\n        this.wrapStringPtr(streamName, (streamNamePtr) => {\n            const [width, height] = this.bindTextureToStream(imageSource, streamNamePtr);\n            this.wasmModule._addBoundTextureToStream(streamNamePtr, width, height, timestamp);\n        });\n    }\n    /**\n     * Sends a boolean packet into the specified stream at the given timestamp.\n     * @param data The boolean data to send.\n     * @param streamName The name of the graph input stream to send data into.\n     * @param timestamp The timestamp of the input data, in ms.\n     */\n    addBoolToStream(data, streamName, timestamp) {\n        this.wrapStringPtr(streamName, (streamNamePtr) => {\n            this.wasmModule._addBoolToInputStream(data, streamNamePtr, timestamp);\n        });\n    }\n    /**\n     * Sends a double packet into the specified stream at the given timestamp.\n     * @param data The double data to send.\n     * @param streamName The name of the graph input stream to send data into.\n     * @param timestamp The timestamp of the input data, in ms.\n     */\n    addDoubleToStream(data, streamName, timestamp) {\n        this.wrapStringPtr(streamName, (streamNamePtr) => {\n            this.wasmModule._addDoubleToInputStream(data, streamNamePtr, timestamp);\n        });\n    }\n    /**\n     * Sends a float packet into the specified stream at the given timestamp.\n     * @param data The float data to send.\n     * @param streamName The name of the graph input stream to send data into.\n     * @param timestamp The timestamp of the input data, in ms.\n     */\n    addFloatToStream(data, streamName, timestamp) {\n        this.wrapStringPtr(streamName, (streamNamePtr) => {\n            // NOTE: _addFloatToStream and _addIntToStream are reserved for JS\n            // Calculators currently; we may want to revisit this naming scheme in the\n            // future.\n            this.wasmModule._addFloatToInputStream(data, streamNamePtr, timestamp);\n        });\n    }\n    /**\n     * Sends an integer packet into the specified stream at the given timestamp.\n     * @param data The integer data to send.\n     * @param streamName The name of the graph input stream to send data into.\n     * @param timestamp The timestamp of the input data, in ms.\n     */\n    addIntToStream(data, streamName, timestamp) {\n        this.wrapStringPtr(streamName, (streamNamePtr) => {\n            this.wasmModule._addIntToInputStream(data, streamNamePtr, timestamp);\n        });\n    }\n    /**\n     * Sends a string packet into the specified stream at the given timestamp.\n     * @param data The string data to send.\n     * @param streamName The name of the graph input stream to send data into.\n     * @param timestamp The timestamp of the input data, in ms.\n     */\n    addStringToStream(data, streamName, timestamp) {\n        this.wrapStringPtr(streamName, (streamNamePtr) => {\n            this.wrapStringPtr(data, (dataPtr) => {\n                this.wasmModule._addStringToInputStream(dataPtr, streamNamePtr, timestamp);\n            });\n        });\n    }\n    /**\n     * Sends a Record<string, string> packet into the specified stream at the\n     * given timestamp.\n     * @param data The records to send (will become a\n     *             std::flat_hash_map<std::string, std::string).\n     * @param streamName The name of the graph input stream to send data into.\n     * @param timestamp The timestamp of the input data, in ms.\n     */\n    addStringRecordToStream(data, streamName, timestamp) {\n        this.wrapStringPtr(streamName, (streamNamePtr) => {\n            this.wrapStringPtrPtr(Object.keys(data), (keyList) => {\n                this.wrapStringPtrPtr(Object.values(data), (valueList) => {\n                    this.wasmModule._addFlatHashMapToInputStream(keyList, valueList, Object.keys(data).length, streamNamePtr, timestamp);\n                });\n            });\n        });\n    }\n    /**\n     * Sends a serialized protobuffer packet into the specified stream at the\n     *     given timestamp, to be parsed into the specified protobuffer type.\n     * @param data The binary (serialized) raw protobuffer data.\n     * @param protoType The C++ namespaced type this protobuffer data corresponds\n     *     to. It will be converted to this type when output as a packet into the\n     *     graph.\n     * @param streamName The name of the graph input stream to send data into.\n     * @param timestamp The timestamp of the input data, in ms.\n     */\n    addProtoToStream(data, protoType, streamName, timestamp) {\n        this.wrapStringPtr(streamName, (streamNamePtr) => {\n            this.wrapStringPtr(protoType, (protoTypePtr) => {\n                // Deep-copy proto data into Wasm heap\n                const dataPtr = this.wasmModule._malloc(data.length);\n                // TODO: Ensure this is the fastest way to copy this data.\n                this.wasmModule.HEAPU8.set(data, dataPtr);\n                this.wasmModule._addProtoToInputStream(dataPtr, data.length, protoTypePtr, streamNamePtr, timestamp);\n                this.wasmModule._free(dataPtr);\n            });\n        });\n    }\n    /**\n     * Attaches a boolean packet to the specified input_side_packet.\n     * @param data The boolean data to send.\n     * @param sidePacketName The name of the graph input side packet to send data\n     *     into.\n     */\n    addBoolToInputSidePacket(data, sidePacketName) {\n        this.wrapStringPtr(sidePacketName, (sidePacketNamePtr) => {\n            this.wasmModule._addBoolToInputSidePacket(data, sidePacketNamePtr);\n        });\n    }\n    /**\n     * Attaches a double packet to the specified input_side_packet.\n     * @param data The double data to send.\n     * @param sidePacketName The name of the graph input side packet to send data\n     *     into.\n     */\n    addDoubleToInputSidePacket(data, sidePacketName) {\n        this.wrapStringPtr(sidePacketName, (sidePacketNamePtr) => {\n            this.wasmModule._addDoubleToInputSidePacket(data, sidePacketNamePtr);\n        });\n    }\n    /**\n     * Attaches a float packet to the specified input_side_packet.\n     * @param data The float data to send.\n     * @param sidePacketName The name of the graph input side packet to send data\n     *     into.\n     */\n    addFloatToInputSidePacket(data, sidePacketName) {\n        this.wrapStringPtr(sidePacketName, (sidePacketNamePtr) => {\n            this.wasmModule._addFloatToInputSidePacket(data, sidePacketNamePtr);\n        });\n    }\n    /**\n     * Attaches a integer packet to the specified input_side_packet.\n     * @param data The integer data to send.\n     * @param sidePacketName The name of the graph input side packet to send data\n     *     into.\n     */\n    addIntToInputSidePacket(data, sidePacketName) {\n        this.wrapStringPtr(sidePacketName, (sidePacketNamePtr) => {\n            this.wasmModule._addIntToInputSidePacket(data, sidePacketNamePtr);\n        });\n    }\n    /**\n     * Attaches a string packet to the specified input_side_packet.\n     * @param data The string data to send.\n     * @param sidePacketName The name of the graph input side packet to send data\n     *     into.\n     */\n    addStringToInputSidePacket(data, sidePacketName) {\n        this.wrapStringPtr(sidePacketName, (sidePacketNamePtr) => {\n            this.wrapStringPtr(data, (dataPtr) => {\n                this.wasmModule._addStringToInputSidePacket(dataPtr, sidePacketNamePtr);\n            });\n        });\n    }\n    /**\n     * Attaches a serialized proto packet to the specified input_side_packet.\n     * @param data The binary (serialized) raw protobuffer data.\n     * @param protoType The C++ namespaced type this protobuffer data corresponds\n     *     to. It will be converted to this type for use in the graph.\n     * @param sidePacketName The name of the graph input side packet to send data\n     *     into.\n     */\n    addProtoToInputSidePacket(data, protoType, sidePacketName) {\n        this.wrapStringPtr(sidePacketName, (sidePacketNamePtr) => {\n            this.wrapStringPtr(protoType, (protoTypePtr) => {\n                // Deep-copy proto data into Wasm heap\n                const dataPtr = this.wasmModule._malloc(data.length);\n                // TODO: Ensure this is the fastest way to copy this data.\n                this.wasmModule.HEAPU8.set(data, dataPtr);\n                this.wasmModule._addProtoToInputSidePacket(dataPtr, data.length, protoTypePtr, sidePacketNamePtr);\n                this.wasmModule._free(dataPtr);\n            });\n        });\n    }\n    /**\n     * Attaches a boolean packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab boolean\n     *     data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachBoolListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for bool packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachBoolListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches a bool[] packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab\n     *     std::vector<bool> data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachBoolVectorListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setVectorListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for std::vector<bool> packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachBoolVectorListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches an int packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab int\n     *     data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachIntListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for int packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachIntListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches an int[] packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab\n     *     std::vector<int> data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachIntVectorListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setVectorListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for std::vector<int> packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachIntVectorListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches a double packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab double\n     *     data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachDoubleListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for double packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachDoubleListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches a double[] packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab\n     *     std::vector<double> data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachDoubleVectorListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setVectorListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for std::vector<double> packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachDoubleVectorListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches a float packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab float\n     *     data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachFloatListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for float packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachFloatListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches a float[] packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab\n     *     std::vector<float> data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachFloatVectorListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setVectorListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for std::vector<float> packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachFloatVectorListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches a string packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab string\n     *     data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachStringListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for string packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachStringListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches a string[] packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab\n     *     std::vector<std::string> data from.\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that the data is only guaranteed to exist for the\n     *     duration of the callback, and the callback will be called inline, so it\n     *     should not perform overly complicated (or any async) behavior.\n     */\n    attachStringVectorListener(outputStreamName, callbackFcn) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setVectorListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for std::vector<string> packets on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachStringVectorListener(outputStreamNamePtr);\n        });\n    }\n    /**\n     * Attaches a serialized proto packet listener to the specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab binary\n     *     serialized proto data from (in Uint8Array format).\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that by default the data is only guaranteed to\n     *     exist for the duration of the callback, and the callback will be called\n     *     inline, so it should not perform overly complicated (or any async)\n     *     behavior. If the proto data needs to be able to outlive the call, you\n     *     may set the optional makeDeepCopy parameter to true, or can manually\n     *     deep-copy the data yourself.\n     * @param makeDeepCopy Optional convenience parameter which, if set to true,\n     *     will override the default memory management behavior and make a deep\n     *     copy of the underlying data, rather than just returning a view into the\n     *     C++-managed memory. At the cost of a data copy, this allows the\n     *     returned data to outlive the callback lifetime (and it will be cleaned\n     *     up automatically by JS garbage collection whenever the user is finished\n     *     with it).\n     */\n    attachProtoListener(outputStreamName, callbackFcn, makeDeepCopy) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for binary serialized proto data packets on this\n        // stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachProtoListener(outputStreamNamePtr, makeDeepCopy || false);\n        });\n    }\n    /**\n     * Attaches a listener for an array of serialized proto packets to the\n     * specified output_stream.\n     * @param outputStreamName The name of the graph output stream to grab a\n     *     vector of binary serialized proto data from (in Uint8Array[] format).\n     * @param callbackFcn The function that will be called back with the data, as\n     *     it is received.  Note that by default the data is only guaranteed to\n     *     exist for the duration of the callback, and the callback will be called\n     *     inline, so it should not perform overly complicated (or any async)\n     *     behavior. If the proto data needs to be able to outlive the call, you\n     *     may set the optional makeDeepCopy parameter to true, or can manually\n     *     deep-copy the data yourself.\n     * @param makeDeepCopy Optional convenience parameter which, if set to true,\n     *     will override the default memory management behavior and make a deep\n     *     copy of the underlying data, rather than just returning a view into the\n     *     C++-managed memory. At the cost of a data copy, this allows the\n     *     returned data to outlive the callback lifetime (and it will be cleaned\n     *     up automatically by JS garbage collection whenever the user is finished\n     *     with it).\n     */\n    attachProtoVectorListener(outputStreamName, callbackFcn, makeDeepCopy) {\n        // Set up our TS listener to receive any packets for this stream.\n        this.setVectorListener(outputStreamName, callbackFcn);\n        // Tell our graph to listen for a vector of binary serialized proto packets\n        // on this stream.\n        this.wrapStringPtr(outputStreamName, (outputStreamNamePtr) => {\n            this.wasmModule._attachProtoVectorListener(outputStreamNamePtr, makeDeepCopy || false);\n        });\n    }\n    /**\n     * Sets a listener to be called back with audio output packet data, as a\n     * Float32Array, when graph has finished processing it.\n     * @param audioOutputListener The caller's listener function.\n     */\n    setOnAudioOutput(audioOutputListener) {\n        this.wasmModule.onAudioOutput = audioOutputListener;\n        if (!this.wasmModule._attachAudioOutputListener) {\n            console.warn('Attempting to use AudioOutputListener without support for ' +\n                'output audio. Is build dep \":gl_graph_runner_audio_out\" missing?');\n        }\n    }\n    /**\n     * Forces all queued-up packets to be pushed through the MediaPipe graph as\n     * far as possible, performing all processing until no more processing can be\n     * done.\n     */\n    finishProcessing() {\n        this.wasmModule._waitUntilIdle();\n    }\n}\nwasm_mediapipe_lib.WasmMediaPipeLib = WasmMediaPipeLib;\n// Quick private helper to run the given script safely\nasync function runScript(scriptUrl) {\n    if (typeof importScripts === 'function') {\n        importScripts(scriptUrl.toString());\n    }\n    else {\n        await new Promise((resolve, reject) => {\n            fetch(scriptUrl).then(response => response.text()).then(text => Function(text)).then(resolve, reject);\n        });\n    }\n}\n/**\n * Global function to initialize Wasm blob and load runtime assets for a\n *     specialized MediaPipe library. This allows us to create a requested\n *     subclass inheriting from WasmMediaPipeLib.\n * @param constructorFcn The name of the class to instantiate via \"new\".\n * @param wasmLoaderScript Url for the wasm-runner script; produced by the build\n *     process.\n * @param assetLoaderScript Url for the asset-loading script; produced by the\n *     build process.\n * @param fileLocator A function to override the file locations for assets\n *     loaded by the MediaPipe library.\n * @return promise A promise which will resolve when initialization has\n *     completed successfully.\n */\nasync function createMediaPipeLib(constructorFcn, wasmLoaderScript, assetLoaderScript, glCanvas, fileLocator) {\n    const scripts = [];\n    // Run wasm-loader script here\n    if (wasmLoaderScript) {\n        scripts.push(wasmLoaderScript);\n    }\n    // Run asset-loader script here\n    if (assetLoaderScript) {\n        scripts.push(assetLoaderScript);\n    }\n    // Load scripts in parallel, browser will execute them in sequence.\n    if (scripts.length) {\n        await Promise.all(scripts.map(runScript));\n    }\n    if (!self.ModuleFactory) {\n        throw new Error('ModuleFactory not set.');\n    }\n    // TODO: Ensure that fileLocator is passed in by all users\n    // and make it required\n    const module = await self.ModuleFactory(fileLocator || self.Module);\n    // Don't reuse factory or module seed\n    self.ModuleFactory = self.Module = undefined;\n    return new constructorFcn(module, glCanvas);\n}\nwasm_mediapipe_lib.createMediaPipeLib = createMediaPipeLib;\n/**\n * Global function to initialize Wasm blob and load runtime assets for a generic\n *     MediaPipe library.\n * @param wasmLoaderScript Url for the wasm-runner script; produced by the build\n *     process.\n * @param assetLoaderScript Url for the asset-loading script; produced by the\n *     build process.\n * @param fileLocator A function to override the file locations for assets\n *     loaded by the MediaPipe library.\n * @return promise A promise which will resolve when initialization has\n *     completed successfully.\n */\nasync function createWasmMediaPipeLib(wasmLoaderScript, assetLoaderScript, glCanvas, fileLocator) {\n    return createMediaPipeLib(WasmMediaPipeLib, wasmLoaderScript, assetLoaderScript, glCanvas, fileLocator);\n}\nwasm_mediapipe_lib.createWasmMediaPipeLib = createWasmMediaPipeLib;\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(task_runner, \"__esModule\", { value: true });\ntask_runner.TaskRunner = void 0;\nconst register_model_resources_graph_service_1 = register_model_resources_graph_service;\nconst wasm_mediapipe_image_lib_1 = wasm_mediapipe_image_lib;\nconst wasm_mediapipe_lib_1$3 = wasm_mediapipe_lib;\n// tslint:disable-next-line:enforce-name-casing\nconst WasmMediaPipeImageLib = (0, register_model_resources_graph_service_1.SupportModelResourcesGraphService)((0, wasm_mediapipe_image_lib_1.SupportImage)(wasm_mediapipe_lib_1$3.WasmMediaPipeLib));\n/** Base class for all MediaPipe Tasks. */\nclass TaskRunner extends WasmMediaPipeImageLib {\n    constructor(wasmModule) {\n        super(wasmModule);\n        this.processingErrors = [];\n        // Disables the automatic render-to-screen code, which allows for pure\n        // CPU processing.\n        this.setAutoRenderToScreen(false);\n        // Enables use of our model resource caching graph service.\n        this.registerModelResourcesGraphService();\n    }\n    /**\n     * Takes the raw data from a MediaPipe graph, and passes it to C++ to be run\n     * over the video stream. Will replace the previously running MediaPipe graph,\n     * if there is one.\n     * @param graphData The raw MediaPipe graph data, either in binary\n     *     protobuffer format (.binarypb), or else in raw text format (.pbtxt or\n     *     .textproto).\n     * @param isBinary This should be set to true if the graph is in\n     *     binary format, and false if it is in human-readable text format.\n     */\n    setGraph(graphData, isBinary) {\n        this.attachErrorListener((code, message) => {\n            this.processingErrors.push(new Error(message));\n        });\n        super.setGraph(graphData, isBinary);\n        this.handleErrors();\n    }\n    /**\n     * Forces all queued-up packets to be pushed through the MediaPipe graph as\n     * far as possible, performing all processing until no more processing can be\n     * done.\n     */\n    finishProcessing() {\n        super.finishProcessing();\n        this.handleErrors();\n    }\n    /** Throws the error from the error listener if an error was raised. */\n    handleErrors() {\n        const errorCount = this.processingErrors.length;\n        if (errorCount === 1) {\n            // Re-throw error to get a more meaningful stacktrace\n            throw new Error(this.processingErrors[0].message);\n        }\n        else if (errorCount > 1) {\n            throw new Error('Encountered multiple errors: ' +\n                this.processingErrors.map(e => e.message).join(', '));\n        }\n        this.processingErrors = [];\n    }\n}\ntask_runner.TaskRunner = TaskRunner;\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(image_classifier, \"__esModule\", { value: true });\nimage_classifier.ImageClassifier = void 0;\nconst calculator_pb_1$2 = calculator_pb;\nconst calculator_options_pb_1$2 = calculator_options_pb;\nconst classifications_pb_1 = classifications_pb;\nconst image_classifier_graph_options_pb_1 = image_classifier_graph_options_pb;\nconst base_options_1$2 = base_options;\nconst classifier_options_1$1 = classifier_options;\nconst classifier_result_1 = classifier_result;\nconst task_runner_1$2 = task_runner;\nconst wasm_mediapipe_lib_1$2 = wasm_mediapipe_lib;\nconst IMAGE_CLASSIFIER_GRAPH = 'mediapipe.tasks.vision.image_classifier.ImageClassifierGraph';\nconst INPUT_STREAM$1 = 'input_image';\nconst CLASSIFICATIONS_STREAM = 'classifications';\n// The OSS JS API does not support the builder pattern.\n// tslint:disable:jspb-use-builder-pattern\n/** Performs classification on images. */\nclass ImageClassifier extends task_runner_1$2.TaskRunner {\n    constructor() {\n        super(...arguments);\n        this.classificationResult = { classifications: [] };\n        this.options = new image_classifier_graph_options_pb_1.ImageClassifierGraphOptions();\n    }\n    /**\n     * Initializes the Wasm runtime and creates a new image classifier from the\n     * provided options.\n     * @param wasmLoaderOptions A configuration object that provides the location\n     *     of the Wasm binary and its loader.\n     * @param imageClassifierOptions The options for the image classifier. Note\n     *     that either a path to the model asset or a model buffer needs to be\n     *     provided (via `baseOptions`).\n     */\n    static async createFromOptions(wasmLoaderOptions, imageClassifierOptions) {\n        // Create a file locator based on the loader options\n        const fileLocator = {\n            locateFile() {\n                // The only file we load is the Wasm binary\n                return wasmLoaderOptions.wasmBinaryPath.toString();\n            }\n        };\n        const classifier = await (0, wasm_mediapipe_lib_1$2.createMediaPipeLib)(ImageClassifier, wasmLoaderOptions.wasmLoaderPath, \n        /* assetLoaderScript= */ undefined, \n        /* glCanvas= */ undefined, fileLocator);\n        await classifier.setOptions(imageClassifierOptions);\n        return classifier;\n    }\n    /**\n     * Initializes the Wasm runtime and creates a new image classifier based on\n     * the provided model asset buffer.\n     * @param wasmLoaderOptions A configuration object that provides the location\n     *     of the Wasm binary and its loader.\n     * @param modelAssetBuffer A binary representation of the model.\n     */\n    static createFromModelBuffer(wasmLoaderOptions, modelAssetBuffer) {\n        return ImageClassifier.createFromOptions(wasmLoaderOptions, { baseOptions: { modelAssetBuffer } });\n    }\n    /**\n     * Initializes the Wasm runtime and creates a new image classifier based on\n     * the path to the model asset.\n     * @param wasmLoaderOptions A configuration object that provides the location\n     *     of the Wasm binary and its loader.\n     * @param modelAssetPath The path to the model asset.\n     */\n    static async createFromModelPath(wasmLoaderOptions, modelAssetPath) {\n        const response = await fetch(modelAssetPath.toString());\n        const graphData = await response.arrayBuffer();\n        return ImageClassifier.createFromModelBuffer(wasmLoaderOptions, new Uint8Array(graphData));\n    }\n    /**\n     * Sets new options for the image classifier.\n     *\n     * Calling `setOptions()` with a subset of options only affects those options.\n     * You can reset an option back to its default value by explicitly setting it\n     * to `undefined`.\n     *\n     * @param options The options for the image classifier.\n     */\n    async setOptions(options) {\n        if (options.baseOptions) {\n            const baseOptionsProto = await (0, base_options_1$2.convertBaseOptionsToProto)(options.baseOptions, this.options.getBaseOptions());\n            this.options.setBaseOptions(baseOptionsProto);\n        }\n        this.options.setClassifierOptions((0, classifier_options_1$1.convertClassifierOptionsToProto)(options, this.options.getClassifierOptions()));\n        this.refreshGraph();\n    }\n    /**\n     * Performs image classification on the provided image and waits synchronously\n     * for the response.\n     *\n     * @param imageSource An image source to process.\n     * @param timestamp The timestamp of the current frame, in ms. If not\n     *     provided, defaults to `performance.now()`.\n     * @return The classification result of the image\n     */\n    classify(imageSource, timestamp) {\n        // Get classification result by running our MediaPipe graph.\n        this.classificationResult = { classifications: [] };\n        this.addGpuBufferAsImageToStream(imageSource, INPUT_STREAM$1, timestamp !== null && timestamp !== void 0 ? timestamp : performance.now());\n        this.finishProcessing();\n        return this.classificationResult;\n    }\n    /** Updates the MediaPipe graph configuration. */\n    refreshGraph() {\n        const graphConfig = new calculator_pb_1$2.CalculatorGraphConfig();\n        graphConfig.addInputStream(INPUT_STREAM$1);\n        graphConfig.addOutputStream(CLASSIFICATIONS_STREAM);\n        const calculatorOptions = new calculator_options_pb_1$2.CalculatorOptions();\n        calculatorOptions.setExtension(image_classifier_graph_options_pb_1.ImageClassifierGraphOptions.ext, this.options);\n        // Perform image classification. Pre-processing and results post-processing\n        // are built-in.\n        const classifierNode = new calculator_pb_1$2.CalculatorGraphConfig.Node();\n        classifierNode.setCalculator(IMAGE_CLASSIFIER_GRAPH);\n        classifierNode.addInputStream('IMAGE:' + INPUT_STREAM$1);\n        classifierNode.addOutputStream('CLASSIFICATIONS:' + CLASSIFICATIONS_STREAM);\n        classifierNode.setOptions(calculatorOptions);\n        graphConfig.addNode(classifierNode);\n        this.attachProtoListener(CLASSIFICATIONS_STREAM, binaryProto => {\n            this.classificationResult = (0, classifier_result_1.convertFromClassificationResultProto)(classifications_pb_1.ClassificationResult.deserializeBinary(binaryProto));\n        });\n        const binaryGraph = graphConfig.serializeBinary();\n        this.setGraph(new Uint8Array(binaryGraph), /* isBinary= */ true);\n    }\n}\nimage_classifier.ImageClassifier = ImageClassifier;\n\nvar gesture_recognizer_options = {};\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(gesture_recognizer_options, \"__esModule\", { value: true });\n\nvar gesture_recognizer_result = {};\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(gesture_recognizer_result, \"__esModule\", { value: true });\n\nvar gesture_recognizer = {};\n\nvar landmark_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/framework/formats/landmark.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.Landmark', null, global);\n\tgoog.exportSymbol('proto.mediapipe.LandmarkList', null, global);\n\tgoog.exportSymbol('proto.mediapipe.LandmarkListCollection', null, global);\n\tgoog.exportSymbol('proto.mediapipe.NormalizedLandmark', null, global);\n\tgoog.exportSymbol('proto.mediapipe.NormalizedLandmarkList', null, global);\n\tgoog.exportSymbol('proto.mediapipe.NormalizedLandmarkListCollection', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.Landmark = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.Landmark, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.Landmark.displayName = 'proto.mediapipe.Landmark';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.LandmarkList = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.LandmarkList.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.LandmarkList, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.LandmarkList.displayName = 'proto.mediapipe.LandmarkList';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.LandmarkListCollection = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.LandmarkListCollection.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.LandmarkListCollection, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.LandmarkListCollection.displayName = 'proto.mediapipe.LandmarkListCollection';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.NormalizedLandmark = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.NormalizedLandmark, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.NormalizedLandmark.displayName = 'proto.mediapipe.NormalizedLandmark';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.NormalizedLandmarkList = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.NormalizedLandmarkList.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.NormalizedLandmarkList, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.NormalizedLandmarkList.displayName = 'proto.mediapipe.NormalizedLandmarkList';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.NormalizedLandmarkListCollection.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.NormalizedLandmarkListCollection, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.NormalizedLandmarkListCollection.displayName = 'proto.mediapipe.NormalizedLandmarkListCollection';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.Landmark.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.Landmark.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.Landmark} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Landmark.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,\n\t    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,\n\t    z: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,\n\t    visibility: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,\n\t    presence: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.Landmark}\n\t */\n\tproto.mediapipe.Landmark.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.Landmark;\n\t  return proto.mediapipe.Landmark.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.Landmark} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.Landmark}\n\t */\n\tproto.mediapipe.Landmark.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setX(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setY(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setZ(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setVisibility(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setPresence(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.Landmark.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.Landmark.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.Landmark} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Landmark.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 5));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional float x = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Landmark.prototype.getX = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.setX = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.clearX = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Landmark.prototype.hasX = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional float y = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Landmark.prototype.getY = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.setY = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.clearY = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Landmark.prototype.hasY = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional float z = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Landmark.prototype.getZ = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.setZ = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.clearZ = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Landmark.prototype.hasZ = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional float visibility = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Landmark.prototype.getVisibility = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.setVisibility = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.clearVisibility = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Landmark.prototype.hasVisibility = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * optional float presence = 5;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Landmark.prototype.getPresence = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.setPresence = function(value) {\n\t  return jspb.Message.setField(this, 5, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Landmark} returns this\n\t */\n\tproto.mediapipe.Landmark.prototype.clearPresence = function() {\n\t  return jspb.Message.setField(this, 5, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Landmark.prototype.hasPresence = function() {\n\t  return jspb.Message.getField(this, 5) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.LandmarkList.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.LandmarkList.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.LandmarkList.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.LandmarkList} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LandmarkList.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    landmarkList: jspb.Message.toObjectList(msg.getLandmarkList(),\n\t    proto.mediapipe.Landmark.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.LandmarkList}\n\t */\n\tproto.mediapipe.LandmarkList.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.LandmarkList;\n\t  return proto.mediapipe.LandmarkList.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.LandmarkList} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.LandmarkList}\n\t */\n\tproto.mediapipe.LandmarkList.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.Landmark;\n\t      reader.readMessage(value,proto.mediapipe.Landmark.deserializeBinaryFromReader);\n\t      msg.addLandmark(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.LandmarkList.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.LandmarkList.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.LandmarkList} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LandmarkList.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getLandmarkList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.Landmark.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated Landmark landmark = 1;\n\t * @return {!Array<!proto.mediapipe.Landmark>}\n\t */\n\tproto.mediapipe.LandmarkList.prototype.getLandmarkList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.Landmark>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.Landmark, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.Landmark>} value\n\t * @return {!proto.mediapipe.LandmarkList} returns this\n\t*/\n\tproto.mediapipe.LandmarkList.prototype.setLandmarkList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.Landmark=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.Landmark}\n\t */\n\tproto.mediapipe.LandmarkList.prototype.addLandmark = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.Landmark, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.LandmarkList} returns this\n\t */\n\tproto.mediapipe.LandmarkList.prototype.clearLandmarkList = function() {\n\t  return this.setLandmarkList([]);\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.LandmarkListCollection.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.LandmarkListCollection.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.LandmarkListCollection.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.LandmarkListCollection} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LandmarkListCollection.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    landmarkListList: jspb.Message.toObjectList(msg.getLandmarkListList(),\n\t    proto.mediapipe.LandmarkList.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.LandmarkListCollection}\n\t */\n\tproto.mediapipe.LandmarkListCollection.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.LandmarkListCollection;\n\t  return proto.mediapipe.LandmarkListCollection.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.LandmarkListCollection} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.LandmarkListCollection}\n\t */\n\tproto.mediapipe.LandmarkListCollection.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.LandmarkList;\n\t      reader.readMessage(value,proto.mediapipe.LandmarkList.deserializeBinaryFromReader);\n\t      msg.addLandmarkList(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.LandmarkListCollection.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.LandmarkListCollection.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.LandmarkListCollection} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LandmarkListCollection.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getLandmarkListList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.LandmarkList.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated LandmarkList landmark_list = 1;\n\t * @return {!Array<!proto.mediapipe.LandmarkList>}\n\t */\n\tproto.mediapipe.LandmarkListCollection.prototype.getLandmarkListList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.LandmarkList>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.LandmarkList, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.LandmarkList>} value\n\t * @return {!proto.mediapipe.LandmarkListCollection} returns this\n\t*/\n\tproto.mediapipe.LandmarkListCollection.prototype.setLandmarkListList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.LandmarkList=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.LandmarkList}\n\t */\n\tproto.mediapipe.LandmarkListCollection.prototype.addLandmarkList = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.LandmarkList, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.LandmarkListCollection} returns this\n\t */\n\tproto.mediapipe.LandmarkListCollection.prototype.clearLandmarkListList = function() {\n\t  return this.setLandmarkListList([]);\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.NormalizedLandmark.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.NormalizedLandmark} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.NormalizedLandmark.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,\n\t    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,\n\t    z: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,\n\t    visibility: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,\n\t    presence: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.NormalizedLandmark}\n\t */\n\tproto.mediapipe.NormalizedLandmark.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.NormalizedLandmark;\n\t  return proto.mediapipe.NormalizedLandmark.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.NormalizedLandmark} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.NormalizedLandmark}\n\t */\n\tproto.mediapipe.NormalizedLandmark.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setX(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setY(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setZ(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setVisibility(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setPresence(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.NormalizedLandmark.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.NormalizedLandmark} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.NormalizedLandmark.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 5));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional float x = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.getX = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.setX = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.clearX = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.hasX = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional float y = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.getY = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.setY = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.clearY = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.hasY = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional float z = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.getZ = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.setZ = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.clearZ = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.hasZ = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional float visibility = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.getVisibility = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.setVisibility = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.clearVisibility = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.hasVisibility = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * optional float presence = 5;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.getPresence = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.setPresence = function(value) {\n\t  return jspb.Message.setField(this, 5, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedLandmark} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.clearPresence = function() {\n\t  return jspb.Message.setField(this, 5, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedLandmark.prototype.hasPresence = function() {\n\t  return jspb.Message.getField(this, 5) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.NormalizedLandmarkList.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.NormalizedLandmarkList} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    landmarkList: jspb.Message.toObjectList(msg.getLandmarkList(),\n\t    proto.mediapipe.NormalizedLandmark.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.NormalizedLandmarkList}\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.NormalizedLandmarkList;\n\t  return proto.mediapipe.NormalizedLandmarkList.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.NormalizedLandmarkList} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.NormalizedLandmarkList}\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.NormalizedLandmark;\n\t      reader.readMessage(value,proto.mediapipe.NormalizedLandmark.deserializeBinaryFromReader);\n\t      msg.addLandmark(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.NormalizedLandmarkList.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.NormalizedLandmarkList} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getLandmarkList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.NormalizedLandmark.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated NormalizedLandmark landmark = 1;\n\t * @return {!Array<!proto.mediapipe.NormalizedLandmark>}\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.prototype.getLandmarkList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.NormalizedLandmark>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.NormalizedLandmark, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.NormalizedLandmark>} value\n\t * @return {!proto.mediapipe.NormalizedLandmarkList} returns this\n\t*/\n\tproto.mediapipe.NormalizedLandmarkList.prototype.setLandmarkList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.NormalizedLandmark=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.NormalizedLandmark}\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.prototype.addLandmark = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.NormalizedLandmark, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.NormalizedLandmarkList} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmarkList.prototype.clearLandmarkList = function() {\n\t  return this.setLandmarkList([]);\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.NormalizedLandmarkListCollection.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.NormalizedLandmarkListCollection} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    landmarkListList: jspb.Message.toObjectList(msg.getLandmarkListList(),\n\t    proto.mediapipe.NormalizedLandmarkList.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.NormalizedLandmarkListCollection}\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.NormalizedLandmarkListCollection;\n\t  return proto.mediapipe.NormalizedLandmarkListCollection.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.NormalizedLandmarkListCollection} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.NormalizedLandmarkListCollection}\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.NormalizedLandmarkList;\n\t      reader.readMessage(value,proto.mediapipe.NormalizedLandmarkList.deserializeBinaryFromReader);\n\t      msg.addLandmarkList(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.NormalizedLandmarkListCollection.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.NormalizedLandmarkListCollection} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getLandmarkListList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.NormalizedLandmarkList.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated NormalizedLandmarkList landmark_list = 1;\n\t * @return {!Array<!proto.mediapipe.NormalizedLandmarkList>}\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.prototype.getLandmarkListList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.NormalizedLandmarkList>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.NormalizedLandmarkList, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.NormalizedLandmarkList>} value\n\t * @return {!proto.mediapipe.NormalizedLandmarkListCollection} returns this\n\t*/\n\tproto.mediapipe.NormalizedLandmarkListCollection.prototype.setLandmarkListList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.NormalizedLandmarkList=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.NormalizedLandmarkList}\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.prototype.addLandmarkList = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.NormalizedLandmarkList, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.NormalizedLandmarkListCollection} returns this\n\t */\n\tproto.mediapipe.NormalizedLandmarkListCollection.prototype.clearLandmarkListList = function() {\n\t  return this.setLandmarkListList([]);\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (landmark_pb));\n\nvar rect_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/framework/formats/rect.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.NormalizedRect', null, global);\n\tgoog.exportSymbol('proto.mediapipe.Rect', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.Rect = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.Rect, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.Rect.displayName = 'proto.mediapipe.Rect';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.NormalizedRect = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.NormalizedRect, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.NormalizedRect.displayName = 'proto.mediapipe.NormalizedRect';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.Rect.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.Rect.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.Rect} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Rect.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    xCenter: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    yCenter: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    height: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,\n\t    width: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,\n\t    rotation: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),\n\t    rectId: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.Rect}\n\t */\n\tproto.mediapipe.Rect.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.Rect;\n\t  return proto.mediapipe.Rect.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.Rect} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.Rect}\n\t */\n\tproto.mediapipe.Rect.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setXCenter(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setYCenter(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setHeight(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setWidth(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setRotation(value);\n\t      break;\n\t    case 6:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setRectId(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.Rect.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.Rect.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.Rect} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Rect.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 5));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 6));\n\t  if (f != null) {\n\t    writer.writeInt64(\n\t      6,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * required int32 x_center = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Rect.prototype.getXCenter = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.setXCenter = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.clearXCenter = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Rect.prototype.hasXCenter = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * required int32 y_center = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Rect.prototype.getYCenter = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.setYCenter = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.clearYCenter = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Rect.prototype.hasYCenter = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * required int32 height = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Rect.prototype.getHeight = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.setHeight = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.clearHeight = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Rect.prototype.hasHeight = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * required int32 width = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Rect.prototype.getWidth = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.setWidth = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.clearWidth = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Rect.prototype.hasWidth = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * optional float rotation = 5;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Rect.prototype.getRotation = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.setRotation = function(value) {\n\t  return jspb.Message.setField(this, 5, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.clearRotation = function() {\n\t  return jspb.Message.setField(this, 5, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Rect.prototype.hasRotation = function() {\n\t  return jspb.Message.getField(this, 5) != null;\n\t};\n\n\n\t/**\n\t * optional int64 rect_id = 6;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Rect.prototype.getRectId = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.setRectId = function(value) {\n\t  return jspb.Message.setField(this, 6, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Rect} returns this\n\t */\n\tproto.mediapipe.Rect.prototype.clearRectId = function() {\n\t  return jspb.Message.setField(this, 6, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Rect.prototype.hasRectId = function() {\n\t  return jspb.Message.getField(this, 6) != null;\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.NormalizedRect.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.NormalizedRect} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.NormalizedRect.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    xCenter: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,\n\t    yCenter: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,\n\t    height: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,\n\t    width: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,\n\t    rotation: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),\n\t    rectId: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.NormalizedRect}\n\t */\n\tproto.mediapipe.NormalizedRect.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.NormalizedRect;\n\t  return proto.mediapipe.NormalizedRect.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.NormalizedRect} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.NormalizedRect}\n\t */\n\tproto.mediapipe.NormalizedRect.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setXCenter(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setYCenter(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setHeight(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setWidth(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setRotation(value);\n\t      break;\n\t    case 6:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setRectId(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.NormalizedRect.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.NormalizedRect} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.NormalizedRect.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 5));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 6));\n\t  if (f != null) {\n\t    writer.writeInt64(\n\t      6,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * required float x_center = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.getXCenter = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.setXCenter = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.clearXCenter = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.hasXCenter = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * required float y_center = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.getYCenter = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.setYCenter = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.clearYCenter = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.hasYCenter = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * required float height = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.getHeight = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.setHeight = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.clearHeight = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.hasHeight = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * required float width = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.getWidth = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.setWidth = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.clearWidth = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.hasWidth = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * optional float rotation = 5;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.getRotation = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.setRotation = function(value) {\n\t  return jspb.Message.setField(this, 5, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.clearRotation = function() {\n\t  return jspb.Message.setField(this, 5, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.hasRotation = function() {\n\t  return jspb.Message.getField(this, 5) != null;\n\t};\n\n\n\t/**\n\t * optional int64 rect_id = 6;\n\t * @return {number}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.getRectId = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.setRectId = function(value) {\n\t  return jspb.Message.setField(this, 6, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.NormalizedRect} returns this\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.clearRectId = function() {\n\t  return jspb.Message.setField(this, 6, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.NormalizedRect.prototype.hasRectId = function() {\n\t  return jspb.Message.getField(this, 6) != null;\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (rect_pb));\n\nvar gesture_classifier_graph_options_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/vision/gesture_recognizer/proto/gesture_classifier_graph_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tvar mediapipe_tasks_cc_components_processors_proto_classifier_options_pb = classifier_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_components_processors_proto_classifier_options_pb);\n\tvar mediapipe_tasks_cc_core_proto_base_options_pb = base_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_base_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.displayName = 'proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    baseOptions: (f = msg.getBaseOptions()) && mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.toObject(includeInstance, f),\n\t    classifierOptions: (f = msg.getClassifierOptions()) && mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions;\n\t  return proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.deserializeBinaryFromReader);\n\t      msg.setBaseOptions(value);\n\t      break;\n\t    case 2:\n\t      var value = new mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions.deserializeBinaryFromReader);\n\t      msg.setClassifierOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getBaseOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getClassifierOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      2,\n\t      f,\n\t      mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    478825465,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[478825465] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[478825465] = proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.ext;\n\n\t/**\n\t * optional mediapipe.tasks.core.proto.BaseOptions base_options = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.getBaseOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.BaseOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.BaseOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.setBaseOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.clearBaseOptions = function() {\n\t  return this.setBaseOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.hasBaseOptions = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional mediapipe.tasks.components.processors.proto.ClassifierOptions classifier_options = 2;\n\t * @return {?proto.mediapipe.tasks.components.processors.proto.ClassifierOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.getClassifierOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.components.processors.proto.ClassifierOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_components_processors_proto_classifier_options_pb.ClassifierOptions, 2));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.components.processors.proto.ClassifierOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.setClassifierOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.clearClassifierOptions = function() {\n\t  return this.setClassifierOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.prototype.hasClassifierOptions = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    478825465,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[478825465] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[478825465] = proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.vision.gesture_recognizer.proto);\n} (gesture_classifier_graph_options_pb));\n\nvar gesture_recognizer_graph_options_pb = {};\n\nvar hand_gesture_recognizer_graph_options_pb = {};\n\nvar gesture_embedder_graph_options_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/vision/gesture_recognizer/proto/gesture_embedder_graph_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tvar mediapipe_tasks_cc_core_proto_base_options_pb = base_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_base_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.displayName = 'proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    baseOptions: (f = msg.getBaseOptions()) && mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions;\n\t  return proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.deserializeBinaryFromReader);\n\t      msg.setBaseOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getBaseOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    478825422,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[478825422] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[478825422] = proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.ext;\n\n\t/**\n\t * optional mediapipe.tasks.core.proto.BaseOptions base_options = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.prototype.getBaseOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.BaseOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.BaseOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.prototype.setBaseOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.prototype.clearBaseOptions = function() {\n\t  return this.setBaseOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.prototype.hasBaseOptions = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    478825422,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[478825422] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[478825422] = proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.vision.gesture_recognizer.proto);\n} (gesture_embedder_graph_options_pb));\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/vision/gesture_recognizer/proto/hand_gesture_recognizer_graph_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tvar mediapipe_tasks_cc_core_proto_base_options_pb = base_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_base_options_pb);\n\tvar mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb = gesture_classifier_graph_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb);\n\tvar mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_embedder_graph_options_pb = gesture_embedder_graph_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_embedder_graph_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.displayName = 'proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    baseOptions: (f = msg.getBaseOptions()) && mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.toObject(includeInstance, f),\n\t    gestureEmbedderGraphOptions: (f = msg.getGestureEmbedderGraphOptions()) && mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_embedder_graph_options_pb.GestureEmbedderGraphOptions.toObject(includeInstance, f),\n\t    cannedGestureClassifierGraphOptions: (f = msg.getCannedGestureClassifierGraphOptions()) && mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions.toObject(includeInstance, f),\n\t    customGestureClassifierGraphOptions: (f = msg.getCustomGestureClassifierGraphOptions()) && mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions;\n\t  return proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.deserializeBinaryFromReader);\n\t      msg.setBaseOptions(value);\n\t      break;\n\t    case 2:\n\t      var value = new mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_embedder_graph_options_pb.GestureEmbedderGraphOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_embedder_graph_options_pb.GestureEmbedderGraphOptions.deserializeBinaryFromReader);\n\t      msg.setGestureEmbedderGraphOptions(value);\n\t      break;\n\t    case 3:\n\t      var value = new mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions.deserializeBinaryFromReader);\n\t      msg.setCannedGestureClassifierGraphOptions(value);\n\t      break;\n\t    case 4:\n\t      var value = new mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions.deserializeBinaryFromReader);\n\t      msg.setCustomGestureClassifierGraphOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getBaseOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getGestureEmbedderGraphOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      2,\n\t      f,\n\t      mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_embedder_graph_options_pb.GestureEmbedderGraphOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getCannedGestureClassifierGraphOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getCustomGestureClassifierGraphOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      4,\n\t      f,\n\t      mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    463370452,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[463370452] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[463370452] = proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.ext;\n\n\t/**\n\t * optional mediapipe.tasks.core.proto.BaseOptions base_options = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.getBaseOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.BaseOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.BaseOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.setBaseOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.clearBaseOptions = function() {\n\t  return this.setBaseOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.hasBaseOptions = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional GestureEmbedderGraphOptions gesture_embedder_graph_options = 2;\n\t * @return {?proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.getGestureEmbedderGraphOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_embedder_graph_options_pb.GestureEmbedderGraphOptions, 2));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureEmbedderGraphOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.setGestureEmbedderGraphOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.clearGestureEmbedderGraphOptions = function() {\n\t  return this.setGestureEmbedderGraphOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.hasGestureEmbedderGraphOptions = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional GestureClassifierGraphOptions canned_gesture_classifier_graph_options = 3;\n\t * @return {?proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.getCannedGestureClassifierGraphOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.setCannedGestureClassifierGraphOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.clearCannedGestureClassifierGraphOptions = function() {\n\t  return this.setCannedGestureClassifierGraphOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.hasCannedGestureClassifierGraphOptions = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional GestureClassifierGraphOptions custom_gesture_classifier_graph_options = 4;\n\t * @return {?proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.getCustomGestureClassifierGraphOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_vision_gesture_recognizer_proto_gesture_classifier_graph_options_pb.GestureClassifierGraphOptions, 4));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureClassifierGraphOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.setCustomGestureClassifierGraphOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.clearCustomGestureClassifierGraphOptions = function() {\n\t  return this.setCustomGestureClassifierGraphOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.prototype.hasCustomGestureClassifierGraphOptions = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    463370452,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[463370452] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[463370452] = proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.vision.gesture_recognizer.proto);\n} (hand_gesture_recognizer_graph_options_pb));\n\nvar hand_landmarker_graph_options_pb = {};\n\nvar hand_detector_graph_options_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/vision/hand_detector/proto/hand_detector_graph_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tvar mediapipe_tasks_cc_core_proto_base_options_pb = base_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_base_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.displayName = 'proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    baseOptions: (f = msg.getBaseOptions()) && mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.toObject(includeInstance, f),\n\t    minDetectionConfidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.5),\n\t    numHands: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions;\n\t  return proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.deserializeBinaryFromReader);\n\t      msg.setBaseOptions(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setMinDetectionConfidence(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setNumHands(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getBaseOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    464864288,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[464864288] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[464864288] = proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.ext;\n\n\t/**\n\t * optional mediapipe.tasks.core.proto.BaseOptions base_options = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.getBaseOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.BaseOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.BaseOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.setBaseOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.clearBaseOptions = function() {\n\t  return this.setBaseOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.hasBaseOptions = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional float min_detection_confidence = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.getMinDetectionConfidence = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.5));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.setMinDetectionConfidence = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.clearMinDetectionConfidence = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.hasMinDetectionConfidence = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional int32 num_hands = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.getNumHands = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.setNumHands = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.clearNumHands = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.prototype.hasNumHands = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    464864288,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[464864288] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[464864288] = proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.vision.hand_detector.proto);\n} (hand_detector_graph_options_pb));\n\nvar hand_landmarks_detector_graph_options_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/vision/hand_landmarker/proto/hand_landmarks_detector_graph_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tvar mediapipe_tasks_cc_core_proto_base_options_pb = base_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_base_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.displayName = 'proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    baseOptions: (f = msg.getBaseOptions()) && mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.toObject(includeInstance, f),\n\t    minDetectionConfidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.5)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions;\n\t  return proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.deserializeBinaryFromReader);\n\t      msg.setBaseOptions(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setMinDetectionConfidence(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getBaseOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    474472470,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[474472470] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[474472470] = proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.ext;\n\n\t/**\n\t * optional mediapipe.tasks.core.proto.BaseOptions base_options = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.getBaseOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.BaseOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.BaseOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.setBaseOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.clearBaseOptions = function() {\n\t  return this.setBaseOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.hasBaseOptions = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional float min_detection_confidence = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.getMinDetectionConfidence = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.5));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.setMinDetectionConfidence = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.clearMinDetectionConfidence = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.prototype.hasMinDetectionConfidence = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    474472470,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[474472470] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[474472470] = proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.vision.hand_landmarker.proto);\n} (hand_landmarks_detector_graph_options_pb));\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/vision/hand_landmarker/proto/hand_landmarker_graph_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tvar mediapipe_tasks_cc_core_proto_base_options_pb = base_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_base_options_pb);\n\tvar mediapipe_tasks_cc_vision_hand_detector_proto_hand_detector_graph_options_pb = hand_detector_graph_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_vision_hand_detector_proto_hand_detector_graph_options_pb);\n\tvar mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarks_detector_graph_options_pb = hand_landmarks_detector_graph_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarks_detector_graph_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.displayName = 'proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    baseOptions: (f = msg.getBaseOptions()) && mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.toObject(includeInstance, f),\n\t    handDetectorGraphOptions: (f = msg.getHandDetectorGraphOptions()) && mediapipe_tasks_cc_vision_hand_detector_proto_hand_detector_graph_options_pb.HandDetectorGraphOptions.toObject(includeInstance, f),\n\t    handLandmarksDetectorGraphOptions: (f = msg.getHandLandmarksDetectorGraphOptions()) && mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarks_detector_graph_options_pb.HandLandmarksDetectorGraphOptions.toObject(includeInstance, f),\n\t    minTrackingConfidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.5)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions;\n\t  return proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.deserializeBinaryFromReader);\n\t      msg.setBaseOptions(value);\n\t      break;\n\t    case 2:\n\t      var value = new mediapipe_tasks_cc_vision_hand_detector_proto_hand_detector_graph_options_pb.HandDetectorGraphOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_vision_hand_detector_proto_hand_detector_graph_options_pb.HandDetectorGraphOptions.deserializeBinaryFromReader);\n\t      msg.setHandDetectorGraphOptions(value);\n\t      break;\n\t    case 3:\n\t      var value = new mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarks_detector_graph_options_pb.HandLandmarksDetectorGraphOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarks_detector_graph_options_pb.HandLandmarksDetectorGraphOptions.deserializeBinaryFromReader);\n\t      msg.setHandLandmarksDetectorGraphOptions(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setMinTrackingConfidence(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getBaseOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getHandDetectorGraphOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      2,\n\t      f,\n\t      mediapipe_tasks_cc_vision_hand_detector_proto_hand_detector_graph_options_pb.HandDetectorGraphOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getHandLandmarksDetectorGraphOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarks_detector_graph_options_pb.HandLandmarksDetectorGraphOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    462713202,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[462713202] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[462713202] = proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.ext;\n\n\t/**\n\t * optional mediapipe.tasks.core.proto.BaseOptions base_options = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.getBaseOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.BaseOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.BaseOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.setBaseOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.clearBaseOptions = function() {\n\t  return this.setBaseOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.hasBaseOptions = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions hand_detector_graph_options = 2;\n\t * @return {?proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.getHandDetectorGraphOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_vision_hand_detector_proto_hand_detector_graph_options_pb.HandDetectorGraphOptions, 2));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.vision.hand_detector.proto.HandDetectorGraphOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.setHandDetectorGraphOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.clearHandDetectorGraphOptions = function() {\n\t  return this.setHandDetectorGraphOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.hasHandDetectorGraphOptions = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional HandLandmarksDetectorGraphOptions hand_landmarks_detector_graph_options = 3;\n\t * @return {?proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.getHandLandmarksDetectorGraphOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarks_detector_graph_options_pb.HandLandmarksDetectorGraphOptions, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarksDetectorGraphOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.setHandLandmarksDetectorGraphOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.clearHandLandmarksDetectorGraphOptions = function() {\n\t  return this.setHandLandmarksDetectorGraphOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.hasHandLandmarksDetectorGraphOptions = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional float min_tracking_confidence = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.getMinTrackingConfidence = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.5));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.setMinTrackingConfidence = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.clearMinTrackingConfidence = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.prototype.hasMinTrackingConfidence = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    462713202,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[462713202] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[462713202] = proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.vision.hand_landmarker.proto);\n} (hand_landmarker_graph_options_pb));\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/vision/gesture_recognizer/proto/gesture_recognizer_graph_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tvar mediapipe_tasks_cc_core_proto_base_options_pb = base_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_base_options_pb);\n\tvar mediapipe_tasks_cc_vision_gesture_recognizer_proto_hand_gesture_recognizer_graph_options_pb = hand_gesture_recognizer_graph_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_vision_gesture_recognizer_proto_hand_gesture_recognizer_graph_options_pb);\n\tvar mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarker_graph_options_pb = hand_landmarker_graph_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarker_graph_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.displayName = 'proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions';\n\t}\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    baseOptions: (f = msg.getBaseOptions()) && mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.toObject(includeInstance, f),\n\t    handLandmarkerGraphOptions: (f = msg.getHandLandmarkerGraphOptions()) && mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarker_graph_options_pb.HandLandmarkerGraphOptions.toObject(includeInstance, f),\n\t    handGestureRecognizerGraphOptions: (f = msg.getHandGestureRecognizerGraphOptions()) && mediapipe_tasks_cc_vision_gesture_recognizer_proto_hand_gesture_recognizer_graph_options_pb.HandGestureRecognizerGraphOptions.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions;\n\t  return proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.deserializeBinaryFromReader);\n\t      msg.setBaseOptions(value);\n\t      break;\n\t    case 2:\n\t      var value = new mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarker_graph_options_pb.HandLandmarkerGraphOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarker_graph_options_pb.HandLandmarkerGraphOptions.deserializeBinaryFromReader);\n\t      msg.setHandLandmarkerGraphOptions(value);\n\t      break;\n\t    case 3:\n\t      var value = new mediapipe_tasks_cc_vision_gesture_recognizer_proto_hand_gesture_recognizer_graph_options_pb.HandGestureRecognizerGraphOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_vision_gesture_recognizer_proto_hand_gesture_recognizer_graph_options_pb.HandGestureRecognizerGraphOptions.deserializeBinaryFromReader);\n\t      msg.setHandGestureRecognizerGraphOptions(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getBaseOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getHandLandmarkerGraphOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      2,\n\t      f,\n\t      mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarker_graph_options_pb.HandLandmarkerGraphOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getHandGestureRecognizerGraphOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      mediapipe_tasks_cc_vision_gesture_recognizer_proto_hand_gesture_recognizer_graph_options_pb.HandGestureRecognizerGraphOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    479097054,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[479097054] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[479097054] = proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.ext;\n\n\t/**\n\t * optional mediapipe.tasks.core.proto.BaseOptions base_options = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.getBaseOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.BaseOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.BaseOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.setBaseOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.clearBaseOptions = function() {\n\t  return this.setBaseOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.hasBaseOptions = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions hand_landmarker_graph_options = 2;\n\t * @return {?proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.getHandLandmarkerGraphOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_vision_hand_landmarker_proto_hand_landmarker_graph_options_pb.HandLandmarkerGraphOptions, 2));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.vision.hand_landmarker.proto.HandLandmarkerGraphOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.setHandLandmarkerGraphOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.clearHandLandmarkerGraphOptions = function() {\n\t  return this.setHandLandmarkerGraphOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.hasHandLandmarkerGraphOptions = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional HandGestureRecognizerGraphOptions hand_gesture_recognizer_graph_options = 3;\n\t * @return {?proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.getHandGestureRecognizerGraphOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_vision_gesture_recognizer_proto_hand_gesture_recognizer_graph_options_pb.HandGestureRecognizerGraphOptions, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.vision.gesture_recognizer.proto.HandGestureRecognizerGraphOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.setHandGestureRecognizerGraphOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.clearHandGestureRecognizerGraphOptions = function() {\n\t  return this.setHandGestureRecognizerGraphOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.prototype.hasHandGestureRecognizerGraphOptions = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.ext = new jspb.ExtensionFieldInfo(\n\t    479097054,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[479097054] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[479097054] = proto.mediapipe.tasks.vision.gesture_recognizer.proto.GestureRecognizerGraphOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.vision.gesture_recognizer.proto);\n} (gesture_recognizer_graph_options_pb));\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(gesture_recognizer, \"__esModule\", { value: true });\ngesture_recognizer.GestureRecognizer = void 0;\nconst calculator_pb_1$1 = calculator_pb;\nconst calculator_options_pb_1$1 = calculator_options_pb;\nconst classification_pb_1 = classification_pb;\nconst landmark_pb_1 = landmark_pb;\nconst rect_pb_1 = rect_pb;\nconst gesture_classifier_graph_options_pb_1 = gesture_classifier_graph_options_pb;\nconst gesture_recognizer_graph_options_pb_1 = gesture_recognizer_graph_options_pb;\nconst hand_gesture_recognizer_graph_options_pb_1 = hand_gesture_recognizer_graph_options_pb;\nconst hand_detector_graph_options_pb_1 = hand_detector_graph_options_pb;\nconst hand_landmarker_graph_options_pb_1 = hand_landmarker_graph_options_pb;\nconst hand_landmarks_detector_graph_options_pb_1 = hand_landmarks_detector_graph_options_pb;\nconst base_options_1$1 = base_options;\nconst classifier_options_1 = classifier_options;\nconst task_runner_1$1 = task_runner;\nconst wasm_mediapipe_lib_1$1 = wasm_mediapipe_lib;\n// The OSS JS API does not support the builder pattern.\n// tslint:disable:jspb-use-builder-pattern\nconst IMAGE_STREAM = 'image_in';\nconst NORM_RECT_STREAM = 'norm_rect';\nconst HAND_GESTURES_STREAM = 'hand_gestures';\nconst LANDMARKS_STREAM = 'hand_landmarks';\nconst WORLD_LANDMARKS_STREAM = 'world_hand_landmarks';\nconst HANDEDNESS_STREAM = 'handedness';\nconst GESTURE_RECOGNIZER_GRAPH = 'mediapipe.tasks.vision.gesture_recognizer.GestureRecognizerGraph';\nconst DEFAULT_NUM_HANDS = 1;\nconst DEFAULT_SCORE_THRESHOLD = 0.5;\nconst DEFAULT_CATEGORY_INDEX$1 = -1;\nconst FULL_IMAGE_RECT = new rect_pb_1.NormalizedRect();\nFULL_IMAGE_RECT.setXCenter(0.5);\nFULL_IMAGE_RECT.setYCenter(0.5);\nFULL_IMAGE_RECT.setWidth(1);\nFULL_IMAGE_RECT.setHeight(1);\n/** Performs hand gesture recognition on images. */\nclass GestureRecognizer extends task_runner_1$1.TaskRunner {\n    constructor(wasmModule) {\n        super(wasmModule);\n        this.gestures = [];\n        this.landmarks = [];\n        this.worldLandmarks = [];\n        this.handednesses = [];\n        this.options = new gesture_recognizer_graph_options_pb_1.GestureRecognizerGraphOptions();\n        this.handLandmarkerGraphOptions = new hand_landmarker_graph_options_pb_1.HandLandmarkerGraphOptions();\n        this.options.setHandLandmarkerGraphOptions(this.handLandmarkerGraphOptions);\n        this.handLandmarksDetectorGraphOptions =\n            new hand_landmarks_detector_graph_options_pb_1.HandLandmarksDetectorGraphOptions();\n        this.handLandmarkerGraphOptions.setHandLandmarksDetectorGraphOptions(this.handLandmarksDetectorGraphOptions);\n        this.handDetectorGraphOptions = new hand_detector_graph_options_pb_1.HandDetectorGraphOptions();\n        this.handLandmarkerGraphOptions.setHandDetectorGraphOptions(this.handDetectorGraphOptions);\n        this.handGestureRecognizerGraphOptions =\n            new hand_gesture_recognizer_graph_options_pb_1.HandGestureRecognizerGraphOptions();\n        this.options.setHandGestureRecognizerGraphOptions(this.handGestureRecognizerGraphOptions);\n        this.initDefaults();\n        // Disables the automatic render-to-screen code, which allows for pure\n        // CPU processing.\n        this.setAutoRenderToScreen(false);\n    }\n    /**\n     * Initializes the Wasm runtime and creates a new gesture recognizer from the\n     * provided options.\n     * @param wasmLoaderOptions A configuration object that provides the location\n     *     of the Wasm binary and its loader.\n     * @param gestureRecognizerOptions The options for the gesture recognizer.\n     *     Note that either a path to the model asset or a model buffer needs to\n     *     be provided (via `baseOptions`).\n     */\n    static async createFromOptions(wasmLoaderOptions, gestureRecognizerOptions) {\n        // Create a file locator based on the loader options\n        const fileLocator = {\n            locateFile() {\n                // The only file we load via this mechanism is the Wasm binary\n                return wasmLoaderOptions.wasmBinaryPath.toString();\n            }\n        };\n        const recognizer = await (0, wasm_mediapipe_lib_1$1.createMediaPipeLib)(GestureRecognizer, wasmLoaderOptions.wasmLoaderPath, \n        /* assetLoaderScript= */ undefined, \n        /* glCanvas= */ undefined, fileLocator);\n        await recognizer.setOptions(gestureRecognizerOptions);\n        return recognizer;\n    }\n    /**\n     * Initializes the Wasm runtime and creates a new gesture recognizer based on\n     * the provided model asset buffer.\n     * @param wasmLoaderOptions A configuration object that provides the location\n     *     of the Wasm binary and its loader.\n     * @param modelAssetBuffer A binary representation of the model.\n     */\n    static createFromModelBuffer(wasmLoaderOptions, modelAssetBuffer) {\n        return GestureRecognizer.createFromOptions(wasmLoaderOptions, { baseOptions: { modelAssetBuffer } });\n    }\n    /**\n     * Initializes the Wasm runtime and creates a new gesture recognizer based on\n     * the path to the model asset.\n     * @param wasmLoaderOptions A configuration object that provides the location\n     *     of the Wasm binary and its loader.\n     * @param modelAssetPath The path to the model asset.\n     */\n    static async createFromModelPath(wasmLoaderOptions, modelAssetPath) {\n        const response = await fetch(modelAssetPath.toString());\n        const graphData = await response.arrayBuffer();\n        return GestureRecognizer.createFromModelBuffer(wasmLoaderOptions, new Uint8Array(graphData));\n    }\n    /**\n     * Sets new options for the gesture recognizer.\n     *\n     * Calling `setOptions()` with a subset of options only affects those options.\n     * You can reset an option back to its default value by explicitly setting it\n     * to `undefined`.\n     *\n     * @param options The options for the gesture recognizer.\n     */\n    async setOptions(options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if (options.baseOptions) {\n            const baseOptionsProto = await (0, base_options_1$1.convertBaseOptionsToProto)(options.baseOptions, this.options.getBaseOptions());\n            this.options.setBaseOptions(baseOptionsProto);\n        }\n        if ('numHands' in options) {\n            this.handDetectorGraphOptions.setNumHands((_a = options.numHands) !== null && _a !== void 0 ? _a : DEFAULT_NUM_HANDS);\n        }\n        if ('minHandDetectionConfidence' in options) {\n            this.handDetectorGraphOptions.setMinDetectionConfidence((_b = options.minHandDetectionConfidence) !== null && _b !== void 0 ? _b : DEFAULT_SCORE_THRESHOLD);\n        }\n        if ('minHandPresenceConfidence' in options) {\n            this.handLandmarksDetectorGraphOptions.setMinDetectionConfidence((_c = options.minHandPresenceConfidence) !== null && _c !== void 0 ? _c : DEFAULT_SCORE_THRESHOLD);\n        }\n        if ('minTrackingConfidence' in options) {\n            this.handLandmarkerGraphOptions.setMinTrackingConfidence((_d = options.minTrackingConfidence) !== null && _d !== void 0 ? _d : DEFAULT_SCORE_THRESHOLD);\n        }\n        if (options.cannedGesturesClassifierOptions) {\n            // Note that we have to support both JSPB and ProtobufJS and cannot\n            // use JSPB's getMutableX() APIs.\n            const graphOptions = new gesture_classifier_graph_options_pb_1.GestureClassifierGraphOptions();\n            graphOptions.setClassifierOptions((0, classifier_options_1.convertClassifierOptionsToProto)(options.cannedGesturesClassifierOptions, (_e = this.handGestureRecognizerGraphOptions\n                .getCannedGestureClassifierGraphOptions()) === null || _e === void 0 ? void 0 : _e.getClassifierOptions()));\n            this.handGestureRecognizerGraphOptions\n                .setCannedGestureClassifierGraphOptions(graphOptions);\n        }\n        else if (options.cannedGesturesClassifierOptions === undefined) {\n            (_f = this.handGestureRecognizerGraphOptions\n                .getCannedGestureClassifierGraphOptions()) === null || _f === void 0 ? void 0 : _f.clearClassifierOptions();\n        }\n        if (options.customGesturesClassifierOptions) {\n            const graphOptions = new gesture_classifier_graph_options_pb_1.GestureClassifierGraphOptions();\n            graphOptions.setClassifierOptions((0, classifier_options_1.convertClassifierOptionsToProto)(options.customGesturesClassifierOptions, (_g = this.handGestureRecognizerGraphOptions\n                .getCustomGestureClassifierGraphOptions()) === null || _g === void 0 ? void 0 : _g.getClassifierOptions()));\n            this.handGestureRecognizerGraphOptions\n                .setCustomGestureClassifierGraphOptions(graphOptions);\n        }\n        else if (options.customGesturesClassifierOptions === undefined) {\n            (_h = this.handGestureRecognizerGraphOptions\n                .getCustomGestureClassifierGraphOptions()) === null || _h === void 0 ? void 0 : _h.clearClassifierOptions();\n        }\n        this.refreshGraph();\n    }\n    /**\n     * Performs gesture recognition on the provided single image and waits\n     * synchronously for the response.\n     * @param imageSource An image source to process.\n     * @param timestamp The timestamp of the current frame, in ms. If not\n     *    provided, defaults to `performance.now()`.\n     * @return The detected gestures.\n     */\n    recognize(imageSource, timestamp = performance.now()) {\n        this.gestures = [];\n        this.landmarks = [];\n        this.worldLandmarks = [];\n        this.handednesses = [];\n        this.addGpuBufferAsImageToStream(imageSource, IMAGE_STREAM, timestamp);\n        this.addProtoToStream(FULL_IMAGE_RECT.serializeBinary(), 'mediapipe.NormalizedRect', NORM_RECT_STREAM, timestamp);\n        this.finishProcessing();\n        return {\n            gestures: this.gestures,\n            landmarks: this.landmarks,\n            worldLandmarks: this.worldLandmarks,\n            handednesses: this.handednesses\n        };\n    }\n    /** Sets the default values for the graph. */\n    initDefaults() {\n        this.handDetectorGraphOptions.setNumHands(DEFAULT_NUM_HANDS);\n        this.handDetectorGraphOptions.setMinDetectionConfidence(DEFAULT_SCORE_THRESHOLD);\n        this.handLandmarksDetectorGraphOptions.setMinDetectionConfidence(DEFAULT_SCORE_THRESHOLD);\n        this.handLandmarkerGraphOptions.setMinTrackingConfidence(DEFAULT_SCORE_THRESHOLD);\n    }\n    /** Converts the proto data to a Category[][] structure. */\n    toJsCategories(data) {\n        var _a, _b, _c, _d;\n        const result = [];\n        for (const binaryProto of data) {\n            const inputList = classification_pb_1.ClassificationList.deserializeBinary(binaryProto);\n            const outputList = [];\n            for (const classification of inputList.getClassificationList()) {\n                outputList.push({\n                    score: (_a = classification.getScore()) !== null && _a !== void 0 ? _a : 0,\n                    index: (_b = classification.getIndex()) !== null && _b !== void 0 ? _b : DEFAULT_CATEGORY_INDEX$1,\n                    categoryName: (_c = classification.getLabel()) !== null && _c !== void 0 ? _c : '',\n                    displayName: (_d = classification.getDisplayName()) !== null && _d !== void 0 ? _d : '',\n                });\n            }\n            result.push(outputList);\n        }\n        return result;\n    }\n    /** Converts raw data into a landmark, and adds it to our landmarks list. */\n    addJsLandmarks(data) {\n        var _a, _b, _c;\n        for (const binaryProto of data) {\n            const handLandmarksProto = landmark_pb_1.NormalizedLandmarkList.deserializeBinary(binaryProto);\n            const landmarks = [];\n            for (const handLandmarkProto of handLandmarksProto.getLandmarkList()) {\n                landmarks.push({\n                    x: (_a = handLandmarkProto.getX()) !== null && _a !== void 0 ? _a : 0,\n                    y: (_b = handLandmarkProto.getY()) !== null && _b !== void 0 ? _b : 0,\n                    z: (_c = handLandmarkProto.getZ()) !== null && _c !== void 0 ? _c : 0,\n                    normalized: true\n                });\n            }\n            this.landmarks.push(landmarks);\n        }\n    }\n    /**\n     * Converts raw data into a landmark, and adds it to our worldLandmarks\n     * list.\n     */\n    adddJsWorldLandmarks(data) {\n        var _a, _b, _c;\n        for (const binaryProto of data) {\n            const handWorldLandmarksProto = landmark_pb_1.LandmarkList.deserializeBinary(binaryProto);\n            const worldLandmarks = [];\n            for (const handWorldLandmarkProto of handWorldLandmarksProto.getLandmarkList()) {\n                worldLandmarks.push({\n                    x: (_a = handWorldLandmarkProto.getX()) !== null && _a !== void 0 ? _a : 0,\n                    y: (_b = handWorldLandmarkProto.getY()) !== null && _b !== void 0 ? _b : 0,\n                    z: (_c = handWorldLandmarkProto.getZ()) !== null && _c !== void 0 ? _c : 0,\n                    normalized: false\n                });\n            }\n            this.worldLandmarks.push(worldLandmarks);\n        }\n    }\n    /** Updates the MediaPipe graph configuration. */\n    refreshGraph() {\n        const graphConfig = new calculator_pb_1$1.CalculatorGraphConfig();\n        graphConfig.addInputStream(IMAGE_STREAM);\n        graphConfig.addInputStream(NORM_RECT_STREAM);\n        graphConfig.addOutputStream(HAND_GESTURES_STREAM);\n        graphConfig.addOutputStream(LANDMARKS_STREAM);\n        graphConfig.addOutputStream(WORLD_LANDMARKS_STREAM);\n        graphConfig.addOutputStream(HANDEDNESS_STREAM);\n        const calculatorOptions = new calculator_options_pb_1$1.CalculatorOptions();\n        calculatorOptions.setExtension(gesture_recognizer_graph_options_pb_1.GestureRecognizerGraphOptions.ext, this.options);\n        const recognizerNode = new calculator_pb_1$1.CalculatorGraphConfig.Node();\n        recognizerNode.setCalculator(GESTURE_RECOGNIZER_GRAPH);\n        recognizerNode.addInputStream('IMAGE:' + IMAGE_STREAM);\n        recognizerNode.addInputStream('NORM_RECT:' + NORM_RECT_STREAM);\n        recognizerNode.addOutputStream('HAND_GESTURES:' + HAND_GESTURES_STREAM);\n        recognizerNode.addOutputStream('LANDMARKS:' + LANDMARKS_STREAM);\n        recognizerNode.addOutputStream('WORLD_LANDMARKS:' + WORLD_LANDMARKS_STREAM);\n        recognizerNode.addOutputStream('HANDEDNESS:' + HANDEDNESS_STREAM);\n        recognizerNode.setOptions(calculatorOptions);\n        graphConfig.addNode(recognizerNode);\n        this.attachProtoVectorListener(LANDMARKS_STREAM, binaryProto => {\n            this.addJsLandmarks(binaryProto);\n        });\n        this.attachProtoVectorListener(WORLD_LANDMARKS_STREAM, binaryProto => {\n            this.adddJsWorldLandmarks(binaryProto);\n        });\n        this.attachProtoVectorListener(HAND_GESTURES_STREAM, binaryProto => {\n            this.gestures.push(...this.toJsCategories(binaryProto));\n        });\n        this.attachProtoVectorListener(HANDEDNESS_STREAM, binaryProto => {\n            this.handednesses.push(...this.toJsCategories(binaryProto));\n        });\n        const binaryGraph = graphConfig.serializeBinary();\n        this.setGraph(new Uint8Array(binaryGraph), /* isBinary= */ true);\n    }\n}\ngesture_recognizer.GestureRecognizer = GestureRecognizer;\n\nvar object_detector_options = {};\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(object_detector_options, \"__esModule\", { value: true });\n\nvar object_detector_result = {};\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(object_detector_result, \"__esModule\", { value: true });\n\nvar object_detector = {};\n\nvar detection_pb = {};\n\nvar location_data_pb = {};\n\nvar rasterization_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/framework/formats/annotation/rasterization.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tgoog.exportSymbol('proto.mediapipe.Rasterization', null, global);\n\tgoog.exportSymbol('proto.mediapipe.Rasterization.Interval', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.Rasterization = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.Rasterization.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.Rasterization, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.Rasterization.displayName = 'proto.mediapipe.Rasterization';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.Rasterization.Interval = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.Rasterization.Interval, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.Rasterization.Interval.displayName = 'proto.mediapipe.Rasterization.Interval';\n\t}\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.Rasterization.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.Rasterization.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.Rasterization.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.Rasterization} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Rasterization.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    intervalList: jspb.Message.toObjectList(msg.getIntervalList(),\n\t    proto.mediapipe.Rasterization.Interval.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.Rasterization}\n\t */\n\tproto.mediapipe.Rasterization.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.Rasterization;\n\t  return proto.mediapipe.Rasterization.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.Rasterization} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.Rasterization}\n\t */\n\tproto.mediapipe.Rasterization.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.Rasterization.Interval;\n\t      reader.readMessage(value,proto.mediapipe.Rasterization.Interval.deserializeBinaryFromReader);\n\t      msg.addInterval(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.Rasterization.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.Rasterization.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.Rasterization} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Rasterization.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getIntervalList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.Rasterization.Interval.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.Rasterization.Interval.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.Rasterization.Interval} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Rasterization.Interval.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    y: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    leftX: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    rightX: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.Rasterization.Interval}\n\t */\n\tproto.mediapipe.Rasterization.Interval.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.Rasterization.Interval;\n\t  return proto.mediapipe.Rasterization.Interval.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.Rasterization.Interval} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.Rasterization.Interval}\n\t */\n\tproto.mediapipe.Rasterization.Interval.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setY(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setLeftX(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setRightX(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.Rasterization.Interval.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.Rasterization.Interval} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Rasterization.Interval.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * required int32 y = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.getY = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Rasterization.Interval} returns this\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.setY = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Rasterization.Interval} returns this\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.clearY = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.hasY = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * required int32 left_x = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.getLeftX = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Rasterization.Interval} returns this\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.setLeftX = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Rasterization.Interval} returns this\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.clearLeftX = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.hasLeftX = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * required int32 right_x = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.getRightX = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Rasterization.Interval} returns this\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.setRightX = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Rasterization.Interval} returns this\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.clearRightX = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Rasterization.Interval.prototype.hasRightX = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * repeated Interval interval = 1;\n\t * @return {!Array<!proto.mediapipe.Rasterization.Interval>}\n\t */\n\tproto.mediapipe.Rasterization.prototype.getIntervalList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.Rasterization.Interval>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.Rasterization.Interval, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.Rasterization.Interval>} value\n\t * @return {!proto.mediapipe.Rasterization} returns this\n\t*/\n\tproto.mediapipe.Rasterization.prototype.setIntervalList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.Rasterization.Interval=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.Rasterization.Interval}\n\t */\n\tproto.mediapipe.Rasterization.prototype.addInterval = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.Rasterization.Interval, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.Rasterization} returns this\n\t */\n\tproto.mediapipe.Rasterization.prototype.clearIntervalList = function() {\n\t  return this.setIntervalList([]);\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (rasterization_pb));\n\n(function (exports) {\n\t// source: mediapipe/framework/formats/location_data.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_formats_annotation_rasterization_pb = rasterization_pb;\n\tgoog.object.extend(proto, mediapipe_framework_formats_annotation_rasterization_pb);\n\tgoog.exportSymbol('proto.mediapipe.LocationData', null, global);\n\tgoog.exportSymbol('proto.mediapipe.LocationData.BinaryMask', null, global);\n\tgoog.exportSymbol('proto.mediapipe.LocationData.BoundingBox', null, global);\n\tgoog.exportSymbol('proto.mediapipe.LocationData.Format', null, global);\n\tgoog.exportSymbol('proto.mediapipe.LocationData.RelativeBoundingBox', null, global);\n\tgoog.exportSymbol('proto.mediapipe.LocationData.RelativeKeypoint', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.LocationData = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.LocationData.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.LocationData, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.LocationData.displayName = 'proto.mediapipe.LocationData';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.LocationData.BoundingBox = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.LocationData.BoundingBox, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.LocationData.BoundingBox.displayName = 'proto.mediapipe.LocationData.BoundingBox';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.LocationData.RelativeBoundingBox, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.LocationData.RelativeBoundingBox.displayName = 'proto.mediapipe.LocationData.RelativeBoundingBox';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.LocationData.BinaryMask = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.LocationData.BinaryMask, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.LocationData.BinaryMask.displayName = 'proto.mediapipe.LocationData.BinaryMask';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.LocationData.RelativeKeypoint, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.LocationData.RelativeKeypoint.displayName = 'proto.mediapipe.LocationData.RelativeKeypoint';\n\t}\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.LocationData.repeatedFields_ = [5];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.LocationData.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.LocationData.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.LocationData} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    format: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    boundingBox: (f = msg.getBoundingBox()) && proto.mediapipe.LocationData.BoundingBox.toObject(includeInstance, f),\n\t    relativeBoundingBox: (f = msg.getRelativeBoundingBox()) && proto.mediapipe.LocationData.RelativeBoundingBox.toObject(includeInstance, f),\n\t    mask: (f = msg.getMask()) && proto.mediapipe.LocationData.BinaryMask.toObject(includeInstance, f),\n\t    relativeKeypointsList: jspb.Message.toObjectList(msg.getRelativeKeypointsList(),\n\t    proto.mediapipe.LocationData.RelativeKeypoint.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.LocationData}\n\t */\n\tproto.mediapipe.LocationData.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.LocationData;\n\t  return proto.mediapipe.LocationData.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.LocationData} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.LocationData}\n\t */\n\tproto.mediapipe.LocationData.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {!proto.mediapipe.LocationData.Format} */ (reader.readEnum());\n\t      msg.setFormat(value);\n\t      break;\n\t    case 2:\n\t      var value = new proto.mediapipe.LocationData.BoundingBox;\n\t      reader.readMessage(value,proto.mediapipe.LocationData.BoundingBox.deserializeBinaryFromReader);\n\t      msg.setBoundingBox(value);\n\t      break;\n\t    case 3:\n\t      var value = new proto.mediapipe.LocationData.RelativeBoundingBox;\n\t      reader.readMessage(value,proto.mediapipe.LocationData.RelativeBoundingBox.deserializeBinaryFromReader);\n\t      msg.setRelativeBoundingBox(value);\n\t      break;\n\t    case 4:\n\t      var value = new proto.mediapipe.LocationData.BinaryMask;\n\t      reader.readMessage(value,proto.mediapipe.LocationData.BinaryMask.deserializeBinaryFromReader);\n\t      msg.setMask(value);\n\t      break;\n\t    case 5:\n\t      var value = new proto.mediapipe.LocationData.RelativeKeypoint;\n\t      reader.readMessage(value,proto.mediapipe.LocationData.RelativeKeypoint.deserializeBinaryFromReader);\n\t      msg.addRelativeKeypoints(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.LocationData.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.LocationData.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.LocationData} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {!proto.mediapipe.LocationData.Format} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeEnum(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getBoundingBox();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      2,\n\t      f,\n\t      proto.mediapipe.LocationData.BoundingBox.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getRelativeBoundingBox();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      proto.mediapipe.LocationData.RelativeBoundingBox.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getMask();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      4,\n\t      f,\n\t      proto.mediapipe.LocationData.BinaryMask.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getRelativeKeypointsList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      5,\n\t      f,\n\t      proto.mediapipe.LocationData.RelativeKeypoint.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * @enum {number}\n\t */\n\tproto.mediapipe.LocationData.Format = {\n\t  GLOBAL: 0,\n\t  BOUNDING_BOX: 1,\n\t  RELATIVE_BOUNDING_BOX: 2,\n\t  MASK: 3\n\t};\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.LocationData.BoundingBox.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.LocationData.BoundingBox} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    xmin: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    ymin: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    width: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,\n\t    height: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.LocationData.BoundingBox}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.LocationData.BoundingBox;\n\t  return proto.mediapipe.LocationData.BoundingBox.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.LocationData.BoundingBox} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.LocationData.BoundingBox}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setXmin(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setYmin(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setWidth(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setHeight(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.LocationData.BoundingBox.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.LocationData.BoundingBox} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional int32 xmin = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.getXmin = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.BoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.setXmin = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.BoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.clearXmin = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.hasXmin = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional int32 ymin = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.getYmin = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.BoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.setYmin = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.BoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.clearYmin = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.hasYmin = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional int32 width = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.getWidth = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.BoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.setWidth = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.BoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.clearWidth = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.hasWidth = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional int32 height = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.getHeight = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.BoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.setHeight = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.BoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.clearHeight = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.BoundingBox.prototype.hasHeight = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.LocationData.RelativeBoundingBox.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.LocationData.RelativeBoundingBox} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    xmin: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,\n\t    ymin: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,\n\t    width: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,\n\t    height: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.LocationData.RelativeBoundingBox;\n\t  return proto.mediapipe.LocationData.RelativeBoundingBox.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.LocationData.RelativeBoundingBox} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setXmin(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setYmin(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setWidth(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setHeight(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.LocationData.RelativeBoundingBox.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.LocationData.RelativeBoundingBox} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional float xmin = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.getXmin = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.setXmin = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.clearXmin = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.hasXmin = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional float ymin = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.getYmin = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.setYmin = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.clearYmin = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.hasYmin = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional float width = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.getWidth = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.setWidth = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.clearWidth = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.hasWidth = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional float height = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.getHeight = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.setHeight = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.RelativeBoundingBox} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.clearHeight = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.RelativeBoundingBox.prototype.hasHeight = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.LocationData.BinaryMask.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.LocationData.BinaryMask} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    width: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    height: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,\n\t    rasterization: (f = msg.getRasterization()) && mediapipe_framework_formats_annotation_rasterization_pb.Rasterization.toObject(includeInstance, f)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.LocationData.BinaryMask}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.LocationData.BinaryMask;\n\t  return proto.mediapipe.LocationData.BinaryMask.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.LocationData.BinaryMask} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.LocationData.BinaryMask}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setWidth(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setHeight(value);\n\t      break;\n\t    case 3:\n\t      var value = new mediapipe_framework_formats_annotation_rasterization_pb.Rasterization;\n\t      reader.readMessage(value,mediapipe_framework_formats_annotation_rasterization_pb.Rasterization.deserializeBinaryFromReader);\n\t      msg.setRasterization(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.LocationData.BinaryMask.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.LocationData.BinaryMask} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getRasterization();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      3,\n\t      f,\n\t      mediapipe_framework_formats_annotation_rasterization_pb.Rasterization.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional int32 width = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.getWidth = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.BinaryMask} returns this\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.setWidth = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.BinaryMask} returns this\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.clearWidth = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.hasWidth = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional int32 height = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.getHeight = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.BinaryMask} returns this\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.setHeight = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.BinaryMask} returns this\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.clearHeight = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.hasHeight = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional Rasterization rasterization = 3;\n\t * @return {?proto.mediapipe.Rasterization}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.getRasterization = function() {\n\t  return /** @type{?proto.mediapipe.Rasterization} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_formats_annotation_rasterization_pb.Rasterization, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.Rasterization|undefined} value\n\t * @return {!proto.mediapipe.LocationData.BinaryMask} returns this\n\t*/\n\tproto.mediapipe.LocationData.BinaryMask.prototype.setRasterization = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.BinaryMask} returns this\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.clearRasterization = function() {\n\t  return this.setRasterization(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.BinaryMask.prototype.hasRasterization = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.LocationData.RelativeKeypoint.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.LocationData.RelativeKeypoint} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,\n\t    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,\n\t    keypointLabel: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,\n\t    score: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.LocationData.RelativeKeypoint;\n\t  return proto.mediapipe.LocationData.RelativeKeypoint.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.LocationData.RelativeKeypoint} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setX(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setY(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setKeypointLabel(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setScore(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.LocationData.RelativeKeypoint.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.LocationData.RelativeKeypoint} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional float x = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.getX = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.setX = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.clearX = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.hasX = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional float y = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.getY = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.setY = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.clearY = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.hasY = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional string keypoint_label = 3;\n\t * @return {string}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.getKeypointLabel = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.setKeypointLabel = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.clearKeypointLabel = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.hasKeypointLabel = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional float score = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.getScore = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.setScore = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint} returns this\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.clearScore = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.RelativeKeypoint.prototype.hasScore = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * optional Format format = 1;\n\t * @return {!proto.mediapipe.LocationData.Format}\n\t */\n\tproto.mediapipe.LocationData.prototype.getFormat = function() {\n\t  return /** @type {!proto.mediapipe.LocationData.Format} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.LocationData.Format} value\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t */\n\tproto.mediapipe.LocationData.prototype.setFormat = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t */\n\tproto.mediapipe.LocationData.prototype.clearFormat = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.prototype.hasFormat = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional BoundingBox bounding_box = 2;\n\t * @return {?proto.mediapipe.LocationData.BoundingBox}\n\t */\n\tproto.mediapipe.LocationData.prototype.getBoundingBox = function() {\n\t  return /** @type{?proto.mediapipe.LocationData.BoundingBox} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.LocationData.BoundingBox, 2));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.LocationData.BoundingBox|undefined} value\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t*/\n\tproto.mediapipe.LocationData.prototype.setBoundingBox = function(value) {\n\t  return jspb.Message.setWrapperField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t */\n\tproto.mediapipe.LocationData.prototype.clearBoundingBox = function() {\n\t  return this.setBoundingBox(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.prototype.hasBoundingBox = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional RelativeBoundingBox relative_bounding_box = 3;\n\t * @return {?proto.mediapipe.LocationData.RelativeBoundingBox}\n\t */\n\tproto.mediapipe.LocationData.prototype.getRelativeBoundingBox = function() {\n\t  return /** @type{?proto.mediapipe.LocationData.RelativeBoundingBox} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.LocationData.RelativeBoundingBox, 3));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.LocationData.RelativeBoundingBox|undefined} value\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t*/\n\tproto.mediapipe.LocationData.prototype.setRelativeBoundingBox = function(value) {\n\t  return jspb.Message.setWrapperField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t */\n\tproto.mediapipe.LocationData.prototype.clearRelativeBoundingBox = function() {\n\t  return this.setRelativeBoundingBox(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.prototype.hasRelativeBoundingBox = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional BinaryMask mask = 4;\n\t * @return {?proto.mediapipe.LocationData.BinaryMask}\n\t */\n\tproto.mediapipe.LocationData.prototype.getMask = function() {\n\t  return /** @type{?proto.mediapipe.LocationData.BinaryMask} */ (\n\t    jspb.Message.getWrapperField(this, proto.mediapipe.LocationData.BinaryMask, 4));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.LocationData.BinaryMask|undefined} value\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t*/\n\tproto.mediapipe.LocationData.prototype.setMask = function(value) {\n\t  return jspb.Message.setWrapperField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t */\n\tproto.mediapipe.LocationData.prototype.clearMask = function() {\n\t  return this.setMask(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.LocationData.prototype.hasMask = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * repeated RelativeKeypoint relative_keypoints = 5;\n\t * @return {!Array<!proto.mediapipe.LocationData.RelativeKeypoint>}\n\t */\n\tproto.mediapipe.LocationData.prototype.getRelativeKeypointsList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.LocationData.RelativeKeypoint>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.LocationData.RelativeKeypoint, 5));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.LocationData.RelativeKeypoint>} value\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t*/\n\tproto.mediapipe.LocationData.prototype.setRelativeKeypointsList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 5, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.LocationData.RelativeKeypoint=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.LocationData.RelativeKeypoint}\n\t */\n\tproto.mediapipe.LocationData.prototype.addRelativeKeypoints = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.mediapipe.LocationData.RelativeKeypoint, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.LocationData} returns this\n\t */\n\tproto.mediapipe.LocationData.prototype.clearRelativeKeypointsList = function() {\n\t  return this.setRelativeKeypointsList([]);\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (location_data_pb));\n\n(function (exports) {\n\t// source: mediapipe/framework/formats/detection.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_formats_location_data_pb = location_data_pb;\n\tgoog.object.extend(proto, mediapipe_framework_formats_location_data_pb);\n\tgoog.exportSymbol('proto.mediapipe.Detection', null, global);\n\tgoog.exportSymbol('proto.mediapipe.Detection.AssociatedDetection', null, global);\n\tgoog.exportSymbol('proto.mediapipe.DetectionList', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.Detection = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.Detection.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.Detection, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.Detection.displayName = 'proto.mediapipe.Detection';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n\t};\n\tgoog.inherits(proto.mediapipe.Detection.AssociatedDetection, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.Detection.AssociatedDetection.displayName = 'proto.mediapipe.Detection.AssociatedDetection';\n\t}\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.DetectionList = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.DetectionList.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.DetectionList, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.DetectionList.displayName = 'proto.mediapipe.DetectionList';\n\t}\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.Detection.repeatedFields_ = [1,2,3,8,9];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.Detection.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.Detection.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.Detection} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Detection.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    labelList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n\t    labelIdList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n\t    scoreList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f,\n\t    locationData: (f = msg.getLocationData()) && mediapipe_framework_formats_location_data_pb.LocationData.toObject(includeInstance, f),\n\t    featureTag: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,\n\t    trackId: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,\n\t    detectionId: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,\n\t    associatedDetectionsList: jspb.Message.toObjectList(msg.getAssociatedDetectionsList(),\n\t    proto.mediapipe.Detection.AssociatedDetection.toObject, includeInstance),\n\t    displayNameList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,\n\t    timestampUsec: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.Detection}\n\t */\n\tproto.mediapipe.Detection.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.Detection;\n\t  return proto.mediapipe.Detection.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.Detection} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.Detection}\n\t */\n\tproto.mediapipe.Detection.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addLabel(value);\n\t      break;\n\t    case 2:\n\t      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);\n\t      for (var i = 0; i < values.length; i++) {\n\t        msg.addLabelId(values[i]);\n\t      }\n\t      break;\n\t    case 3:\n\t      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);\n\t      for (var i = 0; i < values.length; i++) {\n\t        msg.addScore(values[i]);\n\t      }\n\t      break;\n\t    case 4:\n\t      var value = new mediapipe_framework_formats_location_data_pb.LocationData;\n\t      reader.readMessage(value,mediapipe_framework_formats_location_data_pb.LocationData.deserializeBinaryFromReader);\n\t      msg.setLocationData(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setFeatureTag(value);\n\t      break;\n\t    case 6:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setTrackId(value);\n\t      break;\n\t    case 7:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setDetectionId(value);\n\t      break;\n\t    case 8:\n\t      var value = new proto.mediapipe.Detection.AssociatedDetection;\n\t      reader.readMessage(value,proto.mediapipe.Detection.AssociatedDetection.deserializeBinaryFromReader);\n\t      msg.addAssociatedDetections(value);\n\t      break;\n\t    case 9:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addDisplayName(value);\n\t      break;\n\t    case 10:\n\t      var value = /** @type {number} */ (reader.readInt64());\n\t      msg.setTimestampUsec(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.Detection.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.Detection.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.Detection} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Detection.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getLabelList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = message.getLabelIdList();\n\t  if (f.length > 0) {\n\t    writer.writePackedInt32(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = message.getScoreList();\n\t  if (f.length > 0) {\n\t    writer.writePackedFloat(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = message.getLocationData();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      4,\n\t      f,\n\t      mediapipe_framework_formats_location_data_pb.LocationData.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 5));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 6));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      6,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 7));\n\t  if (f != null) {\n\t    writer.writeInt64(\n\t      7,\n\t      f\n\t    );\n\t  }\n\t  f = message.getAssociatedDetectionsList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      8,\n\t      f,\n\t      proto.mediapipe.Detection.AssociatedDetection.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = message.getDisplayNameList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      9,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 10));\n\t  if (f != null) {\n\t    writer.writeInt64(\n\t      10,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.Detection.AssociatedDetection.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.Detection.AssociatedDetection} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,\n\t    confidence: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.Detection.AssociatedDetection}\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.Detection.AssociatedDetection;\n\t  return proto.mediapipe.Detection.AssociatedDetection.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.Detection.AssociatedDetection} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.Detection.AssociatedDetection}\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setId(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setConfidence(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.Detection.AssociatedDetection.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.Detection.AssociatedDetection} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 1));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      1,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * optional int32 id = 1;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.getId = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Detection.AssociatedDetection} returns this\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.setId = function(value) {\n\t  return jspb.Message.setField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Detection.AssociatedDetection} returns this\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.clearId = function() {\n\t  return jspb.Message.setField(this, 1, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.hasId = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional float confidence = 2;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.getConfidence = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Detection.AssociatedDetection} returns this\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.setConfidence = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Detection.AssociatedDetection} returns this\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.clearConfidence = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Detection.AssociatedDetection.prototype.hasConfidence = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * repeated string label = 1;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.Detection.prototype.getLabelList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.setLabelList = function(value) {\n\t  return jspb.Message.setField(this, 1, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.addLabel = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearLabelList = function() {\n\t  return this.setLabelList([]);\n\t};\n\n\n\t/**\n\t * repeated int32 label_id = 2;\n\t * @return {!Array<number>}\n\t */\n\tproto.mediapipe.Detection.prototype.getLabelIdList = function() {\n\t  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));\n\t};\n\n\n\t/**\n\t * @param {!Array<number>} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.setLabelIdList = function(value) {\n\t  return jspb.Message.setField(this, 2, value || []);\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.addLabelId = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearLabelIdList = function() {\n\t  return this.setLabelIdList([]);\n\t};\n\n\n\t/**\n\t * repeated float score = 3;\n\t * @return {!Array<number>}\n\t */\n\tproto.mediapipe.Detection.prototype.getScoreList = function() {\n\t  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));\n\t};\n\n\n\t/**\n\t * @param {!Array<number>} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.setScoreList = function(value) {\n\t  return jspb.Message.setField(this, 3, value || []);\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.addScore = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearScoreList = function() {\n\t  return this.setScoreList([]);\n\t};\n\n\n\t/**\n\t * optional LocationData location_data = 4;\n\t * @return {?proto.mediapipe.LocationData}\n\t */\n\tproto.mediapipe.Detection.prototype.getLocationData = function() {\n\t  return /** @type{?proto.mediapipe.LocationData} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_framework_formats_location_data_pb.LocationData, 4));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.LocationData|undefined} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t*/\n\tproto.mediapipe.Detection.prototype.setLocationData = function(value) {\n\t  return jspb.Message.setWrapperField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearLocationData = function() {\n\t  return this.setLocationData(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Detection.prototype.hasLocationData = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * optional string feature_tag = 5;\n\t * @return {string}\n\t */\n\tproto.mediapipe.Detection.prototype.getFeatureTag = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.setFeatureTag = function(value) {\n\t  return jspb.Message.setField(this, 5, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearFeatureTag = function() {\n\t  return jspb.Message.setField(this, 5, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Detection.prototype.hasFeatureTag = function() {\n\t  return jspb.Message.getField(this, 5) != null;\n\t};\n\n\n\t/**\n\t * optional string track_id = 6;\n\t * @return {string}\n\t */\n\tproto.mediapipe.Detection.prototype.getTrackId = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, \"\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.setTrackId = function(value) {\n\t  return jspb.Message.setField(this, 6, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearTrackId = function() {\n\t  return jspb.Message.setField(this, 6, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Detection.prototype.hasTrackId = function() {\n\t  return jspb.Message.getField(this, 6) != null;\n\t};\n\n\n\t/**\n\t * optional int64 detection_id = 7;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Detection.prototype.getDetectionId = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.setDetectionId = function(value) {\n\t  return jspb.Message.setField(this, 7, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearDetectionId = function() {\n\t  return jspb.Message.setField(this, 7, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Detection.prototype.hasDetectionId = function() {\n\t  return jspb.Message.getField(this, 7) != null;\n\t};\n\n\n\t/**\n\t * repeated AssociatedDetection associated_detections = 8;\n\t * @return {!Array<!proto.mediapipe.Detection.AssociatedDetection>}\n\t */\n\tproto.mediapipe.Detection.prototype.getAssociatedDetectionsList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.Detection.AssociatedDetection>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.Detection.AssociatedDetection, 8));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.Detection.AssociatedDetection>} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t*/\n\tproto.mediapipe.Detection.prototype.setAssociatedDetectionsList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 8, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.Detection.AssociatedDetection=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.Detection.AssociatedDetection}\n\t */\n\tproto.mediapipe.Detection.prototype.addAssociatedDetections = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.mediapipe.Detection.AssociatedDetection, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearAssociatedDetectionsList = function() {\n\t  return this.setAssociatedDetectionsList([]);\n\t};\n\n\n\t/**\n\t * repeated string display_name = 9;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.Detection.prototype.getDisplayNameList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.setDisplayNameList = function(value) {\n\t  return jspb.Message.setField(this, 9, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.addDisplayName = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearDisplayNameList = function() {\n\t  return this.setDisplayNameList([]);\n\t};\n\n\n\t/**\n\t * optional int64 timestamp_usec = 10;\n\t * @return {number}\n\t */\n\tproto.mediapipe.Detection.prototype.getTimestampUsec = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.setTimestampUsec = function(value) {\n\t  return jspb.Message.setField(this, 10, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.Detection} returns this\n\t */\n\tproto.mediapipe.Detection.prototype.clearTimestampUsec = function() {\n\t  return jspb.Message.setField(this, 10, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.Detection.prototype.hasTimestampUsec = function() {\n\t  return jspb.Message.getField(this, 10) != null;\n\t};\n\n\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.DetectionList.repeatedFields_ = [1];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.DetectionList.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.DetectionList.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.DetectionList} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.DetectionList.toObject = function(includeInstance, msg) {\n\t  var obj = {\n\t    detectionList: jspb.Message.toObjectList(msg.getDetectionList(),\n\t    proto.mediapipe.Detection.toObject, includeInstance)\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.DetectionList}\n\t */\n\tproto.mediapipe.DetectionList.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.DetectionList;\n\t  return proto.mediapipe.DetectionList.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.DetectionList} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.DetectionList}\n\t */\n\tproto.mediapipe.DetectionList.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new proto.mediapipe.Detection;\n\t      reader.readMessage(value,proto.mediapipe.Detection.deserializeBinaryFromReader);\n\t      msg.addDetection(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.DetectionList.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.DetectionList.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.DetectionList} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.DetectionList.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getDetectionList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedMessage(\n\t      1,\n\t      f,\n\t      proto.mediapipe.Detection.serializeBinaryToWriter\n\t    );\n\t  }\n\t};\n\n\n\t/**\n\t * repeated Detection detection = 1;\n\t * @return {!Array<!proto.mediapipe.Detection>}\n\t */\n\tproto.mediapipe.DetectionList.prototype.getDetectionList = function() {\n\t  return /** @type{!Array<!proto.mediapipe.Detection>} */ (\n\t    jspb.Message.getRepeatedWrapperField(this, proto.mediapipe.Detection, 1));\n\t};\n\n\n\t/**\n\t * @param {!Array<!proto.mediapipe.Detection>} value\n\t * @return {!proto.mediapipe.DetectionList} returns this\n\t*/\n\tproto.mediapipe.DetectionList.prototype.setDetectionList = function(value) {\n\t  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * @param {!proto.mediapipe.Detection=} opt_value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.Detection}\n\t */\n\tproto.mediapipe.DetectionList.prototype.addDetection = function(opt_value, opt_index) {\n\t  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mediapipe.Detection, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.DetectionList} returns this\n\t */\n\tproto.mediapipe.DetectionList.prototype.clearDetectionList = function() {\n\t  return this.setDetectionList([]);\n\t};\n\n\n\tgoog.object.extend(exports, proto.mediapipe);\n} (detection_pb));\n\nvar object_detector_options_pb = {};\n\n(function (exports) {\n\t// source: mediapipe/tasks/cc/vision/object_detector/proto/object_detector_options.proto\n\t/**\n\t * @fileoverview\n\t * @enhanceable\n\t * @suppress {missingRequire} reports error on implicit type usages.\n\t * @suppress {messageConventions} JS Compiler reports an error if a variable or\n\t *     field starts with 'MSG_' and isn't a translatable message.\n\t * @public\n\t */\n\t// GENERATED CODE -- DO NOT EDIT!\n\t/* eslint-disable */\n\t// @ts-nocheck\n\n\tvar jspb = require$$0;\n\tvar goog = jspb;\n\tvar global =\n\t    (typeof globalThis !== 'undefined' && globalThis) ||\n\t    (typeof window !== 'undefined' && window) ||\n\t    (typeof global !== 'undefined' && global) ||\n\t    (typeof self !== 'undefined' && self) ||\n\t    (function () { return this; }).call(null) ||\n\t    Function('return this')();\n\n\tvar mediapipe_framework_calculator_pb = calculator_pb;\n\tgoog.object.extend(proto, mediapipe_framework_calculator_pb);\n\tvar mediapipe_tasks_cc_core_proto_base_options_pb = base_options_pb;\n\tgoog.object.extend(proto, mediapipe_tasks_cc_core_proto_base_options_pb);\n\tgoog.exportSymbol('proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions', null, global);\n\t/**\n\t * Generated by JsPbCodeGenerator.\n\t * @param {Array=} opt_data Optional initial data array, typically from a\n\t * server response, or constructed directly in Javascript. The array is used\n\t * in place and becomes part of the constructed object. It is not cloned.\n\t * If no data is provided, the constructed object will be empty, but still\n\t * valid.\n\t * @extends {jspb.Message}\n\t * @constructor\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions = function(opt_data) {\n\t  jspb.Message.initialize(this, opt_data, 0, -1, proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.repeatedFields_, null);\n\t};\n\tgoog.inherits(proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions, jspb.Message);\n\tif (goog.DEBUG && !COMPILED) {\n\t  /**\n\t   * @public\n\t   * @override\n\t   */\n\t  proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.displayName = 'proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions';\n\t}\n\n\t/**\n\t * List of repeated fields within this message type.\n\t * @private {!Array<number>}\n\t * @const\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.repeatedFields_ = [5,6];\n\n\n\n\tif (jspb.Message.GENERATE_TO_OBJECT) {\n\t/**\n\t * Creates an object representation of this proto.\n\t * Field names that are reserved in JavaScript and will be renamed to pb_name.\n\t * Optional fields that are not set will be set to undefined.\n\t * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n\t * For the list of reserved names please see:\n\t *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n\t * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n\t *     JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @return {!Object}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.toObject = function(opt_includeInstance) {\n\t  return proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.toObject(opt_includeInstance, this);\n\t};\n\n\n\t/**\n\t * Static version of the {@see toObject} method.\n\t * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n\t *     the JSPB instance for transitional soy proto support:\n\t *     http://goto/soy-param-migration\n\t * @param {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} msg The msg instance to transform.\n\t * @return {!Object}\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.toObject = function(includeInstance, msg) {\n\t  var f, obj = {\n\t    baseOptions: (f = msg.getBaseOptions()) && mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.toObject(includeInstance, f),\n\t    displayNamesLocale: jspb.Message.getFieldWithDefault(msg, 2, \"en\"),\n\t    maxResults: jspb.Message.getFieldWithDefault(msg, 3, -1),\n\t    scoreThreshold: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,\n\t    categoryAllowlistList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,\n\t    categoryDenylistList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f\n\t  };\n\n\t  if (includeInstance) {\n\t    obj.$jspbMessageInstance = msg;\n\t  }\n\t  return obj;\n\t};\n\t}\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format).\n\t * @param {jspb.ByteSource} bytes The bytes to deserialize.\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.deserializeBinary = function(bytes) {\n\t  var reader = new jspb.BinaryReader(bytes);\n\t  var msg = new proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions;\n\t  return proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.deserializeBinaryFromReader(msg, reader);\n\t};\n\n\n\t/**\n\t * Deserializes binary data (in protobuf wire format) from the\n\t * given reader into the given message object.\n\t * @param {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} msg The message object to deserialize into.\n\t * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.deserializeBinaryFromReader = function(msg, reader) {\n\t  while (reader.nextField()) {\n\t    if (reader.isEndGroup()) {\n\t      break;\n\t    }\n\t    var field = reader.getFieldNumber();\n\t    switch (field) {\n\t    case 1:\n\t      var value = new mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions;\n\t      reader.readMessage(value,mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.deserializeBinaryFromReader);\n\t      msg.setBaseOptions(value);\n\t      break;\n\t    case 2:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.setDisplayNamesLocale(value);\n\t      break;\n\t    case 3:\n\t      var value = /** @type {number} */ (reader.readInt32());\n\t      msg.setMaxResults(value);\n\t      break;\n\t    case 4:\n\t      var value = /** @type {number} */ (reader.readFloat());\n\t      msg.setScoreThreshold(value);\n\t      break;\n\t    case 5:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addCategoryAllowlist(value);\n\t      break;\n\t    case 6:\n\t      var value = /** @type {string} */ (reader.readString());\n\t      msg.addCategoryDenylist(value);\n\t      break;\n\t    default:\n\t      reader.skipField();\n\t      break;\n\t    }\n\t  }\n\t  return msg;\n\t};\n\n\n\t/**\n\t * Serializes the message to binary data (in protobuf wire format).\n\t * @return {!Uint8Array}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.serializeBinary = function() {\n\t  var writer = new jspb.BinaryWriter();\n\t  proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.serializeBinaryToWriter(this, writer);\n\t  return writer.getResultBuffer();\n\t};\n\n\n\t/**\n\t * Serializes the given message to binary data (in protobuf wire\n\t * format), writing to the given BinaryWriter.\n\t * @param {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} message\n\t * @param {!jspb.BinaryWriter} writer\n\t * @suppress {unusedLocalVariables} f is only used for nested messages\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.serializeBinaryToWriter = function(message, writer) {\n\t  var f = undefined;\n\t  f = message.getBaseOptions();\n\t  if (f != null) {\n\t    writer.writeMessage(\n\t      1,\n\t      f,\n\t      mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions.serializeBinaryToWriter\n\t    );\n\t  }\n\t  f = /** @type {string} */ (jspb.Message.getField(message, 2));\n\t  if (f != null) {\n\t    writer.writeString(\n\t      2,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 3));\n\t  if (f != null) {\n\t    writer.writeInt32(\n\t      3,\n\t      f\n\t    );\n\t  }\n\t  f = /** @type {number} */ (jspb.Message.getField(message, 4));\n\t  if (f != null) {\n\t    writer.writeFloat(\n\t      4,\n\t      f\n\t    );\n\t  }\n\t  f = message.getCategoryAllowlistList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      5,\n\t      f\n\t    );\n\t  }\n\t  f = message.getCategoryDenylistList();\n\t  if (f.length > 0) {\n\t    writer.writeRepeatedString(\n\t      6,\n\t      f\n\t    );\n\t  }\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.ext = new jspb.ExtensionFieldInfo(\n\t    443442058,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[443442058] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[443442058] = proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.ext;\n\n\t/**\n\t * optional mediapipe.tasks.core.proto.BaseOptions base_options = 1;\n\t * @return {?proto.mediapipe.tasks.core.proto.BaseOptions}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.getBaseOptions = function() {\n\t  return /** @type{?proto.mediapipe.tasks.core.proto.BaseOptions} */ (\n\t    jspb.Message.getWrapperField(this, mediapipe_tasks_cc_core_proto_base_options_pb.BaseOptions, 1));\n\t};\n\n\n\t/**\n\t * @param {?proto.mediapipe.tasks.core.proto.BaseOptions|undefined} value\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t*/\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.setBaseOptions = function(value) {\n\t  return jspb.Message.setWrapperField(this, 1, value);\n\t};\n\n\n\t/**\n\t * Clears the message field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.clearBaseOptions = function() {\n\t  return this.setBaseOptions(undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.hasBaseOptions = function() {\n\t  return jspb.Message.getField(this, 1) != null;\n\t};\n\n\n\t/**\n\t * optional string display_names_locale = 2;\n\t * @return {string}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.getDisplayNamesLocale = function() {\n\t  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"en\"));\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.setDisplayNamesLocale = function(value) {\n\t  return jspb.Message.setField(this, 2, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.clearDisplayNamesLocale = function() {\n\t  return jspb.Message.setField(this, 2, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.hasDisplayNamesLocale = function() {\n\t  return jspb.Message.getField(this, 2) != null;\n\t};\n\n\n\t/**\n\t * optional int32 max_results = 3;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.getMaxResults = function() {\n\t  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, -1));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.setMaxResults = function(value) {\n\t  return jspb.Message.setField(this, 3, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.clearMaxResults = function() {\n\t  return jspb.Message.setField(this, 3, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.hasMaxResults = function() {\n\t  return jspb.Message.getField(this, 3) != null;\n\t};\n\n\n\t/**\n\t * optional float score_threshold = 4;\n\t * @return {number}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.getScoreThreshold = function() {\n\t  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));\n\t};\n\n\n\t/**\n\t * @param {number} value\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.setScoreThreshold = function(value) {\n\t  return jspb.Message.setField(this, 4, value);\n\t};\n\n\n\t/**\n\t * Clears the field making it undefined.\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.clearScoreThreshold = function() {\n\t  return jspb.Message.setField(this, 4, undefined);\n\t};\n\n\n\t/**\n\t * Returns whether this field is set.\n\t * @return {boolean}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.hasScoreThreshold = function() {\n\t  return jspb.Message.getField(this, 4) != null;\n\t};\n\n\n\t/**\n\t * repeated string category_allowlist = 5;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.getCategoryAllowlistList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.setCategoryAllowlistList = function(value) {\n\t  return jspb.Message.setField(this, 5, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.addCategoryAllowlist = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.clearCategoryAllowlistList = function() {\n\t  return this.setCategoryAllowlistList([]);\n\t};\n\n\n\t/**\n\t * repeated string category_denylist = 6;\n\t * @return {!Array<string>}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.getCategoryDenylistList = function() {\n\t  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));\n\t};\n\n\n\t/**\n\t * @param {!Array<string>} value\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.setCategoryDenylistList = function(value) {\n\t  return jspb.Message.setField(this, 6, value || []);\n\t};\n\n\n\t/**\n\t * @param {string} value\n\t * @param {number=} opt_index\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.addCategoryDenylist = function(value, opt_index) {\n\t  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);\n\t};\n\n\n\t/**\n\t * Clears the list making it empty but non-null.\n\t * @return {!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions} returns this\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.prototype.clearCategoryDenylistList = function() {\n\t  return this.setCategoryDenylistList([]);\n\t};\n\n\n\n\t/**\n\t * A tuple of {field number, class constructor} for the extension\n\t * field named `ext`.\n\t * @type {!jspb.ExtensionFieldInfo<!proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions>}\n\t */\n\tproto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.ext = new jspb.ExtensionFieldInfo(\n\t    443442058,\n\t    {ext: 0},\n\t    proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions,\n\t     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (\n\t         proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.toObject),\n\t    0);\n\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensionsBinary[443442058] = new jspb.ExtensionFieldBinaryInfo(\n\t    proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.ext,\n\t    jspb.BinaryReader.prototype.readMessage,\n\t    jspb.BinaryWriter.prototype.writeMessage,\n\t    proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.serializeBinaryToWriter,\n\t    proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.deserializeBinaryFromReader,\n\t    false);\n\t// This registers the extension field with the extended class, so that\n\t// toObject() will function correctly.\n\tmediapipe_framework_calculator_options_pb.CalculatorOptions.extensions[443442058] = proto.mediapipe.tasks.vision.object_detector.proto.ObjectDetectorOptions.ext;\n\n\tgoog.object.extend(exports, proto.mediapipe.tasks.vision.object_detector.proto);\n} (object_detector_options_pb));\n\n/**\n * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(object_detector, \"__esModule\", { value: true });\nobject_detector.ObjectDetector = void 0;\nconst calculator_pb_1 = calculator_pb;\nconst calculator_options_pb_1 = calculator_options_pb;\nconst detection_pb_1 = detection_pb;\nconst object_detector_options_pb_1 = object_detector_options_pb;\nconst base_options_1 = base_options;\nconst task_runner_1 = task_runner;\nconst wasm_mediapipe_lib_1 = wasm_mediapipe_lib;\nconst INPUT_STREAM = 'input_frame_gpu';\nconst DETECTIONS_STREAM = 'detections';\nconst OBJECT_DETECTOR_GRAPH = 'mediapipe.tasks.vision.ObjectDetectorGraph';\nconst DEFAULT_CATEGORY_INDEX = -1;\n// The OSS JS API does not support the builder pattern.\n// tslint:disable:jspb-use-builder-pattern\n/** Performs object detection on images. */\nclass ObjectDetector extends task_runner_1.TaskRunner {\n    constructor() {\n        super(...arguments);\n        this.detections = [];\n        this.options = new object_detector_options_pb_1.ObjectDetectorOptions();\n    }\n    /**\n     * Initializes the Wasm runtime and creates a new object detector from the\n     * provided options.\n     * @param wasmLoaderOptions A configuration object that provides the location\n     *     of the Wasm binary and its loader.\n     * @param objectDetectorOptions The options for the Object Detector. Note that\n     *     either a path to the model asset or a model buffer needs to be\n     *     provided (via `baseOptions`).\n     */\n    static async createFromOptions(wasmLoaderOptions, objectDetectorOptions) {\n        // Create a file locator based on the loader options\n        const fileLocator = {\n            locateFile() {\n                // The only file we load is the Wasm binary\n                return wasmLoaderOptions.wasmBinaryPath.toString();\n            }\n        };\n        const detector = await (0, wasm_mediapipe_lib_1.createMediaPipeLib)(ObjectDetector, wasmLoaderOptions.wasmLoaderPath, \n        /* assetLoaderScript= */ undefined, \n        /* glCanvas= */ undefined, fileLocator);\n        await detector.setOptions(objectDetectorOptions);\n        return detector;\n    }\n    /**\n     * Initializes the Wasm runtime and creates a new object detector based on the\n     * provided model asset buffer.\n     * @param wasmLoaderOptions A configuration object that provides the location\n     *     of the Wasm binary and its loader.\n     * @param modelAssetBuffer A binary representation of the model.\n     */\n    static createFromModelBuffer(wasmLoaderOptions, modelAssetBuffer) {\n        return ObjectDetector.createFromOptions(wasmLoaderOptions, { baseOptions: { modelAssetBuffer } });\n    }\n    /**\n     * Initializes the Wasm runtime and creates a new object detector based on the\n     * path to the model asset.\n     * @param wasmLoaderOptions A configuration object that provides the location\n     *     of the Wasm binary and its loader.\n     * @param modelAssetPath The path to the model asset.\n     */\n    static async createFromModelPath(wasmLoaderOptions, modelAssetPath) {\n        const response = await fetch(modelAssetPath.toString());\n        const graphData = await response.arrayBuffer();\n        return ObjectDetector.createFromModelBuffer(wasmLoaderOptions, new Uint8Array(graphData));\n    }\n    /**\n     * Sets new options for the object detector.\n     *\n     * Calling `setOptions()` with a subset of options only affects those options.\n     * You can reset an option back to its default value by explicitly setting it\n     * to `undefined`.\n     *\n     * @param options The options for the object detector.\n     */\n    async setOptions(options) {\n        if (options.baseOptions) {\n            const baseOptionsProto = await (0, base_options_1.convertBaseOptionsToProto)(options.baseOptions, this.options.getBaseOptions());\n            this.options.setBaseOptions(baseOptionsProto);\n        }\n        // Note that we have to support both JSPB and ProtobufJS, hence we\n        // have to expliclity clear the values instead of setting them to\n        // `undefined`.\n        if (options.displayNamesLocale !== undefined) {\n            this.options.setDisplayNamesLocale(options.displayNamesLocale);\n        }\n        else if ('displayNamesLocale' in options) { // Check for undefined\n            this.options.clearDisplayNamesLocale();\n        }\n        if (options.maxResults !== undefined) {\n            this.options.setMaxResults(options.maxResults);\n        }\n        else if ('maxResults' in options) { // Check for undefined\n            this.options.clearMaxResults();\n        }\n        if (options.scoreThreshold !== undefined) {\n            this.options.setScoreThreshold(options.scoreThreshold);\n        }\n        else if ('scoreThreshold' in options) { // Check for undefined\n            this.options.clearScoreThreshold();\n        }\n        if (options.categoryAllowlist !== undefined) {\n            this.options.setCategoryAllowlistList(options.categoryAllowlist);\n        }\n        else if ('categoryAllowlist' in options) { // Check for undefined\n            this.options.clearCategoryAllowlistList();\n        }\n        if (options.categoryDenylist !== undefined) {\n            this.options.setCategoryDenylistList(options.categoryDenylist);\n        }\n        else if ('categoryDenylist' in options) { // Check for undefined\n            this.options.clearCategoryDenylistList();\n        }\n        this.refreshGraph();\n    }\n    /**\n     * Performs object detection on the provided single image and waits\n     * synchronously for the response.\n     * @param imageSource An image source to process.\n     * @param timestamp The timestamp of the current frame, in ms. If not\n     *    provided, defaults to `performance.now()`.\n     * @return The list of detected objects\n     */\n    detect(imageSource, timestamp) {\n        // Get detections by running our MediaPipe graph.\n        this.detections = [];\n        this.addGpuBufferAsImageToStream(imageSource, INPUT_STREAM, timestamp !== null && timestamp !== void 0 ? timestamp : performance.now());\n        this.finishProcessing();\n        return [...this.detections];\n    }\n    /** Converts raw data into a Detection, and adds it to our detection list. */\n    addJsObjectDetections(data) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        for (const binaryProto of data) {\n            const detectionProto = detection_pb_1.Detection.deserializeBinary(binaryProto);\n            const scores = detectionProto.getScoreList();\n            const indexes = detectionProto.getLabelIdList();\n            const labels = detectionProto.getLabelList();\n            const displayNames = detectionProto.getDisplayNameList();\n            const detection = { categories: [] };\n            for (let i = 0; i < scores.length; i++) {\n                detection.categories.push({\n                    score: scores[i],\n                    index: (_a = indexes[i]) !== null && _a !== void 0 ? _a : DEFAULT_CATEGORY_INDEX,\n                    categoryName: (_b = labels[i]) !== null && _b !== void 0 ? _b : '',\n                    displayName: (_c = displayNames[i]) !== null && _c !== void 0 ? _c : '',\n                });\n            }\n            const boundingBox = (_d = detectionProto.getLocationData()) === null || _d === void 0 ? void 0 : _d.getBoundingBox();\n            if (boundingBox) {\n                detection.boundingBox = {\n                    originX: (_e = boundingBox.getXmin()) !== null && _e !== void 0 ? _e : 0,\n                    originY: (_f = boundingBox.getYmin()) !== null && _f !== void 0 ? _f : 0,\n                    width: (_g = boundingBox.getWidth()) !== null && _g !== void 0 ? _g : 0,\n                    height: (_h = boundingBox.getHeight()) !== null && _h !== void 0 ? _h : 0\n                };\n            }\n            this.detections.push(detection);\n        }\n    }\n    /** Updates the MediaPipe graph configuration. */\n    refreshGraph() {\n        const graphConfig = new calculator_pb_1.CalculatorGraphConfig();\n        graphConfig.addInputStream(INPUT_STREAM);\n        graphConfig.addOutputStream(DETECTIONS_STREAM);\n        const calculatorOptions = new calculator_options_pb_1.CalculatorOptions();\n        calculatorOptions.setExtension(object_detector_options_pb_1.ObjectDetectorOptions.ext, this.options);\n        const detectorNode = new calculator_pb_1.CalculatorGraphConfig.Node();\n        detectorNode.setCalculator(OBJECT_DETECTOR_GRAPH);\n        detectorNode.addInputStream('IMAGE:' + INPUT_STREAM);\n        detectorNode.addOutputStream('DETECTIONS:' + DETECTIONS_STREAM);\n        detectorNode.setOptions(calculatorOptions);\n        graphConfig.addNode(detectorNode);\n        this.attachProtoVectorListener(DETECTIONS_STREAM, binaryProto => {\n            this.addJsObjectDetections(binaryProto);\n        });\n        const binaryGraph = graphConfig.serializeBinary();\n        this.setGraph(new Uint8Array(binaryGraph), /* isBinary= */ true);\n    }\n}\nobject_detector.ObjectDetector = ObjectDetector;\n\n(function (exports) {\n\t/**\n\t * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\tvar __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n\t    if (k2 === undefined) k2 = k;\n\t    var desc = Object.getOwnPropertyDescriptor(m, k);\n\t    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n\t      desc = { enumerable: true, get: function() { return m[k]; } };\n\t    }\n\t    Object.defineProperty(o, k2, desc);\n\t}) : (function(o, m, k, k2) {\n\t    if (k2 === undefined) k2 = k;\n\t    o[k2] = m[k];\n\t}));\n\tvar __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {\n\t    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t// Image Classifier\n\t__exportStar(image_classifier_options, exports);\n\t__exportStar(image_classifier_result, exports);\n\t__exportStar(image_classifier, exports);\n\t// Gesture Recognizer\n\t__exportStar(gesture_recognizer_options, exports);\n\t__exportStar(gesture_recognizer_result, exports);\n\t__exportStar(gesture_recognizer, exports);\n\t// Object Detector\n\t__exportStar(object_detector_options, exports);\n\t__exportStar(object_detector_result, exports);\n\t__exportStar(object_detector, exports);\n\t\n} (vision$1));\n\n(function (exports) {\n\t/**\n\t * Copyright 2022 The MediaPipe Authors. All Rights Reserved.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\tvar __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n\t    if (k2 === undefined) k2 = k;\n\t    var desc = Object.getOwnPropertyDescriptor(m, k);\n\t    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n\t      desc = { enumerable: true, get: function() { return m[k]; } };\n\t    }\n\t    Object.defineProperty(o, k2, desc);\n\t}) : (function(o, m, k, k2) {\n\t    if (k2 === undefined) k2 = k;\n\t    o[k2] = m[k];\n\t}));\n\tvar __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {\n\t    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t__exportStar(vision$1, exports);\n\t\n} (vision$2));\n\nvar vision = /*@__PURE__*/getDefaultExportFromCjs(vision$2);\n\nexport { vision as default };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzaW9uX2J1bmRsZS5qcyIsInNvdXJjZXMiOlsidmlzaW9uL2ltYWdlX2NsYXNzaWZpZXIvaW1hZ2VfY2xhc3NpZmllcl9vcHRpb25zLmpzIiwidmlzaW9uL2ltYWdlX2NsYXNzaWZpZXIvaW1hZ2VfY2xhc3NpZmllcl9yZXN1bHQuanMiLCIuLi8uLi9mcmFtZXdvcmsvY2FsY3VsYXRvcl9vcHRpb25zX3BiLmpzIiwiLi4vLi4vZnJhbWV3b3JrL21lZGlhcGlwZV9vcHRpb25zX3BiLmpzIiwiLi4vLi4vZnJhbWV3b3JrL3BhY2tldF9mYWN0b3J5X3BiLmpzIiwiLi4vLi4vZnJhbWV3b3JrL3BhY2tldF9nZW5lcmF0b3JfcGIuanMiLCIuLi8uLi9mcmFtZXdvcmsvc3RhdHVzX2hhbmRsZXJfcGIuanMiLCIuLi8uLi9mcmFtZXdvcmsvc3RyZWFtX2hhbmRsZXJfcGIuanMiLCIuLi8uLi9mcmFtZXdvcmsvY2FsY3VsYXRvcl9wYi5qcyIsIi4uLy4uL2ZyYW1ld29yay9mb3JtYXRzL2NsYXNzaWZpY2F0aW9uX3BiLmpzIiwiLi4vY2MvY29tcG9uZW50cy9jb250YWluZXJzL3Byb3RvL2NhdGVnb3J5X3BiLmpzIiwiLi4vY2MvY29tcG9uZW50cy9jb250YWluZXJzL3Byb3RvL2NsYXNzaWZpY2F0aW9uc19wYi5qcyIsIi4uL2NjL2NvbXBvbmVudHMvcHJvY2Vzc29ycy9wcm90by9jbGFzc2lmaWVyX29wdGlvbnNfcGIuanMiLCIuLi8uLi9jYWxjdWxhdG9ycy90ZW5zb3IvaW5mZXJlbmNlX2NhbGN1bGF0b3JfcGIuanMiLCIuLi9jYy9jb3JlL3Byb3RvL2FjY2VsZXJhdGlvbl9wYi5qcyIsIi4uL2NjL2NvcmUvcHJvdG8vZXh0ZXJuYWxfZmlsZV9wYi5qcyIsIi4uL2NjL2NvcmUvcHJvdG8vYmFzZV9vcHRpb25zX3BiLmpzIiwiLi4vY2MvdmlzaW9uL2ltYWdlX2NsYXNzaWZpZXIvcHJvdG8vaW1hZ2VfY2xhc3NpZmllcl9ncmFwaF9vcHRpb25zX3BiLmpzIiwiY29tcG9uZW50cy9wcm9jZXNzb3JzL2Jhc2Vfb3B0aW9ucy5qcyIsImNvbXBvbmVudHMvcHJvY2Vzc29ycy9jbGFzc2lmaWVyX29wdGlvbnMuanMiLCJjb21wb25lbnRzL3Byb2Nlc3NvcnMvY2xhc3NpZmllcl9yZXN1bHQuanMiLCIuLi8uLi93ZWIvZ3JhcGhfcnVubmVyL3JlZ2lzdGVyX21vZGVsX3Jlc291cmNlc19ncmFwaF9zZXJ2aWNlLmpzIiwiLi4vLi4vd2ViL2dyYXBoX3J1bm5lci93YXNtX21lZGlhcGlwZV9pbWFnZV9saWIuanMiLCIuLi8uLi93ZWIvZ3JhcGhfcnVubmVyL3dhc21fbWVkaWFwaXBlX2xpYi5qcyIsImNvcmUvdGFza19ydW5uZXIuanMiLCJ2aXNpb24vaW1hZ2VfY2xhc3NpZmllci9pbWFnZV9jbGFzc2lmaWVyLmpzIiwidmlzaW9uL2dlc3R1cmVfcmVjb2duaXplci9nZXN0dXJlX3JlY29nbml6ZXJfb3B0aW9ucy5qcyIsInZpc2lvbi9nZXN0dXJlX3JlY29nbml6ZXIvZ2VzdHVyZV9yZWNvZ25pemVyX3Jlc3VsdC5qcyIsIi4uLy4uL2ZyYW1ld29yay9mb3JtYXRzL2xhbmRtYXJrX3BiLmpzIiwiLi4vLi4vZnJhbWV3b3JrL2Zvcm1hdHMvcmVjdF9wYi5qcyIsIi4uL2NjL3Zpc2lvbi9nZXN0dXJlX3JlY29nbml6ZXIvcHJvdG8vZ2VzdHVyZV9jbGFzc2lmaWVyX2dyYXBoX29wdGlvbnNfcGIuanMiLCIuLi9jYy92aXNpb24vZ2VzdHVyZV9yZWNvZ25pemVyL3Byb3RvL2dlc3R1cmVfZW1iZWRkZXJfZ3JhcGhfb3B0aW9uc19wYi5qcyIsIi4uL2NjL3Zpc2lvbi9nZXN0dXJlX3JlY29nbml6ZXIvcHJvdG8vaGFuZF9nZXN0dXJlX3JlY29nbml6ZXJfZ3JhcGhfb3B0aW9uc19wYi5qcyIsIi4uL2NjL3Zpc2lvbi9oYW5kX2RldGVjdG9yL3Byb3RvL2hhbmRfZGV0ZWN0b3JfZ3JhcGhfb3B0aW9uc19wYi5qcyIsIi4uL2NjL3Zpc2lvbi9oYW5kX2xhbmRtYXJrZXIvcHJvdG8vaGFuZF9sYW5kbWFya3NfZGV0ZWN0b3JfZ3JhcGhfb3B0aW9uc19wYi5qcyIsIi4uL2NjL3Zpc2lvbi9oYW5kX2xhbmRtYXJrZXIvcHJvdG8vaGFuZF9sYW5kbWFya2VyX2dyYXBoX29wdGlvbnNfcGIuanMiLCIuLi9jYy92aXNpb24vZ2VzdHVyZV9yZWNvZ25pemVyL3Byb3RvL2dlc3R1cmVfcmVjb2duaXplcl9ncmFwaF9vcHRpb25zX3BiLmpzIiwidmlzaW9uL2dlc3R1cmVfcmVjb2duaXplci9nZXN0dXJlX3JlY29nbml6ZXIuanMiLCJ2aXNpb24vb2JqZWN0X2RldGVjdG9yL29iamVjdF9kZXRlY3Rvcl9vcHRpb25zLmpzIiwidmlzaW9uL29iamVjdF9kZXRlY3Rvci9vYmplY3RfZGV0ZWN0b3JfcmVzdWx0LmpzIiwiLi4vLi4vZnJhbWV3b3JrL2Zvcm1hdHMvYW5ub3RhdGlvbi9yYXN0ZXJpemF0aW9uX3BiLmpzIiwiLi4vLi4vZnJhbWV3b3JrL2Zvcm1hdHMvbG9jYXRpb25fZGF0YV9wYi5qcyIsIi4uLy4uL2ZyYW1ld29yay9mb3JtYXRzL2RldGVjdGlvbl9wYi5qcyIsIi4uL2NjL3Zpc2lvbi9vYmplY3RfZGV0ZWN0b3IvcHJvdG8vb2JqZWN0X2RldGVjdG9yX29wdGlvbnNfcGIuanMiLCJ2aXNpb24vb2JqZWN0X2RldGVjdG9yL29iamVjdF9kZXRlY3Rvci5qcyIsInZpc2lvbi9pbmRleC5qcyIsInZpc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjIgVGhlIE1lZGlhUGlwZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVcxaFoyVmZZMnhoYzNOcFptbGxjbDl2Y0hScGIyNXpMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2TGk0dkxpNHZMaTR2TGk0dkxpNHZMaTR2YldWa2FXRndhWEJsTDNSaGMydHpMM2RsWWk5MmFYTnBiMjR2YVcxaFoyVmZZMnhoYzNOcFptbGxjaTlwYldGblpWOWpiR0Z6YzJsbWFXVnlYMjl3ZEdsdmJuTXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk96czdPenM3T3pzN096czdPenRIUVdOSElpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF5TWlCVWFHVWdUV1ZrYVdGUWFYQmxJRUYxZEdodmNuTXVJRUZzYkNCU2FXZG9kSE1nVW1WelpYSjJaV1F1WEc0Z0tseHVJQ29nVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUNBb2RHaGxJRndpVEdsalpXNXpaVndpS1R0Y2JpQXFJSGx2ZFNCdFlYa2dibTkwSUhWelpTQjBhR2x6SUdacGJHVWdaWGhqWlhCMElHbHVJR052YlhCc2FXRnVZMlVnZDJsMGFDQjBhR1VnVEdsalpXNXpaUzVjYmlBcUlGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1SUNwY2JpQXFJQ0FnSUNCb2RIUndPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjYmlBcVhHNGdLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc0lITnZablIzWVhKbFhHNGdLaUJrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc1hHNGdLaUJYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxrZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzVjYmlBcUlGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVJjYmlBcUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1SUNvdlhHNWNibVY0Y0c5eWRDQjdRMnhoYzNOcFptbGxjazl3ZEdsdmJuTWdZWE1nU1cxaFoyVkRiR0Z6YzJsbWFXVnlUM0IwYVc5dWMzMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZkR0Z6YTNNdmQyVmlMMk52Y21VdlkyeGhjM05wWm1sbGNsOXZjSFJwYjI1ekp6dGNiaUpkZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMiBUaGUgTWVkaWFQaXBlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzFoWjJWZlkyeGhjM05wWm1sbGNsOXlaWE4xYkhRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTh1TGk4dUxpOHVMaTh1TGk4dUxpOXRaV1JwWVhCcGNHVXZkR0Z6YTNNdmQyVmlMM1pwYzJsdmJpOXBiV0ZuWlY5amJHRnpjMmxtYVdWeUwybHRZV2RsWDJOc1lYTnphV1pwWlhKZmNtVnpkV3gwTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHM3T3pzN096czdPenM3T3pzN1IwRmpSeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01qSWdWR2hsSUUxbFpHbGhVR2x3WlNCQmRYUm9iM0p6TGlCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlNCY0lreHBZMlZ1YzJWY0lpazdYRzRnS2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhHNGdLaUJaYjNVZ2JXRjVJRzlpZEdGcGJpQmhJR052Y0hrZ2IyWWdkR2hsSUV4cFkyVnVjMlVnWVhSY2JpQXFYRzRnS2lBZ0lDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh1SUNvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhHNGdLaUJUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pTQnpjR1ZqYVdacFl5QnNZVzVuZFdGblpTQm5iM1psY201cGJtY2djR1Z5YldsemMybHZibk1nWVc1a1hHNGdLaUJzYVcxcGRHRjBhVzl1Y3lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFMMXh1WEc1bGVIQnZjblFnZTBOaGRHVm5iM0o1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5MFlYTnJjeTkzWldJdlkyOXRjRzl1Wlc1MGN5OWpiMjUwWVdsdVpYSnpMMk5oZEdWbmIzSjVKenRjYm1WNGNHOXlkQ0I3UTJ4aGMzTnBabWxqWVhScGIyNVNaWE4xYkhRZ1lYTWdTVzFoWjJWRGJHRnpjMmxtYVdWeVVtVnpkV3gwTENCRGJHRnpjMmxtYVdOaGRHbHZibk45SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNSaGMydHpMM2RsWWk5amIyMXdiMjVsYm5SekwyTnZiblJoYVc1bGNuTXZZMnhoYzNOcFptbGpZWFJwYjI1ZmNtVnpkV3gwSnp0Y2JpSmRmUT09IiwiLy8gc291cmNlOiBtZWRpYXBpcGUvZnJhbWV3b3JrL2NhbGN1bGF0b3Jfb3B0aW9ucy5wcm90b1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKiBAZW5oYW5jZWFibGVcbiAqIEBzdXBwcmVzcyB7bWlzc2luZ1JlcXVpcmV9IHJlcG9ydHMgZXJyb3Igb24gaW1wbGljaXQgdHlwZSB1c2FnZXMuXG4gKiBAc3VwcHJlc3Mge21lc3NhZ2VDb252ZW50aW9uc30gSlMgQ29tcGlsZXIgcmVwb3J0cyBhbiBlcnJvciBpZiBhIHZhcmlhYmxlIG9yXG4gKiAgICAgZmllbGQgc3RhcnRzIHdpdGggJ01TR18nIGFuZCBpc24ndCBhIHRyYW5zbGF0YWJsZSBtZXNzYWdlLlxuICogQHB1YmxpY1xuICovXG4vLyBHRU5FUkFURUQgQ09ERSAtLSBETyBOT1QgRURJVCFcbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuXG52YXIganNwYiA9IHJlcXVpcmUoJ2dvb2dsZS1wcm90b2J1ZicpO1xudmFyIGdvb2cgPSBqc3BiO1xudmFyIGdsb2JhbCA9XG4gICAgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzKSB8fFxuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cpIHx8XG4gICAgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbCkgfHxcbiAgICAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYpIHx8XG4gICAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pLmNhbGwobnVsbCkgfHxcbiAgICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JPcHRpb25zJywgbnVsbCwgZ2xvYmFsKTtcbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvck9wdGlvbnMgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgMiwgbnVsbCwgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvck9wdGlvbnMsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvck9wdGlvbnMuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JPcHRpb25zJztcbn1cblxuLyoqXG4gKiBUaGUgZXh0ZW5zaW9ucyByZWdpc3RlcmVkIHdpdGggdGhpcyBtZXNzYWdlIGNsYXNzLiBUaGlzIGlzIGEgbWFwIG9mXG4gKiBleHRlbnNpb24gZmllbGQgbnVtYmVyIHRvIGZpZWxkSW5mbyBvYmplY3QuXG4gKlxuICogRm9yIGV4YW1wbGU6XG4gKiAgICAgeyAxMjM6IHtmaWVsZEluZGV4OiAxMjMsIGZpZWxkTmFtZToge215X2ZpZWxkX25hbWU6IDB9LCBjdG9yOiBwcm90by5leGFtcGxlLk15TWVzc2FnZX0gfVxuICpcbiAqIGZpZWxkTmFtZSBjb250YWlucyB0aGUgSnNDb21waWxlciByZW5hbWVkIGZpZWxkIG5hbWUgcHJvcGVydHkgc28gdGhhdCBpdFxuICogd29ya3MgaW4gT1BUSU1JWkVEIG1vZGUuXG4gKlxuICogQHR5cGUgeyFPYmplY3Q8bnVtYmVyLCBqc3BiLkV4dGVuc2lvbkZpZWxkSW5mbz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0aW9ucy5leHRlbnNpb25zID0ge307XG5cblxuLyoqXG4gKiBUaGUgZXh0ZW5zaW9ucyByZWdpc3RlcmVkIHdpdGggdGhpcyBtZXNzYWdlIGNsYXNzLiBUaGlzIGlzIGEgbWFwIG9mXG4gKiBleHRlbnNpb24gZmllbGQgbnVtYmVyIHRvIGZpZWxkSW5mbyBvYmplY3QuXG4gKlxuICogRm9yIGV4YW1wbGU6XG4gKiAgICAgeyAxMjM6IHtmaWVsZEluZGV4OiAxMjMsIGZpZWxkTmFtZToge215X2ZpZWxkX25hbWU6IDB9LCBjdG9yOiBwcm90by5leGFtcGxlLk15TWVzc2FnZX0gfVxuICpcbiAqIGZpZWxkTmFtZSBjb250YWlucyB0aGUgSnNDb21waWxlciByZW5hbWVkIGZpZWxkIG5hbWUgcHJvcGVydHkgc28gdGhhdCBpdFxuICogd29ya3MgaW4gT1BUSU1JWkVEIG1vZGUuXG4gKlxuICogQHR5cGUgeyFPYmplY3Q8bnVtYmVyLCBqc3BiLkV4dGVuc2lvbkZpZWxkQmluYXJ5SW5mbz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0aW9ucy5leHRlbnNpb25zQmluYXJ5ID0ge307XG5cblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JPcHRpb25zLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0aW9ucy50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0aW9uc30gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JPcHRpb25zLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBtZXJnZUZpZWxkczogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkKG1zZywgMSkpID09IG51bGwgPyB1bmRlZmluZWQgOiBmXG4gIH07XG5cbiAganNwYi5NZXNzYWdlLnRvT2JqZWN0RXh0ZW5zaW9uKC8qKiBAdHlwZSB7IWpzcGIuTWVzc2FnZX0gKi8gKG1zZyksIG9iaixcbiAgICAgIHByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0aW9ucy5leHRlbnNpb25zLCBwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvck9wdGlvbnMucHJvdG90eXBlLmdldEV4dGVuc2lvbixcbiAgICAgIGluY2x1ZGVJbnN0YW5jZSk7XG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG59XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvck9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvck9wdGlvbnM7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvck9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JPcHRpb25zfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0aW9uc31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge2Jvb2xlYW59ICovIChyZWFkZXIucmVhZEJvb2woKSk7XG4gICAgICBtc2cuc2V0TWVyZ2VGaWVsZHModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGpzcGIuTWVzc2FnZS5yZWFkQmluYXJ5RXh0ZW5zaW9uKG1zZywgcmVhZGVyLFxuICAgICAgICBwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvck9wdGlvbnMuZXh0ZW5zaW9uc0JpbmFyeSxcbiAgICAgICAgcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JPcHRpb25zLnByb3RvdHlwZS5nZXRFeHRlbnNpb24sXG4gICAgICAgIHByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0aW9ucy5wcm90b3R5cGUuc2V0RXh0ZW5zaW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvck9wdGlvbnMucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0aW9uc30gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvck9wdGlvbnMuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG4gIGYgPSAvKiogQHR5cGUge2Jvb2xlYW59ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMSkpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlQm9vbChcbiAgICAgIDEsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBqc3BiLk1lc3NhZ2Uuc2VyaWFsaXplQmluYXJ5RXh0ZW5zaW9ucyhtZXNzYWdlLCB3cml0ZXIsXG4gICAgcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JPcHRpb25zLmV4dGVuc2lvbnNCaW5hcnksIHByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0aW9ucy5wcm90b3R5cGUuZ2V0RXh0ZW5zaW9uKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBib29sIG1lcmdlX2ZpZWxkcyA9IDE7XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvck9wdGlvbnMucHJvdG90eXBlLmdldE1lcmdlRmllbGRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge2Jvb2xlYW59ICovIChqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQodGhpcywgMSwgZmFsc2UpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JPcHRpb25zLnByb3RvdHlwZS5zZXRNZXJnZUZpZWxkcyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvck9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvck9wdGlvbnMucHJvdG90eXBlLmNsZWFyTWVyZ2VGaWVsZHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0aW9ucy5wcm90b3R5cGUuaGFzTWVyZ2VGaWVsZHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xufTtcblxuXG5nb29nLm9iamVjdC5leHRlbmQoZXhwb3J0cywgcHJvdG8ubWVkaWFwaXBlKTtcbiIsIi8vIHNvdXJjZTogbWVkaWFwaXBlL2ZyYW1ld29yay9tZWRpYXBpcGVfb3B0aW9ucy5wcm90b1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKiBAZW5oYW5jZWFibGVcbiAqIEBzdXBwcmVzcyB7bWlzc2luZ1JlcXVpcmV9IHJlcG9ydHMgZXJyb3Igb24gaW1wbGljaXQgdHlwZSB1c2FnZXMuXG4gKiBAc3VwcHJlc3Mge21lc3NhZ2VDb252ZW50aW9uc30gSlMgQ29tcGlsZXIgcmVwb3J0cyBhbiBlcnJvciBpZiBhIHZhcmlhYmxlIG9yXG4gKiAgICAgZmllbGQgc3RhcnRzIHdpdGggJ01TR18nIGFuZCBpc24ndCBhIHRyYW5zbGF0YWJsZSBtZXNzYWdlLlxuICogQHB1YmxpY1xuICovXG4vLyBHRU5FUkFURUQgQ09ERSAtLSBETyBOT1QgRURJVCFcbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuXG52YXIganNwYiA9IHJlcXVpcmUoJ2dvb2dsZS1wcm90b2J1ZicpO1xudmFyIGdvb2cgPSBqc3BiO1xudmFyIGdsb2JhbCA9XG4gICAgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzKSB8fFxuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cpIHx8XG4gICAgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbCkgfHxcbiAgICAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYpIHx8XG4gICAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pLmNhbGwobnVsbCkgfHxcbiAgICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ubWVkaWFwaXBlLk1lZGlhUGlwZU9wdGlvbnMnLCBudWxsLCBnbG9iYWwpO1xuLyoqXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxuICogdmFsaWQuXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5NZWRpYVBpcGVPcHRpb25zID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIDEsIG51bGwsIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLk1lZGlhUGlwZU9wdGlvbnMsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUuTWVkaWFQaXBlT3B0aW9ucy5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUuTWVkaWFQaXBlT3B0aW9ucyc7XG59XG5cbi8qKlxuICogVGhlIGV4dGVuc2lvbnMgcmVnaXN0ZXJlZCB3aXRoIHRoaXMgbWVzc2FnZSBjbGFzcy4gVGhpcyBpcyBhIG1hcCBvZlxuICogZXh0ZW5zaW9uIGZpZWxkIG51bWJlciB0byBmaWVsZEluZm8gb2JqZWN0LlxuICpcbiAqIEZvciBleGFtcGxlOlxuICogICAgIHsgMTIzOiB7ZmllbGRJbmRleDogMTIzLCBmaWVsZE5hbWU6IHtteV9maWVsZF9uYW1lOiAwfSwgY3RvcjogcHJvdG8uZXhhbXBsZS5NeU1lc3NhZ2V9IH1cbiAqXG4gKiBmaWVsZE5hbWUgY29udGFpbnMgdGhlIEpzQ29tcGlsZXIgcmVuYW1lZCBmaWVsZCBuYW1lIHByb3BlcnR5IHNvIHRoYXQgaXRcbiAqIHdvcmtzIGluIE9QVElNSVpFRCBtb2RlLlxuICpcbiAqIEB0eXBlIHshT2JqZWN0PG51bWJlciwganNwYi5FeHRlbnNpb25GaWVsZEluZm8+fVxuICovXG5wcm90by5tZWRpYXBpcGUuTWVkaWFQaXBlT3B0aW9ucy5leHRlbnNpb25zID0ge307XG5cblxuLyoqXG4gKiBUaGUgZXh0ZW5zaW9ucyByZWdpc3RlcmVkIHdpdGggdGhpcyBtZXNzYWdlIGNsYXNzLiBUaGlzIGlzIGEgbWFwIG9mXG4gKiBleHRlbnNpb24gZmllbGQgbnVtYmVyIHRvIGZpZWxkSW5mbyBvYmplY3QuXG4gKlxuICogRm9yIGV4YW1wbGU6XG4gKiAgICAgeyAxMjM6IHtmaWVsZEluZGV4OiAxMjMsIGZpZWxkTmFtZToge215X2ZpZWxkX25hbWU6IDB9LCBjdG9yOiBwcm90by5leGFtcGxlLk15TWVzc2FnZX0gfVxuICpcbiAqIGZpZWxkTmFtZSBjb250YWlucyB0aGUgSnNDb21waWxlciByZW5hbWVkIGZpZWxkIG5hbWUgcHJvcGVydHkgc28gdGhhdCBpdFxuICogd29ya3MgaW4gT1BUSU1JWkVEIG1vZGUuXG4gKlxuICogQHR5cGUgeyFPYmplY3Q8bnVtYmVyLCBqc3BiLkV4dGVuc2lvbkZpZWxkQmluYXJ5SW5mbz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5NZWRpYVBpcGVPcHRpb25zLmV4dGVuc2lvbnNCaW5hcnkgPSB7fTtcblxuXG5cblxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICovXG5wcm90by5tZWRpYXBpcGUuTWVkaWFQaXBlT3B0aW9ucy5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuTWVkaWFQaXBlT3B0aW9ucy50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5NZWRpYVBpcGVPcHRpb25zfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuTWVkaWFQaXBlT3B0aW9ucy50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG5cbiAgfTtcblxuICBqc3BiLk1lc3NhZ2UudG9PYmplY3RFeHRlbnNpb24oLyoqIEB0eXBlIHshanNwYi5NZXNzYWdlfSAqLyAobXNnKSwgb2JqLFxuICAgICAgcHJvdG8ubWVkaWFwaXBlLk1lZGlhUGlwZU9wdGlvbnMuZXh0ZW5zaW9ucywgcHJvdG8ubWVkaWFwaXBlLk1lZGlhUGlwZU9wdGlvbnMucHJvdG90eXBlLmdldEV4dGVuc2lvbixcbiAgICAgIGluY2x1ZGVJbnN0YW5jZSk7XG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG59XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLk1lZGlhUGlwZU9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5NZWRpYVBpcGVPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLk1lZGlhUGlwZU9wdGlvbnM7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuTWVkaWFQaXBlT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuTWVkaWFQaXBlT3B0aW9uc30gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTWVkaWFQaXBlT3B0aW9uc31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk1lZGlhUGlwZU9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGRlZmF1bHQ6XG4gICAgICBqc3BiLk1lc3NhZ2UucmVhZEJpbmFyeUV4dGVuc2lvbihtc2csIHJlYWRlcixcbiAgICAgICAgcHJvdG8ubWVkaWFwaXBlLk1lZGlhUGlwZU9wdGlvbnMuZXh0ZW5zaW9uc0JpbmFyeSxcbiAgICAgICAgcHJvdG8ubWVkaWFwaXBlLk1lZGlhUGlwZU9wdGlvbnMucHJvdG90eXBlLmdldEV4dGVuc2lvbixcbiAgICAgICAgcHJvdG8ubWVkaWFwaXBlLk1lZGlhUGlwZU9wdGlvbnMucHJvdG90eXBlLnNldEV4dGVuc2lvbik7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk1lZGlhUGlwZU9wdGlvbnMucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLm1lZGlhcGlwZS5NZWRpYVBpcGVPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLk1lZGlhUGlwZU9wdGlvbnN9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLk1lZGlhUGlwZU9wdGlvbnMuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG4gIGpzcGIuTWVzc2FnZS5zZXJpYWxpemVCaW5hcnlFeHRlbnNpb25zKG1lc3NhZ2UsIHdyaXRlcixcbiAgICBwcm90by5tZWRpYXBpcGUuTWVkaWFQaXBlT3B0aW9ucy5leHRlbnNpb25zQmluYXJ5LCBwcm90by5tZWRpYXBpcGUuTWVkaWFQaXBlT3B0aW9ucy5wcm90b3R5cGUuZ2V0RXh0ZW5zaW9uKTtcbn07XG5cblxuZ29vZy5vYmplY3QuZXh0ZW5kKGV4cG9ydHMsIHByb3RvLm1lZGlhcGlwZSk7XG4iLCIvLyBzb3VyY2U6IG1lZGlhcGlwZS9mcmFtZXdvcmsvcGFja2V0X2ZhY3RvcnkucHJvdG9cbi8qKlxuICogQGZpbGVvdmVydmlld1xuICogQGVuaGFuY2VhYmxlXG4gKiBAc3VwcHJlc3Mge21pc3NpbmdSZXF1aXJlfSByZXBvcnRzIGVycm9yIG9uIGltcGxpY2l0IHR5cGUgdXNhZ2VzLlxuICogQHN1cHByZXNzIHttZXNzYWdlQ29udmVudGlvbnN9IEpTIENvbXBpbGVyIHJlcG9ydHMgYW4gZXJyb3IgaWYgYSB2YXJpYWJsZSBvclxuICogICAgIGZpZWxkIHN0YXJ0cyB3aXRoICdNU0dfJyBhbmQgaXNuJ3QgYSB0cmFuc2xhdGFibGUgbWVzc2FnZS5cbiAqIEBwdWJsaWNcbiAqL1xuLy8gR0VORVJBVEVEIENPREUgLS0gRE8gTk9UIEVESVQhXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcblxudmFyIGpzcGIgPSByZXF1aXJlKCdnb29nbGUtcHJvdG9idWYnKTtcbnZhciBnb29nID0ganNwYjtcbnZhciBnbG9iYWwgPVxuICAgICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93KSB8fFxuICAgICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwpIHx8XG4gICAgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmKSB8fFxuICAgIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KS5jYWxsKG51bGwpIHx8XG4gICAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5Q29uZmlnJywgbnVsbCwgZ2xvYmFsKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeU9wdGlvbnMnLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5QYWNrZXRNYW5hZ2VyQ29uZmlnJywgbnVsbCwgZ2xvYmFsKTtcbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeU9wdGlvbnMgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgMSwgbnVsbCwgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeU9wdGlvbnMsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeU9wdGlvbnMuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlPcHRpb25zJztcbn1cblxuLyoqXG4gKiBUaGUgZXh0ZW5zaW9ucyByZWdpc3RlcmVkIHdpdGggdGhpcyBtZXNzYWdlIGNsYXNzLiBUaGlzIGlzIGEgbWFwIG9mXG4gKiBleHRlbnNpb24gZmllbGQgbnVtYmVyIHRvIGZpZWxkSW5mbyBvYmplY3QuXG4gKlxuICogRm9yIGV4YW1wbGU6XG4gKiAgICAgeyAxMjM6IHtmaWVsZEluZGV4OiAxMjMsIGZpZWxkTmFtZToge215X2ZpZWxkX25hbWU6IDB9LCBjdG9yOiBwcm90by5leGFtcGxlLk15TWVzc2FnZX0gfVxuICpcbiAqIGZpZWxkTmFtZSBjb250YWlucyB0aGUgSnNDb21waWxlciByZW5hbWVkIGZpZWxkIG5hbWUgcHJvcGVydHkgc28gdGhhdCBpdFxuICogd29ya3MgaW4gT1BUSU1JWkVEIG1vZGUuXG4gKlxuICogQHR5cGUgeyFPYmplY3Q8bnVtYmVyLCBqc3BiLkV4dGVuc2lvbkZpZWxkSW5mbz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5T3B0aW9ucy5leHRlbnNpb25zID0ge307XG5cblxuLyoqXG4gKiBUaGUgZXh0ZW5zaW9ucyByZWdpc3RlcmVkIHdpdGggdGhpcyBtZXNzYWdlIGNsYXNzLiBUaGlzIGlzIGEgbWFwIG9mXG4gKiBleHRlbnNpb24gZmllbGQgbnVtYmVyIHRvIGZpZWxkSW5mbyBvYmplY3QuXG4gKlxuICogRm9yIGV4YW1wbGU6XG4gKiAgICAgeyAxMjM6IHtmaWVsZEluZGV4OiAxMjMsIGZpZWxkTmFtZToge215X2ZpZWxkX25hbWU6IDB9LCBjdG9yOiBwcm90by5leGFtcGxlLk15TWVzc2FnZX0gfVxuICpcbiAqIGZpZWxkTmFtZSBjb250YWlucyB0aGUgSnNDb21waWxlciByZW5hbWVkIGZpZWxkIG5hbWUgcHJvcGVydHkgc28gdGhhdCBpdFxuICogd29ya3MgaW4gT1BUSU1JWkVEIG1vZGUuXG4gKlxuICogQHR5cGUgeyFPYmplY3Q8bnVtYmVyLCBqc3BiLkV4dGVuc2lvbkZpZWxkQmluYXJ5SW5mbz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5T3B0aW9ucy5leHRlbnNpb25zQmluYXJ5ID0ge307XG5cbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZyA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCA1MDAsIG51bGwsIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlDb25maWcsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZy5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZyc7XG59XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldE1hbmFnZXJDb25maWcgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIHByb3RvLm1lZGlhcGlwZS5QYWNrZXRNYW5hZ2VyQ29uZmlnLnJlcGVhdGVkRmllbGRzXywgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUuUGFja2V0TWFuYWdlckNvbmZpZywganNwYi5NZXNzYWdlKTtcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RvLm1lZGlhcGlwZS5QYWNrZXRNYW5hZ2VyQ29uZmlnLmRpc3BsYXlOYW1lID0gJ3Byb3RvLm1lZGlhcGlwZS5QYWNrZXRNYW5hZ2VyQ29uZmlnJztcbn1cblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlPcHRpb25zLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5T3B0aW9ucy50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5T3B0aW9uc30gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlPcHRpb25zLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcblxuICB9O1xuXG4gIGpzcGIuTWVzc2FnZS50b09iamVjdEV4dGVuc2lvbigvKiogQHR5cGUgeyFqc3BiLk1lc3NhZ2V9ICovIChtc2cpLCBvYmosXG4gICAgICBwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeU9wdGlvbnMuZXh0ZW5zaW9ucywgcHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlPcHRpb25zLnByb3RvdHlwZS5nZXRFeHRlbnNpb24sXG4gICAgICBpbmNsdWRlSW5zdGFuY2UpO1xuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5T3B0aW9uc31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlPcHRpb25zO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5T3B0aW9uc30gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeU9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5T3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgZGVmYXVsdDpcbiAgICAgIGpzcGIuTWVzc2FnZS5yZWFkQmluYXJ5RXh0ZW5zaW9uKG1zZywgcmVhZGVyLFxuICAgICAgICBwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeU9wdGlvbnMuZXh0ZW5zaW9uc0JpbmFyeSxcbiAgICAgICAgcHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlPcHRpb25zLnByb3RvdHlwZS5nZXRFeHRlbnNpb24sXG4gICAgICAgIHByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5T3B0aW9ucy5wcm90b3R5cGUuc2V0RXh0ZW5zaW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeU9wdGlvbnMucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5T3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5T3B0aW9uc30gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeU9wdGlvbnMuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG4gIGpzcGIuTWVzc2FnZS5zZXJpYWxpemVCaW5hcnlFeHRlbnNpb25zKG1lc3NhZ2UsIHdyaXRlcixcbiAgICBwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeU9wdGlvbnMuZXh0ZW5zaW9uc0JpbmFyeSwgcHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlPcHRpb25zLnByb3RvdHlwZS5nZXRFeHRlbnNpb24pO1xufTtcblxuXG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5Q29uZmlnLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5Q29uZmlnLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlDb25maWd9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5Q29uZmlnLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBwYWNrZXRGYWN0b3J5OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtc2csIDEpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICBvdXRwdXRTaWRlUGFja2V0OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtc2csIDIpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICBleHRlcm5hbE91dHB1dDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCAxMDAyKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgb3B0aW9uczogKGYgPSBtc2cuZ2V0T3B0aW9ucygpKSAmJiBwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeU9wdGlvbnMudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKVxuICB9O1xuXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG59XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlDb25maWd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5Q29uZmlnLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlDb25maWc7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZ30gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlDb25maWcuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuc2V0UGFja2V0RmFjdG9yeSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xuICAgICAgbXNnLnNldE91dHB1dFNpZGVQYWNrZXQodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDAyOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5zZXRFeHRlcm5hbE91dHB1dCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlPcHRpb25zO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5T3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldE9wdGlvbnModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZy5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlDb25maWcuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZ30gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDEpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZVN0cmluZyhcbiAgICAgIDEsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMikpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxuICAgICAgMixcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAxMDAyKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXG4gICAgICAxMDAyLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0T3B0aW9ucygpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDMsXG4gICAgICBmLFxuICAgICAgcHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyBwYWNrZXRfZmFjdG9yeSA9IDE7XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5Q29uZmlnLnByb3RvdHlwZS5nZXRQYWNrZXRGYWN0b3J5ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIFwiXCIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5Q29uZmlnLnByb3RvdHlwZS5zZXRQYWNrZXRGYWN0b3J5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5Q29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlDb25maWcucHJvdG90eXBlLmNsZWFyUGFja2V0RmFjdG9yeSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlDb25maWcucHJvdG90eXBlLmhhc1BhY2tldEZhY3RvcnkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyBvdXRwdXRfc2lkZV9wYWNrZXQgPSAyO1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZy5wcm90b3R5cGUuZ2V0T3V0cHV0U2lkZVBhY2tldCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCBcIlwiKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZy5wcm90b3R5cGUuc2V0T3V0cHV0U2lkZVBhY2tldCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5Q29uZmlnLnByb3RvdHlwZS5jbGVhck91dHB1dFNpZGVQYWNrZXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5Q29uZmlnLnByb3RvdHlwZS5oYXNPdXRwdXRTaWRlUGFja2V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBzdHJpbmcgZXh0ZXJuYWxfb3V0cHV0ID0gMTAwMjtcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlDb25maWcucHJvdG90eXBlLmdldEV4dGVybmFsT3V0cHV0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEwMDIsIFwiXCIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5Q29uZmlnLnByb3RvdHlwZS5zZXRFeHRlcm5hbE91dHB1dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMTAwMiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5Q29uZmlnLnByb3RvdHlwZS5jbGVhckV4dGVybmFsT3V0cHV0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMTAwMiwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZy5wcm90b3R5cGUuaGFzRXh0ZXJuYWxPdXRwdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxMDAyKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIFBhY2tldEZhY3RvcnlPcHRpb25zIG9wdGlvbnMgPSAzO1xuICogQHJldHVybiB7P3Byb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5T3B0aW9uc31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlDb25maWcucHJvdG90eXBlLmdldE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlPcHRpb25zfSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeU9wdGlvbnMsIDMpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeU9wdGlvbnN8dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5Q29uZmlnfSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZy5wcm90b3R5cGUuc2V0T3B0aW9ucyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDMsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5Q29uZmlnLnByb3RvdHlwZS5jbGVhck9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0T3B0aW9ucyh1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5Q29uZmlnLnByb3RvdHlwZS5oYXNPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMykgIT0gbnVsbDtcbn07XG5cblxuXG4vKipcbiAqIExpc3Qgb2YgcmVwZWF0ZWQgZmllbGRzIHdpdGhpbiB0aGlzIG1lc3NhZ2UgdHlwZS5cbiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn1cbiAqIEBjb25zdFxuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0TWFuYWdlckNvbmZpZy5yZXBlYXRlZEZpZWxkc18gPSBbMV07XG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRNYW5hZ2VyQ29uZmlnLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5QYWNrZXRNYW5hZ2VyQ29uZmlnLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldE1hbmFnZXJDb25maWd9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRNYW5hZ2VyQ29uZmlnLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBwYWNrZXRMaXN0OiBqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRQYWNrZXRMaXN0KCksXG4gICAgcHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlDb25maWcudG9PYmplY3QsIGluY2x1ZGVJbnN0YW5jZSlcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRNYW5hZ2VyQ29uZmlnfVxuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0TWFuYWdlckNvbmZpZy5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS5QYWNrZXRNYW5hZ2VyQ29uZmlnO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLlBhY2tldE1hbmFnZXJDb25maWcuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldE1hbmFnZXJDb25maWd9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldE1hbmFnZXJDb25maWd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRNYW5hZ2VyQ29uZmlnLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlDb25maWc7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlDb25maWcuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5hZGRQYWNrZXQodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0TWFuYWdlckNvbmZpZy5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLlBhY2tldE1hbmFnZXJDb25maWcuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuUGFja2V0TWFuYWdlckNvbmZpZ30gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0TWFuYWdlckNvbmZpZy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IG1lc3NhZ2UuZ2V0UGFja2V0TGlzdCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKFxuICAgICAgMSxcbiAgICAgIGYsXG4gICAgICBwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBQYWNrZXRGYWN0b3J5Q29uZmlnIHBhY2tldCA9IDE7XG4gKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5Q29uZmlnPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldE1hbmFnZXJDb25maWcucHJvdG90eXBlLmdldFBhY2tldExpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5Q29uZmlnPn0gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZywgMSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZz59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldE1hbmFnZXJDb25maWd9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRNYW5hZ2VyQ29uZmlnLnByb3RvdHlwZS5zZXRQYWNrZXRMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlDb25maWc9fSBvcHRfdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlDb25maWd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRNYW5hZ2VyQ29uZmlnLnByb3RvdHlwZS5hZGRQYWNrZXQgPSBmdW5jdGlvbihvcHRfdmFsdWUsIG9wdF9pbmRleCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgMSwgb3B0X3ZhbHVlLCBwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZywgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUGFja2V0TWFuYWdlckNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRNYW5hZ2VyQ29uZmlnLnByb3RvdHlwZS5jbGVhclBhY2tldExpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0UGFja2V0TGlzdChbXSk7XG59O1xuXG5cbmdvb2cub2JqZWN0LmV4dGVuZChleHBvcnRzLCBwcm90by5tZWRpYXBpcGUpO1xuIiwiLy8gc291cmNlOiBtZWRpYXBpcGUvZnJhbWV3b3JrL3BhY2tldF9nZW5lcmF0b3IucHJvdG9cbi8qKlxuICogQGZpbGVvdmVydmlld1xuICogQGVuaGFuY2VhYmxlXG4gKiBAc3VwcHJlc3Mge21pc3NpbmdSZXF1aXJlfSByZXBvcnRzIGVycm9yIG9uIGltcGxpY2l0IHR5cGUgdXNhZ2VzLlxuICogQHN1cHByZXNzIHttZXNzYWdlQ29udmVudGlvbnN9IEpTIENvbXBpbGVyIHJlcG9ydHMgYW4gZXJyb3IgaWYgYSB2YXJpYWJsZSBvclxuICogICAgIGZpZWxkIHN0YXJ0cyB3aXRoICdNU0dfJyBhbmQgaXNuJ3QgYSB0cmFuc2xhdGFibGUgbWVzc2FnZS5cbiAqIEBwdWJsaWNcbiAqL1xuLy8gR0VORVJBVEVEIENPREUgLS0gRE8gTk9UIEVESVQhXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcblxudmFyIGpzcGIgPSByZXF1aXJlKCdnb29nbGUtcHJvdG9idWYnKTtcbnZhciBnb29nID0ganNwYjtcbnZhciBnbG9iYWwgPVxuICAgICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93KSB8fFxuICAgICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwpIHx8XG4gICAgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmKSB8fFxuICAgIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KS5jYWxsKG51bGwpIHx8XG4gICAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWcnLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JPcHRpb25zJywgbnVsbCwgZ2xvYmFsKTtcbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yT3B0aW9ucyA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAyLCBudWxsLCBudWxsKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JPcHRpb25zLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvck9wdGlvbnMuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvck9wdGlvbnMnO1xufVxuXG4vKipcbiAqIFRoZSBleHRlbnNpb25zIHJlZ2lzdGVyZWQgd2l0aCB0aGlzIG1lc3NhZ2UgY2xhc3MuIFRoaXMgaXMgYSBtYXAgb2ZcbiAqIGV4dGVuc2lvbiBmaWVsZCBudW1iZXIgdG8gZmllbGRJbmZvIG9iamVjdC5cbiAqXG4gKiBGb3IgZXhhbXBsZTpcbiAqICAgICB7IDEyMzoge2ZpZWxkSW5kZXg6IDEyMywgZmllbGROYW1lOiB7bXlfZmllbGRfbmFtZTogMH0sIGN0b3I6IHByb3RvLmV4YW1wbGUuTXlNZXNzYWdlfSB9XG4gKlxuICogZmllbGROYW1lIGNvbnRhaW5zIHRoZSBKc0NvbXBpbGVyIHJlbmFtZWQgZmllbGQgbmFtZSBwcm9wZXJ0eSBzbyB0aGF0IGl0XG4gKiB3b3JrcyBpbiBPUFRJTUlaRUQgbW9kZS5cbiAqXG4gKiBAdHlwZSB7IU9iamVjdDxudW1iZXIsIGpzcGIuRXh0ZW5zaW9uRmllbGRJbmZvPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvck9wdGlvbnMuZXh0ZW5zaW9ucyA9IHt9O1xuXG5cbi8qKlxuICogVGhlIGV4dGVuc2lvbnMgcmVnaXN0ZXJlZCB3aXRoIHRoaXMgbWVzc2FnZSBjbGFzcy4gVGhpcyBpcyBhIG1hcCBvZlxuICogZXh0ZW5zaW9uIGZpZWxkIG51bWJlciB0byBmaWVsZEluZm8gb2JqZWN0LlxuICpcbiAqIEZvciBleGFtcGxlOlxuICogICAgIHsgMTIzOiB7ZmllbGRJbmRleDogMTIzLCBmaWVsZE5hbWU6IHtteV9maWVsZF9uYW1lOiAwfSwgY3RvcjogcHJvdG8uZXhhbXBsZS5NeU1lc3NhZ2V9IH1cbiAqXG4gKiBmaWVsZE5hbWUgY29udGFpbnMgdGhlIEpzQ29tcGlsZXIgcmVuYW1lZCBmaWVsZCBuYW1lIHByb3BlcnR5IHNvIHRoYXQgaXRcbiAqIHdvcmtzIGluIE9QVElNSVpFRCBtb2RlLlxuICpcbiAqIEB0eXBlIHshT2JqZWN0PG51bWJlciwganNwYi5FeHRlbnNpb25GaWVsZEJpbmFyeUluZm8+fVxuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yT3B0aW9ucy5leHRlbnNpb25zQmluYXJ5ID0ge307XG5cbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIDUwMCwgcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZy5yZXBlYXRlZEZpZWxkc18sIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZywganNwYi5NZXNzYWdlKTtcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWcuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZyc7XG59XG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JPcHRpb25zLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JPcHRpb25zLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvck9wdGlvbnN9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JPcHRpb25zLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBtZXJnZUZpZWxkczoganNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KG1zZywgMSwgdHJ1ZSlcbiAgfTtcblxuICBqc3BiLk1lc3NhZ2UudG9PYmplY3RFeHRlbnNpb24oLyoqIEB0eXBlIHshanNwYi5NZXNzYWdlfSAqLyAobXNnKSwgb2JqLFxuICAgICAgcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvck9wdGlvbnMuZXh0ZW5zaW9ucywgcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvck9wdGlvbnMucHJvdG90eXBlLmdldEV4dGVuc2lvbixcbiAgICAgIGluY2x1ZGVJbnN0YW5jZSk7XG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG59XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvck9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvck9wdGlvbnM7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yT3B0aW9uc30gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yT3B0aW9uc31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvck9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gKHJlYWRlci5yZWFkQm9vbCgpKTtcbiAgICAgIG1zZy5zZXRNZXJnZUZpZWxkcyh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAganNwYi5NZXNzYWdlLnJlYWRCaW5hcnlFeHRlbnNpb24obXNnLCByZWFkZXIsXG4gICAgICAgIHByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JPcHRpb25zLmV4dGVuc2lvbnNCaW5hcnksXG4gICAgICAgIHByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JPcHRpb25zLnByb3RvdHlwZS5nZXRFeHRlbnNpb24sXG4gICAgICAgIHByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JPcHRpb25zLnByb3RvdHlwZS5zZXRFeHRlbnNpb24pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JPcHRpb25zLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JPcHRpb25zfSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gLyoqIEB0eXBlIHtib29sZWFufSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDEpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUJvb2woXG4gICAgICAxLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAganNwYi5NZXNzYWdlLnNlcmlhbGl6ZUJpbmFyeUV4dGVuc2lvbnMobWVzc2FnZSwgd3JpdGVyLFxuICAgIHByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JPcHRpb25zLmV4dGVuc2lvbnNCaW5hcnksIHByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JPcHRpb25zLnByb3RvdHlwZS5nZXRFeHRlbnNpb24pO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGJvb2wgbWVyZ2VfZmllbGRzID0gMTtcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JPcHRpb25zLnByb3RvdHlwZS5nZXRNZXJnZUZpZWxkcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtib29sZWFufSAqLyAoanNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIHRydWUpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvck9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yT3B0aW9ucy5wcm90b3R5cGUuc2V0TWVyZ2VGaWVsZHMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvck9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yT3B0aW9ucy5wcm90b3R5cGUuY2xlYXJNZXJnZUZpZWxkcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvck9wdGlvbnMucHJvdG90eXBlLmhhc01lcmdlRmllbGRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcbn07XG5cblxuXG4vKipcbiAqIExpc3Qgb2YgcmVwZWF0ZWQgZmllbGRzIHdpdGhpbiB0aGlzIG1lc3NhZ2UgdHlwZS5cbiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn1cbiAqIEBjb25zdFxuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnLnJlcGVhdGVkRmllbGRzXyA9IFsyLDEwMDIsMywxMDAzXTtcblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZy5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZ30gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZy50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgcGFja2V0R2VuZXJhdG9yOiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtc2csIDEpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICBpbnB1dFNpZGVQYWNrZXRMaXN0OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKG1zZywgMikpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIGV4dGVybmFsSW5wdXRMaXN0OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKG1zZywgMTAwMikpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIG91dHB1dFNpZGVQYWNrZXRMaXN0OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKG1zZywgMykpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIGV4dGVybmFsT3V0cHV0TGlzdDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZChtc2csIDEwMDMpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICBvcHRpb25zOiAoZiA9IG1zZy5nZXRPcHRpb25zKCkpICYmIHByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JPcHRpb25zLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZilcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWcuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWcuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuc2V0UGFja2V0R2VuZXJhdG9yKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuYWRkSW5wdXRTaWRlUGFja2V0KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTAwMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuYWRkRXh0ZXJuYWxJbnB1dCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xuICAgICAgbXNnLmFkZE91dHB1dFNpZGVQYWNrZXQodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDAzOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5hZGRFeHRlcm5hbE91dHB1dCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvck9wdGlvbnM7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvck9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5zZXRPcHRpb25zKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZy5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWd9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDEpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZVN0cmluZyhcbiAgICAgIDEsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRJbnB1dFNpZGVQYWNrZXRMaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZFN0cmluZyhcbiAgICAgIDIsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRFeHRlcm5hbElucHV0TGlzdCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRTdHJpbmcoXG4gICAgICAxMDAyLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0T3V0cHV0U2lkZVBhY2tldExpc3QoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkU3RyaW5nKFxuICAgICAgMyxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldEV4dGVybmFsT3V0cHV0TGlzdCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRTdHJpbmcoXG4gICAgICAxMDAzLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0T3B0aW9ucygpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDQsXG4gICAgICBmLFxuICAgICAgcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvck9wdGlvbnMuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcbiAgICApO1xuICB9XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgc3RyaW5nIHBhY2tldF9nZW5lcmF0b3IgPSAxO1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnLnByb3RvdHlwZS5nZXRQYWNrZXRHZW5lcmF0b3IgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMSwgXCJcIikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnLnByb3RvdHlwZS5zZXRQYWNrZXRHZW5lcmF0b3IgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWcucHJvdG90eXBlLmNsZWFyUGFja2V0R2VuZXJhdG9yID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMSwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnLnByb3RvdHlwZS5oYXNQYWNrZXRHZW5lcmF0b3IgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIHN0cmluZyBpbnB1dF9zaWRlX3BhY2tldCA9IDI7XG4gKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZy5wcm90b3R5cGUuZ2V0SW5wdXRTaWRlUGFja2V0TGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHshQXJyYXk8c3RyaW5nPn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKHRoaXMsIDIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnLnByb3RvdHlwZS5zZXRJbnB1dFNpZGVQYWNrZXRMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB2YWx1ZSB8fCBbXSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnLnByb3RvdHlwZS5hZGRJbnB1dFNpZGVQYWNrZXQgPSBmdW5jdGlvbih2YWx1ZSwgb3B0X2luZGV4KSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZEZpZWxkKHRoaXMsIDIsIHZhbHVlLCBvcHRfaW5kZXgpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnLnByb3RvdHlwZS5jbGVhcklucHV0U2lkZVBhY2tldExpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0SW5wdXRTaWRlUGFja2V0TGlzdChbXSk7XG59O1xuXG5cbi8qKlxuICogcmVwZWF0ZWQgc3RyaW5nIGV4dGVybmFsX2lucHV0ID0gMTAwMjtcbiAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fVxuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnLnByb3RvdHlwZS5nZXRFeHRlcm5hbElucHV0TGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHshQXJyYXk8c3RyaW5nPn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKHRoaXMsIDEwMDIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnLnByb3RvdHlwZS5zZXRFeHRlcm5hbElucHV0TGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMTAwMiwgdmFsdWUgfHwgW10pO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZy5wcm90b3R5cGUuYWRkRXh0ZXJuYWxJbnB1dCA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkRmllbGQodGhpcywgMTAwMiwgdmFsdWUsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWcucHJvdG90eXBlLmNsZWFyRXh0ZXJuYWxJbnB1dExpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0RXh0ZXJuYWxJbnB1dExpc3QoW10pO1xufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIHN0cmluZyBvdXRwdXRfc2lkZV9wYWNrZXQgPSAzO1xuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWcucHJvdG90eXBlLmdldE91dHB1dFNpZGVQYWNrZXRMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUgeyFBcnJheTxzdHJpbmc+fSAqLyAoanNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodGhpcywgMykpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWcucHJvdG90eXBlLnNldE91dHB1dFNpZGVQYWNrZXRMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB2YWx1ZSB8fCBbXSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnLnByb3RvdHlwZS5hZGRPdXRwdXRTaWRlUGFja2V0ID0gZnVuY3Rpb24odmFsdWUsIG9wdF9pbmRleCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRGaWVsZCh0aGlzLCAzLCB2YWx1ZSwgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZy5wcm90b3R5cGUuY2xlYXJPdXRwdXRTaWRlUGFja2V0TGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRPdXRwdXRTaWRlUGFja2V0TGlzdChbXSk7XG59O1xuXG5cbi8qKlxuICogcmVwZWF0ZWQgc3RyaW5nIGV4dGVybmFsX291dHB1dCA9IDEwMDM7XG4gKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZy5wcm90b3R5cGUuZ2V0RXh0ZXJuYWxPdXRwdXRMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUgeyFBcnJheTxzdHJpbmc+fSAqLyAoanNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodGhpcywgMTAwMykpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWcucHJvdG90eXBlLnNldEV4dGVybmFsT3V0cHV0TGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMTAwMywgdmFsdWUgfHwgW10pO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZy5wcm90b3R5cGUuYWRkRXh0ZXJuYWxPdXRwdXQgPSBmdW5jdGlvbih2YWx1ZSwgb3B0X2luZGV4KSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZEZpZWxkKHRoaXMsIDEwMDMsIHZhbHVlLCBvcHRfaW5kZXgpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnLnByb3RvdHlwZS5jbGVhckV4dGVybmFsT3V0cHV0TGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRFeHRlcm5hbE91dHB1dExpc3QoW10pO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIFBhY2tldEdlbmVyYXRvck9wdGlvbnMgb3B0aW9ucyA9IDQ7XG4gKiBAcmV0dXJuIHs/cHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvck9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWcucHJvdG90eXBlLmdldE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvck9wdGlvbnN9ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JPcHRpb25zLCA0KSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHs/cHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvck9wdGlvbnN8dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWd9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWcucHJvdG90eXBlLnNldE9wdGlvbnMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCA0LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5QYWNrZXRHZW5lcmF0b3JDb25maWcucHJvdG90eXBlLmNsZWFyT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRPcHRpb25zKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZy5wcm90b3R5cGUuaGFzT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDQpICE9IG51bGw7XG59O1xuXG5cbmdvb2cub2JqZWN0LmV4dGVuZChleHBvcnRzLCBwcm90by5tZWRpYXBpcGUpO1xuIiwiLy8gc291cmNlOiBtZWRpYXBpcGUvZnJhbWV3b3JrL3N0YXR1c19oYW5kbGVyLnByb3RvXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqIEBlbmhhbmNlYWJsZVxuICogQHN1cHByZXNzIHttaXNzaW5nUmVxdWlyZX0gcmVwb3J0cyBlcnJvciBvbiBpbXBsaWNpdCB0eXBlIHVzYWdlcy5cbiAqIEBzdXBwcmVzcyB7bWVzc2FnZUNvbnZlbnRpb25zfSBKUyBDb21waWxlciByZXBvcnRzIGFuIGVycm9yIGlmIGEgdmFyaWFibGUgb3JcbiAqICAgICBmaWVsZCBzdGFydHMgd2l0aCAnTVNHXycgYW5kIGlzbid0IGEgdHJhbnNsYXRhYmxlIG1lc3NhZ2UuXG4gKiBAcHVibGljXG4gKi9cbi8vIEdFTkVSQVRFRCBDT0RFIC0tIERPIE5PVCBFRElUIVxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbnZhciBqc3BiID0gcmVxdWlyZSgnZ29vZ2xlLXByb3RvYnVmJyk7XG52YXIgZ29vZyA9IGpzcGI7XG52YXIgZ2xvYmFsID1cbiAgICAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMpIHx8XG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdykgfHxcbiAgICAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsKSB8fFxuICAgICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZikgfHxcbiAgICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkuY2FsbChudWxsKSB8fFxuICAgIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbnZhciBtZWRpYXBpcGVfZnJhbWV3b3JrX21lZGlhcGlwZV9vcHRpb25zX3BiID0gcmVxdWlyZSgnLi4vLi4vbWVkaWFwaXBlL2ZyYW1ld29yay9tZWRpYXBpcGVfb3B0aW9uc19wYi5qcycpO1xuZ29vZy5vYmplY3QuZXh0ZW5kKHByb3RvLCBtZWRpYXBpcGVfZnJhbWV3b3JrX21lZGlhcGlwZV9vcHRpb25zX3BiKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZycsIG51bGwsIGdsb2JhbCk7XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlN0YXR1c0hhbmRsZXJDb25maWcgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgNTAwLCBwcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZy5yZXBlYXRlZEZpZWxkc18sIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLlN0YXR1c0hhbmRsZXJDb25maWcsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZy5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZyc7XG59XG5cbi8qKlxuICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLlxuICogQHByaXZhdGUgeyFBcnJheTxudW1iZXI+fVxuICogQGNvbnN0XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5TdGF0dXNIYW5kbGVyQ29uZmlnLnJlcGVhdGVkRmllbGRzXyA9IFsyLDEwMDJdO1xuXG5cblxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICovXG5wcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZy5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZy50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5TdGF0dXNIYW5kbGVyQ29uZmlnfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZy50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgc3RhdHVzSGFuZGxlcjogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCAxKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgaW5wdXRTaWRlUGFja2V0TGlzdDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZChtc2csIDIpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICBleHRlcm5hbElucHV0TGlzdDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZChtc2csIDEwMDIpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICBvcHRpb25zOiAoZiA9IG1zZy5nZXRPcHRpb25zKCkpICYmIG1lZGlhcGlwZV9mcmFtZXdvcmtfbWVkaWFwaXBlX29wdGlvbnNfcGIuTWVkaWFQaXBlT3B0aW9ucy50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlN0YXR1c0hhbmRsZXJDb25maWcuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZztcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5TdGF0dXNIYW5kbGVyQ29uZmlnLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5TdGF0dXNIYW5kbGVyQ29uZmlnfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5TdGF0dXNIYW5kbGVyQ29uZmlnfVxuICovXG5wcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5zZXRTdGF0dXNIYW5kbGVyKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuYWRkSW5wdXRTaWRlUGFja2V0KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTAwMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuYWRkRXh0ZXJuYWxJbnB1dCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgbWVkaWFwaXBlX2ZyYW1ld29ya19tZWRpYXBpcGVfb3B0aW9uc19wYi5NZWRpYVBpcGVPcHRpb25zO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLG1lZGlhcGlwZV9mcmFtZXdvcmtfbWVkaWFwaXBlX29wdGlvbnNfcGIuTWVkaWFQaXBlT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldE9wdGlvbnModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZy5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLlN0YXR1c0hhbmRsZXJDb25maWcuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZ30gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDEpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZVN0cmluZyhcbiAgICAgIDEsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRJbnB1dFNpZGVQYWNrZXRMaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZFN0cmluZyhcbiAgICAgIDIsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRFeHRlcm5hbElucHV0TGlzdCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRTdHJpbmcoXG4gICAgICAxMDAyLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0T3B0aW9ucygpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDMsXG4gICAgICBmLFxuICAgICAgbWVkaWFwaXBlX2ZyYW1ld29ya19tZWRpYXBpcGVfb3B0aW9uc19wYi5NZWRpYVBpcGVPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyBzdGF0dXNfaGFuZGxlciA9IDE7XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5TdGF0dXNIYW5kbGVyQ29uZmlnLnByb3RvdHlwZS5nZXRTdGF0dXNIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIFwiXCIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5TdGF0dXNIYW5kbGVyQ29uZmlnLnByb3RvdHlwZS5zZXRTdGF0dXNIYW5kbGVyID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5TdGF0dXNIYW5kbGVyQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlN0YXR1c0hhbmRsZXJDb25maWcucHJvdG90eXBlLmNsZWFyU3RhdHVzSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlN0YXR1c0hhbmRsZXJDb25maWcucHJvdG90eXBlLmhhc1N0YXR1c0hhbmRsZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIHN0cmluZyBpbnB1dF9zaWRlX3BhY2tldCA9IDI7XG4gKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlN0YXR1c0hhbmRsZXJDb25maWcucHJvdG90eXBlLmdldElucHV0U2lkZVBhY2tldExpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IUFycmF5PHN0cmluZz59ICovIChqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0aGlzLCAyKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5TdGF0dXNIYW5kbGVyQ29uZmlnLnByb3RvdHlwZS5zZXRJbnB1dFNpZGVQYWNrZXRMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB2YWx1ZSB8fCBbXSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5TdGF0dXNIYW5kbGVyQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlN0YXR1c0hhbmRsZXJDb25maWcucHJvdG90eXBlLmFkZElucHV0U2lkZVBhY2tldCA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkRmllbGQodGhpcywgMiwgdmFsdWUsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlN0YXR1c0hhbmRsZXJDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZy5wcm90b3R5cGUuY2xlYXJJbnB1dFNpZGVQYWNrZXRMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldElucHV0U2lkZVBhY2tldExpc3QoW10pO1xufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIHN0cmluZyBleHRlcm5hbF9pbnB1dCA9IDEwMDI7XG4gKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlN0YXR1c0hhbmRsZXJDb25maWcucHJvdG90eXBlLmdldEV4dGVybmFsSW5wdXRMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUgeyFBcnJheTxzdHJpbmc+fSAqLyAoanNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodGhpcywgMTAwMikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlN0YXR1c0hhbmRsZXJDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZy5wcm90b3R5cGUuc2V0RXh0ZXJuYWxJbnB1dExpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEwMDIsIHZhbHVlIHx8IFtdKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlN0YXR1c0hhbmRsZXJDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZy5wcm90b3R5cGUuYWRkRXh0ZXJuYWxJbnB1dCA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkRmllbGQodGhpcywgMTAwMiwgdmFsdWUsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlN0YXR1c0hhbmRsZXJDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZy5wcm90b3R5cGUuY2xlYXJFeHRlcm5hbElucHV0TGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRFeHRlcm5hbElucHV0TGlzdChbXSk7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgTWVkaWFQaXBlT3B0aW9ucyBvcHRpb25zID0gMztcbiAqIEByZXR1cm4gez9wcm90by5tZWRpYXBpcGUuTWVkaWFQaXBlT3B0aW9uc31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlN0YXR1c0hhbmRsZXJDb25maWcucHJvdG90eXBlLmdldE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLk1lZGlhUGlwZU9wdGlvbnN9ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIG1lZGlhcGlwZV9mcmFtZXdvcmtfbWVkaWFwaXBlX29wdGlvbnNfcGIuTWVkaWFQaXBlT3B0aW9ucywgMykpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P3Byb3RvLm1lZGlhcGlwZS5NZWRpYVBpcGVPcHRpb25zfHVuZGVmaW5lZH0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZ30gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8ubWVkaWFwaXBlLlN0YXR1c0hhbmRsZXJDb25maWcucHJvdG90eXBlLnNldE9wdGlvbnMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlN0YXR1c0hhbmRsZXJDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZy5wcm90b3R5cGUuY2xlYXJPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldE9wdGlvbnModW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZy5wcm90b3R5cGUuaGFzT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDMpICE9IG51bGw7XG59O1xuXG5cbmdvb2cub2JqZWN0LmV4dGVuZChleHBvcnRzLCBwcm90by5tZWRpYXBpcGUpO1xuIiwiLy8gc291cmNlOiBtZWRpYXBpcGUvZnJhbWV3b3JrL3N0cmVhbV9oYW5kbGVyLnByb3RvXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqIEBlbmhhbmNlYWJsZVxuICogQHN1cHByZXNzIHttaXNzaW5nUmVxdWlyZX0gcmVwb3J0cyBlcnJvciBvbiBpbXBsaWNpdCB0eXBlIHVzYWdlcy5cbiAqIEBzdXBwcmVzcyB7bWVzc2FnZUNvbnZlbnRpb25zfSBKUyBDb21waWxlciByZXBvcnRzIGFuIGVycm9yIGlmIGEgdmFyaWFibGUgb3JcbiAqICAgICBmaWVsZCBzdGFydHMgd2l0aCAnTVNHXycgYW5kIGlzbid0IGEgdHJhbnNsYXRhYmxlIG1lc3NhZ2UuXG4gKiBAcHVibGljXG4gKi9cbi8vIEdFTkVSQVRFRCBDT0RFIC0tIERPIE5PVCBFRElUIVxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbnZhciBqc3BiID0gcmVxdWlyZSgnZ29vZ2xlLXByb3RvYnVmJyk7XG52YXIgZ29vZyA9IGpzcGI7XG52YXIgZ2xvYmFsID1cbiAgICAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMpIHx8XG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdykgfHxcbiAgICAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsKSB8fFxuICAgICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZikgfHxcbiAgICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkuY2FsbChudWxsKSB8fFxuICAgIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbnZhciBtZWRpYXBpcGVfZnJhbWV3b3JrX21lZGlhcGlwZV9vcHRpb25zX3BiID0gcmVxdWlyZSgnLi4vLi4vbWVkaWFwaXBlL2ZyYW1ld29yay9tZWRpYXBpcGVfb3B0aW9uc19wYi5qcycpO1xuZ29vZy5vYmplY3QuZXh0ZW5kKHByb3RvLCBtZWRpYXBpcGVfZnJhbWV3b3JrX21lZGlhcGlwZV9vcHRpb25zX3BiKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnJywgbnVsbCwgZ2xvYmFsKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUuT3V0cHV0U3RyZWFtSGFuZGxlckNvbmZpZycsIG51bGwsIGdsb2JhbCk7XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLklucHV0U3RyZWFtSGFuZGxlckNvbmZpZyA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLklucHV0U3RyZWFtSGFuZGxlckNvbmZpZy5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnJztcbn1cbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuT3V0cHV0U3RyZWFtSGFuZGxlckNvbmZpZyA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgcHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWcucmVwZWF0ZWRGaWVsZHNfLCBudWxsKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLm1lZGlhcGlwZS5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWcuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWcnO1xufVxuXG5cblxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWcudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBpbnB1dFN0cmVhbUhhbmRsZXI6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMSwgXCJEZWZhdWx0SW5wdXRTdHJlYW1IYW5kbGVyXCIpLFxuICAgIG9wdGlvbnM6IChmID0gbXNnLmdldE9wdGlvbnMoKSkgJiYgbWVkaWFwaXBlX2ZyYW1ld29ya19tZWRpYXBpcGVfb3B0aW9uc19wYi5NZWRpYVBpcGVPcHRpb25zLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZilcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWcuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLklucHV0U3RyZWFtSGFuZGxlckNvbmZpZy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWcuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuc2V0SW5wdXRTdHJlYW1IYW5kbGVyKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBtZWRpYXBpcGVfZnJhbWV3b3JrX21lZGlhcGlwZV9vcHRpb25zX3BiLk1lZGlhUGlwZU9wdGlvbnM7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsbWVkaWFwaXBlX2ZyYW1ld29ya19tZWRpYXBpcGVfb3B0aW9uc19wYi5NZWRpYVBpcGVPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XG4gICAgICBtc2cuc2V0T3B0aW9ucyh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWcucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWcuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnfSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWcuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG4gIGYgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAxKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXG4gICAgICAxLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0T3B0aW9ucygpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDMsXG4gICAgICBmLFxuICAgICAgbWVkaWFwaXBlX2ZyYW1ld29ya19tZWRpYXBpcGVfb3B0aW9uc19wYi5NZWRpYVBpcGVPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyBpbnB1dF9zdHJlYW1faGFuZGxlciA9IDE7XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWcucHJvdG90eXBlLmdldElucHV0U3RyZWFtSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxLCBcIkRlZmF1bHRJbnB1dFN0cmVhbUhhbmRsZXJcIikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnLnByb3RvdHlwZS5zZXRJbnB1dFN0cmVhbUhhbmRsZXIgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLklucHV0U3RyZWFtSGFuZGxlckNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWcucHJvdG90eXBlLmNsZWFySW5wdXRTdHJlYW1IYW5kbGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMSwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnLnByb3RvdHlwZS5oYXNJbnB1dFN0cmVhbUhhbmRsZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIE1lZGlhUGlwZU9wdGlvbnMgb3B0aW9ucyA9IDM7XG4gKiBAcmV0dXJuIHs/cHJvdG8ubWVkaWFwaXBlLk1lZGlhUGlwZU9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWcucHJvdG90eXBlLmdldE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLk1lZGlhUGlwZU9wdGlvbnN9ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIG1lZGlhcGlwZV9mcmFtZXdvcmtfbWVkaWFwaXBlX29wdGlvbnNfcGIuTWVkaWFQaXBlT3B0aW9ucywgMykpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P3Byb3RvLm1lZGlhcGlwZS5NZWRpYVBpcGVPcHRpb25zfHVuZGVmaW5lZH0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnfSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnLnByb3RvdHlwZS5zZXRPcHRpb25zID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnLnByb3RvdHlwZS5jbGVhck9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0T3B0aW9ucyh1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWcucHJvdG90eXBlLmhhc09wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAzKSAhPSBudWxsO1xufTtcblxuXG5cbi8qKlxuICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLlxuICogQHByaXZhdGUgeyFBcnJheTxudW1iZXI+fVxuICogQGNvbnN0XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnLnJlcGVhdGVkRmllbGRzXyA9IFsyXTtcblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWcucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWcudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuT3V0cHV0U3RyZWFtSGFuZGxlckNvbmZpZ30gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWcudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xuICB2YXIgZiwgb2JqID0ge1xuICAgIG91dHB1dFN0cmVhbUhhbmRsZXI6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMSwgXCJJbk9yZGVyT3V0cHV0U3RyZWFtSGFuZGxlclwiKSxcbiAgICBpbnB1dFNpZGVQYWNrZXRMaXN0OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKG1zZywgMikpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIG9wdGlvbnM6IChmID0gbXNnLmdldE9wdGlvbnMoKSkgJiYgbWVkaWFwaXBlX2ZyYW1ld29ya19tZWRpYXBpcGVfb3B0aW9uc19wYi5NZWRpYVBpcGVPcHRpb25zLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZilcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnfVxuICovXG5wcm90by5tZWRpYXBpcGUuT3V0cHV0U3RyZWFtSGFuZGxlckNvbmZpZy5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWcuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWd9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xuICAgICAgbXNnLnNldE91dHB1dFN0cmVhbUhhbmRsZXIodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5hZGRJbnB1dFNpZGVQYWNrZXQodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgdmFyIHZhbHVlID0gbmV3IG1lZGlhcGlwZV9mcmFtZXdvcmtfbWVkaWFwaXBlX29wdGlvbnNfcGIuTWVkaWFQaXBlT3B0aW9ucztcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxtZWRpYXBpcGVfZnJhbWV3b3JrX21lZGlhcGlwZV9vcHRpb25zX3BiLk1lZGlhUGlwZU9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5zZXRPcHRpb25zKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWcucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLm1lZGlhcGlwZS5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWd9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWcuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG4gIGYgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAxKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXG4gICAgICAxLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0SW5wdXRTaWRlUGFja2V0TGlzdCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRTdHJpbmcoXG4gICAgICAyLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0T3B0aW9ucygpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDMsXG4gICAgICBmLFxuICAgICAgbWVkaWFwaXBlX2ZyYW1ld29ya19tZWRpYXBpcGVfb3B0aW9uc19wYi5NZWRpYVBpcGVPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyBvdXRwdXRfc3RyZWFtX2hhbmRsZXIgPSAxO1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5wcm90by5tZWRpYXBpcGUuT3V0cHV0U3RyZWFtSGFuZGxlckNvbmZpZy5wcm90b3R5cGUuZ2V0T3V0cHV0U3RyZWFtSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxLCBcIkluT3JkZXJPdXRwdXRTdHJlYW1IYW5kbGVyXCIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuT3V0cHV0U3RyZWFtSGFuZGxlckNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnLnByb3RvdHlwZS5zZXRPdXRwdXRTdHJlYW1IYW5kbGVyID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWcucHJvdG90eXBlLmNsZWFyT3V0cHV0U3RyZWFtSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWcucHJvdG90eXBlLmhhc091dHB1dFN0cmVhbUhhbmRsZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIHN0cmluZyBpbnB1dF9zaWRlX3BhY2tldCA9IDI7XG4gKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWcucHJvdG90eXBlLmdldElucHV0U2lkZVBhY2tldExpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IUFycmF5PHN0cmluZz59ICovIChqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0aGlzLCAyKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuT3V0cHV0U3RyZWFtSGFuZGxlckNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnLnByb3RvdHlwZS5zZXRJbnB1dFNpZGVQYWNrZXRMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB2YWx1ZSB8fCBbXSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWcucHJvdG90eXBlLmFkZElucHV0U2lkZVBhY2tldCA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkRmllbGQodGhpcywgMiwgdmFsdWUsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuT3V0cHV0U3RyZWFtSGFuZGxlckNvbmZpZy5wcm90b3R5cGUuY2xlYXJJbnB1dFNpZGVQYWNrZXRMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldElucHV0U2lkZVBhY2tldExpc3QoW10pO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIE1lZGlhUGlwZU9wdGlvbnMgb3B0aW9ucyA9IDM7XG4gKiBAcmV0dXJuIHs/cHJvdG8ubWVkaWFwaXBlLk1lZGlhUGlwZU9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnLnByb3RvdHlwZS5nZXRPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLm1lZGlhcGlwZS5NZWRpYVBpcGVPcHRpb25zfSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBtZWRpYXBpcGVfZnJhbWV3b3JrX21lZGlhcGlwZV9vcHRpb25zX3BiLk1lZGlhUGlwZU9wdGlvbnMsIDMpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUuTWVkaWFQaXBlT3B0aW9uc3x1bmRlZmluZWR9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWd9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnLnByb3RvdHlwZS5zZXRPcHRpb25zID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWcucHJvdG90eXBlLmNsZWFyT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRPcHRpb25zKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWcucHJvdG90eXBlLmhhc09wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAzKSAhPSBudWxsO1xufTtcblxuXG5nb29nLm9iamVjdC5leHRlbmQoZXhwb3J0cywgcHJvdG8ubWVkaWFwaXBlKTtcbiIsIi8vIHNvdXJjZTogbWVkaWFwaXBlL2ZyYW1ld29yay9jYWxjdWxhdG9yLnByb3RvXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqIEBlbmhhbmNlYWJsZVxuICogQHN1cHByZXNzIHttaXNzaW5nUmVxdWlyZX0gcmVwb3J0cyBlcnJvciBvbiBpbXBsaWNpdCB0eXBlIHVzYWdlcy5cbiAqIEBzdXBwcmVzcyB7bWVzc2FnZUNvbnZlbnRpb25zfSBKUyBDb21waWxlciByZXBvcnRzIGFuIGVycm9yIGlmIGEgdmFyaWFibGUgb3JcbiAqICAgICBmaWVsZCBzdGFydHMgd2l0aCAnTVNHXycgYW5kIGlzbid0IGEgdHJhbnNsYXRhYmxlIG1lc3NhZ2UuXG4gKiBAcHVibGljXG4gKi9cbi8vIEdFTkVSQVRFRCBDT0RFIC0tIERPIE5PVCBFRElUIVxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbnZhciBqc3BiID0gcmVxdWlyZSgnZ29vZ2xlLXByb3RvYnVmJyk7XG52YXIgZ29vZyA9IGpzcGI7XG52YXIgZ2xvYmFsID1cbiAgICAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMpIHx8XG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdykgfHxcbiAgICAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsKSB8fFxuICAgICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZikgfHxcbiAgICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkuY2FsbChudWxsKSB8fFxuICAgIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbnZhciBtZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3Jfb3B0aW9uc19wYiA9IHJlcXVpcmUoJy4uLy4uL21lZGlhcGlwZS9mcmFtZXdvcmsvY2FsY3VsYXRvcl9vcHRpb25zX3BiLmpzJyk7XG5nb29nLm9iamVjdC5leHRlbmQocHJvdG8sIG1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9vcHRpb25zX3BiKTtcbnZhciBnb29nbGVfcHJvdG9idWZfYW55X3BiID0gcmVxdWlyZSgnZ29vZ2xlLXByb3RvYnVmL2dvb2dsZS9wcm90b2J1Zi9hbnlfcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgZ29vZ2xlX3Byb3RvYnVmX2FueV9wYik7XG52YXIgbWVkaWFwaXBlX2ZyYW1ld29ya19tZWRpYXBpcGVfb3B0aW9uc19wYiA9IHJlcXVpcmUoJy4uLy4uL21lZGlhcGlwZS9mcmFtZXdvcmsvbWVkaWFwaXBlX29wdGlvbnNfcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgbWVkaWFwaXBlX2ZyYW1ld29ya19tZWRpYXBpcGVfb3B0aW9uc19wYik7XG52YXIgbWVkaWFwaXBlX2ZyYW1ld29ya19wYWNrZXRfZmFjdG9yeV9wYiA9IHJlcXVpcmUoJy4uLy4uL21lZGlhcGlwZS9mcmFtZXdvcmsvcGFja2V0X2ZhY3RvcnlfcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgbWVkaWFwaXBlX2ZyYW1ld29ya19wYWNrZXRfZmFjdG9yeV9wYik7XG52YXIgbWVkaWFwaXBlX2ZyYW1ld29ya19wYWNrZXRfZ2VuZXJhdG9yX3BiID0gcmVxdWlyZSgnLi4vLi4vbWVkaWFwaXBlL2ZyYW1ld29yay9wYWNrZXRfZ2VuZXJhdG9yX3BiLmpzJyk7XG5nb29nLm9iamVjdC5leHRlbmQocHJvdG8sIG1lZGlhcGlwZV9mcmFtZXdvcmtfcGFja2V0X2dlbmVyYXRvcl9wYik7XG52YXIgbWVkaWFwaXBlX2ZyYW1ld29ya19zdGF0dXNfaGFuZGxlcl9wYiA9IHJlcXVpcmUoJy4uLy4uL21lZGlhcGlwZS9mcmFtZXdvcmsvc3RhdHVzX2hhbmRsZXJfcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgbWVkaWFwaXBlX2ZyYW1ld29ya19zdGF0dXNfaGFuZGxlcl9wYik7XG52YXIgbWVkaWFwaXBlX2ZyYW1ld29ya19zdHJlYW1faGFuZGxlcl9wYiA9IHJlcXVpcmUoJy4uLy4uL21lZGlhcGlwZS9mcmFtZXdvcmsvc3RyZWFtX2hhbmRsZXJfcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgbWVkaWFwaXBlX2ZyYW1ld29ya19zdHJlYW1faGFuZGxlcl9wYik7XG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZycsIG51bGwsIGdsb2JhbCk7XG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlJywgbnVsbCwgZ2xvYmFsKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUuRXhlY3V0b3JDb25maWcnLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb24nLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb24uSW5wdXRUeXBlJywgbnVsbCwgZ2xvYmFsKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uU2V0JywgbnVsbCwgZ2xvYmFsKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvJywgbnVsbCwgZ2xvYmFsKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWcnLCBudWxsLCBnbG9iYWwpO1xuLyoqXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxuICogdmFsaWQuXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5FeGVjdXRvckNvbmZpZyA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUuRXhlY3V0b3JDb25maWcsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUuRXhlY3V0b3JDb25maWcuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLkV4ZWN1dG9yQ29uZmlnJztcbn1cbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIDUwMCwgcHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbi5yZXBlYXRlZEZpZWxkc18sIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbiwganNwYi5NZXNzYWdlKTtcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb24uZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbic7XG59XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvblNldCA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgcHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvblNldC5yZXBlYXRlZEZpZWxkc18sIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvblNldCwganNwYi5NZXNzYWdlKTtcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb25TZXQuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvblNldCc7XG59XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLklucHV0U3RyZWFtSW5mbyA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLklucHV0U3RyZWFtSW5mby5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvJztcbn1cbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWcgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIHByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZy5yZXBlYXRlZEZpZWxkc18sIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLmRpc3BsYXlOYW1lID0gJ3Byb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZyc7XG59XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZyA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCA1MDAsIHByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucmVwZWF0ZWRGaWVsZHNfLCBudWxsKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLmRpc3BsYXlOYW1lID0gJ3Byb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcnO1xufVxuLyoqXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxuICogdmFsaWQuXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZSA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCA1MDAsIHByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5yZXBlYXRlZEZpZWxkc18sIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLmRpc3BsYXlOYW1lID0gJ3Byb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZSc7XG59XG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5FeGVjdXRvckNvbmZpZy5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuRXhlY3V0b3JDb25maWcudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuRXhlY3V0b3JDb25maWd9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5FeGVjdXRvckNvbmZpZy50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgbmFtZToganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAxLCBcIlwiKSxcbiAgICB0eXBlOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDIsIFwiXCIpLFxuICAgIG9wdGlvbnM6IChmID0gbXNnLmdldE9wdGlvbnMoKSkgJiYgbWVkaWFwaXBlX2ZyYW1ld29ya19tZWRpYXBpcGVfb3B0aW9uc19wYi5NZWRpYVBpcGVPcHRpb25zLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZilcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5FeGVjdXRvckNvbmZpZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkV4ZWN1dG9yQ29uZmlnLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLkV4ZWN1dG9yQ29uZmlnO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLkV4ZWN1dG9yQ29uZmlnLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5FeGVjdXRvckNvbmZpZ30gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuRXhlY3V0b3JDb25maWd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5FeGVjdXRvckNvbmZpZy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5zZXROYW1lKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuc2V0VHlwZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgbWVkaWFwaXBlX2ZyYW1ld29ya19tZWRpYXBpcGVfb3B0aW9uc19wYi5NZWRpYVBpcGVPcHRpb25zO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLG1lZGlhcGlwZV9mcmFtZXdvcmtfbWVkaWFwaXBlX29wdGlvbnNfcGIuTWVkaWFQaXBlT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldE9wdGlvbnModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUuRXhlY3V0b3JDb25maWcucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLm1lZGlhcGlwZS5FeGVjdXRvckNvbmZpZy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5FeGVjdXRvckNvbmZpZ30gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuRXhlY3V0b3JDb25maWcuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG4gIGYgPSBtZXNzYWdlLmdldE5hbWUoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVN0cmluZyhcbiAgICAgIDEsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRUeXBlKCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXG4gICAgICAyLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0T3B0aW9ucygpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDMsXG4gICAgICBmLFxuICAgICAgbWVkaWFwaXBlX2ZyYW1ld29ya19tZWRpYXBpcGVfb3B0aW9uc19wYi5NZWRpYVBpcGVPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyBuYW1lID0gMTtcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkV4ZWN1dG9yQ29uZmlnLnByb3RvdHlwZS5nZXROYW1lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIFwiXCIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuRXhlY3V0b3JDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuRXhlY3V0b3JDb25maWcucHJvdG90eXBlLnNldE5hbWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBzdHJpbmcgdHlwZSA9IDI7XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5FeGVjdXRvckNvbmZpZy5wcm90b3R5cGUuZ2V0VHlwZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCBcIlwiKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkV4ZWN1dG9yQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkV4ZWN1dG9yQ29uZmlnLnByb3RvdHlwZS5zZXRUeXBlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgTWVkaWFQaXBlT3B0aW9ucyBvcHRpb25zID0gMztcbiAqIEByZXR1cm4gez9wcm90by5tZWRpYXBpcGUuTWVkaWFQaXBlT3B0aW9uc31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkV4ZWN1dG9yQ29uZmlnLnByb3RvdHlwZS5nZXRPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLm1lZGlhcGlwZS5NZWRpYVBpcGVPcHRpb25zfSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBtZWRpYXBpcGVfZnJhbWV3b3JrX21lZGlhcGlwZV9vcHRpb25zX3BiLk1lZGlhUGlwZU9wdGlvbnMsIDMpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUuTWVkaWFQaXBlT3B0aW9uc3x1bmRlZmluZWR9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkV4ZWN1dG9yQ29uZmlnfSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUuRXhlY3V0b3JDb25maWcucHJvdG90eXBlLnNldE9wdGlvbnMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkV4ZWN1dG9yQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkV4ZWN1dG9yQ29uZmlnLnByb3RvdHlwZS5jbGVhck9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0T3B0aW9ucyh1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5FeGVjdXRvckNvbmZpZy5wcm90b3R5cGUuaGFzT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDMpICE9IG51bGw7XG59O1xuXG5cblxuLyoqXG4gKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuXG4gKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59XG4gKiBAY29uc3RcbiAqL1xucHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbi5yZXBlYXRlZEZpZWxkc18gPSBbMiwxMDAyXTtcblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbi5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbn0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbi50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgbmFtZToganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAxLCBcIlwiKSxcbiAgICBzaWRlUGFja2V0TmFtZUxpc3Q6IChmID0ganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQobXNnLCAyKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgZXh0ZXJuYWxJbnB1dE5hbWVMaXN0OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKG1zZywgMTAwMikpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIGlucHV0VHlwZToganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAzLCAwKSxcbiAgICBmaWxlTmFtZToganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCA0LCBcIlwiKVxuICB9O1xuXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG59XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb247XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb259IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5zZXROYW1lKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuYWRkU2lkZVBhY2tldE5hbWUodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDAyOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5hZGRFeHRlcm5hbElucHV0TmFtZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUgeyFwcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uLklucHV0VHlwZX0gKi8gKHJlYWRlci5yZWFkRW51bSgpKTtcbiAgICAgIG1zZy5zZXRJbnB1dFR5cGUodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5zZXRGaWxlTmFtZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb24ucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb24uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9ufSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb24uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG4gIGYgPSBtZXNzYWdlLmdldE5hbWUoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVN0cmluZyhcbiAgICAgIDEsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRTaWRlUGFja2V0TmFtZUxpc3QoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkU3RyaW5nKFxuICAgICAgMixcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldEV4dGVybmFsSW5wdXROYW1lTGlzdCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRTdHJpbmcoXG4gICAgICAxMDAyLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0SW5wdXRUeXBlKCk7XG4gIGlmIChmICE9PSAwLjApIHtcbiAgICB3cml0ZXIud3JpdGVFbnVtKFxuICAgICAgMyxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldEZpbGVOYW1lKCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXG4gICAgICA0LFxuICAgICAgZlxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBAZW51bSB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uLklucHV0VHlwZSA9IHtcbiAgVU5LTk9XTjogMCxcbiAgUkVDT1JESU86IDEsXG4gIEZPUkVJR05fUkVDT1JESU86IDIsXG4gIEZPUkVJR05fQ1NWX1RFWFQ6IDMsXG4gIElOVkFMSURfVVBQRVJfQk9VTkQ6IDRcbn07XG5cbi8qKlxuICogb3B0aW9uYWwgc3RyaW5nIG5hbWUgPSAxO1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXROYW1lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIFwiXCIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9ufSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbi5wcm90b3R5cGUuc2V0TmFtZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIHN0cmluZyBzaWRlX3BhY2tldF9uYW1lID0gMjtcbiAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXRTaWRlUGFja2V0TmFtZUxpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IUFycmF5PHN0cmluZz59ICovIChqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0aGlzLCAyKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9ufSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbi5wcm90b3R5cGUuc2V0U2lkZVBhY2tldE5hbWVMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB2YWx1ZSB8fCBbXSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uLnByb3RvdHlwZS5hZGRTaWRlUGFja2V0TmFtZSA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkRmllbGQodGhpcywgMiwgdmFsdWUsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbn0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb24ucHJvdG90eXBlLmNsZWFyU2lkZVBhY2tldE5hbWVMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldFNpZGVQYWNrZXROYW1lTGlzdChbXSk7XG59O1xuXG5cbi8qKlxuICogcmVwZWF0ZWQgc3RyaW5nIGV4dGVybmFsX2lucHV0X25hbWUgPSAxMDAyO1xuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb24ucHJvdG90eXBlLmdldEV4dGVybmFsSW5wdXROYW1lTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHshQXJyYXk8c3RyaW5nPn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKHRoaXMsIDEwMDIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uLnByb3RvdHlwZS5zZXRFeHRlcm5hbElucHV0TmFtZUxpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEwMDIsIHZhbHVlIHx8IFtdKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbn0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb24ucHJvdG90eXBlLmFkZEV4dGVybmFsSW5wdXROYW1lID0gZnVuY3Rpb24odmFsdWUsIG9wdF9pbmRleCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRGaWVsZCh0aGlzLCAxMDAyLCB2YWx1ZSwgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9ufSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbi5wcm90b3R5cGUuY2xlYXJFeHRlcm5hbElucHV0TmFtZUxpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0RXh0ZXJuYWxJbnB1dE5hbWVMaXN0KFtdKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBJbnB1dFR5cGUgaW5wdXRfdHlwZSA9IDM7XG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbi5JbnB1dFR5cGV9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb24ucHJvdG90eXBlLmdldElucHV0VHlwZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHshcHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbi5JbnB1dFR5cGV9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAzLCAwKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbi5JbnB1dFR5cGV9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbn0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb24ucHJvdG90eXBlLnNldElucHV0VHlwZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsIDMsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBzdHJpbmcgZmlsZV9uYW1lID0gNDtcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0RmlsZU5hbWUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgNCwgXCJcIikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uLnByb3RvdHlwZS5zZXRGaWxlTmFtZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywgNCwgdmFsdWUpO1xufTtcblxuXG5cbi8qKlxuICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLlxuICogQHByaXZhdGUgeyFBcnJheTxudW1iZXI+fVxuICogQGNvbnN0XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb25TZXQucmVwZWF0ZWRGaWVsZHNfID0gWzFdO1xuXG5cblxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uU2V0LnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb25TZXQudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uU2V0fSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uU2V0LnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBpbnB1dENvbGxlY3Rpb25MaXN0OiBqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRJbnB1dENvbGxlY3Rpb25MaXN0KCksXG4gICAgcHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbi50b09iamVjdCwgaW5jbHVkZUluc3RhbmNlKVxuICB9O1xuXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG59XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvblNldH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvblNldC5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb25TZXQ7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uU2V0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb25TZXR9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvblNldH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvblNldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb247XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLmFkZElucHV0Q29sbGVjdGlvbih2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb25TZXQucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb25TZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uU2V0fSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb25TZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG4gIGYgPSBtZXNzYWdlLmdldElucHV0Q29sbGVjdGlvbkxpc3QoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZShcbiAgICAgIDEsXG4gICAgICBmLFxuICAgICAgcHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvbi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBJbnB1dENvbGxlY3Rpb24gaW5wdXRfY29sbGVjdGlvbiA9IDE7XG4gKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb24+fVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uU2V0LnByb3RvdHlwZS5nZXRJbnB1dENvbGxlY3Rpb25MaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uPn0gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uLCAxKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb24+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb25TZXR9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb25TZXQucHJvdG90eXBlLnNldElucHV0Q29sbGVjdGlvbkxpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuSW5wdXRDb2xsZWN0aW9uPX0gb3B0X3ZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb259XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb25TZXQucHJvdG90eXBlLmFkZElucHV0Q29sbGVjdGlvbiA9IGZ1bmN0aW9uKG9wdF92YWx1ZSwgb3B0X2luZGV4KSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCAxLCBvcHRfdmFsdWUsIHByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb24sIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLklucHV0Q29sbGVjdGlvblNldH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dENvbGxlY3Rpb25TZXQucHJvdG90eXBlLmNsZWFySW5wdXRDb2xsZWN0aW9uTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRJbnB1dENvbGxlY3Rpb25MaXN0KFtdKTtcbn07XG5cblxuXG5cblxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUluZm8udG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICB0YWdJbmRleDoganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAxLCBcIlwiKSxcbiAgICBiYWNrRWRnZToganNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KG1zZywgMiwgZmFsc2UpXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvfVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLklucHV0U3RyZWFtSW5mbztcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUluZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLklucHV0U3RyZWFtSW5mb30gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvfVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xuICAgICAgbXNnLnNldFRhZ0luZGV4KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gKHJlYWRlci5yZWFkQm9vbCgpKTtcbiAgICAgIG1zZy5zZXRCYWNrRWRnZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUluZm8ucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUluZm8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvfSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUluZm8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG4gIGYgPSBtZXNzYWdlLmdldFRhZ0luZGV4KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXG4gICAgICAxLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0QmFja0VkZ2UoKTtcbiAgaWYgKGYpIHtcbiAgICB3cml0ZXIud3JpdGVCb29sKFxuICAgICAgMixcbiAgICAgIGZcbiAgICApO1xuICB9XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgc3RyaW5nIHRhZ19pbmRleCA9IDE7XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUluZm8ucHJvdG90eXBlLmdldFRhZ0luZGV4ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIFwiXCIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLklucHV0U3RyZWFtSW5mby5wcm90b3R5cGUuc2V0VGFnSW5kZXggPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBib29sIGJhY2tfZWRnZSA9IDI7XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvLnByb3RvdHlwZS5nZXRCYWNrRWRnZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtib29sZWFufSAqLyAoanNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDIsIGZhbHNlKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUluZm99IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvLnByb3RvdHlwZS5zZXRCYWNrRWRnZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zQm9vbGVhbkZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcbn07XG5cblxuXG4vKipcbiAqIExpc3Qgb2YgcmVwZWF0ZWQgZmllbGRzIHdpdGhpbiB0aGlzIG1lc3NhZ2UgdHlwZS5cbiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn1cbiAqIEBjb25zdFxuICovXG5wcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWcucmVwZWF0ZWRGaWVsZHNfID0gWzhdO1xuXG5cblxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICovXG5wcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWcucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWcudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xuICB2YXIgZiwgb2JqID0ge1xuICAgIGhpc3RvZ3JhbUludGVydmFsU2l6ZVVzZWM6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMSwgMCksXG4gICAgbnVtSGlzdG9ncmFtSW50ZXJ2YWxzOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDIsIDApLFxuICAgIGVuYWJsZUlucHV0T3V0cHV0TGF0ZW5jeToganNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KG1zZywgMywgZmFsc2UpLFxuICAgIGVuYWJsZVByb2ZpbGVyOiBqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQobXNnLCA0LCBmYWxzZSksXG4gICAgZW5hYmxlU3RyZWFtTGF0ZW5jeToganNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KG1zZywgNSwgZmFsc2UpLFxuICAgIHVzZVBhY2tldFRpbWVzdGFtcEZvckFkZGVkUGFja2V0OiBqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQobXNnLCA2LCBmYWxzZSksXG4gICAgdHJhY2VMb2dDYXBhY2l0eToganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCA3LCAwKSxcbiAgICB0cmFjZUV2ZW50VHlwZXNEaXNhYmxlZExpc3Q6IChmID0ganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQobXNnLCA4KSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgdHJhY2VMb2dQYXRoOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDksIFwiXCIpLFxuICAgIHRyYWNlTG9nQ291bnQ6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMTAsIDApLFxuICAgIHRyYWNlTG9nSW50ZXJ2YWxVc2VjOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDExLCAwKSxcbiAgICB0cmFjZUxvZ01hcmdpblVzZWM6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMTIsIDApLFxuICAgIHRyYWNlTG9nRHVyYXRpb25FdmVudHM6IGpzcGIuTWVzc2FnZS5nZXRCb29sZWFuRmllbGRXaXRoRGVmYXVsdChtc2csIDEzLCBmYWxzZSksXG4gICAgdHJhY2VMb2dJbnRlcnZhbENvdW50OiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDE0LCAwKSxcbiAgICB0cmFjZUxvZ0Rpc2FibGVkOiBqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQobXNnLCAxNSwgZmFsc2UpLFxuICAgIHRyYWNlRW5hYmxlZDoganNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KG1zZywgMTYsIGZhbHNlKSxcbiAgICB0cmFjZUxvZ0luc3RhbnRFdmVudHM6IGpzcGIuTWVzc2FnZS5nZXRCb29sZWFuRmllbGRXaXRoRGVmYXVsdChtc2csIDE3LCBmYWxzZSksXG4gICAgY2FsY3VsYXRvckZpbHRlcjoganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAxOCwgXCJcIilcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZ30gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDY0KCkpO1xuICAgICAgbXNnLnNldEhpc3RvZ3JhbUludGVydmFsU2l6ZVVzZWModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDY0KCkpO1xuICAgICAgbXNnLnNldE51bUhpc3RvZ3JhbUludGVydmFscyh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge2Jvb2xlYW59ICovIChyZWFkZXIucmVhZEJvb2woKSk7XG4gICAgICBtc2cuc2V0RW5hYmxlSW5wdXRPdXRwdXRMYXRlbmN5KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gKHJlYWRlci5yZWFkQm9vbCgpKTtcbiAgICAgIG1zZy5zZXRFbmFibGVQcm9maWxlcih2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge2Jvb2xlYW59ICovIChyZWFkZXIucmVhZEJvb2woKSk7XG4gICAgICBtc2cuc2V0RW5hYmxlU3RyZWFtTGF0ZW5jeSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDY6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge2Jvb2xlYW59ICovIChyZWFkZXIucmVhZEJvb2woKSk7XG4gICAgICBtc2cuc2V0VXNlUGFja2V0VGltZXN0YW1wRm9yQWRkZWRQYWNrZXQodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA3OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDY0KCkpO1xuICAgICAgbXNnLnNldFRyYWNlTG9nQ2FwYWNpdHkodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA4OlxuICAgICAgdmFyIHZhbHVlcyA9IC8qKiBAdHlwZSB7IUFycmF5PG51bWJlcj59ICovIChyZWFkZXIuaXNEZWxpbWl0ZWQoKSA/IHJlYWRlci5yZWFkUGFja2VkSW50MzIoKSA6IFtyZWFkZXIucmVhZEludDMyKCldKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1zZy5hZGRUcmFjZUV2ZW50VHlwZXNEaXNhYmxlZCh2YWx1ZXNbaV0pO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSA5OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5zZXRUcmFjZUxvZ1BhdGgodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQzMigpKTtcbiAgICAgIG1zZy5zZXRUcmFjZUxvZ0NvdW50KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTE6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkSW50NjQoKSk7XG4gICAgICBtc2cuc2V0VHJhY2VMb2dJbnRlcnZhbFVzZWModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQ2NCgpKTtcbiAgICAgIG1zZy5zZXRUcmFjZUxvZ01hcmdpblVzZWModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gKHJlYWRlci5yZWFkQm9vbCgpKTtcbiAgICAgIG1zZy5zZXRUcmFjZUxvZ0R1cmF0aW9uRXZlbnRzKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTQ6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkSW50MzIoKSk7XG4gICAgICBtc2cuc2V0VHJhY2VMb2dJbnRlcnZhbENvdW50KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTU6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge2Jvb2xlYW59ICovIChyZWFkZXIucmVhZEJvb2woKSk7XG4gICAgICBtc2cuc2V0VHJhY2VMb2dEaXNhYmxlZCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE2OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtib29sZWFufSAqLyAocmVhZGVyLnJlYWRCb29sKCkpO1xuICAgICAgbXNnLnNldFRyYWNlRW5hYmxlZCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE3OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtib29sZWFufSAqLyAocmVhZGVyLnJlYWRCb29sKCkpO1xuICAgICAgbXNnLnNldFRyYWNlTG9nSW5zdGFudEV2ZW50cyh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE4OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5zZXRDYWxjdWxhdG9yRmlsdGVyKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWcuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWd9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gbWVzc2FnZS5nZXRIaXN0b2dyYW1JbnRlcnZhbFNpemVVc2VjKCk7XG4gIGlmIChmICE9PSAwKSB7XG4gICAgd3JpdGVyLndyaXRlSW50NjQoXG4gICAgICAxLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0TnVtSGlzdG9ncmFtSW50ZXJ2YWxzKCk7XG4gIGlmIChmICE9PSAwKSB7XG4gICAgd3JpdGVyLndyaXRlSW50NjQoXG4gICAgICAyLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0RW5hYmxlSW5wdXRPdXRwdXRMYXRlbmN5KCk7XG4gIGlmIChmKSB7XG4gICAgd3JpdGVyLndyaXRlQm9vbChcbiAgICAgIDMsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRFbmFibGVQcm9maWxlcigpO1xuICBpZiAoZikge1xuICAgIHdyaXRlci53cml0ZUJvb2woXG4gICAgICA0LFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0RW5hYmxlU3RyZWFtTGF0ZW5jeSgpO1xuICBpZiAoZikge1xuICAgIHdyaXRlci53cml0ZUJvb2woXG4gICAgICA1LFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0VXNlUGFja2V0VGltZXN0YW1wRm9yQWRkZWRQYWNrZXQoKTtcbiAgaWYgKGYpIHtcbiAgICB3cml0ZXIud3JpdGVCb29sKFxuICAgICAgNixcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldFRyYWNlTG9nQ2FwYWNpdHkoKTtcbiAgaWYgKGYgIT09IDApIHtcbiAgICB3cml0ZXIud3JpdGVJbnQ2NChcbiAgICAgIDcsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRUcmFjZUV2ZW50VHlwZXNEaXNhYmxlZExpc3QoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVBhY2tlZEludDMyKFxuICAgICAgOCxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldFRyYWNlTG9nUGF0aCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxuICAgICAgOSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldFRyYWNlTG9nQ291bnQoKTtcbiAgaWYgKGYgIT09IDApIHtcbiAgICB3cml0ZXIud3JpdGVJbnQzMihcbiAgICAgIDEwLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0VHJhY2VMb2dJbnRlcnZhbFVzZWMoKTtcbiAgaWYgKGYgIT09IDApIHtcbiAgICB3cml0ZXIud3JpdGVJbnQ2NChcbiAgICAgIDExLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0VHJhY2VMb2dNYXJnaW5Vc2VjKCk7XG4gIGlmIChmICE9PSAwKSB7XG4gICAgd3JpdGVyLndyaXRlSW50NjQoXG4gICAgICAxMixcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldFRyYWNlTG9nRHVyYXRpb25FdmVudHMoKTtcbiAgaWYgKGYpIHtcbiAgICB3cml0ZXIud3JpdGVCb29sKFxuICAgICAgMTMsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRUcmFjZUxvZ0ludGVydmFsQ291bnQoKTtcbiAgaWYgKGYgIT09IDApIHtcbiAgICB3cml0ZXIud3JpdGVJbnQzMihcbiAgICAgIDE0LFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0VHJhY2VMb2dEaXNhYmxlZCgpO1xuICBpZiAoZikge1xuICAgIHdyaXRlci53cml0ZUJvb2woXG4gICAgICAxNSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldFRyYWNlRW5hYmxlZCgpO1xuICBpZiAoZikge1xuICAgIHdyaXRlci53cml0ZUJvb2woXG4gICAgICAxNixcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldFRyYWNlTG9nSW5zdGFudEV2ZW50cygpO1xuICBpZiAoZikge1xuICAgIHdyaXRlci53cml0ZUJvb2woXG4gICAgICAxNyxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldENhbGN1bGF0b3JGaWx0ZXIoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVN0cmluZyhcbiAgICAgIDE4LFxuICAgICAgZlxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBpbnQ2NCBoaXN0b2dyYW1faW50ZXJ2YWxfc2l6ZV91c2VjID0gMTtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLnByb3RvdHlwZS5nZXRIaXN0b2dyYW1JbnRlcnZhbFNpemVVc2VjID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWcucHJvdG90eXBlLnNldEhpc3RvZ3JhbUludGVydmFsU2l6ZVVzZWMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBpbnQ2NCBudW1faGlzdG9ncmFtX2ludGVydmFscyA9IDI7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZy5wcm90b3R5cGUuZ2V0TnVtSGlzdG9ncmFtSW50ZXJ2YWxzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDIsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWcucHJvdG90eXBlLnNldE51bUhpc3RvZ3JhbUludGVydmFscyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywgMiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGJvb2wgZW5hYmxlX2lucHV0X291dHB1dF9sYXRlbmN5ID0gMztcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZy5wcm90b3R5cGUuZ2V0RW5hYmxlSW5wdXRPdXRwdXRMYXRlbmN5ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge2Jvb2xlYW59ICovIChqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQodGhpcywgMywgZmFsc2UpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLnByb3RvdHlwZS5zZXRFbmFibGVJbnB1dE91dHB1dExhdGVuY3kgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0Jvb2xlYW5GaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgYm9vbCBlbmFibGVfcHJvZmlsZXIgPSA0O1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLnByb3RvdHlwZS5nZXRFbmFibGVQcm9maWxlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtib29sZWFufSAqLyAoanNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDQsIGZhbHNlKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZy5wcm90b3R5cGUuc2V0RW5hYmxlUHJvZmlsZXIgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0Jvb2xlYW5GaWVsZCh0aGlzLCA0LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgYm9vbCBlbmFibGVfc3RyZWFtX2xhdGVuY3kgPSA1O1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLnByb3RvdHlwZS5nZXRFbmFibGVTdHJlYW1MYXRlbmN5ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge2Jvb2xlYW59ICovIChqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQodGhpcywgNSwgZmFsc2UpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLnByb3RvdHlwZS5zZXRFbmFibGVTdHJlYW1MYXRlbmN5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNCb29sZWFuRmllbGQodGhpcywgNSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGJvb2wgdXNlX3BhY2tldF90aW1lc3RhbXBfZm9yX2FkZGVkX3BhY2tldCA9IDY7XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWcucHJvdG90eXBlLmdldFVzZVBhY2tldFRpbWVzdGFtcEZvckFkZGVkUGFja2V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge2Jvb2xlYW59ICovIChqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQodGhpcywgNiwgZmFsc2UpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLnByb3RvdHlwZS5zZXRVc2VQYWNrZXRUaW1lc3RhbXBGb3JBZGRlZFBhY2tldCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zQm9vbGVhbkZpZWxkKHRoaXMsIDYsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBpbnQ2NCB0cmFjZV9sb2dfY2FwYWNpdHkgPSA3O1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWcucHJvdG90eXBlLmdldFRyYWNlTG9nQ2FwYWNpdHkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgNywgMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZy5wcm90b3R5cGUuc2V0VHJhY2VMb2dDYXBhY2l0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywgNywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIGludDMyIHRyYWNlX2V2ZW50X3R5cGVzX2Rpc2FibGVkID0gODtcbiAqIEByZXR1cm4geyFBcnJheTxudW1iZXI+fVxuICovXG5wcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWcucHJvdG90eXBlLmdldFRyYWNlRXZlbnRUeXBlc0Rpc2FibGVkTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHshQXJyYXk8bnVtYmVyPn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKHRoaXMsIDgpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTxudW1iZXI+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZy5wcm90b3R5cGUuc2V0VHJhY2VFdmVudFR5cGVzRGlzYWJsZWRMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA4LCB2YWx1ZSB8fCBbXSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZy5wcm90b3R5cGUuYWRkVHJhY2VFdmVudFR5cGVzRGlzYWJsZWQgPSBmdW5jdGlvbih2YWx1ZSwgb3B0X2luZGV4KSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZEZpZWxkKHRoaXMsIDgsIHZhbHVlLCBvcHRfaW5kZXgpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZy5wcm90b3R5cGUuY2xlYXJUcmFjZUV2ZW50VHlwZXNEaXNhYmxlZExpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0VHJhY2VFdmVudFR5cGVzRGlzYWJsZWRMaXN0KFtdKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBzdHJpbmcgdHJhY2VfbG9nX3BhdGggPSA5O1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5wcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWcucHJvdG90eXBlLmdldFRyYWNlTG9nUGF0aCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCA5LCBcIlwiKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLnByb3RvdHlwZS5zZXRUcmFjZUxvZ1BhdGggPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsIDksIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBpbnQzMiB0cmFjZV9sb2dfY291bnQgPSAxMDtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLnByb3RvdHlwZS5nZXRUcmFjZUxvZ0NvdW50ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEwLCAwKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLnByb3RvdHlwZS5zZXRUcmFjZUxvZ0NvdW50ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLCAxMCwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGludDY0IHRyYWNlX2xvZ19pbnRlcnZhbF91c2VjID0gMTE7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZy5wcm90b3R5cGUuZ2V0VHJhY2VMb2dJbnRlcnZhbFVzZWMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMTEsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWcucHJvdG90eXBlLnNldFRyYWNlTG9nSW50ZXJ2YWxVc2VjID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLCAxMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGludDY0IHRyYWNlX2xvZ19tYXJnaW5fdXNlYyA9IDEyO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWcucHJvdG90eXBlLmdldFRyYWNlTG9nTWFyZ2luVXNlYyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxMiwgMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZy5wcm90b3R5cGUuc2V0VHJhY2VMb2dNYXJnaW5Vc2VjID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLCAxMiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGJvb2wgdHJhY2VfbG9nX2R1cmF0aW9uX2V2ZW50cyA9IDEzO1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLnByb3RvdHlwZS5nZXRUcmFjZUxvZ0R1cmF0aW9uRXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge2Jvb2xlYW59ICovIChqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQodGhpcywgMTMsIGZhbHNlKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZy5wcm90b3R5cGUuc2V0VHJhY2VMb2dEdXJhdGlvbkV2ZW50cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zQm9vbGVhbkZpZWxkKHRoaXMsIDEzLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgaW50MzIgdHJhY2VfbG9nX2ludGVydmFsX2NvdW50ID0gMTQ7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZy5wcm90b3R5cGUuZ2V0VHJhY2VMb2dJbnRlcnZhbENvdW50ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDE0LCAwKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLnByb3RvdHlwZS5zZXRUcmFjZUxvZ0ludGVydmFsQ291bnQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsIDE0LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgYm9vbCB0cmFjZV9sb2dfZGlzYWJsZWQgPSAxNTtcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZy5wcm90b3R5cGUuZ2V0VHJhY2VMb2dEaXNhYmxlZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtib29sZWFufSAqLyAoanNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDE1LCBmYWxzZSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWcucHJvdG90eXBlLnNldFRyYWNlTG9nRGlzYWJsZWQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0Jvb2xlYW5GaWVsZCh0aGlzLCAxNSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGJvb2wgdHJhY2VfZW5hYmxlZCA9IDE2O1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLnByb3RvdHlwZS5nZXRUcmFjZUVuYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRCb29sZWFuRmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxNiwgZmFsc2UpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLnByb3RvdHlwZS5zZXRUcmFjZUVuYWJsZWQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0Jvb2xlYW5GaWVsZCh0aGlzLCAxNiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGJvb2wgdHJhY2VfbG9nX2luc3RhbnRfZXZlbnRzID0gMTc7XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWcucHJvdG90eXBlLmdldFRyYWNlTG9nSW5zdGFudEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtib29sZWFufSAqLyAoanNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDE3LCBmYWxzZSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWcucHJvdG90eXBlLnNldFRyYWNlTG9nSW5zdGFudEV2ZW50cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zQm9vbGVhbkZpZWxkKHRoaXMsIDE3LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgc3RyaW5nIGNhbGN1bGF0b3JfZmlsdGVyID0gMTg7XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZy5wcm90b3R5cGUuZ2V0Q2FsY3VsYXRvckZpbHRlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxOCwgXCJcIikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZy5wcm90b3R5cGUuc2V0Q2FsY3VsYXRvckZpbHRlciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywgMTgsIHZhbHVlKTtcbn07XG5cblxuXG4vKipcbiAqIExpc3Qgb2YgcmVwZWF0ZWQgZmllbGRzIHdpdGhpbiB0aGlzIG1lc3NhZ2UgdHlwZS5cbiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn1cbiAqIEBjb25zdFxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnJlcGVhdGVkRmllbGRzXyA9IFsxLDYsNyw5LDEwLDE1LDE2LDE3LDE0LDEwMDJdO1xuXG5cblxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBub2RlTGlzdDoganNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0Tm9kZUxpc3QoKSxcbiAgICBwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGUudG9PYmplY3QsIGluY2x1ZGVJbnN0YW5jZSksXG4gICAgcGFja2V0RmFjdG9yeUxpc3Q6IGpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldFBhY2tldEZhY3RvcnlMaXN0KCksXG4gICAgbWVkaWFwaXBlX2ZyYW1ld29ya19wYWNrZXRfZmFjdG9yeV9wYi5QYWNrZXRGYWN0b3J5Q29uZmlnLnRvT2JqZWN0LCBpbmNsdWRlSW5zdGFuY2UpLFxuICAgIHBhY2tldEdlbmVyYXRvckxpc3Q6IGpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldFBhY2tldEdlbmVyYXRvckxpc3QoKSxcbiAgICBtZWRpYXBpcGVfZnJhbWV3b3JrX3BhY2tldF9nZW5lcmF0b3JfcGIuUGFja2V0R2VuZXJhdG9yQ29uZmlnLnRvT2JqZWN0LCBpbmNsdWRlSW5zdGFuY2UpLFxuICAgIG51bVRocmVhZHM6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgOCwgMCksXG4gICAgc3RhdHVzSGFuZGxlckxpc3Q6IGpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldFN0YXR1c0hhbmRsZXJMaXN0KCksXG4gICAgbWVkaWFwaXBlX2ZyYW1ld29ya19zdGF0dXNfaGFuZGxlcl9wYi5TdGF0dXNIYW5kbGVyQ29uZmlnLnRvT2JqZWN0LCBpbmNsdWRlSW5zdGFuY2UpLFxuICAgIGlucHV0U3RyZWFtTGlzdDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZChtc2csIDEwKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgb3V0cHV0U3RyZWFtTGlzdDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZChtc2csIDE1KSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgaW5wdXRTaWRlUGFja2V0TGlzdDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZChtc2csIDE2KSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgb3V0cHV0U2lkZVBhY2tldExpc3Q6IChmID0ganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQobXNnLCAxNykpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIG1heFF1ZXVlU2l6ZToganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAxMSwgMCksXG4gICAgcmVwb3J0RGVhZGxvY2s6IGpzcGIuTWVzc2FnZS5nZXRCb29sZWFuRmllbGRXaXRoRGVmYXVsdChtc2csIDIxLCBmYWxzZSksXG4gICAgaW5wdXRTdHJlYW1IYW5kbGVyOiAoZiA9IG1zZy5nZXRJbnB1dFN0cmVhbUhhbmRsZXIoKSkgJiYgbWVkaWFwaXBlX2ZyYW1ld29ya19zdHJlYW1faGFuZGxlcl9wYi5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWcudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcbiAgICBvdXRwdXRTdHJlYW1IYW5kbGVyOiAoZiA9IG1zZy5nZXRPdXRwdXRTdHJlYW1IYW5kbGVyKCkpICYmIG1lZGlhcGlwZV9mcmFtZXdvcmtfc3RyZWFtX2hhbmRsZXJfcGIuT3V0cHV0U3RyZWFtSGFuZGxlckNvbmZpZy50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxuICAgIGV4ZWN1dG9yTGlzdDoganNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0RXhlY3V0b3JMaXN0KCksXG4gICAgcHJvdG8ubWVkaWFwaXBlLkV4ZWN1dG9yQ29uZmlnLnRvT2JqZWN0LCBpbmNsdWRlSW5zdGFuY2UpLFxuICAgIHByb2ZpbGVyQ29uZmlnOiAoZiA9IG1zZy5nZXRQcm9maWxlckNvbmZpZygpKSAmJiBwcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWcudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcbiAgICBwYl9wYWNrYWdlOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDE5LCBcIlwiKSxcbiAgICB0eXBlOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDIwLCBcIlwiKSxcbiAgICBvcHRpb25zOiAoZiA9IG1zZy5nZXRPcHRpb25zKCkpICYmIG1lZGlhcGlwZV9mcmFtZXdvcmtfbWVkaWFwaXBlX29wdGlvbnNfcGIuTWVkaWFQaXBlT3B0aW9ucy50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxuICAgIGdyYXBoT3B0aW9uc0xpc3Q6IGpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldEdyYXBoT3B0aW9uc0xpc3QoKSxcbiAgICBnb29nbGVfcHJvdG9idWZfYW55X3BiLkFueS50b09iamVjdCwgaW5jbHVkZUluc3RhbmNlKVxuICB9O1xuXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG59XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWc7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWd9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZTtcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5hZGROb2RlKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNjpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBtZWRpYXBpcGVfZnJhbWV3b3JrX3BhY2tldF9mYWN0b3J5X3BiLlBhY2tldEZhY3RvcnlDb25maWc7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsbWVkaWFwaXBlX2ZyYW1ld29ya19wYWNrZXRfZmFjdG9yeV9wYi5QYWNrZXRGYWN0b3J5Q29uZmlnLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XG4gICAgICBtc2cuYWRkUGFja2V0RmFjdG9yeSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDc6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgbWVkaWFwaXBlX2ZyYW1ld29ya19wYWNrZXRfZ2VuZXJhdG9yX3BiLlBhY2tldEdlbmVyYXRvckNvbmZpZztcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxtZWRpYXBpcGVfZnJhbWV3b3JrX3BhY2tldF9nZW5lcmF0b3JfcGIuUGFja2V0R2VuZXJhdG9yQ29uZmlnLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XG4gICAgICBtc2cuYWRkUGFja2V0R2VuZXJhdG9yKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgODpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQzMigpKTtcbiAgICAgIG1zZy5zZXROdW1UaHJlYWRzKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgOTpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBtZWRpYXBpcGVfZnJhbWV3b3JrX3N0YXR1c19oYW5kbGVyX3BiLlN0YXR1c0hhbmRsZXJDb25maWc7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsbWVkaWFwaXBlX2ZyYW1ld29ya19zdGF0dXNfaGFuZGxlcl9wYi5TdGF0dXNIYW5kbGVyQ29uZmlnLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XG4gICAgICBtc2cuYWRkU3RhdHVzSGFuZGxlcih2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEwOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5hZGRJbnB1dFN0cmVhbSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE1OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5hZGRPdXRwdXRTdHJlYW0odmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxNjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuYWRkSW5wdXRTaWRlUGFja2V0KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTc6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xuICAgICAgbXNnLmFkZE91dHB1dFNpZGVQYWNrZXQodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQzMigpKTtcbiAgICAgIG1zZy5zZXRNYXhRdWV1ZVNpemUodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyMTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gKHJlYWRlci5yZWFkQm9vbCgpKTtcbiAgICAgIG1zZy5zZXRSZXBvcnREZWFkbG9jayh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyOlxuICAgICAgdmFyIHZhbHVlID0gbmV3IG1lZGlhcGlwZV9mcmFtZXdvcmtfc3RyZWFtX2hhbmRsZXJfcGIuSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLG1lZGlhcGlwZV9mcmFtZXdvcmtfc3RyZWFtX2hhbmRsZXJfcGIuSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XG4gICAgICBtc2cuc2V0SW5wdXRTdHJlYW1IYW5kbGVyKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTM6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgbWVkaWFwaXBlX2ZyYW1ld29ya19zdHJlYW1faGFuZGxlcl9wYi5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLG1lZGlhcGlwZV9mcmFtZXdvcmtfc3RyZWFtX2hhbmRsZXJfcGIuT3V0cHV0U3RyZWFtSGFuZGxlckNvbmZpZy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldE91dHB1dFN0cmVhbUhhbmRsZXIodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxNDpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5tZWRpYXBpcGUuRXhlY3V0b3JDb25maWc7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8ubWVkaWFwaXBlLkV4ZWN1dG9yQ29uZmlnLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XG4gICAgICBtc2cuYWRkRXhlY3V0b3IodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxODpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWc7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XG4gICAgICBtc2cuc2V0UHJvZmlsZXJDb25maWcodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuc2V0UGFja2FnZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIwOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5zZXRUeXBlKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTAwMTpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBtZWRpYXBpcGVfZnJhbWV3b3JrX21lZGlhcGlwZV9vcHRpb25zX3BiLk1lZGlhUGlwZU9wdGlvbnM7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsbWVkaWFwaXBlX2ZyYW1ld29ya19tZWRpYXBpcGVfb3B0aW9uc19wYi5NZWRpYVBpcGVPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XG4gICAgICBtc2cuc2V0T3B0aW9ucyh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEwMDI6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgZ29vZ2xlX3Byb3RvYnVmX2FueV9wYi5Bbnk7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsZ29vZ2xlX3Byb3RvYnVmX2FueV9wYi5BbnkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5hZGRHcmFwaE9wdGlvbnModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZ30gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gbWVzc2FnZS5nZXROb2RlTGlzdCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKFxuICAgICAgMSxcbiAgICAgIGYsXG4gICAgICBwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGUuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldFBhY2tldEZhY3RvcnlMaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoXG4gICAgICA2LFxuICAgICAgZixcbiAgICAgIG1lZGlhcGlwZV9mcmFtZXdvcmtfcGFja2V0X2ZhY3RvcnlfcGIuUGFja2V0RmFjdG9yeUNvbmZpZy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0UGFja2V0R2VuZXJhdG9yTGlzdCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKFxuICAgICAgNyxcbiAgICAgIGYsXG4gICAgICBtZWRpYXBpcGVfZnJhbWV3b3JrX3BhY2tldF9nZW5lcmF0b3JfcGIuUGFja2V0R2VuZXJhdG9yQ29uZmlnLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXROdW1UaHJlYWRzKCk7XG4gIGlmIChmICE9PSAwKSB7XG4gICAgd3JpdGVyLndyaXRlSW50MzIoXG4gICAgICA4LFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0U3RhdHVzSGFuZGxlckxpc3QoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZShcbiAgICAgIDksXG4gICAgICBmLFxuICAgICAgbWVkaWFwaXBlX2ZyYW1ld29ya19zdGF0dXNfaGFuZGxlcl9wYi5TdGF0dXNIYW5kbGVyQ29uZmlnLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRJbnB1dFN0cmVhbUxpc3QoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkU3RyaW5nKFxuICAgICAgMTAsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRPdXRwdXRTdHJlYW1MaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZFN0cmluZyhcbiAgICAgIDE1LFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0SW5wdXRTaWRlUGFja2V0TGlzdCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRTdHJpbmcoXG4gICAgICAxNixcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldE91dHB1dFNpZGVQYWNrZXRMaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZFN0cmluZyhcbiAgICAgIDE3LFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0TWF4UXVldWVTaXplKCk7XG4gIGlmIChmICE9PSAwKSB7XG4gICAgd3JpdGVyLndyaXRlSW50MzIoXG4gICAgICAxMSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldFJlcG9ydERlYWRsb2NrKCk7XG4gIGlmIChmKSB7XG4gICAgd3JpdGVyLndyaXRlQm9vbChcbiAgICAgIDIxLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0SW5wdXRTdHJlYW1IYW5kbGVyKCk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxuICAgICAgMTIsXG4gICAgICBmLFxuICAgICAgbWVkaWFwaXBlX2ZyYW1ld29ya19zdHJlYW1faGFuZGxlcl9wYi5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWcuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldE91dHB1dFN0cmVhbUhhbmRsZXIoKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXG4gICAgICAxMyxcbiAgICAgIGYsXG4gICAgICBtZWRpYXBpcGVfZnJhbWV3b3JrX3N0cmVhbV9oYW5kbGVyX3BiLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWcuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldEV4ZWN1dG9yTGlzdCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKFxuICAgICAgMTQsXG4gICAgICBmLFxuICAgICAgcHJvdG8ubWVkaWFwaXBlLkV4ZWN1dG9yQ29uZmlnLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRQcm9maWxlckNvbmZpZygpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDE4LFxuICAgICAgZixcbiAgICAgIHByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0UGFja2FnZSgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxuICAgICAgMTksXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRUeXBlKCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXG4gICAgICAyMCxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldE9wdGlvbnMoKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXG4gICAgICAxMDAxLFxuICAgICAgZixcbiAgICAgIG1lZGlhcGlwZV9mcmFtZXdvcmtfbWVkaWFwaXBlX29wdGlvbnNfcGIuTWVkaWFQaXBlT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0R3JhcGhPcHRpb25zTGlzdCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKFxuICAgICAgMTAwMixcbiAgICAgIGYsXG4gICAgICBnb29nbGVfcHJvdG9idWZfYW55X3BiLkFueS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbn07XG5cblxuXG4vKipcbiAqIExpc3Qgb2YgcmVwZWF0ZWQgZmllbGRzIHdpdGhpbiB0aGlzIG1lc3NhZ2UgdHlwZS5cbiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn1cbiAqIEBjb25zdFxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGUucmVwZWF0ZWRGaWVsZHNfID0gWzMsNCw1LDYsOCwxMywxNywxMDA1XTtcblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBuYW1lOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDEsIFwiXCIpLFxuICAgIGNhbGN1bGF0b3I6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMiwgXCJcIiksXG4gICAgaW5wdXRTdHJlYW1MaXN0OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKG1zZywgMykpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIG91dHB1dFN0cmVhbUxpc3Q6IChmID0ganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQobXNnLCA0KSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgaW5wdXRTaWRlUGFja2V0TGlzdDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZChtc2csIDUpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICBvdXRwdXRTaWRlUGFja2V0TGlzdDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZChtc2csIDYpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICBvcHRpb25zOiAoZiA9IG1zZy5nZXRPcHRpb25zKCkpICYmIG1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9vcHRpb25zX3BiLkNhbGN1bGF0b3JPcHRpb25zLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXG4gICAgbm9kZU9wdGlvbnNMaXN0OiBqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXROb2RlT3B0aW9uc0xpc3QoKSxcbiAgICBnb29nbGVfcHJvdG9idWZfYW55X3BiLkFueS50b09iamVjdCwgaW5jbHVkZUluc3RhbmNlKSxcbiAgICBzb3VyY2VMYXllcjoganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCA5LCAwKSxcbiAgICBidWZmZXJTaXplSGludDoganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAxMCwgMCksXG4gICAgaW5wdXRTdHJlYW1IYW5kbGVyOiAoZiA9IG1zZy5nZXRJbnB1dFN0cmVhbUhhbmRsZXIoKSkgJiYgbWVkaWFwaXBlX2ZyYW1ld29ya19zdHJlYW1faGFuZGxlcl9wYi5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWcudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcbiAgICBvdXRwdXRTdHJlYW1IYW5kbGVyOiAoZiA9IG1zZy5nZXRPdXRwdXRTdHJlYW1IYW5kbGVyKCkpICYmIG1lZGlhcGlwZV9mcmFtZXdvcmtfc3RyZWFtX2hhbmRsZXJfcGIuT3V0cHV0U3RyZWFtSGFuZGxlckNvbmZpZy50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxuICAgIGlucHV0U3RyZWFtSW5mb0xpc3Q6IGpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldElucHV0U3RyZWFtSW5mb0xpc3QoKSxcbiAgICBwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvLnRvT2JqZWN0LCBpbmNsdWRlSW5zdGFuY2UpLFxuICAgIGV4ZWN1dG9yOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDE0LCBcIlwiKSxcbiAgICBwcm9maWxlckNvbmZpZzogKGYgPSBtc2cuZ2V0UHJvZmlsZXJDb25maWcoKSkgJiYgcHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXG4gICAgbWF4SW5GbGlnaHQ6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMTYsIDApLFxuICAgIG9wdGlvblZhbHVlTGlzdDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZChtc2csIDE3KSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgZXh0ZXJuYWxJbnB1dExpc3Q6IChmID0ganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQobXNnLCAxMDA1KSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGZcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGV9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5zZXROYW1lKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuc2V0Q2FsY3VsYXRvcih2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xuICAgICAgbXNnLmFkZElucHV0U3RyZWFtKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuYWRkT3V0cHV0U3RyZWFtKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuYWRkSW5wdXRTaWRlUGFja2V0KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuYWRkT3V0cHV0U2lkZVBhY2tldCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDc6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgbWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX29wdGlvbnNfcGIuQ2FsY3VsYXRvck9wdGlvbnM7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsbWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX29wdGlvbnNfcGIuQ2FsY3VsYXRvck9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5zZXRPcHRpb25zKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgODpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBnb29nbGVfcHJvdG9idWZfYW55X3BiLkFueTtcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxnb29nbGVfcHJvdG9idWZfYW55X3BiLkFueS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLmFkZE5vZGVPcHRpb25zKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgOTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQzMigpKTtcbiAgICAgIG1zZy5zZXRTb3VyY2VMYXllcih2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEwOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDMyKCkpO1xuICAgICAgbXNnLnNldEJ1ZmZlclNpemVIaW50KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTE6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgbWVkaWFwaXBlX2ZyYW1ld29ya19zdHJlYW1faGFuZGxlcl9wYi5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWc7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsbWVkaWFwaXBlX2ZyYW1ld29ya19zdHJlYW1faGFuZGxlcl9wYi5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWcuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5zZXRJbnB1dFN0cmVhbUhhbmRsZXIodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMjpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBtZWRpYXBpcGVfZnJhbWV3b3JrX3N0cmVhbV9oYW5kbGVyX3BiLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWc7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsbWVkaWFwaXBlX2ZyYW1ld29ya19zdHJlYW1faGFuZGxlcl9wYi5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XG4gICAgICBtc2cuc2V0T3V0cHV0U3RyZWFtSGFuZGxlcih2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEzOlxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUluZm87XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8ubWVkaWFwaXBlLklucHV0U3RyZWFtSW5mby5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLmFkZElucHV0U3RyZWFtSW5mbyh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE0OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5zZXRFeGVjdXRvcih2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE1OlxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZztcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWcuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5zZXRQcm9maWxlckNvbmZpZyh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE2OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDMyKCkpO1xuICAgICAgbXNnLnNldE1heEluRmxpZ2h0KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTc6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xuICAgICAgbXNnLmFkZE9wdGlvblZhbHVlKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTAwNTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuYWRkRXh0ZXJuYWxJbnB1dCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlfSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IG1lc3NhZ2UuZ2V0TmFtZSgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxuICAgICAgMSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldENhbGN1bGF0b3IoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVN0cmluZyhcbiAgICAgIDIsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRJbnB1dFN0cmVhbUxpc3QoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkU3RyaW5nKFxuICAgICAgMyxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldE91dHB1dFN0cmVhbUxpc3QoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkU3RyaW5nKFxuICAgICAgNCxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldElucHV0U2lkZVBhY2tldExpc3QoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkU3RyaW5nKFxuICAgICAgNSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldE91dHB1dFNpZGVQYWNrZXRMaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZFN0cmluZyhcbiAgICAgIDYsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRPcHRpb25zKCk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxuICAgICAgNyxcbiAgICAgIGYsXG4gICAgICBtZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3Jfb3B0aW9uc19wYi5DYWxjdWxhdG9yT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0Tm9kZU9wdGlvbnNMaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoXG4gICAgICA4LFxuICAgICAgZixcbiAgICAgIGdvb2dsZV9wcm90b2J1Zl9hbnlfcGIuQW55LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRTb3VyY2VMYXllcigpO1xuICBpZiAoZiAhPT0gMCkge1xuICAgIHdyaXRlci53cml0ZUludDMyKFxuICAgICAgOSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldEJ1ZmZlclNpemVIaW50KCk7XG4gIGlmIChmICE9PSAwKSB7XG4gICAgd3JpdGVyLndyaXRlSW50MzIoXG4gICAgICAxMCxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldElucHV0U3RyZWFtSGFuZGxlcigpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDExLFxuICAgICAgZixcbiAgICAgIG1lZGlhcGlwZV9mcmFtZXdvcmtfc3RyZWFtX2hhbmRsZXJfcGIuSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRPdXRwdXRTdHJlYW1IYW5kbGVyKCk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxuICAgICAgMTIsXG4gICAgICBmLFxuICAgICAgbWVkaWFwaXBlX2ZyYW1ld29ya19zdHJlYW1faGFuZGxlcl9wYi5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRJbnB1dFN0cmVhbUluZm9MaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoXG4gICAgICAxMyxcbiAgICAgIGYsXG4gICAgICBwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRFeGVjdXRvcigpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxuICAgICAgMTQsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRQcm9maWxlckNvbmZpZygpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDE1LFxuICAgICAgZixcbiAgICAgIHByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0TWF4SW5GbGlnaHQoKTtcbiAgaWYgKGYgIT09IDApIHtcbiAgICB3cml0ZXIud3JpdGVJbnQzMihcbiAgICAgIDE2LFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0T3B0aW9uVmFsdWVMaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZFN0cmluZyhcbiAgICAgIDE3LFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0RXh0ZXJuYWxJbnB1dExpc3QoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkU3RyaW5nKFxuICAgICAgMTAwNSxcbiAgICAgIGZcbiAgICApO1xuICB9XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgc3RyaW5nIG5hbWUgPSAxO1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGUucHJvdG90eXBlLmdldE5hbWUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMSwgXCJcIikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuc2V0TmFtZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyBjYWxjdWxhdG9yID0gMjtcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5nZXRDYWxjdWxhdG9yID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDIsIFwiXCIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGUucHJvdG90eXBlLnNldENhbGN1bGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBzdHJpbmcgaW5wdXRfc3RyZWFtID0gMztcbiAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGUucHJvdG90eXBlLmdldElucHV0U3RyZWFtTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHshQXJyYXk8c3RyaW5nPn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKHRoaXMsIDMpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuc2V0SW5wdXRTdHJlYW1MaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB2YWx1ZSB8fCBbXSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuYWRkSW5wdXRTdHJlYW0gPSBmdW5jdGlvbih2YWx1ZSwgb3B0X2luZGV4KSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZEZpZWxkKHRoaXMsIDMsIHZhbHVlLCBvcHRfaW5kZXgpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuY2xlYXJJbnB1dFN0cmVhbUxpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0SW5wdXRTdHJlYW1MaXN0KFtdKTtcbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBzdHJpbmcgb3V0cHV0X3N0cmVhbSA9IDQ7XG4gKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5nZXRPdXRwdXRTdHJlYW1MaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUgeyFBcnJheTxzdHJpbmc+fSAqLyAoanNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodGhpcywgNCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5zZXRPdXRwdXRTdHJlYW1MaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA0LCB2YWx1ZSB8fCBbXSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuYWRkT3V0cHV0U3RyZWFtID0gZnVuY3Rpb24odmFsdWUsIG9wdF9pbmRleCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRGaWVsZCh0aGlzLCA0LCB2YWx1ZSwgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGUucHJvdG90eXBlLmNsZWFyT3V0cHV0U3RyZWFtTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRPdXRwdXRTdHJlYW1MaXN0KFtdKTtcbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBzdHJpbmcgaW5wdXRfc2lkZV9wYWNrZXQgPSA1O1xuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuZ2V0SW5wdXRTaWRlUGFja2V0TGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHshQXJyYXk8c3RyaW5nPn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKHRoaXMsIDUpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuc2V0SW5wdXRTaWRlUGFja2V0TGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgNSwgdmFsdWUgfHwgW10pO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGUucHJvdG90eXBlLmFkZElucHV0U2lkZVBhY2tldCA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkRmllbGQodGhpcywgNSwgdmFsdWUsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5jbGVhcklucHV0U2lkZVBhY2tldExpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0SW5wdXRTaWRlUGFja2V0TGlzdChbXSk7XG59O1xuXG5cbi8qKlxuICogcmVwZWF0ZWQgc3RyaW5nIG91dHB1dF9zaWRlX3BhY2tldCA9IDY7XG4gKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5nZXRPdXRwdXRTaWRlUGFja2V0TGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHshQXJyYXk8c3RyaW5nPn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKHRoaXMsIDYpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuc2V0T3V0cHV0U2lkZVBhY2tldExpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDYsIHZhbHVlIHx8IFtdKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5hZGRPdXRwdXRTaWRlUGFja2V0ID0gZnVuY3Rpb24odmFsdWUsIG9wdF9pbmRleCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRGaWVsZCh0aGlzLCA2LCB2YWx1ZSwgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGUucHJvdG90eXBlLmNsZWFyT3V0cHV0U2lkZVBhY2tldExpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0T3V0cHV0U2lkZVBhY2tldExpc3QoW10pO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIENhbGN1bGF0b3JPcHRpb25zIG9wdGlvbnMgPSA3O1xuICogQHJldHVybiB7P3Byb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0aW9uc31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5nZXRPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0aW9uc30gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgbWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX29wdGlvbnNfcGIuQ2FsY3VsYXRvck9wdGlvbnMsIDcpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvck9wdGlvbnN8dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZX0gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5zZXRPcHRpb25zID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgNywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuY2xlYXJPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldE9wdGlvbnModW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGUucHJvdG90eXBlLmhhc09wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA3KSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIGdvb2dsZS5wcm90b2J1Zi5Bbnkgbm9kZV9vcHRpb25zID0gODtcbiAqIEByZXR1cm4geyFBcnJheTwhcHJvdG8uZ29vZ2xlLnByb3RvYnVmLkFueT59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuZ2V0Tm9kZU9wdGlvbnNMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7IUFycmF5PCFwcm90by5nb29nbGUucHJvdG9idWYuQW55Pn0gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCBnb29nbGVfcHJvdG9idWZfYW55X3BiLkFueSwgOCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5nb29nbGUucHJvdG9idWYuQW55Pn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGV9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuc2V0Tm9kZU9wdGlvbnNMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCA4LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshcHJvdG8uZ29vZ2xlLnByb3RvYnVmLkFueT19IG9wdF92YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcbiAqIEByZXR1cm4geyFwcm90by5nb29nbGUucHJvdG9idWYuQW55fVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGUucHJvdG90eXBlLmFkZE5vZGVPcHRpb25zID0gZnVuY3Rpb24ob3B0X3ZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDgsIG9wdF92YWx1ZSwgcHJvdG8uZ29vZ2xlLnByb3RvYnVmLkFueSwgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGUucHJvdG90eXBlLmNsZWFyTm9kZU9wdGlvbnNMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldE5vZGVPcHRpb25zTGlzdChbXSk7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgaW50MzIgc291cmNlX2xheWVyID0gOTtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5nZXRTb3VyY2VMYXllciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCA5LCAwKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5zZXRTb3VyY2VMYXllciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywgOSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGludDMyIGJ1ZmZlcl9zaXplX2hpbnQgPSAxMDtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5nZXRCdWZmZXJTaXplSGludCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxMCwgMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuc2V0QnVmZmVyU2l6ZUhpbnQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsIDEwLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnIGlucHV0X3N0cmVhbV9oYW5kbGVyID0gMTE7XG4gKiBAcmV0dXJuIHs/cHJvdG8ubWVkaWFwaXBlLklucHV0U3RyZWFtSGFuZGxlckNvbmZpZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5nZXRJbnB1dFN0cmVhbUhhbmRsZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLklucHV0U3RyZWFtSGFuZGxlckNvbmZpZ30gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgbWVkaWFwaXBlX2ZyYW1ld29ya19zdHJlYW1faGFuZGxlcl9wYi5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWcsIDExKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHs/cHJvdG8ubWVkaWFwaXBlLklucHV0U3RyZWFtSGFuZGxlckNvbmZpZ3x1bmRlZmluZWR9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlfSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGUucHJvdG90eXBlLnNldElucHV0U3RyZWFtSGFuZGxlciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDExLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5jbGVhcklucHV0U3RyZWFtSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRJbnB1dFN0cmVhbUhhbmRsZXIodW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGUucHJvdG90eXBlLmhhc0lucHV0U3RyZWFtSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDExKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIE91dHB1dFN0cmVhbUhhbmRsZXJDb25maWcgb3V0cHV0X3N0cmVhbV9oYW5kbGVyID0gMTI7XG4gKiBAcmV0dXJuIHs/cHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuZ2V0T3V0cHV0U3RyZWFtSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5tZWRpYXBpcGUuT3V0cHV0U3RyZWFtSGFuZGxlckNvbmZpZ30gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgbWVkaWFwaXBlX2ZyYW1ld29ya19zdHJlYW1faGFuZGxlcl9wYi5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnLCAxMikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P3Byb3RvLm1lZGlhcGlwZS5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnfHVuZGVmaW5lZH0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGV9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuc2V0T3V0cHV0U3RyZWFtSGFuZGxlciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDEyLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5jbGVhck91dHB1dFN0cmVhbUhhbmRsZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0T3V0cHV0U3RyZWFtSGFuZGxlcih1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuaGFzT3V0cHV0U3RyZWFtSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEyKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIElucHV0U3RyZWFtSW5mbyBpbnB1dF9zdHJlYW1faW5mbyA9IDEzO1xuICogQHJldHVybiB7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5nZXRJbnB1dFN0cmVhbUluZm9MaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvPn0gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvLCAxMykpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvPn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGV9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuc2V0SW5wdXRTdHJlYW1JbmZvTGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgMTMsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1JbmZvPX0gb3B0X3ZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUluZm99XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuYWRkSW5wdXRTdHJlYW1JbmZvID0gZnVuY3Rpb24ob3B0X3ZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDEzLCBvcHRfdmFsdWUsIHByb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUluZm8sIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5jbGVhcklucHV0U3RyZWFtSW5mb0xpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0SW5wdXRTdHJlYW1JbmZvTGlzdChbXSk7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgc3RyaW5nIGV4ZWN1dG9yID0gMTQ7XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuZ2V0RXhlY3V0b3IgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMTQsIFwiXCIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGUucHJvdG90eXBlLnNldEV4ZWN1dG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLCAxNCwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIFByb2ZpbGVyQ29uZmlnIHByb2ZpbGVyX2NvbmZpZyA9IDE1O1xuICogQHJldHVybiB7P3Byb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5nZXRQcm9maWxlckNvbmZpZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWd9ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZywgMTUpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWd8dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZX0gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5zZXRQcm9maWxlckNvbmZpZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDE1LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5jbGVhclByb2ZpbGVyQ29uZmlnID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldFByb2ZpbGVyQ29uZmlnKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5oYXNQcm9maWxlckNvbmZpZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDE1KSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGludDMyIG1heF9pbl9mbGlnaHQgPSAxNjtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5nZXRNYXhJbkZsaWdodCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxNiwgMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuc2V0TWF4SW5GbGlnaHQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsIDE2LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogcmVwZWF0ZWQgc3RyaW5nIG9wdGlvbl92YWx1ZSA9IDE3O1xuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuZ2V0T3B0aW9uVmFsdWVMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUgeyFBcnJheTxzdHJpbmc+fSAqLyAoanNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodGhpcywgMTcpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuc2V0T3B0aW9uVmFsdWVMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxNywgdmFsdWUgfHwgW10pO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGUucHJvdG90eXBlLmFkZE9wdGlvblZhbHVlID0gZnVuY3Rpb24odmFsdWUsIG9wdF9pbmRleCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRGaWVsZCh0aGlzLCAxNywgdmFsdWUsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5jbGVhck9wdGlvblZhbHVlTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRPcHRpb25WYWx1ZUxpc3QoW10pO1xufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIHN0cmluZyBleHRlcm5hbF9pbnB1dCA9IDEwMDU7XG4gKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5nZXRFeHRlcm5hbElucHV0TGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHshQXJyYXk8c3RyaW5nPn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKHRoaXMsIDEwMDUpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZS5wcm90b3R5cGUuc2V0RXh0ZXJuYWxJbnB1dExpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEwMDUsIHZhbHVlIHx8IFtdKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlLnByb3RvdHlwZS5hZGRFeHRlcm5hbElucHV0ID0gZnVuY3Rpb24odmFsdWUsIG9wdF9pbmRleCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRGaWVsZCh0aGlzLCAxMDA1LCB2YWx1ZSwgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGUucHJvdG90eXBlLmNsZWFyRXh0ZXJuYWxJbnB1dExpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0RXh0ZXJuYWxJbnB1dExpc3QoW10pO1xufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIE5vZGUgbm9kZSA9IDE7XG4gKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZT59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLmdldE5vZGVMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGU+fSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZSwgMSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLk5vZGU+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWd9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLnNldE5vZGVMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlPX0gb3B0X3ZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuYWRkTm9kZSA9IGZ1bmN0aW9uKG9wdF92YWx1ZSwgb3B0X2luZGV4KSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCAxLCBvcHRfdmFsdWUsIHByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZSwgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuY2xlYXJOb2RlTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXROb2RlTGlzdChbXSk7XG59O1xuXG5cbi8qKlxuICogcmVwZWF0ZWQgUGFja2V0RmFjdG9yeUNvbmZpZyBwYWNrZXRfZmFjdG9yeSA9IDY7XG4gKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5Q29uZmlnPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuZ2V0UGFja2V0RmFjdG9yeUxpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS5QYWNrZXRGYWN0b3J5Q29uZmlnPn0gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCBtZWRpYXBpcGVfZnJhbWV3b3JrX3BhY2tldF9mYWN0b3J5X3BiLlBhY2tldEZhY3RvcnlDb25maWcsIDYpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTwhcHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlDb25maWc+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWd9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLnNldFBhY2tldEZhY3RvcnlMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCA2LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlDb25maWc9fSBvcHRfdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldEZhY3RvcnlDb25maWd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLmFkZFBhY2tldEZhY3RvcnkgPSBmdW5jdGlvbihvcHRfdmFsdWUsIG9wdF9pbmRleCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgNiwgb3B0X3ZhbHVlLCBwcm90by5tZWRpYXBpcGUuUGFja2V0RmFjdG9yeUNvbmZpZywgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuY2xlYXJQYWNrZXRGYWN0b3J5TGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRQYWNrZXRGYWN0b3J5TGlzdChbXSk7XG59O1xuXG5cbi8qKlxuICogcmVwZWF0ZWQgUGFja2V0R2VuZXJhdG9yQ29uZmlnIHBhY2tldF9nZW5lcmF0b3IgPSA3O1xuICogQHJldHVybiB7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuZ2V0UGFja2V0R2VuZXJhdG9yTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBleyFBcnJheTwhcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZz59ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgbWVkaWFwaXBlX2ZyYW1ld29ya19wYWNrZXRfZ2VuZXJhdG9yX3BiLlBhY2tldEdlbmVyYXRvckNvbmZpZywgNykpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnPn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnfSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5zZXRQYWNrZXRHZW5lcmF0b3JMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCA3LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLlBhY2tldEdlbmVyYXRvckNvbmZpZz19IG9wdF92YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnfVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5hZGRQYWNrZXRHZW5lcmF0b3IgPSBmdW5jdGlvbihvcHRfdmFsdWUsIG9wdF9pbmRleCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgNywgb3B0X3ZhbHVlLCBwcm90by5tZWRpYXBpcGUuUGFja2V0R2VuZXJhdG9yQ29uZmlnLCBvcHRfaW5kZXgpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5jbGVhclBhY2tldEdlbmVyYXRvckxpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0UGFja2V0R2VuZXJhdG9yTGlzdChbXSk7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgaW50MzIgbnVtX3RocmVhZHMgPSA4O1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5nZXROdW1UaHJlYWRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDgsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuc2V0TnVtVGhyZWFkcyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywgOCwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIFN0YXR1c0hhbmRsZXJDb25maWcgc3RhdHVzX2hhbmRsZXIgPSA5O1xuICogQHJldHVybiB7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLmdldFN0YXR1c0hhbmRsZXJMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuU3RhdHVzSGFuZGxlckNvbmZpZz59ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgbWVkaWFwaXBlX2ZyYW1ld29ya19zdGF0dXNfaGFuZGxlcl9wYi5TdGF0dXNIYW5kbGVyQ29uZmlnLCA5KSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS5TdGF0dXNIYW5kbGVyQ29uZmlnPn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnfSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5zZXRTdGF0dXNIYW5kbGVyTGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgOSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5TdGF0dXNIYW5kbGVyQ29uZmlnPX0gb3B0X3ZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5TdGF0dXNIYW5kbGVyQ29uZmlnfVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5hZGRTdGF0dXNIYW5kbGVyID0gZnVuY3Rpb24ob3B0X3ZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDksIG9wdF92YWx1ZSwgcHJvdG8ubWVkaWFwaXBlLlN0YXR1c0hhbmRsZXJDb25maWcsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLmNsZWFyU3RhdHVzSGFuZGxlckxpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0U3RhdHVzSGFuZGxlckxpc3QoW10pO1xufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIHN0cmluZyBpbnB1dF9zdHJlYW0gPSAxMDtcbiAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5nZXRJbnB1dFN0cmVhbUxpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IUFycmF5PHN0cmluZz59ICovIChqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0aGlzLCAxMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLnNldElucHV0U3RyZWFtTGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMTAsIHZhbHVlIHx8IFtdKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLmFkZElucHV0U3RyZWFtID0gZnVuY3Rpb24odmFsdWUsIG9wdF9pbmRleCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRGaWVsZCh0aGlzLCAxMCwgdmFsdWUsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLmNsZWFySW5wdXRTdHJlYW1MaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldElucHV0U3RyZWFtTGlzdChbXSk7XG59O1xuXG5cbi8qKlxuICogcmVwZWF0ZWQgc3RyaW5nIG91dHB1dF9zdHJlYW0gPSAxNTtcbiAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5nZXRPdXRwdXRTdHJlYW1MaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUgeyFBcnJheTxzdHJpbmc+fSAqLyAoanNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodGhpcywgMTUpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5zZXRPdXRwdXRTdHJlYW1MaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxNSwgdmFsdWUgfHwgW10pO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuYWRkT3V0cHV0U3RyZWFtID0gZnVuY3Rpb24odmFsdWUsIG9wdF9pbmRleCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRGaWVsZCh0aGlzLCAxNSwgdmFsdWUsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLmNsZWFyT3V0cHV0U3RyZWFtTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRPdXRwdXRTdHJlYW1MaXN0KFtdKTtcbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBzdHJpbmcgaW5wdXRfc2lkZV9wYWNrZXQgPSAxNjtcbiAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5nZXRJbnB1dFNpZGVQYWNrZXRMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUgeyFBcnJheTxzdHJpbmc+fSAqLyAoanNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodGhpcywgMTYpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5zZXRJbnB1dFNpZGVQYWNrZXRMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxNiwgdmFsdWUgfHwgW10pO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuYWRkSW5wdXRTaWRlUGFja2V0ID0gZnVuY3Rpb24odmFsdWUsIG9wdF9pbmRleCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRGaWVsZCh0aGlzLCAxNiwgdmFsdWUsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLmNsZWFySW5wdXRTaWRlUGFja2V0TGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRJbnB1dFNpZGVQYWNrZXRMaXN0KFtdKTtcbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBzdHJpbmcgb3V0cHV0X3NpZGVfcGFja2V0ID0gMTc7XG4gKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuZ2V0T3V0cHV0U2lkZVBhY2tldExpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IUFycmF5PHN0cmluZz59ICovIChqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0aGlzLCAxNykpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLnNldE91dHB1dFNpZGVQYWNrZXRMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxNywgdmFsdWUgfHwgW10pO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuYWRkT3V0cHV0U2lkZVBhY2tldCA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkRmllbGQodGhpcywgMTcsIHZhbHVlLCBvcHRfaW5kZXgpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5jbGVhck91dHB1dFNpZGVQYWNrZXRMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldE91dHB1dFNpZGVQYWNrZXRMaXN0KFtdKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBpbnQzMiBtYXhfcXVldWVfc2l6ZSA9IDExO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5nZXRNYXhRdWV1ZVNpemUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMTEsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuc2V0TWF4UXVldWVTaXplID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLCAxMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGJvb2wgcmVwb3J0X2RlYWRsb2NrID0gMjE7XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5nZXRSZXBvcnREZWFkbG9jayA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtib29sZWFufSAqLyAoanNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDIxLCBmYWxzZSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuc2V0UmVwb3J0RGVhZGxvY2sgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0Jvb2xlYW5GaWVsZCh0aGlzLCAyMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIElucHV0U3RyZWFtSGFuZGxlckNvbmZpZyBpbnB1dF9zdHJlYW1faGFuZGxlciA9IDEyO1xuICogQHJldHVybiB7P3Byb3RvLm1lZGlhcGlwZS5JbnB1dFN0cmVhbUhhbmRsZXJDb25maWd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLmdldElucHV0U3RyZWFtSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnfSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBtZWRpYXBpcGVfZnJhbWV3b3JrX3N0cmVhbV9oYW5kbGVyX3BiLklucHV0U3RyZWFtSGFuZGxlckNvbmZpZywgMTIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUuSW5wdXRTdHJlYW1IYW5kbGVyQ29uZmlnfHVuZGVmaW5lZH0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnfSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5zZXRJbnB1dFN0cmVhbUhhbmRsZXIgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAxMiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5jbGVhcklucHV0U3RyZWFtSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRJbnB1dFN0cmVhbUhhbmRsZXIodW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5oYXNJbnB1dFN0cmVhbUhhbmRsZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxMikgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBPdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnIG91dHB1dF9zdHJlYW1faGFuZGxlciA9IDEzO1xuICogQHJldHVybiB7P3Byb3RvLm1lZGlhcGlwZS5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnfVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5nZXRPdXRwdXRTdHJlYW1IYW5kbGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLm1lZGlhcGlwZS5PdXRwdXRTdHJlYW1IYW5kbGVyQ29uZmlnfSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBtZWRpYXBpcGVfZnJhbWV3b3JrX3N0cmVhbV9oYW5kbGVyX3BiLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWcsIDEzKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHs/cHJvdG8ubWVkaWFwaXBlLk91dHB1dFN0cmVhbUhhbmRsZXJDb25maWd8dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWd9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLnNldE91dHB1dFN0cmVhbUhhbmRsZXIgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAxMywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5jbGVhck91dHB1dFN0cmVhbUhhbmRsZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0T3V0cHV0U3RyZWFtSGFuZGxlcih1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLmhhc091dHB1dFN0cmVhbUhhbmRsZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxMykgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBFeGVjdXRvckNvbmZpZyBleGVjdXRvciA9IDE0O1xuICogQHJldHVybiB7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuRXhlY3V0b3JDb25maWc+fVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5nZXRFeGVjdXRvckxpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS5FeGVjdXRvckNvbmZpZz59ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8ubWVkaWFwaXBlLkV4ZWN1dG9yQ29uZmlnLCAxNCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuRXhlY3V0b3JDb25maWc+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWd9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLnNldEV4ZWN1dG9yTGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgMTQsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuRXhlY3V0b3JDb25maWc9fSBvcHRfdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkV4ZWN1dG9yQ29uZmlnfVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5hZGRFeGVjdXRvciA9IGZ1bmN0aW9uKG9wdF92YWx1ZSwgb3B0X2luZGV4KSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCAxNCwgb3B0X3ZhbHVlLCBwcm90by5tZWRpYXBpcGUuRXhlY3V0b3JDb25maWcsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZ30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLmNsZWFyRXhlY3V0b3JMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldEV4ZWN1dG9yTGlzdChbXSk7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgUHJvZmlsZXJDb25maWcgcHJvZmlsZXJfY29uZmlnID0gMTg7XG4gKiBAcmV0dXJuIHs/cHJvdG8ubWVkaWFwaXBlLlByb2ZpbGVyQ29uZmlnfVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5nZXRQcm9maWxlckNvbmZpZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWd9ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLm1lZGlhcGlwZS5Qcm9maWxlckNvbmZpZywgMTgpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUuUHJvZmlsZXJDb25maWd8dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWd9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLnNldFByb2ZpbGVyQ29uZmlnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMTgsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuY2xlYXJQcm9maWxlckNvbmZpZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRQcm9maWxlckNvbmZpZyh1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLmhhc1Byb2ZpbGVyQ29uZmlnID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMTgpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgc3RyaW5nIHBhY2thZ2UgPSAxOTtcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuZ2V0UGFja2FnZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxOSwgXCJcIikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWd9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5zZXRQYWNrYWdlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLCAxOSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyB0eXBlID0gMjA7XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DYWxjdWxhdG9yR3JhcGhDb25maWcucHJvdG90eXBlLmdldFR5cGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMjAsIFwiXCIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuc2V0VHlwZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywgMjAsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBNZWRpYVBpcGVPcHRpb25zIG9wdGlvbnMgPSAxMDAxO1xuICogQHJldHVybiB7P3Byb3RvLm1lZGlhcGlwZS5NZWRpYVBpcGVPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5nZXRPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLm1lZGlhcGlwZS5NZWRpYVBpcGVPcHRpb25zfSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBtZWRpYXBpcGVfZnJhbWV3b3JrX21lZGlhcGlwZV9vcHRpb25zX3BiLk1lZGlhUGlwZU9wdGlvbnMsIDEwMDEpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUuTWVkaWFQaXBlT3B0aW9uc3x1bmRlZmluZWR9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZ30gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuc2V0T3B0aW9ucyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDEwMDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuY2xlYXJPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldE9wdGlvbnModW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnLnByb3RvdHlwZS5oYXNPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMTAwMSkgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBnb29nbGUucHJvdG9idWYuQW55IGdyYXBoX29wdGlvbnMgPSAxMDAyO1xuICogQHJldHVybiB7IUFycmF5PCFwcm90by5nb29nbGUucHJvdG9idWYuQW55Pn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuZ2V0R3JhcGhPcHRpb25zTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBleyFBcnJheTwhcHJvdG8uZ29vZ2xlLnByb3RvYnVmLkFueT59ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgZ29vZ2xlX3Byb3RvYnVmX2FueV9wYi5BbnksIDEwMDIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTwhcHJvdG8uZ29vZ2xlLnByb3RvYnVmLkFueT59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZ30gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuc2V0R3JhcGhPcHRpb25zTGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgMTAwMiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IXByb3RvLmdvb2dsZS5wcm90b2J1Zi5Bbnk9fSBvcHRfdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XG4gKiBAcmV0dXJuIHshcHJvdG8uZ29vZ2xlLnByb3RvYnVmLkFueX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuYWRkR3JhcGhPcHRpb25zID0gZnVuY3Rpb24ob3B0X3ZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDEwMDIsIG9wdF92YWx1ZSwgcHJvdG8uZ29vZ2xlLnByb3RvYnVmLkFueSwgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2FsY3VsYXRvckdyYXBoQ29uZmlnfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5wcm90b3R5cGUuY2xlYXJHcmFwaE9wdGlvbnNMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldEdyYXBoT3B0aW9uc0xpc3QoW10pO1xufTtcblxuXG5nb29nLm9iamVjdC5leHRlbmQoZXhwb3J0cywgcHJvdG8ubWVkaWFwaXBlKTtcbiIsIi8vIHNvdXJjZTogbWVkaWFwaXBlL2ZyYW1ld29yay9mb3JtYXRzL2NsYXNzaWZpY2F0aW9uLnByb3RvXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqIEBlbmhhbmNlYWJsZVxuICogQHN1cHByZXNzIHttaXNzaW5nUmVxdWlyZX0gcmVwb3J0cyBlcnJvciBvbiBpbXBsaWNpdCB0eXBlIHVzYWdlcy5cbiAqIEBzdXBwcmVzcyB7bWVzc2FnZUNvbnZlbnRpb25zfSBKUyBDb21waWxlciByZXBvcnRzIGFuIGVycm9yIGlmIGEgdmFyaWFibGUgb3JcbiAqICAgICBmaWVsZCBzdGFydHMgd2l0aCAnTVNHXycgYW5kIGlzbid0IGEgdHJhbnNsYXRhYmxlIG1lc3NhZ2UuXG4gKiBAcHVibGljXG4gKi9cbi8vIEdFTkVSQVRFRCBDT0RFIC0tIERPIE5PVCBFRElUIVxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbnZhciBqc3BiID0gcmVxdWlyZSgnZ29vZ2xlLXByb3RvYnVmJyk7XG52YXIgZ29vZyA9IGpzcGI7XG52YXIgZ2xvYmFsID1cbiAgICAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMpIHx8XG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdykgfHxcbiAgICAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsKSB8fFxuICAgICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZikgfHxcbiAgICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkuY2FsbChudWxsKSB8fFxuICAgIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb24nLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3QnLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3RDb2xsZWN0aW9uJywgbnVsbCwgZ2xvYmFsKTtcbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb24gPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uLmRpc3BsYXlOYW1lID0gJ3Byb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbic7XG59XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdCA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdC5yZXBlYXRlZEZpZWxkc18sIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdCwganNwYi5NZXNzYWdlKTtcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3QuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdCc7XG59XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdENvbGxlY3Rpb24gPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIHByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3RDb2xsZWN0aW9uLnJlcGVhdGVkRmllbGRzXywgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0Q29sbGVjdGlvbiwganNwYi5NZXNzYWdlKTtcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3RDb2xsZWN0aW9uLmRpc3BsYXlOYW1lID0gJ3Byb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3RDb2xsZWN0aW9uJztcbn1cblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbi50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbn0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBpbmRleDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCAxKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgc2NvcmU6IChmID0ganNwYi5NZXNzYWdlLmdldE9wdGlvbmFsRmxvYXRpbmdQb2ludEZpZWxkKG1zZywgMikpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIGxhYmVsOiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtc2csIDMpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICBkaXNwbGF5TmFtZTogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCA0KSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGZcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbn0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb259XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDMyKCkpO1xuICAgICAgbXNnLnNldEluZGV4KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRGbG9hdCgpKTtcbiAgICAgIG1zZy5zZXRTY29yZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xuICAgICAgbXNnLnNldExhYmVsKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuc2V0RGlzcGxheU5hbWUodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb24ucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbn0gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb24uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAxKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVJbnQzMihcbiAgICAgIDEsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMikpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlRmxvYXQoXG4gICAgICAyLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDMpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZVN0cmluZyhcbiAgICAgIDMsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgNCkpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxuICAgICAgNCxcbiAgICAgIGZcbiAgICApO1xuICB9XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgaW50MzIgaW5kZXggPSAxO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb24ucHJvdG90eXBlLmdldEluZGV4ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb24ucHJvdG90eXBlLnNldEluZGV4ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbn0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbi5wcm90b3R5cGUuY2xlYXJJbmRleCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uLnByb3RvdHlwZS5oYXNJbmRleCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgZmxvYXQgc2NvcmUgPSAyO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb24ucHJvdG90eXBlLmdldFNjb3JlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCAwLjApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb24ucHJvdG90eXBlLnNldFNjb3JlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbn0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbi5wcm90b3R5cGUuY2xlYXJTY29yZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uLnByb3RvdHlwZS5oYXNTY29yZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgc3RyaW5nIGxhYmVsID0gMztcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uLnByb3RvdHlwZS5nZXRMYWJlbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAzLCBcIlwiKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9ufSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uLnByb3RvdHlwZS5zZXRMYWJlbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb24ucHJvdG90eXBlLmNsZWFyTGFiZWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbi5wcm90b3R5cGUuaGFzTGFiZWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAzKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyBkaXNwbGF5X25hbWUgPSA0O1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb24ucHJvdG90eXBlLmdldERpc3BsYXlOYW1lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDQsIFwiXCIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb24ucHJvdG90eXBlLnNldERpc3BsYXlOYW1lID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA0LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbn0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbi5wcm90b3R5cGUuY2xlYXJEaXNwbGF5TmFtZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDQsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uLnByb3RvdHlwZS5oYXNEaXNwbGF5TmFtZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDQpICE9IG51bGw7XG59O1xuXG5cblxuLyoqXG4gKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuXG4gKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59XG4gKiBAY29uc3RcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdC5yZXBlYXRlZEZpZWxkc18gPSBbMV07XG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3QucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3R9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3QudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xuICB2YXIgZiwgb2JqID0ge1xuICAgIGNsYXNzaWZpY2F0aW9uTGlzdDoganNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0Q2xhc3NpZmljYXRpb25MaXN0KCksXG4gICAgcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uLnRvT2JqZWN0LCBpbmNsdWRlSW5zdGFuY2UpXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0fVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0LmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdDtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0fVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLmFkZENsYXNzaWZpY2F0aW9uKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3R9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IG1lc3NhZ2UuZ2V0Q2xhc3NpZmljYXRpb25MaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoXG4gICAgICAxLFxuICAgICAgZixcbiAgICAgIHByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBDbGFzc2lmaWNhdGlvbiBjbGFzc2lmaWNhdGlvbiA9IDE7XG4gKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbj59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3QucHJvdG90eXBlLmdldENsYXNzaWZpY2F0aW9uTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBleyFBcnJheTwhcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uPn0gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb24sIDEpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTwhcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uPn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0fSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0LnByb3RvdHlwZS5zZXRDbGFzc2lmaWNhdGlvbkxpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb249fSBvcHRfdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9ufVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0LnByb3RvdHlwZS5hZGRDbGFzc2lmaWNhdGlvbiA9IGZ1bmN0aW9uKG9wdF92YWx1ZSwgb3B0X2luZGV4KSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCAxLCBvcHRfdmFsdWUsIHByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbiwgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdC5wcm90b3R5cGUuY2xlYXJDbGFzc2lmaWNhdGlvbkxpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0Q2xhc3NpZmljYXRpb25MaXN0KFtdKTtcbn07XG5cblxuXG4vKipcbiAqIExpc3Qgb2YgcmVwZWF0ZWQgZmllbGRzIHdpdGhpbiB0aGlzIG1lc3NhZ2UgdHlwZS5cbiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn1cbiAqIEBjb25zdFxuICovXG5wcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0Q29sbGVjdGlvbi5yZXBlYXRlZEZpZWxkc18gPSBbMV07XG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3RDb2xsZWN0aW9uLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3RDb2xsZWN0aW9uLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdENvbGxlY3Rpb259IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3RDb2xsZWN0aW9uLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBjbGFzc2lmaWNhdGlvbkxpc3RMaXN0OiBqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRDbGFzc2lmaWNhdGlvbkxpc3RMaXN0KCksXG4gICAgcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdC50b09iamVjdCwgaW5jbHVkZUluc3RhbmNlKVxuICB9O1xuXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG59XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdENvbGxlY3Rpb259XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3RDb2xsZWN0aW9uLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdENvbGxlY3Rpb247XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0Q29sbGVjdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0Q29sbGVjdGlvbn0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0Q29sbGVjdGlvbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdENvbGxlY3Rpb24uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0O1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5hZGRDbGFzc2lmaWNhdGlvbkxpc3QodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0Q29sbGVjdGlvbi5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdENvbGxlY3Rpb24uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0Q29sbGVjdGlvbn0gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0Q29sbGVjdGlvbi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IG1lc3NhZ2UuZ2V0Q2xhc3NpZmljYXRpb25MaXN0TGlzdCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKFxuICAgICAgMSxcbiAgICAgIGYsXG4gICAgICBwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIENsYXNzaWZpY2F0aW9uTGlzdCBjbGFzc2lmaWNhdGlvbl9saXN0ID0gMTtcbiAqIEByZXR1cm4geyFBcnJheTwhcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdD59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3RDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXRDbGFzc2lmaWNhdGlvbkxpc3RMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0Pn0gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0LCAxKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3Q+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3RDb2xsZWN0aW9ufSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0Q29sbGVjdGlvbi5wcm90b3R5cGUuc2V0Q2xhc3NpZmljYXRpb25MaXN0TGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3Q9fSBvcHRfdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdENvbGxlY3Rpb24ucHJvdG90eXBlLmFkZENsYXNzaWZpY2F0aW9uTGlzdCA9IGZ1bmN0aW9uKG9wdF92YWx1ZSwgb3B0X2luZGV4KSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCAxLCBvcHRfdmFsdWUsIHByb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3QsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdENvbGxlY3Rpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0Q29sbGVjdGlvbi5wcm90b3R5cGUuY2xlYXJDbGFzc2lmaWNhdGlvbkxpc3RMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldENsYXNzaWZpY2F0aW9uTGlzdExpc3QoW10pO1xufTtcblxuXG5nb29nLm9iamVjdC5leHRlbmQoZXhwb3J0cywgcHJvdG8ubWVkaWFwaXBlKTtcbiIsIi8vIHNvdXJjZTogbWVkaWFwaXBlL3Rhc2tzL2NjL2NvbXBvbmVudHMvY29udGFpbmVycy9wcm90by9jYXRlZ29yeS5wcm90b1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKiBAZW5oYW5jZWFibGVcbiAqIEBzdXBwcmVzcyB7bWlzc2luZ1JlcXVpcmV9IHJlcG9ydHMgZXJyb3Igb24gaW1wbGljaXQgdHlwZSB1c2FnZXMuXG4gKiBAc3VwcHJlc3Mge21lc3NhZ2VDb252ZW50aW9uc30gSlMgQ29tcGlsZXIgcmVwb3J0cyBhbiBlcnJvciBpZiBhIHZhcmlhYmxlIG9yXG4gKiAgICAgZmllbGQgc3RhcnRzIHdpdGggJ01TR18nIGFuZCBpc24ndCBhIHRyYW5zbGF0YWJsZSBtZXNzYWdlLlxuICogQHB1YmxpY1xuICovXG4vLyBHRU5FUkFURUQgQ09ERSAtLSBETyBOT1QgRURJVCFcbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuXG52YXIganNwYiA9IHJlcXVpcmUoJ2dvb2dsZS1wcm90b2J1ZicpO1xudmFyIGdvb2cgPSBqc3BiO1xudmFyIGdsb2JhbCA9XG4gICAgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzKSB8fFxuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cpIHx8XG4gICAgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbCkgfHxcbiAgICAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYpIHx8XG4gICAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pLmNhbGwobnVsbCkgfHxcbiAgICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeScsIG51bGwsIGdsb2JhbCk7XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeSA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNhdGVnb3J5LCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeS5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNhdGVnb3J5Jztcbn1cblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNhdGVnb3J5LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeS50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgaW5kZXg6IChmID0ganNwYi5NZXNzYWdlLmdldEZpZWxkKG1zZywgMSkpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIHNjb3JlOiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRPcHRpb25hbEZsb2F0aW5nUG9pbnRGaWVsZChtc2csIDIpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICBkaXNwbGF5TmFtZTogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCAzKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgY2F0ZWdvcnlOYW1lOiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtc2csIDQpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZlxuICB9O1xuXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG59XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeS5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2F0ZWdvcnk7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNhdGVnb3J5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2F0ZWdvcnl9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDMyKCkpO1xuICAgICAgbXNnLnNldEluZGV4KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRGbG9hdCgpKTtcbiAgICAgIG1zZy5zZXRTY29yZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xuICAgICAgbXNnLnNldERpc3BsYXlOYW1lKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuc2V0Q2F0ZWdvcnlOYW1lKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2F0ZWdvcnl9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDEpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUludDMyKFxuICAgICAgMSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAyKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVGbG9hdChcbiAgICAgIDIsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMykpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxuICAgICAgMyxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCA0KSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXG4gICAgICA0LFxuICAgICAgZlxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBpbnQzMiBpbmRleCA9IDE7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2F0ZWdvcnkucHJvdG90eXBlLmdldEluZGV4ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNhdGVnb3J5fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeS5wcm90b3R5cGUuc2V0SW5kZXggPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2F0ZWdvcnkucHJvdG90eXBlLmNsZWFySW5kZXggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2F0ZWdvcnkucHJvdG90eXBlLmhhc0luZGV4ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBmbG9hdCBzY29yZSA9IDI7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2F0ZWdvcnkucHJvdG90eXBlLmdldFNjb3JlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCAwLjApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNhdGVnb3J5fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeS5wcm90b3R5cGUuc2V0U2NvcmUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2F0ZWdvcnkucHJvdG90eXBlLmNsZWFyU2NvcmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2F0ZWdvcnkucHJvdG90eXBlLmhhc1Njb3JlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBzdHJpbmcgZGlzcGxheV9uYW1lID0gMztcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeS5wcm90b3R5cGUuZ2V0RGlzcGxheU5hbWUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMywgXCJcIikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2F0ZWdvcnl9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNhdGVnb3J5LnByb3RvdHlwZS5zZXREaXNwbGF5TmFtZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNhdGVnb3J5fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeS5wcm90b3R5cGUuY2xlYXJEaXNwbGF5TmFtZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDMsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeS5wcm90b3R5cGUuaGFzRGlzcGxheU5hbWUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAzKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyBjYXRlZ29yeV9uYW1lID0gNDtcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeS5wcm90b3R5cGUuZ2V0Q2F0ZWdvcnlOYW1lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDQsIFwiXCIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNhdGVnb3J5fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeS5wcm90b3R5cGUuc2V0Q2F0ZWdvcnlOYW1lID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA0LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2F0ZWdvcnl9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNhdGVnb3J5LnByb3RvdHlwZS5jbGVhckNhdGVnb3J5TmFtZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDQsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeS5wcm90b3R5cGUuaGFzQ2F0ZWdvcnlOYW1lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNCkgIT0gbnVsbDtcbn07XG5cblxuZ29vZy5vYmplY3QuZXh0ZW5kKGV4cG9ydHMsIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8pO1xuIiwiLy8gc291cmNlOiBtZWRpYXBpcGUvdGFza3MvY2MvY29tcG9uZW50cy9jb250YWluZXJzL3Byb3RvL2NsYXNzaWZpY2F0aW9ucy5wcm90b1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKiBAZW5oYW5jZWFibGVcbiAqIEBzdXBwcmVzcyB7bWlzc2luZ1JlcXVpcmV9IHJlcG9ydHMgZXJyb3Igb24gaW1wbGljaXQgdHlwZSB1c2FnZXMuXG4gKiBAc3VwcHJlc3Mge21lc3NhZ2VDb252ZW50aW9uc30gSlMgQ29tcGlsZXIgcmVwb3J0cyBhbiBlcnJvciBpZiBhIHZhcmlhYmxlIG9yXG4gKiAgICAgZmllbGQgc3RhcnRzIHdpdGggJ01TR18nIGFuZCBpc24ndCBhIHRyYW5zbGF0YWJsZSBtZXNzYWdlLlxuICogQHB1YmxpY1xuICovXG4vLyBHRU5FUkFURUQgQ09ERSAtLSBETyBOT1QgRURJVCFcbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuXG52YXIganNwYiA9IHJlcXVpcmUoJ2dvb2dsZS1wcm90b2J1ZicpO1xudmFyIGdvb2cgPSBqc3BiO1xudmFyIGdsb2JhbCA9XG4gICAgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzKSB8fFxuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cpIHx8XG4gICAgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbCkgfHxcbiAgICAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYpIHx8XG4gICAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pLmNhbGwobnVsbCkgfHxcbiAgICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG52YXIgbWVkaWFwaXBlX2ZyYW1ld29ya19mb3JtYXRzX2NsYXNzaWZpY2F0aW9uX3BiID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vLi4vLi4vbWVkaWFwaXBlL2ZyYW1ld29yay9mb3JtYXRzL2NsYXNzaWZpY2F0aW9uX3BiLmpzJyk7XG5nb29nLm9iamVjdC5leHRlbmQocHJvdG8sIG1lZGlhcGlwZV9mcmFtZXdvcmtfZm9ybWF0c19jbGFzc2lmaWNhdGlvbl9wYik7XG52YXIgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvbXBvbmVudHNfY29udGFpbmVyc19wcm90b19jYXRlZ29yeV9wYiA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uLy4uLy4uL21lZGlhcGlwZS90YXNrcy9jYy9jb21wb25lbnRzL2NvbnRhaW5lcnMvcHJvdG8vY2F0ZWdvcnlfcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvbXBvbmVudHNfY29udGFpbmVyc19wcm90b19jYXRlZ29yeV9wYik7XG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbkVudHJ5JywgbnVsbCwgZ2xvYmFsKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uUmVzdWx0JywgbnVsbCwgZ2xvYmFsKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9ucycsIG51bGwsIGdsb2JhbCk7XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbkVudHJ5ID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uRW50cnkucmVwZWF0ZWRGaWVsZHNfLCBudWxsKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25FbnRyeSwganNwYi5NZXNzYWdlKTtcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25FbnRyeS5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uRW50cnknO1xufVxuLyoqXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxuICogdmFsaWQuXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25zID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9ucy5yZXBlYXRlZEZpZWxkc18sIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbnMsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9ucy5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9ucyc7XG59XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvblJlc3VsdCA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvblJlc3VsdC5yZXBlYXRlZEZpZWxkc18sIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvblJlc3VsdCwganNwYi5NZXNzYWdlKTtcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25SZXN1bHQuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvblJlc3VsdCc7XG59XG5cbi8qKlxuICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLlxuICogQHByaXZhdGUgeyFBcnJheTxudW1iZXI+fVxuICogQGNvbnN0XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25FbnRyeS5yZXBlYXRlZEZpZWxkc18gPSBbMV07XG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25FbnRyeS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uRW50cnkudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uRW50cnl9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25FbnRyeS50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgY2F0ZWdvcmllc0xpc3Q6IGpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldENhdGVnb3JpZXNMaXN0KCksXG4gICAgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvbXBvbmVudHNfY29udGFpbmVyc19wcm90b19jYXRlZ29yeV9wYi5DYXRlZ29yeS50b09iamVjdCwgaW5jbHVkZUluc3RhbmNlKSxcbiAgICB0aW1lc3RhbXBNczogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCAyKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGZcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25FbnRyeX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbkVudHJ5LmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbkVudHJ5O1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbkVudHJ5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25FbnRyeX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uRW50cnl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25FbnRyeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gbmV3IG1lZGlhcGlwZV90YXNrc19jY19jb21wb25lbnRzX2NvbnRhaW5lcnNfcHJvdG9fY2F0ZWdvcnlfcGIuQ2F0ZWdvcnk7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsbWVkaWFwaXBlX3Rhc2tzX2NjX2NvbXBvbmVudHNfY29udGFpbmVyc19wcm90b19jYXRlZ29yeV9wYi5DYXRlZ29yeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLmFkZENhdGVnb3JpZXModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDY0KCkpO1xuICAgICAgbXNnLnNldFRpbWVzdGFtcE1zKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbkVudHJ5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uRW50cnkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uRW50cnl9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbkVudHJ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gbWVzc2FnZS5nZXRDYXRlZ29yaWVzTGlzdCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKFxuICAgICAgMSxcbiAgICAgIGYsXG4gICAgICBtZWRpYXBpcGVfdGFza3NfY2NfY29tcG9uZW50c19jb250YWluZXJzX3Byb3RvX2NhdGVnb3J5X3BiLkNhdGVnb3J5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMikpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlSW50NjQoXG4gICAgICAyLFxuICAgICAgZlxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBDYXRlZ29yeSBjYXRlZ29yaWVzID0gMTtcbiAqIEByZXR1cm4geyFBcnJheTwhcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeT59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25FbnRyeS5wcm90b3R5cGUuZ2V0Q2F0ZWdvcmllc0xpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2F0ZWdvcnk+fSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIG1lZGlhcGlwZV90YXNrc19jY19jb21wb25lbnRzX2NvbnRhaW5lcnNfcHJvdG9fY2F0ZWdvcnlfcGIuQ2F0ZWdvcnksIDEpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTwhcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeT59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbkVudHJ5fSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uRW50cnkucHJvdG90eXBlLnNldENhdGVnb3JpZXNMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DYXRlZ29yeT19IG9wdF92YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNhdGVnb3J5fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uRW50cnkucHJvdG90eXBlLmFkZENhdGVnb3JpZXMgPSBmdW5jdGlvbihvcHRfdmFsdWUsIG9wdF9pbmRleCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgMSwgb3B0X3ZhbHVlLCBwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNhdGVnb3J5LCBvcHRfaW5kZXgpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25FbnRyeX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25FbnRyeS5wcm90b3R5cGUuY2xlYXJDYXRlZ29yaWVzTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRDYXRlZ29yaWVzTGlzdChbXSk7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgaW50NjQgdGltZXN0YW1wX21zID0gMjtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbkVudHJ5LnByb3RvdHlwZS5nZXRUaW1lc3RhbXBNcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCAwKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbkVudHJ5fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbkVudHJ5LnByb3RvdHlwZS5zZXRUaW1lc3RhbXBNcyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uRW50cnl9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uRW50cnkucHJvdG90eXBlLmNsZWFyVGltZXN0YW1wTXMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25FbnRyeS5wcm90b3R5cGUuaGFzVGltZXN0YW1wTXMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xufTtcblxuXG5cbi8qKlxuICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLlxuICogQHByaXZhdGUgeyFBcnJheTxudW1iZXI+fVxuICogQGNvbnN0XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25zLnJlcGVhdGVkRmllbGRzXyA9IFsxXTtcblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbnMucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbnMudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uc30gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbnMudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xuICB2YXIgZiwgb2JqID0ge1xuICAgIGVudHJpZXNMaXN0OiBqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRFbnRyaWVzTGlzdCgpLFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25FbnRyeS50b09iamVjdCwgaW5jbHVkZUluc3RhbmNlKSxcbiAgICBjbGFzc2lmaWNhdGlvbkxpc3Q6IChmID0gbXNnLmdldENsYXNzaWZpY2F0aW9uTGlzdCgpKSAmJiBtZWRpYXBpcGVfZnJhbWV3b3JrX2Zvcm1hdHNfY2xhc3NpZmljYXRpb25fcGIuQ2xhc3NpZmljYXRpb25MaXN0LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXG4gICAgaGVhZEluZGV4OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtc2csIDIpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICBoZWFkTmFtZTogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCAzKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGZcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25zO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbnN9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbkVudHJ5O1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25FbnRyeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLmFkZEVudHJpZXModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgdmFyIHZhbHVlID0gbmV3IG1lZGlhcGlwZV9mcmFtZXdvcmtfZm9ybWF0c19jbGFzc2lmaWNhdGlvbl9wYi5DbGFzc2lmaWNhdGlvbkxpc3Q7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsbWVkaWFwaXBlX2ZyYW1ld29ya19mb3JtYXRzX2NsYXNzaWZpY2F0aW9uX3BiLkNsYXNzaWZpY2F0aW9uTGlzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldENsYXNzaWZpY2F0aW9uTGlzdCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkSW50MzIoKSk7XG4gICAgICBtc2cuc2V0SGVhZEluZGV4KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuc2V0SGVhZE5hbWUodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9ucy5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbnMuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uc30gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IG1lc3NhZ2UuZ2V0RW50cmllc0xpc3QoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZShcbiAgICAgIDEsXG4gICAgICBmLFxuICAgICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbkVudHJ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRDbGFzc2lmaWNhdGlvbkxpc3QoKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXG4gICAgICA0LFxuICAgICAgZixcbiAgICAgIG1lZGlhcGlwZV9mcmFtZXdvcmtfZm9ybWF0c19jbGFzc2lmaWNhdGlvbl9wYi5DbGFzc2lmaWNhdGlvbkxpc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAyKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVJbnQzMihcbiAgICAgIDIsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMykpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxuICAgICAgMyxcbiAgICAgIGZcbiAgICApO1xuICB9XG59O1xuXG5cbi8qKlxuICogcmVwZWF0ZWQgQ2xhc3NpZmljYXRpb25FbnRyeSBlbnRyaWVzID0gMTtcbiAqIEByZXR1cm4geyFBcnJheTwhcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbkVudHJ5Pn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbnMucHJvdG90eXBlLmdldEVudHJpZXNMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7IUFycmF5PCFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uRW50cnk+fSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25FbnRyeSwgMSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uRW50cnk+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25zfSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9ucy5wcm90b3R5cGUuc2V0RW50cmllc0xpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uRW50cnk9fSBvcHRfdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbkVudHJ5fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9ucy5wcm90b3R5cGUuYWRkRW50cmllcyA9IGZ1bmN0aW9uKG9wdF92YWx1ZSwgb3B0X2luZGV4KSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCAxLCBvcHRfdmFsdWUsIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25FbnRyeSwgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25zLnByb3RvdHlwZS5jbGVhckVudHJpZXNMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldEVudHJpZXNMaXN0KFtdKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBtZWRpYXBpcGUuQ2xhc3NpZmljYXRpb25MaXN0IGNsYXNzaWZpY2F0aW9uX2xpc3QgPSA0O1xuICogQHJldHVybiB7P3Byb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25zLnByb3RvdHlwZS5nZXRDbGFzc2lmaWNhdGlvbkxpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLkNsYXNzaWZpY2F0aW9uTGlzdH0gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgbWVkaWFwaXBlX2ZyYW1ld29ya19mb3JtYXRzX2NsYXNzaWZpY2F0aW9uX3BiLkNsYXNzaWZpY2F0aW9uTGlzdCwgNCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P3Byb3RvLm1lZGlhcGlwZS5DbGFzc2lmaWNhdGlvbkxpc3R8dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25zfSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9ucy5wcm90b3R5cGUuc2V0Q2xhc3NpZmljYXRpb25MaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgNCwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbnMucHJvdG90eXBlLmNsZWFyQ2xhc3NpZmljYXRpb25MaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldENsYXNzaWZpY2F0aW9uTGlzdCh1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25zLnByb3RvdHlwZS5oYXNDbGFzc2lmaWNhdGlvbkxpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA0KSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGludDMyIGhlYWRfaW5kZXggPSAyO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9ucy5wcm90b3R5cGUuZ2V0SGVhZEluZGV4ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDIsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25zLnByb3RvdHlwZS5zZXRIZWFkSW5kZXggPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9ucy5wcm90b3R5cGUuY2xlYXJIZWFkSW5kZXggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25zLnByb3RvdHlwZS5oYXNIZWFkSW5kZXggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyBoZWFkX25hbWUgPSAzO1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9ucy5wcm90b3R5cGUuZ2V0SGVhZE5hbWUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMywgXCJcIikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbnMucHJvdG90eXBlLnNldEhlYWROYW1lID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbnMucHJvdG90eXBlLmNsZWFySGVhZE5hbWUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25zLnByb3RvdHlwZS5oYXNIZWFkTmFtZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDMpICE9IG51bGw7XG59O1xuXG5cblxuLyoqXG4gKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuXG4gKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59XG4gKiBAY29uc3RcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvblJlc3VsdC5yZXBlYXRlZEZpZWxkc18gPSBbMV07XG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25SZXN1bHQucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvblJlc3VsdC50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25SZXN1bHR9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25SZXN1bHQudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xuICB2YXIgZiwgb2JqID0ge1xuICAgIGNsYXNzaWZpY2F0aW9uc0xpc3Q6IGpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldENsYXNzaWZpY2F0aW9uc0xpc3QoKSxcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9ucy50b09iamVjdCwgaW5jbHVkZUluc3RhbmNlKSxcbiAgICB0aW1lc3RhbXBNczogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCAyKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGZcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25SZXN1bHR9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25SZXN1bHQuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uUmVzdWx0O1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvblJlc3VsdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uUmVzdWx0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25SZXN1bHR9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25SZXN1bHQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9ucztcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLmFkZENsYXNzaWZpY2F0aW9ucyh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkSW50NjQoKSk7XG4gICAgICBtc2cuc2V0VGltZXN0YW1wTXModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uUmVzdWx0LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uUmVzdWx0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvblJlc3VsdH0gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uUmVzdWx0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gbWVzc2FnZS5nZXRDbGFzc2lmaWNhdGlvbnNMaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoXG4gICAgICAxLFxuICAgICAgZixcbiAgICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMikpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlSW50NjQoXG4gICAgICAyLFxuICAgICAgZlxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBDbGFzc2lmaWNhdGlvbnMgY2xhc3NpZmljYXRpb25zID0gMTtcbiAqIEByZXR1cm4geyFBcnJheTwhcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbnM+fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uUmVzdWx0LnByb3RvdHlwZS5nZXRDbGFzc2lmaWNhdGlvbnNMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7IUFycmF5PCFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9ucz59ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbnMsIDEpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTwhcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbnM+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25SZXN1bHR9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25SZXN1bHQucHJvdG90eXBlLnNldENsYXNzaWZpY2F0aW9uc0xpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9ucz19IG9wdF92YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uc31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvblJlc3VsdC5wcm90b3R5cGUuYWRkQ2xhc3NpZmljYXRpb25zID0gZnVuY3Rpb24ob3B0X3ZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDEsIG9wdF92YWx1ZSwgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvbnMsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvblJlc3VsdH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25SZXN1bHQucHJvdG90eXBlLmNsZWFyQ2xhc3NpZmljYXRpb25zTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRDbGFzc2lmaWNhdGlvbnNMaXN0KFtdKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBpbnQ2NCB0aW1lc3RhbXBfbXMgPSAyO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uUmVzdWx0LnByb3RvdHlwZS5nZXRUaW1lc3RhbXBNcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCAwKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMuY29udGFpbmVycy5wcm90by5DbGFzc2lmaWNhdGlvblJlc3VsdH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25SZXN1bHQucHJvdG90eXBlLnNldFRpbWVzdGFtcE1zID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLmNvbnRhaW5lcnMucHJvdG8uQ2xhc3NpZmljYXRpb25SZXN1bHR9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uUmVzdWx0LnByb3RvdHlwZS5jbGVhclRpbWVzdGFtcE1zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMiwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvLkNsYXNzaWZpY2F0aW9uUmVzdWx0LnByb3RvdHlwZS5oYXNUaW1lc3RhbXBNcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XG59O1xuXG5cbmdvb2cub2JqZWN0LmV4dGVuZChleHBvcnRzLCBwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5jb250YWluZXJzLnByb3RvKTtcbiIsIi8vIHNvdXJjZTogbWVkaWFwaXBlL3Rhc2tzL2NjL2NvbXBvbmVudHMvcHJvY2Vzc29ycy9wcm90by9jbGFzc2lmaWVyX29wdGlvbnMucHJvdG9cbi8qKlxuICogQGZpbGVvdmVydmlld1xuICogQGVuaGFuY2VhYmxlXG4gKiBAc3VwcHJlc3Mge21pc3NpbmdSZXF1aXJlfSByZXBvcnRzIGVycm9yIG9uIGltcGxpY2l0IHR5cGUgdXNhZ2VzLlxuICogQHN1cHByZXNzIHttZXNzYWdlQ29udmVudGlvbnN9IEpTIENvbXBpbGVyIHJlcG9ydHMgYW4gZXJyb3IgaWYgYSB2YXJpYWJsZSBvclxuICogICAgIGZpZWxkIHN0YXJ0cyB3aXRoICdNU0dfJyBhbmQgaXNuJ3QgYSB0cmFuc2xhdGFibGUgbWVzc2FnZS5cbiAqIEBwdWJsaWNcbiAqL1xuLy8gR0VORVJBVEVEIENPREUgLS0gRE8gTk9UIEVESVQhXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcblxudmFyIGpzcGIgPSByZXF1aXJlKCdnb29nbGUtcHJvdG9idWYnKTtcbnZhciBnb29nID0ganNwYjtcbnZhciBnbG9iYWwgPVxuICAgICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93KSB8fFxuICAgICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwpIHx8XG4gICAgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmKSB8fFxuICAgIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KS5jYWxsKG51bGwpIHx8XG4gICAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnMnLCBudWxsLCBnbG9iYWwpO1xuLyoqXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxuICogdmFsaWQuXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnMgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnMucmVwZWF0ZWRGaWVsZHNfLCBudWxsKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnMsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zLmRpc3BsYXlOYW1lID0gJ3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnMnO1xufVxuXG4vKipcbiAqIExpc3Qgb2YgcmVwZWF0ZWQgZmllbGRzIHdpdGhpbiB0aGlzIG1lc3NhZ2UgdHlwZS5cbiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn1cbiAqIEBjb25zdFxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zLnJlcGVhdGVkRmllbGRzXyA9IFs0LDVdO1xuXG5cblxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnMudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBkaXNwbGF5TmFtZXNMb2NhbGU6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMSwgXCJlblwiKSxcbiAgICBtYXhSZXN1bHRzOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDIsIC0xKSxcbiAgICBzY29yZVRocmVzaG9sZDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQobXNnLCAzKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgY2F0ZWdvcnlBbGxvd2xpc3RMaXN0OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKG1zZywgNCkpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIGNhdGVnb3J5RGVueWxpc3RMaXN0OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKG1zZywgNSkpID09IG51bGwgPyB1bmRlZmluZWQgOiBmXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMucHJvY2Vzc29ycy5wcm90by5DbGFzc2lmaWVyT3B0aW9ucztcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMucHJvY2Vzc29ycy5wcm90by5DbGFzc2lmaWVyT3B0aW9uc30gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xuICAgICAgbXNnLnNldERpc3BsYXlOYW1lc0xvY2FsZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkSW50MzIoKSk7XG4gICAgICBtc2cuc2V0TWF4UmVzdWx0cyh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkRmxvYXQoKSk7XG4gICAgICBtc2cuc2V0U2NvcmVUaHJlc2hvbGQodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5hZGRDYXRlZ29yeUFsbG93bGlzdCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xuICAgICAgbXNnLmFkZENhdGVnb3J5RGVueWxpc3QodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMucHJvY2Vzc29ycy5wcm90by5DbGFzc2lmaWVyT3B0aW9uc30gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMSkpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxuICAgICAgMSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAyKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVJbnQzMihcbiAgICAgIDIsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMykpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlRmxvYXQoXG4gICAgICAzLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0Q2F0ZWdvcnlBbGxvd2xpc3RMaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZFN0cmluZyhcbiAgICAgIDQsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRDYXRlZ29yeURlbnlsaXN0TGlzdCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRTdHJpbmcoXG4gICAgICA1LFxuICAgICAgZlxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBzdHJpbmcgZGlzcGxheV9uYW1lc19sb2NhbGUgPSAxO1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zLnByb3RvdHlwZS5nZXREaXNwbGF5TmFtZXNMb2NhbGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMSwgXCJlblwiKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMucHJvY2Vzc29ycy5wcm90by5DbGFzc2lmaWVyT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnMucHJvdG90eXBlLnNldERpc3BsYXlOYW1lc0xvY2FsZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMucHJvY2Vzc29ycy5wcm90by5DbGFzc2lmaWVyT3B0aW9ucy5wcm90b3R5cGUuY2xlYXJEaXNwbGF5TmFtZXNMb2NhbGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnMucHJvdG90eXBlLmhhc0Rpc3BsYXlOYW1lc0xvY2FsZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgaW50MzIgbWF4X3Jlc3VsdHMgPSAyO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zLnByb3RvdHlwZS5nZXRNYXhSZXN1bHRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDIsIC0xKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMucHJvY2Vzc29ycy5wcm90by5DbGFzc2lmaWVyT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnMucHJvdG90eXBlLnNldE1heFJlc3VsdHMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMucHJvY2Vzc29ycy5wcm90by5DbGFzc2lmaWVyT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnMucHJvdG90eXBlLmNsZWFyTWF4UmVzdWx0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMucHJvY2Vzc29ycy5wcm90by5DbGFzc2lmaWVyT3B0aW9ucy5wcm90b3R5cGUuaGFzTWF4UmVzdWx0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgZmxvYXQgc2NvcmVfdGhyZXNob2xkID0gMztcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMucHJvY2Vzc29ycy5wcm90by5DbGFzc2lmaWVyT3B0aW9ucy5wcm90b3R5cGUuZ2V0U2NvcmVUaHJlc2hvbGQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDMsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zLnByb3RvdHlwZS5zZXRTY29yZVRocmVzaG9sZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMucHJvY2Vzc29ycy5wcm90by5DbGFzc2lmaWVyT3B0aW9ucy5wcm90b3R5cGUuY2xlYXJTY29yZVRocmVzaG9sZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDMsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMucHJvY2Vzc29ycy5wcm90by5DbGFzc2lmaWVyT3B0aW9ucy5wcm90b3R5cGUuaGFzU2NvcmVUaHJlc2hvbGQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAzKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIHN0cmluZyBjYXRlZ29yeV9hbGxvd2xpc3QgPSA0O1xuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnMucHJvdG90eXBlLmdldENhdGVnb3J5QWxsb3dsaXN0TGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHshQXJyYXk8c3RyaW5nPn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKHRoaXMsIDQpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zLnByb3RvdHlwZS5zZXRDYXRlZ29yeUFsbG93bGlzdExpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDQsIHZhbHVlIHx8IFtdKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMucHJvY2Vzc29ycy5wcm90by5DbGFzc2lmaWVyT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnMucHJvdG90eXBlLmFkZENhdGVnb3J5QWxsb3dsaXN0ID0gZnVuY3Rpb24odmFsdWUsIG9wdF9pbmRleCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRGaWVsZCh0aGlzLCA0LCB2YWx1ZSwgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMucHJvY2Vzc29ycy5wcm90by5DbGFzc2lmaWVyT3B0aW9ucy5wcm90b3R5cGUuY2xlYXJDYXRlZ29yeUFsbG93bGlzdExpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0Q2F0ZWdvcnlBbGxvd2xpc3RMaXN0KFtdKTtcbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBzdHJpbmcgY2F0ZWdvcnlfZGVueWxpc3QgPSA1O1xuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnMucHJvdG90eXBlLmdldENhdGVnb3J5RGVueWxpc3RMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUgeyFBcnJheTxzdHJpbmc+fSAqLyAoanNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodGhpcywgNSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMucHJvY2Vzc29ycy5wcm90by5DbGFzc2lmaWVyT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnMucHJvdG90eXBlLnNldENhdGVnb3J5RGVueWxpc3RMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA1LCB2YWx1ZSB8fCBbXSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zLnByb3RvdHlwZS5hZGRDYXRlZ29yeURlbnlsaXN0ID0gZnVuY3Rpb24odmFsdWUsIG9wdF9pbmRleCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRGaWVsZCh0aGlzLCA1LCB2YWx1ZSwgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMucHJvY2Vzc29ycy5wcm90by5DbGFzc2lmaWVyT3B0aW9ucy5wcm90b3R5cGUuY2xlYXJDYXRlZ29yeURlbnlsaXN0TGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRDYXRlZ29yeURlbnlsaXN0TGlzdChbXSk7XG59O1xuXG5cbmdvb2cub2JqZWN0LmV4dGVuZChleHBvcnRzLCBwcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvKTtcbiIsIi8vIHNvdXJjZTogbWVkaWFwaXBlL2NhbGN1bGF0b3JzL3RlbnNvci9pbmZlcmVuY2VfY2FsY3VsYXRvci5wcm90b1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKiBAZW5oYW5jZWFibGVcbiAqIEBzdXBwcmVzcyB7bWlzc2luZ1JlcXVpcmV9IHJlcG9ydHMgZXJyb3Igb24gaW1wbGljaXQgdHlwZSB1c2FnZXMuXG4gKiBAc3VwcHJlc3Mge21lc3NhZ2VDb252ZW50aW9uc30gSlMgQ29tcGlsZXIgcmVwb3J0cyBhbiBlcnJvciBpZiBhIHZhcmlhYmxlIG9yXG4gKiAgICAgZmllbGQgc3RhcnRzIHdpdGggJ01TR18nIGFuZCBpc24ndCBhIHRyYW5zbGF0YWJsZSBtZXNzYWdlLlxuICogQHB1YmxpY1xuICovXG4vLyBHRU5FUkFURUQgQ09ERSAtLSBETyBOT1QgRURJVCFcbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuXG52YXIganNwYiA9IHJlcXVpcmUoJ2dvb2dsZS1wcm90b2J1ZicpO1xudmFyIGdvb2cgPSBqc3BiO1xudmFyIGdsb2JhbCA9XG4gICAgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzKSB8fFxuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cpIHx8XG4gICAgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbCkgfHxcbiAgICAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYpIHx8XG4gICAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pLmNhbGwobnVsbCkgfHxcbiAgICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG52YXIgbWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX3BiID0gcmVxdWlyZSgnLi4vLi4vLi4vbWVkaWFwaXBlL2ZyYW1ld29yay9jYWxjdWxhdG9yX3BiLmpzJyk7XG5nb29nLm9iamVjdC5leHRlbmQocHJvdG8sIG1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9wYik7XG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zJywgbnVsbCwgZ2xvYmFsKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUnLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5EZWxlZ2F0ZUNhc2UnLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUnLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUuQXBpJywgbnVsbCwgZ2xvYmFsKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1LkluZmVyZW5jZVVzYWdlJywgbnVsbCwgZ2xvYmFsKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuTm5hcGknLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5UZkxpdGUnLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5Ybm5wYWNrJywgbnVsbCwgZ2xvYmFsKTtcbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLmRpc3BsYXlOYW1lID0gJ3Byb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucyc7XG59XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUub25lb2ZHcm91cHNfKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZSwganNwYi5NZXNzYWdlKTtcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUnO1xufVxuLyoqXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxuICogdmFsaWQuXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5UZkxpdGUgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlRmTGl0ZSwganNwYi5NZXNzYWdlKTtcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5UZkxpdGUuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlRmTGl0ZSc7XG59XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdSA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1LCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1Jztcbn1cbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuTm5hcGkgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLk5uYXBpLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLk5uYXBpLmRpc3BsYXlOYW1lID0gJ3Byb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5ObmFwaSc7XG59XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlhubnBhY2sgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlhubnBhY2ssIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuWG5ucGFjay5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuWG5ucGFjayc7XG59XG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnN9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgbW9kZWxQYXRoOiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtc2csIDEpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICB1c2VHcHU6IGpzcGIuTWVzc2FnZS5nZXRCb29sZWFuRmllbGRXaXRoRGVmYXVsdChtc2csIDIsIGZhbHNlKSxcbiAgICB1c2VObmFwaToganNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KG1zZywgMywgZmFsc2UpLFxuICAgIGNwdU51bVRocmVhZDoganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCA0LCAtMSksXG4gICAgZGVsZWdhdGU6IChmID0gbXNnLmdldERlbGVnYXRlKCkpICYmIHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucztcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnN9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuc2V0TW9kZWxQYXRoKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gKHJlYWRlci5yZWFkQm9vbCgpKTtcbiAgICAgIG1zZy5zZXRVc2VHcHUodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtib29sZWFufSAqLyAocmVhZGVyLnJlYWRCb29sKCkpO1xuICAgICAgbXNnLnNldFVzZU5uYXBpKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQzMigpKTtcbiAgICAgIG1zZy5zZXRDcHVOdW1UaHJlYWQodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA1OlxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZTtcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5zZXREZWxlZ2F0ZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zfSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDEpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZVN0cmluZyhcbiAgICAgIDEsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtib29sZWFufSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDIpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUJvb2woXG4gICAgICAyLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAzKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVCb29sKFxuICAgICAgMyxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCA0KSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVJbnQzMihcbiAgICAgIDQsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXREZWxlZ2F0ZSgpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDUsXG4gICAgICBmLFxuICAgICAgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxufTtcblxuXG5cbi8qKlxuICogT25lb2YgZ3JvdXAgZGVmaW5pdGlvbnMgZm9yIHRoaXMgbWVzc2FnZS4gRWFjaCBncm91cCBkZWZpbmVzIHRoZSBmaWVsZFxuICogbnVtYmVycyBiZWxvbmdpbmcgdG8gdGhhdCBncm91cC4gV2hlbiBvZiB0aGVzZSBmaWVsZHMnIHZhbHVlIGlzIHNldCwgYWxsXG4gKiBvdGhlciBmaWVsZHMgaW4gdGhlIGdyb3VwIGFyZSBjbGVhcmVkLiBEdXJpbmcgZGVzZXJpYWxpemF0aW9uLCBpZiBtdWx0aXBsZVxuICogZmllbGRzIGFyZSBlbmNvdW50ZXJlZCBmb3IgYSBncm91cCwgb25seSB0aGUgbGFzdCB2YWx1ZSBzZWVuIHdpbGwgYmUga2VwdC5cbiAqIEBwcml2YXRlIHshQXJyYXk8IUFycmF5PG51bWJlcj4+fVxuICogQGNvbnN0XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5vbmVvZkdyb3Vwc18gPSBbWzEsMiwzLDRdXTtcblxuLyoqXG4gKiBAZW51bSB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuRGVsZWdhdGVDYXNlID0ge1xuICBERUxFR0FURV9OT1RfU0VUOiAwLFxuICBURkxJVEU6IDEsXG4gIEdQVTogMixcbiAgTk5BUEk6IDMsXG4gIFhOTlBBQ0s6IDRcbn07XG5cbi8qKlxuICogQHJldHVybiB7cHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkRlbGVnYXRlQ2FzZX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLnByb3RvdHlwZS5nZXREZWxlZ2F0ZUNhc2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7cHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkRlbGVnYXRlQ2FzZX0gKi8oanNwYi5NZXNzYWdlLmNvbXB1dGVPbmVvZkNhc2UodGhpcywgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLm9uZW9mR3JvdXBzX1swXSkpO1xufTtcblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICB0ZmxpdGU6IChmID0gbXNnLmdldFRmbGl0ZSgpKSAmJiBwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuVGZMaXRlLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXG4gICAgZ3B1OiAoZiA9IG1zZy5nZXRHcHUoKSkgJiYgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxuICAgIG5uYXBpOiAoZiA9IG1zZy5nZXRObmFwaSgpKSAmJiBwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuTm5hcGkudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcbiAgICB4bm5wYWNrOiAoZiA9IG1zZy5nZXRYbm5wYWNrKCkpICYmIHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5Ybm5wYWNrLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZilcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGV9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5UZkxpdGU7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlRmTGl0ZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldFRmbGl0ZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdTtcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XG4gICAgICBtc2cuc2V0R3B1KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuTm5hcGk7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLk5uYXBpLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XG4gICAgICBtc2cuc2V0Tm5hcGkodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5Ybm5wYWNrO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5Ybm5wYWNrLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XG4gICAgICBtc2cuc2V0WG5ucGFjayh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlfSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IG1lc3NhZ2UuZ2V0VGZsaXRlKCk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxuICAgICAgMSxcbiAgICAgIGYsXG4gICAgICBwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuVGZMaXRlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRHcHUoKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXG4gICAgICAyLFxuICAgICAgZixcbiAgICAgIHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldE5uYXBpKCk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxuICAgICAgMyxcbiAgICAgIGYsXG4gICAgICBwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuTm5hcGkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldFhubnBhY2soKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXG4gICAgICA0LFxuICAgICAgZixcbiAgICAgIHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5Ybm5wYWNrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxufTtcblxuXG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5UZkxpdGUucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlRmTGl0ZS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5UZkxpdGV9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5UZkxpdGUudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xuICB2YXIgZiwgb2JqID0ge1xuXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuVGZMaXRlfVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuVGZMaXRlLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlRmTGl0ZTtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5UZkxpdGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlRmTGl0ZX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuVGZMaXRlfVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuVGZMaXRlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5UZkxpdGUucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5UZkxpdGUuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuVGZMaXRlfSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5UZkxpdGUuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG59O1xuXG5cblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgdXNlQWR2YW5jZWRHcHVBcGk6IGpzcGIuTWVzc2FnZS5nZXRCb29sZWFuRmllbGRXaXRoRGVmYXVsdChtc2csIDEsIGZhbHNlKSxcbiAgICBhcGk6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgNCwgMCksXG4gICAgYWxsb3dQcmVjaXNpb25Mb3NzOiBqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQobXNnLCAzLCB0cnVlKSxcbiAgICBjYWNoZWRLZXJuZWxQYXRoOiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtc2csIDIpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICBzZXJpYWxpemVkTW9kZWxEaXI6IChmID0ganNwYi5NZXNzYWdlLmdldEZpZWxkKG1zZywgNykpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIG1vZGVsVG9rZW46IChmID0ganNwYi5NZXNzYWdlLmdldEZpZWxkKG1zZywgOCkpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIHVzYWdlOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDUsIDIpXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1fVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1LmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdTtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1fVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge2Jvb2xlYW59ICovIChyZWFkZXIucmVhZEJvb2woKSk7XG4gICAgICBtc2cuc2V0VXNlQWR2YW5jZWRHcHVBcGkodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5BcGl9ICovIChyZWFkZXIucmVhZEVudW0oKSk7XG4gICAgICBtc2cuc2V0QXBpKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gKHJlYWRlci5yZWFkQm9vbCgpKTtcbiAgICAgIG1zZy5zZXRBbGxvd1ByZWNpc2lvbkxvc3ModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5zZXRDYWNoZWRLZXJuZWxQYXRoKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNzpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuc2V0U2VyaWFsaXplZE1vZGVsRGlyKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgODpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuc2V0TW9kZWxUb2tlbih2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUgeyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1LkluZmVyZW5jZVVzYWdlfSAqLyAocmVhZGVyLnJlYWRFbnVtKCkpO1xuICAgICAgbXNnLnNldFVzYWdlKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHV9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAxKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVCb29sKFxuICAgICAgMSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUgeyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1LkFwaX0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCA0KSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVFbnVtKFxuICAgICAgNCxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge2Jvb2xlYW59ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMykpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlQm9vbChcbiAgICAgIDMsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMikpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxuICAgICAgMixcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCA3KSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXG4gICAgICA3LFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDgpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZVN0cmluZyhcbiAgICAgIDgsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5JbmZlcmVuY2VVc2FnZX0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCA1KSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVFbnVtKFxuICAgICAgNSxcbiAgICAgIGZcbiAgICApO1xuICB9XG59O1xuXG5cbi8qKlxuICogQGVudW0ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5BcGkgPSB7XG4gIEFOWTogMCxcbiAgT1BFTkdMOiAxLFxuICBPUEVOQ0w6IDJcbn07XG5cbi8qKlxuICogQGVudW0ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5JbmZlcmVuY2VVc2FnZSA9IHtcbiAgVU5TUEVDSUZJRUQ6IDAsXG4gIEZBU1RfU0lOR0xFX0FOU1dFUjogMSxcbiAgU1VTVEFJTkVEX1NQRUVEOiAyXG59O1xuXG4vKipcbiAqIG9wdGlvbmFsIGJvb2wgdXNlX2FkdmFuY2VkX2dwdV9hcGkgPSAxO1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5wcm90b3R5cGUuZ2V0VXNlQWR2YW5jZWRHcHVBcGkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRCb29sZWFuRmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxLCBmYWxzZSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5wcm90b3R5cGUuc2V0VXNlQWR2YW5jZWRHcHVBcGkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUucHJvdG90eXBlLmNsZWFyVXNlQWR2YW5jZWRHcHVBcGkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUucHJvdG90eXBlLmhhc1VzZUFkdmFuY2VkR3B1QXBpID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBBcGkgYXBpID0gNDtcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1LkFwaX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5wcm90b3R5cGUuZ2V0QXBpID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUgeyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1LkFwaX0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDQsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1LkFwaX0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5wcm90b3R5cGUuc2V0QXBpID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA0LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1LnByb3RvdHlwZS5jbGVhckFwaSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDQsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5wcm90b3R5cGUuaGFzQXBpID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNCkgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBib29sIGFsbG93X3ByZWNpc2lvbl9sb3NzID0gMztcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUucHJvdG90eXBlLmdldEFsbG93UHJlY2lzaW9uTG9zcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtib29sZWFufSAqLyAoanNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDMsIHRydWUpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUucHJvdG90eXBlLnNldEFsbG93UHJlY2lzaW9uTG9zcyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5wcm90b3R5cGUuY2xlYXJBbGxvd1ByZWNpc2lvbkxvc3MgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUucHJvdG90eXBlLmhhc0FsbG93UHJlY2lzaW9uTG9zcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDMpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgc3RyaW5nIGNhY2hlZF9rZXJuZWxfcGF0aCA9IDI7XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUucHJvdG90eXBlLmdldENhY2hlZEtlcm5lbFBhdGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMiwgXCJcIikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1LnByb3RvdHlwZS5zZXRDYWNoZWRLZXJuZWxQYXRoID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1LnByb3RvdHlwZS5jbGVhckNhY2hlZEtlcm5lbFBhdGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUucHJvdG90eXBlLmhhc0NhY2hlZEtlcm5lbFBhdGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyBzZXJpYWxpemVkX21vZGVsX2RpciA9IDc7XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUucHJvdG90eXBlLmdldFNlcmlhbGl6ZWRNb2RlbERpciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCA3LCBcIlwiKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUucHJvdG90eXBlLnNldFNlcmlhbGl6ZWRNb2RlbERpciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgNywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5wcm90b3R5cGUuY2xlYXJTZXJpYWxpemVkTW9kZWxEaXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA3LCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUucHJvdG90eXBlLmhhc1NlcmlhbGl6ZWRNb2RlbERpciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDcpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgc3RyaW5nIG1vZGVsX3Rva2VuID0gODtcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5wcm90b3R5cGUuZ2V0TW9kZWxUb2tlbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCA4LCBcIlwiKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUucHJvdG90eXBlLnNldE1vZGVsVG9rZW4gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDgsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUucHJvdG90eXBlLmNsZWFyTW9kZWxUb2tlbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDgsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5wcm90b3R5cGUuaGFzTW9kZWxUb2tlbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDgpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgSW5mZXJlbmNlVXNhZ2UgdXNhZ2UgPSA1O1xuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUuSW5mZXJlbmNlVXNhZ2V9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUucHJvdG90eXBlLmdldFVzYWdlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUgeyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1LkluZmVyZW5jZVVzYWdlfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgNSwgMikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUuSW5mZXJlbmNlVXNhZ2V9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUucHJvdG90eXBlLnNldFVzYWdlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA1LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1LnByb3RvdHlwZS5jbGVhclVzYWdlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgNSwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1LnByb3RvdHlwZS5oYXNVc2FnZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDUpICE9IG51bGw7XG59O1xuXG5cblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLk5uYXBpLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5ObmFwaS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5ObmFwaX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLk5uYXBpLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBjYWNoZURpcjogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCAxKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgbW9kZWxUb2tlbjogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCAyKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgYWNjZWxlcmF0b3JOYW1lOiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtc2csIDMpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZlxuICB9O1xuXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG59XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLk5uYXBpfVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuTm5hcGkuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuTm5hcGk7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuTm5hcGkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLk5uYXBpfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5ObmFwaX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLk5uYXBpLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xuICAgICAgbXNnLnNldENhY2hlRGlyKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuc2V0TW9kZWxUb2tlbih2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xuICAgICAgbXNnLnNldEFjY2VsZXJhdG9yTmFtZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5ObmFwaS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLk5uYXBpLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLk5uYXBpfSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5ObmFwaS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDEpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZVN0cmluZyhcbiAgICAgIDEsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMikpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxuICAgICAgMixcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAzKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXG4gICAgICAzLFxuICAgICAgZlxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBzdHJpbmcgY2FjaGVfZGlyID0gMTtcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLk5uYXBpLnByb3RvdHlwZS5nZXRDYWNoZURpciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxLCBcIlwiKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLk5uYXBpfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLk5uYXBpLnByb3RvdHlwZS5zZXRDYWNoZURpciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuTm5hcGl9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuTm5hcGkucHJvdG90eXBlLmNsZWFyQ2FjaGVEaXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5ObmFwaS5wcm90b3R5cGUuaGFzQ2FjaGVEaXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyBtb2RlbF90b2tlbiA9IDI7XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5ObmFwaS5wcm90b3R5cGUuZ2V0TW9kZWxUb2tlbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCBcIlwiKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLk5uYXBpfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLk5uYXBpLnByb3RvdHlwZS5zZXRNb2RlbFRva2VuID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5ObmFwaX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5ObmFwaS5wcm90b3R5cGUuY2xlYXJNb2RlbFRva2VuID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMiwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuTm5hcGkucHJvdG90eXBlLmhhc01vZGVsVG9rZW4gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyBhY2NlbGVyYXRvcl9uYW1lID0gMztcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLk5uYXBpLnByb3RvdHlwZS5nZXRBY2NlbGVyYXRvck5hbWUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMywgXCJcIikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5ObmFwaX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5ObmFwaS5wcm90b3R5cGUuc2V0QWNjZWxlcmF0b3JOYW1lID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5ObmFwaX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5ObmFwaS5wcm90b3R5cGUuY2xlYXJBY2NlbGVyYXRvck5hbWUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5ObmFwaS5wcm90b3R5cGUuaGFzQWNjZWxlcmF0b3JOYW1lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMykgIT0gbnVsbDtcbn07XG5cblxuXG5cblxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuWG5ucGFjay5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuWG5ucGFjay50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5Ybm5wYWNrfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuWG5ucGFjay50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgbnVtVGhyZWFkczoganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAxLCAtMSlcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5Ybm5wYWNrfVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuWG5ucGFjay5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5Ybm5wYWNrO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlhubnBhY2suZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlhubnBhY2t9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlhubnBhY2t9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5Ybm5wYWNrLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkSW50MzIoKSk7XG4gICAgICBtc2cuc2V0TnVtVGhyZWFkcyh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5Ybm5wYWNrLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuWG5ucGFjay5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5Ybm5wYWNrfSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5Ybm5wYWNrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMSkpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlSW50MzIoXG4gICAgICAxLFxuICAgICAgZlxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBpbnQzMiBudW1fdGhyZWFkcyA9IDE7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5Ybm5wYWNrLnByb3RvdHlwZS5nZXROdW1UaHJlYWRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIC0xKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlhubnBhY2t9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuWG5ucGFjay5wcm90b3R5cGUuc2V0TnVtVGhyZWFkcyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuWG5ucGFja30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5Ybm5wYWNrLnByb3RvdHlwZS5jbGVhck51bVRocmVhZHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5Ybm5wYWNrLnByb3RvdHlwZS5oYXNOdW1UaHJlYWRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBUZkxpdGUgdGZsaXRlID0gMTtcbiAqIEByZXR1cm4gez9wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuVGZMaXRlfVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUucHJvdG90eXBlLmdldFRmbGl0ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuVGZMaXRlfSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuVGZMaXRlLCAxKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHs/cHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlRmTGl0ZXx1bmRlZmluZWR9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlfSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUucHJvdG90eXBlLnNldFRmbGl0ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0T25lb2ZXcmFwcGVyRmllbGQodGhpcywgMSwgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLm9uZW9mR3JvdXBzX1swXSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5wcm90b3R5cGUuY2xlYXJUZmxpdGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0VGZsaXRlKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLnByb3RvdHlwZS5oYXNUZmxpdGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIEdwdSBncHUgPSAyO1xuICogQHJldHVybiB7P3Byb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHV9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5wcm90b3R5cGUuZ2V0R3B1ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHV9ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUsIDIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1fHVuZGVmaW5lZH0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGV9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5wcm90b3R5cGUuc2V0R3B1ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRPbmVvZldyYXBwZXJGaWVsZCh0aGlzLCAyLCBwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUub25lb2ZHcm91cHNfWzBdLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLnByb3RvdHlwZS5jbGVhckdwdSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRHcHUodW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUucHJvdG90eXBlLmhhc0dwdSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgTm5hcGkgbm5hcGkgPSAzO1xuICogQHJldHVybiB7P3Byb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5ObmFwaX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLnByb3RvdHlwZS5nZXRObmFwaSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuTm5hcGl9ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5ObmFwaSwgMykpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P3Byb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5ObmFwaXx1bmRlZmluZWR9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlfSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUucHJvdG90eXBlLnNldE5uYXBpID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRPbmVvZldyYXBwZXJGaWVsZCh0aGlzLCAzLCBwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUub25lb2ZHcm91cHNfWzBdLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLnByb3RvdHlwZS5jbGVhck5uYXBpID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldE5uYXBpKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLnByb3RvdHlwZS5oYXNObmFwaSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDMpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgWG5ucGFjayB4bm5wYWNrID0gNDtcbiAqIEByZXR1cm4gez9wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuWG5ucGFja31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLnByb3RvdHlwZS5nZXRYbm5wYWNrID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5Ybm5wYWNrfSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuWG5ucGFjaywgNCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P3Byb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5Ybm5wYWNrfHVuZGVmaW5lZH0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGV9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5wcm90b3R5cGUuc2V0WG5ucGFjayA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0T25lb2ZXcmFwcGVyRmllbGQodGhpcywgNCwgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLm9uZW9mR3JvdXBzX1swXSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5wcm90b3R5cGUuY2xlYXJYbm5wYWNrID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldFhubnBhY2sodW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUucHJvdG90eXBlLmhhc1hubnBhY2sgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA0KSAhPSBudWxsO1xufTtcblxuXG5cbi8qKlxuICogQSB0dXBsZSBvZiB7ZmllbGQgbnVtYmVyLCBjbGFzcyBjb25zdHJ1Y3Rvcn0gZm9yIHRoZSBleHRlbnNpb25cbiAqIGZpZWxkIG5hbWVkIGBleHRgLlxuICogQHR5cGUgeyFqc3BiLkV4dGVuc2lvbkZpZWxkSW5mbzwhcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLmV4dCA9IG5ldyBqc3BiLkV4dGVuc2lvbkZpZWxkSW5mbyhcbiAgICAzMzY3ODM4NjMsXG4gICAge2V4dDogMH0sXG4gICAgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLFxuICAgICAvKiogQHR5cGUgez9mdW5jdGlvbigoYm9vbGVhbnx1bmRlZmluZWQpLCFqc3BiLk1lc3NhZ2U9KTogIU9iamVjdH0gKi8gKFxuICAgICAgICAgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLnRvT2JqZWN0KSxcbiAgICAwKTtcblxubWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX29wdGlvbnNfcGIuQ2FsY3VsYXRvck9wdGlvbnMuZXh0ZW5zaW9uc0JpbmFyeVszMzY3ODM4NjNdID0gbmV3IGpzcGIuRXh0ZW5zaW9uRmllbGRCaW5hcnlJbmZvKFxuICAgIHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5leHQsXG4gICAganNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRNZXNzYWdlLFxuICAgIGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZU1lc3NhZ2UsXG4gICAgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyLFxuICAgIHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIsXG4gICAgZmFsc2UpO1xuLy8gVGhpcyByZWdpc3RlcnMgdGhlIGV4dGVuc2lvbiBmaWVsZCB3aXRoIHRoZSBleHRlbmRlZCBjbGFzcywgc28gdGhhdFxuLy8gdG9PYmplY3QoKSB3aWxsIGZ1bmN0aW9uIGNvcnJlY3RseS5cbm1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9vcHRpb25zX3BiLkNhbGN1bGF0b3JPcHRpb25zLmV4dGVuc2lvbnNbMzM2NzgzODYzXSA9IHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5leHQ7XG5cbi8qKlxuICogb3B0aW9uYWwgc3RyaW5nIG1vZGVsX3BhdGggPSAxO1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMucHJvdG90eXBlLmdldE1vZGVsUGF0aCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxLCBcIlwiKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLnByb3RvdHlwZS5zZXRNb2RlbFBhdGggPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLnByb3RvdHlwZS5jbGVhck1vZGVsUGF0aCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLnByb3RvdHlwZS5oYXNNb2RlbFBhdGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGJvb2wgdXNlX2dwdSA9IDI7XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMucHJvdG90eXBlLmdldFVzZUdwdSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtib29sZWFufSAqLyAoanNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDIsIGZhbHNlKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5wcm90b3R5cGUuc2V0VXNlR3B1ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5wcm90b3R5cGUuY2xlYXJVc2VHcHUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5wcm90b3R5cGUuaGFzVXNlR3B1ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBib29sIHVzZV9ubmFwaSA9IDM7XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMucHJvdG90eXBlLmdldFVzZU5uYXBpID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge2Jvb2xlYW59ICovIChqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQodGhpcywgMywgZmFsc2UpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLnByb3RvdHlwZS5zZXRVc2VObmFwaSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMucHJvdG90eXBlLmNsZWFyVXNlTm5hcGkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5wcm90b3R5cGUuaGFzVXNlTm5hcGkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAzKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGludDMyIGNwdV9udW1fdGhyZWFkID0gNDtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLnByb3RvdHlwZS5nZXRDcHVOdW1UaHJlYWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgNCwgLTEpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMucHJvdG90eXBlLnNldENwdU51bVRocmVhZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgNCwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMucHJvdG90eXBlLmNsZWFyQ3B1TnVtVGhyZWFkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgNCwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMucHJvdG90eXBlLmhhc0NwdU51bVRocmVhZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDQpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgRGVsZWdhdGUgZGVsZWdhdGUgPSA1O1xuICogQHJldHVybiB7P3Byb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLnByb3RvdHlwZS5nZXREZWxlZ2F0ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGV9ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZSwgNSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P3Byb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZXx1bmRlZmluZWR9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zfSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMucHJvdG90eXBlLnNldERlbGVnYXRlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgNSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5wcm90b3R5cGUuY2xlYXJEZWxlZ2F0ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXREZWxlZ2F0ZSh1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5wcm90b3R5cGUuaGFzRGVsZWdhdGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA1KSAhPSBudWxsO1xufTtcblxuXG5cbi8qKlxuICogQSB0dXBsZSBvZiB7ZmllbGQgbnVtYmVyLCBjbGFzcyBjb25zdHJ1Y3Rvcn0gZm9yIHRoZSBleHRlbnNpb25cbiAqIGZpZWxkIG5hbWVkIGBleHRgLlxuICogQHR5cGUgeyFqc3BiLkV4dGVuc2lvbkZpZWxkSW5mbzwhcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLmV4dCA9IG5ldyBqc3BiLkV4dGVuc2lvbkZpZWxkSW5mbyhcbiAgICAzMzY3ODM4NjMsXG4gICAge2V4dDogMH0sXG4gICAgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLFxuICAgICAvKiogQHR5cGUgez9mdW5jdGlvbigoYm9vbGVhbnx1bmRlZmluZWQpLCFqc3BiLk1lc3NhZ2U9KTogIU9iamVjdH0gKi8gKFxuICAgICAgICAgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLnRvT2JqZWN0KSxcbiAgICAwKTtcblxubWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX29wdGlvbnNfcGIuQ2FsY3VsYXRvck9wdGlvbnMuZXh0ZW5zaW9uc0JpbmFyeVszMzY3ODM4NjNdID0gbmV3IGpzcGIuRXh0ZW5zaW9uRmllbGRCaW5hcnlJbmZvKFxuICAgIHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5leHQsXG4gICAganNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRNZXNzYWdlLFxuICAgIGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZU1lc3NhZ2UsXG4gICAgcHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyLFxuICAgIHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIsXG4gICAgZmFsc2UpO1xuLy8gVGhpcyByZWdpc3RlcnMgdGhlIGV4dGVuc2lvbiBmaWVsZCB3aXRoIHRoZSBleHRlbmRlZCBjbGFzcywgc28gdGhhdFxuLy8gdG9PYmplY3QoKSB3aWxsIGZ1bmN0aW9uIGNvcnJlY3RseS5cbm1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9vcHRpb25zX3BiLkNhbGN1bGF0b3JPcHRpb25zLmV4dGVuc2lvbnNbMzM2NzgzODYzXSA9IHByb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5leHQ7XG5cbmdvb2cub2JqZWN0LmV4dGVuZChleHBvcnRzLCBwcm90by5tZWRpYXBpcGUpO1xuIiwiLy8gc291cmNlOiBtZWRpYXBpcGUvdGFza3MvY2MvY29yZS9wcm90by9hY2NlbGVyYXRpb24ucHJvdG9cbi8qKlxuICogQGZpbGVvdmVydmlld1xuICogQGVuaGFuY2VhYmxlXG4gKiBAc3VwcHJlc3Mge21pc3NpbmdSZXF1aXJlfSByZXBvcnRzIGVycm9yIG9uIGltcGxpY2l0IHR5cGUgdXNhZ2VzLlxuICogQHN1cHByZXNzIHttZXNzYWdlQ29udmVudGlvbnN9IEpTIENvbXBpbGVyIHJlcG9ydHMgYW4gZXJyb3IgaWYgYSB2YXJpYWJsZSBvclxuICogICAgIGZpZWxkIHN0YXJ0cyB3aXRoICdNU0dfJyBhbmQgaXNuJ3QgYSB0cmFuc2xhdGFibGUgbWVzc2FnZS5cbiAqIEBwdWJsaWNcbiAqL1xuLy8gR0VORVJBVEVEIENPREUgLS0gRE8gTk9UIEVESVQhXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcblxudmFyIGpzcGIgPSByZXF1aXJlKCdnb29nbGUtcHJvdG9idWYnKTtcbnZhciBnb29nID0ganNwYjtcbnZhciBnbG9iYWwgPVxuICAgICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93KSB8fFxuICAgICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwpIHx8XG4gICAgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmKSB8fFxuICAgIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KS5jYWxsKG51bGwpIHx8XG4gICAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxudmFyIG1lZGlhcGlwZV9jYWxjdWxhdG9yc190ZW5zb3JfaW5mZXJlbmNlX2NhbGN1bGF0b3JfcGIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi9tZWRpYXBpcGUvY2FsY3VsYXRvcnMvdGVuc29yL2luZmVyZW5jZV9jYWxjdWxhdG9yX3BiLmpzJyk7XG5nb29nLm9iamVjdC5leHRlbmQocHJvdG8sIG1lZGlhcGlwZV9jYWxjdWxhdG9yc190ZW5zb3JfaW5mZXJlbmNlX2NhbGN1bGF0b3JfcGIpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbicsIG51bGwsIGdsb2JhbCk7XG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQWNjZWxlcmF0aW9uLkRlbGVnYXRlQ2FzZScsIG51bGwsIGdsb2JhbCk7XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQWNjZWxlcmF0aW9uID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5BY2NlbGVyYXRpb24ub25lb2ZHcm91cHNfKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbiwganNwYi5NZXNzYWdlKTtcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbi5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5BY2NlbGVyYXRpb24nO1xufVxuXG4vKipcbiAqIE9uZW9mIGdyb3VwIGRlZmluaXRpb25zIGZvciB0aGlzIG1lc3NhZ2UuIEVhY2ggZ3JvdXAgZGVmaW5lcyB0aGUgZmllbGRcbiAqIG51bWJlcnMgYmVsb25naW5nIHRvIHRoYXQgZ3JvdXAuIFdoZW4gb2YgdGhlc2UgZmllbGRzJyB2YWx1ZSBpcyBzZXQsIGFsbFxuICogb3RoZXIgZmllbGRzIGluIHRoZSBncm91cCBhcmUgY2xlYXJlZC4gRHVyaW5nIGRlc2VyaWFsaXphdGlvbiwgaWYgbXVsdGlwbGVcbiAqIGZpZWxkcyBhcmUgZW5jb3VudGVyZWQgZm9yIGEgZ3JvdXAsIG9ubHkgdGhlIGxhc3QgdmFsdWUgc2VlbiB3aWxsIGJlIGtlcHQuXG4gKiBAcHJpdmF0ZSB7IUFycmF5PCFBcnJheTxudW1iZXI+Pn1cbiAqIEBjb25zdFxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5BY2NlbGVyYXRpb24ub25lb2ZHcm91cHNfID0gW1sxLDIsNF1dO1xuXG4vKipcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbi5EZWxlZ2F0ZUNhc2UgPSB7XG4gIERFTEVHQVRFX05PVF9TRVQ6IDAsXG4gIFhOTlBBQ0s6IDEsXG4gIEdQVTogMixcbiAgVEZMSVRFOiA0XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbi5EZWxlZ2F0ZUNhc2V9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbi5wcm90b3R5cGUuZ2V0RGVsZWdhdGVDYXNlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbi5EZWxlZ2F0ZUNhc2V9ICovKGpzcGIuTWVzc2FnZS5jb21wdXRlT25lb2ZDYXNlKHRoaXMsIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbi5vbmVvZkdyb3Vwc19bMF0pKTtcbn07XG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbi5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5BY2NlbGVyYXRpb24udG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5BY2NlbGVyYXRpb259IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbi50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgeG5ucGFjazogKGYgPSBtc2cuZ2V0WG5ucGFjaygpKSAmJiBtZWRpYXBpcGVfY2FsY3VsYXRvcnNfdGVuc29yX2luZmVyZW5jZV9jYWxjdWxhdG9yX3BiLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlhubnBhY2sudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcbiAgICBncHU6IChmID0gbXNnLmdldEdwdSgpKSAmJiBtZWRpYXBpcGVfY2FsY3VsYXRvcnNfdGVuc29yX2luZmVyZW5jZV9jYWxjdWxhdG9yX3BiLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxuICAgIHRmbGl0ZTogKGYgPSBtc2cuZ2V0VGZsaXRlKCkpICYmIG1lZGlhcGlwZV9jYWxjdWxhdG9yc190ZW5zb3JfaW5mZXJlbmNlX2NhbGN1bGF0b3JfcGIuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuVGZMaXRlLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZilcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQWNjZWxlcmF0aW9uLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQWNjZWxlcmF0aW9uO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQWNjZWxlcmF0aW9uLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbn0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5BY2NlbGVyYXRpb259XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gbmV3IG1lZGlhcGlwZV9jYWxjdWxhdG9yc190ZW5zb3JfaW5mZXJlbmNlX2NhbGN1bGF0b3JfcGIuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuWG5ucGFjaztcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxtZWRpYXBpcGVfY2FsY3VsYXRvcnNfdGVuc29yX2luZmVyZW5jZV9jYWxjdWxhdG9yX3BiLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlhubnBhY2suZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5zZXRYbm5wYWNrKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBtZWRpYXBpcGVfY2FsY3VsYXRvcnNfdGVuc29yX2luZmVyZW5jZV9jYWxjdWxhdG9yX3BiLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdTtcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxtZWRpYXBpcGVfY2FsY3VsYXRvcnNfdGVuc29yX2luZmVyZW5jZV9jYWxjdWxhdG9yX3BiLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldEdwdSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgbWVkaWFwaXBlX2NhbGN1bGF0b3JzX3RlbnNvcl9pbmZlcmVuY2VfY2FsY3VsYXRvcl9wYi5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5UZkxpdGU7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsbWVkaWFwaXBlX2NhbGN1bGF0b3JzX3RlbnNvcl9pbmZlcmVuY2VfY2FsY3VsYXRvcl9wYi5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5UZkxpdGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5zZXRUZmxpdGUodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5BY2NlbGVyYXRpb24ucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbn0gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5BY2NlbGVyYXRpb24uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG4gIGYgPSBtZXNzYWdlLmdldFhubnBhY2soKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXG4gICAgICAxLFxuICAgICAgZixcbiAgICAgIG1lZGlhcGlwZV9jYWxjdWxhdG9yc190ZW5zb3JfaW5mZXJlbmNlX2NhbGN1bGF0b3JfcGIuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuWG5ucGFjay5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0R3B1KCk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxuICAgICAgMixcbiAgICAgIGYsXG4gICAgICBtZWRpYXBpcGVfY2FsY3VsYXRvcnNfdGVuc29yX2luZmVyZW5jZV9jYWxjdWxhdG9yX3BiLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0VGZsaXRlKCk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxuICAgICAgNCxcbiAgICAgIGYsXG4gICAgICBtZWRpYXBpcGVfY2FsY3VsYXRvcnNfdGVuc29yX2luZmVyZW5jZV9jYWxjdWxhdG9yX3BiLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlRmTGl0ZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBtZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuWG5ucGFjayB4bm5wYWNrID0gMTtcbiAqIEByZXR1cm4gez9wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuWG5ucGFja31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQWNjZWxlcmF0aW9uLnByb3RvdHlwZS5nZXRYbm5wYWNrID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5Ybm5wYWNrfSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBtZWRpYXBpcGVfY2FsY3VsYXRvcnNfdGVuc29yX2luZmVyZW5jZV9jYWxjdWxhdG9yX3BiLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlhubnBhY2ssIDEpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuWG5ucGFja3x1bmRlZmluZWR9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQWNjZWxlcmF0aW9ufSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5BY2NlbGVyYXRpb24ucHJvdG90eXBlLnNldFhubnBhY2sgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldE9uZW9mV3JhcHBlckZpZWxkKHRoaXMsIDEsIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbi5vbmVvZkdyb3Vwc19bMF0sIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5BY2NlbGVyYXRpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5BY2NlbGVyYXRpb24ucHJvdG90eXBlLmNsZWFyWG5ucGFjayA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRYbm5wYWNrKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQWNjZWxlcmF0aW9uLnByb3RvdHlwZS5oYXNYbm5wYWNrID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBtZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1IGdwdSA9IDI7XG4gKiBAcmV0dXJuIHs/cHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQWNjZWxlcmF0aW9uLnByb3RvdHlwZS5nZXRHcHUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLkdwdX0gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgbWVkaWFwaXBlX2NhbGN1bGF0b3JzX3RlbnNvcl9pbmZlcmVuY2VfY2FsY3VsYXRvcl9wYi5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5HcHUsIDIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1fHVuZGVmaW5lZH0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5BY2NlbGVyYXRpb259IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbi5wcm90b3R5cGUuc2V0R3B1ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRPbmVvZldyYXBwZXJGaWVsZCh0aGlzLCAyLCBwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5BY2NlbGVyYXRpb24ub25lb2ZHcm91cHNfWzBdLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQWNjZWxlcmF0aW9ufSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQWNjZWxlcmF0aW9uLnByb3RvdHlwZS5jbGVhckdwdSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRHcHUodW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5BY2NlbGVyYXRpb24ucHJvdG90eXBlLmhhc0dwdSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgbWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlRmTGl0ZSB0ZmxpdGUgPSA0O1xuICogQHJldHVybiB7P3Byb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5UZkxpdGV9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbi5wcm90b3R5cGUuZ2V0VGZsaXRlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLm1lZGlhcGlwZS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5UZkxpdGV9ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIG1lZGlhcGlwZV9jYWxjdWxhdG9yc190ZW5zb3JfaW5mZXJlbmNlX2NhbGN1bGF0b3JfcGIuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuVGZMaXRlLCA0KSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHs/cHJvdG8ubWVkaWFwaXBlLkluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlRmTGl0ZXx1bmRlZmluZWR9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQWNjZWxlcmF0aW9ufSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5BY2NlbGVyYXRpb24ucHJvdG90eXBlLnNldFRmbGl0ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0T25lb2ZXcmFwcGVyRmllbGQodGhpcywgNCwgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQWNjZWxlcmF0aW9uLm9uZW9mR3JvdXBzX1swXSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbn0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkFjY2VsZXJhdGlvbi5wcm90b3R5cGUuY2xlYXJUZmxpdGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0VGZsaXRlKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQWNjZWxlcmF0aW9uLnByb3RvdHlwZS5oYXNUZmxpdGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA0KSAhPSBudWxsO1xufTtcblxuXG5nb29nLm9iamVjdC5leHRlbmQoZXhwb3J0cywgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8pO1xuIiwiLy8gc291cmNlOiBtZWRpYXBpcGUvdGFza3MvY2MvY29yZS9wcm90by9leHRlcm5hbF9maWxlLnByb3RvXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqIEBlbmhhbmNlYWJsZVxuICogQHN1cHByZXNzIHttaXNzaW5nUmVxdWlyZX0gcmVwb3J0cyBlcnJvciBvbiBpbXBsaWNpdCB0eXBlIHVzYWdlcy5cbiAqIEBzdXBwcmVzcyB7bWVzc2FnZUNvbnZlbnRpb25zfSBKUyBDb21waWxlciByZXBvcnRzIGFuIGVycm9yIGlmIGEgdmFyaWFibGUgb3JcbiAqICAgICBmaWVsZCBzdGFydHMgd2l0aCAnTVNHXycgYW5kIGlzbid0IGEgdHJhbnNsYXRhYmxlIG1lc3NhZ2UuXG4gKiBAcHVibGljXG4gKi9cbi8vIEdFTkVSQVRFRCBDT0RFIC0tIERPIE5PVCBFRElUIVxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbnZhciBqc3BiID0gcmVxdWlyZSgnZ29vZ2xlLXByb3RvYnVmJyk7XG52YXIgZ29vZyA9IGpzcGI7XG52YXIgZ2xvYmFsID1cbiAgICAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMpIHx8XG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdykgfHxcbiAgICAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsKSB8fFxuICAgICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZikgfHxcbiAgICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkuY2FsbChudWxsKSB8fFxuICAgIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5FeHRlcm5hbEZpbGUnLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVEZXNjcmlwdG9yTWV0YScsIG51bGwsIGdsb2JhbCk7XG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZVBvaW50ZXJNZXRhJywgbnVsbCwgZ2xvYmFsKTtcbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5FeHRlcm5hbEZpbGUgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRXh0ZXJuYWxGaWxlLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRXh0ZXJuYWxGaWxlLmRpc3BsYXlOYW1lID0gJ3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkV4dGVybmFsRmlsZSc7XG59XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZURlc2NyaXB0b3JNZXRhID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVEZXNjcmlwdG9yTWV0YSwganNwYi5NZXNzYWdlKTtcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVEZXNjcmlwdG9yTWV0YS5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlRGVzY3JpcHRvck1ldGEnO1xufVxuLyoqXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxuICogdmFsaWQuXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVQb2ludGVyTWV0YSA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlUG9pbnRlck1ldGEsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlUG9pbnRlck1ldGEuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZVBvaW50ZXJNZXRhJztcbn1cblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRXh0ZXJuYWxGaWxlLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkV4dGVybmFsRmlsZS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkV4dGVybmFsRmlsZX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRXh0ZXJuYWxGaWxlLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBmaWxlQ29udGVudDogbXNnLmdldEZpbGVDb250ZW50X2FzQjY0KCksXG4gICAgZmlsZU5hbWU6IChmID0ganNwYi5NZXNzYWdlLmdldEZpZWxkKG1zZywgMikpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIGZpbGVEZXNjcmlwdG9yTWV0YTogKGYgPSBtc2cuZ2V0RmlsZURlc2NyaXB0b3JNZXRhKCkpICYmIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVEZXNjcmlwdG9yTWV0YS50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxuICAgIGZpbGVQb2ludGVyTWV0YTogKGYgPSBtc2cuZ2V0RmlsZVBvaW50ZXJNZXRhKCkpICYmIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVQb2ludGVyTWV0YS50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5FeHRlcm5hbEZpbGV9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkV4dGVybmFsRmlsZS5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkV4dGVybmFsRmlsZTtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkV4dGVybmFsRmlsZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5FeHRlcm5hbEZpbGV9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRXh0ZXJuYWxGaWxlfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5FeHRlcm5hbEZpbGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7IVVpbnQ4QXJyYXl9ICovIChyZWFkZXIucmVhZEJ5dGVzKCkpO1xuICAgICAgbXNnLnNldEZpbGVDb250ZW50KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuc2V0RmlsZU5hbWUodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVEZXNjcmlwdG9yTWV0YTtcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlRGVzY3JpcHRvck1ldGEuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5zZXRGaWxlRGVzY3JpcHRvck1ldGEodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVQb2ludGVyTWV0YTtcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlUG9pbnRlck1ldGEuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5zZXRGaWxlUG9pbnRlck1ldGEodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5FeHRlcm5hbEZpbGUucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkV4dGVybmFsRmlsZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkV4dGVybmFsRmlsZX0gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5FeHRlcm5hbEZpbGUuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG4gIGYgPSAvKiogQHR5cGUgeyEoc3RyaW5nfFVpbnQ4QXJyYXkpfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDEpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUJ5dGVzKFxuICAgICAgMSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAyKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXG4gICAgICAyLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0RmlsZURlc2NyaXB0b3JNZXRhKCk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxuICAgICAgMyxcbiAgICAgIGYsXG4gICAgICBwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlRGVzY3JpcHRvck1ldGEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldEZpbGVQb2ludGVyTWV0YSgpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDQsXG4gICAgICBmLFxuICAgICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZVBvaW50ZXJNZXRhLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGJ5dGVzIGZpbGVfY29udGVudCA9IDE7XG4gKiBAcmV0dXJuIHshKHN0cmluZ3xVaW50OEFycmF5KX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRXh0ZXJuYWxGaWxlLnByb3RvdHlwZS5nZXRGaWxlQ29udGVudCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHshKHN0cmluZ3xVaW50OEFycmF5KX0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIFwiXCIpKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBieXRlcyBmaWxlX2NvbnRlbnQgPSAxO1xuICogVGhpcyBpcyBhIHR5cGUtY29udmVyc2lvbiB3cmFwcGVyIGFyb3VuZCBgZ2V0RmlsZUNvbnRlbnQoKWBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRXh0ZXJuYWxGaWxlLnByb3RvdHlwZS5nZXRGaWxlQ29udGVudF9hc0I2NCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuYnl0ZXNBc0I2NChcbiAgICAgIHRoaXMuZ2V0RmlsZUNvbnRlbnQoKSkpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGJ5dGVzIGZpbGVfY29udGVudCA9IDE7XG4gKiBOb3RlIHRoYXQgVWludDhBcnJheSBpcyBub3Qgc3VwcG9ydGVkIG9uIGFsbCBicm93c2Vycy5cbiAqIEBzZWUgaHR0cDovL2Nhbml1c2UuY29tL1VpbnQ4QXJyYXlcbiAqIFRoaXMgaXMgYSB0eXBlLWNvbnZlcnNpb24gd3JhcHBlciBhcm91bmQgYGdldEZpbGVDb250ZW50KClgXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRXh0ZXJuYWxGaWxlLnByb3RvdHlwZS5nZXRGaWxlQ29udGVudF9hc1U4ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUgeyFVaW50OEFycmF5fSAqLyAoanNwYi5NZXNzYWdlLmJ5dGVzQXNVOChcbiAgICAgIHRoaXMuZ2V0RmlsZUNvbnRlbnQoKSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IShzdHJpbmd8VWludDhBcnJheSl9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRXh0ZXJuYWxGaWxlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRXh0ZXJuYWxGaWxlLnByb3RvdHlwZS5zZXRGaWxlQ29udGVudCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5FeHRlcm5hbEZpbGV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5FeHRlcm5hbEZpbGUucHJvdG90eXBlLmNsZWFyRmlsZUNvbnRlbnQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkV4dGVybmFsRmlsZS5wcm90b3R5cGUuaGFzRmlsZUNvbnRlbnQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyBmaWxlX25hbWUgPSAyO1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5FeHRlcm5hbEZpbGUucHJvdG90eXBlLmdldEZpbGVOYW1lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDIsIFwiXCIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5FeHRlcm5hbEZpbGV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5FeHRlcm5hbEZpbGUucHJvdG90eXBlLnNldEZpbGVOYW1lID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkV4dGVybmFsRmlsZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkV4dGVybmFsRmlsZS5wcm90b3R5cGUuY2xlYXJGaWxlTmFtZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRXh0ZXJuYWxGaWxlLnByb3RvdHlwZS5oYXNGaWxlTmFtZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgRmlsZURlc2NyaXB0b3JNZXRhIGZpbGVfZGVzY3JpcHRvcl9tZXRhID0gMztcbiAqIEByZXR1cm4gez9wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlRGVzY3JpcHRvck1ldGF9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkV4dGVybmFsRmlsZS5wcm90b3R5cGUuZ2V0RmlsZURlc2NyaXB0b3JNZXRhID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVEZXNjcmlwdG9yTWV0YX0gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZURlc2NyaXB0b3JNZXRhLCAzKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZURlc2NyaXB0b3JNZXRhfHVuZGVmaW5lZH0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5FeHRlcm5hbEZpbGV9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkV4dGVybmFsRmlsZS5wcm90b3R5cGUuc2V0RmlsZURlc2NyaXB0b3JNZXRhID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkV4dGVybmFsRmlsZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkV4dGVybmFsRmlsZS5wcm90b3R5cGUuY2xlYXJGaWxlRGVzY3JpcHRvck1ldGEgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0RmlsZURlc2NyaXB0b3JNZXRhKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRXh0ZXJuYWxGaWxlLnByb3RvdHlwZS5oYXNGaWxlRGVzY3JpcHRvck1ldGEgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAzKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIEZpbGVQb2ludGVyTWV0YSBmaWxlX3BvaW50ZXJfbWV0YSA9IDQ7XG4gKiBAcmV0dXJuIHs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZVBvaW50ZXJNZXRhfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5FeHRlcm5hbEZpbGUucHJvdG90eXBlLmdldEZpbGVQb2ludGVyTWV0YSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlUG9pbnRlck1ldGF9ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVQb2ludGVyTWV0YSwgNCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVQb2ludGVyTWV0YXx1bmRlZmluZWR9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRXh0ZXJuYWxGaWxlfSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5FeHRlcm5hbEZpbGUucHJvdG90eXBlLnNldEZpbGVQb2ludGVyTWV0YSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDQsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5FeHRlcm5hbEZpbGV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5FeHRlcm5hbEZpbGUucHJvdG90eXBlLmNsZWFyRmlsZVBvaW50ZXJNZXRhID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldEZpbGVQb2ludGVyTWV0YSh1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkV4dGVybmFsRmlsZS5wcm90b3R5cGUuaGFzRmlsZVBvaW50ZXJNZXRhID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNCkgIT0gbnVsbDtcbn07XG5cblxuXG5cblxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlRGVzY3JpcHRvck1ldGEucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZURlc2NyaXB0b3JNZXRhLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZURlc2NyaXB0b3JNZXRhfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlRGVzY3JpcHRvck1ldGEudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xuICB2YXIgZiwgb2JqID0ge1xuICAgIGZkOiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtc2csIDEpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICBsZW5ndGg6IChmID0ganNwYi5NZXNzYWdlLmdldEZpZWxkKG1zZywgMikpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIG9mZnNldDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCAzKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGZcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVEZXNjcmlwdG9yTWV0YX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZURlc2NyaXB0b3JNZXRhLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZURlc2NyaXB0b3JNZXRhO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZURlc2NyaXB0b3JNZXRhLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVEZXNjcmlwdG9yTWV0YX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlRGVzY3JpcHRvck1ldGF9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVEZXNjcmlwdG9yTWV0YS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDMyKCkpO1xuICAgICAgbXNnLnNldEZkKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQ2NCgpKTtcbiAgICAgIG1zZy5zZXRMZW5ndGgodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDY0KCkpO1xuICAgICAgbXNnLnNldE9mZnNldCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVEZXNjcmlwdG9yTWV0YS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZURlc2NyaXB0b3JNZXRhLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZURlc2NyaXB0b3JNZXRhfSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVEZXNjcmlwdG9yTWV0YS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDEpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUludDMyKFxuICAgICAgMSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAyKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVJbnQ2NChcbiAgICAgIDIsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMykpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlSW50NjQoXG4gICAgICAzLFxuICAgICAgZlxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBpbnQzMiBmZCA9IDE7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVEZXNjcmlwdG9yTWV0YS5wcm90b3R5cGUuZ2V0RmQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMSwgMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVEZXNjcmlwdG9yTWV0YX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVEZXNjcmlwdG9yTWV0YS5wcm90b3R5cGUuc2V0RmQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZURlc2NyaXB0b3JNZXRhfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZURlc2NyaXB0b3JNZXRhLnByb3RvdHlwZS5jbGVhckZkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMSwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlRGVzY3JpcHRvck1ldGEucHJvdG90eXBlLmhhc0ZkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBpbnQ2NCBsZW5ndGggPSAyO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlRGVzY3JpcHRvck1ldGEucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCAwKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZURlc2NyaXB0b3JNZXRhfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZURlc2NyaXB0b3JNZXRhLnByb3RvdHlwZS5zZXRMZW5ndGggPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZURlc2NyaXB0b3JNZXRhfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZURlc2NyaXB0b3JNZXRhLnByb3RvdHlwZS5jbGVhckxlbmd0aCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZURlc2NyaXB0b3JNZXRhLnByb3RvdHlwZS5oYXNMZW5ndGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGludDY0IG9mZnNldCA9IDM7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVEZXNjcmlwdG9yTWV0YS5wcm90b3R5cGUuZ2V0T2Zmc2V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDMsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlRGVzY3JpcHRvck1ldGF9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlRGVzY3JpcHRvck1ldGEucHJvdG90eXBlLnNldE9mZnNldCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlRGVzY3JpcHRvck1ldGF9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlRGVzY3JpcHRvck1ldGEucHJvdG90eXBlLmNsZWFyT2Zmc2V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMywgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlRGVzY3JpcHRvck1ldGEucHJvdG90eXBlLmhhc09mZnNldCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDMpICE9IG51bGw7XG59O1xuXG5cblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZVBvaW50ZXJNZXRhLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVQb2ludGVyTWV0YS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVQb2ludGVyTWV0YX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZVBvaW50ZXJNZXRhLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBwb2ludGVyOiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtc2csIDEpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICBsZW5ndGg6IChmID0ganNwYi5NZXNzYWdlLmdldEZpZWxkKG1zZywgMikpID09IG51bGwgPyB1bmRlZmluZWQgOiBmXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlUG9pbnRlck1ldGF9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVQb2ludGVyTWV0YS5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVQb2ludGVyTWV0YTtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVQb2ludGVyTWV0YS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlUG9pbnRlck1ldGF9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZVBvaW50ZXJNZXRhfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlUG9pbnRlck1ldGEuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRVaW50NjQoKSk7XG4gICAgICBtc2cuc2V0UG9pbnRlcih2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkSW50NjQoKSk7XG4gICAgICBtc2cuc2V0TGVuZ3RoKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZVBvaW50ZXJNZXRhLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlUG9pbnRlck1ldGEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlUG9pbnRlck1ldGF9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZVBvaW50ZXJNZXRhLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMSkpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlVWludDY0KFxuICAgICAgMSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAyKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVJbnQ2NChcbiAgICAgIDIsXG4gICAgICBmXG4gICAgKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHVpbnQ2NCBwb2ludGVyID0gMTtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZVBvaW50ZXJNZXRhLnByb3RvdHlwZS5nZXRQb2ludGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlUG9pbnRlck1ldGF9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5GaWxlUG9pbnRlck1ldGEucHJvdG90eXBlLnNldFBvaW50ZXIgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZVBvaW50ZXJNZXRhfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZVBvaW50ZXJNZXRhLnByb3RvdHlwZS5jbGVhclBvaW50ZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVQb2ludGVyTWV0YS5wcm90b3R5cGUuaGFzUG9pbnRlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgaW50NjQgbGVuZ3RoID0gMjtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRmlsZVBvaW50ZXJNZXRhLnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMiwgMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVQb2ludGVyTWV0YX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVQb2ludGVyTWV0YS5wcm90b3R5cGUuc2V0TGVuZ3RoID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVQb2ludGVyTWV0YX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVQb2ludGVyTWV0YS5wcm90b3R5cGUuY2xlYXJMZW5ndGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkZpbGVQb2ludGVyTWV0YS5wcm90b3R5cGUuaGFzTGVuZ3RoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcbn07XG5cblxuZ29vZy5vYmplY3QuZXh0ZW5kKGV4cG9ydHMsIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvKTtcbiIsIi8vIHNvdXJjZTogbWVkaWFwaXBlL3Rhc2tzL2NjL2NvcmUvcHJvdG8vYmFzZV9vcHRpb25zLnByb3RvXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqIEBlbmhhbmNlYWJsZVxuICogQHN1cHByZXNzIHttaXNzaW5nUmVxdWlyZX0gcmVwb3J0cyBlcnJvciBvbiBpbXBsaWNpdCB0eXBlIHVzYWdlcy5cbiAqIEBzdXBwcmVzcyB7bWVzc2FnZUNvbnZlbnRpb25zfSBKUyBDb21waWxlciByZXBvcnRzIGFuIGVycm9yIGlmIGEgdmFyaWFibGUgb3JcbiAqICAgICBmaWVsZCBzdGFydHMgd2l0aCAnTVNHXycgYW5kIGlzbid0IGEgdHJhbnNsYXRhYmxlIG1lc3NhZ2UuXG4gKiBAcHVibGljXG4gKi9cbi8vIEdFTkVSQVRFRCBDT0RFIC0tIERPIE5PVCBFRElUIVxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbnZhciBqc3BiID0gcmVxdWlyZSgnZ29vZ2xlLXByb3RvYnVmJyk7XG52YXIgZ29vZyA9IGpzcGI7XG52YXIgZ2xvYmFsID1cbiAgICAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMpIHx8XG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdykgfHxcbiAgICAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsKSB8fFxuICAgICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZikgfHxcbiAgICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkuY2FsbChudWxsKSB8fFxuICAgIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbnZhciBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19hY2NlbGVyYXRpb25fcGIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi9tZWRpYXBpcGUvdGFza3MvY2MvY29yZS9wcm90by9hY2NlbGVyYXRpb25fcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYWNjZWxlcmF0aW9uX3BiKTtcbnZhciBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19leHRlcm5hbF9maWxlX3BiID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vLi4vbWVkaWFwaXBlL3Rhc2tzL2NjL2NvcmUvcHJvdG8vZXh0ZXJuYWxfZmlsZV9wYi5qcycpO1xuZ29vZy5vYmplY3QuZXh0ZW5kKHByb3RvLCBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19leHRlcm5hbF9maWxlX3BiKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9ucycsIG51bGwsIGdsb2JhbCk7XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnMgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnMsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9ucy5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9ucyc7XG59XG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnN9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBtb2RlbEFzc2V0OiAoZiA9IG1zZy5nZXRNb2RlbEFzc2V0KCkpICYmIG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2V4dGVybmFsX2ZpbGVfcGIuRXh0ZXJuYWxGaWxlLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXG4gICAgdXNlU3RyZWFtTW9kZToganNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KG1zZywgMiwgZmFsc2UpLFxuICAgIGFjY2VsZXJhdGlvbjogKGYgPSBtc2cuZ2V0QWNjZWxlcmF0aW9uKCkpICYmIG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2FjY2VsZXJhdGlvbl9wYi5BY2NlbGVyYXRpb24udG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKVxuICB9O1xuXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG59XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnM7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9uc30gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9uc31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19leHRlcm5hbF9maWxlX3BiLkV4dGVybmFsRmlsZTtcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19leHRlcm5hbF9maWxlX3BiLkV4dGVybmFsRmlsZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldE1vZGVsQXNzZXQodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtib29sZWFufSAqLyAocmVhZGVyLnJlYWRCb29sKCkpO1xuICAgICAgbXNnLnNldFVzZVN0cmVhbU1vZGUodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgdmFyIHZhbHVlID0gbmV3IG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2FjY2VsZXJhdGlvbl9wYi5BY2NlbGVyYXRpb247XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYWNjZWxlcmF0aW9uX3BiLkFjY2VsZXJhdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldEFjY2VsZXJhdGlvbih2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zfSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gbWVzc2FnZS5nZXRNb2RlbEFzc2V0KCk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxuICAgICAgMSxcbiAgICAgIGYsXG4gICAgICBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19leHRlcm5hbF9maWxlX3BiLkV4dGVybmFsRmlsZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAyKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVCb29sKFxuICAgICAgMixcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldEFjY2VsZXJhdGlvbigpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDMsXG4gICAgICBmLFxuICAgICAgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYWNjZWxlcmF0aW9uX3BiLkFjY2VsZXJhdGlvbi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBFeHRlcm5hbEZpbGUgbW9kZWxfYXNzZXQgPSAxO1xuICogQHJldHVybiB7P3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkV4dGVybmFsRmlsZX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnMucHJvdG90eXBlLmdldE1vZGVsQXNzZXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uRXh0ZXJuYWxGaWxlfSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19leHRlcm5hbF9maWxlX3BiLkV4dGVybmFsRmlsZSwgMSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkV4dGVybmFsRmlsZXx1bmRlZmluZWR9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnN9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zLnByb3RvdHlwZS5zZXRNb2RlbEFzc2V0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnMucHJvdG90eXBlLmNsZWFyTW9kZWxBc3NldCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRNb2RlbEFzc2V0KHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnMucHJvdG90eXBlLmhhc01vZGVsQXNzZXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGJvb2wgdXNlX3N0cmVhbV9tb2RlID0gMjtcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zLnByb3RvdHlwZS5nZXRVc2VTdHJlYW1Nb2RlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge2Jvb2xlYW59ICovIChqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQodGhpcywgMiwgZmFsc2UpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9ucy5wcm90b3R5cGUuc2V0VXNlU3RyZWFtTW9kZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zLnByb3RvdHlwZS5jbGVhclVzZVN0cmVhbU1vZGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zLnByb3RvdHlwZS5oYXNVc2VTdHJlYW1Nb2RlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBBY2NlbGVyYXRpb24gYWNjZWxlcmF0aW9uID0gMztcbiAqIEByZXR1cm4gez9wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5BY2NlbGVyYXRpb259XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zLnByb3RvdHlwZS5nZXRBY2NlbGVyYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQWNjZWxlcmF0aW9ufSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19hY2NlbGVyYXRpb25fcGIuQWNjZWxlcmF0aW9uLCAzKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQWNjZWxlcmF0aW9ufHVuZGVmaW5lZH0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9uc30gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnMucHJvdG90eXBlLnNldEFjY2VsZXJhdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDMsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zLnByb3RvdHlwZS5jbGVhckFjY2VsZXJhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRBY2NlbGVyYXRpb24odW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9ucy5wcm90b3R5cGUuaGFzQWNjZWxlcmF0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMykgIT0gbnVsbDtcbn07XG5cblxuZ29vZy5vYmplY3QuZXh0ZW5kKGV4cG9ydHMsIHByb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvKTtcbiIsIi8vIHNvdXJjZTogbWVkaWFwaXBlL3Rhc2tzL2NjL3Zpc2lvbi9pbWFnZV9jbGFzc2lmaWVyL3Byb3RvL2ltYWdlX2NsYXNzaWZpZXJfZ3JhcGhfb3B0aW9ucy5wcm90b1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKiBAZW5oYW5jZWFibGVcbiAqIEBzdXBwcmVzcyB7bWlzc2luZ1JlcXVpcmV9IHJlcG9ydHMgZXJyb3Igb24gaW1wbGljaXQgdHlwZSB1c2FnZXMuXG4gKiBAc3VwcHJlc3Mge21lc3NhZ2VDb252ZW50aW9uc30gSlMgQ29tcGlsZXIgcmVwb3J0cyBhbiBlcnJvciBpZiBhIHZhcmlhYmxlIG9yXG4gKiAgICAgZmllbGQgc3RhcnRzIHdpdGggJ01TR18nIGFuZCBpc24ndCBhIHRyYW5zbGF0YWJsZSBtZXNzYWdlLlxuICogQHB1YmxpY1xuICovXG4vLyBHRU5FUkFURUQgQ09ERSAtLSBETyBOT1QgRURJVCFcbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuXG52YXIganNwYiA9IHJlcXVpcmUoJ2dvb2dsZS1wcm90b2J1ZicpO1xudmFyIGdvb2cgPSBqc3BiO1xudmFyIGdsb2JhbCA9XG4gICAgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzKSB8fFxuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cpIHx8XG4gICAgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbCkgfHxcbiAgICAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYpIHx8XG4gICAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pLmNhbGwobnVsbCkgfHxcbiAgICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG52YXIgbWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX3BiID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vLi4vLi4vbWVkaWFwaXBlL2ZyYW1ld29yay9jYWxjdWxhdG9yX3BiLmpzJyk7XG5nb29nLm9iamVjdC5leHRlbmQocHJvdG8sIG1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9wYik7XG52YXIgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvbXBvbmVudHNfcHJvY2Vzc29yc19wcm90b19jbGFzc2lmaWVyX29wdGlvbnNfcGIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi8uLi9tZWRpYXBpcGUvdGFza3MvY2MvY29tcG9uZW50cy9wcm9jZXNzb3JzL3Byb3RvL2NsYXNzaWZpZXJfb3B0aW9uc19wYi5qcycpO1xuZ29vZy5vYmplY3QuZXh0ZW5kKHByb3RvLCBtZWRpYXBpcGVfdGFza3NfY2NfY29tcG9uZW50c19wcm9jZXNzb3JzX3Byb3RvX2NsYXNzaWZpZXJfb3B0aW9uc19wYik7XG52YXIgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vLi4vLi4vbWVkaWFwaXBlL3Rhc2tzL2NjL2NvcmUvcHJvdG8vYmFzZV9vcHRpb25zX3BiLmpzJyk7XG5nb29nLm9iamVjdC5leHRlbmQocHJvdG8sIG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYik7XG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5pbWFnZV9jbGFzc2lmaWVyLnByb3RvLkltYWdlQ2xhc3NpZmllckdyYXBoT3B0aW9ucycsIG51bGwsIGdsb2JhbCk7XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5pbWFnZV9jbGFzc2lmaWVyLnByb3RvLkltYWdlQ2xhc3NpZmllckdyYXBoT3B0aW9ucyA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmltYWdlX2NsYXNzaWZpZXIucHJvdG8uSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5pbWFnZV9jbGFzc2lmaWVyLnByb3RvLkltYWdlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmltYWdlX2NsYXNzaWZpZXIucHJvdG8uSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zJztcbn1cblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5pbWFnZV9jbGFzc2lmaWVyLnByb3RvLkltYWdlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmltYWdlX2NsYXNzaWZpZXIucHJvdG8uSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5pbWFnZV9jbGFzc2lmaWVyLnByb3RvLkltYWdlQ2xhc3NpZmllckdyYXBoT3B0aW9uc30gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5pbWFnZV9jbGFzc2lmaWVyLnByb3RvLkltYWdlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgYmFzZU9wdGlvbnM6IChmID0gbXNnLmdldEJhc2VPcHRpb25zKCkpICYmIG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYi5CYXNlT3B0aW9ucy50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxuICAgIGNsYXNzaWZpZXJPcHRpb25zOiAoZiA9IG1zZy5nZXRDbGFzc2lmaWVyT3B0aW9ucygpKSAmJiBtZWRpYXBpcGVfdGFza3NfY2NfY29tcG9uZW50c19wcm9jZXNzb3JzX3Byb3RvX2NsYXNzaWZpZXJfb3B0aW9uc19wYi5DbGFzc2lmaWVyT3B0aW9ucy50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmltYWdlX2NsYXNzaWZpZXIucHJvdG8uSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmltYWdlX2NsYXNzaWZpZXIucHJvdG8uSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5pbWFnZV9jbGFzc2lmaWVyLnByb3RvLkltYWdlQ2xhc3NpZmllckdyYXBoT3B0aW9ucztcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaW1hZ2VfY2xhc3NpZmllci5wcm90by5JbWFnZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5pbWFnZV9jbGFzc2lmaWVyLnByb3RvLkltYWdlQ2xhc3NpZmllckdyYXBoT3B0aW9uc30gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmltYWdlX2NsYXNzaWZpZXIucHJvdG8uSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmltYWdlX2NsYXNzaWZpZXIucHJvdG8uSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiLkJhc2VPcHRpb25zO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYi5CYXNlT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldEJhc2VPcHRpb25zKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBtZWRpYXBpcGVfdGFza3NfY2NfY29tcG9uZW50c19wcm9jZXNzb3JzX3Byb3RvX2NsYXNzaWZpZXJfb3B0aW9uc19wYi5DbGFzc2lmaWVyT3B0aW9ucztcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxtZWRpYXBpcGVfdGFza3NfY2NfY29tcG9uZW50c19wcm9jZXNzb3JzX3Byb3RvX2NsYXNzaWZpZXJfb3B0aW9uc19wYi5DbGFzc2lmaWVyT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldENsYXNzaWZpZXJPcHRpb25zKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5pbWFnZV9jbGFzc2lmaWVyLnByb3RvLkltYWdlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5pbWFnZV9jbGFzc2lmaWVyLnByb3RvLkltYWdlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaW1hZ2VfY2xhc3NpZmllci5wcm90by5JbWFnZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnN9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5pbWFnZV9jbGFzc2lmaWVyLnByb3RvLkltYWdlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IG1lc3NhZ2UuZ2V0QmFzZU9wdGlvbnMoKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXG4gICAgICAxLFxuICAgICAgZixcbiAgICAgIG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYi5CYXNlT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0Q2xhc3NpZmllck9wdGlvbnMoKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXG4gICAgICAyLFxuICAgICAgZixcbiAgICAgIG1lZGlhcGlwZV90YXNrc19jY19jb21wb25lbnRzX3Byb2Nlc3NvcnNfcHJvdG9fY2xhc3NpZmllcl9vcHRpb25zX3BiLkNsYXNzaWZpZXJPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxufTtcblxuXG5cbi8qKlxuICogQSB0dXBsZSBvZiB7ZmllbGQgbnVtYmVyLCBjbGFzcyBjb25zdHJ1Y3Rvcn0gZm9yIHRoZSBleHRlbnNpb25cbiAqIGZpZWxkIG5hbWVkIGBleHRgLlxuICogQHR5cGUgeyFqc3BiLkV4dGVuc2lvbkZpZWxkSW5mbzwhcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5pbWFnZV9jbGFzc2lmaWVyLnByb3RvLkltYWdlQ2xhc3NpZmllckdyYXBoT3B0aW9ucz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaW1hZ2VfY2xhc3NpZmllci5wcm90by5JbWFnZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMuZXh0ID0gbmV3IGpzcGIuRXh0ZW5zaW9uRmllbGRJbmZvKFxuICAgIDQ1NjM4MzM4MyxcbiAgICB7ZXh0OiAwfSxcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmltYWdlX2NsYXNzaWZpZXIucHJvdG8uSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zLFxuICAgICAvKiogQHR5cGUgez9mdW5jdGlvbigoYm9vbGVhbnx1bmRlZmluZWQpLCFqc3BiLk1lc3NhZ2U9KTogIU9iamVjdH0gKi8gKFxuICAgICAgICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5pbWFnZV9jbGFzc2lmaWVyLnByb3RvLkltYWdlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy50b09iamVjdCksXG4gICAgMCk7XG5cbm1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9vcHRpb25zX3BiLkNhbGN1bGF0b3JPcHRpb25zLmV4dGVuc2lvbnNCaW5hcnlbNDU2MzgzMzgzXSA9IG5ldyBqc3BiLkV4dGVuc2lvbkZpZWxkQmluYXJ5SW5mbyhcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmltYWdlX2NsYXNzaWZpZXIucHJvdG8uSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zLmV4dCxcbiAgICBqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZE1lc3NhZ2UsXG4gICAganNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlTWVzc2FnZSxcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmltYWdlX2NsYXNzaWZpZXIucHJvdG8uSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyLFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaW1hZ2VfY2xhc3NpZmllci5wcm90by5JbWFnZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyLFxuICAgIGZhbHNlKTtcbi8vIFRoaXMgcmVnaXN0ZXJzIHRoZSBleHRlbnNpb24gZmllbGQgd2l0aCB0aGUgZXh0ZW5kZWQgY2xhc3MsIHNvIHRoYXRcbi8vIHRvT2JqZWN0KCkgd2lsbCBmdW5jdGlvbiBjb3JyZWN0bHkuXG5tZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3Jfb3B0aW9uc19wYi5DYWxjdWxhdG9yT3B0aW9ucy5leHRlbnNpb25zWzQ1NjM4MzM4M10gPSBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmltYWdlX2NsYXNzaWZpZXIucHJvdG8uSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zLmV4dDtcblxuLyoqXG4gKiBvcHRpb25hbCBtZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9ucyBiYXNlX29wdGlvbnMgPSAxO1xuICogQHJldHVybiB7P3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmltYWdlX2NsYXNzaWZpZXIucHJvdG8uSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5nZXRCYXNlT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9uc30gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiLkJhc2VPcHRpb25zLCAxKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnN8dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaW1hZ2VfY2xhc3NpZmllci5wcm90by5JbWFnZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnN9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaW1hZ2VfY2xhc3NpZmllci5wcm90by5JbWFnZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLnNldEJhc2VPcHRpb25zID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaW1hZ2VfY2xhc3NpZmllci5wcm90by5JbWFnZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmltYWdlX2NsYXNzaWZpZXIucHJvdG8uSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5jbGVhckJhc2VPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldEJhc2VPcHRpb25zKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5pbWFnZV9jbGFzc2lmaWVyLnByb3RvLkltYWdlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuaGFzQmFzZU9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIG1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnMgY2xhc3NpZmllcl9vcHRpb25zID0gMjtcbiAqIEByZXR1cm4gez9wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmltYWdlX2NsYXNzaWZpZXIucHJvdG8uSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5nZXRDbGFzc2lmaWVyT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zfSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBtZWRpYXBpcGVfdGFza3NfY2NfY29tcG9uZW50c19wcm9jZXNzb3JzX3Byb3RvX2NsYXNzaWZpZXJfb3B0aW9uc19wYi5DbGFzc2lmaWVyT3B0aW9ucywgMikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnN8dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaW1hZ2VfY2xhc3NpZmllci5wcm90by5JbWFnZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnN9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaW1hZ2VfY2xhc3NpZmllci5wcm90by5JbWFnZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLnNldENsYXNzaWZpZXJPcHRpb25zID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaW1hZ2VfY2xhc3NpZmllci5wcm90by5JbWFnZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmltYWdlX2NsYXNzaWZpZXIucHJvdG8uSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5jbGVhckNsYXNzaWZpZXJPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldENsYXNzaWZpZXJPcHRpb25zKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5pbWFnZV9jbGFzc2lmaWVyLnByb3RvLkltYWdlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuaGFzQ2xhc3NpZmllck9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xufTtcblxuXG5cbi8qKlxuICogQSB0dXBsZSBvZiB7ZmllbGQgbnVtYmVyLCBjbGFzcyBjb25zdHJ1Y3Rvcn0gZm9yIHRoZSBleHRlbnNpb25cbiAqIGZpZWxkIG5hbWVkIGBleHRgLlxuICogQHR5cGUgeyFqc3BiLkV4dGVuc2lvbkZpZWxkSW5mbzwhcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5pbWFnZV9jbGFzc2lmaWVyLnByb3RvLkltYWdlQ2xhc3NpZmllckdyYXBoT3B0aW9ucz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaW1hZ2VfY2xhc3NpZmllci5wcm90by5JbWFnZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMuZXh0ID0gbmV3IGpzcGIuRXh0ZW5zaW9uRmllbGRJbmZvKFxuICAgIDQ1NjM4MzM4MyxcbiAgICB7ZXh0OiAwfSxcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmltYWdlX2NsYXNzaWZpZXIucHJvdG8uSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zLFxuICAgICAvKiogQHR5cGUgez9mdW5jdGlvbigoYm9vbGVhbnx1bmRlZmluZWQpLCFqc3BiLk1lc3NhZ2U9KTogIU9iamVjdH0gKi8gKFxuICAgICAgICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5pbWFnZV9jbGFzc2lmaWVyLnByb3RvLkltYWdlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy50b09iamVjdCksXG4gICAgMCk7XG5cbm1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9vcHRpb25zX3BiLkNhbGN1bGF0b3JPcHRpb25zLmV4dGVuc2lvbnNCaW5hcnlbNDU2MzgzMzgzXSA9IG5ldyBqc3BiLkV4dGVuc2lvbkZpZWxkQmluYXJ5SW5mbyhcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmltYWdlX2NsYXNzaWZpZXIucHJvdG8uSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zLmV4dCxcbiAgICBqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZE1lc3NhZ2UsXG4gICAganNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlTWVzc2FnZSxcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmltYWdlX2NsYXNzaWZpZXIucHJvdG8uSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyLFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaW1hZ2VfY2xhc3NpZmllci5wcm90by5JbWFnZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyLFxuICAgIGZhbHNlKTtcbi8vIFRoaXMgcmVnaXN0ZXJzIHRoZSBleHRlbnNpb24gZmllbGQgd2l0aCB0aGUgZXh0ZW5kZWQgY2xhc3MsIHNvIHRoYXRcbi8vIHRvT2JqZWN0KCkgd2lsbCBmdW5jdGlvbiBjb3JyZWN0bHkuXG5tZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3Jfb3B0aW9uc19wYi5DYWxjdWxhdG9yT3B0aW9ucy5leHRlbnNpb25zWzQ1NjM4MzM4M10gPSBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmltYWdlX2NsYXNzaWZpZXIucHJvdG8uSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zLmV4dDtcblxuZ29vZy5vYmplY3QuZXh0ZW5kKGV4cG9ydHMsIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaW1hZ2VfY2xhc3NpZmllci5wcm90byk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjIgVGhlIE1lZGlhUGlwZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb252ZXJ0QmFzZU9wdGlvbnNUb1Byb3RvID0gdm9pZCAwO1xuY29uc3QgaW5mZXJlbmNlX2NhbGN1bGF0b3JfcGJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9jYWxjdWxhdG9ycy90ZW5zb3IvaW5mZXJlbmNlX2NhbGN1bGF0b3JfcGJcIik7XG5jb25zdCBhY2NlbGVyYXRpb25fcGJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi90YXNrcy9jYy9jb3JlL3Byb3RvL2FjY2VsZXJhdGlvbl9wYlwiKTtcbmNvbnN0IGJhc2Vfb3B0aW9uc19wYl8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL3Rhc2tzL2NjL2NvcmUvcHJvdG8vYmFzZV9vcHRpb25zX3BiXCIpO1xuY29uc3QgZXh0ZXJuYWxfZmlsZV9wYl8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL3Rhc2tzL2NjL2NvcmUvcHJvdG8vZXh0ZXJuYWxfZmlsZV9wYlwiKTtcbi8vIFRoZSBPU1MgSlMgQVBJIGRvZXMgbm90IHN1cHBvcnQgdGhlIGJ1aWxkZXIgcGF0dGVybi5cbi8vIHRzbGludDpkaXNhYmxlOmpzcGItdXNlLWJ1aWxkZXItcGF0dGVyblxuLyoqXG4gKiBDb252ZXJ0cyBhIEJhc2VPcHRpb25zIEFQSSBvYmplY3QgdG8gaXRzIFByb3RvYnVmIHJlcHJlc2VudGF0aW9uLlxuICogQHRocm93cyBJZiBuZWl0aGVyIGEgbW9kZWwgYXNzc2V0IHBhdGggb3IgYnVmZmVyIGlzIHByb3ZpZGVkXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNvbnZlcnRCYXNlT3B0aW9uc1RvUHJvdG8odXBkYXRlZE9wdGlvbnMsIGN1cnJlbnRPcHRpb25zKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gY3VycmVudE9wdGlvbnMgPyBjdXJyZW50T3B0aW9ucy5jbG9uZSgpIDogbmV3IGJhc2Vfb3B0aW9uc19wYl8xLkJhc2VPcHRpb25zKCk7XG4gICAgYXdhaXQgY29uZmlndXJlRXh0ZXJuYWxGaWxlKHVwZGF0ZWRPcHRpb25zLCByZXN1bHQpO1xuICAgIGNvbmZpZ3VyZUFjY2VsZXJhdGlvbih1cGRhdGVkT3B0aW9ucywgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5jb252ZXJ0QmFzZU9wdGlvbnNUb1Byb3RvID0gY29udmVydEJhc2VPcHRpb25zVG9Qcm90bztcbi8qKlxuICogQ29uZmlndWVzIHRoZSBgZXh0ZXJuYWxGaWxlYCBvcHRpb24gYW5kIHZhbGlkYXRlcyB0aGF0IGEgc2luZ2xlIG1vZGVsIGlzXG4gKiBwcm92aWRlZC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gY29uZmlndXJlRXh0ZXJuYWxGaWxlKG9wdGlvbnMsIHByb3RvKSB7XG4gICAgY29uc3QgZXh0ZXJuYWxGaWxlID0gcHJvdG8uZ2V0TW9kZWxBc3NldCgpIHx8IG5ldyBleHRlcm5hbF9maWxlX3BiXzEuRXh0ZXJuYWxGaWxlKCk7XG4gICAgcHJvdG8uc2V0TW9kZWxBc3NldChleHRlcm5hbEZpbGUpO1xuICAgIGlmIChvcHRpb25zLm1vZGVsQXNzZXRQYXRoIHx8IG9wdGlvbnMubW9kZWxBc3NldEJ1ZmZlcikge1xuICAgICAgICBpZiAob3B0aW9ucy5tb2RlbEFzc2V0UGF0aCAmJiBvcHRpb25zLm1vZGVsQXNzZXRCdWZmZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHNldCBib3RoIGJhc2VPcHRpb25zLm1vZGVsQXNzZXRQYXRoIGFuZCBiYXNlT3B0aW9ucy5tb2RlbEFzc2V0QnVmZmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG1vZGVsQXNzZXRCdWZmZXIgPSBvcHRpb25zLm1vZGVsQXNzZXRCdWZmZXI7XG4gICAgICAgIGlmICghbW9kZWxBc3NldEJ1ZmZlcikge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChvcHRpb25zLm1vZGVsQXNzZXRQYXRoLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgbW9kZWxBc3NldEJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpO1xuICAgICAgICB9XG4gICAgICAgIGV4dGVybmFsRmlsZS5zZXRGaWxlQ29udGVudChtb2RlbEFzc2V0QnVmZmVyKTtcbiAgICB9XG4gICAgaWYgKCFleHRlcm5hbEZpbGUuaGFzRmlsZUNvbnRlbnQoKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VpdGhlciBiYXNlT3B0aW9ucy5tb2RlbEFzc2V0UGF0aCBvciBiYXNlT3B0aW9ucy5tb2RlbEFzc2V0QnVmZmVyIG11c3QgYmUgc2V0Jyk7XG4gICAgfVxufVxuLyoqIENvbmZpZ3VlcyB0aGUgYGFjY2VsZXJhdGlvbmAgb3B0aW9uLiAqL1xuZnVuY3Rpb24gY29uZmlndXJlQWNjZWxlcmF0aW9uKG9wdGlvbnMsIHByb3RvKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGFjY2VsZXJhdGlvbiA9IChfYSA9IHByb3RvLmdldEFjY2VsZXJhdGlvbigpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBuZXcgYWNjZWxlcmF0aW9uX3BiXzEuQWNjZWxlcmF0aW9uKCk7XG4gICAgaWYgKG9wdGlvbnMuZGVsZWdhdGUgPT09ICdncHUnKSB7XG4gICAgICAgIGFjY2VsZXJhdGlvbi5zZXRHcHUobmV3IGluZmVyZW5jZV9jYWxjdWxhdG9yX3BiXzEuSW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1KCkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYWNjZWxlcmF0aW9uLnNldFRmbGl0ZShuZXcgaW5mZXJlbmNlX2NhbGN1bGF0b3JfcGJfMS5JbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5UZkxpdGUoKSk7XG4gICAgfVxuICAgIHByb3RvLnNldEFjY2VsZXJhdGlvbihhY2NlbGVyYXRpb24pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWW1GelpWOXZjSFJwYjI1ekxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZMaTR2TGk0dkxpNHZMaTR2TGk0dkxpNHZiV1ZrYVdGd2FYQmxMM1JoYzJ0ekwzZGxZaTlqYjIxd2IyNWxiblJ6TDNCeWIyTmxjM052Y25NdlltRnpaVjl2Y0hScGIyNXpMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUczdPenM3T3pzN096czdPenM3UjBGalJ6czdPMEZCUlVnc2IwZEJRV3RITzBGQlEyeEhMSEZHUVVFMlJUdEJRVU0zUlN4eFJrRkJaMGM3UVVGRGFFY3NkVVpCUVRoRk8wRkJSemxGTEhWRVFVRjFSRHRCUVVOMlJDd3dRMEZCTUVNN1FVRkZNVU03T3p0SFFVZEhPMEZCUTBrc1MwRkJTeXhWUVVGVkxIbENRVUY1UWl4RFFVTXpReXhqUVVFeVFpeEZRVU16UWl4alFVRnBRenRKUVVOdVF5eE5RVUZOTEUxQlFVMHNSMEZEVWl4alFVRmpMRU5CUVVNc1EwRkJReXhEUVVGRExHTkJRV01zUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3cyUWtGQlowSXNSVUZCUlN4RFFVRkRPMGxCUlhKRkxFMUJRVTBzY1VKQlFYRkNMRU5CUVVNc1kwRkJZeXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzBsQlEzQkVMSEZDUVVGeFFpeERRVUZETEdOQlFXTXNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenRKUVVVNVF5eFBRVUZQTEUxQlFVMHNRMEZCUXp0QlFVTm9RaXhEUVVGRE8wRkJWa1FzT0VSQlZVTTdRVUZGUkRzN08wZEJSMGM3UVVGRFNDeExRVUZMTEZWQlFWVXNjVUpCUVhGQ0xFTkJRMmhETEU5QlFXOUNMRVZCUVVVc1MwRkJkVUk3U1VGREwwTXNUVUZCVFN4WlFVRlpMRWRCUVVjc1MwRkJTeXhEUVVGRExHRkJRV0VzUlVGQlJTeEpRVUZKTEVsQlFVa3NLMEpCUVZrc1JVRkJSU3hEUVVGRE8wbEJRMnBGTEV0QlFVc3NRMEZCUXl4aFFVRmhMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03U1VGRmJFTXNTVUZCU1N4UFFVRlBMRU5CUVVNc1kwRkJZeXhKUVVGSkxFOUJRVThzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSVHRSUVVOMFJDeEpRVUZKTEU5QlFVOHNRMEZCUXl4alFVRmpMRWxCUVVrc1QwRkJUeXhEUVVGRExHZENRVUZuUWl4RlFVRkZPMWxCUTNSRUxFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlExZ3NOa1ZCUVRaRkxFTkJRVU1zUTBGQlF6dFRRVU53Ump0UlFVVkVMRWxCUVVrc1owSkJRV2RDTEVkQlFVY3NUMEZCVHl4RFFVRkRMR2RDUVVGblFpeERRVUZETzFGQlEyaEVMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNSVUZCUlR0WlFVTnlRaXhOUVVGTkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1kwRkJaU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEVOQlFVTTdXVUZEYWtVc1owSkJRV2RDTEVkQlFVY3NTVUZCU1N4VlFVRlZMRU5CUVVNc1RVRkJUU3hSUVVGUkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTXNRMEZCUXp0VFFVTnFSVHRSUVVORUxGbEJRVmtzUTBGQlF5eGpRVUZqTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6dExRVU12UXp0SlFVVkVMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zWTBGQll5eEZRVUZGTEVWQlFVVTdVVUZEYkVNc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGRFdDd3JSVUZCSzBVc1EwRkJReXhEUVVGRE8wdEJRM1JHTzBGQlEwZ3NRMEZCUXp0QlFVVkVMREpEUVVFeVF6dEJRVU16UXl4VFFVRlRMSEZDUVVGeFFpeERRVUZETEU5QlFXOUNMRVZCUVVVc1MwRkJkVUk3TzBsQlF6RkZMRTFCUVUwc1dVRkJXU3hIUVVGSExFMUJRVUVzUzBGQlN5eERRVUZETEdWQlFXVXNSVUZCUlN4dFEwRkJTU3hKUVVGSkxEaENRVUZaTEVWQlFVVXNRMEZCUXp0SlFVTnVSU3hKUVVGSkxFOUJRVThzUTBGQlF5eFJRVUZSTEV0QlFVc3NTMEZCU3l4RlFVRkZPMUZCUXpsQ0xGbEJRVmtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4dlJFRkJNRUlzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJRenRMUVVOd1JUdFRRVUZOTzFGQlEwd3NXVUZCV1N4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxHOUVRVUV3UWl4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eERRVUZETzB0QlF6RkZPMGxCUTBRc1MwRkJTeXhEUVVGRExHVkJRV1VzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0QlFVTjBReXhEUVVGRElpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF5TWlCVWFHVWdUV1ZrYVdGUWFYQmxJRUYxZEdodmNuTXVJRUZzYkNCU2FXZG9kSE1nVW1WelpYSjJaV1F1WEc0Z0tseHVJQ29nVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUNBb2RHaGxJRndpVEdsalpXNXpaVndpS1R0Y2JpQXFJSGx2ZFNCdFlYa2dibTkwSUhWelpTQjBhR2x6SUdacGJHVWdaWGhqWlhCMElHbHVJR052YlhCc2FXRnVZMlVnZDJsMGFDQjBhR1VnVEdsalpXNXpaUzVjYmlBcUlGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1SUNwY2JpQXFJQ0FnSUNCb2RIUndPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjYmlBcVhHNGdLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc0lITnZablIzWVhKbFhHNGdLaUJrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc1hHNGdLaUJYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxrZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzVjYmlBcUlGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVJjYmlBcUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1SUNvdlhHNWNibWx0Y0c5eWRDQjdTVzVtWlhKbGJtTmxRMkZzWTNWc1lYUnZjazl3ZEdsdmJuTjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMMk5oYkdOMWJHRjBiM0p6TDNSbGJuTnZjaTlwYm1abGNtVnVZMlZmWTJGc1kzVnNZWFJ2Y2w5d1lpYzdYRzVwYlhCdmNuUWdlMEZqWTJWc1pYSmhkR2x2Ym4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmRHRnphM012WTJNdlkyOXlaUzl3Y205MGJ5OWhZMk5sYkdWeVlYUnBiMjVmY0dJbk8xeHVhVzF3YjNKMElIdENZWE5sVDNCMGFXOXVjeUJoY3lCQ1lYTmxUM0IwYVc5dWMxQnliM1J2ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5MFlYTnJjeTlqWXk5amIzSmxMM0J5YjNSdkwySmhjMlZmYjNCMGFXOXVjMTl3WWljN1hHNXBiWEJ2Y25RZ2UwVjRkR1Z5Ym1Gc1JtbHNaWDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2ZEdGemEzTXZZMk12WTI5eVpTOXdjbTkwYnk5bGVIUmxjbTVoYkY5bWFXeGxYM0JpSnp0Y2JtbHRjRzl5ZENCN1FtRnpaVTl3ZEdsdmJuTjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM1JoYzJ0ekwzZGxZaTlqYjNKbEwySmhjMlZmYjNCMGFXOXVjeWM3WEc1Y2JpOHZJRlJvWlNCUFUxTWdTbE1nUVZCSklHUnZaWE1nYm05MElITjFjSEJ2Y25RZ2RHaGxJR0oxYVd4a1pYSWdjR0YwZEdWeWJpNWNiaTh2SUhSemJHbHVkRHBrYVhOaFlteGxPbXB6Y0dJdGRYTmxMV0oxYVd4a1pYSXRjR0YwZEdWeWJseHVYRzR2S2lwY2JpQXFJRU52Ym5abGNuUnpJR0VnUW1GelpVOXdkR2x2Ym5NZ1FWQkpJRzlpYW1WamRDQjBieUJwZEhNZ1VISnZkRzlpZFdZZ2NtVndjbVZ6Wlc1MFlYUnBiMjR1WEc0Z0tpQkFkR2h5YjNkeklFbG1JRzVsYVhSb1pYSWdZU0J0YjJSbGJDQmhjM056WlhRZ2NHRjBhQ0J2Y2lCaWRXWm1aWElnYVhNZ2NISnZkbWxrWldSY2JpQXFMMXh1Wlhod2IzSjBJR0Z6ZVc1aklHWjFibU4wYVc5dUlHTnZiblpsY25SQ1lYTmxUM0IwYVc5dWMxUnZVSEp2ZEc4b1hHNGdJQ0FnZFhCa1lYUmxaRTl3ZEdsdmJuTTZJRUpoYzJWUGNIUnBiMjV6TEZ4dUlDQWdJR04xY25KbGJuUlBjSFJwYjI1elB6b2dRbUZ6WlU5d2RHbHZibk5RY205MGJ5azZJRkJ5YjIxcGMyVThRbUZ6WlU5d2RHbHZibk5RY205MGJ6NGdlMXh1SUNCamIyNXpkQ0J5WlhOMWJIUWdQVnh1SUNBZ0lDQWdZM1Z5Y21WdWRFOXdkR2x2Ym5NZ1B5QmpkWEp5Wlc1MFQzQjBhVzl1Y3k1amJHOXVaU2dwSURvZ2JtVjNJRUpoYzJWUGNIUnBiMjV6VUhKdmRHOG9LVHRjYmx4dUlDQmhkMkZwZENCamIyNW1hV2QxY21WRmVIUmxjbTVoYkVacGJHVW9kWEJrWVhSbFpFOXdkR2x2Ym5Nc0lISmxjM1ZzZENrN1hHNGdJR052Ym1acFozVnlaVUZqWTJWc1pYSmhkR2x2YmloMWNHUmhkR1ZrVDNCMGFXOXVjeXdnY21WemRXeDBLVHRjYmx4dUlDQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRU52Ym1acFozVmxjeUIwYUdVZ1lHVjRkR1Z5Ym1Gc1JtbHNaV0FnYjNCMGFXOXVJR0Z1WkNCMllXeHBaR0YwWlhNZ2RHaGhkQ0JoSUhOcGJtZHNaU0J0YjJSbGJDQnBjMXh1SUNvZ2NISnZkbWxrWldRdVhHNGdLaTljYm1GemVXNWpJR1oxYm1OMGFXOXVJR052Ym1acFozVnlaVVY0ZEdWeWJtRnNSbWxzWlNoY2JpQWdJQ0J2Y0hScGIyNXpPaUJDWVhObFQzQjBhVzl1Y3l3Z2NISnZkRzg2SUVKaGMyVlBjSFJwYjI1elVISnZkRzhwSUh0Y2JpQWdZMjl1YzNRZ1pYaDBaWEp1WVd4R2FXeGxJRDBnY0hKdmRHOHVaMlYwVFc5a1pXeEJjM05sZENncElIeDhJRzVsZHlCRmVIUmxjbTVoYkVacGJHVW9LVHRjYmlBZ2NISnZkRzh1YzJWMFRXOWtaV3hCYzNObGRDaGxlSFJsY201aGJFWnBiR1VwTzF4dVhHNGdJR2xtSUNodmNIUnBiMjV6TG0xdlpHVnNRWE56WlhSUVlYUm9JSHg4SUc5d2RHbHZibk11Ylc5a1pXeEJjM05sZEVKMVptWmxjaWtnZTF4dUlDQWdJR2xtSUNodmNIUnBiMjV6TG0xdlpHVnNRWE56WlhSUVlYUm9JQ1ltSUc5d2RHbHZibk11Ylc5a1pXeEJjM05sZEVKMVptWmxjaWtnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh1SUNBZ0lDQWdJQ0FnSUNkRFlXNXViM1FnYzJWMElHSnZkR2dnWW1GelpVOXdkR2x2Ym5NdWJXOWtaV3hCYzNObGRGQmhkR2dnWVc1a0lHSmhjMlZQY0hScGIyNXpMbTF2WkdWc1FYTnpaWFJDZFdabVpYSW5LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNaWFFnYlc5a1pXeEJjM05sZEVKMVptWmxjaUE5SUc5d2RHbHZibk11Ylc5a1pXeEJjM05sZEVKMVptWmxjanRjYmlBZ0lDQnBaaUFvSVcxdlpHVnNRWE56WlhSQ2RXWm1aWElwSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJSEpsYzNCdmJuTmxJRDBnWVhkaGFYUWdabVYwWTJnb2IzQjBhVzl1Y3k1dGIyUmxiRUZ6YzJWMFVHRjBhQ0V1ZEc5VGRISnBibWNvS1NrN1hHNGdJQ0FnSUNCdGIyUmxiRUZ6YzJWMFFuVm1abVZ5SUQwZ2JtVjNJRlZwYm5RNFFYSnlZWGtvWVhkaGFYUWdjbVZ6Y0c5dWMyVXVZWEp5WVhsQ2RXWm1aWElvS1NrN1hHNGdJQ0FnZlZ4dUlDQWdJR1Y0ZEdWeWJtRnNSbWxzWlM1elpYUkdhV3hsUTI5dWRHVnVkQ2h0YjJSbGJFRnpjMlYwUW5WbVptVnlLVHRjYmlBZ2ZWeHVYRzRnSUdsbUlDZ2haWGgwWlhKdVlXeEdhV3hsTG1oaGMwWnBiR1ZEYjI1MFpXNTBLQ2twSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ2RGYVhSb1pYSWdZbUZ6WlU5d2RHbHZibk11Ylc5a1pXeEJjM05sZEZCaGRHZ2diM0lnWW1GelpVOXdkR2x2Ym5NdWJXOWtaV3hCYzNObGRFSjFabVpsY2lCdGRYTjBJR0psSUhObGRDY3BPMXh1SUNCOVhHNTlYRzVjYmk4cUtpQkRiMjVtYVdkMVpYTWdkR2hsSUdCaFkyTmxiR1Z5WVhScGIyNWdJRzl3ZEdsdmJpNGdLaTljYm1aMWJtTjBhVzl1SUdOdmJtWnBaM1Z5WlVGalkyVnNaWEpoZEdsdmJpaHZjSFJwYjI1ek9pQkNZWE5sVDNCMGFXOXVjeXdnY0hKdmRHODZJRUpoYzJWUGNIUnBiMjV6VUhKdmRHOHBJSHRjYmlBZ1kyOXVjM1FnWVdOalpXeGxjbUYwYVc5dUlEMGdjSEp2ZEc4dVoyVjBRV05qWld4bGNtRjBhVzl1S0NrZ1B6OGdibVYzSUVGalkyVnNaWEpoZEdsdmJpZ3BPMXh1SUNCcFppQW9iM0IwYVc5dWN5NWtaV3hsWjJGMFpTQTlQVDBnSjJkd2RTY3BJSHRjYmlBZ0lDQmhZMk5sYkdWeVlYUnBiMjR1YzJWMFIzQjFLRzVsZHlCSmJtWmxjbVZ1WTJWRFlXeGpkV3hoZEc5eVQzQjBhVzl1Y3k1RVpXeGxaMkYwWlM1SGNIVW9LU2s3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnWVdOalpXeGxjbUYwYVc5dUxuTmxkRlJtYkdsMFpTaHVaWGNnU1c1bVpYSmxibU5sUTJGc1kzVnNZWFJ2Y2s5d2RHbHZibk11UkdWc1pXZGhkR1V1VkdaTWFYUmxLQ2twTzF4dUlDQjlYRzRnSUhCeWIzUnZMbk5sZEVGalkyVnNaWEpoZEdsdmJpaGhZMk5sYkdWeVlYUnBiMjRwTzF4dWZWeHVJbDE5IiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIyIFRoZSBNZWRpYVBpcGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29udmVydENsYXNzaWZpZXJPcHRpb25zVG9Qcm90byA9IHZvaWQgMDtcbmNvbnN0IGNsYXNzaWZpZXJfb3B0aW9uc19wYl8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL3Rhc2tzL2NjL2NvbXBvbmVudHMvcHJvY2Vzc29ycy9wcm90by9jbGFzc2lmaWVyX29wdGlvbnNfcGJcIik7XG4vKipcbiAqIENvbnZlcnRzIGEgQ2xhc3NpZmllck9wdGlvbnMgb2JqZWN0IHRvIGl0cyBQcm90byByZXByZXNlbnRhdGlvbiwgb3B0aW9uYWxseVxuICogYmFzZWQgb24gZXhpc3RpbmcgZGVmaW5pdGlvbi5cbiAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIG9iamVjdCB0byBjb252ZXJ0IHRvIGEgUHJvdG8uIE9ubHkgb3B0aW9ucyB0aGF0XG4gKiAgICAgYXJlIGV4cGxpY2x0eSBwcm92aWRlZCBhcmUgc2V0LlxuICogQHBhcmFtIGJhc2VPcHRpb25zIEEgYmFzZSBvYmplY3QgdGhhdCBvcHRpb25zIGNhbiBiZSBtZXJnZWQgaW50by5cbiAqL1xuZnVuY3Rpb24gY29udmVydENsYXNzaWZpZXJPcHRpb25zVG9Qcm90byhvcHRpb25zLCBiYXNlT3B0aW9ucykge1xuICAgIGNvbnN0IGNsYXNzaWZpZXJPcHRpb25zID0gYmFzZU9wdGlvbnMgPyBiYXNlT3B0aW9ucy5jbG9uZSgpIDogbmV3IGNsYXNzaWZpZXJfb3B0aW9uc19wYl8xLkNsYXNzaWZpZXJPcHRpb25zKCk7XG4gICAgaWYgKG9wdGlvbnMuZGlzcGxheU5hbWVzTG9jYWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2xhc3NpZmllck9wdGlvbnMuc2V0RGlzcGxheU5hbWVzTG9jYWxlKG9wdGlvbnMuZGlzcGxheU5hbWVzTG9jYWxlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3B0aW9ucy5kaXNwbGF5TmFtZXNMb2NhbGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjbGFzc2lmaWVyT3B0aW9ucy5jbGVhckRpc3BsYXlOYW1lc0xvY2FsZSgpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5tYXhSZXN1bHRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2xhc3NpZmllck9wdGlvbnMuc2V0TWF4UmVzdWx0cyhvcHRpb25zLm1heFJlc3VsdHMpO1xuICAgIH1cbiAgICBlbHNlIGlmICgnbWF4UmVzdWx0cycgaW4gb3B0aW9ucykgeyAvLyBDaGVjayBmb3IgdW5kZWZpbmVkXG4gICAgICAgIGNsYXNzaWZpZXJPcHRpb25zLmNsZWFyTWF4UmVzdWx0cygpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5zY29yZVRocmVzaG9sZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNsYXNzaWZpZXJPcHRpb25zLnNldFNjb3JlVGhyZXNob2xkKG9wdGlvbnMuc2NvcmVUaHJlc2hvbGQpO1xuICAgIH1cbiAgICBlbHNlIGlmICgnc2NvcmVUaHJlc2hvbGQnIGluIG9wdGlvbnMpIHsgLy8gQ2hlY2sgZm9yIHVuZGVmaW5lZFxuICAgICAgICBjbGFzc2lmaWVyT3B0aW9ucy5jbGVhclNjb3JlVGhyZXNob2xkKCk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmNhdGVnb3J5QWxsb3dsaXN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2xhc3NpZmllck9wdGlvbnMuc2V0Q2F0ZWdvcnlBbGxvd2xpc3RMaXN0KG9wdGlvbnMuY2F0ZWdvcnlBbGxvd2xpc3QpO1xuICAgIH1cbiAgICBlbHNlIGlmICgnY2F0ZWdvcnlBbGxvd2xpc3QnIGluIG9wdGlvbnMpIHsgLy8gQ2hlY2sgZm9yIHVuZGVmaW5lZFxuICAgICAgICBjbGFzc2lmaWVyT3B0aW9ucy5jbGVhckNhdGVnb3J5QWxsb3dsaXN0TGlzdCgpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5jYXRlZ29yeURlbnlsaXN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2xhc3NpZmllck9wdGlvbnMuc2V0Q2F0ZWdvcnlEZW55bGlzdExpc3Qob3B0aW9ucy5jYXRlZ29yeURlbnlsaXN0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoJ2NhdGVnb3J5RGVueWxpc3QnIGluIG9wdGlvbnMpIHsgLy8gQ2hlY2sgZm9yIHVuZGVmaW5lZFxuICAgICAgICBjbGFzc2lmaWVyT3B0aW9ucy5jbGVhckNhdGVnb3J5RGVueWxpc3RMaXN0KCk7XG4gICAgfVxuICAgIHJldHVybiBjbGFzc2lmaWVyT3B0aW9ucztcbn1cbmV4cG9ydHMuY29udmVydENsYXNzaWZpZXJPcHRpb25zVG9Qcm90byA9IGNvbnZlcnRDbGFzc2lmaWVyT3B0aW9uc1RvUHJvdG87XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZMnhoYzNOcFptbGxjbDl2Y0hScGIyNXpMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2TGk0dkxpNHZMaTR2TGk0dkxpNHZMaTR2YldWa2FXRndhWEJsTDNSaGMydHpMM2RsWWk5amIyMXdiMjVsYm5SekwzQnliMk5sYzNOdmNuTXZZMnhoYzNOcFptbGxjbDl2Y0hScGIyNXpMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUczdPenM3T3pzN096czdPenM3UjBGalJ6czdPMEZCUlVnc2EwaEJRVzFKTzBGQlIyNUpPenM3T3pzN1IwRk5SenRCUVVOSUxGTkJRV2RDTEN0Q1FVRXJRaXhEUVVNelF5eFBRVUV3UWl4RlFVTXhRaXhYUVVGdlF6dEpRVU4wUXl4TlFVRk5MR2xDUVVGcFFpeEhRVU51UWl4WFFVRlhMRU5CUVVNc1EwRkJReXhEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3g1UTBGQmMwSXNSVUZCUlN4RFFVRkRPMGxCUTNKRkxFbEJRVWtzVDBGQlR5eERRVUZETEd0Q1FVRnJRaXhMUVVGTExGTkJRVk1zUlVGQlJUdFJRVU0xUXl4cFFrRkJhVUlzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhQUVVGUExFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJRenRMUVVOeVJUdFRRVUZOTEVsQlFVa3NUMEZCVHl4RFFVRkRMR3RDUVVGclFpeExRVUZMTEZOQlFWTXNSVUZCUlR0UlFVTnVSQ3hwUWtGQmFVSXNRMEZCUXl4MVFrRkJkVUlzUlVGQlJTeERRVUZETzB0QlF6ZERPMGxCUlVRc1NVRkJTU3hQUVVGUExFTkJRVU1zVlVGQlZTeExRVUZMTEZOQlFWTXNSVUZCUlR0UlFVTndReXhwUWtGQmFVSXNRMEZCUXl4aFFVRmhMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzB0QlEzSkVPMU5CUVUwc1NVRkJTU3haUVVGWkxFbEJRVWtzVDBGQlR5eEZRVUZGTEVWQlFVY3NjMEpCUVhOQ08xRkJRek5FTEdsQ1FVRnBRaXhEUVVGRExHVkJRV1VzUlVGQlJTeERRVUZETzB0QlEzSkRPMGxCUlVRc1NVRkJTU3hQUVVGUExFTkJRVU1zWTBGQll5eExRVUZMTEZOQlFWTXNSVUZCUlR0UlFVTjRReXhwUWtGQmFVSXNRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eFBRVUZQTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNN1MwRkROMFE3VTBGQlRTeEpRVUZKTEdkQ1FVRm5RaXhKUVVGSkxFOUJRVThzUlVGQlJTeEZRVUZITEhOQ1FVRnpRanRSUVVNdlJDeHBRa0ZCYVVJc1EwRkJReXh0UWtGQmJVSXNSVUZCUlN4RFFVRkRPMHRCUTNwRE8wbEJSVVFzU1VGQlNTeFBRVUZQTEVOQlFVTXNhVUpCUVdsQ0xFdEJRVXNzVTBGQlV5eEZRVUZGTzFGQlF6TkRMR2xDUVVGcFFpeERRVUZETEhkQ1FVRjNRaXhEUVVGRExFOUJRVThzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRE8wdEJRM1pGTzFOQlFVMHNTVUZCU1N4dFFrRkJiVUlzU1VGQlNTeFBRVUZQTEVWQlFVVXNSVUZCUnl4elFrRkJjMEk3VVVGRGJFVXNhVUpCUVdsQ0xFTkJRVU1zTUVKQlFUQkNMRVZCUVVVc1EwRkJRenRMUVVOb1JEdEpRVVZFTEVsQlFVa3NUMEZCVHl4RFFVRkRMR2RDUVVGblFpeExRVUZMTEZOQlFWTXNSVUZCUlR0UlFVTXhReXhwUWtGQmFVSXNRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eFBRVUZQTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6dExRVU55UlR0VFFVRk5MRWxCUVVrc2EwSkJRV3RDTEVsQlFVa3NUMEZCVHl4RlFVRkZMRVZCUVVjc2MwSkJRWE5DTzFGQlEycEZMR2xDUVVGcFFpeERRVUZETEhsQ1FVRjVRaXhGUVVGRkxFTkJRVU03UzBGREwwTTdTVUZEUkN4UFFVRlBMR2xDUVVGcFFpeERRVUZETzBGQlF6TkNMRU5CUVVNN1FVRnVRMFFzTUVWQmJVTkRJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcVhHNGdLaUJEYjNCNWNtbG5hSFFnTWpBeU1pQlVhR1VnVFdWa2FXRlFhWEJsSUVGMWRHaHZjbk11SUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNiaUFxSUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJVZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUlDcGNiaUFxSUNBZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpQXFYRzRnS2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NJSE52Wm5SM1lYSmxYRzRnS2lCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhiaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNYRzRnS2lCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsa2dTMGxPUkN3Z1pXbDBhR1Z5SUdWNGNISmxjM01nYjNJZ2FXMXdiR2xsWkM1Y2JpQXFJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobElITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1SY2JpQXFJR3hwYldsMFlYUnBiMjV6SUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sTGx4dUlDb3ZYRzVjYm1sdGNHOXlkQ0I3UTJ4aGMzTnBabWxsY2s5d2RHbHZibk1nWVhNZ1EyeGhjM05wWm1sbGNrOXdkR2x2Ym5OUWNtOTBiMzBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2ZEdGemEzTXZZMk12WTI5dGNHOXVaVzUwY3k5d2NtOWpaWE56YjNKekwzQnliM1J2TDJOc1lYTnphV1pwWlhKZmIzQjBhVzl1YzE5d1lpYzdYRzVwYlhCdmNuUWdlME5zWVhOemFXWnBaWEpQY0hScGIyNXpmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTkwWVhOcmN5OTNaV0l2WTI5eVpTOWpiR0Z6YzJsbWFXVnlYMjl3ZEdsdmJuTW5PMXh1WEc0dktpcGNiaUFxSUVOdmJuWmxjblJ6SUdFZ1EyeGhjM05wWm1sbGNrOXdkR2x2Ym5NZ2IySnFaV04wSUhSdklHbDBjeUJRY205MGJ5QnlaWEJ5WlhObGJuUmhkR2x2Yml3Z2IzQjBhVzl1WVd4c2VWeHVJQ29nWW1GelpXUWdiMjRnWlhocGMzUnBibWNnWkdWbWFXNXBkR2x2Ymk1Y2JpQXFJRUJ3WVhKaGJTQnZjSFJwYjI1eklGUm9aU0J2Y0hScGIyNXpJRzlpYW1WamRDQjBieUJqYjI1MlpYSjBJSFJ2SUdFZ1VISnZkRzh1SUU5dWJIa2diM0IwYVc5dWN5QjBhR0YwWEc0Z0tpQWdJQ0FnWVhKbElHVjRjR3hwWTJ4MGVTQndjbTkyYVdSbFpDQmhjbVVnYzJWMExseHVJQ29nUUhCaGNtRnRJR0poYzJWUGNIUnBiMjV6SUVFZ1ltRnpaU0J2WW1wbFkzUWdkR2hoZENCdmNIUnBiMjV6SUdOaGJpQmlaU0J0WlhKblpXUWdhVzUwYnk1Y2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR052Ym5abGNuUkRiR0Z6YzJsbWFXVnlUM0IwYVc5dWMxUnZVSEp2ZEc4b1hHNGdJQ0FnYjNCMGFXOXVjem9nUTJ4aGMzTnBabWxsY2s5d2RHbHZibk1zWEc0Z0lDQWdZbUZ6WlU5d2RHbHZibk0vT2lCRGJHRnpjMmxtYVdWeVQzQjBhVzl1YzFCeWIzUnZLVG9nUTJ4aGMzTnBabWxsY2s5d2RHbHZibk5RY205MGJ5QjdYRzRnSUdOdmJuTjBJR05zWVhOemFXWnBaWEpQY0hScGIyNXpJRDFjYmlBZ0lDQWdJR0poYzJWUGNIUnBiMjV6SUQ4Z1ltRnpaVTl3ZEdsdmJuTXVZMnh2Ym1Vb0tTQTZJRzVsZHlCRGJHRnpjMmxtYVdWeVQzQjBhVzl1YzFCeWIzUnZLQ2s3WEc0Z0lHbG1JQ2h2Y0hScGIyNXpMbVJwYzNCc1lYbE9ZVzFsYzB4dlkyRnNaU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ1kyeGhjM05wWm1sbGNrOXdkR2x2Ym5NdWMyVjBSR2x6Y0d4aGVVNWhiV1Z6VEc5allXeGxLRzl3ZEdsdmJuTXVaR2x6Y0d4aGVVNWhiV1Z6VEc5allXeGxLVHRjYmlBZ2ZTQmxiSE5sSUdsbUlDaHZjSFJwYjI1ekxtUnBjM0JzWVhsT1lXMWxjMHh2WTJGc1pTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnWTJ4aGMzTnBabWxsY2s5d2RHbHZibk11WTJ4bFlYSkVhWE53YkdGNVRtRnRaWE5NYjJOaGJHVW9LVHRjYmlBZ2ZWeHVYRzRnSUdsbUlDaHZjSFJwYjI1ekxtMWhlRkpsYzNWc2RITWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUdOc1lYTnphV1pwWlhKUGNIUnBiMjV6TG5ObGRFMWhlRkpsYzNWc2RITW9iM0IwYVc5dWN5NXRZWGhTWlhOMWJIUnpLVHRjYmlBZ2ZTQmxiSE5sSUdsbUlDZ25iV0Y0VW1WemRXeDBjeWNnYVc0Z2IzQjBhVzl1Y3lrZ2V5QWdMeThnUTJobFkyc2dabTl5SUhWdVpHVm1hVzVsWkZ4dUlDQWdJR05zWVhOemFXWnBaWEpQY0hScGIyNXpMbU5zWldGeVRXRjRVbVZ6ZFd4MGN5Z3BPMXh1SUNCOVhHNWNiaUFnYVdZZ0tHOXdkR2x2Ym5NdWMyTnZjbVZVYUhKbGMyaHZiR1FnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lHTnNZWE56YVdacFpYSlBjSFJwYjI1ekxuTmxkRk5qYjNKbFZHaHlaWE5vYjJ4a0tHOXdkR2x2Ym5NdWMyTnZjbVZVYUhKbGMyaHZiR1FwTzF4dUlDQjlJR1ZzYzJVZ2FXWWdLQ2R6WTI5eVpWUm9jbVZ6YUc5c1pDY2dhVzRnYjNCMGFXOXVjeWtnZXlBZ0x5OGdRMmhsWTJzZ1ptOXlJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lHTnNZWE56YVdacFpYSlBjSFJwYjI1ekxtTnNaV0Z5VTJOdmNtVlVhSEpsYzJodmJHUW9LVHRjYmlBZ2ZWeHVYRzRnSUdsbUlDaHZjSFJwYjI1ekxtTmhkR1ZuYjNKNVFXeHNiM2RzYVhOMElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0JqYkdGemMybG1hV1Z5VDNCMGFXOXVjeTV6WlhSRFlYUmxaMjl5ZVVGc2JHOTNiR2x6ZEV4cGMzUW9iM0IwYVc5dWN5NWpZWFJsWjI5eWVVRnNiRzkzYkdsemRDazdYRzRnSUgwZ1pXeHpaU0JwWmlBb0oyTmhkR1ZuYjNKNVFXeHNiM2RzYVhOMEp5QnBiaUJ2Y0hScGIyNXpLU0I3SUNBdkx5QkRhR1ZqYXlCbWIzSWdkVzVrWldacGJtVmtYRzRnSUNBZ1kyeGhjM05wWm1sbGNrOXdkR2x2Ym5NdVkyeGxZWEpEWVhSbFoyOXllVUZzYkc5M2JHbHpkRXhwYzNRb0tUdGNiaUFnZlZ4dVhHNGdJR2xtSUNodmNIUnBiMjV6TG1OaGRHVm5iM0o1UkdWdWVXeHBjM1FnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lHTnNZWE56YVdacFpYSlBjSFJwYjI1ekxuTmxkRU5oZEdWbmIzSjVSR1Z1ZVd4cGMzUk1hWE4wS0c5d2RHbHZibk11WTJGMFpXZHZjbmxFWlc1NWJHbHpkQ2s3WEc0Z0lIMGdaV3h6WlNCcFppQW9KMk5oZEdWbmIzSjVSR1Z1ZVd4cGMzUW5JR2x1SUc5d2RHbHZibk1wSUhzZ0lDOHZJRU5vWldOcklHWnZjaUIxYm1SbFptbHVaV1JjYmlBZ0lDQmpiR0Z6YzJsbWFXVnlUM0IwYVc5dWN5NWpiR1ZoY2tOaGRHVm5iM0o1UkdWdWVXeHBjM1JNYVhOMEtDazdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHTnNZWE56YVdacFpYSlBjSFJwYjI1ek8xeHVmVnh1SWwxOSIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMiBUaGUgTWVkaWFQaXBlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbnZlcnRGcm9tQ2xhc3NpZmljYXRpb25SZXN1bHRQcm90byA9IHZvaWQgMDtcbmNvbnN0IERFRkFVTFRfSU5ERVggPSAtMTtcbmNvbnN0IERFRkFVTFRfU0NPUkUgPSAwLjA7XG4vKipcbiAqIENvbnZlcnRzIGEgQ2xhc3NpZmljYXRpb25zIHByb3RvIHRvIGEgQ2xhc3NpZmljYXRpb25zIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gY29udmVydEZyb21DbGFzc2lmaWNhdGlvbnNQcm90byhzb3VyY2UpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgY29uc3QgY2F0ZWdvcmllcyA9IChfYiA9IChfYSA9IHNvdXJjZS5nZXRDbGFzc2lmaWNhdGlvbkxpc3QoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldENsYXNzaWZpY2F0aW9uTGlzdCgpLm1hcChjbGFzc2lmaWNhdGlvbiA9PiB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluZGV4OiAoX2EgPSBjbGFzc2lmaWNhdGlvbi5nZXRJbmRleCgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBERUZBVUxUX0lOREVYLFxuICAgICAgICAgICAgc2NvcmU6IChfYiA9IGNsYXNzaWZpY2F0aW9uLmdldFNjb3JlKCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IERFRkFVTFRfU0NPUkUsXG4gICAgICAgICAgICBjYXRlZ29yeU5hbWU6IChfYyA9IGNsYXNzaWZpY2F0aW9uLmdldExhYmVsKCkpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6ICcnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6IChfZCA9IGNsYXNzaWZpY2F0aW9uLmdldERpc3BsYXlOYW1lKCkpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6ICcnLFxuICAgICAgICB9O1xuICAgIH0pKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBbXTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjYXRlZ29yaWVzLFxuICAgICAgICBoZWFkSW5kZXg6IChfYyA9IHNvdXJjZS5nZXRIZWFkSW5kZXgoKSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogREVGQVVMVF9JTkRFWCxcbiAgICAgICAgaGVhZE5hbWU6IChfZCA9IHNvdXJjZS5nZXRIZWFkTmFtZSgpKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAnJyxcbiAgICB9O1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIENsYXNzaWZpY2F0aW9uUmVzdWx0IHByb3RvIHRvIGEgQ2xhc3NpZmljYXRpb25SZXN1bHQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBjb252ZXJ0RnJvbUNsYXNzaWZpY2F0aW9uUmVzdWx0UHJvdG8oc291cmNlKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICBjbGFzc2lmaWNhdGlvbnM6IHNvdXJjZS5nZXRDbGFzc2lmaWNhdGlvbnNMaXN0KCkubWFwKGNsYXNzaWZpZmljYXRpb25zID0+IGNvbnZlcnRGcm9tQ2xhc3NpZmljYXRpb25zUHJvdG8oY2xhc3NpZmlmaWNhdGlvbnMpKVxuICAgIH07XG4gICAgaWYgKHNvdXJjZS5oYXNUaW1lc3RhbXBNcygpKSB7XG4gICAgICAgIHJlc3VsdC50aW1lc3RhbXBNcyA9IHNvdXJjZS5nZXRUaW1lc3RhbXBNcygpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5jb252ZXJ0RnJvbUNsYXNzaWZpY2F0aW9uUmVzdWx0UHJvdG8gPSBjb252ZXJ0RnJvbUNsYXNzaWZpY2F0aW9uUmVzdWx0UHJvdG87XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZMnhoYzNOcFptbGxjbDl5WlhOMWJIUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk4dUxpOHVMaTh1TGk4dUxpOHVMaTl0WldScFlYQnBjR1V2ZEdGemEzTXZkMlZpTDJOdmJYQnZibVZ1ZEhNdmNISnZZMlZ6YzI5eWN5OWpiR0Z6YzJsbWFXVnlYM0psYzNWc2RDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN096czdPenM3T3pzN096czdPMGRCWTBjN096dEJRVXRJTEUxQlFVMHNZVUZCWVN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRM3BDTEUxQlFVMHNZVUZCWVN4SFFVRkhMRWRCUVVjc1EwRkJRenRCUVVVeFFqczdSMEZGUnp0QlFVTklMRk5CUVZNc0swSkJRU3RDTEVOQlFVTXNUVUZCTkVJN08wbEJSVzVGTEUxQlFVMHNWVUZCVlN4SFFVTmFMRTFCUVVFc1RVRkJRU3hOUVVGTkxFTkJRVU1zY1VKQlFYRkNMRVZCUVVVc01FTkJRVVVzY1VKQlFYRkNMRWRCUVVjc1IwRkJSeXhEUVVOMlJDeGpRVUZqTEVOQlFVTXNSVUZCUlRzN1VVRkRaaXhQUVVGUE8xbEJRMHdzUzBGQlN5eEZRVUZGTEUxQlFVRXNZMEZCWXl4RFFVRkRMRkZCUVZFc1JVRkJSU3h0UTBGQlNTeGhRVUZoTzFsQlEycEVMRXRCUVVzc1JVRkJSU3hOUVVGQkxHTkJRV01zUTBGQlF5eFJRVUZSTEVWQlFVVXNiVU5CUVVrc1lVRkJZVHRaUVVOcVJDeFpRVUZaTEVWQlFVVXNUVUZCUVN4alFVRmpMRU5CUVVNc1VVRkJVU3hGUVVGRkxHMURRVUZKTEVWQlFVVTdXVUZETjBNc1YwRkJWeXhGUVVGRkxFMUJRVUVzWTBGQll5eERRVUZETEdOQlFXTXNSVUZCUlN4dFEwRkJTU3hGUVVGRk8xTkJRMjVFTEVOQlFVTTdTVUZEU2l4RFFVRkRMRU5CUVVNc2JVTkJRMDRzUlVGQlJTeERRVUZETzBsQlExQXNUMEZCVHp0UlFVTk1MRlZCUVZVN1VVRkRWaXhUUVVGVExFVkJRVVVzVFVGQlFTeE5RVUZOTEVOQlFVTXNXVUZCV1N4RlFVRkZMRzFEUVVGSkxHRkJRV0U3VVVGRGFrUXNVVUZCVVN4RlFVRkZMRTFCUVVFc1RVRkJUU3hEUVVGRExGZEJRVmNzUlVGQlJTeHRRMEZCU1N4RlFVRkZPMHRCUTNKRExFTkJRVU03UVVGRFNpeERRVUZETzBGQlJVUTdPMGRCUlVjN1FVRkRTQ3hUUVVGblFpeHZRMEZCYjBNc1EwRkRhRVFzVFVGQmFVTTdTVUZEYmtNc1RVRkJUU3hOUVVGTkxFZEJRWGxDTzFGQlEyNURMR1ZCUVdVc1JVRkJSU3hOUVVGTkxFTkJRVU1zYzBKQlFYTkNMRVZCUVVVc1EwRkJReXhIUVVGSExFTkJRMmhFTEdsQ1FVRnBRaXhEUVVGRExFVkJRVVVzUTBGQlF5d3JRa0ZCSzBJc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPMHRCUXpkRkxFTkJRVU03U1VGRFJpeEpRVUZKTEUxQlFVMHNRMEZCUXl4alFVRmpMRVZCUVVVc1JVRkJSVHRSUVVNelFpeE5RVUZOTEVOQlFVTXNWMEZCVnl4SFFVRkhMRTFCUVUwc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlF6dExRVU01UXp0SlFVTkVMRTlCUVU4c1RVRkJUU3hEUVVGRE8wRkJRMmhDTEVOQlFVTTdRVUZXUkN4dlJrRlZReUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01qSWdWR2hsSUUxbFpHbGhVR2x3WlNCQmRYUm9iM0p6TGlCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlNCY0lreHBZMlZ1YzJWY0lpazdYRzRnS2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhHNGdLaUJaYjNVZ2JXRjVJRzlpZEdGcGJpQmhJR052Y0hrZ2IyWWdkR2hsSUV4cFkyVnVjMlVnWVhSY2JpQXFYRzRnS2lBZ0lDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh1SUNvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhHNGdLaUJUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pTQnpjR1ZqYVdacFl5QnNZVzVuZFdGblpTQm5iM1psY201cGJtY2djR1Z5YldsemMybHZibk1nWVc1a1hHNGdLaUJzYVcxcGRHRjBhVzl1Y3lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFMMXh1WEc1cGJYQnZjblFnZTBOc1lYTnphV1pwWTJGMGFXOXVVbVZ6ZFd4MElHRnpJRU5zWVhOemFXWnBZMkYwYVc5dVVtVnpkV3gwVUhKdmRHOHNJRU5zWVhOemFXWnBZMkYwYVc5dWN5QmhjeUJEYkdGemMybG1hV05oZEdsdmJuTlFjbTkwYjMwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmRHRnphM012WTJNdlkyOXRjRzl1Wlc1MGN5OWpiMjUwWVdsdVpYSnpMM0J5YjNSdkwyTnNZWE56YVdacFkyRjBhVzl1YzE5d1lpYzdYRzVwYlhCdmNuUWdlME5zWVhOemFXWnBZMkYwYVc5dVVtVnpkV3gwTENCRGJHRnpjMmxtYVdOaGRHbHZibk45SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNSaGMydHpMM2RsWWk5amIyMXdiMjVsYm5SekwyTnZiblJoYVc1bGNuTXZZMnhoYzNOcFptbGpZWFJwYjI1ZmNtVnpkV3gwSnp0Y2JseHVZMjl1YzNRZ1JFVkdRVlZNVkY5SlRrUkZXQ0E5SUMweE8xeHVZMjl1YzNRZ1JFVkdRVlZNVkY5VFEwOVNSU0E5SURBdU1EdGNibHh1THlvcVhHNGdLaUJEYjI1MlpYSjBjeUJoSUVOc1lYTnphV1pwWTJGMGFXOXVjeUJ3Y205MGJ5QjBieUJoSUVOc1lYTnphV1pwWTJGMGFXOXVjeUJ2WW1wbFkzUXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHTnZiblpsY25SR2NtOXRRMnhoYzNOcFptbGpZWFJwYjI1elVISnZkRzhvYzI5MWNtTmxPaUJEYkdGemMybG1hV05oZEdsdmJuTlFjbTkwYnlrNlhHNGdJQ0FnUTJ4aGMzTnBabWxqWVhScGIyNXpJSHRjYmlBZ1kyOXVjM1FnWTJGMFpXZHZjbWxsY3lBOVhHNGdJQ0FnSUNCemIzVnlZMlV1WjJWMFEyeGhjM05wWm1sallYUnBiMjVNYVhOMEtDay9MbWRsZEVOc1lYTnphV1pwWTJGMGFXOXVUR2x6ZENncExtMWhjQ2hjYmlBZ0lDQWdJQ0FnSUNCamJHRnpjMmxtYVdOaGRHbHZiaUE5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBibVJsZURvZ1kyeGhjM05wWm1sallYUnBiMjR1WjJWMFNXNWtaWGdvS1NBL1B5QkVSVVpCVlV4VVgwbE9SRVZZTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTI5eVpUb2dZMnhoYzNOcFptbGpZWFJwYjI0dVoyVjBVMk52Y21Vb0tTQS9QeUJFUlVaQlZVeFVYMU5EVDFKRkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYUmxaMjl5ZVU1aGJXVTZJR05zWVhOemFXWnBZMkYwYVc5dUxtZGxkRXhoWW1Wc0tDa2dQejhnSnljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdScGMzQnNZWGxPWVcxbE9pQmpiR0Z6YzJsbWFXTmhkR2x2Ymk1blpYUkVhWE53YkdGNVRtRnRaU2dwSUQ4L0lDY25MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0I5S1NBL1AxeHVJQ0FnSUNBZ1cxMDdYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdZMkYwWldkdmNtbGxjeXhjYmlBZ0lDQm9aV0ZrU1c1a1pYZzZJSE52ZFhKalpTNW5aWFJJWldGa1NXNWtaWGdvS1NBL1B5QkVSVVpCVlV4VVgwbE9SRVZZTEZ4dUlDQWdJR2hsWVdST1lXMWxPaUJ6YjNWeVkyVXVaMlYwU0dWaFpFNWhiV1VvS1NBL1B5QW5KeXhjYmlBZ2ZUdGNibjFjYmx4dUx5b3FYRzRnS2lCRGIyNTJaWEowY3lCaElFTnNZWE56YVdacFkyRjBhVzl1VW1WemRXeDBJSEJ5YjNSdklIUnZJR0VnUTJ4aGMzTnBabWxqWVhScGIyNVNaWE4xYkhRZ2IySnFaV04wTGx4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdZMjl1ZG1WeWRFWnliMjFEYkdGemMybG1hV05oZEdsdmJsSmxjM1ZzZEZCeWIzUnZLRnh1SUNBZ0lITnZkWEpqWlRvZ1EyeGhjM05wWm1sallYUnBiMjVTWlhOMWJIUlFjbTkwYnlrNklFTnNZWE56YVdacFkyRjBhVzl1VW1WemRXeDBJSHRjYmlBZ1kyOXVjM1FnY21WemRXeDBPaUJEYkdGemMybG1hV05oZEdsdmJsSmxjM1ZzZENBOUlIdGNiaUFnSUNCamJHRnpjMmxtYVdOaGRHbHZibk02SUhOdmRYSmpaUzVuWlhSRGJHRnpjMmxtYVdOaGRHbHZibk5NYVhOMEtDa3ViV0Z3S0Z4dUlDQWdJQ0FnSUNCamJHRnpjMmxtYVdacFkyRjBhVzl1Y3lBOVBpQmpiMjUyWlhKMFJuSnZiVU5zWVhOemFXWnBZMkYwYVc5dWMxQnliM1J2S0dOc1lYTnphV1pwWm1sallYUnBiMjV6S1NsY2JpQWdmVHRjYmlBZ2FXWWdLSE52ZFhKalpTNW9ZWE5VYVcxbGMzUmhiWEJOY3lncEtTQjdYRzRnSUNBZ2NtVnpkV3gwTG5ScGJXVnpkR0Z0Y0UxeklEMGdjMjkxY21ObExtZGxkRlJwYldWemRHRnRjRTF6S0NrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYm4xY2JpSmRmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN1cHBvcnRNb2RlbFJlc291cmNlc0dyYXBoU2VydmljZSA9IHZvaWQgMDtcbi8qKlxuICogQW4gaW1wbGVtZW50YXRpb24gb2YgV2FzbU1lZGlhUGlwZUxpYiB0aGF0IHN1cHBvcnRzIHJlZ2lzdGVyaW5nIG1vZGVsXG4gKiByZXNvdXJjZXMgdG8gYSBjYWNoZSwgaW4gdGhlIGZvcm0gb2YgYSBHcmFwaFNlcnZpY2UgQysrLXNpZGUuIFdlIGltcGxlbWVudCBhc1xuICogYSBwcm9wZXIgVFMgbWl4aW4sIHRvIGFsbG93IGZvciBlZmZlY3RpdmUgbXVsdGlwbGUgaW5oZXJpdGFuY2UuIFNhbXBsZSB1c2FnZTpcbiAqIGBjb25zdCBXYXNtTWVkaWFQaXBlSW1hZ2VMaWIgPSBTdXBwb3J0TW9kZWxSZXNvdXJjZXNHcmFwaFNlcnZpY2UoXG4gKiAgICAgV2FzbU1lZGlhUGlwZUxpYik7YFxuICovXG4vLyB0c2xpbnQ6ZGlzYWJsZTplbmZvcmNlLW5hbWUtY2FzaW5nXG5mdW5jdGlvbiBTdXBwb3J0TW9kZWxSZXNvdXJjZXNHcmFwaFNlcnZpY2UoQmFzZSkge1xuICAgIHJldHVybiBjbGFzcyBleHRlbmRzIEJhc2Uge1xuICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOmVuZm9yY2UtbmFtZS1jYXNpbmdcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluc3RydWN0cyB0aGUgZ3JhcGggcnVubmVyIHRvIHVzZSB0aGUgbW9kZWwgcmVzb3VyY2UgY2FjaGluZyBncmFwaFxuICAgICAgICAgKiBzZXJ2aWNlIGZvciBib3RoIGdyYXBoIGV4cGFuc2lvbi9pbmludGlhbGl6YXRpb24sIGFzIHdlbGwgYXMgZm9yIGdyYXBoXG4gICAgICAgICAqIHJ1bi5cbiAgICAgICAgICovXG4gICAgICAgIHJlZ2lzdGVyTW9kZWxSZXNvdXJjZXNHcmFwaFNlcnZpY2UoKSB7XG4gICAgICAgICAgICB0aGlzLndhc21Nb2R1bGVcbiAgICAgICAgICAgICAgICAuX3JlZ2lzdGVyTW9kZWxSZXNvdXJjZXNHcmFwaFNlcnZpY2UoKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnRzLlN1cHBvcnRNb2RlbFJlc291cmNlc0dyYXBoU2VydmljZSA9IFN1cHBvcnRNb2RlbFJlc291cmNlc0dyYXBoU2VydmljZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWNtVm5hWE4wWlhKZmJXOWtaV3hmY21WemIzVnlZMlZ6WDJkeVlYQm9YM05sY25acFkyVXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk4dUxpOHVMaTh1TGk5dFpXUnBZWEJwY0dVdmQyVmlMMmR5WVhCb1gzSjFibTVsY2k5eVpXZHBjM1JsY2w5dGIyUmxiRjl5WlhOdmRYSmpaWE5mWjNKaGNHaGZjMlZ5ZG1salpTNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3UVVGclFrRTdPenM3T3p0SFFVMUhPMEZCUTBnc2NVTkJRWEZETzBGQlEzSkRMRk5CUVdkQ0xHbERRVUZwUXl4RFFVTTNReXhKUVVGWE8wbEJRMklzVDBGQlR5eExRVUZOTEZOQlFWRXNTVUZCU1R0UlFVTjJRaXh2UTBGQmIwTTdVVUZEY0VNN096czdWMEZKUnp0UlFVTklMR3REUVVGclF6dFpRVU12UWl4SlFVRkpMRU5CUVVNc1ZVRkJNRVE3YVVKQlF6TkVMRzFEUVVGdFF5eEZRVUZGTEVOQlFVTTdVVUZETjBNc1EwRkJRenRMUVVOR0xFTkJRVU03UVVGRFNpeERRVUZETzBGQlpFUXNPRVZCWTBNaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2UxZGhjMjFOWldScFlWQnBjR1ZNYVdKOUlHWnliMjBnSnk0dmQyRnpiVjl0WldScFlYQnBjR1ZmYkdsaUp6dGNibHh1THlvcVhHNGdLaUJYWlNCbGVIUmxibVFnWm5KdmJTQmhJRmRoYzIxTlpXUnBZVkJwY0dWTWFXSWdZMjl1YzNSeWRXTjBiM0l1SUZSb2FYTWdaVzV6ZFhKbGN5QnZkWElnYldsNGFXNGdhR0Z6WEc0Z0tpQmhZMk5sYzNNZ2RHOGdkR2hsSUhkaGMyMU5iMlIxYkdVc0lHRnRiMjVuSUc5MGFHVnlJSFJvYVc1bmN5NGdWR2hsSUdCaGJubGdJSFI1Y0dVZ2FYTWdjbVZ4ZFdseVpXUWdabTl5WEc0Z0tpQnRhWGhwYmlCamIyNXpkSEoxWTNSdmNuTXVYRzRnS2k5Y2JpOHZJSFJ6YkdsdWREcGthWE5oWW14bExXNWxlSFF0YkdsdVpUcHVieTFoYm5sY2JuUjVjR1VnVEdsaVEyOXVjM1J5ZFdOMGIzSWdQU0J1WlhjZ0tDNHVMbUZ5WjNNNklHRnVlVnRkS1NBOVBpQlhZWE50VFdWa2FXRlFhWEJsVEdsaU8xeHVYRzR2S2lwY2JpQXFJRVJsWTJ4aGNtRjBhVzl1Y3lCbWIzSWdSVzF6WTNKcGNIUmxiaWR6SUZkbFlrRnpjMlZ0WW14NUlFMXZaSFZzWlNCaVpXaGhkbWx2Y2l3Z2MyOGdWRk1nWTI5dGNHbHNaWEpjYmlBcUlHUnZaWE51SjNRZ1luSmxZV3NnYjNWeUlFcFRMME1yS3lCaWNtbGtaMlV1WEc0Z0tpOWNibVY0Y0c5eWRDQmtaV05zWVhKbElHbHVkR1Z5Wm1GalpTQlhZWE50VFc5a2RXeGxVbVZuYVhOMFpYSk5iMlJsYkZKbGMyOTFjbU5sY3lCN1hHNGdJRjl5WldkcGMzUmxjazF2WkdWc1VtVnpiM1Z5WTJWelIzSmhjR2hUWlhKMmFXTmxPaUFvS1NBOVBpQjJiMmxrTzF4dWZWeHVYRzR2S2lwY2JpQXFJRUZ1SUdsdGNHeGxiV1Z1ZEdGMGFXOXVJRzltSUZkaGMyMU5aV1JwWVZCcGNHVk1hV0lnZEdoaGRDQnpkWEJ3YjNKMGN5QnlaV2RwYzNSbGNtbHVaeUJ0YjJSbGJGeHVJQ29nY21WemIzVnlZMlZ6SUhSdklHRWdZMkZqYUdVc0lHbHVJSFJvWlNCbWIzSnRJRzltSUdFZ1IzSmhjR2hUWlhKMmFXTmxJRU1yS3kxemFXUmxMaUJYWlNCcGJYQnNaVzFsYm5RZ1lYTmNiaUFxSUdFZ2NISnZjR1Z5SUZSVElHMXBlR2x1TENCMGJ5QmhiR3h2ZHlCbWIzSWdaV1ptWldOMGFYWmxJRzExYkhScGNHeGxJR2x1YUdWeWFYUmhibU5sTGlCVFlXMXdiR1VnZFhOaFoyVTZYRzRnS2lCZ1kyOXVjM1FnVjJGemJVMWxaR2xoVUdsd1pVbHRZV2RsVEdsaUlEMGdVM1Z3Y0c5eWRFMXZaR1ZzVW1WemIzVnlZMlZ6UjNKaGNHaFRaWEoyYVdObEtGeHVJQ29nSUNBZ0lGZGhjMjFOWldScFlWQnBjR1ZNYVdJcE8yQmNiaUFxTDF4dUx5OGdkSE5zYVc1ME9tUnBjMkZpYkdVNlpXNW1iM0pqWlMxdVlXMWxMV05oYzJsdVoxeHVaWGh3YjNKMElHWjFibU4wYVc5dUlGTjFjSEJ2Y25STmIyUmxiRkpsYzI5MWNtTmxjMGR5WVhCb1UyVnlkbWxqWlR4VVFtRnpaU0JsZUhSbGJtUnpJRXhwWWtOdmJuTjBjblZqZEc5eVBpaGNiaUFnSUNCQ1lYTmxPaUJVUW1GelpTa2dlMXh1SUNCeVpYUjFjbTRnWTJ4aGMzTWdaWGgwWlc1a2N5QkNZWE5sSUh0Y2JpQWdJQ0F2THlCMGMyeHBiblE2Wlc1aFlteGxPbVZ1Wm05eVkyVXRibUZ0WlMxallYTnBibWRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJKYm5OMGNuVmpkSE1nZEdobElHZHlZWEJvSUhKMWJtNWxjaUIwYnlCMWMyVWdkR2hsSUcxdlpHVnNJSEpsYzI5MWNtTmxJR05oWTJocGJtY2daM0poY0doY2JpQWdJQ0FnS2lCelpYSjJhV05sSUdadmNpQmliM1JvSUdkeVlYQm9JR1Y0Y0dGdWMybHZiaTlwYm1sdWRHbGhiR2w2WVhScGIyNHNJR0Z6SUhkbGJHd2dZWE1nWm05eUlHZHlZWEJvWEc0Z0lDQWdJQ29nY25WdUxseHVJQ0FnSUNBcUwxeHVJQ0FnSUhKbFoybHpkR1Z5VFc5a1pXeFNaWE52ZFhKalpYTkhjbUZ3YUZObGNuWnBZMlVvS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdJQ0FvZEdocGN5NTNZWE50VFc5a2RXeGxJR0Z6SUhWdWEyNXZkMjRnWVhNZ1YyRnpiVTF2WkhWc1pWSmxaMmx6ZEdWeVRXOWtaV3hTWlhOdmRYSmpaWE1wWEc0Z0lDQWdJQ0FnSUNBZ0xsOXlaV2RwYzNSbGNrMXZaR1ZzVW1WemIzVnlZMlZ6UjNKaGNHaFRaWEoyYVdObEtDazdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dWZWeHVJbDE5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN1cHBvcnRJbWFnZSA9IHZvaWQgMDtcbi8qKlxuICogQW4gaW1wbGVtZW50YXRpb24gb2YgV2FzbU1lZGlhUGlwZUxpYiB0aGF0IHN1cHBvcnRzIGJpbmRpbmcgR1BVIGltYWdlIGRhdGEgYXNcbiAqIGBtZWRpYXBpcGU6OkltYWdlYCBpbnN0YW5jZXMuIFdlIGltcGxlbWVudCBhcyBhIHByb3BlciBUUyBtaXhpbiwgdG8gYWxsb3cgZm9yXG4gKiBlZmZlY3RpdmUgbXVsdGlwbGUgaW5oZXJpdGFuY2UuIEV4YW1wbGUgdXNhZ2U6XG4gKiBgY29uc3QgV2FzbU1lZGlhUGlwZUltYWdlTGliID0gU3VwcG9ydEltYWdlKFdhc21NZWRpYVBpcGVMaWIpO2BcbiAqL1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmVuZm9yY2UtbmFtZS1jYXNpbmdcbmZ1bmN0aW9uIFN1cHBvcnRJbWFnZShCYXNlKSB7XG4gICAgcmV0dXJuIGNsYXNzIGV4dGVuZHMgQmFzZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUYWtlcyB0aGUgcmVsZXZhbnQgaW5mb3JtYXRpb24gZnJvbSB0aGUgSFRNTCB2aWRlbyBvciBpbWFnZSBlbGVtZW50LCBhbmRcbiAgICAgICAgICogcGFzc2VzIGl0IGludG8gdGhlIFdlYkdMLWJhc2VkIGdyYXBoIGZvciBwcm9jZXNzaW5nIG9uIHRoZSBnaXZlbiBzdHJlYW1cbiAgICAgICAgICogYXQgdGhlIGdpdmVuIHRpbWVzdGFtcCBhcyBhIE1lZGlhUGlwZSBpbWFnZS4gUHJvY2Vzc2luZyB3aWxsIG5vdCBvY2N1clxuICAgICAgICAgKiB1bnRpbCBhIGJsb2NraW5nIGNhbGwgKGxpa2UgcHJvY2Vzc1ZpZGVvR2wgb3IgZmluaXNoUHJvY2Vzc2luZykgaXMgbWFkZS5cbiAgICAgICAgICogQHBhcmFtIGltYWdlU291cmNlIFJlZmVyZW5jZSB0byB0aGUgdmlkZW8gZnJhbWUgd2Ugd2lzaCB0byBhZGQgaW50byBvdXJcbiAgICAgICAgICogICAgIGdyYXBoLlxuICAgICAgICAgKiBAcGFyYW0gc3RyZWFtTmFtZSBUaGUgbmFtZSBvZiB0aGUgTWVkaWFQaXBlIGdyYXBoIHN0cmVhbSB0byBhZGQgdGhlIGZyYW1lXG4gICAgICAgICAqICAgICB0by5cbiAgICAgICAgICogQHBhcmFtIHRpbWVzdGFtcCBUaGUgdGltZXN0YW1wIG9mIHRoZSBpbnB1dCBmcmFtZSwgaW4gbXMuXG4gICAgICAgICAqL1xuICAgICAgICBhZGRHcHVCdWZmZXJBc0ltYWdlVG9TdHJlYW0oaW1hZ2VTb3VyY2UsIHN0cmVhbU5hbWUsIHRpbWVzdGFtcCkge1xuICAgICAgICAgICAgdGhpcy53cmFwU3RyaW5nUHRyKHN0cmVhbU5hbWUsIChzdHJlYW1OYW1lUHRyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgW3dpZHRoLCBoZWlnaHRdID0gdGhpcy5iaW5kVGV4dHVyZVRvU3RyZWFtKGltYWdlU291cmNlLCBzdHJlYW1OYW1lUHRyKTtcbiAgICAgICAgICAgICAgICB0aGlzLndhc21Nb2R1bGVcbiAgICAgICAgICAgICAgICAgICAgLl9hZGRCb3VuZFRleHR1cmVBc0ltYWdlVG9TdHJlYW0oc3RyZWFtTmFtZVB0ciwgd2lkdGgsIGhlaWdodCwgdGltZXN0YW1wKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmV4cG9ydHMuU3VwcG9ydEltYWdlID0gU3VwcG9ydEltYWdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZDJGemJWOXRaV1JwWVhCcGNHVmZhVzFoWjJWZmJHbGlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2TGk0dkxpNHZMaTR2TGk0dmJXVmthV0Z3YVhCbEwzZGxZaTluY21Gd2FGOXlkVzV1WlhJdmQyRnpiVjl0WldScFlYQnBjR1ZmYVcxaFoyVmZiR2xpTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096dEJRVzlDUVRzN096czdSMEZMUnp0QlFVTklMQ3REUVVFclF6dEJRVU12UXl4VFFVRm5RaXhaUVVGWkxFTkJRU3RDTEVsQlFWYzdTVUZEY0VVc1QwRkJUeXhMUVVGTkxGTkJRVkVzU1VGQlNUdFJRVU4yUWpzN096czdPenM3T3p0WFFWVkhPMUZCUTBnc01rSkJRVEpDTEVOQlEzWkNMRmRCUVhkQ0xFVkJRVVVzVlVGQmEwSXNSVUZCUlN4VFFVRnBRanRaUVVOcVJTeEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRExHRkJRWEZDTEVWQlFVVXNSVUZCUlR0blFrRkRka1FzVFVGQlRTeERRVUZETEV0QlFVc3NSVUZCUlN4TlFVRk5MRU5CUVVNc1IwRkRha0lzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExGZEJRVmNzUlVGQlJTeGhRVUZoTEVOQlFVTXNRMEZCUXp0blFrRkRlRVFzU1VGQlNTeERRVUZETEZWQlFYbERPM0ZDUVVNeFF5d3JRa0ZCSzBJc1EwRkROVUlzWVVGQllTeEZRVUZGTEV0QlFVc3NSVUZCUlN4TlFVRk5MRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVU03V1VGRGJrUXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRUQ3hEUVVGRE8wdEJRMFlzUTBGQlF6dEJRVU5LTEVOQlFVTTdRVUY0UWtRc2IwTkJkMEpESWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUh0SmJXRm5aVk52ZFhKalpTd2dWMkZ6YlUxbFpHbGhVR2x3WlV4cFluMGdabkp2YlNBbkxpOTNZWE50WDIxbFpHbGhjR2x3WlY5c2FXSW5PMXh1WEc0dktpcGNiaUFxSUZkbElHVjRkR1Z1WkNCbWNtOXRJR0VnVjJGemJVMWxaR2xoVUdsd1pVeHBZaUJqYjI1emRISjFZM1J2Y2k0Z1ZHaHBjeUJsYm5OMWNtVnpJRzkxY2lCdGFYaHBiaUJvWVhOY2JpQXFJR0ZqWTJWemN5QjBieUIwYUdVZ2QyRnpiVTF2WkhWc1pTd2dZVzF2Ym1jZ2IzUm9aWElnZEdocGJtZHpMaUJVYUdVZ1lHRnVlV0FnZEhsd1pTQnBjeUJ5WlhGMWFYSmxaQ0JtYjNKY2JpQXFJRzFwZUdsdUlHTnZibk4wY25WamRHOXljeTVjYmlBcUwxeHVMeThnZEhOc2FXNTBPbVJwYzJGaWJHVXRibVY0ZEMxc2FXNWxPbTV2TFdGdWVWeHVkSGx3WlNCTWFXSkRiMjV6ZEhKMVkzUnZjaUE5SUc1bGR5QW9MaTR1WVhKbmN6b2dZVzU1VzEwcElEMCtJRmRoYzIxTlpXUnBZVkJwY0dWTWFXSTdYRzVjYmk4cUtseHVJQ29nUkdWamJHRnlZWFJwYjI1eklHWnZjaUJGYlhOamNtbHdkR1Z1SjNNZ1YyVmlRWE56WlcxaWJIa2dUVzlrZFd4bElHSmxhR0YyYVc5eUxDQnpieUJVVXlCamIyMXdhV3hsY2x4dUlDb2daRzlsYzI0bmRDQmljbVZoYXlCdmRYSWdTbE12UXlzcklHSnlhV1JuWlM1Y2JpQXFMMXh1Wlhod2IzSjBJR1JsWTJ4aGNtVWdhVzUwWlhKbVlXTmxJRmRoYzIxSmJXRm5aVTF2WkhWc1pTQjdYRzRnSUY5aFpHUkNiM1Z1WkZSbGVIUjFjbVZCYzBsdFlXZGxWRzlUZEhKbFlXMDZYRzRnSUNBZ0lDQW9jM1J5WldGdFRtRnRaVkIwY2pvZ2JuVnRZbVZ5TENCM2FXUjBhRG9nYm5WdFltVnlMQ0JvWldsbmFIUTZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQjBhVzFsYzNSaGJYQTZJRzUxYldKbGNpa2dQVDRnZG05cFpEdGNibjFjYmx4dUx5b3FYRzRnS2lCQmJpQnBiWEJzWlcxbGJuUmhkR2x2YmlCdlppQlhZWE50VFdWa2FXRlFhWEJsVEdsaUlIUm9ZWFFnYzNWd2NHOXlkSE1nWW1sdVpHbHVaeUJIVUZVZ2FXMWhaMlVnWkdGMFlTQmhjMXh1SUNvZ1lHMWxaR2xoY0dsd1pUbzZTVzFoWjJWZ0lHbHVjM1JoYm1ObGN5NGdWMlVnYVcxd2JHVnRaVzUwSUdGeklHRWdjSEp2Y0dWeUlGUlRJRzFwZUdsdUxDQjBieUJoYkd4dmR5Qm1iM0pjYmlBcUlHVm1abVZqZEdsMlpTQnRkV3gwYVhCc1pTQnBibWhsY21sMFlXNWpaUzRnUlhoaGJYQnNaU0IxYzJGblpUcGNiaUFxSUdCamIyNXpkQ0JYWVhOdFRXVmthV0ZRYVhCbFNXMWhaMlZNYVdJZ1BTQlRkWEJ3YjNKMFNXMWhaMlVvVjJGemJVMWxaR2xoVUdsd1pVeHBZaWs3WUZ4dUlDb3ZYRzR2THlCMGMyeHBiblE2WkdsellXSnNaUzF1WlhoMExXeHBibVU2Wlc1bWIzSmpaUzF1WVcxbExXTmhjMmx1WjF4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUZOMWNIQnZjblJKYldGblpUeFVRbUZ6WlNCbGVIUmxibVJ6SUV4cFlrTnZibk4wY25WamRHOXlQaWhDWVhObE9pQlVRbUZ6WlNrZ2UxeHVJQ0J5WlhSMWNtNGdZMnhoYzNNZ1pYaDBaVzVrY3lCQ1lYTmxJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJVWVd0bGN5QjBhR1VnY21Wc1pYWmhiblFnYVc1bWIzSnRZWFJwYjI0Z1puSnZiU0IwYUdVZ1NGUk5UQ0IyYVdSbGJ5QnZjaUJwYldGblpTQmxiR1Z0Wlc1MExDQmhibVJjYmlBZ0lDQWdLaUJ3WVhOelpYTWdhWFFnYVc1MGJ5QjBhR1VnVjJWaVIwd3RZbUZ6WldRZ1ozSmhjR2dnWm05eUlIQnliMk5sYzNOcGJtY2diMjRnZEdobElHZHBkbVZ1SUhOMGNtVmhiVnh1SUNBZ0lDQXFJR0YwSUhSb1pTQm5hWFpsYmlCMGFXMWxjM1JoYlhBZ1lYTWdZU0JOWldScFlWQnBjR1VnYVcxaFoyVXVJRkJ5YjJObGMzTnBibWNnZDJsc2JDQnViM1FnYjJOamRYSmNiaUFnSUNBZ0tpQjFiblJwYkNCaElHSnNiMk5yYVc1bklHTmhiR3dnS0d4cGEyVWdjSEp2WTJWemMxWnBaR1Z2UjJ3Z2IzSWdabWx1YVhOb1VISnZZMlZ6YzJsdVp5a2dhWE1nYldGa1pTNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2FXMWhaMlZUYjNWeVkyVWdVbVZtWlhKbGJtTmxJSFJ2SUhSb1pTQjJhV1JsYnlCbWNtRnRaU0IzWlNCM2FYTm9JSFJ2SUdGa1pDQnBiblJ2SUc5MWNseHVJQ0FnSUNBcUlDQWdJQ0JuY21Gd2FDNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2MzUnlaV0Z0VG1GdFpTQlVhR1VnYm1GdFpTQnZaaUIwYUdVZ1RXVmthV0ZRYVhCbElHZHlZWEJvSUhOMGNtVmhiU0IwYnlCaFpHUWdkR2hsSUdaeVlXMWxYRzRnSUNBZ0lDb2dJQ0FnSUhSdkxseHVJQ0FnSUNBcUlFQndZWEpoYlNCMGFXMWxjM1JoYlhBZ1ZHaGxJSFJwYldWemRHRnRjQ0J2WmlCMGFHVWdhVzV3ZFhRZ1puSmhiV1VzSUdsdUlHMXpMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHRmtaRWR3ZFVKMVptWmxja0Z6U1cxaFoyVlViMU4wY21WaGJTaGNiaUFnSUNBZ0lDQWdhVzFoWjJWVGIzVnlZMlU2SUVsdFlXZGxVMjkxY21ObExDQnpkSEpsWVcxT1lXMWxPaUJ6ZEhKcGJtY3NJSFJwYldWemRHRnRjRG9nYm5WdFltVnlLVG9nZG05cFpDQjdYRzRnSUNBZ0lDQjBhR2x6TG5keVlYQlRkSEpwYm1kUWRISW9jM1J5WldGdFRtRnRaU3dnS0hOMGNtVmhiVTVoYldWUWRISTZJRzUxYldKbGNpa2dQVDRnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JiZDJsa2RHZ3NJR2hsYVdkb2RGMGdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVpYVc1a1ZHVjRkSFZ5WlZSdlUzUnlaV0Z0S0dsdFlXZGxVMjkxY21ObExDQnpkSEpsWVcxT1lXMWxVSFJ5S1R0Y2JpQWdJQ0FnSUNBZ0tIUm9hWE11ZDJGemJVMXZaSFZzWlNCaGN5QjFibXR1YjNkdUlHRnpJRmRoYzIxSmJXRm5aVTF2WkhWc1pTbGNiaUFnSUNBZ0lDQWdJQ0FnSUM1ZllXUmtRbTkxYm1SVVpYaDBkWEpsUVhOSmJXRm5aVlJ2VTNSeVpXRnRLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wY21WaGJVNWhiV1ZRZEhJc0lIZHBaSFJvTENCb1pXbG5hSFFzSUhScGJXVnpkR0Z0Y0NrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNGdJSDA3WEc1OVhHNGlYWDA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBQbGFjZWhvbGRlciBmb3IgaW50ZXJuYWwgZGVwZW5kZW5jeSBvbiBhc3NlcnRUcnV0aHlcbi8vIFBsYWNlaG9sZGVyIGZvciBpbnRlcm5hbCBkZXBlbmRlbmN5IG9uIGpzbG9hZGVyXG4vLyBQbGFjZWhvbGRlciBmb3IgaW50ZXJuYWwgZGVwZW5kZW5jeSBvbiB0cnVzdGVkIHJlc291cmNlIHVybFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVXYXNtTWVkaWFQaXBlTGliID0gZXhwb3J0cy5jcmVhdGVNZWRpYVBpcGVMaWIgPSBleHBvcnRzLldhc21NZWRpYVBpcGVMaWIgPSB2b2lkIDA7XG4vKipcbiAqIFNpbXBsZSBjbGFzcyB0byBydW4gYW4gYXJiaXRyYXJ5IGltYWdlLWluL2ltYWdlLW91dCBNZWRpYVBpcGUgZ3JhcGggKGkuZS5cbiAqIGFzIGNyZWF0ZWQgYnkgd2FzbV9tZWRpYXBpcGVfZGVtbyBCVUlMRCBtYWNybyksIGFuZCBlaXRoZXIgcmVuZGVyIHJlc3VsdHNcbiAqIGludG8gY2FudmFzLCBvciBlbHNlIHJldHVybiB0aGUgb3V0cHV0IFdlYkdMVGV4dHVyZS4gVGFrZXMgYSBXZWJBc3NlbWJseVxuICogTW9kdWxlIChtdXN0IGJlIGluc3RhbnRpYXRlZCB0byBzZWxmLk1vZHVsZSkuXG4gKi9cbmNsYXNzIFdhc21NZWRpYVBpcGVMaWIge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgTWVkaWFQaXBlIFdBU00gbW9kdWxlLiBNdXN0IGJlIGNhbGxlZCAqYWZ0ZXIqIHdhc20gTW9kdWxlIGhhc1xuICAgICAqIGluaXRpYWxpemVkLiBOb3RlIHRoYXQgd2UgdGFrZSBjb250cm9sIG9mIHRoZSBHTCBjYW52YXMgZnJvbSBoZXJlIG9uIG91dCxcbiAgICAgKiBhbmQgd2lsbCByZXNpemUgaXQgdG8gZml0IGlucHV0LlxuICAgICAqXG4gICAgICogQHBhcmFtIG1vZHVsZSBUaGUgdW5kZXJseWluZyBXYXNtIE1vZHVsZSB0byB1c2UuXG4gICAgICogQHBhcmFtIGdsQ2FudmFzIFRoZSB0eXBlIG9mIHRoZSBHTCBjYW52YXMgdG8gdXNlLCBvciBgbnVsbGAgaWYgbm8gR0xcbiAgICAgKiAgICBjYW52YXMgc2hvdWxkIGJlIGluaXRpYWx6ZWQuIEluaXRpYWxpemVzIGFuIG9mZnNjcmVlbiBjYW52YXMgaWYgbm90XG4gICAgICogICAgcHJvdmlkZWQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobW9kdWxlLCBnbENhbnZhcykge1xuICAgICAgICB0aGlzLmF1dG9SZXNpemVDYW52YXMgPSB0cnVlO1xuICAgICAgICB0aGlzLndhc21Nb2R1bGUgPSBtb2R1bGU7XG4gICAgICAgIHRoaXMuYXVkaW9QdHIgPSBudWxsO1xuICAgICAgICB0aGlzLmF1ZGlvU2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuaGFzTXVsdGlTdHJlYW1TdXBwb3J0ID1cbiAgICAgICAgICAgICh0eXBlb2YgdGhpcy53YXNtTW9kdWxlLl9hZGRJbnRUb0lucHV0U3RyZWFtID09PSAnZnVuY3Rpb24nKTtcbiAgICAgICAgaWYgKGdsQ2FudmFzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMud2FzbU1vZHVsZS5jYW52YXMgPSBnbENhbnZhcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIElmIG5vIGNhbnZhcyBpcyBwcm92aWRlZCwgYXNzdW1lIENocm9tZS9GaXJlZm94IGFuZCBqdXN0IG1ha2UgYW5cbiAgICAgICAgICAgIC8vIE9mZnNjcmVlbkNhbnZhcyBmb3IgR1BVIHByb2Nlc3NpbmcuXG4gICAgICAgICAgICB0aGlzLndhc21Nb2R1bGUuY2FudmFzID0gbmV3IE9mZnNjcmVlbkNhbnZhcygxLCAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBoZWxwZXIgdG8gbG9hZCBhIE1lZGlhUGlwZSBncmFwaCBmcm9tIGEgZmlsZSBhbmQgcGFzcyBpdCB0b1xuICAgICAqIHNldEdyYXBoLlxuICAgICAqIEBwYXJhbSBncmFwaEZpbGUgVGhlIHVybCBvZiB0aGUgTWVkaWFQaXBlIGdyYXBoIGZpbGUgdG8gbG9hZC5cbiAgICAgKi9cbiAgICBhc3luYyBpbml0aWFsaXplR3JhcGgoZ3JhcGhGaWxlKSB7XG4gICAgICAgIC8vIEZldGNoIGFuZCBzZXQgZ3JhcGhcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChncmFwaEZpbGUpO1xuICAgICAgICBjb25zdCBncmFwaERhdGEgPSBhd2FpdCByZXNwb25zZS5hcnJheUJ1ZmZlcigpO1xuICAgICAgICBjb25zdCBpc0JpbmFyeSA9ICEoZ3JhcGhGaWxlLmVuZHNXaXRoKCcucGJ0eHQnKSB8fCBncmFwaEZpbGUuZW5kc1dpdGgoJy50ZXh0cHJvdG8nKSk7XG4gICAgICAgIHRoaXMuc2V0R3JhcGgobmV3IFVpbnQ4QXJyYXkoZ3JhcGhEYXRhKSwgaXNCaW5hcnkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBoZWxwZXIgZm9yIGNhbGxpbmcgc2V0R3JhcGggd2l0aCBhIHN0cmluZyByZXByZXNlbnRpbmcgYSB0ZXh0XG4gICAgICogcHJvdG8gY29uZmlnLlxuICAgICAqIEBwYXJhbSBncmFwaENvbmZpZyBUaGUgdGV4dCBwcm90byBncmFwaCBjb25maWcsIGV4cGVjdGVkIHRvIGJlIGEgc3RyaW5nIGluXG4gICAgICogZGVmYXVsdCBKYXZhU2NyaXB0IFVURi0xNiBmb3JtYXQuXG4gICAgICovXG4gICAgc2V0R3JhcGhGcm9tU3RyaW5nKGdyYXBoQ29uZmlnKSB7XG4gICAgICAgIHRoaXMuc2V0R3JhcGgoKG5ldyBUZXh0RW5jb2RlcigpKS5lbmNvZGUoZ3JhcGhDb25maWcpLCBmYWxzZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRha2VzIHRoZSByYXcgZGF0YSBmcm9tIGEgTWVkaWFQaXBlIGdyYXBoLCBhbmQgcGFzc2VzIGl0IHRvIEMrKyB0byBiZSBydW5cbiAgICAgKiBvdmVyIHRoZSB2aWRlbyBzdHJlYW0uIFdpbGwgcmVwbGFjZSB0aGUgcHJldmlvdXNseSBydW5uaW5nIE1lZGlhUGlwZSBncmFwaCxcbiAgICAgKiBpZiB0aGVyZSBpcyBvbmUuXG4gICAgICogQHBhcmFtIGdyYXBoRGF0YSBUaGUgcmF3IE1lZGlhUGlwZSBncmFwaCBkYXRhLCBlaXRoZXIgaW4gYmluYXJ5XG4gICAgICogICAgIHByb3RvYnVmZmVyIGZvcm1hdCAoLmJpbmFyeXBiKSwgb3IgZWxzZSBpbiByYXcgdGV4dCBmb3JtYXQgKC5wYnR4dCBvclxuICAgICAqICAgICAudGV4dHByb3RvKS5cbiAgICAgKiBAcGFyYW0gaXNCaW5hcnkgVGhpcyBzaG91bGQgYmUgc2V0IHRvIHRydWUgaWYgdGhlIGdyYXBoIGlzIGluXG4gICAgICogICAgIGJpbmFyeSBmb3JtYXQsIGFuZCBmYWxzZSBpZiBpdCBpcyBpbiBodW1hbi1yZWFkYWJsZSB0ZXh0IGZvcm1hdC5cbiAgICAgKi9cbiAgICBzZXRHcmFwaChncmFwaERhdGEsIGlzQmluYXJ5KSB7XG4gICAgICAgIGNvbnN0IHNpemUgPSBncmFwaERhdGEubGVuZ3RoO1xuICAgICAgICBjb25zdCBkYXRhUHRyID0gdGhpcy53YXNtTW9kdWxlLl9tYWxsb2Moc2l6ZSk7XG4gICAgICAgIHRoaXMud2FzbU1vZHVsZS5IRUFQVTguc2V0KGdyYXBoRGF0YSwgZGF0YVB0cik7XG4gICAgICAgIGlmIChpc0JpbmFyeSkge1xuICAgICAgICAgICAgdGhpcy53YXNtTW9kdWxlLl9jaGFuZ2VCaW5hcnlHcmFwaChzaXplLCBkYXRhUHRyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMud2FzbU1vZHVsZS5fY2hhbmdlVGV4dEdyYXBoKHNpemUsIGRhdGFQdHIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2FzbU1vZHVsZS5fZnJlZShkYXRhUHRyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29uZmlndXJlcyB0aGUgY3VycmVudCBncmFwaCB0byBoYW5kbGUgYXVkaW8gaW4gYSBjZXJ0YWluIHdheS4gTXVzdCBiZVxuICAgICAqIGNhbGxlZCBiZWZvcmUgdGhlIGdyYXBoIGlzIHNldC9zdGFydGVkIGluIG9yZGVyIHRvIHVzZSBwcm9jZXNzQXVkaW8uXG4gICAgICogQHBhcmFtIG51bUNoYW5uZWxzIFRoZSBudW1iZXIgb2YgY2hhbm5lbHMgb2YgYXVkaW8gaW5wdXQuIE9ubHkgMVxuICAgICAqICAgICBpcyBzdXBwb3J0ZWQgZm9yIG5vdy5cbiAgICAgKiBAcGFyYW0gbnVtU2FtcGxlcyBUaGUgbnVtYmVyIG9mIHNhbXBsZXMgdGhhdCBhcmUgdGFrZW4gaW4gZWFjaFxuICAgICAqICAgICBhdWRpbyBjYXB0dXJlLlxuICAgICAqIEBwYXJhbSBzYW1wbGVSYXRlIFRoZSByYXRlLCBpbiBIeiwgb2YgdGhlIHNhbXBsaW5nLlxuICAgICAqL1xuICAgIGNvbmZpZ3VyZUF1ZGlvKG51bUNoYW5uZWxzLCBudW1TYW1wbGVzLCBzYW1wbGVSYXRlKSB7XG4gICAgICAgIHRoaXMud2FzbU1vZHVsZS5fY29uZmlndXJlQXVkaW8obnVtQ2hhbm5lbHMsIG51bVNhbXBsZXMsIHNhbXBsZVJhdGUpO1xuICAgICAgICBpZiAodGhpcy53YXNtTW9kdWxlLl9hdHRhY2hBdWRpb091dHB1dExpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aGlzLndhc21Nb2R1bGUuX2F0dGFjaEF1ZGlvT3V0cHV0TGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgZGlzYWJsaW5nIGF1dG9tYXRpYyBjYW52YXMgcmVzaXppbmcsIGluIGNhc2UgY2xpZW50cyB3YW50IHRvIGNvbnRyb2xcbiAgICAgKiBjb250cm9sIHRoaXMuXG4gICAgICogQHBhcmFtIHJlc2l6ZSBUcnVlIHdpbGwgcmUtZW5hYmxlIGF1dG9tYXRpYyBjYW52YXMgcmVzaXppbmcsIHdoaWxlIGZhbHNlXG4gICAgICogICAgIHdpbGwgZGlzYWJsZSB0aGUgZmVhdHVyZS5cbiAgICAgKi9cbiAgICBzZXRBdXRvUmVzaXplQ2FudmFzKHJlc2l6ZSkge1xuICAgICAgICB0aGlzLmF1dG9SZXNpemVDYW52YXMgPSByZXNpemU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsbG93cyBkaXNhYmxpbmcgdGhlIGF1dG9tYXRpYyByZW5kZXItdG8tc2NyZWVuIGNvZGUsIGluIGNhc2UgY2xpZW50cyBkb24ndFxuICAgICAqIG5lZWQvd2FudCB0aGlzLiBJbiBwYXJ0aWN1bGFyLCB0aGlzIHJlbW92ZXMgdGhlIHJlcXVpcmVtZW50IGZvciBwaXBlbGluZXNcbiAgICAgKiB0byBoYXZlIGFjY2VzcyB0byBHUFUgcmVzb3VyY2VzLCBhcyB3ZWxsIGFzIHRoZSByZXF1aXJlbWVudCBmb3IgZ3JhcGhzIHRvXG4gICAgICogaGF2ZSBcImlucHV0X2ZyYW1lc19ncHVcIiBhbmQgXCJvdXRwdXRfZnJhbWVzX2dwdVwiIHN0cmVhbXMgZGVmaW5lZCwgc28gcHVyZVxuICAgICAqIENQVSBwaXBlbGluZXMgYW5kIG5vbi12aWRlbyBwaXBlbGluZXMgY2FuIGJlIGNyZWF0ZWQuXG4gICAgICogTk9URTogVGhpcyBvbmx5IGFmZmVjdHMgZnV0dXJlIGdyYXBoIGluaXRpYWxpemF0aW9ucyAodmlhIHNldEdyYXBoIG9yXG4gICAgICogICAgIGluaXRpYWxpemVHcmFwaCksIGFuZCBkb2VzIE5PVCBhZmZlY3QgdGhlIGN1cnJlbnRseSBydW5uaW5nIGdyYXBoLCBzb1xuICAgICAqICAgICBjYWxscyB0byB0aGlzIHNob3VsZCBiZSBtYWRlICpiZWZvcmUqIHNldEdyYXBoL2luaXRpYWxpemVHcmFwaCBmb3IgdGhlXG4gICAgICogICAgIGdyYXBoIGZpbGUgYmVpbmcgdGFyZ2V0ZWQuXG4gICAgICogQHBhcmFtIGVuYWJsZWQgVHJ1ZSB3aWxsIHJlLWVuYWJsZSBhdXRvbWF0aWMgcmVuZGVyLXRvLXNjcmVlbiBjb2RlIGFuZFxuICAgICAqICAgICBjYXVzZSBHUFUgcmVzb3VyY2VzIHRvIG9uY2UgYWdhaW4gYmUgcmVxdWVzdGVkLCB3aGlsZSBmYWxzZSB3aWxsXG4gICAgICogICAgIGRpc2FibGUgdGhlIGZlYXR1cmUuXG4gICAgICovXG4gICAgc2V0QXV0b1JlbmRlclRvU2NyZWVuKGVuYWJsZWQpIHtcbiAgICAgICAgdGhpcy53YXNtTW9kdWxlLl9zZXRBdXRvUmVuZGVyVG9TY3JlZW4oZW5hYmxlZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJpbmQgdGV4dHVyZSB0byBvdXIgaW50ZXJuYWwgY2FudmFzLCBhbmQgdXBsb2FkIGltYWdlIHNvdXJjZSB0byBHUFUuXG4gICAgICogUmV0dXJucyB0dXBsZSBbd2lkdGgsIGhlaWdodF0gb2YgdGV4dHVyZS4gIEludGVuZGVkIGZvciBpbnRlcm5hbCB1c2FnZS5cbiAgICAgKi9cbiAgICBiaW5kVGV4dHVyZVRvU3RyZWFtKGltYWdlU291cmNlLCBzdHJlYW1OYW1lUHRyKSB7XG4gICAgICAgIGlmICghdGhpcy53YXNtTW9kdWxlLmNhbnZhcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBPcGVuR0wgY2FudmFzIGNvbmZpZ3VyZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdHJlYW1OYW1lUHRyKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBSZW1vdmUgdGhpcyBwYXRoIG9uY2UgY29tcGxldGVseSByZWZhY3RvcmVkIGF3YXkuXG4gICAgICAgICAgICBjb25zb2xlLmFzc2VydCh0aGlzLndhc21Nb2R1bGUuX2JpbmRUZXh0dXJlVG9DYW52YXMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLndhc21Nb2R1bGUuX2JpbmRUZXh0dXJlVG9TdHJlYW0oc3RyZWFtTmFtZVB0cik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLndhc21Nb2R1bGUuY2FudmFzLmdldENvbnRleHQoJ3dlYmdsMicpIHx8XG4gICAgICAgICAgICB0aGlzLndhc21Nb2R1bGUuY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJyk7XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KGdsKTtcbiAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBpbWFnZVNvdXJjZSk7XG4gICAgICAgIGxldCB3aWR0aCwgaGVpZ2h0O1xuICAgICAgICBpZiAoaW1hZ2VTb3VyY2UudmlkZW9XaWR0aCkge1xuICAgICAgICAgICAgd2lkdGggPSBpbWFnZVNvdXJjZS52aWRlb1dpZHRoO1xuICAgICAgICAgICAgaGVpZ2h0ID0gaW1hZ2VTb3VyY2UudmlkZW9IZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3aWR0aCA9IGltYWdlU291cmNlLndpZHRoO1xuICAgICAgICAgICAgaGVpZ2h0ID0gaW1hZ2VTb3VyY2UuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmF1dG9SZXNpemVDYW52YXMgJiZcbiAgICAgICAgICAgICh3aWR0aCAhPT0gdGhpcy53YXNtTW9kdWxlLmNhbnZhcy53aWR0aCB8fFxuICAgICAgICAgICAgICAgIGhlaWdodCAhPT0gdGhpcy53YXNtTW9kdWxlLmNhbnZhcy5oZWlnaHQpKSB7XG4gICAgICAgICAgICB0aGlzLndhc21Nb2R1bGUuY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICB0aGlzLndhc21Nb2R1bGUuY2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3dpZHRoLCBoZWlnaHRdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUYWtlcyB0aGUgcmF3IGRhdGEgZnJvbSBhIEpTIGltYWdlIHNvdXJjZSwgYW5kIHNlbmRzIGl0IHRvIEMrKyB0byBiZVxuICAgICAqIHByb2Nlc3NlZCwgd2FpdGluZyBzeW5jaHJvbm91c2x5IGZvciB0aGUgcmVzcG9uc2UuIE5vdGUgdGhhdCB3ZSB3aWxsIHJlc2l6ZVxuICAgICAqIG91ciBHTCBjYW52YXMgdG8gZml0IHRoZSBpbnB1dCwgc28gaW5wdXQgc2l6ZSBzaG91bGQgb25seSBjaGFuZ2VcbiAgICAgKiBpbmZyZXF1ZW50bHkuXG4gICAgICogQHBhcmFtIGltYWdlU291cmNlIEFuIGltYWdlIHNvdXJjZSB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB0aW1lc3RhbXAgVGhlIHRpbWVzdGFtcCBvZiB0aGUgY3VycmVudCBmcmFtZSwgaW4gbXMuXG4gICAgICogQHJldHVybiB0ZXh0dXJlPyBUaGUgV2ViR0wgdGV4dHVyZSByZWZlcmVuY2UsIGlmIG9uZSB3YXMgcHJvZHVjZWQuXG4gICAgICovXG4gICAgcHJvY2Vzc0dsKGltYWdlU291cmNlLCB0aW1lc3RhbXApIHtcbiAgICAgICAgLy8gQmluZCB0byBkZWZhdWx0IGlucHV0IHN0cmVhbVxuICAgICAgICBjb25zdCBbd2lkdGgsIGhlaWdodF0gPSB0aGlzLmJpbmRUZXh0dXJlVG9TdHJlYW0oaW1hZ2VTb3VyY2UpO1xuICAgICAgICAvLyAyIGludHMgYW5kIGEgbGwgKHRpbWVzdGFtcClcbiAgICAgICAgY29uc3QgZnJhbWVEYXRhUHRyID0gdGhpcy53YXNtTW9kdWxlLl9tYWxsb2MoMTYpO1xuICAgICAgICB0aGlzLndhc21Nb2R1bGUuSEVBUFUzMltmcmFtZURhdGFQdHIgLyA0XSA9IHdpZHRoO1xuICAgICAgICB0aGlzLndhc21Nb2R1bGUuSEVBUFUzMlsoZnJhbWVEYXRhUHRyIC8gNCkgKyAxXSA9IGhlaWdodDtcbiAgICAgICAgdGhpcy53YXNtTW9kdWxlLkhFQVBGNjRbKGZyYW1lRGF0YVB0ciAvIDgpICsgMV0gPSB0aW1lc3RhbXA7XG4gICAgICAgIC8vIG91dHB1dFB0ciBwb2ludHMgaW4gSEVBUEYzMi1zcGFjZSB0byBydW5uaW5nIG1zcGYgY2FsY3VsYXRpb25zLCB3aGljaCB3ZVxuICAgICAgICAvLyBkb24ndCB1c2UgYXQgdGhlIG1vbWVudC5cbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVudXNlZC12YXJpYWJsZVxuICAgICAgICBjb25zdCBvdXRwdXRQdHIgPSB0aGlzLndhc21Nb2R1bGUuX3Byb2Nlc3NHbChmcmFtZURhdGFQdHIpIC8gNDtcbiAgICAgICAgdGhpcy53YXNtTW9kdWxlLl9mcmVlKGZyYW1lRGF0YVB0cik7XG4gICAgICAgIC8vIFRPRE86IEhvb2sgdXAgV2ViR0xUZXh0dXJlIG91dHB1dCwgd2hlbiBnaXZlbi5cbiAgICAgICAgLy8gVE9ETzogQWxsb3cgdXNlciB0byB0b2dnbGUgd2hldGhlciBvciBub3QgdG8gcmVuZGVyIG91dHB1dCBpbnRvIGNhbnZhcy5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgSmF2YVNjcmlwdCBzdHJpbmcgaW5wdXQgcGFyYW1ldGVycyBpbnRvIEMrKyBjLXN0cmluZyBwb2ludGVycy5cbiAgICAgKiBTZWUgYi8yMDQ4MzAxNTggZm9yIG1vcmUgZGV0YWlscy4gSW50ZW5kZWQgZm9yIGludGVybmFsIHVzYWdlLlxuICAgICAqL1xuICAgIHdyYXBTdHJpbmdQdHIoc3RyaW5nRGF0YSwgc3RyaW5nUHRyRnVuYykge1xuICAgICAgICBpZiAoIXRoaXMuaGFzTXVsdGlTdHJlYW1TdXBwb3J0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdObyB3YXNtIG11bHRpc3RyZWFtIHN1cHBvcnQgZGV0ZWN0ZWQ6IGVuc3VyZSBkZXBlbmRlbmN5ICcgK1xuICAgICAgICAgICAgICAgICdpbmNsdXNpb24gb2YgOmdsX2dyYXBoX3J1bm5lcl9pbnRlcm5hbF9tdWx0aV9pbnB1dCB0YXJnZXQnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdHJpbmdEYXRhUHRyID0gdGhpcy53YXNtTW9kdWxlLnN0cmluZ1RvTmV3VVRGOChzdHJpbmdEYXRhKTtcbiAgICAgICAgc3RyaW5nUHRyRnVuYyhzdHJpbmdEYXRhUHRyKTtcbiAgICAgICAgdGhpcy53YXNtTW9kdWxlLl9mcmVlKHN0cmluZ0RhdGFQdHIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBKYXZhU2NyaXB0IHN0cmluZyBpbnB1dCBwYXJhbWV0ZXJzIGludG8gQysrIGMtc3RyaW5nIHBvaW50ZXJzLlxuICAgICAqIFNlZSBiLzIwNDgzMDE1OCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqL1xuICAgIHdyYXBTdHJpbmdQdHJQdHIoc3RyaW5nRGF0YSwgcHRyRnVuYykge1xuICAgICAgICBpZiAoIXRoaXMuaGFzTXVsdGlTdHJlYW1TdXBwb3J0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdObyB3YXNtIG11bHRpc3RyZWFtIHN1cHBvcnQgZGV0ZWN0ZWQ6IGVuc3VyZSBkZXBlbmRlbmN5ICcgK1xuICAgICAgICAgICAgICAgICdpbmNsdXNpb24gb2YgOmdsX2dyYXBoX3J1bm5lcl9pbnRlcm5hbF9tdWx0aV9pbnB1dCB0YXJnZXQnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1aW50MzJBcnJheSA9IG5ldyBVaW50MzJBcnJheShzdHJpbmdEYXRhLmxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaW5nRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdWludDMyQXJyYXlbaV0gPSB0aGlzLndhc21Nb2R1bGUuc3RyaW5nVG9OZXdVVEY4KHN0cmluZ0RhdGFbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhlYXBTcGFjZSA9IHRoaXMud2FzbU1vZHVsZS5fbWFsbG9jKHVpbnQzMkFycmF5Lmxlbmd0aCAqIDQpO1xuICAgICAgICB0aGlzLndhc21Nb2R1bGUuSEVBUFUzMi5zZXQodWludDMyQXJyYXksIGhlYXBTcGFjZSA+PiAyKTtcbiAgICAgICAgcHRyRnVuYyhoZWFwU3BhY2UpO1xuICAgICAgICBmb3IgKGNvbnN0IHVpbnQzMnB0ciBvZiB1aW50MzJBcnJheSkge1xuICAgICAgICAgICAgdGhpcy53YXNtTW9kdWxlLl9mcmVlKHVpbnQzMnB0cik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53YXNtTW9kdWxlLl9mcmVlKGhlYXBTcGFjZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuc3VyZXMgZXhpc3RlbmNlIG9mIHRoZSBzaW1wbGUgbGlzdGVuZXJzIHRhYmxlIGFuZCByZWdpc3RlcnMgdGhlIGNhbGxiYWNrLlxuICAgICAqIEludGVuZGVkIGZvciBpbnRlcm5hbCB1c2FnZS5cbiAgICAgKi9cbiAgICBzZXRMaXN0ZW5lcihvdXRwdXRTdHJlYW1OYW1lLCBjYWxsYmFja0Zjbikge1xuICAgICAgICB0aGlzLndhc21Nb2R1bGUuc2ltcGxlTGlzdGVuZXJzID0gdGhpcy53YXNtTW9kdWxlLnNpbXBsZUxpc3RlbmVycyB8fCB7fTtcbiAgICAgICAgdGhpcy53YXNtTW9kdWxlLnNpbXBsZUxpc3RlbmVyc1tvdXRwdXRTdHJlYW1OYW1lXSA9XG4gICAgICAgICAgICBjYWxsYmFja0ZjbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW5zdXJlcyBleGlzdGVuY2Ugb2YgdGhlIHZlY3RvciBsaXN0ZW5lcnMgdGFibGUgYW5kIHJlZ2lzdGVycyB0aGUgY2FsbGJhY2suXG4gICAgICogSW50ZW5kZWQgZm9yIGludGVybmFsIHVzYWdlLlxuICAgICAqL1xuICAgIHNldFZlY3Rvckxpc3RlbmVyKG91dHB1dFN0cmVhbU5hbWUsIGNhbGxiYWNrRmNuKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLndhc21Nb2R1bGUudmVjdG9yTGlzdGVuZXJzID0gdGhpcy53YXNtTW9kdWxlLnZlY3Rvckxpc3RlbmVycyB8fCB7fTtcbiAgICAgICAgdGhpcy53YXNtTW9kdWxlLnZlY3Rvckxpc3RlbmVyc1tvdXRwdXRTdHJlYW1OYW1lXSA9XG4gICAgICAgICAgICAoZGF0YSwgaW5kZXgsIGxlbmd0aCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBXYXNtIGxpc3RlbmVyIGdldHMgaW52b2tlZCBvbmNlIGZvciBlYWNoIGVsZW1lbnQuIE9uY2Ugd2VcbiAgICAgICAgICAgICAgICAvLyByZWNlaXZlIGFsbCBlbGVtZW50cywgd2UgaW52b2tlIHRoZSByZWdpc3RlcmVkIGNhbGxiYWNrIHdpdGggdGhlXG4gICAgICAgICAgICAgICAgLy8gZnVsbCBhcnJheS5cbiAgICAgICAgICAgICAgICBidWZmZXJbaW5kZXhdID0gZGF0YTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IGxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW52b2tlIHRoZSB1c2VyIGNhbGxiYWNrIGRpcmVjdGx5LCBhcyB0aGUgV2FzbSBsYXllciBtYXkgY2xlYW4gdXBcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHVuZGVybHlpbmcgZGF0YSBlbGVtZW50cyBvbmNlIHdlIGxlYXZlIHRoZSBzY29wZSBvZiB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gbGlzdGVuZXIuXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrRmNuKGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0YWNoZXMgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBNZWRpYVBpcGUgZnJhbWV3b3JrXG4gICAgICogcmV0dXJucyBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBhdHRhY2hFcnJvckxpc3RlbmVyKGNhbGxiYWNrRmNuKSB7XG4gICAgICAgIHRoaXMud2FzbU1vZHVsZS5lcnJvckxpc3RlbmVyID0gY2FsbGJhY2tGY247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRha2VzIHRoZSByYXcgZGF0YSBmcm9tIGEgSlMgYXVkaW8gY2FwdHVyZSBhcnJheSwgYW5kIHNlbmRzIGl0IHRvIEMrKyB0byBiZVxuICAgICAqIHByb2Nlc3NlZC5cbiAgICAgKiBAcGFyYW0gYXVkaW9EYXRhIEFuIGFycmF5IG9mIHJhdyBhdWRpbyBjYXB0dXJlIGRhdGEsIGxpa2VcbiAgICAgKiAgICAgZnJvbSBhIGNhbGwgdG8gZ2V0Q2hhbm5lbERhdGEgb24gYW4gQXVkaW9CdWZmZXIuXG4gICAgICogQHBhcmFtIHRpbWVzdGFtcCBUaGUgdGltZXN0YW1wIG9mIHRoZSBjdXJyZW50IGZyYW1lLCBpbiBtcy5cbiAgICAgKi9cbiAgICBhZGRBdWRpb1RvU3RyZWFtKGF1ZGlvRGF0YSwgdGltZXN0YW1wKSB7XG4gICAgICAgIC8vIDQgYnl0ZXMgZm9yIGVhY2ggRjMyXG4gICAgICAgIGNvbnN0IHNpemUgPSBhdWRpb0RhdGEubGVuZ3RoICogNDtcbiAgICAgICAgaWYgKHRoaXMuYXVkaW9TaXplICE9PSBzaXplKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hdWRpb1B0cikge1xuICAgICAgICAgICAgICAgIHRoaXMud2FzbU1vZHVsZS5fZnJlZSh0aGlzLmF1ZGlvUHRyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYXVkaW9QdHIgPSB0aGlzLndhc21Nb2R1bGUuX21hbGxvYyhzaXplKTtcbiAgICAgICAgICAgIHRoaXMuYXVkaW9TaXplID0gc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndhc21Nb2R1bGUuSEVBUEYzMi5zZXQoYXVkaW9EYXRhLCB0aGlzLmF1ZGlvUHRyIC8gNCk7XG4gICAgICAgIHRoaXMud2FzbU1vZHVsZS5fcHJvY2Vzc0F1ZGlvKHRoaXMuYXVkaW9QdHIsIHRpbWVzdGFtcCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRha2VzIHRoZSByZWxldmFudCBpbmZvcm1hdGlvbiBmcm9tIHRoZSBIVE1MIHZpZGVvIG9yIGltYWdlIGVsZW1lbnQsIGFuZFxuICAgICAqIHBhc3NlcyBpdCBpbnRvIHRoZSBXZWJHTC1iYXNlZCBncmFwaCBmb3IgcHJvY2Vzc2luZyBvbiB0aGUgZ2l2ZW4gc3RyZWFtIGF0XG4gICAgICogdGhlIGdpdmVuIHRpbWVzdGFtcC4gQ2FuIGJlIHVzZWQgZm9yIGFkZGl0aW9uYWwgYXV4aWxpYXJ5IEdwdUJ1ZmZlciBpbnB1dFxuICAgICAqIHN0cmVhbXMuIFByb2Nlc3Npbmcgd2lsbCBub3Qgb2NjdXIgdW50aWwgYSBibG9ja2luZyBjYWxsIChsaWtlXG4gICAgICogcHJvY2Vzc1ZpZGVvR2wgb3IgZmluaXNoUHJvY2Vzc2luZykgaXMgbWFkZS4gRm9yIHVzZSB3aXRoXG4gICAgICogJ2dsX2dyYXBoX3J1bm5lcl9pbnRlcm5hbF9tdWx0aV9pbnB1dCcuXG4gICAgICogQHBhcmFtIGltYWdlU291cmNlIFJlZmVyZW5jZSB0byB0aGUgdmlkZW8gZnJhbWUgd2Ugd2lzaCB0byBhZGQgaW50byBvdXJcbiAgICAgKiAgICAgZ3JhcGguXG4gICAgICogQHBhcmFtIHN0cmVhbU5hbWUgVGhlIG5hbWUgb2YgdGhlIE1lZGlhUGlwZSBncmFwaCBzdHJlYW0gdG8gYWRkIHRoZSBmcmFtZVxuICAgICAqICAgICB0by5cbiAgICAgKiBAcGFyYW0gdGltZXN0YW1wIFRoZSB0aW1lc3RhbXAgb2YgdGhlIGlucHV0IGZyYW1lLCBpbiBtcy5cbiAgICAgKi9cbiAgICBhZGRHcHVCdWZmZXJUb1N0cmVhbShpbWFnZVNvdXJjZSwgc3RyZWFtTmFtZSwgdGltZXN0YW1wKSB7XG4gICAgICAgIHRoaXMud3JhcFN0cmluZ1B0cihzdHJlYW1OYW1lLCAoc3RyZWFtTmFtZVB0cikgPT4ge1xuICAgICAgICAgICAgY29uc3QgW3dpZHRoLCBoZWlnaHRdID0gdGhpcy5iaW5kVGV4dHVyZVRvU3RyZWFtKGltYWdlU291cmNlLCBzdHJlYW1OYW1lUHRyKTtcbiAgICAgICAgICAgIHRoaXMud2FzbU1vZHVsZS5fYWRkQm91bmRUZXh0dXJlVG9TdHJlYW0oc3RyZWFtTmFtZVB0ciwgd2lkdGgsIGhlaWdodCwgdGltZXN0YW1wKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGEgYm9vbGVhbiBwYWNrZXQgaW50byB0aGUgc3BlY2lmaWVkIHN0cmVhbSBhdCB0aGUgZ2l2ZW4gdGltZXN0YW1wLlxuICAgICAqIEBwYXJhbSBkYXRhIFRoZSBib29sZWFuIGRhdGEgdG8gc2VuZC5cbiAgICAgKiBAcGFyYW0gc3RyZWFtTmFtZSBUaGUgbmFtZSBvZiB0aGUgZ3JhcGggaW5wdXQgc3RyZWFtIHRvIHNlbmQgZGF0YSBpbnRvLlxuICAgICAqIEBwYXJhbSB0aW1lc3RhbXAgVGhlIHRpbWVzdGFtcCBvZiB0aGUgaW5wdXQgZGF0YSwgaW4gbXMuXG4gICAgICovXG4gICAgYWRkQm9vbFRvU3RyZWFtKGRhdGEsIHN0cmVhbU5hbWUsIHRpbWVzdGFtcCkge1xuICAgICAgICB0aGlzLndyYXBTdHJpbmdQdHIoc3RyZWFtTmFtZSwgKHN0cmVhbU5hbWVQdHIpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2FzbU1vZHVsZS5fYWRkQm9vbFRvSW5wdXRTdHJlYW0oZGF0YSwgc3RyZWFtTmFtZVB0ciwgdGltZXN0YW1wKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGEgZG91YmxlIHBhY2tldCBpbnRvIHRoZSBzcGVjaWZpZWQgc3RyZWFtIGF0IHRoZSBnaXZlbiB0aW1lc3RhbXAuXG4gICAgICogQHBhcmFtIGRhdGEgVGhlIGRvdWJsZSBkYXRhIHRvIHNlbmQuXG4gICAgICogQHBhcmFtIHN0cmVhbU5hbWUgVGhlIG5hbWUgb2YgdGhlIGdyYXBoIGlucHV0IHN0cmVhbSB0byBzZW5kIGRhdGEgaW50by5cbiAgICAgKiBAcGFyYW0gdGltZXN0YW1wIFRoZSB0aW1lc3RhbXAgb2YgdGhlIGlucHV0IGRhdGEsIGluIG1zLlxuICAgICAqL1xuICAgIGFkZERvdWJsZVRvU3RyZWFtKGRhdGEsIHN0cmVhbU5hbWUsIHRpbWVzdGFtcCkge1xuICAgICAgICB0aGlzLndyYXBTdHJpbmdQdHIoc3RyZWFtTmFtZSwgKHN0cmVhbU5hbWVQdHIpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2FzbU1vZHVsZS5fYWRkRG91YmxlVG9JbnB1dFN0cmVhbShkYXRhLCBzdHJlYW1OYW1lUHRyLCB0aW1lc3RhbXApO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBmbG9hdCBwYWNrZXQgaW50byB0aGUgc3BlY2lmaWVkIHN0cmVhbSBhdCB0aGUgZ2l2ZW4gdGltZXN0YW1wLlxuICAgICAqIEBwYXJhbSBkYXRhIFRoZSBmbG9hdCBkYXRhIHRvIHNlbmQuXG4gICAgICogQHBhcmFtIHN0cmVhbU5hbWUgVGhlIG5hbWUgb2YgdGhlIGdyYXBoIGlucHV0IHN0cmVhbSB0byBzZW5kIGRhdGEgaW50by5cbiAgICAgKiBAcGFyYW0gdGltZXN0YW1wIFRoZSB0aW1lc3RhbXAgb2YgdGhlIGlucHV0IGRhdGEsIGluIG1zLlxuICAgICAqL1xuICAgIGFkZEZsb2F0VG9TdHJlYW0oZGF0YSwgc3RyZWFtTmFtZSwgdGltZXN0YW1wKSB7XG4gICAgICAgIHRoaXMud3JhcFN0cmluZ1B0cihzdHJlYW1OYW1lLCAoc3RyZWFtTmFtZVB0cikgPT4ge1xuICAgICAgICAgICAgLy8gTk9URTogX2FkZEZsb2F0VG9TdHJlYW0gYW5kIF9hZGRJbnRUb1N0cmVhbSBhcmUgcmVzZXJ2ZWQgZm9yIEpTXG4gICAgICAgICAgICAvLyBDYWxjdWxhdG9ycyBjdXJyZW50bHk7IHdlIG1heSB3YW50IHRvIHJldmlzaXQgdGhpcyBuYW1pbmcgc2NoZW1lIGluIHRoZVxuICAgICAgICAgICAgLy8gZnV0dXJlLlxuICAgICAgICAgICAgdGhpcy53YXNtTW9kdWxlLl9hZGRGbG9hdFRvSW5wdXRTdHJlYW0oZGF0YSwgc3RyZWFtTmFtZVB0ciwgdGltZXN0YW1wKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGFuIGludGVnZXIgcGFja2V0IGludG8gdGhlIHNwZWNpZmllZCBzdHJlYW0gYXQgdGhlIGdpdmVuIHRpbWVzdGFtcC5cbiAgICAgKiBAcGFyYW0gZGF0YSBUaGUgaW50ZWdlciBkYXRhIHRvIHNlbmQuXG4gICAgICogQHBhcmFtIHN0cmVhbU5hbWUgVGhlIG5hbWUgb2YgdGhlIGdyYXBoIGlucHV0IHN0cmVhbSB0byBzZW5kIGRhdGEgaW50by5cbiAgICAgKiBAcGFyYW0gdGltZXN0YW1wIFRoZSB0aW1lc3RhbXAgb2YgdGhlIGlucHV0IGRhdGEsIGluIG1zLlxuICAgICAqL1xuICAgIGFkZEludFRvU3RyZWFtKGRhdGEsIHN0cmVhbU5hbWUsIHRpbWVzdGFtcCkge1xuICAgICAgICB0aGlzLndyYXBTdHJpbmdQdHIoc3RyZWFtTmFtZSwgKHN0cmVhbU5hbWVQdHIpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2FzbU1vZHVsZS5fYWRkSW50VG9JbnB1dFN0cmVhbShkYXRhLCBzdHJlYW1OYW1lUHRyLCB0aW1lc3RhbXApO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBzdHJpbmcgcGFja2V0IGludG8gdGhlIHNwZWNpZmllZCBzdHJlYW0gYXQgdGhlIGdpdmVuIHRpbWVzdGFtcC5cbiAgICAgKiBAcGFyYW0gZGF0YSBUaGUgc3RyaW5nIGRhdGEgdG8gc2VuZC5cbiAgICAgKiBAcGFyYW0gc3RyZWFtTmFtZSBUaGUgbmFtZSBvZiB0aGUgZ3JhcGggaW5wdXQgc3RyZWFtIHRvIHNlbmQgZGF0YSBpbnRvLlxuICAgICAqIEBwYXJhbSB0aW1lc3RhbXAgVGhlIHRpbWVzdGFtcCBvZiB0aGUgaW5wdXQgZGF0YSwgaW4gbXMuXG4gICAgICovXG4gICAgYWRkU3RyaW5nVG9TdHJlYW0oZGF0YSwgc3RyZWFtTmFtZSwgdGltZXN0YW1wKSB7XG4gICAgICAgIHRoaXMud3JhcFN0cmluZ1B0cihzdHJlYW1OYW1lLCAoc3RyZWFtTmFtZVB0cikgPT4ge1xuICAgICAgICAgICAgdGhpcy53cmFwU3RyaW5nUHRyKGRhdGEsIChkYXRhUHRyKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy53YXNtTW9kdWxlLl9hZGRTdHJpbmdUb0lucHV0U3RyZWFtKGRhdGFQdHIsIHN0cmVhbU5hbWVQdHIsIHRpbWVzdGFtcCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGEgUmVjb3JkPHN0cmluZywgc3RyaW5nPiBwYWNrZXQgaW50byB0aGUgc3BlY2lmaWVkIHN0cmVhbSBhdCB0aGVcbiAgICAgKiBnaXZlbiB0aW1lc3RhbXAuXG4gICAgICogQHBhcmFtIGRhdGEgVGhlIHJlY29yZHMgdG8gc2VuZCAod2lsbCBiZWNvbWUgYVxuICAgICAqICAgICAgICAgICAgIHN0ZDo6ZmxhdF9oYXNoX21hcDxzdGQ6OnN0cmluZywgc3RkOjpzdHJpbmcpLlxuICAgICAqIEBwYXJhbSBzdHJlYW1OYW1lIFRoZSBuYW1lIG9mIHRoZSBncmFwaCBpbnB1dCBzdHJlYW0gdG8gc2VuZCBkYXRhIGludG8uXG4gICAgICogQHBhcmFtIHRpbWVzdGFtcCBUaGUgdGltZXN0YW1wIG9mIHRoZSBpbnB1dCBkYXRhLCBpbiBtcy5cbiAgICAgKi9cbiAgICBhZGRTdHJpbmdSZWNvcmRUb1N0cmVhbShkYXRhLCBzdHJlYW1OYW1lLCB0aW1lc3RhbXApIHtcbiAgICAgICAgdGhpcy53cmFwU3RyaW5nUHRyKHN0cmVhbU5hbWUsIChzdHJlYW1OYW1lUHRyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndyYXBTdHJpbmdQdHJQdHIoT2JqZWN0LmtleXMoZGF0YSksIChrZXlMaXN0KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy53cmFwU3RyaW5nUHRyUHRyKE9iamVjdC52YWx1ZXMoZGF0YSksICh2YWx1ZUxpc3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53YXNtTW9kdWxlLl9hZGRGbGF0SGFzaE1hcFRvSW5wdXRTdHJlYW0oa2V5TGlzdCwgdmFsdWVMaXN0LCBPYmplY3Qua2V5cyhkYXRhKS5sZW5ndGgsIHN0cmVhbU5hbWVQdHIsIHRpbWVzdGFtcCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGEgc2VyaWFsaXplZCBwcm90b2J1ZmZlciBwYWNrZXQgaW50byB0aGUgc3BlY2lmaWVkIHN0cmVhbSBhdCB0aGVcbiAgICAgKiAgICAgZ2l2ZW4gdGltZXN0YW1wLCB0byBiZSBwYXJzZWQgaW50byB0aGUgc3BlY2lmaWVkIHByb3RvYnVmZmVyIHR5cGUuXG4gICAgICogQHBhcmFtIGRhdGEgVGhlIGJpbmFyeSAoc2VyaWFsaXplZCkgcmF3IHByb3RvYnVmZmVyIGRhdGEuXG4gICAgICogQHBhcmFtIHByb3RvVHlwZSBUaGUgQysrIG5hbWVzcGFjZWQgdHlwZSB0aGlzIHByb3RvYnVmZmVyIGRhdGEgY29ycmVzcG9uZHNcbiAgICAgKiAgICAgdG8uIEl0IHdpbGwgYmUgY29udmVydGVkIHRvIHRoaXMgdHlwZSB3aGVuIG91dHB1dCBhcyBhIHBhY2tldCBpbnRvIHRoZVxuICAgICAqICAgICBncmFwaC5cbiAgICAgKiBAcGFyYW0gc3RyZWFtTmFtZSBUaGUgbmFtZSBvZiB0aGUgZ3JhcGggaW5wdXQgc3RyZWFtIHRvIHNlbmQgZGF0YSBpbnRvLlxuICAgICAqIEBwYXJhbSB0aW1lc3RhbXAgVGhlIHRpbWVzdGFtcCBvZiB0aGUgaW5wdXQgZGF0YSwgaW4gbXMuXG4gICAgICovXG4gICAgYWRkUHJvdG9Ub1N0cmVhbShkYXRhLCBwcm90b1R5cGUsIHN0cmVhbU5hbWUsIHRpbWVzdGFtcCkge1xuICAgICAgICB0aGlzLndyYXBTdHJpbmdQdHIoc3RyZWFtTmFtZSwgKHN0cmVhbU5hbWVQdHIpID0+IHtcbiAgICAgICAgICAgIHRoaXMud3JhcFN0cmluZ1B0cihwcm90b1R5cGUsIChwcm90b1R5cGVQdHIpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBEZWVwLWNvcHkgcHJvdG8gZGF0YSBpbnRvIFdhc20gaGVhcFxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFQdHIgPSB0aGlzLndhc21Nb2R1bGUuX21hbGxvYyhkYXRhLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogRW5zdXJlIHRoaXMgaXMgdGhlIGZhc3Rlc3Qgd2F5IHRvIGNvcHkgdGhpcyBkYXRhLlxuICAgICAgICAgICAgICAgIHRoaXMud2FzbU1vZHVsZS5IRUFQVTguc2V0KGRhdGEsIGRhdGFQdHIpO1xuICAgICAgICAgICAgICAgIHRoaXMud2FzbU1vZHVsZS5fYWRkUHJvdG9Ub0lucHV0U3RyZWFtKGRhdGFQdHIsIGRhdGEubGVuZ3RoLCBwcm90b1R5cGVQdHIsIHN0cmVhbU5hbWVQdHIsIHRpbWVzdGFtcCk7XG4gICAgICAgICAgICAgICAgdGhpcy53YXNtTW9kdWxlLl9mcmVlKGRhdGFQdHIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyBhIGJvb2xlYW4gcGFja2V0IHRvIHRoZSBzcGVjaWZpZWQgaW5wdXRfc2lkZV9wYWNrZXQuXG4gICAgICogQHBhcmFtIGRhdGEgVGhlIGJvb2xlYW4gZGF0YSB0byBzZW5kLlxuICAgICAqIEBwYXJhbSBzaWRlUGFja2V0TmFtZSBUaGUgbmFtZSBvZiB0aGUgZ3JhcGggaW5wdXQgc2lkZSBwYWNrZXQgdG8gc2VuZCBkYXRhXG4gICAgICogICAgIGludG8uXG4gICAgICovXG4gICAgYWRkQm9vbFRvSW5wdXRTaWRlUGFja2V0KGRhdGEsIHNpZGVQYWNrZXROYW1lKSB7XG4gICAgICAgIHRoaXMud3JhcFN0cmluZ1B0cihzaWRlUGFja2V0TmFtZSwgKHNpZGVQYWNrZXROYW1lUHRyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndhc21Nb2R1bGUuX2FkZEJvb2xUb0lucHV0U2lkZVBhY2tldChkYXRhLCBzaWRlUGFja2V0TmFtZVB0cik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyBhIGRvdWJsZSBwYWNrZXQgdG8gdGhlIHNwZWNpZmllZCBpbnB1dF9zaWRlX3BhY2tldC5cbiAgICAgKiBAcGFyYW0gZGF0YSBUaGUgZG91YmxlIGRhdGEgdG8gc2VuZC5cbiAgICAgKiBAcGFyYW0gc2lkZVBhY2tldE5hbWUgVGhlIG5hbWUgb2YgdGhlIGdyYXBoIGlucHV0IHNpZGUgcGFja2V0IHRvIHNlbmQgZGF0YVxuICAgICAqICAgICBpbnRvLlxuICAgICAqL1xuICAgIGFkZERvdWJsZVRvSW5wdXRTaWRlUGFja2V0KGRhdGEsIHNpZGVQYWNrZXROYW1lKSB7XG4gICAgICAgIHRoaXMud3JhcFN0cmluZ1B0cihzaWRlUGFja2V0TmFtZSwgKHNpZGVQYWNrZXROYW1lUHRyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndhc21Nb2R1bGUuX2FkZERvdWJsZVRvSW5wdXRTaWRlUGFja2V0KGRhdGEsIHNpZGVQYWNrZXROYW1lUHRyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF0dGFjaGVzIGEgZmxvYXQgcGFja2V0IHRvIHRoZSBzcGVjaWZpZWQgaW5wdXRfc2lkZV9wYWNrZXQuXG4gICAgICogQHBhcmFtIGRhdGEgVGhlIGZsb2F0IGRhdGEgdG8gc2VuZC5cbiAgICAgKiBAcGFyYW0gc2lkZVBhY2tldE5hbWUgVGhlIG5hbWUgb2YgdGhlIGdyYXBoIGlucHV0IHNpZGUgcGFja2V0IHRvIHNlbmQgZGF0YVxuICAgICAqICAgICBpbnRvLlxuICAgICAqL1xuICAgIGFkZEZsb2F0VG9JbnB1dFNpZGVQYWNrZXQoZGF0YSwgc2lkZVBhY2tldE5hbWUpIHtcbiAgICAgICAgdGhpcy53cmFwU3RyaW5nUHRyKHNpZGVQYWNrZXROYW1lLCAoc2lkZVBhY2tldE5hbWVQdHIpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2FzbU1vZHVsZS5fYWRkRmxvYXRUb0lucHV0U2lkZVBhY2tldChkYXRhLCBzaWRlUGFja2V0TmFtZVB0cik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyBhIGludGVnZXIgcGFja2V0IHRvIHRoZSBzcGVjaWZpZWQgaW5wdXRfc2lkZV9wYWNrZXQuXG4gICAgICogQHBhcmFtIGRhdGEgVGhlIGludGVnZXIgZGF0YSB0byBzZW5kLlxuICAgICAqIEBwYXJhbSBzaWRlUGFja2V0TmFtZSBUaGUgbmFtZSBvZiB0aGUgZ3JhcGggaW5wdXQgc2lkZSBwYWNrZXQgdG8gc2VuZCBkYXRhXG4gICAgICogICAgIGludG8uXG4gICAgICovXG4gICAgYWRkSW50VG9JbnB1dFNpZGVQYWNrZXQoZGF0YSwgc2lkZVBhY2tldE5hbWUpIHtcbiAgICAgICAgdGhpcy53cmFwU3RyaW5nUHRyKHNpZGVQYWNrZXROYW1lLCAoc2lkZVBhY2tldE5hbWVQdHIpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2FzbU1vZHVsZS5fYWRkSW50VG9JbnB1dFNpZGVQYWNrZXQoZGF0YSwgc2lkZVBhY2tldE5hbWVQdHIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0YWNoZXMgYSBzdHJpbmcgcGFja2V0IHRvIHRoZSBzcGVjaWZpZWQgaW5wdXRfc2lkZV9wYWNrZXQuXG4gICAgICogQHBhcmFtIGRhdGEgVGhlIHN0cmluZyBkYXRhIHRvIHNlbmQuXG4gICAgICogQHBhcmFtIHNpZGVQYWNrZXROYW1lIFRoZSBuYW1lIG9mIHRoZSBncmFwaCBpbnB1dCBzaWRlIHBhY2tldCB0byBzZW5kIGRhdGFcbiAgICAgKiAgICAgaW50by5cbiAgICAgKi9cbiAgICBhZGRTdHJpbmdUb0lucHV0U2lkZVBhY2tldChkYXRhLCBzaWRlUGFja2V0TmFtZSkge1xuICAgICAgICB0aGlzLndyYXBTdHJpbmdQdHIoc2lkZVBhY2tldE5hbWUsIChzaWRlUGFja2V0TmFtZVB0cikgPT4ge1xuICAgICAgICAgICAgdGhpcy53cmFwU3RyaW5nUHRyKGRhdGEsIChkYXRhUHRyKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy53YXNtTW9kdWxlLl9hZGRTdHJpbmdUb0lucHV0U2lkZVBhY2tldChkYXRhUHRyLCBzaWRlUGFja2V0TmFtZVB0cik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF0dGFjaGVzIGEgc2VyaWFsaXplZCBwcm90byBwYWNrZXQgdG8gdGhlIHNwZWNpZmllZCBpbnB1dF9zaWRlX3BhY2tldC5cbiAgICAgKiBAcGFyYW0gZGF0YSBUaGUgYmluYXJ5IChzZXJpYWxpemVkKSByYXcgcHJvdG9idWZmZXIgZGF0YS5cbiAgICAgKiBAcGFyYW0gcHJvdG9UeXBlIFRoZSBDKysgbmFtZXNwYWNlZCB0eXBlIHRoaXMgcHJvdG9idWZmZXIgZGF0YSBjb3JyZXNwb25kc1xuICAgICAqICAgICB0by4gSXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gdGhpcyB0eXBlIGZvciB1c2UgaW4gdGhlIGdyYXBoLlxuICAgICAqIEBwYXJhbSBzaWRlUGFja2V0TmFtZSBUaGUgbmFtZSBvZiB0aGUgZ3JhcGggaW5wdXQgc2lkZSBwYWNrZXQgdG8gc2VuZCBkYXRhXG4gICAgICogICAgIGludG8uXG4gICAgICovXG4gICAgYWRkUHJvdG9Ub0lucHV0U2lkZVBhY2tldChkYXRhLCBwcm90b1R5cGUsIHNpZGVQYWNrZXROYW1lKSB7XG4gICAgICAgIHRoaXMud3JhcFN0cmluZ1B0cihzaWRlUGFja2V0TmFtZSwgKHNpZGVQYWNrZXROYW1lUHRyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndyYXBTdHJpbmdQdHIocHJvdG9UeXBlLCAocHJvdG9UeXBlUHRyKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gRGVlcC1jb3B5IHByb3RvIGRhdGEgaW50byBXYXNtIGhlYXBcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhUHRyID0gdGhpcy53YXNtTW9kdWxlLl9tYWxsb2MoZGF0YS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IEVuc3VyZSB0aGlzIGlzIHRoZSBmYXN0ZXN0IHdheSB0byBjb3B5IHRoaXMgZGF0YS5cbiAgICAgICAgICAgICAgICB0aGlzLndhc21Nb2R1bGUuSEVBUFU4LnNldChkYXRhLCBkYXRhUHRyKTtcbiAgICAgICAgICAgICAgICB0aGlzLndhc21Nb2R1bGUuX2FkZFByb3RvVG9JbnB1dFNpZGVQYWNrZXQoZGF0YVB0ciwgZGF0YS5sZW5ndGgsIHByb3RvVHlwZVB0ciwgc2lkZVBhY2tldE5hbWVQdHIpO1xuICAgICAgICAgICAgICAgIHRoaXMud2FzbU1vZHVsZS5fZnJlZShkYXRhUHRyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0YWNoZXMgYSBib29sZWFuIHBhY2tldCBsaXN0ZW5lciB0byB0aGUgc3BlY2lmaWVkIG91dHB1dF9zdHJlYW0uXG4gICAgICogQHBhcmFtIG91dHB1dFN0cmVhbU5hbWUgVGhlIG5hbWUgb2YgdGhlIGdyYXBoIG91dHB1dCBzdHJlYW0gdG8gZ3JhYiBib29sZWFuXG4gICAgICogICAgIGRhdGEgZnJvbS5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tGY24gVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgYmFjayB3aXRoIHRoZSBkYXRhLCBhc1xuICAgICAqICAgICBpdCBpcyByZWNlaXZlZC4gIE5vdGUgdGhhdCB0aGUgZGF0YSBpcyBvbmx5IGd1YXJhbnRlZWQgdG8gZXhpc3QgZm9yIHRoZVxuICAgICAqICAgICBkdXJhdGlvbiBvZiB0aGUgY2FsbGJhY2ssIGFuZCB0aGUgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgaW5saW5lLCBzbyBpdFxuICAgICAqICAgICBzaG91bGQgbm90IHBlcmZvcm0gb3Zlcmx5IGNvbXBsaWNhdGVkIChvciBhbnkgYXN5bmMpIGJlaGF2aW9yLlxuICAgICAqL1xuICAgIGF0dGFjaEJvb2xMaXN0ZW5lcihvdXRwdXRTdHJlYW1OYW1lLCBjYWxsYmFja0Zjbikge1xuICAgICAgICAvLyBTZXQgdXAgb3VyIFRTIGxpc3RlbmVyIHRvIHJlY2VpdmUgYW55IHBhY2tldHMgZm9yIHRoaXMgc3RyZWFtLlxuICAgICAgICB0aGlzLnNldExpc3RlbmVyKG91dHB1dFN0cmVhbU5hbWUsIGNhbGxiYWNrRmNuKTtcbiAgICAgICAgLy8gVGVsbCBvdXIgZ3JhcGggdG8gbGlzdGVuIGZvciBib29sIHBhY2tldHMgb24gdGhpcyBzdHJlYW0uXG4gICAgICAgIHRoaXMud3JhcFN0cmluZ1B0cihvdXRwdXRTdHJlYW1OYW1lLCAob3V0cHV0U3RyZWFtTmFtZVB0cikgPT4ge1xuICAgICAgICAgICAgdGhpcy53YXNtTW9kdWxlLl9hdHRhY2hCb29sTGlzdGVuZXIob3V0cHV0U3RyZWFtTmFtZVB0cik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyBhIGJvb2xbXSBwYWNrZXQgbGlzdGVuZXIgdG8gdGhlIHNwZWNpZmllZCBvdXRwdXRfc3RyZWFtLlxuICAgICAqIEBwYXJhbSBvdXRwdXRTdHJlYW1OYW1lIFRoZSBuYW1lIG9mIHRoZSBncmFwaCBvdXRwdXQgc3RyZWFtIHRvIGdyYWJcbiAgICAgKiAgICAgc3RkOjp2ZWN0b3I8Ym9vbD4gZGF0YSBmcm9tLlxuICAgICAqIEBwYXJhbSBjYWxsYmFja0ZjbiBUaGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBiYWNrIHdpdGggdGhlIGRhdGEsIGFzXG4gICAgICogICAgIGl0IGlzIHJlY2VpdmVkLiAgTm90ZSB0aGF0IHRoZSBkYXRhIGlzIG9ubHkgZ3VhcmFudGVlZCB0byBleGlzdCBmb3IgdGhlXG4gICAgICogICAgIGR1cmF0aW9uIG9mIHRoZSBjYWxsYmFjaywgYW5kIHRoZSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBpbmxpbmUsIHNvIGl0XG4gICAgICogICAgIHNob3VsZCBub3QgcGVyZm9ybSBvdmVybHkgY29tcGxpY2F0ZWQgKG9yIGFueSBhc3luYykgYmVoYXZpb3IuXG4gICAgICovXG4gICAgYXR0YWNoQm9vbFZlY3Rvckxpc3RlbmVyKG91dHB1dFN0cmVhbU5hbWUsIGNhbGxiYWNrRmNuKSB7XG4gICAgICAgIC8vIFNldCB1cCBvdXIgVFMgbGlzdGVuZXIgdG8gcmVjZWl2ZSBhbnkgcGFja2V0cyBmb3IgdGhpcyBzdHJlYW0uXG4gICAgICAgIHRoaXMuc2V0VmVjdG9yTGlzdGVuZXIob3V0cHV0U3RyZWFtTmFtZSwgY2FsbGJhY2tGY24pO1xuICAgICAgICAvLyBUZWxsIG91ciBncmFwaCB0byBsaXN0ZW4gZm9yIHN0ZDo6dmVjdG9yPGJvb2w+IHBhY2tldHMgb24gdGhpcyBzdHJlYW0uXG4gICAgICAgIHRoaXMud3JhcFN0cmluZ1B0cihvdXRwdXRTdHJlYW1OYW1lLCAob3V0cHV0U3RyZWFtTmFtZVB0cikgPT4ge1xuICAgICAgICAgICAgdGhpcy53YXNtTW9kdWxlLl9hdHRhY2hCb29sVmVjdG9yTGlzdGVuZXIob3V0cHV0U3RyZWFtTmFtZVB0cik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyBhbiBpbnQgcGFja2V0IGxpc3RlbmVyIHRvIHRoZSBzcGVjaWZpZWQgb3V0cHV0X3N0cmVhbS5cbiAgICAgKiBAcGFyYW0gb3V0cHV0U3RyZWFtTmFtZSBUaGUgbmFtZSBvZiB0aGUgZ3JhcGggb3V0cHV0IHN0cmVhbSB0byBncmFiIGludFxuICAgICAqICAgICBkYXRhIGZyb20uXG4gICAgICogQHBhcmFtIGNhbGxiYWNrRmNuIFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIGJhY2sgd2l0aCB0aGUgZGF0YSwgYXNcbiAgICAgKiAgICAgaXQgaXMgcmVjZWl2ZWQuICBOb3RlIHRoYXQgdGhlIGRhdGEgaXMgb25seSBndWFyYW50ZWVkIHRvIGV4aXN0IGZvciB0aGVcbiAgICAgKiAgICAgZHVyYXRpb24gb2YgdGhlIGNhbGxiYWNrLCBhbmQgdGhlIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGlubGluZSwgc28gaXRcbiAgICAgKiAgICAgc2hvdWxkIG5vdCBwZXJmb3JtIG92ZXJseSBjb21wbGljYXRlZCAob3IgYW55IGFzeW5jKSBiZWhhdmlvci5cbiAgICAgKi9cbiAgICBhdHRhY2hJbnRMaXN0ZW5lcihvdXRwdXRTdHJlYW1OYW1lLCBjYWxsYmFja0Zjbikge1xuICAgICAgICAvLyBTZXQgdXAgb3VyIFRTIGxpc3RlbmVyIHRvIHJlY2VpdmUgYW55IHBhY2tldHMgZm9yIHRoaXMgc3RyZWFtLlxuICAgICAgICB0aGlzLnNldExpc3RlbmVyKG91dHB1dFN0cmVhbU5hbWUsIGNhbGxiYWNrRmNuKTtcbiAgICAgICAgLy8gVGVsbCBvdXIgZ3JhcGggdG8gbGlzdGVuIGZvciBpbnQgcGFja2V0cyBvbiB0aGlzIHN0cmVhbS5cbiAgICAgICAgdGhpcy53cmFwU3RyaW5nUHRyKG91dHB1dFN0cmVhbU5hbWUsIChvdXRwdXRTdHJlYW1OYW1lUHRyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndhc21Nb2R1bGUuX2F0dGFjaEludExpc3RlbmVyKG91dHB1dFN0cmVhbU5hbWVQdHIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0YWNoZXMgYW4gaW50W10gcGFja2V0IGxpc3RlbmVyIHRvIHRoZSBzcGVjaWZpZWQgb3V0cHV0X3N0cmVhbS5cbiAgICAgKiBAcGFyYW0gb3V0cHV0U3RyZWFtTmFtZSBUaGUgbmFtZSBvZiB0aGUgZ3JhcGggb3V0cHV0IHN0cmVhbSB0byBncmFiXG4gICAgICogICAgIHN0ZDo6dmVjdG9yPGludD4gZGF0YSBmcm9tLlxuICAgICAqIEBwYXJhbSBjYWxsYmFja0ZjbiBUaGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBiYWNrIHdpdGggdGhlIGRhdGEsIGFzXG4gICAgICogICAgIGl0IGlzIHJlY2VpdmVkLiAgTm90ZSB0aGF0IHRoZSBkYXRhIGlzIG9ubHkgZ3VhcmFudGVlZCB0byBleGlzdCBmb3IgdGhlXG4gICAgICogICAgIGR1cmF0aW9uIG9mIHRoZSBjYWxsYmFjaywgYW5kIHRoZSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBpbmxpbmUsIHNvIGl0XG4gICAgICogICAgIHNob3VsZCBub3QgcGVyZm9ybSBvdmVybHkgY29tcGxpY2F0ZWQgKG9yIGFueSBhc3luYykgYmVoYXZpb3IuXG4gICAgICovXG4gICAgYXR0YWNoSW50VmVjdG9yTGlzdGVuZXIob3V0cHV0U3RyZWFtTmFtZSwgY2FsbGJhY2tGY24pIHtcbiAgICAgICAgLy8gU2V0IHVwIG91ciBUUyBsaXN0ZW5lciB0byByZWNlaXZlIGFueSBwYWNrZXRzIGZvciB0aGlzIHN0cmVhbS5cbiAgICAgICAgdGhpcy5zZXRWZWN0b3JMaXN0ZW5lcihvdXRwdXRTdHJlYW1OYW1lLCBjYWxsYmFja0Zjbik7XG4gICAgICAgIC8vIFRlbGwgb3VyIGdyYXBoIHRvIGxpc3RlbiBmb3Igc3RkOjp2ZWN0b3I8aW50PiBwYWNrZXRzIG9uIHRoaXMgc3RyZWFtLlxuICAgICAgICB0aGlzLndyYXBTdHJpbmdQdHIob3V0cHV0U3RyZWFtTmFtZSwgKG91dHB1dFN0cmVhbU5hbWVQdHIpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2FzbU1vZHVsZS5fYXR0YWNoSW50VmVjdG9yTGlzdGVuZXIob3V0cHV0U3RyZWFtTmFtZVB0cik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyBhIGRvdWJsZSBwYWNrZXQgbGlzdGVuZXIgdG8gdGhlIHNwZWNpZmllZCBvdXRwdXRfc3RyZWFtLlxuICAgICAqIEBwYXJhbSBvdXRwdXRTdHJlYW1OYW1lIFRoZSBuYW1lIG9mIHRoZSBncmFwaCBvdXRwdXQgc3RyZWFtIHRvIGdyYWIgZG91YmxlXG4gICAgICogICAgIGRhdGEgZnJvbS5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tGY24gVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgYmFjayB3aXRoIHRoZSBkYXRhLCBhc1xuICAgICAqICAgICBpdCBpcyByZWNlaXZlZC4gIE5vdGUgdGhhdCB0aGUgZGF0YSBpcyBvbmx5IGd1YXJhbnRlZWQgdG8gZXhpc3QgZm9yIHRoZVxuICAgICAqICAgICBkdXJhdGlvbiBvZiB0aGUgY2FsbGJhY2ssIGFuZCB0aGUgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgaW5saW5lLCBzbyBpdFxuICAgICAqICAgICBzaG91bGQgbm90IHBlcmZvcm0gb3Zlcmx5IGNvbXBsaWNhdGVkIChvciBhbnkgYXN5bmMpIGJlaGF2aW9yLlxuICAgICAqL1xuICAgIGF0dGFjaERvdWJsZUxpc3RlbmVyKG91dHB1dFN0cmVhbU5hbWUsIGNhbGxiYWNrRmNuKSB7XG4gICAgICAgIC8vIFNldCB1cCBvdXIgVFMgbGlzdGVuZXIgdG8gcmVjZWl2ZSBhbnkgcGFja2V0cyBmb3IgdGhpcyBzdHJlYW0uXG4gICAgICAgIHRoaXMuc2V0TGlzdGVuZXIob3V0cHV0U3RyZWFtTmFtZSwgY2FsbGJhY2tGY24pO1xuICAgICAgICAvLyBUZWxsIG91ciBncmFwaCB0byBsaXN0ZW4gZm9yIGRvdWJsZSBwYWNrZXRzIG9uIHRoaXMgc3RyZWFtLlxuICAgICAgICB0aGlzLndyYXBTdHJpbmdQdHIob3V0cHV0U3RyZWFtTmFtZSwgKG91dHB1dFN0cmVhbU5hbWVQdHIpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2FzbU1vZHVsZS5fYXR0YWNoRG91YmxlTGlzdGVuZXIob3V0cHV0U3RyZWFtTmFtZVB0cik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyBhIGRvdWJsZVtdIHBhY2tldCBsaXN0ZW5lciB0byB0aGUgc3BlY2lmaWVkIG91dHB1dF9zdHJlYW0uXG4gICAgICogQHBhcmFtIG91dHB1dFN0cmVhbU5hbWUgVGhlIG5hbWUgb2YgdGhlIGdyYXBoIG91dHB1dCBzdHJlYW0gdG8gZ3JhYlxuICAgICAqICAgICBzdGQ6OnZlY3Rvcjxkb3VibGU+IGRhdGEgZnJvbS5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tGY24gVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgYmFjayB3aXRoIHRoZSBkYXRhLCBhc1xuICAgICAqICAgICBpdCBpcyByZWNlaXZlZC4gIE5vdGUgdGhhdCB0aGUgZGF0YSBpcyBvbmx5IGd1YXJhbnRlZWQgdG8gZXhpc3QgZm9yIHRoZVxuICAgICAqICAgICBkdXJhdGlvbiBvZiB0aGUgY2FsbGJhY2ssIGFuZCB0aGUgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgaW5saW5lLCBzbyBpdFxuICAgICAqICAgICBzaG91bGQgbm90IHBlcmZvcm0gb3Zlcmx5IGNvbXBsaWNhdGVkIChvciBhbnkgYXN5bmMpIGJlaGF2aW9yLlxuICAgICAqL1xuICAgIGF0dGFjaERvdWJsZVZlY3Rvckxpc3RlbmVyKG91dHB1dFN0cmVhbU5hbWUsIGNhbGxiYWNrRmNuKSB7XG4gICAgICAgIC8vIFNldCB1cCBvdXIgVFMgbGlzdGVuZXIgdG8gcmVjZWl2ZSBhbnkgcGFja2V0cyBmb3IgdGhpcyBzdHJlYW0uXG4gICAgICAgIHRoaXMuc2V0VmVjdG9yTGlzdGVuZXIob3V0cHV0U3RyZWFtTmFtZSwgY2FsbGJhY2tGY24pO1xuICAgICAgICAvLyBUZWxsIG91ciBncmFwaCB0byBsaXN0ZW4gZm9yIHN0ZDo6dmVjdG9yPGRvdWJsZT4gcGFja2V0cyBvbiB0aGlzIHN0cmVhbS5cbiAgICAgICAgdGhpcy53cmFwU3RyaW5nUHRyKG91dHB1dFN0cmVhbU5hbWUsIChvdXRwdXRTdHJlYW1OYW1lUHRyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndhc21Nb2R1bGUuX2F0dGFjaERvdWJsZVZlY3Rvckxpc3RlbmVyKG91dHB1dFN0cmVhbU5hbWVQdHIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0YWNoZXMgYSBmbG9hdCBwYWNrZXQgbGlzdGVuZXIgdG8gdGhlIHNwZWNpZmllZCBvdXRwdXRfc3RyZWFtLlxuICAgICAqIEBwYXJhbSBvdXRwdXRTdHJlYW1OYW1lIFRoZSBuYW1lIG9mIHRoZSBncmFwaCBvdXRwdXQgc3RyZWFtIHRvIGdyYWIgZmxvYXRcbiAgICAgKiAgICAgZGF0YSBmcm9tLlxuICAgICAqIEBwYXJhbSBjYWxsYmFja0ZjbiBUaGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBiYWNrIHdpdGggdGhlIGRhdGEsIGFzXG4gICAgICogICAgIGl0IGlzIHJlY2VpdmVkLiAgTm90ZSB0aGF0IHRoZSBkYXRhIGlzIG9ubHkgZ3VhcmFudGVlZCB0byBleGlzdCBmb3IgdGhlXG4gICAgICogICAgIGR1cmF0aW9uIG9mIHRoZSBjYWxsYmFjaywgYW5kIHRoZSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBpbmxpbmUsIHNvIGl0XG4gICAgICogICAgIHNob3VsZCBub3QgcGVyZm9ybSBvdmVybHkgY29tcGxpY2F0ZWQgKG9yIGFueSBhc3luYykgYmVoYXZpb3IuXG4gICAgICovXG4gICAgYXR0YWNoRmxvYXRMaXN0ZW5lcihvdXRwdXRTdHJlYW1OYW1lLCBjYWxsYmFja0Zjbikge1xuICAgICAgICAvLyBTZXQgdXAgb3VyIFRTIGxpc3RlbmVyIHRvIHJlY2VpdmUgYW55IHBhY2tldHMgZm9yIHRoaXMgc3RyZWFtLlxuICAgICAgICB0aGlzLnNldExpc3RlbmVyKG91dHB1dFN0cmVhbU5hbWUsIGNhbGxiYWNrRmNuKTtcbiAgICAgICAgLy8gVGVsbCBvdXIgZ3JhcGggdG8gbGlzdGVuIGZvciBmbG9hdCBwYWNrZXRzIG9uIHRoaXMgc3RyZWFtLlxuICAgICAgICB0aGlzLndyYXBTdHJpbmdQdHIob3V0cHV0U3RyZWFtTmFtZSwgKG91dHB1dFN0cmVhbU5hbWVQdHIpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2FzbU1vZHVsZS5fYXR0YWNoRmxvYXRMaXN0ZW5lcihvdXRwdXRTdHJlYW1OYW1lUHRyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF0dGFjaGVzIGEgZmxvYXRbXSBwYWNrZXQgbGlzdGVuZXIgdG8gdGhlIHNwZWNpZmllZCBvdXRwdXRfc3RyZWFtLlxuICAgICAqIEBwYXJhbSBvdXRwdXRTdHJlYW1OYW1lIFRoZSBuYW1lIG9mIHRoZSBncmFwaCBvdXRwdXQgc3RyZWFtIHRvIGdyYWJcbiAgICAgKiAgICAgc3RkOjp2ZWN0b3I8ZmxvYXQ+IGRhdGEgZnJvbS5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tGY24gVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgYmFjayB3aXRoIHRoZSBkYXRhLCBhc1xuICAgICAqICAgICBpdCBpcyByZWNlaXZlZC4gIE5vdGUgdGhhdCB0aGUgZGF0YSBpcyBvbmx5IGd1YXJhbnRlZWQgdG8gZXhpc3QgZm9yIHRoZVxuICAgICAqICAgICBkdXJhdGlvbiBvZiB0aGUgY2FsbGJhY2ssIGFuZCB0aGUgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgaW5saW5lLCBzbyBpdFxuICAgICAqICAgICBzaG91bGQgbm90IHBlcmZvcm0gb3Zlcmx5IGNvbXBsaWNhdGVkIChvciBhbnkgYXN5bmMpIGJlaGF2aW9yLlxuICAgICAqL1xuICAgIGF0dGFjaEZsb2F0VmVjdG9yTGlzdGVuZXIob3V0cHV0U3RyZWFtTmFtZSwgY2FsbGJhY2tGY24pIHtcbiAgICAgICAgLy8gU2V0IHVwIG91ciBUUyBsaXN0ZW5lciB0byByZWNlaXZlIGFueSBwYWNrZXRzIGZvciB0aGlzIHN0cmVhbS5cbiAgICAgICAgdGhpcy5zZXRWZWN0b3JMaXN0ZW5lcihvdXRwdXRTdHJlYW1OYW1lLCBjYWxsYmFja0Zjbik7XG4gICAgICAgIC8vIFRlbGwgb3VyIGdyYXBoIHRvIGxpc3RlbiBmb3Igc3RkOjp2ZWN0b3I8ZmxvYXQ+IHBhY2tldHMgb24gdGhpcyBzdHJlYW0uXG4gICAgICAgIHRoaXMud3JhcFN0cmluZ1B0cihvdXRwdXRTdHJlYW1OYW1lLCAob3V0cHV0U3RyZWFtTmFtZVB0cikgPT4ge1xuICAgICAgICAgICAgdGhpcy53YXNtTW9kdWxlLl9hdHRhY2hGbG9hdFZlY3Rvckxpc3RlbmVyKG91dHB1dFN0cmVhbU5hbWVQdHIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0YWNoZXMgYSBzdHJpbmcgcGFja2V0IGxpc3RlbmVyIHRvIHRoZSBzcGVjaWZpZWQgb3V0cHV0X3N0cmVhbS5cbiAgICAgKiBAcGFyYW0gb3V0cHV0U3RyZWFtTmFtZSBUaGUgbmFtZSBvZiB0aGUgZ3JhcGggb3V0cHV0IHN0cmVhbSB0byBncmFiIHN0cmluZ1xuICAgICAqICAgICBkYXRhIGZyb20uXG4gICAgICogQHBhcmFtIGNhbGxiYWNrRmNuIFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIGJhY2sgd2l0aCB0aGUgZGF0YSwgYXNcbiAgICAgKiAgICAgaXQgaXMgcmVjZWl2ZWQuICBOb3RlIHRoYXQgdGhlIGRhdGEgaXMgb25seSBndWFyYW50ZWVkIHRvIGV4aXN0IGZvciB0aGVcbiAgICAgKiAgICAgZHVyYXRpb24gb2YgdGhlIGNhbGxiYWNrLCBhbmQgdGhlIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGlubGluZSwgc28gaXRcbiAgICAgKiAgICAgc2hvdWxkIG5vdCBwZXJmb3JtIG92ZXJseSBjb21wbGljYXRlZCAob3IgYW55IGFzeW5jKSBiZWhhdmlvci5cbiAgICAgKi9cbiAgICBhdHRhY2hTdHJpbmdMaXN0ZW5lcihvdXRwdXRTdHJlYW1OYW1lLCBjYWxsYmFja0Zjbikge1xuICAgICAgICAvLyBTZXQgdXAgb3VyIFRTIGxpc3RlbmVyIHRvIHJlY2VpdmUgYW55IHBhY2tldHMgZm9yIHRoaXMgc3RyZWFtLlxuICAgICAgICB0aGlzLnNldExpc3RlbmVyKG91dHB1dFN0cmVhbU5hbWUsIGNhbGxiYWNrRmNuKTtcbiAgICAgICAgLy8gVGVsbCBvdXIgZ3JhcGggdG8gbGlzdGVuIGZvciBzdHJpbmcgcGFja2V0cyBvbiB0aGlzIHN0cmVhbS5cbiAgICAgICAgdGhpcy53cmFwU3RyaW5nUHRyKG91dHB1dFN0cmVhbU5hbWUsIChvdXRwdXRTdHJlYW1OYW1lUHRyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndhc21Nb2R1bGUuX2F0dGFjaFN0cmluZ0xpc3RlbmVyKG91dHB1dFN0cmVhbU5hbWVQdHIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0YWNoZXMgYSBzdHJpbmdbXSBwYWNrZXQgbGlzdGVuZXIgdG8gdGhlIHNwZWNpZmllZCBvdXRwdXRfc3RyZWFtLlxuICAgICAqIEBwYXJhbSBvdXRwdXRTdHJlYW1OYW1lIFRoZSBuYW1lIG9mIHRoZSBncmFwaCBvdXRwdXQgc3RyZWFtIHRvIGdyYWJcbiAgICAgKiAgICAgc3RkOjp2ZWN0b3I8c3RkOjpzdHJpbmc+IGRhdGEgZnJvbS5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tGY24gVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgYmFjayB3aXRoIHRoZSBkYXRhLCBhc1xuICAgICAqICAgICBpdCBpcyByZWNlaXZlZC4gIE5vdGUgdGhhdCB0aGUgZGF0YSBpcyBvbmx5IGd1YXJhbnRlZWQgdG8gZXhpc3QgZm9yIHRoZVxuICAgICAqICAgICBkdXJhdGlvbiBvZiB0aGUgY2FsbGJhY2ssIGFuZCB0aGUgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgaW5saW5lLCBzbyBpdFxuICAgICAqICAgICBzaG91bGQgbm90IHBlcmZvcm0gb3Zlcmx5IGNvbXBsaWNhdGVkIChvciBhbnkgYXN5bmMpIGJlaGF2aW9yLlxuICAgICAqL1xuICAgIGF0dGFjaFN0cmluZ1ZlY3Rvckxpc3RlbmVyKG91dHB1dFN0cmVhbU5hbWUsIGNhbGxiYWNrRmNuKSB7XG4gICAgICAgIC8vIFNldCB1cCBvdXIgVFMgbGlzdGVuZXIgdG8gcmVjZWl2ZSBhbnkgcGFja2V0cyBmb3IgdGhpcyBzdHJlYW0uXG4gICAgICAgIHRoaXMuc2V0VmVjdG9yTGlzdGVuZXIob3V0cHV0U3RyZWFtTmFtZSwgY2FsbGJhY2tGY24pO1xuICAgICAgICAvLyBUZWxsIG91ciBncmFwaCB0byBsaXN0ZW4gZm9yIHN0ZDo6dmVjdG9yPHN0cmluZz4gcGFja2V0cyBvbiB0aGlzIHN0cmVhbS5cbiAgICAgICAgdGhpcy53cmFwU3RyaW5nUHRyKG91dHB1dFN0cmVhbU5hbWUsIChvdXRwdXRTdHJlYW1OYW1lUHRyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndhc21Nb2R1bGUuX2F0dGFjaFN0cmluZ1ZlY3Rvckxpc3RlbmVyKG91dHB1dFN0cmVhbU5hbWVQdHIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0YWNoZXMgYSBzZXJpYWxpemVkIHByb3RvIHBhY2tldCBsaXN0ZW5lciB0byB0aGUgc3BlY2lmaWVkIG91dHB1dF9zdHJlYW0uXG4gICAgICogQHBhcmFtIG91dHB1dFN0cmVhbU5hbWUgVGhlIG5hbWUgb2YgdGhlIGdyYXBoIG91dHB1dCBzdHJlYW0gdG8gZ3JhYiBiaW5hcnlcbiAgICAgKiAgICAgc2VyaWFsaXplZCBwcm90byBkYXRhIGZyb20gKGluIFVpbnQ4QXJyYXkgZm9ybWF0KS5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tGY24gVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgYmFjayB3aXRoIHRoZSBkYXRhLCBhc1xuICAgICAqICAgICBpdCBpcyByZWNlaXZlZC4gIE5vdGUgdGhhdCBieSBkZWZhdWx0IHRoZSBkYXRhIGlzIG9ubHkgZ3VhcmFudGVlZCB0b1xuICAgICAqICAgICBleGlzdCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBjYWxsYmFjaywgYW5kIHRoZSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZFxuICAgICAqICAgICBpbmxpbmUsIHNvIGl0IHNob3VsZCBub3QgcGVyZm9ybSBvdmVybHkgY29tcGxpY2F0ZWQgKG9yIGFueSBhc3luYylcbiAgICAgKiAgICAgYmVoYXZpb3IuIElmIHRoZSBwcm90byBkYXRhIG5lZWRzIHRvIGJlIGFibGUgdG8gb3V0bGl2ZSB0aGUgY2FsbCwgeW91XG4gICAgICogICAgIG1heSBzZXQgdGhlIG9wdGlvbmFsIG1ha2VEZWVwQ29weSBwYXJhbWV0ZXIgdG8gdHJ1ZSwgb3IgY2FuIG1hbnVhbGx5XG4gICAgICogICAgIGRlZXAtY29weSB0aGUgZGF0YSB5b3Vyc2VsZi5cbiAgICAgKiBAcGFyYW0gbWFrZURlZXBDb3B5IE9wdGlvbmFsIGNvbnZlbmllbmNlIHBhcmFtZXRlciB3aGljaCwgaWYgc2V0IHRvIHRydWUsXG4gICAgICogICAgIHdpbGwgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgbWVtb3J5IG1hbmFnZW1lbnQgYmVoYXZpb3IgYW5kIG1ha2UgYSBkZWVwXG4gICAgICogICAgIGNvcHkgb2YgdGhlIHVuZGVybHlpbmcgZGF0YSwgcmF0aGVyIHRoYW4ganVzdCByZXR1cm5pbmcgYSB2aWV3IGludG8gdGhlXG4gICAgICogICAgIEMrKy1tYW5hZ2VkIG1lbW9yeS4gQXQgdGhlIGNvc3Qgb2YgYSBkYXRhIGNvcHksIHRoaXMgYWxsb3dzIHRoZVxuICAgICAqICAgICByZXR1cm5lZCBkYXRhIHRvIG91dGxpdmUgdGhlIGNhbGxiYWNrIGxpZmV0aW1lIChhbmQgaXQgd2lsbCBiZSBjbGVhbmVkXG4gICAgICogICAgIHVwIGF1dG9tYXRpY2FsbHkgYnkgSlMgZ2FyYmFnZSBjb2xsZWN0aW9uIHdoZW5ldmVyIHRoZSB1c2VyIGlzIGZpbmlzaGVkXG4gICAgICogICAgIHdpdGggaXQpLlxuICAgICAqL1xuICAgIGF0dGFjaFByb3RvTGlzdGVuZXIob3V0cHV0U3RyZWFtTmFtZSwgY2FsbGJhY2tGY24sIG1ha2VEZWVwQ29weSkge1xuICAgICAgICAvLyBTZXQgdXAgb3VyIFRTIGxpc3RlbmVyIHRvIHJlY2VpdmUgYW55IHBhY2tldHMgZm9yIHRoaXMgc3RyZWFtLlxuICAgICAgICB0aGlzLnNldExpc3RlbmVyKG91dHB1dFN0cmVhbU5hbWUsIGNhbGxiYWNrRmNuKTtcbiAgICAgICAgLy8gVGVsbCBvdXIgZ3JhcGggdG8gbGlzdGVuIGZvciBiaW5hcnkgc2VyaWFsaXplZCBwcm90byBkYXRhIHBhY2tldHMgb24gdGhpc1xuICAgICAgICAvLyBzdHJlYW0uXG4gICAgICAgIHRoaXMud3JhcFN0cmluZ1B0cihvdXRwdXRTdHJlYW1OYW1lLCAob3V0cHV0U3RyZWFtTmFtZVB0cikgPT4ge1xuICAgICAgICAgICAgdGhpcy53YXNtTW9kdWxlLl9hdHRhY2hQcm90b0xpc3RlbmVyKG91dHB1dFN0cmVhbU5hbWVQdHIsIG1ha2VEZWVwQ29weSB8fCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyBhIGxpc3RlbmVyIGZvciBhbiBhcnJheSBvZiBzZXJpYWxpemVkIHByb3RvIHBhY2tldHMgdG8gdGhlXG4gICAgICogc3BlY2lmaWVkIG91dHB1dF9zdHJlYW0uXG4gICAgICogQHBhcmFtIG91dHB1dFN0cmVhbU5hbWUgVGhlIG5hbWUgb2YgdGhlIGdyYXBoIG91dHB1dCBzdHJlYW0gdG8gZ3JhYiBhXG4gICAgICogICAgIHZlY3RvciBvZiBiaW5hcnkgc2VyaWFsaXplZCBwcm90byBkYXRhIGZyb20gKGluIFVpbnQ4QXJyYXlbXSBmb3JtYXQpLlxuICAgICAqIEBwYXJhbSBjYWxsYmFja0ZjbiBUaGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBiYWNrIHdpdGggdGhlIGRhdGEsIGFzXG4gICAgICogICAgIGl0IGlzIHJlY2VpdmVkLiAgTm90ZSB0aGF0IGJ5IGRlZmF1bHQgdGhlIGRhdGEgaXMgb25seSBndWFyYW50ZWVkIHRvXG4gICAgICogICAgIGV4aXN0IGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIGNhbGxiYWNrLCBhbmQgdGhlIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkXG4gICAgICogICAgIGlubGluZSwgc28gaXQgc2hvdWxkIG5vdCBwZXJmb3JtIG92ZXJseSBjb21wbGljYXRlZCAob3IgYW55IGFzeW5jKVxuICAgICAqICAgICBiZWhhdmlvci4gSWYgdGhlIHByb3RvIGRhdGEgbmVlZHMgdG8gYmUgYWJsZSB0byBvdXRsaXZlIHRoZSBjYWxsLCB5b3VcbiAgICAgKiAgICAgbWF5IHNldCB0aGUgb3B0aW9uYWwgbWFrZURlZXBDb3B5IHBhcmFtZXRlciB0byB0cnVlLCBvciBjYW4gbWFudWFsbHlcbiAgICAgKiAgICAgZGVlcC1jb3B5IHRoZSBkYXRhIHlvdXJzZWxmLlxuICAgICAqIEBwYXJhbSBtYWtlRGVlcENvcHkgT3B0aW9uYWwgY29udmVuaWVuY2UgcGFyYW1ldGVyIHdoaWNoLCBpZiBzZXQgdG8gdHJ1ZSxcbiAgICAgKiAgICAgd2lsbCBvdmVycmlkZSB0aGUgZGVmYXVsdCBtZW1vcnkgbWFuYWdlbWVudCBiZWhhdmlvciBhbmQgbWFrZSBhIGRlZXBcbiAgICAgKiAgICAgY29weSBvZiB0aGUgdW5kZXJseWluZyBkYXRhLCByYXRoZXIgdGhhbiBqdXN0IHJldHVybmluZyBhIHZpZXcgaW50byB0aGVcbiAgICAgKiAgICAgQysrLW1hbmFnZWQgbWVtb3J5LiBBdCB0aGUgY29zdCBvZiBhIGRhdGEgY29weSwgdGhpcyBhbGxvd3MgdGhlXG4gICAgICogICAgIHJldHVybmVkIGRhdGEgdG8gb3V0bGl2ZSB0aGUgY2FsbGJhY2sgbGlmZXRpbWUgKGFuZCBpdCB3aWxsIGJlIGNsZWFuZWRcbiAgICAgKiAgICAgdXAgYXV0b21hdGljYWxseSBieSBKUyBnYXJiYWdlIGNvbGxlY3Rpb24gd2hlbmV2ZXIgdGhlIHVzZXIgaXMgZmluaXNoZWRcbiAgICAgKiAgICAgd2l0aCBpdCkuXG4gICAgICovXG4gICAgYXR0YWNoUHJvdG9WZWN0b3JMaXN0ZW5lcihvdXRwdXRTdHJlYW1OYW1lLCBjYWxsYmFja0ZjbiwgbWFrZURlZXBDb3B5KSB7XG4gICAgICAgIC8vIFNldCB1cCBvdXIgVFMgbGlzdGVuZXIgdG8gcmVjZWl2ZSBhbnkgcGFja2V0cyBmb3IgdGhpcyBzdHJlYW0uXG4gICAgICAgIHRoaXMuc2V0VmVjdG9yTGlzdGVuZXIob3V0cHV0U3RyZWFtTmFtZSwgY2FsbGJhY2tGY24pO1xuICAgICAgICAvLyBUZWxsIG91ciBncmFwaCB0byBsaXN0ZW4gZm9yIGEgdmVjdG9yIG9mIGJpbmFyeSBzZXJpYWxpemVkIHByb3RvIHBhY2tldHNcbiAgICAgICAgLy8gb24gdGhpcyBzdHJlYW0uXG4gICAgICAgIHRoaXMud3JhcFN0cmluZ1B0cihvdXRwdXRTdHJlYW1OYW1lLCAob3V0cHV0U3RyZWFtTmFtZVB0cikgPT4ge1xuICAgICAgICAgICAgdGhpcy53YXNtTW9kdWxlLl9hdHRhY2hQcm90b1ZlY3Rvckxpc3RlbmVyKG91dHB1dFN0cmVhbU5hbWVQdHIsIG1ha2VEZWVwQ29weSB8fCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgbGlzdGVuZXIgdG8gYmUgY2FsbGVkIGJhY2sgd2l0aCBhdWRpbyBvdXRwdXQgcGFja2V0IGRhdGEsIGFzIGFcbiAgICAgKiBGbG9hdDMyQXJyYXksIHdoZW4gZ3JhcGggaGFzIGZpbmlzaGVkIHByb2Nlc3NpbmcgaXQuXG4gICAgICogQHBhcmFtIGF1ZGlvT3V0cHV0TGlzdGVuZXIgVGhlIGNhbGxlcidzIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHNldE9uQXVkaW9PdXRwdXQoYXVkaW9PdXRwdXRMaXN0ZW5lcikge1xuICAgICAgICB0aGlzLndhc21Nb2R1bGUub25BdWRpb091dHB1dCA9IGF1ZGlvT3V0cHV0TGlzdGVuZXI7XG4gICAgICAgIGlmICghdGhpcy53YXNtTW9kdWxlLl9hdHRhY2hBdWRpb091dHB1dExpc3RlbmVyKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0F0dGVtcHRpbmcgdG8gdXNlIEF1ZGlvT3V0cHV0TGlzdGVuZXIgd2l0aG91dCBzdXBwb3J0IGZvciAnICtcbiAgICAgICAgICAgICAgICAnb3V0cHV0IGF1ZGlvLiBJcyBidWlsZCBkZXAgXCI6Z2xfZ3JhcGhfcnVubmVyX2F1ZGlvX291dFwiIG1pc3Npbmc/Jyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yY2VzIGFsbCBxdWV1ZWQtdXAgcGFja2V0cyB0byBiZSBwdXNoZWQgdGhyb3VnaCB0aGUgTWVkaWFQaXBlIGdyYXBoIGFzXG4gICAgICogZmFyIGFzIHBvc3NpYmxlLCBwZXJmb3JtaW5nIGFsbCBwcm9jZXNzaW5nIHVudGlsIG5vIG1vcmUgcHJvY2Vzc2luZyBjYW4gYmVcbiAgICAgKiBkb25lLlxuICAgICAqL1xuICAgIGZpbmlzaFByb2Nlc3NpbmcoKSB7XG4gICAgICAgIHRoaXMud2FzbU1vZHVsZS5fd2FpdFVudGlsSWRsZSgpO1xuICAgIH1cbn1cbmV4cG9ydHMuV2FzbU1lZGlhUGlwZUxpYiA9IFdhc21NZWRpYVBpcGVMaWI7XG4vLyBRdWljayBwcml2YXRlIGhlbHBlciB0byBydW4gdGhlIGdpdmVuIHNjcmlwdCBzYWZlbHlcbmFzeW5jIGZ1bmN0aW9uIHJ1blNjcmlwdChzY3JpcHRVcmwpIHtcbiAgICBpZiAodHlwZW9mIGltcG9ydFNjcmlwdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaW1wb3J0U2NyaXB0cyhzY3JpcHRVcmwudG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBmZXRjaChzY3JpcHRVcmwpLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UudGV4dCgpKS50aGVuKHRleHQgPT4gRnVuY3Rpb24odGV4dCkpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLyoqXG4gKiBHbG9iYWwgZnVuY3Rpb24gdG8gaW5pdGlhbGl6ZSBXYXNtIGJsb2IgYW5kIGxvYWQgcnVudGltZSBhc3NldHMgZm9yIGFcbiAqICAgICBzcGVjaWFsaXplZCBNZWRpYVBpcGUgbGlicmFyeS4gVGhpcyBhbGxvd3MgdXMgdG8gY3JlYXRlIGEgcmVxdWVzdGVkXG4gKiAgICAgc3ViY2xhc3MgaW5oZXJpdGluZyBmcm9tIFdhc21NZWRpYVBpcGVMaWIuXG4gKiBAcGFyYW0gY29uc3RydWN0b3JGY24gVGhlIG5hbWUgb2YgdGhlIGNsYXNzIHRvIGluc3RhbnRpYXRlIHZpYSBcIm5ld1wiLlxuICogQHBhcmFtIHdhc21Mb2FkZXJTY3JpcHQgVXJsIGZvciB0aGUgd2FzbS1ydW5uZXIgc2NyaXB0OyBwcm9kdWNlZCBieSB0aGUgYnVpbGRcbiAqICAgICBwcm9jZXNzLlxuICogQHBhcmFtIGFzc2V0TG9hZGVyU2NyaXB0IFVybCBmb3IgdGhlIGFzc2V0LWxvYWRpbmcgc2NyaXB0OyBwcm9kdWNlZCBieSB0aGVcbiAqICAgICBidWlsZCBwcm9jZXNzLlxuICogQHBhcmFtIGZpbGVMb2NhdG9yIEEgZnVuY3Rpb24gdG8gb3ZlcnJpZGUgdGhlIGZpbGUgbG9jYXRpb25zIGZvciBhc3NldHNcbiAqICAgICBsb2FkZWQgYnkgdGhlIE1lZGlhUGlwZSBsaWJyYXJ5LlxuICogQHJldHVybiBwcm9taXNlIEEgcHJvbWlzZSB3aGljaCB3aWxsIHJlc29sdmUgd2hlbiBpbml0aWFsaXphdGlvbiBoYXNcbiAqICAgICBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LlxuICovXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVNZWRpYVBpcGVMaWIoY29uc3RydWN0b3JGY24sIHdhc21Mb2FkZXJTY3JpcHQsIGFzc2V0TG9hZGVyU2NyaXB0LCBnbENhbnZhcywgZmlsZUxvY2F0b3IpIHtcbiAgICBjb25zdCBzY3JpcHRzID0gW107XG4gICAgLy8gUnVuIHdhc20tbG9hZGVyIHNjcmlwdCBoZXJlXG4gICAgaWYgKHdhc21Mb2FkZXJTY3JpcHQpIHtcbiAgICAgICAgc2NyaXB0cy5wdXNoKHdhc21Mb2FkZXJTY3JpcHQpO1xuICAgIH1cbiAgICAvLyBSdW4gYXNzZXQtbG9hZGVyIHNjcmlwdCBoZXJlXG4gICAgaWYgKGFzc2V0TG9hZGVyU2NyaXB0KSB7XG4gICAgICAgIHNjcmlwdHMucHVzaChhc3NldExvYWRlclNjcmlwdCk7XG4gICAgfVxuICAgIC8vIExvYWQgc2NyaXB0cyBpbiBwYXJhbGxlbCwgYnJvd3NlciB3aWxsIGV4ZWN1dGUgdGhlbSBpbiBzZXF1ZW5jZS5cbiAgICBpZiAoc2NyaXB0cy5sZW5ndGgpIHtcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoc2NyaXB0cy5tYXAocnVuU2NyaXB0KSk7XG4gICAgfVxuICAgIGlmICghc2VsZi5Nb2R1bGVGYWN0b3J5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTW9kdWxlRmFjdG9yeSBub3Qgc2V0LicpO1xuICAgIH1cbiAgICAvLyBUT0RPOiBFbnN1cmUgdGhhdCBmaWxlTG9jYXRvciBpcyBwYXNzZWQgaW4gYnkgYWxsIHVzZXJzXG4gICAgLy8gYW5kIG1ha2UgaXQgcmVxdWlyZWRcbiAgICBjb25zdCBtb2R1bGUgPSBhd2FpdCBzZWxmLk1vZHVsZUZhY3RvcnkoZmlsZUxvY2F0b3IgfHwgc2VsZi5Nb2R1bGUpO1xuICAgIC8vIERvbid0IHJldXNlIGZhY3Rvcnkgb3IgbW9kdWxlIHNlZWRcbiAgICBzZWxmLk1vZHVsZUZhY3RvcnkgPSBzZWxmLk1vZHVsZSA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gbmV3IGNvbnN0cnVjdG9yRmNuKG1vZHVsZSwgZ2xDYW52YXMpO1xufVxuZXhwb3J0cy5jcmVhdGVNZWRpYVBpcGVMaWIgPSBjcmVhdGVNZWRpYVBpcGVMaWI7XG4vKipcbiAqIEdsb2JhbCBmdW5jdGlvbiB0byBpbml0aWFsaXplIFdhc20gYmxvYiBhbmQgbG9hZCBydW50aW1lIGFzc2V0cyBmb3IgYSBnZW5lcmljXG4gKiAgICAgTWVkaWFQaXBlIGxpYnJhcnkuXG4gKiBAcGFyYW0gd2FzbUxvYWRlclNjcmlwdCBVcmwgZm9yIHRoZSB3YXNtLXJ1bm5lciBzY3JpcHQ7IHByb2R1Y2VkIGJ5IHRoZSBidWlsZFxuICogICAgIHByb2Nlc3MuXG4gKiBAcGFyYW0gYXNzZXRMb2FkZXJTY3JpcHQgVXJsIGZvciB0aGUgYXNzZXQtbG9hZGluZyBzY3JpcHQ7IHByb2R1Y2VkIGJ5IHRoZVxuICogICAgIGJ1aWxkIHByb2Nlc3MuXG4gKiBAcGFyYW0gZmlsZUxvY2F0b3IgQSBmdW5jdGlvbiB0byBvdmVycmlkZSB0aGUgZmlsZSBsb2NhdGlvbnMgZm9yIGFzc2V0c1xuICogICAgIGxvYWRlZCBieSB0aGUgTWVkaWFQaXBlIGxpYnJhcnkuXG4gKiBAcmV0dXJuIHByb21pc2UgQSBwcm9taXNlIHdoaWNoIHdpbGwgcmVzb2x2ZSB3aGVuIGluaXRpYWxpemF0aW9uIGhhc1xuICogICAgIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVdhc21NZWRpYVBpcGVMaWIod2FzbUxvYWRlclNjcmlwdCwgYXNzZXRMb2FkZXJTY3JpcHQsIGdsQ2FudmFzLCBmaWxlTG9jYXRvcikge1xuICAgIHJldHVybiBjcmVhdGVNZWRpYVBpcGVMaWIoV2FzbU1lZGlhUGlwZUxpYiwgd2FzbUxvYWRlclNjcmlwdCwgYXNzZXRMb2FkZXJTY3JpcHQsIGdsQ2FudmFzLCBmaWxlTG9jYXRvcik7XG59XG5leHBvcnRzLmNyZWF0ZVdhc21NZWRpYVBpcGVMaWIgPSBjcmVhdGVXYXNtTWVkaWFQaXBlTGliO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZDJGemJWOXRaV1JwWVhCcGNHVmZiR2xpTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dkxpNHZMaTR2TGk0dkxpNHZiV1ZrYVdGd2FYQmxMM2RsWWk5bmNtRndhRjl5ZFc1dVpYSXZkMkZ6YlY5dFpXUnBZWEJwY0dWZmJHbGlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFTeHpSRUZCYzBRN1FVRkRkRVFzYTBSQlFXdEVPMEZCUTJ4RUxEaEVRVUU0UkRzN08wRkJhVW81UkRzN096czdSMEZMUnp0QlFVTklMRTFCUVdFc1owSkJRV2RDTzBsQlZUTkNPenM3T3pzN096czdUMEZUUnp0SlFVTklMRmxCUTBrc1RVRkJhMElzUlVGQlJTeFJRVUZwUkR0UlFXWjZSU3h4UWtGQlowSXNSMEZCV1N4SlFVRkpMRU5CUVVNN1VVRm5RaTlDTEVsQlFVa3NRMEZCUXl4VlFVRlZMRWRCUVVjc1RVRkJUU3hEUVVGRE8xRkJRM3BDTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRE8xRkJRM0pDTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRMjVDTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUk3V1VGRGRFSXNRMEZCUXl4UFFVRlBMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zYjBKQlFXOUNMRXRCUVVzc1ZVRkJWU3hEUVVGRExFTkJRVU03VVVGRmFrVXNTVUZCU1N4UlFVRlJMRXRCUVVzc1UwRkJVeXhGUVVGRk8xbEJRekZDTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1RVRkJUU3hIUVVGSExGRkJRVkVzUTBGQlF6dFRRVU51UXp0aFFVRk5PMWxCUTB3c2JVVkJRVzFGTzFsQlEyNUZMSE5EUVVGelF6dFpRVU4wUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFMUJRVTBzUjBGQlJ5eEpRVUZKTEdWQlFXVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VTBGRGNFUTdTVUZEU0N4RFFVRkRPMGxCUlVRN096czdUMEZKUnp0SlFVTklMRXRCUVVzc1EwRkJReXhsUVVGbExFTkJRVU1zVTBGQmFVSTdVVUZEY2tNc2MwSkJRWE5DTzFGQlEzUkNMRTFCUVUwc1VVRkJVU3hIUVVGSExFMUJRVTBzUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMUZCUTNoRExFMUJRVTBzVTBGQlV5eEhRVUZITEUxQlFVMHNVVUZCVVN4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRE8xRkJReTlETEUxQlFVMHNVVUZCVVN4SFFVTldMRU5CUVVNc1EwRkJReXhUUVVGVExFTkJRVU1zVVVGQlVTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRk5CUVZNc1EwRkJReXhSUVVGUkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTjRSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NWVUZCVlN4RFFVRkRMRk5CUVZNc1EwRkJReXhGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETzBsQlEzSkVMRU5CUVVNN1NVRkZSRHM3T3pzN1QwRkxSenRKUVVOSUxHdENRVUZyUWl4RFFVRkRMRmRCUVcxQ08xRkJRM0JETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhKUVVGSkxGZEJRVmNzUlVGQlJTeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJReXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzBsQlEyaEZMRU5CUVVNN1NVRkZSRHM3T3pzN096czdPMDlCVTBjN1NVRkRTQ3hSUVVGUkxFTkJRVU1zVTBGQmNVSXNSVUZCUlN4UlFVRnBRanRSUVVNdlF5eE5RVUZOTEVsQlFVa3NSMEZCUnl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRE8xRkJRemxDTEUxQlFVMHNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUXpsRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhUUVVGVExFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdVVUZETDBNc1NVRkJTU3hSUVVGUkxFVkJRVVU3V1VGRFdpeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMR3RDUVVGclFpeERRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRUUVVOdVJEdGhRVUZOTzFsQlEwd3NTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03VTBGRGFrUTdVVUZEUkN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0SlFVTnFReXhEUVVGRE8wbEJSVVE3T3pzN096czdPMDlCVVVjN1NVRkRTQ3hqUVVGakxFTkJRVU1zVjBGQmJVSXNSVUZCUlN4VlFVRnJRaXhGUVVGRkxGVkJRV3RDTzFGQlEzaEZMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zWlVGQlpTeERRVUZETEZkQlFWY3NSVUZCUlN4VlFVRlZMRVZCUVVVc1ZVRkJWU3hEUVVGRExFTkJRVU03VVVGRGNrVXNTVUZCU1N4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExEQkNRVUV3UWl4RlFVRkZPMWxCUXpsRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNNRUpCUVRCQ0xFVkJRVVVzUTBGQlF6dFRRVU01UXp0SlFVTklMRU5CUVVNN1NVRkZSRHM3T3pzN1QwRkxSenRKUVVOSUxHMUNRVUZ0UWl4RFFVRkRMRTFCUVdVN1VVRkRha01zU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhIUVVGSExFMUJRVTBzUTBGQlF6dEpRVU5xUXl4RFFVRkRPMGxCUlVRN096czdPenM3T3pzN096czdUMEZoUnp0SlFVTklMSEZDUVVGeFFpeERRVUZETEU5QlFXZENPMUZCUTNCRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdTVUZEYkVRc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMRzFDUVVGdFFpeERRVUZETEZkQlFYZENMRVZCUVVVc1lVRkJjMEk3VVVGRmJFVXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVFVGQlRTeEZRVUZGTzFsQlF6TkNMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zT0VKQlFUaENMRU5CUVVNc1EwRkJRenRUUVVOcVJEdFJRVVZFTEVsQlFVa3NRMEZCUXl4aFFVRmhMRVZCUVVVN1dVRkRiRUlzTUVSQlFUQkVPMWxCUXpGRUxFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXh2UWtGQmIwSXNSVUZCUlN4RFFVRkRMRU5CUVVNN1UwRkRlRVE3WVVGQlRUdFpRVU5NTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNN1UwRkRja1E3VVVGRFJDeE5RVUZOTEVWQlFVVXNSMEZEU2l4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVTXNVVUZCVVN4RFFVRkRPMWxCUXpORExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dFJRVU12UXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzFGQlEyNUNMRVZCUVVVc1EwRkJReXhWUVVGVkxFTkJRMVFzUlVGQlJTeERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFbEJRVWtzUlVGQlJTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhoUVVGaExFVkJRVVVzVjBGQlZ5eERRVUZETEVOQlFVTTdVVUZGZGtVc1NVRkJTU3hMUVVGTExFVkJRVVVzVFVGQlRTeERRVUZETzFGQlEyeENMRWxCUVVzc1YwRkJaME1zUTBGQlF5eFZRVUZWTEVWQlFVVTdXVUZEYUVRc1MwRkJTeXhIUVVGSkxGZEJRV2RETEVOQlFVTXNWVUZCVlN4RFFVRkRPMWxCUTNKRUxFMUJRVTBzUjBGQlNTeFhRVUZuUXl4RFFVRkRMRmRCUVZjc1EwRkJRenRUUVVONFJEdGhRVUZOTzFsQlEwd3NTMEZCU3l4SFFVRkhMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU03V1VGRE1VSXNUVUZCVFN4SFFVRkhMRmRCUVZjc1EwRkJReXhOUVVGTkxFTkJRVU03VTBGRE4wSTdVVUZGUkN4SlFVRkpMRWxCUVVrc1EwRkJReXhuUWtGQlowSTdXVUZEY2tJc1EwRkJReXhMUVVGTExFdEJRVXNzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTenRuUWtGRGRFTXNUVUZCVFN4TFFVRkxMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZPMWxCUXpsRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU03V1VGRGNrTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXp0VFFVTjRRenRSUVVWRUxFOUJRVThzUTBGQlF5eExRVUZMTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1NVRkRla0lzUTBGQlF6dEpRVVZFT3pzN096czdPenRQUVZGSE8wbEJRMGdzVTBGQlV5eERRVUZETEZkQlFYZENMRVZCUVVVc1UwRkJhVUk3VVVGRmJrUXNLMEpCUVN0Q08xRkJReTlDTEUxQlFVMHNRMEZCUXl4TFFVRkxMRVZCUVVVc1RVRkJUU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzFGQlJUbEVMRGhDUVVFNFFqdFJRVU01UWl4TlFVRk5MRmxCUVZrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOcVJDeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhaUVVGWkxFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUTJ4RUxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1dVRkJXU3hIUVVGSExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SFFVRkhMRTFCUVUwc1EwRkJRenRSUVVONlJDeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExGbEJRVmtzUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhUUVVGVExFTkJRVU03VVVGRE5VUXNNa1ZCUVRKRk8xRkJRek5GTERKQ1FVRXlRanRSUVVNelFpdzRRMEZCT0VNN1VVRkRPVU1zVFVGQlRTeFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhWUVVGVkxFTkJRVU1zV1VGQldTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUXk5RUxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8xRkJSWEJETEdsRVFVRnBSRHRSUVVOcVJDd3dSVUZCTUVVN1VVRkRNVVVzVDBGQlR5eFRRVUZUTEVOQlFVTTdTVUZEYmtJc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMR0ZCUVdFc1EwRkJReXhWUVVGclFpeEZRVUZGTEdGQlFXOURPMUZCUlhCRkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFVkJRVVU3V1VGREwwSXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkRWQ3d3UkVGQk1FUTdaMEpCUXpGRUxESkVRVUV5UkN4RFFVRkRMRU5CUVVNN1UwRkRiRVU3VVVGRFJDeE5RVUZOTEdGQlFXRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExHVkJRV1VzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0UlFVTnNSU3hoUVVGaExFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTTdVVUZETjBJc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNN1NVRkRka01zUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxHZENRVUZuUWl4RFFVRkRMRlZCUVc5Q0xFVkJRVVVzVDBGQk9FSTdVVUZEYmtVc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1JVRkJSVHRaUVVNdlFpeFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVTlVMREJFUVVFd1JEdG5Ra0ZETVVRc01rUkJRVEpFTEVOQlFVTXNRMEZCUXp0VFFVTnNSVHRSUVVORUxFMUJRVTBzVjBGQlZ5eEhRVUZITEVsQlFVa3NWMEZCVnl4RFFVRkRMRlZCUVZVc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dFJRVU4yUkN4TFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NWVUZCVlN4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdFpRVU14UXl4WFFVRlhMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4bFFVRmxMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVMEZEYWtVN1VVRkRSQ3hOUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhYUVVGWExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTJ4RkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhYUVVGWExFVkJRVVVzVTBGQlV5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUlhwRUxFOUJRVThzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0UlFVTnVRaXhMUVVGTExFMUJRVTBzVTBGQlV5eEpRVUZKTEZkQlFWY3NSVUZCUlR0WlFVTnVReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRUUVVOc1F6dFJRVU5FTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzBsQlEyNURMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4WFFVRlhMRU5CUVVrc1owSkJRWGRDTEVWQlFVVXNWMEZCT0VJN1VVRkRja1VzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4bFFVRmxMRWRCUVVjc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eGxRVUZsTEVsQlFVa3NSVUZCUlN4RFFVRkRPMUZCUTNoRkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNaVUZCWlN4RFFVRkRMR2RDUVVGblFpeERRVUZETzFsQlF6ZERMRmRCUVhORExFTkJRVU03U1VGRE4wTXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEdsQ1FVRnBRaXhEUVVOaUxHZENRVUYzUWl4RlFVRkZMRmRCUVdkRE8xRkJRelZFTEUxQlFVMHNUVUZCVFN4SFFVRlJMRVZCUVVVc1EwRkJRenRSUVVOMlFpeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMR1ZCUVdVc1IwRkJSeXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEdWQlFXVXNTVUZCU1N4RlFVRkZMRU5CUVVNN1VVRkRlRVVzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4bFFVRmxMRU5CUVVNc1owSkJRV2RDTEVOQlFVTTdXVUZETjBNc1EwRkJReXhKUVVGaExFVkJRVVVzUzBGQllTeEZRVUZGTEUxQlFXTXNSVUZCUlN4RlFVRkZPMmRDUVVNdlF5eG5SVUZCWjBVN1owSkJRMmhGTEcxRlFVRnRSVHRuUWtGRGJrVXNZMEZCWXp0blFrRkRaQ3hOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NTVUZCVXl4RFFVRkRPMmRDUVVNeFFpeEpRVUZKTEV0QlFVc3NTMEZCU3l4TlFVRk5MRWRCUVVjc1EwRkJReXhGUVVGRk8yOUNRVU40UWl4dlJVRkJiMFU3YjBKQlEzQkZMRGhFUVVFNFJEdHZRa0ZET1VRc1dVRkJXVHR2UWtGRFdpeFhRVUZYTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN2FVSkJRM0pDTzFsQlEwZ3NRMEZCUXl4RFFVRkRPMGxCUTFJc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMRzFDUVVGdFFpeERRVUZETEZkQlFXOUVPMUZCUTNSRkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNZVUZCWVN4SFFVRkhMRmRCUVZjc1EwRkJRenRKUVVNNVF5eERRVUZETzBsQlJVUTdPenM3T3p0UFFVMUhPMGxCUTBnc1owSkJRV2RDTEVOQlFVTXNVMEZCZFVJc1JVRkJSU3hUUVVGcFFqdFJRVU42UkN4MVFrRkJkVUk3VVVGRGRrSXNUVUZCVFN4SlFVRkpMRWRCUVVjc1UwRkJVeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEYkVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zVTBGQlV5eExRVUZMTEVsQlFVa3NSVUZCUlR0WlFVTXpRaXhKUVVGSkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVTdaMEpCUTJwQ0xFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dGhRVU4wUXp0WlFVTkVMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03V1VGRE9VTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU03VTBGRGRrSTdVVUZEUkN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNVMEZCVXl4RlFVRkZMRWxCUVVrc1EwRkJReXhSUVVGVExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZETTBRc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eGhRVUZoTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZNc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF6dEpRVU16UkN4RFFVRkRPMGxCUlVRN096czdPenM3T3pzN096dFBRVmxITzBsQlEwZ3NiMEpCUVc5Q0xFTkJRMmhDTEZkQlFYZENMRVZCUVVVc1ZVRkJhMElzUlVGQlJTeFRRVUZwUWp0UlFVTnFSU3hKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkRMR0ZCUVhGQ0xFVkJRVVVzUlVGQlJUdFpRVU4yUkN4TlFVRk5MRU5CUVVNc1MwRkJTeXhGUVVGRkxFMUJRVTBzUTBGQlF5eEhRVU5xUWl4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNWMEZCVnl4RlFVRkZMR0ZCUVdFc1EwRkJReXhEUVVGRE8xbEJRM3BFTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc2QwSkJRWGRDTEVOQlEzQkRMR0ZCUVdFc1JVRkJSU3hMUVVGTExFVkJRVVVzVFVGQlRTeEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVRkRPMUZCUXk5RExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEwd3NRMEZCUXp0SlFVVkVPenM3T3p0UFFVdEhPMGxCUTBnc1pVRkJaU3hEUVVGRExFbEJRV0VzUlVGQlJTeFZRVUZyUWl4RlFVRkZMRk5CUVdsQ08xRkJRMnhGTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU1zWVVGQmNVSXNSVUZCUlN4RlFVRkZPMWxCUTNaRUxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEdGQlFXRXNSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJRenRSUVVONFJTeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTk1MRU5CUVVNN1NVRkZSRHM3T3pzN1QwRkxSenRKUVVOSUxHbENRVUZwUWl4RFFVRkRMRWxCUVZrc1JVRkJSU3hWUVVGclFpeEZRVUZGTEZOQlFXbENPMUZCUTI1RkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNWVUZCVlN4RlFVRkZMRU5CUVVNc1lVRkJjVUlzUlVGQlJTeEZRVUZGTzFsQlEzWkVMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc1NVRkJTU3hGUVVGRkxHRkJRV0VzUlVGQlJTeFRRVUZUTEVOQlFVTXNRMEZCUXp0UlFVTXhSU3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5NTEVOQlFVTTdTVUZGUkRzN096czdUMEZMUnp0SlFVTklMR2RDUVVGblFpeERRVUZETEVsQlFWa3NSVUZCUlN4VlFVRnJRaXhGUVVGRkxGTkJRV2xDTzFGQlEyeEZMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTXNZVUZCY1VJc1JVRkJSU3hGUVVGRk8xbEJRM1pFTEd0RlFVRnJSVHRaUVVOc1JTd3dSVUZCTUVVN1dVRkRNVVVzVlVGQlZUdFpRVU5XTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNTVUZCU1N4RlFVRkZMR0ZCUVdFc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF6dFJRVU42UlN4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOTUxFTkJRVU03U1VGRlJEczdPenM3VDBGTFJ6dEpRVU5JTEdOQlFXTXNRMEZCUXl4SlFVRlpMRVZCUVVVc1ZVRkJhMElzUlVGQlJTeFRRVUZwUWp0UlFVTm9SU3hKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkRMR0ZCUVhGQ0xFVkJRVVVzUlVGQlJUdFpRVU4yUkN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRWxCUVVrc1JVRkJSU3hoUVVGaExFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVTTdVVUZEZGtVc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRFRDeERRVUZETzBsQlJVUTdPenM3TzA5QlMwYzdTVUZEU0N4cFFrRkJhVUlzUTBGQlF5eEpRVUZaTEVWQlFVVXNWVUZCYTBJc1JVRkJSU3hUUVVGcFFqdFJRVU51UlN4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExGVkJRVlVzUlVGQlJTeERRVUZETEdGQlFYRkNMRVZCUVVVc1JVRkJSVHRaUVVOMlJDeEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFOUJRV1VzUlVGQlJTeEZRVUZGTzJkQ1FVTXpReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEhWQ1FVRjFRaXhEUVVOdVF5eFBRVUZQTEVWQlFVVXNZVUZCWVN4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVGRE8xbEJRM3BETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTB3c1EwRkJReXhEUVVGRExFTkJRVU03U1VGRFRDeERRVUZETzBsQlJVUTdPenM3T3pzN1QwRlBSenRKUVVOSUxIVkNRVUYxUWl4RFFVTnVRaXhKUVVFMFFpeEZRVUZGTEZWQlFXdENMRVZCUTJoRUxGTkJRV2xDTzFGQlEyNUNMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTXNZVUZCY1VJc1JVRkJSU3hGUVVGRk8xbEJRM1pFTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zVDBGQlpTeEZRVUZGTEVWQlFVVTdaMEpCUXpORUxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1UwRkJhVUlzUlVGQlJTeEZRVUZGTzI5Q1FVTXZSQ3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETERSQ1FVRTBRaXhEUVVONFF5eFBRVUZQTEVWQlFVVXNVMEZCVXl4RlFVRkZMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNUVUZCVFN4RlFVRkZMR0ZCUVdFc1JVRkRNMFFzVTBGQlV5eERRVUZETEVOQlFVTTdaMEpCUTJwQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEwd3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRUQ3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5NTEVOQlFVTTdTVUZGUkRzN096czdPenM3TzA5QlUwYzdTVUZEU0N4blFrRkJaMElzUTBGRFdpeEpRVUZuUWl4RlFVRkZMRk5CUVdsQ0xFVkJRVVVzVlVGQmEwSXNSVUZEZGtRc1UwRkJhVUk3VVVGRGJrSXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF5eGhRVUZ4UWl4RlFVRkZMRVZCUVVVN1dVRkRka1FzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJReXhaUVVGdlFpeEZRVUZGTEVWQlFVVTdaMEpCUTNKRUxITkRRVUZ6UXp0blFrRkRkRU1zVFVGQlRTeFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMmRDUVVOeVJDd3dSRUZCTUVRN1owSkJRekZFTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1owSkJRekZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc2MwSkJRWE5DTEVOQlEyeERMRTlCUVU4c1JVRkJSU3hKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEZsQlFWa3NSVUZCUlN4aFFVRmhMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVU03WjBKQlEyeEZMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMWxCUTJwRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEwd3NRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3pzN08wOUJTMGM3U1VGRFNDeDNRa0ZCZDBJc1EwRkJReXhKUVVGaExFVkJRVVVzWTBGQmMwSTdVVUZETlVRc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUXl4cFFrRkJlVUlzUlVGQlJTeEZRVUZGTzFsQlF5OUVMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zZVVKQlFYbENMRU5CUVVNc1NVRkJTU3hGUVVGRkxHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1VVRkRja1VzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEVEN4RFFVRkRPMGxCUlVRN096czdPMDlCUzBjN1NVRkRTQ3d3UWtGQk1FSXNRMEZCUXl4SlFVRlpMRVZCUVVVc1kwRkJjMEk3VVVGRE4wUXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlF5eHBRa0ZCZVVJc1JVRkJSU3hGUVVGRk8xbEJReTlFTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc01rSkJRVEpDTEVOQlFVTXNTVUZCU1N4RlFVRkZMR2xDUVVGcFFpeERRVUZETEVOQlFVTTdVVUZEZGtVc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRFRDeERRVUZETzBsQlJVUTdPenM3TzA5QlMwYzdTVUZEU0N4NVFrRkJlVUlzUTBGQlF5eEpRVUZaTEVWQlFVVXNZMEZCYzBJN1VVRkROVVFzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4alFVRmpMRVZCUVVVc1EwRkJReXhwUWtGQmVVSXNSVUZCUlN4RlFVRkZPMWxCUXk5RUxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNNRUpCUVRCQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEdsQ1FVRnBRaXhEUVVGRExFTkJRVU03VVVGRGRFVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3pzN08wOUJTMGM3U1VGRFNDeDFRa0ZCZFVJc1EwRkJReXhKUVVGWkxFVkJRVVVzWTBGQmMwSTdVVUZETVVRc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUXl4cFFrRkJlVUlzUlVGQlJTeEZRVUZGTzFsQlF5OUVMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1NVRkJTU3hGUVVGRkxHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1VVRkRjRVVzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEVEN4RFFVRkRPMGxCUlVRN096czdPMDlCUzBjN1NVRkRTQ3d3UWtGQk1FSXNRMEZCUXl4SlFVRlpMRVZCUVVVc1kwRkJjMEk3VVVGRE4wUXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlF5eHBRa0ZCZVVJc1JVRkJSU3hGUVVGRk8xbEJReTlFTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU1zVDBGQlpTeEZRVUZGTEVWQlFVVTdaMEpCUXpORExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNNa0pCUVRKQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEdsQ1FVRnBRaXhEUVVGRExFTkJRVU03V1VGRE1VVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRUQ3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5NTEVOQlFVTTdTVUZGUkRzN096czdPenRQUVU5SE8wbEJRMGdzZVVKQlFYbENMRU5CUTNKQ0xFbEJRV2RDTEVWQlFVVXNVMEZCYVVJc1JVRkJSU3hqUVVGelFqdFJRVU0zUkN4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExHTkJRV01zUlVGQlJTeERRVUZETEdsQ1FVRjVRaXhGUVVGRkxFVkJRVVU3V1VGREwwUXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhUUVVGVExFVkJRVVVzUTBGQlF5eFpRVUZ2UWl4RlFVRkZMRVZCUVVVN1owSkJRM0pFTEhORFFVRnpRenRuUWtGRGRFTXNUVUZCVFN4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8yZENRVU55UkN3d1JFRkJNRVE3WjBKQlF6RkVMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03WjBKQlF6RkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zTUVKQlFUQkNMRU5CUTNSRExFOUJRVThzUlVGQlJTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRmxCUVZrc1JVRkJSU3hwUWtGQmFVSXNRMEZCUXl4RFFVRkRPMmRDUVVNelJDeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dFpRVU5xUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOTUxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEwd3NRMEZCUXp0SlFVVkVPenM3T3pzN096dFBRVkZITzBsQlEwZ3NhMEpCUVd0Q0xFTkJRMlFzWjBKQlFYZENMRVZCUVVVc1YwRkJiME03VVVGRGFFVXNhVVZCUVdsRk8xRkJRMnBGTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1owSkJRV2RDTEVWQlFVVXNWMEZCVnl4RFFVRkRMRU5CUVVNN1VVRkZhRVFzTkVSQlFUUkVPMUZCUXpWRUxFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVVzUTBGQlF5eHRRa0ZCTWtJc1JVRkJSU3hGUVVGRk8xbEJRMjVGTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF6dFJRVU16UkN4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOTUxFTkJRVU03U1VGRlJEczdPenM3T3pzN1QwRlJSenRKUVVOSUxIZENRVUYzUWl4RFFVTndRaXhuUWtGQmQwSXNSVUZCUlN4WFFVRnpRenRSUVVOc1JTeHBSVUZCYVVVN1VVRkRha1VzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExHZENRVUZuUWl4RlFVRkZMRmRCUVZjc1EwRkJReXhEUVVGRE8xRkJSWFJFTEhsRlFVRjVSVHRSUVVONlJTeEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMR2RDUVVGblFpeEZRVUZGTEVOQlFVTXNiVUpCUVRKQ0xFVkJRVVVzUlVGQlJUdFpRVU51UlN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExIbENRVUY1UWl4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVOQlFVTTdVVUZEYWtVc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRFRDeERRVUZETzBsQlJVUTdPenM3T3pzN08wOUJVVWM3U1VGRFNDeHBRa0ZCYVVJc1EwRkRZaXhuUWtGQmQwSXNSVUZCUlN4WFFVRnRRenRSUVVNdlJDeHBSVUZCYVVVN1VVRkRha1VzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4blFrRkJaMElzUlVGQlJTeFhRVUZYTEVOQlFVTXNRMEZCUXp0UlFVVm9SQ3d5UkVGQk1rUTdVVUZETTBRc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hEUVVGRExHMUNRVUV5UWl4RlFVRkZMRVZCUVVVN1dVRkRia1VzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhEUVVGRE8xRkJRekZFTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTB3c1EwRkJRenRKUVVWRU96czdPenM3T3p0UFFWRkhPMGxCUTBnc2RVSkJRWFZDTEVOQlEyNUNMR2RDUVVGM1FpeEZRVUZGTEZkQlFYRkRPMUZCUTJwRkxHbEZRVUZwUlR0UlFVTnFSU3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1owSkJRV2RDTEVWQlFVVXNWMEZCVnl4RFFVRkRMRU5CUVVNN1VVRkZkRVFzZDBWQlFYZEZPMUZCUTNoRkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVVzUTBGQlF5eHRRa0ZCTWtJc1JVRkJSU3hGUVVGRk8xbEJRMjVGTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF6dFJRVU5vUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOTUxFTkJRVU03U1VGRlJEczdPenM3T3pzN1QwRlJSenRKUVVOSUxHOUNRVUZ2UWl4RFFVTm9RaXhuUWtGQmQwSXNSVUZCUlN4WFFVRnRRenRSUVVNdlJDeHBSVUZCYVVVN1VVRkRha1VzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4blFrRkJaMElzUlVGQlJTeFhRVUZYTEVOQlFVTXNRMEZCUXp0UlFVVm9SQ3c0UkVGQk9FUTdVVUZET1VRc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hEUVVGRExHMUNRVUV5UWl4RlFVRkZMRVZCUVVVN1dVRkRia1VzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhEUVVGRE8xRkJRemRFTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTB3c1EwRkJRenRKUVVWRU96czdPenM3T3p0UFFWRkhPMGxCUTBnc01FSkJRVEJDTEVOQlEzUkNMR2RDUVVGM1FpeEZRVUZGTEZkQlFYRkRPMUZCUTJwRkxHbEZRVUZwUlR0UlFVTnFSU3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1owSkJRV2RDTEVWQlFVVXNWMEZCVnl4RFFVRkRMRU5CUVVNN1VVRkZkRVFzTWtWQlFUSkZPMUZCUXpORkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVVzUTBGQlF5eHRRa0ZCTWtJc1JVRkJSU3hGUVVGRk8xbEJRMjVGTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc01rSkJRVEpDTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF6dFJRVU51UlN4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOTUxFTkJRVU03U1VGRlJEczdPenM3T3pzN1QwRlJSenRKUVVOSUxHMUNRVUZ0UWl4RFFVTm1MR2RDUVVGM1FpeEZRVUZGTEZkQlFXMURPMUZCUXk5RUxHbEZRVUZwUlR0UlFVTnFSU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEdkQ1FVRm5RaXhGUVVGRkxGZEJRVmNzUTBGQlF5eERRVUZETzFGQlJXaEVMRFpFUVVFMlJEdFJRVU0zUkN4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExHZENRVUZuUWl4RlFVRkZMRU5CUVVNc2JVSkJRVEpDTEVWQlFVVXNSVUZCUlR0WlFVTnVSU3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRU5CUVVNN1VVRkROVVFzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEVEN4RFFVRkRPMGxCUlVRN096czdPenM3TzA5QlVVYzdTVUZEU0N4NVFrRkJlVUlzUTBGRGNrSXNaMEpCUVhkQ0xFVkJRVVVzVjBGQmNVTTdVVUZEYWtVc2FVVkJRV2xGTzFGQlEycEZMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4blFrRkJaMElzUlVGQlJTeFhRVUZYTEVOQlFVTXNRMEZCUXp0UlFVVjBSQ3d3UlVGQk1FVTdVVUZETVVVc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hEUVVGRExHMUNRVUV5UWl4RlFVRkZMRVZCUVVVN1dVRkRia1VzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl3d1FrRkJNRUlzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhEUVVGRE8xRkJRMnhGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTB3c1EwRkJRenRKUVVWRU96czdPenM3T3p0UFFWRkhPMGxCUTBnc2IwSkJRVzlDTEVOQlEyaENMR2RDUVVGM1FpeEZRVUZGTEZkQlFXMURPMUZCUXk5RUxHbEZRVUZwUlR0UlFVTnFSU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEdkQ1FVRm5RaXhGUVVGRkxGZEJRVmNzUTBGQlF5eERRVUZETzFGQlJXaEVMRGhFUVVFNFJEdFJRVU01UkN4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExHZENRVUZuUWl4RlFVRkZMRU5CUVVNc2JVSkJRVEpDTEVWQlFVVXNSVUZCUlR0WlFVTnVSU3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRU5CUVVNN1VVRkROMFFzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEVEN4RFFVRkRPMGxCUlVRN096czdPenM3TzA5QlVVYzdTVUZEU0N3d1FrRkJNRUlzUTBGRGRFSXNaMEpCUVhkQ0xFVkJRVVVzVjBGQmNVTTdVVUZEYWtVc2FVVkJRV2xGTzFGQlEycEZMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4blFrRkJaMElzUlVGQlJTeFhRVUZYTEVOQlFVTXNRMEZCUXp0UlFVVjBSQ3d5UlVGQk1rVTdVVUZETTBVc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hEUVVGRExHMUNRVUV5UWl4RlFVRkZMRVZCUVVVN1dVRkRia1VzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl3eVFrRkJNa0lzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhEUVVGRE8xRkJRMjVGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTB3c1EwRkJRenRKUVVWRU96czdPenM3T3pzN096czdPenM3T3pzN1QwRnJRa2M3U1VGRFNDeHRRa0ZCYlVJc1EwRkRaaXhuUWtGQmQwSXNSVUZCUlN4WFFVRjFReXhGUVVOcVJTeFpRVUZ6UWp0UlFVTjRRaXhwUlVGQmFVVTdVVUZEYWtVc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hYUVVGWExFTkJRVU1zUTBGQlF6dFJRVVZvUkN3MFJVRkJORVU3VVVGRE5VVXNWVUZCVlR0UlFVTldMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zWjBKQlFXZENMRVZCUVVVc1EwRkJReXh0UWtGQk1rSXNSVUZCUlN4RlFVRkZPMWxCUTI1RkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNiMEpCUVc5Q0xFTkJRMmhETEcxQ1FVRnRRaXhGUVVGRkxGbEJRVmtzU1VGQlNTeExRVUZMTEVOQlFVTXNRMEZCUXp0UlFVTnNSQ3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5NTEVOQlFVTTdTVUZGUkRzN096czdPenM3T3pzN096czdPenM3T3p0UFFXMUNSenRKUVVOSUxIbENRVUY1UWl4RFFVTnlRaXhuUWtGQmQwSXNSVUZCUlN4WFFVRjVReXhGUVVOdVJTeFpRVUZ6UWp0UlFVTjRRaXhwUlVGQmFVVTdVVUZEYWtVc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMR2RDUVVGblFpeEZRVUZGTEZkQlFWY3NRMEZCUXl4RFFVRkRPMUZCUlhSRUxESkZRVUV5UlR0UlFVTXpSU3hyUWtGQmEwSTdVVUZEYkVJc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hEUVVGRExHMUNRVUV5UWl4RlFVRkZMRVZCUVVVN1dVRkRia1VzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl3d1FrRkJNRUlzUTBGRGRFTXNiVUpCUVcxQ0xFVkJRVVVzV1VGQldTeEpRVUZKTEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCUTJ4RUxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEwd3NRMEZCUXp0SlFVVkVPenM3TzA5QlNVYzdTVUZEU0N4blFrRkJaMElzUTBGQlF5eHRRa0ZCZDBNN1VVRkRka1FzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4aFFVRmhMRWRCUVVjc2JVSkJRVzFDTEVOQlFVTTdVVUZEY0VRc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNNRUpCUVRCQ0xFVkJRVVU3V1VGREwwTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkRVaXcwUkVGQk5FUTdaMEpCUXpWRUxHdEZRVUZyUlN4RFFVRkRMRU5CUVVNN1UwRkRla1U3U1VGRFNDeERRVUZETzBsQlJVUTdPenM3VDBGSlJ6dEpRVU5JTEdkQ1FVRm5RanRSUVVOa0xFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVNN1NVRkRia01zUTBGQlF6dERRVU5HTzBGQk5YbENSQ3cwUTBFMGVVSkRPMEZCUlVRc2MwUkJRWE5FTzBGQlEzUkVMRXRCUVVzc1ZVRkJWU3hUUVVGVExFTkJRVU1zVTBGQmFVSTdTVUZEZUVNc1NVRkJTU3hQUVVGUExHRkJRV0VzUzBGQlN5eFZRVUZWTEVWQlFVVTdVVUZEZGtNc1lVRkJZU3hEUVVGRExGTkJRVk1zUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXl4RFFVRkRPMHRCUTNKRE8xTkJRVTA3VVVGRFRDeE5RVUZOTEVsQlFVa3NUMEZCVHl4RFFVRkRMRU5CUVVNc1QwRkJUeXhGUVVGRkxFMUJRVTBzUlVGQlJTeEZRVUZGTzFsQlEzQkRMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRVZCUVVVc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUTNoSExFTkJRVU1zUTBGQlF5eERRVUZETzB0QlEwbzdRVUZEU0N4RFFVRkRPMEZCUlVRN096czdPenM3T3pzN096czdSMEZoUnp0QlFVTkpMRXRCUVVzc1ZVRkJWU3hyUWtGQmEwSXNRMEZEY0VNc1kwRkJhVVFzUlVGRGFrUXNaMEpCUVhsQ0xFVkJRM3BDTEdsQ1FVRXdRaXhGUVVNeFFpeFJRVUZwUkN4RlFVTnFSQ3hYUVVGNVFqdEpRVU16UWl4TlFVRk5MRTlCUVU4c1IwRkJSeXhGUVVGRkxFTkJRVU03U1VGRGJrSXNPRUpCUVRoQ08wbEJRemxDTEVsQlFVa3NaMEpCUVdkQ0xFVkJRVVU3VVVGRGNFSXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4RFFVRkRPMHRCUTJoRE8wbEJRMFFzSzBKQlFTdENPMGxCUXk5Q0xFbEJRVWtzYVVKQlFXbENMRVZCUVVVN1VVRkRja0lzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZETzB0QlEycERPMGxCUTBRc2JVVkJRVzFGTzBsQlEyNUZMRWxCUVVrc1QwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlJUdFJRVU5zUWl4TlFVRk5MRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRE8wdEJRek5ETzBsQlEwUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhoUVVGaExFVkJRVVU3VVVGRGRrSXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4RFFVRkRPMHRCUXpORE8wbEJRMFFzTUVSQlFUQkVPMGxCUXpGRUxIVkNRVUYxUWp0SlFVTjJRaXhOUVVGTkxFMUJRVTBzUjBGRFVpeE5RVUZOTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1YwRkJWeXhKUVVGSkxFbEJRVWtzUTBGQlF5eE5RVUZ4UWl4RFFVRkRMRU5CUVVNN1NVRkRlRVVzY1VOQlFYRkRPMGxCUTNKRExFbEJRVWtzUTBGQlF5eGhRVUZoTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhUUVVGVExFTkJRVU03U1VGRE4wTXNUMEZCVHl4SlFVRkpMR05CUVdNc1EwRkJReXhOUVVGTkxFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdRVUZET1VNc1EwRkJRenRCUVRkQ1JDeG5SRUUyUWtNN1FVRkZSRHM3T3pzN096czdPenM3UjBGWFJ6dEJRVU5KTEV0QlFVc3NWVUZCVlN4elFrRkJjMElzUTBGRGVFTXNaMEpCUVhsQ0xFVkJRM3BDTEdsQ1FVRXdRaXhGUVVNeFFpeFJRVUZwUkN4RlFVTnFSQ3hYUVVGNVFqdEpRVU16UWl4UFFVRlBMR3RDUVVGclFpeERRVU55UWl4blFrRkJaMElzUlVGQlJTeG5Ra0ZCWjBJc1JVRkJSU3hwUWtGQmFVSXNSVUZCUlN4UlFVRlJMRVZCUXk5RUxGZEJRVmNzUTBGQlF5eERRVUZETzBGQlEyNUNMRU5CUVVNN1FVRlNSQ3gzUkVGUlF5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaTh2SUZCc1lXTmxhRzlzWkdWeUlHWnZjaUJwYm5SbGNtNWhiQ0JrWlhCbGJtUmxibU41SUc5dUlHRnpjMlZ5ZEZSeWRYUm9lVnh1THk4Z1VHeGhZMlZvYjJ4a1pYSWdabTl5SUdsdWRHVnlibUZzSUdSbGNHVnVaR1Z1WTNrZ2IyNGdhbk5zYjJGa1pYSmNiaTh2SUZCc1lXTmxhRzlzWkdWeUlHWnZjaUJwYm5SbGNtNWhiQ0JrWlhCbGJtUmxibU41SUc5dUlIUnlkWE4wWldRZ2NtVnpiM1Z5WTJVZ2RYSnNYRzVjYmk4dklGUm9hWE1nWm1sc1pTQmpZVzRnYzJWeWRtVWdZWE1nWVNCamIyMXRiMjRnYVc1MFpYSm1ZV05sSUdadmNpQnRiM04wSUhOcGJYQnNaU0JVZVhCbFUyTnlhWEIwWEc0dkx5QnNhV0p5WVhKcFpYTXRMU0JoWkdScGRHbHZibUZzYkhrc0lHbDBJR05oYmlCb2IyOXJJR0YxZEc5dFlYUnBZMkZzYkhrZ2FXNTBieUIzWVhOdFgyMWxaR2xoY0dsd1pWOWtaVzF2WEc0dkx5QjBieUJoZFhSdloyVnVaWEpoZEdVZ2MybHRjR3hsSUZSVElFRlFTWE1nWm5KdmJTQmtaVzF2Y3lCbWIzSWdhVzV6ZEdGdWRHRnVaVzkxY3lBeFVDQnBiblJsWjNKaGRHbHZibk11WEc1Y2JpOHFLbHh1SUNvZ1UybHRjR3hsSUdsdWRHVnlabUZqWlNCbWIzSWdZV3hzYjNkcGJtY2dkWE5sY25NZ2RHOGdjMlYwSUhSb1pTQmthWEpsWTNSdmNua2dkMmhsY21VZ2FXNTBaWEp1WVd4Y2JpQXFJSGRoYzIwdGJHOWhaR2x1WnlCaGJtUWdZWE56WlhRdGJHOWhaR2x1WnlCamIyUmxJR3h2YjJ0eklDaGxMbWN1SUdadmNpQXVkMkZ6YlNCaGJtUWdMbVJoZEdFZ1ptbHNaVnh1SUNvZ2JHOWpZWFJwYjI1ektTNWNiaUFxTDF4dVpYaHdiM0owSUdSbFkyeGhjbVVnYVc1MFpYSm1ZV05sSUVacGJHVk1iMk5oZEc5eUlIdGNiaUFnYkc5allYUmxSbWxzWlRvZ0tHWnBiR1Z1WVcxbE9pQnpkSEpwYm1jcElEMCtJSE4wY21sdVp6dGNibjFjYmx4dUx5b3FJRXhwYzNSbGJtVnlJSFJ2SUdKbElIQmhjM05sWkNCcGJpQmllU0IxYzJWeUlHWnZjaUJvWVc1a2JHbHVaeUJ2ZFhSd2RYUWdZWFZrYVc4Z1pHRjBZUzRnS2k5Y2JtVjRjRzl5ZENCMGVYQmxJRUYxWkdsdlQzVjBjSFYwVEdsemRHVnVaWElnUFNBb2IzVjBjSFYwT2lCR2JHOWhkRE15UVhKeVlYa3BJRDArSUhadmFXUTdYRzVjYmk4cUtseHVJQ29nUkdWamJHRnlZWFJwYjI1eklHWnZjaUJGYlhOamNtbHdkR1Z1SjNNZ1YyVmlRWE56WlcxaWJIa2dUVzlrZFd4bElHSmxhR0YyYVc5eUxDQnpieUJVVXlCamIyMXdhV3hsY2x4dUlDb2daRzlsYzI0bmRDQmljbVZoYXlCdmRYSWdTbE12UXlzcklHSnlhV1JuWlM1Y2JpQXFMMXh1Wlhod2IzSjBJR1JsWTJ4aGNtVWdhVzUwWlhKbVlXTmxJRmRoYzIxTmIyUjFiR1VnZTF4dUlDQmpZVzUyWVhNNklFaFVUVXhEWVc1MllYTkZiR1Z0Wlc1MGZFOW1abk5qY21WbGJrTmhiblpoYzN4dWRXeHNPMXh1SUNCSVJVRlFWVGc2SUZWcGJuUTRRWEp5WVhrN1hHNGdJRWhGUVZCVk16STZJRlZwYm5Rek1rRnljbUY1TzF4dUlDQklSVUZRUmpNeU9pQkdiRzloZERNeVFYSnlZWGs3WEc0Z0lFaEZRVkJHTmpRNklFWnNiMkYwTmpSQmNuSmhlVHRjYmlBZ1pYSnliM0pNYVhOMFpXNWxjajg2SUVWeWNtOXlUR2x6ZEdWdVpYSTdYRzRnSUY5aWFXNWtWR1Y0ZEhWeVpWUnZRMkZ1ZG1Gek9pQW9LU0E5UGlCaWIyOXNaV0Z1TzF4dUlDQmZZMmhoYm1kbFFtbHVZWEo1UjNKaGNHZzZJQ2h6YVhwbE9pQnVkVzFpWlhJc0lHUmhkR0ZRZEhJNklHNTFiV0psY2lrZ1BUNGdkbTlwWkR0Y2JpQWdYMk5vWVc1blpWUmxlSFJIY21Gd2FEb2dLSE5wZW1VNklHNTFiV0psY2l3Z1pHRjBZVkIwY2pvZ2JuVnRZbVZ5S1NBOVBpQjJiMmxrTzF4dUlDQmZZMjl1Wm1sbmRYSmxRWFZrYVc4NlhHNGdJQ0FnSUNBb1kyaGhibTVsYkhNNklHNTFiV0psY2l3Z2MyRnRjR3hsY3pvZ2JuVnRZbVZ5TENCellXMXdiR1ZTWVhSbE9pQnVkVzFpWlhJcElEMCtJSFp2YVdRN1hHNGdJRjltY21WbE9pQW9jSFJ5T2lCdWRXMWlaWElwSUQwK0lIWnZhV1E3WEc0Z0lGOXRZV3hzYjJNNklDaHphWHBsT2lCdWRXMWlaWElwSUQwK0lHNTFiV0psY2p0Y2JpQWdYM0J5YjJObGMzTkJkV1JwYnpvZ0tHUmhkR0ZRZEhJNklHNTFiV0psY2l3Z2RHbHRaWE4wWVcxd09pQnVkVzFpWlhJcElEMCtJSFp2YVdRN1hHNGdJRjl3Y205alpYTnpSbkpoYldVNklDaDNhV1IwYURvZ2JuVnRZbVZ5TENCb1pXbG5hSFE2SUc1MWJXSmxjaXdnZEdsdFpYTjBZVzF3T2lCdWRXMWlaWElwSUQwK0lIWnZhV1E3WEc0Z0lGOXpaWFJCZFhSdlVtVnVaR1Z5Vkc5VFkzSmxaVzQ2SUNobGJtRmliR1ZrT2lCaWIyOXNaV0Z1S1NBOVBpQjJiMmxrTzF4dUlDQmZkMkZwZEZWdWRHbHNTV1JzWlRvZ0tDa2dQVDRnZG05cFpEdGNibHh1SUNBdkx5QkZlSEJ2YzJWa0lITnZJSFJvWVhRZ1kyeHBaVzUwY3lCdlppQjBhR2x6SUd4cFlpQmpZVzRnWVdOalpYTnpJSFJvYVhNZ1ptbGxiR1JjYmlBZ1pHRjBZVVpwYkdWRWIzZHViRzloWkhNL09pQjdXM1Z5YkRvZ2MzUnlhVzVuWFRvZ2UyeHZZV1JsWkRvZ2JuVnRZbVZ5TENCMGIzUmhiRG9nYm5WdFltVnlmWDA3WEc0Z0lDOHZJRmRoYzIwZ2JXOWtkV3hsSUhkcGJHd2dZMkZzYkNCMWN5QmlZV05ySUdGMElIUm9hWE1nWm5WdVkzUnBiMjRnZDJobGJpQm5hWFpsYmlCaGRXUnBieUJrWVhSaExseHVJQ0J2YmtGMVpHbHZUM1YwY0hWMFB6b2dRWFZrYVc5UGRYUndkWFJNYVhOMFpXNWxjanRjYmx4dUlDQXZMeUJYWVhOdElFMXZaSFZzWlNCdGRXeDBhWE4wY21WaGJTQmxiblJ5ZVhCdmFXNTBjeTRnSUZKbGNYVnBjbVZjYmlBZ0x5OGdaMnhmWjNKaGNHaGZjblZ1Ym1WeVgybHVkR1Z5Ym1Gc1gyMTFiSFJwWDJsdWNIVjBJR0Z6SUdFZ1luVnBiR1FnWkdWd1pXNWtaVzVqZVM1Y2JpQWdjM1J5YVc1blZHOU9aWGRWVkVZNE9pQW9aR0YwWVRvZ2MzUnlhVzVuS1NBOVBpQnVkVzFpWlhJN1hHNGdJRjlpYVc1a1ZHVjRkSFZ5WlZSdlUzUnlaV0Z0T2lBb2MzUnlaV0Z0VG1GdFpWQjBjam9nYm5WdFltVnlLU0E5UGlCMmIybGtPMXh1SUNCZllXUmtRbTkxYm1SVVpYaDBkWEpsVkc5VGRISmxZVzA2WEc0Z0lDQWdJQ0FvYzNSeVpXRnRUbUZ0WlZCMGNqb2diblZ0WW1WeUxDQjNhV1IwYURvZ2JuVnRZbVZ5TENCb1pXbG5hSFE2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0IwYVcxbGMzUmhiWEE2SUc1MWJXSmxjaWtnUFQ0Z2RtOXBaRHRjYmlBZ1gyRmtaRUp2YjJ4VWIwbHVjSFYwVTNSeVpXRnRPbHh1SUNBZ0lDQWdLR1JoZEdFNklHSnZiMnhsWVc0c0lITjBjbVZoYlU1aGJXVlFkSEk2SUc1MWJXSmxjaXdnZEdsdFpYTjBZVzF3T2lCdWRXMWlaWElwSUQwK0lIWnZhV1E3WEc0Z0lGOWhaR1JFYjNWaWJHVlViMGx1Y0hWMFUzUnlaV0Z0T2x4dUlDQWdJQ0FnS0dSaGRHRTZJRzUxYldKbGNpd2djM1J5WldGdFRtRnRaVkIwY2pvZ2JuVnRZbVZ5TENCMGFXMWxjM1JoYlhBNklHNTFiV0psY2lrZ1BUNGdkbTlwWkR0Y2JpQWdYMkZrWkVac2IyRjBWRzlKYm5CMWRGTjBjbVZoYlRwY2JpQWdJQ0FnSUNoa1lYUmhPaUJ1ZFcxaVpYSXNJSE4wY21WaGJVNWhiV1ZRZEhJNklHNTFiV0psY2l3Z2RHbHRaWE4wWVcxd09pQnVkVzFpWlhJcElEMCtJSFp2YVdRN1hHNGdJRjloWkdSSmJuUlViMGx1Y0hWMFUzUnlaV0Z0T2x4dUlDQWdJQ0FnS0dSaGRHRTZJRzUxYldKbGNpd2djM1J5WldGdFRtRnRaVkIwY2pvZ2JuVnRZbVZ5TENCMGFXMWxjM1JoYlhBNklHNTFiV0psY2lrZ1BUNGdkbTlwWkR0Y2JpQWdYMkZrWkZOMGNtbHVaMVJ2U1c1d2RYUlRkSEpsWVcwNlhHNGdJQ0FnSUNBb1pHRjBZVkIwY2pvZ2JuVnRZbVZ5TENCemRISmxZVzFPWVcxbFVIUnlPaUJ1ZFcxaVpYSXNJSFJwYldWemRHRnRjRG9nYm5WdFltVnlLU0E5UGlCMmIybGtPMXh1SUNCZllXUmtSbXhoZEVoaGMyaE5ZWEJVYjBsdWNIVjBVM1J5WldGdE9seHVJQ0FnSUNBZ0tHdGxlWE5RZEhJNklHNTFiV0psY2l3Z2RtRnNkV1Z6VUhSeU9pQnVkVzFpWlhJc0lHTnZkVzUwT2lCdWRXMWlaWElzSUhOMGNtVmhiVTVoYldWUWRISTZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQjBhVzFsYzNSaGJYQTZJRzUxYldKbGNpa2dQVDRnZG05cFpEdGNiaUFnWDJGa1pGQnliM1J2Vkc5SmJuQjFkRk4wY21WaGJUcGNiaUFnSUNBZ0lDaGtZWFJoVUhSeU9pQnVkVzFpWlhJc0lHUmhkR0ZUYVhwbE9pQnVkVzFpWlhJc0lIQnliM1J2VG1GdFpWQjBjam9nYm5WdFltVnlMRnh1SUNBZ0lDQWdJSE4wY21WaGJVNWhiV1ZRZEhJNklHNTFiV0psY2l3Z2RHbHRaWE4wWVcxd09pQnVkVzFpWlhJcElEMCtJSFp2YVdRN1hHNGdJQzh2SUVsdWNIVjBJSE5wWkdVZ2NHRmphMlYwYzF4dUlDQmZZV1JrUW05dmJGUnZTVzV3ZFhSVGFXUmxVR0ZqYTJWME9pQW9aR0YwWVRvZ1ltOXZiR1ZoYml3Z2MzUnlaV0Z0VG1GdFpWQjBjam9nYm5WdFltVnlLU0E5UGlCMmIybGtPMXh1SUNCZllXUmtSRzkxWW14bFZHOUpibkIxZEZOcFpHVlFZV05yWlhRNklDaGtZWFJoT2lCdWRXMWlaWElzSUhOMGNtVmhiVTVoYldWUWRISTZJRzUxYldKbGNpa2dQVDRnZG05cFpEdGNiaUFnWDJGa1pFWnNiMkYwVkc5SmJuQjFkRk5wWkdWUVlXTnJaWFE2SUNoa1lYUmhPaUJ1ZFcxaVpYSXNJSE4wY21WaGJVNWhiV1ZRZEhJNklHNTFiV0psY2lrZ1BUNGdkbTlwWkR0Y2JpQWdYMkZrWkVsdWRGUnZTVzV3ZFhSVGFXUmxVR0ZqYTJWME9pQW9aR0YwWVRvZ2JuVnRZbVZ5TENCemRISmxZVzFPWVcxbFVIUnlPaUJ1ZFcxaVpYSXBJRDArSUhadmFXUTdYRzRnSUY5aFpHUlRkSEpwYm1kVWIwbHVjSFYwVTJsa1pWQmhZMnRsZERvZ0tHUmhkR0ZRZEhJNklHNTFiV0psY2l3Z2MzUnlaV0Z0VG1GdFpWQjBjam9nYm5WdFltVnlLU0E5UGlCMmIybGtPMXh1SUNCZllXUmtVSEp2ZEc5VWIwbHVjSFYwVTJsa1pWQmhZMnRsZERwY2JpQWdJQ0FnSUNoa1lYUmhVSFJ5T2lCdWRXMWlaWElzSUdSaGRHRlRhWHBsT2lCdWRXMWlaWElzSUhCeWIzUnZUbUZ0WlZCMGNqb2diblZ0WW1WeUxGeHVJQ0FnSUNBZ0lITjBjbVZoYlU1aGJXVlFkSEk2SUc1MWJXSmxjaWtnUFQ0Z2RtOXBaRHRjYmx4dUlDQXZMeUJYWVhOdElFMXZaSFZzWlNCdmRYUndkWFFnYkdsemRHVnVaWElnWlc1MGNubHdiMmx1ZEhNdUlDQkJiSE52SUdKMWFXeDBJR0Z6SUhCaGNuUWdiMlpjYmlBZ0x5OGdaMnhmWjNKaGNHaGZjblZ1Ym1WeVgybHVkR1Z5Ym1Gc1gyMTFiSFJwWDJsdWNIVjBMbHh1SUNCemFXMXdiR1ZNYVhOMFpXNWxjbk0vT2lCN1cyOTFkSEIxZEZOMGNtVmhiVTVoYldVNklITjBjbWx1WjEwNklDaGtZWFJoT2lCMWJtdHViM2R1S1NBOVBpQjJiMmxrZlR0Y2JpQWdkbVZqZEc5eVRHbHpkR1Z1WlhKelB6b2dlMXh1SUNBZ0lGdHZkWFJ3ZFhSVGRISmxZVzFPWVcxbE9pQnpkSEpwYm1kZE9pQW9YRzRnSUNBZ0lDQWdJR1JoZEdFNklIVnVhMjV2ZDI0c0lHbHVaR1Y0T2lCdWRXMWlaWElzSUd4bGJtZDBhRG9nYm5WdFltVnlLU0E5UGlCMmIybGtYRzRnSUgwN1hHNGdJRjloZEhSaFkyaENiMjlzVEdsemRHVnVaWEk2SUNoemRISmxZVzFPWVcxbFVIUnlPaUJ1ZFcxaVpYSXBJRDArSUhadmFXUTdYRzRnSUY5aGRIUmhZMmhDYjI5c1ZtVmpkRzl5VEdsemRHVnVaWEk2SUNoemRISmxZVzFPWVcxbFVIUnlPaUJ1ZFcxaVpYSXBJRDArSUhadmFXUTdYRzRnSUY5aGRIUmhZMmhFYjNWaWJHVk1hWE4wWlc1bGNqb2dLSE4wY21WaGJVNWhiV1ZRZEhJNklHNTFiV0psY2lrZ1BUNGdkbTlwWkR0Y2JpQWdYMkYwZEdGamFFUnZkV0pzWlZabFkzUnZja3hwYzNSbGJtVnlPaUFvYzNSeVpXRnRUbUZ0WlZCMGNqb2diblZ0WW1WeUtTQTlQaUIyYjJsa08xeHVJQ0JmWVhSMFlXTm9SbXh2WVhSTWFYTjBaVzVsY2pvZ0tITjBjbVZoYlU1aGJXVlFkSEk2SUc1MWJXSmxjaWtnUFQ0Z2RtOXBaRHRjYmlBZ1gyRjBkR0ZqYUVac2IyRjBWbVZqZEc5eVRHbHpkR1Z1WlhJNklDaHpkSEpsWVcxT1lXMWxVSFJ5T2lCdWRXMWlaWElwSUQwK0lIWnZhV1E3WEc0Z0lGOWhkSFJoWTJoSmJuUk1hWE4wWlc1bGNqb2dLSE4wY21WaGJVNWhiV1ZRZEhJNklHNTFiV0psY2lrZ1BUNGdkbTlwWkR0Y2JpQWdYMkYwZEdGamFFbHVkRlpsWTNSdmNreHBjM1JsYm1WeU9pQW9jM1J5WldGdFRtRnRaVkIwY2pvZ2JuVnRZbVZ5S1NBOVBpQjJiMmxrTzF4dUlDQmZZWFIwWVdOb1UzUnlhVzVuVEdsemRHVnVaWEk2SUNoemRISmxZVzFPWVcxbFVIUnlPaUJ1ZFcxaVpYSXBJRDArSUhadmFXUTdYRzRnSUY5aGRIUmhZMmhUZEhKcGJtZFdaV04wYjNKTWFYTjBaVzVsY2pvZ0tITjBjbVZoYlU1aGJXVlFkSEk2SUc1MWJXSmxjaWtnUFQ0Z2RtOXBaRHRjYmlBZ1gyRjBkR0ZqYUZCeWIzUnZUR2x6ZEdWdVpYSTZJQ2h6ZEhKbFlXMU9ZVzFsVUhSeU9pQnVkVzFpWlhJc0lHMWhhMlZFWldWd1EyOXdlVDg2SUdKdmIyeGxZVzRwSUQwK0lIWnZhV1E3WEc0Z0lGOWhkSFJoWTJoUWNtOTBiMVpsWTNSdmNreHBjM1JsYm1WeU9seHVJQ0FnSUNBZ0tITjBjbVZoYlU1aGJXVlFkSEk2SUc1MWJXSmxjaXdnYldGclpVUmxaWEJEYjNCNVB6b2dZbTl2YkdWaGJpa2dQVDRnZG05cFpEdGNibHh1SUNBdkx5QlNaWEYxYVhKbGN5QmtaWEJsYm1SbGJtTjVJRndpT21kc1gyZHlZWEJvWDNKMWJtNWxjbDloZFdScGIxOXZkWFJjSWl3Z1lXNWtJSGRwYkd3Z2NtVm5hWE4wWlhJZ1lXNWNiaUFnTHk4Z1lYVmthVzhnYjNWMGNIVjBJR3hwYzNSbGJtbHVaeUJtZFc1amRHbHZiaUIzYUdsamFDQmpZVzRnWW1VZ2RHRndjR1ZrSUdsdWRHOGdaSGx1WVcxcFkyRnNiSGtnWkhWeWFXNW5YRzRnSUM4dklHZHlZWEJvSUhKMWJtNXBibWNnZG1saElHOXVRWFZrYVc5UGRYUndkWFF1SUZSb2FYTWdZMkZzYkNCdGRYTjBJR0psSUcxaFpHVWdZbVZtYjNKbElHZHlZWEJvSUdselhHNGdJQzh2SUdsdWFYUnBZV3hwZW1Wa0xDQmlkWFFnWVdaMFpYSWdkMkZ6YlUxdlpIVnNaU0JwY3lCcGJuTjBZVzUwYVdGMFpXUXVYRzRnSUY5aGRIUmhZMmhCZFdScGIwOTFkSEIxZEV4cGMzUmxibVZ5T2lBb0tTQTlQaUIyYjJsa08xeHVYRzRnSUM4dklGUlBSRTg2SUZKbFptRmpkRzl5SUhSdklHcDFjM1FnZFhObElHRWdabVYzSUc1MWJXSmxjbk1nS0hCbGNtaGhjSE1nY21WbVlXTjBiM0lnWVhkaGVWeHVJQ0F2THlBZ0lHWnliMjBnWjJ4ZlozSmhjR2hmY25WdWJtVnlYMmx1ZEdWeWJtRnNMbU5qSUdWdWRHbHlaV3g1SUhSdklIVnpaU0J6YjIxbGRHaHBibWNnWVNCc2FYUjBiR1VnYlc5eVpWeHVJQ0F2THlBZ0lITjBjbVZoYld4cGJtVmtPeUJ1WlhjZ2RtVnljMmx2YmlCcGN5QmZjSEp2WTJWemMwWnlZVzFsSUdGaWIzWmxLUzVjYmlBZ1gzQnliMk5sYzNOSGJEb2dLR1p5WVcxbFJHRjBZVkIwY2pvZ2JuVnRZbVZ5S1NBOVBpQnVkVzFpWlhJN1hHNTlYRzVjYmk4dklFZHNiMkpoYkNCa1pXTnNZWEpoZEdsdmJuTXNJR1p2Y2lCMFlYQndhVzVuSUdsdWRHOGdWMmx1Wkc5M0lHWnZjaUJYWVhOdElHSnNiMklnY25WdWJtbHVaMXh1WkdWamJHRnlaU0JuYkc5aVlXd2dlMXh1SUNCcGJuUmxjbVpoWTJVZ1YybHVaRzkzSUh0Y2JpQWdJQ0F2THlCRGNtVmhkR1ZrSUdKNUlIVnpJSFZ6YVc1bklIZGhjMjB0Y25WdWJtVnlJSE5qY21sd2RGeHVJQ0FnSUUxdlpIVnNaVDg2SUZkaGMyMU5iMlIxYkdWOFJtbHNaVXh2WTJGMGIzSTdYRzRnSUNBZ0x5OGdRM0psWVhSbFpDQmllU0IzWVhOdExYSjFibTVsY2lCelkzSnBjSFJjYmlBZ0lDQk5iMlIxYkdWR1lXTjBiM0o1UHpvZ0tHWnBiR1ZNYjJOaGRHOXlPaUJHYVd4bFRHOWpZWFJ2Y2lrZ1BUNGdVSEp2YldselpUeFhZWE50VFc5a2RXeGxQanRjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUVabGRHTm9aWE1nWldGamFDQlZVa3dnYVc0Z2RYSnNjeXdnWlhobFkzVjBaWE1nZEdobGJTQnZibVV0WW5rdGIyNWxJR2x1SUhSb1pTQnZjbVJsY2lCMGFHVjVJR0Z5WlZ4dUlDb2djR0Z6YzJWa0xDQmhibVFnZEdobGJpQnlaWFIxY201eklDaHZjaUIwYUhKdmQzTWdhV1lnYzI5dFpYUm9hVzVuSUhkbGJuUWdZVzFwYzNNcExseHVJQ292WEc1a1pXTnNZWEpsSUdaMWJtTjBhVzl1SUdsdGNHOXlkRk5qY21sd2RITW9MaTR1ZFhKc2N6b2dRWEp5WVhrOGMzUnlhVzVuZkZWU1RENHBPaUIyYjJsa08xeHVYRzR2S2lwY2JpQXFJRlpoYkdsa0lIUjVjR1Z6SUc5bUlHbHRZV2RsSUhOdmRYSmpaWE1nZDJocFkyZ2dkMlVnWTJGdUlISjFiaUJ2ZFhJZ1YyRnpiVTFsWkdsaFVHbHdaVXhwWWlCdmRtVnlMbHh1SUNvdlhHNWxlSEJ2Y25RZ2RIbHdaU0JKYldGblpWTnZkWEpqWlNBOVhHNGdJQ0FnU0ZSTlRFTmhiblpoYzBWc1pXMWxiblI4U0ZSTlRGWnBaR1Z2Uld4bGJXVnVkSHhJVkUxTVNXMWhaMlZGYkdWdFpXNTBmRWx0WVdkbFJHRjBZWHhKYldGblpVSnBkRzFoY0R0Y2JseHVYRzR2S2lvZ1FTQnNhWE4wWlc1bGNpQjBhR0YwSUhkcGJHd2dZbVVnYVc1MmIydGxaQ0IzYVhSb0lHRnVJR0ZpYzJ3Nk9sTjBZWFIxYzBOdlpHVWdZVzVrSUcxbGMzTmhaMlV1SUNvdlhHNWxlSEJ2Y25RZ2RIbHdaU0JGY25KdmNreHBjM1JsYm1WeUlEMGdLR052WkdVNklHNTFiV0psY2l3Z2JXVnpjMkZuWlRvZ2MzUnlhVzVuS1NBOVBpQjJiMmxrTzF4dVhHNHZMeUJKYm5SbGNtNWhiQ0IwZVhCbElHOW1JR052Ym5OMGNuVmpkRzl5Y3lCMWMyVmtJR1p2Y2lCcGJtbDBhV0ZzYVhwcGJtY2dWMkZ6YlUxbFpHbGhVR2x3WlV4cFlpQmhibVJjYmk4dklITjFZbU5zWVhOelpYTXVYRzUwZVhCbElGZGhjMjFOWldScFlWQnBjR1ZEYjI1emRISjFZM1J2Y2p4TWFXSlVlWEJsUGlBOVhHNGdJQ0FnS0c1bGR5QW9YRzRnSUNBZ0lDQWdJQ0J0YjJSMWJHVTZJRmRoYzIxTmIyUjFiR1VzSUdOaGJuWmhjejg2SUVoVVRVeERZVzUyWVhORmJHVnRaVzUwZkU5bVpuTmpjbVZsYmtOaGJuWmhjM3h1ZFd4c0tTQTlQbHh1SUNBZ0lDQWdJQ0FnVEdsaVZIbHdaU2s3WEc1Y2JpOHFLbHh1SUNvZ1UybHRjR3hsSUdOc1lYTnpJSFJ2SUhKMWJpQmhiaUJoY21KcGRISmhjbmtnYVcxaFoyVXRhVzR2YVcxaFoyVXRiM1YwSUUxbFpHbGhVR2x3WlNCbmNtRndhQ0FvYVM1bExseHVJQ29nWVhNZ1kzSmxZWFJsWkNCaWVTQjNZWE50WDIxbFpHbGhjR2x3WlY5a1pXMXZJRUpWU1V4RUlHMWhZM0p2S1N3Z1lXNWtJR1ZwZEdobGNpQnlaVzVrWlhJZ2NtVnpkV3gwYzF4dUlDb2dhVzUwYnlCallXNTJZWE1zSUc5eUlHVnNjMlVnY21WMGRYSnVJSFJvWlNCdmRYUndkWFFnVjJWaVIweFVaWGgwZFhKbExpQlVZV3RsY3lCaElGZGxZa0Z6YzJWdFlteDVYRzRnS2lCTmIyUjFiR1VnS0cxMWMzUWdZbVVnYVc1emRHRnVkR2xoZEdWa0lIUnZJSE5sYkdZdVRXOWtkV3hsS1M1Y2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGZGhjMjFOWldScFlWQnBjR1ZNYVdJZ2UxeHVJQ0F2THlCVVQwUlBPaUJVYUdWelpTQnphRzkxYkdRZ1ltVWdjSEp2ZEdWamRHVmtMM0J5YVhaaGRHVXNJR0oxZENCaGNtVWdiR1ZtZENCbGVIQnZjMlZrSUdadmNseHVJQ0F2THlBZ0lHNXZkeUJ6YnlCMGFHRjBJSGRsSUdOaGJpQjFjMlVnY0hKdmNHVnlJRlJUSUcxcGVHbHVjeUIzYVhSb0lIUm9hWE1nWTJ4aGMzTWdZWE1nWVNCaVlYTmxMaUJVYUdselhHNGdJQzh2SUNBZ2MyaHZkV3hrSUdKbElITnZiV1YzYUdGMElHWnBlR1ZrSUhkb1pXNGdkMlVnWTNKbFlYUmxJRzkxY2lBdVpDNTBjeUJtYVd4bGN5NWNiaUFnY21WaFpHOXViSGtnZDJGemJVMXZaSFZzWlRvZ1YyRnpiVTF2WkhWc1pUdGNiaUFnY21WaFpHOXViSGtnYUdGelRYVnNkR2xUZEhKbFlXMVRkWEJ3YjNKME9pQmliMjlzWldGdU8xeHVJQ0JoZFhSdlVtVnphWHBsUTJGdWRtRnpPaUJpYjI5c1pXRnVJRDBnZEhKMVpUdGNiaUFnWVhWa2FXOVFkSEk2SUc1MWJXSmxjbnh1ZFd4c08xeHVJQ0JoZFdScGIxTnBlbVU2SUc1MWJXSmxjanRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRM0psWVhSbGN5QmhJRzVsZHlCTlpXUnBZVkJwY0dVZ1YwRlRUU0J0YjJSMWJHVXVJRTExYzNRZ1ltVWdZMkZzYkdWa0lDcGhablJsY2lvZ2QyRnpiU0JOYjJSMWJHVWdhR0Z6WEc0Z0lDQXFJR2x1YVhScFlXeHBlbVZrTGlCT2IzUmxJSFJvWVhRZ2QyVWdkR0ZyWlNCamIyNTBjbTlzSUc5bUlIUm9aU0JIVENCallXNTJZWE1nWm5KdmJTQm9aWEpsSUc5dUlHOTFkQ3hjYmlBZ0lDb2dZVzVrSUhkcGJHd2djbVZ6YVhwbElHbDBJSFJ2SUdacGRDQnBibkIxZEM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElHMXZaSFZzWlNCVWFHVWdkVzVrWlhKc2VXbHVaeUJYWVhOdElFMXZaSFZzWlNCMGJ5QjFjMlV1WEc0Z0lDQXFJRUJ3WVhKaGJTQm5iRU5oYm5aaGN5QlVhR1VnZEhsd1pTQnZaaUIwYUdVZ1Iwd2dZMkZ1ZG1GeklIUnZJSFZ6WlN3Z2IzSWdZRzUxYkd4Z0lHbG1JRzV2SUVkTVhHNGdJQ0FxSUNBZ0lHTmhiblpoY3lCemFHOTFiR1FnWW1VZ2FXNXBkR2xoYkhwbFpDNGdTVzVwZEdsaGJHbDZaWE1nWVc0Z2IyWm1jMk55WldWdUlHTmhiblpoY3lCcFppQnViM1JjYmlBZ0lDb2dJQ0FnY0hKdmRtbGtaV1F1WEc0Z0lDQXFMMXh1SUNCamIyNXpkSEoxWTNSdmNpaGNiaUFnSUNBZ0lHMXZaSFZzWlRvZ1YyRnpiVTF2WkhWc1pTd2daMnhEWVc1MllYTS9PaUJJVkUxTVEyRnVkbUZ6Uld4bGJXVnVkSHhQWm1aelkzSmxaVzVEWVc1MllYTjhiblZzYkNrZ2UxeHVJQ0FnSUhSb2FYTXVkMkZ6YlUxdlpIVnNaU0E5SUcxdlpIVnNaVHRjYmlBZ0lDQjBhR2x6TG1GMVpHbHZVSFJ5SUQwZ2JuVnNiRHRjYmlBZ0lDQjBhR2x6TG1GMVpHbHZVMmw2WlNBOUlEQTdYRzRnSUNBZ2RHaHBjeTVvWVhOTmRXeDBhVk4wY21WaGJWTjFjSEJ2Y25RZ1BWeHVJQ0FnSUNBZ0lDQW9kSGx3Wlc5bUlIUm9hWE11ZDJGemJVMXZaSFZzWlM1ZllXUmtTVzUwVkc5SmJuQjFkRk4wY21WaGJTQTlQVDBnSjJaMWJtTjBhVzl1SnlrN1hHNWNiaUFnSUNCcFppQW9aMnhEWVc1MllYTWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTUzWVhOdFRXOWtkV3hsTG1OaGJuWmhjeUE5SUdkc1EyRnVkbUZ6TzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQXZMeUJKWmlCdWJ5QmpZVzUyWVhNZ2FYTWdjSEp2ZG1sa1pXUXNJR0Z6YzNWdFpTQkRhSEp2YldVdlJtbHlaV1p2ZUNCaGJtUWdhblZ6ZENCdFlXdGxJR0Z1WEc0Z0lDQWdJQ0F2THlCUFptWnpZM0psWlc1RFlXNTJZWE1nWm05eUlFZFFWU0J3Y205alpYTnphVzVuTGx4dUlDQWdJQ0FnZEdocGN5NTNZWE50VFc5a2RXeGxMbU5oYm5aaGN5QTlJRzVsZHlCUFptWnpZM0psWlc1RFlXNTJZWE1vTVN3Z01TazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRU52Ym5abGJtbGxibU5sSUdobGJIQmxjaUIwYnlCc2IyRmtJR0VnVFdWa2FXRlFhWEJsSUdkeVlYQm9JR1p5YjIwZ1lTQm1hV3hsSUdGdVpDQndZWE56SUdsMElIUnZYRzRnSUNBcUlITmxkRWR5WVhCb0xseHVJQ0FnS2lCQWNHRnlZVzBnWjNKaGNHaEdhV3hsSUZSb1pTQjFjbXdnYjJZZ2RHaGxJRTFsWkdsaFVHbHdaU0JuY21Gd2FDQm1hV3hsSUhSdklHeHZZV1F1WEc0Z0lDQXFMMXh1SUNCaGMzbHVZeUJwYm1sMGFXRnNhWHBsUjNKaGNHZ29aM0poY0doR2FXeGxPaUJ6ZEhKcGJtY3BPaUJRY205dGFYTmxQSFp2YVdRK0lIdGNiaUFnSUNBdkx5QkdaWFJqYUNCaGJtUWdjMlYwSUdkeVlYQm9YRzRnSUNBZ1kyOXVjM1FnY21WemNHOXVjMlVnUFNCaGQyRnBkQ0JtWlhSamFDaG5jbUZ3YUVacGJHVXBPMXh1SUNBZ0lHTnZibk4wSUdkeVlYQm9SR0YwWVNBOUlHRjNZV2wwSUhKbGMzQnZibk5sTG1GeWNtRjVRblZtWm1WeUtDazdYRzRnSUNBZ1kyOXVjM1FnYVhOQ2FXNWhjbmtnUFZ4dUlDQWdJQ0FnSUNBaEtHZHlZWEJvUm1sc1pTNWxibVJ6VjJsMGFDZ25MbkJpZEhoMEp5a2dmSHdnWjNKaGNHaEdhV3hsTG1WdVpITlhhWFJvS0NjdWRHVjRkSEJ5YjNSdkp5a3BPMXh1SUNBZ0lIUm9hWE11YzJWMFIzSmhjR2dvYm1WM0lGVnBiblE0UVhKeVlYa29aM0poY0doRVlYUmhLU3dnYVhOQ2FXNWhjbmtwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnZiblpsYm1sbGJtTmxJR2hsYkhCbGNpQm1iM0lnWTJGc2JHbHVaeUJ6WlhSSGNtRndhQ0IzYVhSb0lHRWdjM1J5YVc1bklISmxjSEpsYzJWdWRHbHVaeUJoSUhSbGVIUmNiaUFnSUNvZ2NISnZkRzhnWTI5dVptbG5MbHh1SUNBZ0tpQkFjR0Z5WVcwZ1ozSmhjR2hEYjI1bWFXY2dWR2hsSUhSbGVIUWdjSEp2ZEc4Z1ozSmhjR2dnWTI5dVptbG5MQ0JsZUhCbFkzUmxaQ0IwYnlCaVpTQmhJSE4wY21sdVp5QnBibHh1SUNBZ0tpQmtaV1poZFd4MElFcGhkbUZUWTNKcGNIUWdWVlJHTFRFMklHWnZjbTFoZEM1Y2JpQWdJQ292WEc0Z0lITmxkRWR5WVhCb1JuSnZiVk4wY21sdVp5aG5jbUZ3YUVOdmJtWnBaem9nYzNSeWFXNW5LVG9nZG05cFpDQjdYRzRnSUNBZ2RHaHBjeTV6WlhSSGNtRndhQ2dvYm1WM0lGUmxlSFJGYm1OdlpHVnlLQ2twTG1WdVkyOWtaU2huY21Gd2FFTnZibVpwWnlrc0lHWmhiSE5sS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlVZV3RsY3lCMGFHVWdjbUYzSUdSaGRHRWdabkp2YlNCaElFMWxaR2xoVUdsd1pTQm5jbUZ3YUN3Z1lXNWtJSEJoYzNObGN5QnBkQ0IwYnlCREt5c2dkRzhnWW1VZ2NuVnVYRzRnSUNBcUlHOTJaWElnZEdobElIWnBaR1Z2SUhOMGNtVmhiUzRnVjJsc2JDQnlaWEJzWVdObElIUm9aU0J3Y21WMmFXOTFjMng1SUhKMWJtNXBibWNnVFdWa2FXRlFhWEJsSUdkeVlYQm9MRnh1SUNBZ0tpQnBaaUIwYUdWeVpTQnBjeUJ2Ym1VdVhHNGdJQ0FxSUVCd1lYSmhiU0JuY21Gd2FFUmhkR0VnVkdobElISmhkeUJOWldScFlWQnBjR1VnWjNKaGNHZ2daR0YwWVN3Z1pXbDBhR1Z5SUdsdUlHSnBibUZ5ZVZ4dUlDQWdLaUFnSUNBZ2NISnZkRzlpZFdabVpYSWdabTl5YldGMElDZ3VZbWx1WVhKNWNHSXBMQ0J2Y2lCbGJITmxJR2x1SUhKaGR5QjBaWGgwSUdadmNtMWhkQ0FvTG5CaWRIaDBJRzl5WEc0Z0lDQXFJQ0FnSUNBdWRHVjRkSEJ5YjNSdktTNWNiaUFnSUNvZ1FIQmhjbUZ0SUdselFtbHVZWEo1SUZSb2FYTWdjMmh2ZFd4a0lHSmxJSE5sZENCMGJ5QjBjblZsSUdsbUlIUm9aU0JuY21Gd2FDQnBjeUJwYmx4dUlDQWdLaUFnSUNBZ1ltbHVZWEo1SUdadmNtMWhkQ3dnWVc1a0lHWmhiSE5sSUdsbUlHbDBJR2x6SUdsdUlHaDFiV0Z1TFhKbFlXUmhZbXhsSUhSbGVIUWdabTl5YldGMExseHVJQ0FnS2k5Y2JpQWdjMlYwUjNKaGNHZ29aM0poY0doRVlYUmhPaUJWYVc1ME9FRnljbUY1TENCcGMwSnBibUZ5ZVRvZ1ltOXZiR1ZoYmlrNklIWnZhV1FnZTF4dUlDQWdJR052Ym5OMElITnBlbVVnUFNCbmNtRndhRVJoZEdFdWJHVnVaM1JvTzF4dUlDQWdJR052Ym5OMElHUmhkR0ZRZEhJZ1BTQjBhR2x6TG5kaGMyMU5iMlIxYkdVdVgyMWhiR3h2WXloemFYcGxLVHRjYmlBZ0lDQjBhR2x6TG5kaGMyMU5iMlIxYkdVdVNFVkJVRlU0TG5ObGRDaG5jbUZ3YUVSaGRHRXNJR1JoZEdGUWRISXBPMXh1SUNBZ0lHbG1JQ2hwYzBKcGJtRnllU2tnZTF4dUlDQWdJQ0FnZEdocGN5NTNZWE50VFc5a2RXeGxMbDlqYUdGdVoyVkNhVzVoY25sSGNtRndhQ2h6YVhwbExDQmtZWFJoVUhSeUtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdocGN5NTNZWE50VFc5a2RXeGxMbDlqYUdGdVoyVlVaWGgwUjNKaGNHZ29jMmw2WlN3Z1pHRjBZVkIwY2lrN1hHNGdJQ0FnZlZ4dUlDQWdJSFJvYVhNdWQyRnpiVTF2WkhWc1pTNWZabkpsWlNoa1lYUmhVSFJ5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRiMjVtYVdkMWNtVnpJSFJvWlNCamRYSnlaVzUwSUdkeVlYQm9JSFJ2SUdoaGJtUnNaU0JoZFdScGJ5QnBiaUJoSUdObGNuUmhhVzRnZDJGNUxpQk5kWE4wSUdKbFhHNGdJQ0FxSUdOaGJHeGxaQ0JpWldadmNtVWdkR2hsSUdkeVlYQm9JR2x6SUhObGRDOXpkR0Z5ZEdWa0lHbHVJRzl5WkdWeUlIUnZJSFZ6WlNCd2NtOWpaWE56UVhWa2FXOHVYRzRnSUNBcUlFQndZWEpoYlNCdWRXMURhR0Z1Ym1Wc2N5QlVhR1VnYm5WdFltVnlJRzltSUdOb1lXNXVaV3h6SUc5bUlHRjFaR2x2SUdsdWNIVjBMaUJQYm14NUlERmNiaUFnSUNvZ0lDQWdJR2x6SUhOMWNIQnZjblJsWkNCbWIzSWdibTkzTGx4dUlDQWdLaUJBY0dGeVlXMGdiblZ0VTJGdGNHeGxjeUJVYUdVZ2JuVnRZbVZ5SUc5bUlITmhiWEJzWlhNZ2RHaGhkQ0JoY21VZ2RHRnJaVzRnYVc0Z1pXRmphRnh1SUNBZ0tpQWdJQ0FnWVhWa2FXOGdZMkZ3ZEhWeVpTNWNiaUFnSUNvZ1FIQmhjbUZ0SUhOaGJYQnNaVkpoZEdVZ1ZHaGxJSEpoZEdVc0lHbHVJRWg2TENCdlppQjBhR1VnYzJGdGNHeHBibWN1WEc0Z0lDQXFMMXh1SUNCamIyNW1hV2QxY21WQmRXUnBieWh1ZFcxRGFHRnVibVZzY3pvZ2JuVnRZbVZ5TENCdWRXMVRZVzF3YkdWek9pQnVkVzFpWlhJc0lITmhiWEJzWlZKaGRHVTZJRzUxYldKbGNpa2dlMXh1SUNBZ0lIUm9hWE11ZDJGemJVMXZaSFZzWlM1ZlkyOXVabWxuZFhKbFFYVmthVzhvYm5WdFEyaGhibTVsYkhNc0lHNTFiVk5oYlhCc1pYTXNJSE5oYlhCc1pWSmhkR1VwTzF4dUlDQWdJR2xtSUNoMGFHbHpMbmRoYzIxTmIyUjFiR1V1WDJGMGRHRmphRUYxWkdsdlQzVjBjSFYwVEdsemRHVnVaWElwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVkMkZ6YlUxdlpIVnNaUzVmWVhSMFlXTm9RWFZrYVc5UGRYUndkWFJNYVhOMFpXNWxjaWdwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCQmJHeHZkM01nWkdsellXSnNhVzVuSUdGMWRHOXRZWFJwWXlCallXNTJZWE1nY21WemFYcHBibWNzSUdsdUlHTmhjMlVnWTJ4cFpXNTBjeUIzWVc1MElIUnZJR052Ym5SeWIyeGNiaUFnSUNvZ1kyOXVkSEp2YkNCMGFHbHpMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2NtVnphWHBsSUZSeWRXVWdkMmxzYkNCeVpTMWxibUZpYkdVZ1lYVjBiMjFoZEdsaklHTmhiblpoY3lCeVpYTnBlbWx1Wnl3Z2QyaHBiR1VnWm1Gc2MyVmNiaUFnSUNvZ0lDQWdJSGRwYkd3Z1pHbHpZV0pzWlNCMGFHVWdabVZoZEhWeVpTNWNiaUFnSUNvdlhHNGdJSE5sZEVGMWRHOVNaWE5wZW1WRFlXNTJZWE1vY21WemFYcGxPaUJpYjI5c1pXRnVLVG9nZG05cFpDQjdYRzRnSUNBZ2RHaHBjeTVoZFhSdlVtVnphWHBsUTJGdWRtRnpJRDBnY21WemFYcGxPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVGc2JHOTNjeUJrYVhOaFlteHBibWNnZEdobElHRjFkRzl0WVhScFl5QnlaVzVrWlhJdGRHOHRjMk55WldWdUlHTnZaR1VzSUdsdUlHTmhjMlVnWTJ4cFpXNTBjeUJrYjI0bmRGeHVJQ0FnS2lCdVpXVmtMM2RoYm5RZ2RHaHBjeTRnU1c0Z2NHRnlkR2xqZFd4aGNpd2dkR2hwY3lCeVpXMXZkbVZ6SUhSb1pTQnlaWEYxYVhKbGJXVnVkQ0JtYjNJZ2NHbHdaV3hwYm1WelhHNGdJQ0FxSUhSdklHaGhkbVVnWVdOalpYTnpJSFJ2SUVkUVZTQnlaWE52ZFhKalpYTXNJR0Z6SUhkbGJHd2dZWE1nZEdobElISmxjWFZwY21WdFpXNTBJR1p2Y2lCbmNtRndhSE1nZEc5Y2JpQWdJQ29nYUdGMlpTQmNJbWx1Y0hWMFgyWnlZVzFsYzE5bmNIVmNJaUJoYm1RZ1hDSnZkWFJ3ZFhSZlpuSmhiV1Z6WDJkd2RWd2lJSE4wY21WaGJYTWdaR1ZtYVc1bFpDd2djMjhnY0hWeVpWeHVJQ0FnS2lCRFVGVWdjR2x3Wld4cGJtVnpJR0Z1WkNCdWIyNHRkbWxrWlc4Z2NHbHdaV3hwYm1WeklHTmhiaUJpWlNCamNtVmhkR1ZrTGx4dUlDQWdLaUJPVDFSRk9pQlVhR2x6SUc5dWJIa2dZV1ptWldOMGN5Qm1kWFIxY21VZ1ozSmhjR2dnYVc1cGRHbGhiR2w2WVhScGIyNXpJQ2gyYVdFZ2MyVjBSM0poY0dnZ2IzSmNiaUFnSUNvZ0lDQWdJR2x1YVhScFlXeHBlbVZIY21Gd2FDa3NJR0Z1WkNCa2IyVnpJRTVQVkNCaFptWmxZM1FnZEdobElHTjFjbkpsYm5Sc2VTQnlkVzV1YVc1bklHZHlZWEJvTENCemIxeHVJQ0FnS2lBZ0lDQWdZMkZzYkhNZ2RHOGdkR2hwY3lCemFHOTFiR1FnWW1VZ2JXRmtaU0FxWW1WbWIzSmxLaUJ6WlhSSGNtRndhQzlwYm1sMGFXRnNhWHBsUjNKaGNHZ2dabTl5SUhSb1pWeHVJQ0FnS2lBZ0lDQWdaM0poY0dnZ1ptbHNaU0JpWldsdVp5QjBZWEpuWlhSbFpDNWNiaUFnSUNvZ1FIQmhjbUZ0SUdWdVlXSnNaV1FnVkhKMVpTQjNhV3hzSUhKbExXVnVZV0pzWlNCaGRYUnZiV0YwYVdNZ2NtVnVaR1Z5TFhSdkxYTmpjbVZsYmlCamIyUmxJR0Z1WkZ4dUlDQWdLaUFnSUNBZ1kyRjFjMlVnUjFCVklISmxjMjkxY21ObGN5QjBieUJ2Ym1ObElHRm5ZV2x1SUdKbElISmxjWFZsYzNSbFpDd2dkMmhwYkdVZ1ptRnNjMlVnZDJsc2JGeHVJQ0FnS2lBZ0lDQWdaR2x6WVdKc1pTQjBhR1VnWm1WaGRIVnlaUzVjYmlBZ0lDb3ZYRzRnSUhObGRFRjFkRzlTWlc1a1pYSlViMU5qY21WbGJpaGxibUZpYkdWa09pQmliMjlzWldGdUtUb2dkbTlwWkNCN1hHNGdJQ0FnZEdocGN5NTNZWE50VFc5a2RXeGxMbDl6WlhSQmRYUnZVbVZ1WkdWeVZHOVRZM0psWlc0b1pXNWhZbXhsWkNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRbWx1WkNCMFpYaDBkWEpsSUhSdklHOTFjaUJwYm5SbGNtNWhiQ0JqWVc1MllYTXNJR0Z1WkNCMWNHeHZZV1FnYVcxaFoyVWdjMjkxY21ObElIUnZJRWRRVlM1Y2JpQWdJQ29nVW1WMGRYSnVjeUIwZFhCc1pTQmJkMmxrZEdnc0lHaGxhV2RvZEYwZ2IyWWdkR1Y0ZEhWeVpTNGdJRWx1ZEdWdVpHVmtJR1p2Y2lCcGJuUmxjbTVoYkNCMWMyRm5aUzVjYmlBZ0lDb3ZYRzRnSUdKcGJtUlVaWGgwZFhKbFZHOVRkSEpsWVcwb2FXMWhaMlZUYjNWeVkyVTZJRWx0WVdkbFUyOTFjbU5sTENCemRISmxZVzFPWVcxbFVIUnlQem9nYm5WdFltVnlLVHBjYmlBZ0lDQWdJRnR1ZFcxaVpYSXNJRzUxYldKbGNsMGdlMXh1SUNBZ0lHbG1JQ2doZEdocGN5NTNZWE50VFc5a2RXeGxMbU5oYm5aaGN5a2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZE9ieUJQY0dWdVIwd2dZMkZ1ZG1GeklHTnZibVpwWjNWeVpXUXVKeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0NGemRISmxZVzFPWVcxbFVIUnlLU0I3WEc0Z0lDQWdJQ0F2THlCVVQwUlBPaUJTWlcxdmRtVWdkR2hwY3lCd1lYUm9JRzl1WTJVZ1kyOXRjR3hsZEdWc2VTQnlaV1poWTNSdmNtVmtJR0YzWVhrdVhHNGdJQ0FnSUNCamIyNXpiMnhsTG1GemMyVnlkQ2gwYUdsekxuZGhjMjFOYjJSMWJHVXVYMkpwYm1SVVpYaDBkWEpsVkc5RFlXNTJZWE1vS1NrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvYVhNdWQyRnpiVTF2WkhWc1pTNWZZbWx1WkZSbGVIUjFjbVZVYjFOMGNtVmhiU2h6ZEhKbFlXMU9ZVzFsVUhSeUtUdGNiaUFnSUNCOVhHNGdJQ0FnWTI5dWMzUWdaMnc2SUdGdWVTQTlYRzRnSUNBZ0lDQWdJSFJvYVhNdWQyRnpiVTF2WkhWc1pTNWpZVzUyWVhNdVoyVjBRMjl1ZEdWNGRDZ25kMlZpWjJ3eUp5a2dmSHhjYmlBZ0lDQWdJQ0FnZEdocGN5NTNZWE50VFc5a2RXeGxMbU5oYm5aaGN5NW5aWFJEYjI1MFpYaDBLQ2QzWldKbmJDY3BPMXh1SUNBZ0lHTnZibk52YkdVdVlYTnpaWEowS0dkc0tUdGNiaUFnSUNCbmJDNTBaWGhKYldGblpUSkVLRnh1SUNBZ0lDQWdJQ0JuYkM1VVJWaFVWVkpGWHpKRUxDQXdMQ0JuYkM1U1IwSkJMQ0JuYkM1U1IwSkJMQ0JuYkM1VlRsTkpSMDVGUkY5Q1dWUkZMQ0JwYldGblpWTnZkWEpqWlNrN1hHNWNiaUFnSUNCc1pYUWdkMmxrZEdnc0lHaGxhV2RvZER0Y2JpQWdJQ0JwWmlBb0tHbHRZV2RsVTI5MWNtTmxJR0Z6SUVoVVRVeFdhV1JsYjBWc1pXMWxiblFwTG5acFpHVnZWMmxrZEdncElIdGNiaUFnSUNBZ0lIZHBaSFJvSUQwZ0tHbHRZV2RsVTI5MWNtTmxJR0Z6SUVoVVRVeFdhV1JsYjBWc1pXMWxiblFwTG5acFpHVnZWMmxrZEdnN1hHNGdJQ0FnSUNCb1pXbG5hSFFnUFNBb2FXMWhaMlZUYjNWeVkyVWdZWE1nU0ZSTlRGWnBaR1Z2Uld4bGJXVnVkQ2t1ZG1sa1pXOUlaV2xuYUhRN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSGRwWkhSb0lEMGdhVzFoWjJWVGIzVnlZMlV1ZDJsa2RHZzdYRzRnSUNBZ0lDQm9aV2xuYUhRZ1BTQnBiV0ZuWlZOdmRYSmpaUzVvWldsbmFIUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdVlYVjBiMUpsYzJsNlpVTmhiblpoY3lBbUpseHVJQ0FnSUNBZ0lDQW9kMmxrZEdnZ0lUMDlJSFJvYVhNdWQyRnpiVTF2WkhWc1pTNWpZVzUyWVhNdWQybGtkR2dnZkh4Y2JpQWdJQ0FnSUNBZ0lHaGxhV2RvZENBaFBUMGdkR2hwY3k1M1lYTnRUVzlrZFd4bExtTmhiblpoY3k1b1pXbG5hSFFwS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbmRoYzIxTmIyUjFiR1V1WTJGdWRtRnpMbmRwWkhSb0lEMGdkMmxrZEdnN1hHNGdJQ0FnSUNCMGFHbHpMbmRoYzIxTmIyUjFiR1V1WTJGdWRtRnpMbWhsYVdkb2RDQTlJR2hsYVdkb2REdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnVzNkcFpIUm9MQ0JvWldsbmFIUmRPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZSaGEyVnpJSFJvWlNCeVlYY2daR0YwWVNCbWNtOXRJR0VnU2xNZ2FXMWhaMlVnYzI5MWNtTmxMQ0JoYm1RZ2MyVnVaSE1nYVhRZ2RHOGdReXNySUhSdklHSmxYRzRnSUNBcUlIQnliMk5sYzNObFpDd2dkMkZwZEdsdVp5QnplVzVqYUhKdmJtOTFjMng1SUdadmNpQjBhR1VnY21WemNHOXVjMlV1SUU1dmRHVWdkR2hoZENCM1pTQjNhV3hzSUhKbGMybDZaVnh1SUNBZ0tpQnZkWElnUjB3Z1kyRnVkbUZ6SUhSdklHWnBkQ0IwYUdVZ2FXNXdkWFFzSUhOdklHbHVjSFYwSUhOcGVtVWdjMmh2ZFd4a0lHOXViSGtnWTJoaGJtZGxYRzRnSUNBcUlHbHVabkpsY1hWbGJuUnNlUzVjYmlBZ0lDb2dRSEJoY21GdElHbHRZV2RsVTI5MWNtTmxJRUZ1SUdsdFlXZGxJSE52ZFhKalpTQjBieUJ3Y205alpYTnpMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2RHbHRaWE4wWVcxd0lGUm9aU0IwYVcxbGMzUmhiWEFnYjJZZ2RHaGxJR04xY25KbGJuUWdabkpoYldVc0lHbHVJRzF6TGx4dUlDQWdLaUJBY21WMGRYSnVJSFJsZUhSMWNtVS9JRlJvWlNCWFpXSkhUQ0IwWlhoMGRYSmxJSEpsWm1WeVpXNWpaU3dnYVdZZ2IyNWxJSGRoY3lCd2NtOWtkV05sWkM1Y2JpQWdJQ292WEc0Z0lIQnliMk5sYzNOSGJDaHBiV0ZuWlZOdmRYSmpaVG9nU1cxaFoyVlRiM1Z5WTJVc0lIUnBiV1Z6ZEdGdGNEb2diblZ0WW1WeUtUb2dWMlZpUjB4VVpYaDBkWEpsWEc0Z0lDQWdJQ0I4ZFc1a1pXWnBibVZrSUh0Y2JpQWdJQ0F2THlCQ2FXNWtJSFJ2SUdSbFptRjFiSFFnYVc1d2RYUWdjM1J5WldGdFhHNGdJQ0FnWTI5dWMzUWdXM2RwWkhSb0xDQm9aV2xuYUhSZElEMGdkR2hwY3k1aWFXNWtWR1Y0ZEhWeVpWUnZVM1J5WldGdEtHbHRZV2RsVTI5MWNtTmxLVHRjYmx4dUlDQWdJQzh2SURJZ2FXNTBjeUJoYm1RZ1lTQnNiQ0FvZEdsdFpYTjBZVzF3S1Z4dUlDQWdJR052Ym5OMElHWnlZVzFsUkdGMFlWQjBjaUE5SUhSb2FYTXVkMkZ6YlUxdlpIVnNaUzVmYldGc2JHOWpLREUyS1R0Y2JpQWdJQ0IwYUdsekxuZGhjMjFOYjJSMWJHVXVTRVZCVUZVek1sdG1jbUZ0WlVSaGRHRlFkSElnTHlBMFhTQTlJSGRwWkhSb08xeHVJQ0FnSUhSb2FYTXVkMkZ6YlUxdlpIVnNaUzVJUlVGUVZUTXlXeWhtY21GdFpVUmhkR0ZRZEhJZ0x5QTBLU0FySURGZElEMGdhR1ZwWjJoME8xeHVJQ0FnSUhSb2FYTXVkMkZ6YlUxdlpIVnNaUzVJUlVGUVJqWTBXeWhtY21GdFpVUmhkR0ZRZEhJZ0x5QTRLU0FySURGZElEMGdkR2x0WlhOMFlXMXdPMXh1SUNBZ0lDOHZJRzkxZEhCMWRGQjBjaUJ3YjJsdWRITWdhVzRnU0VWQlVFWXpNaTF6Y0dGalpTQjBieUJ5ZFc1dWFXNW5JRzF6Y0dZZ1kyRnNZM1ZzWVhScGIyNXpMQ0IzYUdsamFDQjNaVnh1SUNBZ0lDOHZJR1J2YmlkMElIVnpaU0JoZENCMGFHVWdiVzl0Wlc1MExseHVJQ0FnSUM4dklIUnpiR2x1ZERwa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlRwdWJ5MTFiblZ6WldRdGRtRnlhV0ZpYkdWY2JpQWdJQ0JqYjI1emRDQnZkWFJ3ZFhSUWRISWdQU0IwYUdsekxuZGhjMjFOYjJSMWJHVXVYM0J5YjJObGMzTkhiQ2htY21GdFpVUmhkR0ZRZEhJcElDOGdORHRjYmlBZ0lDQjBhR2x6TG5kaGMyMU5iMlIxYkdVdVgyWnlaV1VvWm5KaGJXVkVZWFJoVUhSeUtUdGNibHh1SUNBZ0lDOHZJRlJQUkU4NklFaHZiMnNnZFhBZ1YyVmlSMHhVWlhoMGRYSmxJRzkxZEhCMWRDd2dkMmhsYmlCbmFYWmxiaTVjYmlBZ0lDQXZMeUJVVDBSUE9pQkJiR3h2ZHlCMWMyVnlJSFJ2SUhSdloyZHNaU0IzYUdWMGFHVnlJRzl5SUc1dmRDQjBieUJ5Wlc1a1pYSWdiM1YwY0hWMElHbHVkRzhnWTJGdWRtRnpMbHh1SUNBZ0lISmxkSFZ5YmlCMWJtUmxabWx1WldRN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRMjl1ZG1WeWRITWdTbUYyWVZOamNtbHdkQ0J6ZEhKcGJtY2dhVzV3ZFhRZ2NHRnlZVzFsZEdWeWN5QnBiblJ2SUVNckt5QmpMWE4wY21sdVp5QndiMmx1ZEdWeWN5NWNiaUFnSUNvZ1UyVmxJR0l2TWpBME9ETXdNVFU0SUdadmNpQnRiM0psSUdSbGRHRnBiSE11SUVsdWRHVnVaR1ZrSUdadmNpQnBiblJsY201aGJDQjFjMkZuWlM1Y2JpQWdJQ292WEc0Z0lIZHlZWEJUZEhKcGJtZFFkSElvYzNSeWFXNW5SR0YwWVRvZ2MzUnlhVzVuTENCemRISnBibWRRZEhKR2RXNWpPaUFvY0hSeU9pQnVkVzFpWlhJcElEMCtJSFp2YVdRcE9seHVJQ0FnSUNBZ2RtOXBaQ0I3WEc0Z0lDQWdhV1lnS0NGMGFHbHpMbWhoYzAxMWJIUnBVM1J5WldGdFUzVndjRzl5ZENrZ2UxeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWhjYmlBZ0lDQWdJQ0FnSUNBblRtOGdkMkZ6YlNCdGRXeDBhWE4wY21WaGJTQnpkWEJ3YjNKMElHUmxkR1ZqZEdWa09pQmxibk4xY21VZ1pHVndaVzVrWlc1amVTQW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBbmFXNWpiSFZ6YVc5dUlHOW1JRHBuYkY5bmNtRndhRjl5ZFc1dVpYSmZhVzUwWlhKdVlXeGZiWFZzZEdsZmFXNXdkWFFnZEdGeVoyVjBKeWs3WEc0Z0lDQWdmVnh1SUNBZ0lHTnZibk4wSUhOMGNtbHVaMFJoZEdGUWRISWdQU0IwYUdsekxuZGhjMjFOYjJSMWJHVXVjM1J5YVc1blZHOU9aWGRWVkVZNEtITjBjbWx1WjBSaGRHRXBPMXh1SUNBZ0lITjBjbWx1WjFCMGNrWjFibU1vYzNSeWFXNW5SR0YwWVZCMGNpazdYRzRnSUNBZ2RHaHBjeTUzWVhOdFRXOWtkV3hsTGw5bWNtVmxLSE4wY21sdVowUmhkR0ZRZEhJcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRU52Ym5abGNuUnpJRXBoZG1GVFkzSnBjSFFnYzNSeWFXNW5JR2x1Y0hWMElIQmhjbUZ0WlhSbGNuTWdhVzUwYnlCREt5c2dZeTF6ZEhKcGJtY2djRzlwYm5SbGNuTXVYRzRnSUNBcUlGTmxaU0JpTHpJd05EZ3pNREUxT0NCbWIzSWdiVzl5WlNCa1pYUmhhV3h6TGx4dUlDQWdLaTljYmlBZ2QzSmhjRk4wY21sdVoxQjBjbEIwY2loemRISnBibWRFWVhSaE9pQnpkSEpwYm1kYlhTd2djSFJ5Um5WdVl6b2dLSEIwY2pvZ2JuVnRZbVZ5S1NBOVBpQjJiMmxrS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdhV1lnS0NGMGFHbHpMbWhoYzAxMWJIUnBVM1J5WldGdFUzVndjRzl5ZENrZ2UxeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWhjYmlBZ0lDQWdJQ0FnSUNBblRtOGdkMkZ6YlNCdGRXeDBhWE4wY21WaGJTQnpkWEJ3YjNKMElHUmxkR1ZqZEdWa09pQmxibk4xY21VZ1pHVndaVzVrWlc1amVTQW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBbmFXNWpiSFZ6YVc5dUlHOW1JRHBuYkY5bmNtRndhRjl5ZFc1dVpYSmZhVzUwWlhKdVlXeGZiWFZzZEdsZmFXNXdkWFFnZEdGeVoyVjBKeWs3WEc0Z0lDQWdmVnh1SUNBZ0lHTnZibk4wSUhWcGJuUXpNa0Z5Y21GNUlEMGdibVYzSUZWcGJuUXpNa0Z5Y21GNUtITjBjbWx1WjBSaGRHRXViR1Z1WjNSb0tUdGNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElITjBjbWx1WjBSaGRHRXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhWcGJuUXpNa0Z5Y21GNVcybGRJRDBnZEdocGN5NTNZWE50VFc5a2RXeGxMbk4wY21sdVoxUnZUbVYzVlZSR09DaHpkSEpwYm1kRVlYUmhXMmxkS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdZMjl1YzNRZ2FHVmhjRk53WVdObElEMGdkR2hwY3k1M1lYTnRUVzlrZFd4bExsOXRZV3hzYjJNb2RXbHVkRE15UVhKeVlYa3ViR1Z1WjNSb0lDb2dOQ2s3WEc0Z0lDQWdkR2hwY3k1M1lYTnRUVzlrZFd4bExraEZRVkJWTXpJdWMyVjBLSFZwYm5Rek1rRnljbUY1TENCb1pXRndVM0JoWTJVZ1BqNGdNaWs3WEc1Y2JpQWdJQ0J3ZEhKR2RXNWpLR2hsWVhCVGNHRmpaU2s3WEc0Z0lDQWdabTl5SUNoamIyNXpkQ0IxYVc1ME16SndkSElnYjJZZ2RXbHVkRE15UVhKeVlYa3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWQyRnpiVTF2WkhWc1pTNWZabkpsWlNoMWFXNTBNekp3ZEhJcE8xeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxuZGhjMjFOYjJSMWJHVXVYMlp5WldVb2FHVmhjRk53WVdObEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJGYm5OMWNtVnpJR1Y0YVhOMFpXNWpaU0J2WmlCMGFHVWdjMmx0Y0d4bElHeHBjM1JsYm1WeWN5QjBZV0pzWlNCaGJtUWdjbVZuYVhOMFpYSnpJSFJvWlNCallXeHNZbUZqYXk1Y2JpQWdJQ29nU1c1MFpXNWtaV1FnWm05eUlHbHVkR1Z5Ym1Gc0lIVnpZV2RsTGx4dUlDQWdLaTljYmlBZ2MyVjBUR2x6ZEdWdVpYSThWRDRvYjNWMGNIVjBVM1J5WldGdFRtRnRaVG9nYzNSeWFXNW5MQ0JqWVd4c1ltRmphMFpqYmpvZ0tHUmhkR0U2SUZRcElEMCtJSFp2YVdRcElIdGNiaUFnSUNCMGFHbHpMbmRoYzIxTmIyUjFiR1V1YzJsdGNHeGxUR2x6ZEdWdVpYSnpJRDBnZEdocGN5NTNZWE50VFc5a2RXeGxMbk5wYlhCc1pVeHBjM1JsYm1WeWN5QjhmQ0I3ZlR0Y2JpQWdJQ0IwYUdsekxuZGhjMjFOYjJSMWJHVXVjMmx0Y0d4bFRHbHpkR1Z1WlhKelcyOTFkSEIxZEZOMGNtVmhiVTVoYldWZElEMWNiaUFnSUNBZ0lDQWdZMkZzYkdKaFkydEdZMjRnWVhNZ0tHUmhkR0U2SUhWdWEyNXZkMjRwSUQwK0lIWnZhV1E3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1JXNXpkWEpsY3lCbGVHbHpkR1Z1WTJVZ2IyWWdkR2hsSUhabFkzUnZjaUJzYVhOMFpXNWxjbk1nZEdGaWJHVWdZVzVrSUhKbFoybHpkR1Z5Y3lCMGFHVWdZMkZzYkdKaFkyc3VYRzRnSUNBcUlFbHVkR1Z1WkdWa0lHWnZjaUJwYm5SbGNtNWhiQ0IxYzJGblpTNWNiaUFnSUNvdlhHNGdJSE5sZEZabFkzUnZja3hwYzNSbGJtVnlQRlErS0Z4dUlDQWdJQ0FnYjNWMGNIVjBVM1J5WldGdFRtRnRaVG9nYzNSeWFXNW5MQ0JqWVd4c1ltRmphMFpqYmpvZ0tHUmhkR0U2SUZSYlhTa2dQVDRnZG05cFpDa2dlMXh1SUNBZ0lHTnZibk4wSUdKMVptWmxjam9nVkZ0ZElEMGdXMTA3WEc0Z0lDQWdkR2hwY3k1M1lYTnRUVzlrZFd4bExuWmxZM1J2Y2t4cGMzUmxibVZ5Y3lBOUlIUm9hWE11ZDJGemJVMXZaSFZzWlM1MlpXTjBiM0pNYVhOMFpXNWxjbk1nZkh3Z2UzMDdYRzRnSUNBZ2RHaHBjeTUzWVhOdFRXOWtkV3hsTG5abFkzUnZja3hwYzNSbGJtVnljMXR2ZFhSd2RYUlRkSEpsWVcxT1lXMWxYU0E5WEc0Z0lDQWdJQ0FnSUNoa1lYUmhPaUIxYm10dWIzZHVMQ0JwYm1SbGVEb2diblZ0WW1WeUxDQnNaVzVuZEdnNklHNTFiV0psY2lrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUM4dklGUm9aU0JYWVhOdElHeHBjM1JsYm1WeUlHZGxkSE1nYVc1MmIydGxaQ0J2Ym1ObElHWnZjaUJsWVdOb0lHVnNaVzFsYm5RdUlFOXVZMlVnZDJWY2JpQWdJQ0FnSUNBZ0lDQXZMeUJ5WldObGFYWmxJR0ZzYkNCbGJHVnRaVzUwY3l3Z2QyVWdhVzUyYjJ0bElIUm9aU0J5WldkcGMzUmxjbVZrSUdOaGJHeGlZV05ySUhkcGRHZ2dkR2hsWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdablZzYkNCaGNuSmhlUzVjYmlBZ0lDQWdJQ0FnSUNCaWRXWm1aWEpiYVc1a1pYaGRJRDBnWkdGMFlTQmhjeUJVTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hwYm1SbGVDQTlQVDBnYkdWdVozUm9JQzBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXNTJiMnRsSUhSb1pTQjFjMlZ5SUdOaGJHeGlZV05ySUdScGNtVmpkR3g1TENCaGN5QjBhR1VnVjJGemJTQnNZWGxsY2lCdFlYa2dZMnhsWVc0Z2RYQmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklIUm9aU0IxYm1SbGNteDVhVzVuSUdSaGRHRWdaV3hsYldWdWRITWdiMjVqWlNCM1pTQnNaV0YyWlNCMGFHVWdjMk52Y0dVZ2IyWWdkR2hsWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJzYVhOMFpXNWxjaTVjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhiR3hpWVdOclJtTnVLR0oxWm1abGNpazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUYwZEdGamFHVnpJR0VnYkdsemRHVnVaWElnZEdoaGRDQjNhV3hzSUdKbElHbHVkbTlyWldRZ2QyaGxiaUIwYUdVZ1RXVmthV0ZRYVhCbElHWnlZVzFsZDI5eWExeHVJQ0FnS2lCeVpYUjFjbTV6SUdGdUlHVnljbTl5TGx4dUlDQWdLaTljYmlBZ1lYUjBZV05vUlhKeWIzSk1hWE4wWlc1bGNpaGpZV3hzWW1GamEwWmpiam9nS0dOdlpHVTZJRzUxYldKbGNpd2diV1Z6YzJGblpUb2djM1J5YVc1bktTQTlQaUIyYjJsa0tTQjdYRzRnSUNBZ2RHaHBjeTUzWVhOdFRXOWtkV3hsTG1WeWNtOXlUR2x6ZEdWdVpYSWdQU0JqWVd4c1ltRmphMFpqYmp0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlVZV3RsY3lCMGFHVWdjbUYzSUdSaGRHRWdabkp2YlNCaElFcFRJR0YxWkdsdklHTmhjSFIxY21VZ1lYSnlZWGtzSUdGdVpDQnpaVzVrY3lCcGRDQjBieUJES3lzZ2RHOGdZbVZjYmlBZ0lDb2djSEp2WTJWemMyVmtMbHh1SUNBZ0tpQkFjR0Z5WVcwZ1lYVmthVzlFWVhSaElFRnVJR0Z5Y21GNUlHOW1JSEpoZHlCaGRXUnBieUJqWVhCMGRYSmxJR1JoZEdFc0lHeHBhMlZjYmlBZ0lDb2dJQ0FnSUdaeWIyMGdZU0JqWVd4c0lIUnZJR2RsZEVOb1lXNXVaV3hFWVhSaElHOXVJR0Z1SUVGMVpHbHZRblZtWm1WeUxseHVJQ0FnS2lCQWNHRnlZVzBnZEdsdFpYTjBZVzF3SUZSb1pTQjBhVzFsYzNSaGJYQWdiMllnZEdobElHTjFjbkpsYm5RZ1puSmhiV1VzSUdsdUlHMXpMbHh1SUNBZ0tpOWNiaUFnWVdSa1FYVmthVzlVYjFOMGNtVmhiU2hoZFdScGIwUmhkR0U2SUVac2IyRjBNekpCY25KaGVTd2dkR2x0WlhOMFlXMXdPaUJ1ZFcxaVpYSXBJSHRjYmlBZ0lDQXZMeUEwSUdKNWRHVnpJR1p2Y2lCbFlXTm9JRVl6TWx4dUlDQWdJR052Ym5OMElITnBlbVVnUFNCaGRXUnBiMFJoZEdFdWJHVnVaM1JvSUNvZ05EdGNiaUFnSUNCcFppQW9kR2hwY3k1aGRXUnBiMU5wZW1VZ0lUMDlJSE5wZW1VcElIdGNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxtRjFaR2x2VUhSeUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWQyRnpiVTF2WkhWc1pTNWZabkpsWlNoMGFHbHpMbUYxWkdsdlVIUnlLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSFJvYVhNdVlYVmthVzlRZEhJZ1BTQjBhR2x6TG5kaGMyMU5iMlIxYkdVdVgyMWhiR3h2WXloemFYcGxLVHRjYmlBZ0lDQWdJSFJvYVhNdVlYVmthVzlUYVhwbElEMGdjMmw2WlR0Y2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1M1lYTnRUVzlrZFd4bExraEZRVkJHTXpJdWMyVjBLR0YxWkdsdlJHRjBZU3dnZEdocGN5NWhkV1JwYjFCMGNpRWdMeUEwS1R0Y2JpQWdJQ0IwYUdsekxuZGhjMjFOYjJSMWJHVXVYM0J5YjJObGMzTkJkV1JwYnloMGFHbHpMbUYxWkdsdlVIUnlJU3dnZEdsdFpYTjBZVzF3S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlVZV3RsY3lCMGFHVWdjbVZzWlhaaGJuUWdhVzVtYjNKdFlYUnBiMjRnWm5KdmJTQjBhR1VnU0ZSTlRDQjJhV1JsYnlCdmNpQnBiV0ZuWlNCbGJHVnRaVzUwTENCaGJtUmNiaUFnSUNvZ2NHRnpjMlZ6SUdsMElHbHVkRzhnZEdobElGZGxZa2RNTFdKaGMyVmtJR2R5WVhCb0lHWnZjaUJ3Y205alpYTnphVzVuSUc5dUlIUm9aU0JuYVhabGJpQnpkSEpsWVcwZ1lYUmNiaUFnSUNvZ2RHaGxJR2RwZG1WdUlIUnBiV1Z6ZEdGdGNDNGdRMkZ1SUdKbElIVnpaV1FnWm05eUlHRmtaR2wwYVc5dVlXd2dZWFY0YVd4cFlYSjVJRWR3ZFVKMVptWmxjaUJwYm5CMWRGeHVJQ0FnS2lCemRISmxZVzF6TGlCUWNtOWpaWE56YVc1bklIZHBiR3dnYm05MElHOWpZM1Z5SUhWdWRHbHNJR0VnWW14dlkydHBibWNnWTJGc2JDQW9iR2xyWlZ4dUlDQWdLaUJ3Y205alpYTnpWbWxrWlc5SGJDQnZjaUJtYVc1cGMyaFFjbTlqWlhOemFXNW5LU0JwY3lCdFlXUmxMaUJHYjNJZ2RYTmxJSGRwZEdoY2JpQWdJQ29nSjJkc1gyZHlZWEJvWDNKMWJtNWxjbDlwYm5SbGNtNWhiRjl0ZFd4MGFWOXBibkIxZENjdVhHNGdJQ0FxSUVCd1lYSmhiU0JwYldGblpWTnZkWEpqWlNCU1pXWmxjbVZ1WTJVZ2RHOGdkR2hsSUhacFpHVnZJR1p5WVcxbElIZGxJSGRwYzJnZ2RHOGdZV1JrSUdsdWRHOGdiM1Z5WEc0Z0lDQXFJQ0FnSUNCbmNtRndhQzVjYmlBZ0lDb2dRSEJoY21GdElITjBjbVZoYlU1aGJXVWdWR2hsSUc1aGJXVWdiMllnZEdobElFMWxaR2xoVUdsd1pTQm5jbUZ3YUNCemRISmxZVzBnZEc4Z1lXUmtJSFJvWlNCbWNtRnRaVnh1SUNBZ0tpQWdJQ0FnZEc4dVhHNGdJQ0FxSUVCd1lYSmhiU0IwYVcxbGMzUmhiWEFnVkdobElIUnBiV1Z6ZEdGdGNDQnZaaUIwYUdVZ2FXNXdkWFFnWm5KaGJXVXNJR2x1SUcxekxseHVJQ0FnS2k5Y2JpQWdZV1JrUjNCMVFuVm1abVZ5Vkc5VGRISmxZVzBvWEc0Z0lDQWdJQ0JwYldGblpWTnZkWEpqWlRvZ1NXMWhaMlZUYjNWeVkyVXNJSE4wY21WaGJVNWhiV1U2SUhOMGNtbHVaeXdnZEdsdFpYTjBZVzF3T2lCdWRXMWlaWElwT2lCMmIybGtJSHRjYmlBZ0lDQjBhR2x6TG5keVlYQlRkSEpwYm1kUWRISW9jM1J5WldGdFRtRnRaU3dnS0hOMGNtVmhiVTVoYldWUWRISTZJRzUxYldKbGNpa2dQVDRnZTF4dUlDQWdJQ0FnWTI5dWMzUWdXM2RwWkhSb0xDQm9aV2xuYUhSZElEMWNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtSnBibVJVWlhoMGRYSmxWRzlUZEhKbFlXMG9hVzFoWjJWVGIzVnlZMlVzSUhOMGNtVmhiVTVoYldWUWRISXBPMXh1SUNBZ0lDQWdkR2hwY3k1M1lYTnRUVzlrZFd4bExsOWhaR1JDYjNWdVpGUmxlSFIxY21WVWIxTjBjbVZoYlNoY2JpQWdJQ0FnSUNBZ0lDQnpkSEpsWVcxT1lXMWxVSFJ5TENCM2FXUjBhQ3dnYUdWcFoyaDBMQ0IwYVcxbGMzUmhiWEFwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGTmxibVJ6SUdFZ1ltOXZiR1ZoYmlCd1lXTnJaWFFnYVc1MGJ5QjBhR1VnYzNCbFkybG1hV1ZrSUhOMGNtVmhiU0JoZENCMGFHVWdaMmwyWlc0Z2RHbHRaWE4wWVcxd0xseHVJQ0FnS2lCQWNHRnlZVzBnWkdGMFlTQlVhR1VnWW05dmJHVmhiaUJrWVhSaElIUnZJSE5sYm1RdVhHNGdJQ0FxSUVCd1lYSmhiU0J6ZEhKbFlXMU9ZVzFsSUZSb1pTQnVZVzFsSUc5bUlIUm9aU0JuY21Gd2FDQnBibkIxZENCemRISmxZVzBnZEc4Z2MyVnVaQ0JrWVhSaElHbHVkRzh1WEc0Z0lDQXFJRUJ3WVhKaGJTQjBhVzFsYzNSaGJYQWdWR2hsSUhScGJXVnpkR0Z0Y0NCdlppQjBhR1VnYVc1d2RYUWdaR0YwWVN3Z2FXNGdiWE11WEc0Z0lDQXFMMXh1SUNCaFpHUkNiMjlzVkc5VGRISmxZVzBvWkdGMFlUb2dZbTl2YkdWaGJpd2djM1J5WldGdFRtRnRaVG9nYzNSeWFXNW5MQ0IwYVcxbGMzUmhiWEE2SUc1MWJXSmxjaWs2SUhadmFXUWdlMXh1SUNBZ0lIUm9hWE11ZDNKaGNGTjBjbWx1WjFCMGNpaHpkSEpsWVcxT1lXMWxMQ0FvYzNSeVpXRnRUbUZ0WlZCMGNqb2diblZ0WW1WeUtTQTlQaUI3WEc0Z0lDQWdJQ0IwYUdsekxuZGhjMjFOYjJSMWJHVXVYMkZrWkVKdmIyeFViMGx1Y0hWMFUzUnlaV0Z0S0dSaGRHRXNJSE4wY21WaGJVNWhiV1ZRZEhJc0lIUnBiV1Z6ZEdGdGNDazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVTJWdVpITWdZU0JrYjNWaWJHVWdjR0ZqYTJWMElHbHVkRzhnZEdobElITndaV05wWm1sbFpDQnpkSEpsWVcwZ1lYUWdkR2hsSUdkcGRtVnVJSFJwYldWemRHRnRjQzVjYmlBZ0lDb2dRSEJoY21GdElHUmhkR0VnVkdobElHUnZkV0pzWlNCa1lYUmhJSFJ2SUhObGJtUXVYRzRnSUNBcUlFQndZWEpoYlNCemRISmxZVzFPWVcxbElGUm9aU0J1WVcxbElHOW1JSFJvWlNCbmNtRndhQ0JwYm5CMWRDQnpkSEpsWVcwZ2RHOGdjMlZ1WkNCa1lYUmhJR2x1ZEc4dVhHNGdJQ0FxSUVCd1lYSmhiU0IwYVcxbGMzUmhiWEFnVkdobElIUnBiV1Z6ZEdGdGNDQnZaaUIwYUdVZ2FXNXdkWFFnWkdGMFlTd2dhVzRnYlhNdVhHNGdJQ0FxTDF4dUlDQmhaR1JFYjNWaWJHVlViMU4wY21WaGJTaGtZWFJoT2lCdWRXMWlaWElzSUhOMGNtVmhiVTVoYldVNklITjBjbWx1Wnl3Z2RHbHRaWE4wWVcxd09pQnVkVzFpWlhJcE9pQjJiMmxrSUh0Y2JpQWdJQ0IwYUdsekxuZHlZWEJUZEhKcGJtZFFkSElvYzNSeVpXRnRUbUZ0WlN3Z0tITjBjbVZoYlU1aGJXVlFkSEk2SUc1MWJXSmxjaWtnUFQ0Z2UxeHVJQ0FnSUNBZ2RHaHBjeTUzWVhOdFRXOWtkV3hsTGw5aFpHUkViM1ZpYkdWVWIwbHVjSFYwVTNSeVpXRnRLR1JoZEdFc0lITjBjbVZoYlU1aGJXVlFkSElzSUhScGJXVnpkR0Z0Y0NrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVMlZ1WkhNZ1lTQm1iRzloZENCd1lXTnJaWFFnYVc1MGJ5QjBhR1VnYzNCbFkybG1hV1ZrSUhOMGNtVmhiU0JoZENCMGFHVWdaMmwyWlc0Z2RHbHRaWE4wWVcxd0xseHVJQ0FnS2lCQWNHRnlZVzBnWkdGMFlTQlVhR1VnWm14dllYUWdaR0YwWVNCMGJ5QnpaVzVrTGx4dUlDQWdLaUJBY0dGeVlXMGdjM1J5WldGdFRtRnRaU0JVYUdVZ2JtRnRaU0J2WmlCMGFHVWdaM0poY0dnZ2FXNXdkWFFnYzNSeVpXRnRJSFJ2SUhObGJtUWdaR0YwWVNCcGJuUnZMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2RHbHRaWE4wWVcxd0lGUm9aU0IwYVcxbGMzUmhiWEFnYjJZZ2RHaGxJR2x1Y0hWMElHUmhkR0VzSUdsdUlHMXpMbHh1SUNBZ0tpOWNiaUFnWVdSa1JteHZZWFJVYjFOMGNtVmhiU2hrWVhSaE9pQnVkVzFpWlhJc0lITjBjbVZoYlU1aGJXVTZJSE4wY21sdVp5d2dkR2x0WlhOMFlXMXdPaUJ1ZFcxaVpYSXBPaUIyYjJsa0lIdGNiaUFnSUNCMGFHbHpMbmR5WVhCVGRISnBibWRRZEhJb2MzUnlaV0Z0VG1GdFpTd2dLSE4wY21WaGJVNWhiV1ZRZEhJNklHNTFiV0psY2lrZ1BUNGdlMXh1SUNBZ0lDQWdMeThnVGs5VVJUb2dYMkZrWkVac2IyRjBWRzlUZEhKbFlXMGdZVzVrSUY5aFpHUkpiblJVYjFOMGNtVmhiU0JoY21VZ2NtVnpaWEoyWldRZ1ptOXlJRXBUWEc0Z0lDQWdJQ0F2THlCRFlXeGpkV3hoZEc5eWN5QmpkWEp5Wlc1MGJIazdJSGRsSUcxaGVTQjNZVzUwSUhSdklISmxkbWx6YVhRZ2RHaHBjeUJ1WVcxcGJtY2djMk5vWlcxbElHbHVJSFJvWlZ4dUlDQWdJQ0FnTHk4Z1puVjBkWEpsTGx4dUlDQWdJQ0FnZEdocGN5NTNZWE50VFc5a2RXeGxMbDloWkdSR2JHOWhkRlJ2U1c1d2RYUlRkSEpsWVcwb1pHRjBZU3dnYzNSeVpXRnRUbUZ0WlZCMGNpd2dkR2x0WlhOMFlXMXdLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVFpXNWtjeUJoYmlCcGJuUmxaMlZ5SUhCaFkydGxkQ0JwYm5SdklIUm9aU0J6Y0dWamFXWnBaV1FnYzNSeVpXRnRJR0YwSUhSb1pTQm5hWFpsYmlCMGFXMWxjM1JoYlhBdVhHNGdJQ0FxSUVCd1lYSmhiU0JrWVhSaElGUm9aU0JwYm5SbFoyVnlJR1JoZEdFZ2RHOGdjMlZ1WkM1Y2JpQWdJQ29nUUhCaGNtRnRJSE4wY21WaGJVNWhiV1VnVkdobElHNWhiV1VnYjJZZ2RHaGxJR2R5WVhCb0lHbHVjSFYwSUhOMGNtVmhiU0IwYnlCelpXNWtJR1JoZEdFZ2FXNTBieTVjYmlBZ0lDb2dRSEJoY21GdElIUnBiV1Z6ZEdGdGNDQlVhR1VnZEdsdFpYTjBZVzF3SUc5bUlIUm9aU0JwYm5CMWRDQmtZWFJoTENCcGJpQnRjeTVjYmlBZ0lDb3ZYRzRnSUdGa1pFbHVkRlJ2VTNSeVpXRnRLR1JoZEdFNklHNTFiV0psY2l3Z2MzUnlaV0Z0VG1GdFpUb2djM1J5YVc1bkxDQjBhVzFsYzNSaGJYQTZJRzUxYldKbGNpazZJSFp2YVdRZ2UxeHVJQ0FnSUhSb2FYTXVkM0poY0ZOMGNtbHVaMUIwY2loemRISmxZVzFPWVcxbExDQW9jM1J5WldGdFRtRnRaVkIwY2pvZ2JuVnRZbVZ5S1NBOVBpQjdYRzRnSUNBZ0lDQjBhR2x6TG5kaGMyMU5iMlIxYkdVdVgyRmtaRWx1ZEZSdlNXNXdkWFJUZEhKbFlXMG9aR0YwWVN3Z2MzUnlaV0Z0VG1GdFpWQjBjaXdnZEdsdFpYTjBZVzF3S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRaVzVrY3lCaElITjBjbWx1WnlCd1lXTnJaWFFnYVc1MGJ5QjBhR1VnYzNCbFkybG1hV1ZrSUhOMGNtVmhiU0JoZENCMGFHVWdaMmwyWlc0Z2RHbHRaWE4wWVcxd0xseHVJQ0FnS2lCQWNHRnlZVzBnWkdGMFlTQlVhR1VnYzNSeWFXNW5JR1JoZEdFZ2RHOGdjMlZ1WkM1Y2JpQWdJQ29nUUhCaGNtRnRJSE4wY21WaGJVNWhiV1VnVkdobElHNWhiV1VnYjJZZ2RHaGxJR2R5WVhCb0lHbHVjSFYwSUhOMGNtVmhiU0IwYnlCelpXNWtJR1JoZEdFZ2FXNTBieTVjYmlBZ0lDb2dRSEJoY21GdElIUnBiV1Z6ZEdGdGNDQlVhR1VnZEdsdFpYTjBZVzF3SUc5bUlIUm9aU0JwYm5CMWRDQmtZWFJoTENCcGJpQnRjeTVjYmlBZ0lDb3ZYRzRnSUdGa1pGTjBjbWx1WjFSdlUzUnlaV0Z0S0dSaGRHRTZJSE4wY21sdVp5d2djM1J5WldGdFRtRnRaVG9nYzNSeWFXNW5MQ0IwYVcxbGMzUmhiWEE2SUc1MWJXSmxjaWs2SUhadmFXUWdlMXh1SUNBZ0lIUm9hWE11ZDNKaGNGTjBjbWx1WjFCMGNpaHpkSEpsWVcxT1lXMWxMQ0FvYzNSeVpXRnRUbUZ0WlZCMGNqb2diblZ0WW1WeUtTQTlQaUI3WEc0Z0lDQWdJQ0IwYUdsekxuZHlZWEJUZEhKcGJtZFFkSElvWkdGMFlTd2dLR1JoZEdGUWRISTZJRzUxYldKbGNpa2dQVDRnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbmRoYzIxTmIyUjFiR1V1WDJGa1pGTjBjbWx1WjFSdlNXNXdkWFJUZEhKbFlXMG9YRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhVSFJ5TENCemRISmxZVzFPWVcxbFVIUnlMQ0IwYVcxbGMzUmhiWEFwTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVMlZ1WkhNZ1lTQlNaV052Y21ROGMzUnlhVzVuTENCemRISnBibWMrSUhCaFkydGxkQ0JwYm5SdklIUm9aU0J6Y0dWamFXWnBaV1FnYzNSeVpXRnRJR0YwSUhSb1pWeHVJQ0FnS2lCbmFYWmxiaUIwYVcxbGMzUmhiWEF1WEc0Z0lDQXFJRUJ3WVhKaGJTQmtZWFJoSUZSb1pTQnlaV052Y21SeklIUnZJSE5sYm1RZ0tIZHBiR3dnWW1WamIyMWxJR0ZjYmlBZ0lDb2dJQ0FnSUNBZ0lDQWdJQ0FnYzNSa09qcG1iR0YwWDJoaGMyaGZiV0Z3UEhOMFpEbzZjM1J5YVc1bkxDQnpkR1E2T25OMGNtbHVaeWt1WEc0Z0lDQXFJRUJ3WVhKaGJTQnpkSEpsWVcxT1lXMWxJRlJvWlNCdVlXMWxJRzltSUhSb1pTQm5jbUZ3YUNCcGJuQjFkQ0J6ZEhKbFlXMGdkRzhnYzJWdVpDQmtZWFJoSUdsdWRHOHVYRzRnSUNBcUlFQndZWEpoYlNCMGFXMWxjM1JoYlhBZ1ZHaGxJSFJwYldWemRHRnRjQ0J2WmlCMGFHVWdhVzV3ZFhRZ1pHRjBZU3dnYVc0Z2JYTXVYRzRnSUNBcUwxeHVJQ0JoWkdSVGRISnBibWRTWldOdmNtUlViMU4wY21WaGJTaGNiaUFnSUNBZ0lHUmhkR0U2SUZKbFkyOXlaRHh6ZEhKcGJtY3NJSE4wY21sdVp6NHNJSE4wY21WaGJVNWhiV1U2SUhOMGNtbHVaeXhjYmlBZ0lDQWdJSFJwYldWemRHRnRjRG9nYm5WdFltVnlLVG9nZG05cFpDQjdYRzRnSUNBZ2RHaHBjeTUzY21Gd1UzUnlhVzVuVUhSeUtITjBjbVZoYlU1aGJXVXNJQ2h6ZEhKbFlXMU9ZVzFsVUhSeU9pQnVkVzFpWlhJcElEMCtJSHRjYmlBZ0lDQWdJSFJvYVhNdWQzSmhjRk4wY21sdVoxQjBjbEIwY2loUFltcGxZM1F1YTJWNWN5aGtZWFJoS1N3Z0tHdGxlVXhwYzNRNklHNTFiV0psY2lrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuZHlZWEJUZEhKcGJtZFFkSEpRZEhJb1QySnFaV04wTG5aaGJIVmxjeWhrWVhSaEtTd2dLSFpoYkhWbFRHbHpkRG9nYm5WdFltVnlLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1M1lYTnRUVzlrZFd4bExsOWhaR1JHYkdGMFNHRnphRTFoY0ZSdlNXNXdkWFJUZEhKbFlXMG9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHdGxlVXhwYzNRc0lIWmhiSFZsVEdsemRDd2dUMkpxWldOMExtdGxlWE1vWkdGMFlTa3ViR1Z1WjNSb0xDQnpkSEpsWVcxT1lXMWxVSFJ5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwYVcxbGMzUmhiWEFwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZObGJtUnpJR0VnYzJWeWFXRnNhWHBsWkNCd2NtOTBiMkoxWm1abGNpQndZV05yWlhRZ2FXNTBieUIwYUdVZ2MzQmxZMmxtYVdWa0lITjBjbVZoYlNCaGRDQjBhR1ZjYmlBZ0lDb2dJQ0FnSUdkcGRtVnVJSFJwYldWemRHRnRjQ3dnZEc4Z1ltVWdjR0Z5YzJWa0lHbHVkRzhnZEdobElITndaV05wWm1sbFpDQndjbTkwYjJKMVptWmxjaUIwZVhCbExseHVJQ0FnS2lCQWNHRnlZVzBnWkdGMFlTQlVhR1VnWW1sdVlYSjVJQ2h6WlhKcFlXeHBlbVZrS1NCeVlYY2djSEp2ZEc5aWRXWm1aWElnWkdGMFlTNWNiaUFnSUNvZ1FIQmhjbUZ0SUhCeWIzUnZWSGx3WlNCVWFHVWdReXNySUc1aGJXVnpjR0ZqWldRZ2RIbHdaU0IwYUdseklIQnliM1J2WW5WbVptVnlJR1JoZEdFZ1kyOXljbVZ6Y0c5dVpITmNiaUFnSUNvZ0lDQWdJSFJ2TGlCSmRDQjNhV3hzSUdKbElHTnZiblpsY25SbFpDQjBieUIwYUdseklIUjVjR1VnZDJobGJpQnZkWFJ3ZFhRZ1lYTWdZU0J3WVdOclpYUWdhVzUwYnlCMGFHVmNiaUFnSUNvZ0lDQWdJR2R5WVhCb0xseHVJQ0FnS2lCQWNHRnlZVzBnYzNSeVpXRnRUbUZ0WlNCVWFHVWdibUZ0WlNCdlppQjBhR1VnWjNKaGNHZ2dhVzV3ZFhRZ2MzUnlaV0Z0SUhSdklITmxibVFnWkdGMFlTQnBiblJ2TGx4dUlDQWdLaUJBY0dGeVlXMGdkR2x0WlhOMFlXMXdJRlJvWlNCMGFXMWxjM1JoYlhBZ2IyWWdkR2hsSUdsdWNIVjBJR1JoZEdFc0lHbHVJRzF6TGx4dUlDQWdLaTljYmlBZ1lXUmtVSEp2ZEc5VWIxTjBjbVZoYlNoY2JpQWdJQ0FnSUdSaGRHRTZJRlZwYm5RNFFYSnlZWGtzSUhCeWIzUnZWSGx3WlRvZ2MzUnlhVzVuTENCemRISmxZVzFPWVcxbE9pQnpkSEpwYm1jc1hHNGdJQ0FnSUNCMGFXMWxjM1JoYlhBNklHNTFiV0psY2lrNklIWnZhV1FnZTF4dUlDQWdJSFJvYVhNdWQzSmhjRk4wY21sdVoxQjBjaWh6ZEhKbFlXMU9ZVzFsTENBb2MzUnlaV0Z0VG1GdFpWQjBjam9nYm5WdFltVnlLU0E5UGlCN1hHNGdJQ0FnSUNCMGFHbHpMbmR5WVhCVGRISnBibWRRZEhJb2NISnZkRzlVZVhCbExDQW9jSEp2ZEc5VWVYQmxVSFJ5T2lCdWRXMWlaWElwSUQwK0lIdGNiaUFnSUNBZ0lDQWdMeThnUkdWbGNDMWpiM0I1SUhCeWIzUnZJR1JoZEdFZ2FXNTBieUJYWVhOdElHaGxZWEJjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaR0YwWVZCMGNpQTlJSFJvYVhNdWQyRnpiVTF2WkhWc1pTNWZiV0ZzYkc5aktHUmhkR0V1YkdWdVozUm9LVHRjYmlBZ0lDQWdJQ0FnTHk4Z1ZFOUVUem9nUlc1emRYSmxJSFJvYVhNZ2FYTWdkR2hsSUdaaGMzUmxjM1FnZDJGNUlIUnZJR052Y0hrZ2RHaHBjeUJrWVhSaExseHVJQ0FnSUNBZ0lDQjBhR2x6TG5kaGMyMU5iMlIxYkdVdVNFVkJVRlU0TG5ObGRDaGtZWFJoTENCa1lYUmhVSFJ5S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUzWVhOdFRXOWtkV3hsTGw5aFpHUlFjbTkwYjFSdlNXNXdkWFJUZEhKbFlXMG9YRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhVSFJ5TENCa1lYUmhMbXhsYm1kMGFDd2djSEp2ZEc5VWVYQmxVSFJ5TENCemRISmxZVzFPWVcxbFVIUnlMQ0IwYVcxbGMzUmhiWEFwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbmRoYzIxTmIyUjFiR1V1WDJaeVpXVW9aR0YwWVZCMGNpazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCQmRIUmhZMmhsY3lCaElHSnZiMnhsWVc0Z2NHRmphMlYwSUhSdklIUm9aU0J6Y0dWamFXWnBaV1FnYVc1d2RYUmZjMmxrWlY5d1lXTnJaWFF1WEc0Z0lDQXFJRUJ3WVhKaGJTQmtZWFJoSUZSb1pTQmliMjlzWldGdUlHUmhkR0VnZEc4Z2MyVnVaQzVjYmlBZ0lDb2dRSEJoY21GdElITnBaR1ZRWVdOclpYUk9ZVzFsSUZSb1pTQnVZVzFsSUc5bUlIUm9aU0JuY21Gd2FDQnBibkIxZENCemFXUmxJSEJoWTJ0bGRDQjBieUJ6Wlc1a0lHUmhkR0ZjYmlBZ0lDb2dJQ0FnSUdsdWRHOHVYRzRnSUNBcUwxeHVJQ0JoWkdSQ2IyOXNWRzlKYm5CMWRGTnBaR1ZRWVdOclpYUW9aR0YwWVRvZ1ltOXZiR1ZoYml3Z2MybGtaVkJoWTJ0bGRFNWhiV1U2SUhOMGNtbHVaeWs2SUhadmFXUWdlMXh1SUNBZ0lIUm9hWE11ZDNKaGNGTjBjbWx1WjFCMGNpaHphV1JsVUdGamEyVjBUbUZ0WlN3Z0tITnBaR1ZRWVdOclpYUk9ZVzFsVUhSeU9pQnVkVzFpWlhJcElEMCtJSHRjYmlBZ0lDQWdJSFJvYVhNdWQyRnpiVTF2WkhWc1pTNWZZV1JrUW05dmJGUnZTVzV3ZFhSVGFXUmxVR0ZqYTJWMEtHUmhkR0VzSUhOcFpHVlFZV05yWlhST1lXMWxVSFJ5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJkSFJoWTJobGN5QmhJR1J2ZFdKc1pTQndZV05yWlhRZ2RHOGdkR2hsSUhOd1pXTnBabWxsWkNCcGJuQjFkRjl6YVdSbFgzQmhZMnRsZEM1Y2JpQWdJQ29nUUhCaGNtRnRJR1JoZEdFZ1ZHaGxJR1J2ZFdKc1pTQmtZWFJoSUhSdklITmxibVF1WEc0Z0lDQXFJRUJ3WVhKaGJTQnphV1JsVUdGamEyVjBUbUZ0WlNCVWFHVWdibUZ0WlNCdlppQjBhR1VnWjNKaGNHZ2dhVzV3ZFhRZ2MybGtaU0J3WVdOclpYUWdkRzhnYzJWdVpDQmtZWFJoWEc0Z0lDQXFJQ0FnSUNCcGJuUnZMbHh1SUNBZ0tpOWNiaUFnWVdSa1JHOTFZbXhsVkc5SmJuQjFkRk5wWkdWUVlXTnJaWFFvWkdGMFlUb2diblZ0WW1WeUxDQnphV1JsVUdGamEyVjBUbUZ0WlRvZ2MzUnlhVzVuS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdkR2hwY3k1M2NtRndVM1J5YVc1blVIUnlLSE5wWkdWUVlXTnJaWFJPWVcxbExDQW9jMmxrWlZCaFkydGxkRTVoYldWUWRISTZJRzUxYldKbGNpa2dQVDRnZTF4dUlDQWdJQ0FnZEdocGN5NTNZWE50VFc5a2RXeGxMbDloWkdSRWIzVmliR1ZVYjBsdWNIVjBVMmxrWlZCaFkydGxkQ2hrWVhSaExDQnphV1JsVUdGamEyVjBUbUZ0WlZCMGNpazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUVhSMFlXTm9aWE1nWVNCbWJHOWhkQ0J3WVdOclpYUWdkRzhnZEdobElITndaV05wWm1sbFpDQnBibkIxZEY5emFXUmxYM0JoWTJ0bGRDNWNiaUFnSUNvZ1FIQmhjbUZ0SUdSaGRHRWdWR2hsSUdac2IyRjBJR1JoZEdFZ2RHOGdjMlZ1WkM1Y2JpQWdJQ29nUUhCaGNtRnRJSE5wWkdWUVlXTnJaWFJPWVcxbElGUm9aU0J1WVcxbElHOW1JSFJvWlNCbmNtRndhQ0JwYm5CMWRDQnphV1JsSUhCaFkydGxkQ0IwYnlCelpXNWtJR1JoZEdGY2JpQWdJQ29nSUNBZ0lHbHVkRzh1WEc0Z0lDQXFMMXh1SUNCaFpHUkdiRzloZEZSdlNXNXdkWFJUYVdSbFVHRmphMlYwS0dSaGRHRTZJRzUxYldKbGNpd2djMmxrWlZCaFkydGxkRTVoYldVNklITjBjbWx1WnlrNklIWnZhV1FnZTF4dUlDQWdJSFJvYVhNdWQzSmhjRk4wY21sdVoxQjBjaWh6YVdSbFVHRmphMlYwVG1GdFpTd2dLSE5wWkdWUVlXTnJaWFJPWVcxbFVIUnlPaUJ1ZFcxaVpYSXBJRDArSUh0Y2JpQWdJQ0FnSUhSb2FYTXVkMkZ6YlUxdlpIVnNaUzVmWVdSa1JteHZZWFJVYjBsdWNIVjBVMmxrWlZCaFkydGxkQ2hrWVhSaExDQnphV1JsVUdGamEyVjBUbUZ0WlZCMGNpazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUVhSMFlXTm9aWE1nWVNCcGJuUmxaMlZ5SUhCaFkydGxkQ0IwYnlCMGFHVWdjM0JsWTJsbWFXVmtJR2x1Y0hWMFgzTnBaR1ZmY0dGamEyVjBMbHh1SUNBZ0tpQkFjR0Z5WVcwZ1pHRjBZU0JVYUdVZ2FXNTBaV2RsY2lCa1lYUmhJSFJ2SUhObGJtUXVYRzRnSUNBcUlFQndZWEpoYlNCemFXUmxVR0ZqYTJWMFRtRnRaU0JVYUdVZ2JtRnRaU0J2WmlCMGFHVWdaM0poY0dnZ2FXNXdkWFFnYzJsa1pTQndZV05yWlhRZ2RHOGdjMlZ1WkNCa1lYUmhYRzRnSUNBcUlDQWdJQ0JwYm5SdkxseHVJQ0FnS2k5Y2JpQWdZV1JrU1c1MFZHOUpibkIxZEZOcFpHVlFZV05yWlhRb1pHRjBZVG9nYm5WdFltVnlMQ0J6YVdSbFVHRmphMlYwVG1GdFpUb2djM1J5YVc1bktUb2dkbTlwWkNCN1hHNGdJQ0FnZEdocGN5NTNjbUZ3VTNSeWFXNW5VSFJ5S0hOcFpHVlFZV05yWlhST1lXMWxMQ0FvYzJsa1pWQmhZMnRsZEU1aGJXVlFkSEk2SUc1MWJXSmxjaWtnUFQ0Z2UxeHVJQ0FnSUNBZ2RHaHBjeTUzWVhOdFRXOWtkV3hsTGw5aFpHUkpiblJVYjBsdWNIVjBVMmxrWlZCaFkydGxkQ2hrWVhSaExDQnphV1JsVUdGamEyVjBUbUZ0WlZCMGNpazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUVhSMFlXTm9aWE1nWVNCemRISnBibWNnY0dGamEyVjBJSFJ2SUhSb1pTQnpjR1ZqYVdacFpXUWdhVzV3ZFhSZmMybGtaVjl3WVdOclpYUXVYRzRnSUNBcUlFQndZWEpoYlNCa1lYUmhJRlJvWlNCemRISnBibWNnWkdGMFlTQjBieUJ6Wlc1a0xseHVJQ0FnS2lCQWNHRnlZVzBnYzJsa1pWQmhZMnRsZEU1aGJXVWdWR2hsSUc1aGJXVWdiMllnZEdobElHZHlZWEJvSUdsdWNIVjBJSE5wWkdVZ2NHRmphMlYwSUhSdklITmxibVFnWkdGMFlWeHVJQ0FnS2lBZ0lDQWdhVzUwYnk1Y2JpQWdJQ292WEc0Z0lHRmtaRk4wY21sdVoxUnZTVzV3ZFhSVGFXUmxVR0ZqYTJWMEtHUmhkR0U2SUhOMGNtbHVaeXdnYzJsa1pWQmhZMnRsZEU1aGJXVTZJSE4wY21sdVp5azZJSFp2YVdRZ2UxeHVJQ0FnSUhSb2FYTXVkM0poY0ZOMGNtbHVaMUIwY2loemFXUmxVR0ZqYTJWMFRtRnRaU3dnS0hOcFpHVlFZV05yWlhST1lXMWxVSFJ5T2lCdWRXMWlaWElwSUQwK0lIdGNiaUFnSUNBZ0lIUm9hWE11ZDNKaGNGTjBjbWx1WjFCMGNpaGtZWFJoTENBb1pHRjBZVkIwY2pvZ2JuVnRZbVZ5S1NBOVBpQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWQyRnpiVTF2WkhWc1pTNWZZV1JrVTNSeWFXNW5WRzlKYm5CMWRGTnBaR1ZRWVdOclpYUW9aR0YwWVZCMGNpd2djMmxrWlZCaFkydGxkRTVoYldWUWRISXBPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FYUjBZV05vWlhNZ1lTQnpaWEpwWVd4cGVtVmtJSEJ5YjNSdklIQmhZMnRsZENCMGJ5QjBhR1VnYzNCbFkybG1hV1ZrSUdsdWNIVjBYM05wWkdWZmNHRmphMlYwTGx4dUlDQWdLaUJBY0dGeVlXMGdaR0YwWVNCVWFHVWdZbWx1WVhKNUlDaHpaWEpwWVd4cGVtVmtLU0J5WVhjZ2NISnZkRzlpZFdabVpYSWdaR0YwWVM1Y2JpQWdJQ29nUUhCaGNtRnRJSEJ5YjNSdlZIbHdaU0JVYUdVZ1F5c3JJRzVoYldWemNHRmpaV1FnZEhsd1pTQjBhR2x6SUhCeWIzUnZZblZtWm1WeUlHUmhkR0VnWTI5eWNtVnpjRzl1WkhOY2JpQWdJQ29nSUNBZ0lIUnZMaUJKZENCM2FXeHNJR0psSUdOdmJuWmxjblJsWkNCMGJ5QjBhR2x6SUhSNWNHVWdabTl5SUhWelpTQnBiaUIwYUdVZ1ozSmhjR2d1WEc0Z0lDQXFJRUJ3WVhKaGJTQnphV1JsVUdGamEyVjBUbUZ0WlNCVWFHVWdibUZ0WlNCdlppQjBhR1VnWjNKaGNHZ2dhVzV3ZFhRZ2MybGtaU0J3WVdOclpYUWdkRzhnYzJWdVpDQmtZWFJoWEc0Z0lDQXFJQ0FnSUNCcGJuUnZMbHh1SUNBZ0tpOWNiaUFnWVdSa1VISnZkRzlVYjBsdWNIVjBVMmxrWlZCaFkydGxkQ2hjYmlBZ0lDQWdJR1JoZEdFNklGVnBiblE0UVhKeVlYa3NJSEJ5YjNSdlZIbHdaVG9nYzNSeWFXNW5MQ0J6YVdSbFVHRmphMlYwVG1GdFpUb2djM1J5YVc1bktUb2dkbTlwWkNCN1hHNGdJQ0FnZEdocGN5NTNjbUZ3VTNSeWFXNW5VSFJ5S0hOcFpHVlFZV05yWlhST1lXMWxMQ0FvYzJsa1pWQmhZMnRsZEU1aGJXVlFkSEk2SUc1MWJXSmxjaWtnUFQ0Z2UxeHVJQ0FnSUNBZ2RHaHBjeTUzY21Gd1UzUnlhVzVuVUhSeUtIQnliM1J2Vkhsd1pTd2dLSEJ5YjNSdlZIbHdaVkIwY2pvZ2JuVnRZbVZ5S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQzh2SUVSbFpYQXRZMjl3ZVNCd2NtOTBieUJrWVhSaElHbHVkRzhnVjJGemJTQm9aV0Z3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1JoZEdGUWRISWdQU0IwYUdsekxuZGhjMjFOYjJSMWJHVXVYMjFoYkd4dll5aGtZWFJoTG14bGJtZDBhQ2s3WEc0Z0lDQWdJQ0FnSUM4dklGUlBSRTg2SUVWdWMzVnlaU0IwYUdseklHbHpJSFJvWlNCbVlYTjBaWE4wSUhkaGVTQjBieUJqYjNCNUlIUm9hWE1nWkdGMFlTNWNiaUFnSUNBZ0lDQWdkR2hwY3k1M1lYTnRUVzlrZFd4bExraEZRVkJWT0M1elpYUW9aR0YwWVN3Z1pHRjBZVkIwY2lrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZDJGemJVMXZaSFZzWlM1ZllXUmtVSEp2ZEc5VWIwbHVjSFYwVTJsa1pWQmhZMnRsZENoY2JpQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGUWRISXNJR1JoZEdFdWJHVnVaM1JvTENCd2NtOTBiMVI1Y0dWUWRISXNJSE5wWkdWUVlXTnJaWFJPWVcxbFVIUnlLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTNZWE50VFc5a2RXeGxMbDltY21WbEtHUmhkR0ZRZEhJcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUVhSMFlXTm9aWE1nWVNCaWIyOXNaV0Z1SUhCaFkydGxkQ0JzYVhOMFpXNWxjaUIwYnlCMGFHVWdjM0JsWTJsbWFXVmtJRzkxZEhCMWRGOXpkSEpsWVcwdVhHNGdJQ0FxSUVCd1lYSmhiU0J2ZFhSd2RYUlRkSEpsWVcxT1lXMWxJRlJvWlNCdVlXMWxJRzltSUhSb1pTQm5jbUZ3YUNCdmRYUndkWFFnYzNSeVpXRnRJSFJ2SUdkeVlXSWdZbTl2YkdWaGJseHVJQ0FnS2lBZ0lDQWdaR0YwWVNCbWNtOXRMbHh1SUNBZ0tpQkFjR0Z5WVcwZ1kyRnNiR0poWTJ0R1kyNGdWR2hsSUdaMWJtTjBhVzl1SUhSb1lYUWdkMmxzYkNCaVpTQmpZV3hzWldRZ1ltRmpheUIzYVhSb0lIUm9aU0JrWVhSaExDQmhjMXh1SUNBZ0tpQWdJQ0FnYVhRZ2FYTWdjbVZqWldsMlpXUXVJQ0JPYjNSbElIUm9ZWFFnZEdobElHUmhkR0VnYVhNZ2IyNXNlU0JuZFdGeVlXNTBaV1ZrSUhSdklHVjRhWE4wSUdadmNpQjBhR1ZjYmlBZ0lDb2dJQ0FnSUdSMWNtRjBhVzl1SUc5bUlIUm9aU0JqWVd4c1ltRmpheXdnWVc1a0lIUm9aU0JqWVd4c1ltRmpheUIzYVd4c0lHSmxJR05oYkd4bFpDQnBibXhwYm1Vc0lITnZJR2wwWEc0Z0lDQXFJQ0FnSUNCemFHOTFiR1FnYm05MElIQmxjbVp2Y20wZ2IzWmxjbXg1SUdOdmJYQnNhV05oZEdWa0lDaHZjaUJoYm5rZ1lYTjVibU1wSUdKbGFHRjJhVzl5TGx4dUlDQWdLaTljYmlBZ1lYUjBZV05vUW05dmJFeHBjM1JsYm1WeUtGeHVJQ0FnSUNBZ2IzVjBjSFYwVTNSeVpXRnRUbUZ0WlRvZ2MzUnlhVzVuTENCallXeHNZbUZqYTBaamJqb2dLR1JoZEdFNklHSnZiMnhsWVc0cElEMCtJSFp2YVdRcE9pQjJiMmxrSUh0Y2JpQWdJQ0F2THlCVFpYUWdkWEFnYjNWeUlGUlRJR3hwYzNSbGJtVnlJSFJ2SUhKbFkyVnBkbVVnWVc1NUlIQmhZMnRsZEhNZ1ptOXlJSFJvYVhNZ2MzUnlaV0Z0TGx4dUlDQWdJSFJvYVhNdWMyVjBUR2x6ZEdWdVpYSW9iM1YwY0hWMFUzUnlaV0Z0VG1GdFpTd2dZMkZzYkdKaFkydEdZMjRwTzF4dVhHNGdJQ0FnTHk4Z1ZHVnNiQ0J2ZFhJZ1ozSmhjR2dnZEc4Z2JHbHpkR1Z1SUdadmNpQmliMjlzSUhCaFkydGxkSE1nYjI0Z2RHaHBjeUJ6ZEhKbFlXMHVYRzRnSUNBZ2RHaHBjeTUzY21Gd1UzUnlhVzVuVUhSeUtHOTFkSEIxZEZOMGNtVmhiVTVoYldVc0lDaHZkWFJ3ZFhSVGRISmxZVzFPWVcxbFVIUnlPaUJ1ZFcxaVpYSXBJRDArSUh0Y2JpQWdJQ0FnSUhSb2FYTXVkMkZ6YlUxdlpIVnNaUzVmWVhSMFlXTm9RbTl2YkV4cGMzUmxibVZ5S0c5MWRIQjFkRk4wY21WaGJVNWhiV1ZRZEhJcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUYwZEdGamFHVnpJR0VnWW05dmJGdGRJSEJoWTJ0bGRDQnNhWE4wWlc1bGNpQjBieUIwYUdVZ2MzQmxZMmxtYVdWa0lHOTFkSEIxZEY5emRISmxZVzB1WEc0Z0lDQXFJRUJ3WVhKaGJTQnZkWFJ3ZFhSVGRISmxZVzFPWVcxbElGUm9aU0J1WVcxbElHOW1JSFJvWlNCbmNtRndhQ0J2ZFhSd2RYUWdjM1J5WldGdElIUnZJR2R5WVdKY2JpQWdJQ29nSUNBZ0lITjBaRG82ZG1WamRHOXlQR0p2YjJ3K0lHUmhkR0VnWm5KdmJTNWNiaUFnSUNvZ1FIQmhjbUZ0SUdOaGJHeGlZV05yUm1OdUlGUm9aU0JtZFc1amRHbHZiaUIwYUdGMElIZHBiR3dnWW1VZ1kyRnNiR1ZrSUdKaFkyc2dkMmwwYUNCMGFHVWdaR0YwWVN3Z1lYTmNiaUFnSUNvZ0lDQWdJR2wwSUdseklISmxZMlZwZG1Wa0xpQWdUbTkwWlNCMGFHRjBJSFJvWlNCa1lYUmhJR2x6SUc5dWJIa2daM1ZoY21GdWRHVmxaQ0IwYnlCbGVHbHpkQ0JtYjNJZ2RHaGxYRzRnSUNBcUlDQWdJQ0JrZFhKaGRHbHZiaUJ2WmlCMGFHVWdZMkZzYkdKaFkyc3NJR0Z1WkNCMGFHVWdZMkZzYkdKaFkyc2dkMmxzYkNCaVpTQmpZV3hzWldRZ2FXNXNhVzVsTENCemJ5QnBkRnh1SUNBZ0tpQWdJQ0FnYzJodmRXeGtJRzV2ZENCd1pYSm1iM0p0SUc5MlpYSnNlU0JqYjIxd2JHbGpZWFJsWkNBb2IzSWdZVzU1SUdGemVXNWpLU0JpWldoaGRtbHZjaTVjYmlBZ0lDb3ZYRzRnSUdGMGRHRmphRUp2YjJ4V1pXTjBiM0pNYVhOMFpXNWxjaWhjYmlBZ0lDQWdJRzkxZEhCMWRGTjBjbVZoYlU1aGJXVTZJSE4wY21sdVp5d2dZMkZzYkdKaFkydEdZMjQ2SUNoa1lYUmhPaUJpYjI5c1pXRnVXMTBwSUQwK0lIWnZhV1FwT2lCMmIybGtJSHRjYmlBZ0lDQXZMeUJUWlhRZ2RYQWdiM1Z5SUZSVElHeHBjM1JsYm1WeUlIUnZJSEpsWTJWcGRtVWdZVzU1SUhCaFkydGxkSE1nWm05eUlIUm9hWE1nYzNSeVpXRnRMbHh1SUNBZ0lIUm9hWE11YzJWMFZtVmpkRzl5VEdsemRHVnVaWElvYjNWMGNIVjBVM1J5WldGdFRtRnRaU3dnWTJGc2JHSmhZMnRHWTI0cE8xeHVYRzRnSUNBZ0x5OGdWR1ZzYkNCdmRYSWdaM0poY0dnZ2RHOGdiR2x6ZEdWdUlHWnZjaUJ6ZEdRNk9uWmxZM1J2Y2p4aWIyOXNQaUJ3WVdOclpYUnpJRzl1SUhSb2FYTWdjM1J5WldGdExseHVJQ0FnSUhSb2FYTXVkM0poY0ZOMGNtbHVaMUIwY2lodmRYUndkWFJUZEhKbFlXMU9ZVzFsTENBb2IzVjBjSFYwVTNSeVpXRnRUbUZ0WlZCMGNqb2diblZ0WW1WeUtTQTlQaUI3WEc0Z0lDQWdJQ0IwYUdsekxuZGhjMjFOYjJSMWJHVXVYMkYwZEdGamFFSnZiMnhXWldOMGIzSk1hWE4wWlc1bGNpaHZkWFJ3ZFhSVGRISmxZVzFPWVcxbFVIUnlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCQmRIUmhZMmhsY3lCaGJpQnBiblFnY0dGamEyVjBJR3hwYzNSbGJtVnlJSFJ2SUhSb1pTQnpjR1ZqYVdacFpXUWdiM1YwY0hWMFgzTjBjbVZoYlM1Y2JpQWdJQ29nUUhCaGNtRnRJRzkxZEhCMWRGTjBjbVZoYlU1aGJXVWdWR2hsSUc1aGJXVWdiMllnZEdobElHZHlZWEJvSUc5MWRIQjFkQ0J6ZEhKbFlXMGdkRzhnWjNKaFlpQnBiblJjYmlBZ0lDb2dJQ0FnSUdSaGRHRWdabkp2YlM1Y2JpQWdJQ29nUUhCaGNtRnRJR05oYkd4aVlXTnJSbU51SUZSb1pTQm1kVzVqZEdsdmJpQjBhR0YwSUhkcGJHd2dZbVVnWTJGc2JHVmtJR0poWTJzZ2QybDBhQ0IwYUdVZ1pHRjBZU3dnWVhOY2JpQWdJQ29nSUNBZ0lHbDBJR2x6SUhKbFkyVnBkbVZrTGlBZ1RtOTBaU0IwYUdGMElIUm9aU0JrWVhSaElHbHpJRzl1YkhrZ1ozVmhjbUZ1ZEdWbFpDQjBieUJsZUdsemRDQm1iM0lnZEdobFhHNGdJQ0FxSUNBZ0lDQmtkWEpoZEdsdmJpQnZaaUIwYUdVZ1kyRnNiR0poWTJzc0lHRnVaQ0IwYUdVZ1kyRnNiR0poWTJzZ2QybHNiQ0JpWlNCallXeHNaV1FnYVc1c2FXNWxMQ0J6YnlCcGRGeHVJQ0FnS2lBZ0lDQWdjMmh2ZFd4a0lHNXZkQ0J3WlhKbWIzSnRJRzkyWlhKc2VTQmpiMjF3YkdsallYUmxaQ0FvYjNJZ1lXNTVJR0Z6ZVc1aktTQmlaV2hoZG1sdmNpNWNiaUFnSUNvdlhHNGdJR0YwZEdGamFFbHVkRXhwYzNSbGJtVnlLRnh1SUNBZ0lDQWdiM1YwY0hWMFUzUnlaV0Z0VG1GdFpUb2djM1J5YVc1bkxDQmpZV3hzWW1GamEwWmpiam9nS0dSaGRHRTZJRzUxYldKbGNpa2dQVDRnZG05cFpDazZJSFp2YVdRZ2UxeHVJQ0FnSUM4dklGTmxkQ0IxY0NCdmRYSWdWRk1nYkdsemRHVnVaWElnZEc4Z2NtVmpaV2wyWlNCaGJua2djR0ZqYTJWMGN5Qm1iM0lnZEdocGN5QnpkSEpsWVcwdVhHNGdJQ0FnZEdocGN5NXpaWFJNYVhOMFpXNWxjaWh2ZFhSd2RYUlRkSEpsWVcxT1lXMWxMQ0JqWVd4c1ltRmphMFpqYmlrN1hHNWNiaUFnSUNBdkx5QlVaV3hzSUc5MWNpQm5jbUZ3YUNCMGJ5QnNhWE4wWlc0Z1ptOXlJR2x1ZENCd1lXTnJaWFJ6SUc5dUlIUm9hWE1nYzNSeVpXRnRMbHh1SUNBZ0lIUm9hWE11ZDNKaGNGTjBjbWx1WjFCMGNpaHZkWFJ3ZFhSVGRISmxZVzFPWVcxbExDQW9iM1YwY0hWMFUzUnlaV0Z0VG1GdFpWQjBjam9nYm5WdFltVnlLU0E5UGlCN1hHNGdJQ0FnSUNCMGFHbHpMbmRoYzIxTmIyUjFiR1V1WDJGMGRHRmphRWx1ZEV4cGMzUmxibVZ5S0c5MWRIQjFkRk4wY21WaGJVNWhiV1ZRZEhJcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUYwZEdGamFHVnpJR0Z1SUdsdWRGdGRJSEJoWTJ0bGRDQnNhWE4wWlc1bGNpQjBieUIwYUdVZ2MzQmxZMmxtYVdWa0lHOTFkSEIxZEY5emRISmxZVzB1WEc0Z0lDQXFJRUJ3WVhKaGJTQnZkWFJ3ZFhSVGRISmxZVzFPWVcxbElGUm9aU0J1WVcxbElHOW1JSFJvWlNCbmNtRndhQ0J2ZFhSd2RYUWdjM1J5WldGdElIUnZJR2R5WVdKY2JpQWdJQ29nSUNBZ0lITjBaRG82ZG1WamRHOXlQR2x1ZEQ0Z1pHRjBZU0JtY205dExseHVJQ0FnS2lCQWNHRnlZVzBnWTJGc2JHSmhZMnRHWTI0Z1ZHaGxJR1oxYm1OMGFXOXVJSFJvWVhRZ2QybHNiQ0JpWlNCallXeHNaV1FnWW1GamF5QjNhWFJvSUhSb1pTQmtZWFJoTENCaGMxeHVJQ0FnS2lBZ0lDQWdhWFFnYVhNZ2NtVmpaV2wyWldRdUlDQk9iM1JsSUhSb1lYUWdkR2hsSUdSaGRHRWdhWE1nYjI1c2VTQm5kV0Z5WVc1MFpXVmtJSFJ2SUdWNGFYTjBJR1p2Y2lCMGFHVmNiaUFnSUNvZ0lDQWdJR1IxY21GMGFXOXVJRzltSUhSb1pTQmpZV3hzWW1GamF5d2dZVzVrSUhSb1pTQmpZV3hzWW1GamF5QjNhV3hzSUdKbElHTmhiR3hsWkNCcGJteHBibVVzSUhOdklHbDBYRzRnSUNBcUlDQWdJQ0J6YUc5MWJHUWdibTkwSUhCbGNtWnZjbTBnYjNabGNteDVJR052YlhCc2FXTmhkR1ZrSUNodmNpQmhibmtnWVhONWJtTXBJR0psYUdGMmFXOXlMbHh1SUNBZ0tpOWNiaUFnWVhSMFlXTm9TVzUwVm1WamRHOXlUR2x6ZEdWdVpYSW9YRzRnSUNBZ0lDQnZkWFJ3ZFhSVGRISmxZVzFPWVcxbE9pQnpkSEpwYm1jc0lHTmhiR3hpWVdOclJtTnVPaUFvWkdGMFlUb2diblZ0WW1WeVcxMHBJRDArSUhadmFXUXBPaUIyYjJsa0lIdGNiaUFnSUNBdkx5QlRaWFFnZFhBZ2IzVnlJRlJUSUd4cGMzUmxibVZ5SUhSdklISmxZMlZwZG1VZ1lXNTVJSEJoWTJ0bGRITWdabTl5SUhSb2FYTWdjM1J5WldGdExseHVJQ0FnSUhSb2FYTXVjMlYwVm1WamRHOXlUR2x6ZEdWdVpYSW9iM1YwY0hWMFUzUnlaV0Z0VG1GdFpTd2dZMkZzYkdKaFkydEdZMjRwTzF4dVhHNGdJQ0FnTHk4Z1ZHVnNiQ0J2ZFhJZ1ozSmhjR2dnZEc4Z2JHbHpkR1Z1SUdadmNpQnpkR1E2T25abFkzUnZjanhwYm5RK0lIQmhZMnRsZEhNZ2IyNGdkR2hwY3lCemRISmxZVzB1WEc0Z0lDQWdkR2hwY3k1M2NtRndVM1J5YVc1blVIUnlLRzkxZEhCMWRGTjBjbVZoYlU1aGJXVXNJQ2h2ZFhSd2RYUlRkSEpsWVcxT1lXMWxVSFJ5T2lCdWRXMWlaWElwSUQwK0lIdGNiaUFnSUNBZ0lIUm9hWE11ZDJGemJVMXZaSFZzWlM1ZllYUjBZV05vU1c1MFZtVmpkRzl5VEdsemRHVnVaWElvYjNWMGNIVjBVM1J5WldGdFRtRnRaVkIwY2lrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRWFIwWVdOb1pYTWdZU0JrYjNWaWJHVWdjR0ZqYTJWMElHeHBjM1JsYm1WeUlIUnZJSFJvWlNCemNHVmphV1pwWldRZ2IzVjBjSFYwWDNOMGNtVmhiUzVjYmlBZ0lDb2dRSEJoY21GdElHOTFkSEIxZEZOMGNtVmhiVTVoYldVZ1ZHaGxJRzVoYldVZ2IyWWdkR2hsSUdkeVlYQm9JRzkxZEhCMWRDQnpkSEpsWVcwZ2RHOGdaM0poWWlCa2IzVmliR1ZjYmlBZ0lDb2dJQ0FnSUdSaGRHRWdabkp2YlM1Y2JpQWdJQ29nUUhCaGNtRnRJR05oYkd4aVlXTnJSbU51SUZSb1pTQm1kVzVqZEdsdmJpQjBhR0YwSUhkcGJHd2dZbVVnWTJGc2JHVmtJR0poWTJzZ2QybDBhQ0IwYUdVZ1pHRjBZU3dnWVhOY2JpQWdJQ29nSUNBZ0lHbDBJR2x6SUhKbFkyVnBkbVZrTGlBZ1RtOTBaU0IwYUdGMElIUm9aU0JrWVhSaElHbHpJRzl1YkhrZ1ozVmhjbUZ1ZEdWbFpDQjBieUJsZUdsemRDQm1iM0lnZEdobFhHNGdJQ0FxSUNBZ0lDQmtkWEpoZEdsdmJpQnZaaUIwYUdVZ1kyRnNiR0poWTJzc0lHRnVaQ0IwYUdVZ1kyRnNiR0poWTJzZ2QybHNiQ0JpWlNCallXeHNaV1FnYVc1c2FXNWxMQ0J6YnlCcGRGeHVJQ0FnS2lBZ0lDQWdjMmh2ZFd4a0lHNXZkQ0J3WlhKbWIzSnRJRzkyWlhKc2VTQmpiMjF3YkdsallYUmxaQ0FvYjNJZ1lXNTVJR0Z6ZVc1aktTQmlaV2hoZG1sdmNpNWNiaUFnSUNvdlhHNGdJR0YwZEdGamFFUnZkV0pzWlV4cGMzUmxibVZ5S0Z4dUlDQWdJQ0FnYjNWMGNIVjBVM1J5WldGdFRtRnRaVG9nYzNSeWFXNW5MQ0JqWVd4c1ltRmphMFpqYmpvZ0tHUmhkR0U2SUc1MWJXSmxjaWtnUFQ0Z2RtOXBaQ2s2SUhadmFXUWdlMXh1SUNBZ0lDOHZJRk5sZENCMWNDQnZkWElnVkZNZ2JHbHpkR1Z1WlhJZ2RHOGdjbVZqWldsMlpTQmhibmtnY0dGamEyVjBjeUJtYjNJZ2RHaHBjeUJ6ZEhKbFlXMHVYRzRnSUNBZ2RHaHBjeTV6WlhSTWFYTjBaVzVsY2lodmRYUndkWFJUZEhKbFlXMU9ZVzFsTENCallXeHNZbUZqYTBaamJpazdYRzVjYmlBZ0lDQXZMeUJVWld4c0lHOTFjaUJuY21Gd2FDQjBieUJzYVhOMFpXNGdabTl5SUdSdmRXSnNaU0J3WVdOclpYUnpJRzl1SUhSb2FYTWdjM1J5WldGdExseHVJQ0FnSUhSb2FYTXVkM0poY0ZOMGNtbHVaMUIwY2lodmRYUndkWFJUZEhKbFlXMU9ZVzFsTENBb2IzVjBjSFYwVTNSeVpXRnRUbUZ0WlZCMGNqb2diblZ0WW1WeUtTQTlQaUI3WEc0Z0lDQWdJQ0IwYUdsekxuZGhjMjFOYjJSMWJHVXVYMkYwZEdGamFFUnZkV0pzWlV4cGMzUmxibVZ5S0c5MWRIQjFkRk4wY21WaGJVNWhiV1ZRZEhJcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUYwZEdGamFHVnpJR0VnWkc5MVlteGxXMTBnY0dGamEyVjBJR3hwYzNSbGJtVnlJSFJ2SUhSb1pTQnpjR1ZqYVdacFpXUWdiM1YwY0hWMFgzTjBjbVZoYlM1Y2JpQWdJQ29nUUhCaGNtRnRJRzkxZEhCMWRGTjBjbVZoYlU1aGJXVWdWR2hsSUc1aGJXVWdiMllnZEdobElHZHlZWEJvSUc5MWRIQjFkQ0J6ZEhKbFlXMGdkRzhnWjNKaFlseHVJQ0FnS2lBZ0lDQWdjM1JrT2pwMlpXTjBiM0k4Wkc5MVlteGxQaUJrWVhSaElHWnliMjB1WEc0Z0lDQXFJRUJ3WVhKaGJTQmpZV3hzWW1GamEwWmpiaUJVYUdVZ1puVnVZM1JwYjI0Z2RHaGhkQ0IzYVd4c0lHSmxJR05oYkd4bFpDQmlZV05ySUhkcGRHZ2dkR2hsSUdSaGRHRXNJR0Z6WEc0Z0lDQXFJQ0FnSUNCcGRDQnBjeUJ5WldObGFYWmxaQzRnSUU1dmRHVWdkR2hoZENCMGFHVWdaR0YwWVNCcGN5QnZibXg1SUdkMVlYSmhiblJsWldRZ2RHOGdaWGhwYzNRZ1ptOXlJSFJvWlZ4dUlDQWdLaUFnSUNBZ1pIVnlZWFJwYjI0Z2IyWWdkR2hsSUdOaGJHeGlZV05yTENCaGJtUWdkR2hsSUdOaGJHeGlZV05ySUhkcGJHd2dZbVVnWTJGc2JHVmtJR2x1YkdsdVpTd2djMjhnYVhSY2JpQWdJQ29nSUNBZ0lITm9iM1ZzWkNCdWIzUWdjR1Z5Wm05eWJTQnZkbVZ5YkhrZ1kyOXRjR3hwWTJGMFpXUWdLRzl5SUdGdWVTQmhjM2x1WXlrZ1ltVm9ZWFpwYjNJdVhHNGdJQ0FxTDF4dUlDQmhkSFJoWTJoRWIzVmliR1ZXWldOMGIzSk1hWE4wWlc1bGNpaGNiaUFnSUNBZ0lHOTFkSEIxZEZOMGNtVmhiVTVoYldVNklITjBjbWx1Wnl3Z1kyRnNiR0poWTJ0R1kyNDZJQ2hrWVhSaE9pQnVkVzFpWlhKYlhTa2dQVDRnZG05cFpDazZJSFp2YVdRZ2UxeHVJQ0FnSUM4dklGTmxkQ0IxY0NCdmRYSWdWRk1nYkdsemRHVnVaWElnZEc4Z2NtVmpaV2wyWlNCaGJua2djR0ZqYTJWMGN5Qm1iM0lnZEdocGN5QnpkSEpsWVcwdVhHNGdJQ0FnZEdocGN5NXpaWFJXWldOMGIzSk1hWE4wWlc1bGNpaHZkWFJ3ZFhSVGRISmxZVzFPWVcxbExDQmpZV3hzWW1GamEwWmpiaWs3WEc1Y2JpQWdJQ0F2THlCVVpXeHNJRzkxY2lCbmNtRndhQ0IwYnlCc2FYTjBaVzRnWm05eUlITjBaRG82ZG1WamRHOXlQR1J2ZFdKc1pUNGdjR0ZqYTJWMGN5QnZiaUIwYUdseklITjBjbVZoYlM1Y2JpQWdJQ0IwYUdsekxuZHlZWEJUZEhKcGJtZFFkSElvYjNWMGNIVjBVM1J5WldGdFRtRnRaU3dnS0c5MWRIQjFkRk4wY21WaGJVNWhiV1ZRZEhJNklHNTFiV0psY2lrZ1BUNGdlMXh1SUNBZ0lDQWdkR2hwY3k1M1lYTnRUVzlrZFd4bExsOWhkSFJoWTJoRWIzVmliR1ZXWldOMGIzSk1hWE4wWlc1bGNpaHZkWFJ3ZFhSVGRISmxZVzFPWVcxbFVIUnlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCQmRIUmhZMmhsY3lCaElHWnNiMkYwSUhCaFkydGxkQ0JzYVhOMFpXNWxjaUIwYnlCMGFHVWdjM0JsWTJsbWFXVmtJRzkxZEhCMWRGOXpkSEpsWVcwdVhHNGdJQ0FxSUVCd1lYSmhiU0J2ZFhSd2RYUlRkSEpsWVcxT1lXMWxJRlJvWlNCdVlXMWxJRzltSUhSb1pTQm5jbUZ3YUNCdmRYUndkWFFnYzNSeVpXRnRJSFJ2SUdkeVlXSWdabXh2WVhSY2JpQWdJQ29nSUNBZ0lHUmhkR0VnWm5KdmJTNWNiaUFnSUNvZ1FIQmhjbUZ0SUdOaGJHeGlZV05yUm1OdUlGUm9aU0JtZFc1amRHbHZiaUIwYUdGMElIZHBiR3dnWW1VZ1kyRnNiR1ZrSUdKaFkyc2dkMmwwYUNCMGFHVWdaR0YwWVN3Z1lYTmNiaUFnSUNvZ0lDQWdJR2wwSUdseklISmxZMlZwZG1Wa0xpQWdUbTkwWlNCMGFHRjBJSFJvWlNCa1lYUmhJR2x6SUc5dWJIa2daM1ZoY21GdWRHVmxaQ0IwYnlCbGVHbHpkQ0JtYjNJZ2RHaGxYRzRnSUNBcUlDQWdJQ0JrZFhKaGRHbHZiaUJ2WmlCMGFHVWdZMkZzYkdKaFkyc3NJR0Z1WkNCMGFHVWdZMkZzYkdKaFkyc2dkMmxzYkNCaVpTQmpZV3hzWldRZ2FXNXNhVzVsTENCemJ5QnBkRnh1SUNBZ0tpQWdJQ0FnYzJodmRXeGtJRzV2ZENCd1pYSm1iM0p0SUc5MlpYSnNlU0JqYjIxd2JHbGpZWFJsWkNBb2IzSWdZVzU1SUdGemVXNWpLU0JpWldoaGRtbHZjaTVjYmlBZ0lDb3ZYRzRnSUdGMGRHRmphRVpzYjJGMFRHbHpkR1Z1WlhJb1hHNGdJQ0FnSUNCdmRYUndkWFJUZEhKbFlXMU9ZVzFsT2lCemRISnBibWNzSUdOaGJHeGlZV05yUm1OdU9pQW9aR0YwWVRvZ2JuVnRZbVZ5S1NBOVBpQjJiMmxrS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdMeThnVTJWMElIVndJRzkxY2lCVVV5QnNhWE4wWlc1bGNpQjBieUJ5WldObGFYWmxJR0Z1ZVNCd1lXTnJaWFJ6SUdadmNpQjBhR2x6SUhOMGNtVmhiUzVjYmlBZ0lDQjBhR2x6TG5ObGRFeHBjM1JsYm1WeUtHOTFkSEIxZEZOMGNtVmhiVTVoYldVc0lHTmhiR3hpWVdOclJtTnVLVHRjYmx4dUlDQWdJQzh2SUZSbGJHd2diM1Z5SUdkeVlYQm9JSFJ2SUd4cGMzUmxiaUJtYjNJZ1pteHZZWFFnY0dGamEyVjBjeUJ2YmlCMGFHbHpJSE4wY21WaGJTNWNiaUFnSUNCMGFHbHpMbmR5WVhCVGRISnBibWRRZEhJb2IzVjBjSFYwVTNSeVpXRnRUbUZ0WlN3Z0tHOTFkSEIxZEZOMGNtVmhiVTVoYldWUWRISTZJRzUxYldKbGNpa2dQVDRnZTF4dUlDQWdJQ0FnZEdocGN5NTNZWE50VFc5a2RXeGxMbDloZEhSaFkyaEdiRzloZEV4cGMzUmxibVZ5S0c5MWRIQjFkRk4wY21WaGJVNWhiV1ZRZEhJcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUYwZEdGamFHVnpJR0VnWm14dllYUmJYU0J3WVdOclpYUWdiR2x6ZEdWdVpYSWdkRzhnZEdobElITndaV05wWm1sbFpDQnZkWFJ3ZFhSZmMzUnlaV0Z0TGx4dUlDQWdLaUJBY0dGeVlXMGdiM1YwY0hWMFUzUnlaV0Z0VG1GdFpTQlVhR1VnYm1GdFpTQnZaaUIwYUdVZ1ozSmhjR2dnYjNWMGNIVjBJSE4wY21WaGJTQjBieUJuY21GaVhHNGdJQ0FxSUNBZ0lDQnpkR1E2T25abFkzUnZjanhtYkc5aGRENGdaR0YwWVNCbWNtOXRMbHh1SUNBZ0tpQkFjR0Z5WVcwZ1kyRnNiR0poWTJ0R1kyNGdWR2hsSUdaMWJtTjBhVzl1SUhSb1lYUWdkMmxzYkNCaVpTQmpZV3hzWldRZ1ltRmpheUIzYVhSb0lIUm9aU0JrWVhSaExDQmhjMXh1SUNBZ0tpQWdJQ0FnYVhRZ2FYTWdjbVZqWldsMlpXUXVJQ0JPYjNSbElIUm9ZWFFnZEdobElHUmhkR0VnYVhNZ2IyNXNlU0JuZFdGeVlXNTBaV1ZrSUhSdklHVjRhWE4wSUdadmNpQjBhR1ZjYmlBZ0lDb2dJQ0FnSUdSMWNtRjBhVzl1SUc5bUlIUm9aU0JqWVd4c1ltRmpheXdnWVc1a0lIUm9aU0JqWVd4c1ltRmpheUIzYVd4c0lHSmxJR05oYkd4bFpDQnBibXhwYm1Vc0lITnZJR2wwWEc0Z0lDQXFJQ0FnSUNCemFHOTFiR1FnYm05MElIQmxjbVp2Y20wZ2IzWmxjbXg1SUdOdmJYQnNhV05oZEdWa0lDaHZjaUJoYm5rZ1lYTjVibU1wSUdKbGFHRjJhVzl5TGx4dUlDQWdLaTljYmlBZ1lYUjBZV05vUm14dllYUldaV04wYjNKTWFYTjBaVzVsY2loY2JpQWdJQ0FnSUc5MWRIQjFkRk4wY21WaGJVNWhiV1U2SUhOMGNtbHVaeXdnWTJGc2JHSmhZMnRHWTI0NklDaGtZWFJoT2lCdWRXMWlaWEpiWFNrZ1BUNGdkbTlwWkNrNklIWnZhV1FnZTF4dUlDQWdJQzh2SUZObGRDQjFjQ0J2ZFhJZ1ZGTWdiR2x6ZEdWdVpYSWdkRzhnY21WalpXbDJaU0JoYm5rZ2NHRmphMlYwY3lCbWIzSWdkR2hwY3lCemRISmxZVzB1WEc0Z0lDQWdkR2hwY3k1elpYUldaV04wYjNKTWFYTjBaVzVsY2lodmRYUndkWFJUZEhKbFlXMU9ZVzFsTENCallXeHNZbUZqYTBaamJpazdYRzVjYmlBZ0lDQXZMeUJVWld4c0lHOTFjaUJuY21Gd2FDQjBieUJzYVhOMFpXNGdabTl5SUhOMFpEbzZkbVZqZEc5eVBHWnNiMkYwUGlCd1lXTnJaWFJ6SUc5dUlIUm9hWE1nYzNSeVpXRnRMbHh1SUNBZ0lIUm9hWE11ZDNKaGNGTjBjbWx1WjFCMGNpaHZkWFJ3ZFhSVGRISmxZVzFPWVcxbExDQW9iM1YwY0hWMFUzUnlaV0Z0VG1GdFpWQjBjam9nYm5WdFltVnlLU0E5UGlCN1hHNGdJQ0FnSUNCMGFHbHpMbmRoYzIxTmIyUjFiR1V1WDJGMGRHRmphRVpzYjJGMFZtVmpkRzl5VEdsemRHVnVaWElvYjNWMGNIVjBVM1J5WldGdFRtRnRaVkIwY2lrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRWFIwWVdOb1pYTWdZU0J6ZEhKcGJtY2djR0ZqYTJWMElHeHBjM1JsYm1WeUlIUnZJSFJvWlNCemNHVmphV1pwWldRZ2IzVjBjSFYwWDNOMGNtVmhiUzVjYmlBZ0lDb2dRSEJoY21GdElHOTFkSEIxZEZOMGNtVmhiVTVoYldVZ1ZHaGxJRzVoYldVZ2IyWWdkR2hsSUdkeVlYQm9JRzkxZEhCMWRDQnpkSEpsWVcwZ2RHOGdaM0poWWlCemRISnBibWRjYmlBZ0lDb2dJQ0FnSUdSaGRHRWdabkp2YlM1Y2JpQWdJQ29nUUhCaGNtRnRJR05oYkd4aVlXTnJSbU51SUZSb1pTQm1kVzVqZEdsdmJpQjBhR0YwSUhkcGJHd2dZbVVnWTJGc2JHVmtJR0poWTJzZ2QybDBhQ0IwYUdVZ1pHRjBZU3dnWVhOY2JpQWdJQ29nSUNBZ0lHbDBJR2x6SUhKbFkyVnBkbVZrTGlBZ1RtOTBaU0IwYUdGMElIUm9aU0JrWVhSaElHbHpJRzl1YkhrZ1ozVmhjbUZ1ZEdWbFpDQjBieUJsZUdsemRDQm1iM0lnZEdobFhHNGdJQ0FxSUNBZ0lDQmtkWEpoZEdsdmJpQnZaaUIwYUdVZ1kyRnNiR0poWTJzc0lHRnVaQ0IwYUdVZ1kyRnNiR0poWTJzZ2QybHNiQ0JpWlNCallXeHNaV1FnYVc1c2FXNWxMQ0J6YnlCcGRGeHVJQ0FnS2lBZ0lDQWdjMmh2ZFd4a0lHNXZkQ0J3WlhKbWIzSnRJRzkyWlhKc2VTQmpiMjF3YkdsallYUmxaQ0FvYjNJZ1lXNTVJR0Z6ZVc1aktTQmlaV2hoZG1sdmNpNWNiaUFnSUNvdlhHNGdJR0YwZEdGamFGTjBjbWx1WjB4cGMzUmxibVZ5S0Z4dUlDQWdJQ0FnYjNWMGNIVjBVM1J5WldGdFRtRnRaVG9nYzNSeWFXNW5MQ0JqWVd4c1ltRmphMFpqYmpvZ0tHUmhkR0U2SUhOMGNtbHVaeWtnUFQ0Z2RtOXBaQ2s2SUhadmFXUWdlMXh1SUNBZ0lDOHZJRk5sZENCMWNDQnZkWElnVkZNZ2JHbHpkR1Z1WlhJZ2RHOGdjbVZqWldsMlpTQmhibmtnY0dGamEyVjBjeUJtYjNJZ2RHaHBjeUJ6ZEhKbFlXMHVYRzRnSUNBZ2RHaHBjeTV6WlhSTWFYTjBaVzVsY2lodmRYUndkWFJUZEhKbFlXMU9ZVzFsTENCallXeHNZbUZqYTBaamJpazdYRzVjYmlBZ0lDQXZMeUJVWld4c0lHOTFjaUJuY21Gd2FDQjBieUJzYVhOMFpXNGdabTl5SUhOMGNtbHVaeUJ3WVdOclpYUnpJRzl1SUhSb2FYTWdjM1J5WldGdExseHVJQ0FnSUhSb2FYTXVkM0poY0ZOMGNtbHVaMUIwY2lodmRYUndkWFJUZEhKbFlXMU9ZVzFsTENBb2IzVjBjSFYwVTNSeVpXRnRUbUZ0WlZCMGNqb2diblZ0WW1WeUtTQTlQaUI3WEc0Z0lDQWdJQ0IwYUdsekxuZGhjMjFOYjJSMWJHVXVYMkYwZEdGamFGTjBjbWx1WjB4cGMzUmxibVZ5S0c5MWRIQjFkRk4wY21WaGJVNWhiV1ZRZEhJcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUYwZEdGamFHVnpJR0VnYzNSeWFXNW5XMTBnY0dGamEyVjBJR3hwYzNSbGJtVnlJSFJ2SUhSb1pTQnpjR1ZqYVdacFpXUWdiM1YwY0hWMFgzTjBjbVZoYlM1Y2JpQWdJQ29nUUhCaGNtRnRJRzkxZEhCMWRGTjBjbVZoYlU1aGJXVWdWR2hsSUc1aGJXVWdiMllnZEdobElHZHlZWEJvSUc5MWRIQjFkQ0J6ZEhKbFlXMGdkRzhnWjNKaFlseHVJQ0FnS2lBZ0lDQWdjM1JrT2pwMlpXTjBiM0k4YzNSa09qcHpkSEpwYm1jK0lHUmhkR0VnWm5KdmJTNWNiaUFnSUNvZ1FIQmhjbUZ0SUdOaGJHeGlZV05yUm1OdUlGUm9aU0JtZFc1amRHbHZiaUIwYUdGMElIZHBiR3dnWW1VZ1kyRnNiR1ZrSUdKaFkyc2dkMmwwYUNCMGFHVWdaR0YwWVN3Z1lYTmNiaUFnSUNvZ0lDQWdJR2wwSUdseklISmxZMlZwZG1Wa0xpQWdUbTkwWlNCMGFHRjBJSFJvWlNCa1lYUmhJR2x6SUc5dWJIa2daM1ZoY21GdWRHVmxaQ0IwYnlCbGVHbHpkQ0JtYjNJZ2RHaGxYRzRnSUNBcUlDQWdJQ0JrZFhKaGRHbHZiaUJ2WmlCMGFHVWdZMkZzYkdKaFkyc3NJR0Z1WkNCMGFHVWdZMkZzYkdKaFkyc2dkMmxzYkNCaVpTQmpZV3hzWldRZ2FXNXNhVzVsTENCemJ5QnBkRnh1SUNBZ0tpQWdJQ0FnYzJodmRXeGtJRzV2ZENCd1pYSm1iM0p0SUc5MlpYSnNlU0JqYjIxd2JHbGpZWFJsWkNBb2IzSWdZVzU1SUdGemVXNWpLU0JpWldoaGRtbHZjaTVjYmlBZ0lDb3ZYRzRnSUdGMGRHRmphRk4wY21sdVoxWmxZM1J2Y2t4cGMzUmxibVZ5S0Z4dUlDQWdJQ0FnYjNWMGNIVjBVM1J5WldGdFRtRnRaVG9nYzNSeWFXNW5MQ0JqWVd4c1ltRmphMFpqYmpvZ0tHUmhkR0U2SUhOMGNtbHVaMXRkS1NBOVBpQjJiMmxrS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdMeThnVTJWMElIVndJRzkxY2lCVVV5QnNhWE4wWlc1bGNpQjBieUJ5WldObGFYWmxJR0Z1ZVNCd1lXTnJaWFJ6SUdadmNpQjBhR2x6SUhOMGNtVmhiUzVjYmlBZ0lDQjBhR2x6TG5ObGRGWmxZM1J2Y2t4cGMzUmxibVZ5S0c5MWRIQjFkRk4wY21WaGJVNWhiV1VzSUdOaGJHeGlZV05yUm1OdUtUdGNibHh1SUNBZ0lDOHZJRlJsYkd3Z2IzVnlJR2R5WVhCb0lIUnZJR3hwYzNSbGJpQm1iM0lnYzNSa09qcDJaV04wYjNJOGMzUnlhVzVuUGlCd1lXTnJaWFJ6SUc5dUlIUm9hWE1nYzNSeVpXRnRMbHh1SUNBZ0lIUm9hWE11ZDNKaGNGTjBjbWx1WjFCMGNpaHZkWFJ3ZFhSVGRISmxZVzFPWVcxbExDQW9iM1YwY0hWMFUzUnlaV0Z0VG1GdFpWQjBjam9nYm5WdFltVnlLU0E5UGlCN1hHNGdJQ0FnSUNCMGFHbHpMbmRoYzIxTmIyUjFiR1V1WDJGMGRHRmphRk4wY21sdVoxWmxZM1J2Y2t4cGMzUmxibVZ5S0c5MWRIQjFkRk4wY21WaGJVNWhiV1ZRZEhJcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUYwZEdGamFHVnpJR0VnYzJWeWFXRnNhWHBsWkNCd2NtOTBieUJ3WVdOclpYUWdiR2x6ZEdWdVpYSWdkRzhnZEdobElITndaV05wWm1sbFpDQnZkWFJ3ZFhSZmMzUnlaV0Z0TGx4dUlDQWdLaUJBY0dGeVlXMGdiM1YwY0hWMFUzUnlaV0Z0VG1GdFpTQlVhR1VnYm1GdFpTQnZaaUIwYUdVZ1ozSmhjR2dnYjNWMGNIVjBJSE4wY21WaGJTQjBieUJuY21GaUlHSnBibUZ5ZVZ4dUlDQWdLaUFnSUNBZ2MyVnlhV0ZzYVhwbFpDQndjbTkwYnlCa1lYUmhJR1p5YjIwZ0tHbHVJRlZwYm5RNFFYSnlZWGtnWm05eWJXRjBLUzVjYmlBZ0lDb2dRSEJoY21GdElHTmhiR3hpWVdOclJtTnVJRlJvWlNCbWRXNWpkR2x2YmlCMGFHRjBJSGRwYkd3Z1ltVWdZMkZzYkdWa0lHSmhZMnNnZDJsMGFDQjBhR1VnWkdGMFlTd2dZWE5jYmlBZ0lDb2dJQ0FnSUdsMElHbHpJSEpsWTJWcGRtVmtMaUFnVG05MFpTQjBhR0YwSUdKNUlHUmxabUYxYkhRZ2RHaGxJR1JoZEdFZ2FYTWdiMjVzZVNCbmRXRnlZVzUwWldWa0lIUnZYRzRnSUNBcUlDQWdJQ0JsZUdsemRDQm1iM0lnZEdobElHUjFjbUYwYVc5dUlHOW1JSFJvWlNCallXeHNZbUZqYXl3Z1lXNWtJSFJvWlNCallXeHNZbUZqYXlCM2FXeHNJR0psSUdOaGJHeGxaRnh1SUNBZ0tpQWdJQ0FnYVc1c2FXNWxMQ0J6YnlCcGRDQnphRzkxYkdRZ2JtOTBJSEJsY21admNtMGdiM1psY214NUlHTnZiWEJzYVdOaGRHVmtJQ2h2Y2lCaGJua2dZWE41Ym1NcFhHNGdJQ0FxSUNBZ0lDQmlaV2hoZG1sdmNpNGdTV1lnZEdobElIQnliM1J2SUdSaGRHRWdibVZsWkhNZ2RHOGdZbVVnWVdKc1pTQjBieUJ2ZFhSc2FYWmxJSFJvWlNCallXeHNMQ0I1YjNWY2JpQWdJQ29nSUNBZ0lHMWhlU0J6WlhRZ2RHaGxJRzl3ZEdsdmJtRnNJRzFoYTJWRVpXVndRMjl3ZVNCd1lYSmhiV1YwWlhJZ2RHOGdkSEoxWlN3Z2IzSWdZMkZ1SUcxaGJuVmhiR3g1WEc0Z0lDQXFJQ0FnSUNCa1pXVndMV052Y0hrZ2RHaGxJR1JoZEdFZ2VXOTFjbk5sYkdZdVhHNGdJQ0FxSUVCd1lYSmhiU0J0WVd0bFJHVmxjRU52Y0hrZ1QzQjBhVzl1WVd3Z1kyOXVkbVZ1YVdWdVkyVWdjR0Z5WVcxbGRHVnlJSGRvYVdOb0xDQnBaaUJ6WlhRZ2RHOGdkSEoxWlN4Y2JpQWdJQ29nSUNBZ0lIZHBiR3dnYjNabGNuSnBaR1VnZEdobElHUmxabUYxYkhRZ2JXVnRiM0o1SUcxaGJtRm5aVzFsYm5RZ1ltVm9ZWFpwYjNJZ1lXNWtJRzFoYTJVZ1lTQmtaV1Z3WEc0Z0lDQXFJQ0FnSUNCamIzQjVJRzltSUhSb1pTQjFibVJsY214NWFXNW5JR1JoZEdFc0lISmhkR2hsY2lCMGFHRnVJR3AxYzNRZ2NtVjBkWEp1YVc1bklHRWdkbWxsZHlCcGJuUnZJSFJvWlZ4dUlDQWdLaUFnSUNBZ1F5c3JMVzFoYm1GblpXUWdiV1Z0YjNKNUxpQkJkQ0IwYUdVZ1kyOXpkQ0J2WmlCaElHUmhkR0VnWTI5d2VTd2dkR2hwY3lCaGJHeHZkM01nZEdobFhHNGdJQ0FxSUNBZ0lDQnlaWFIxY201bFpDQmtZWFJoSUhSdklHOTFkR3hwZG1VZ2RHaGxJR05oYkd4aVlXTnJJR3hwWm1WMGFXMWxJQ2hoYm1RZ2FYUWdkMmxzYkNCaVpTQmpiR1ZoYm1Wa1hHNGdJQ0FxSUNBZ0lDQjFjQ0JoZFhSdmJXRjBhV05oYkd4NUlHSjVJRXBUSUdkaGNtSmhaMlVnWTI5c2JHVmpkR2x2YmlCM2FHVnVaWFpsY2lCMGFHVWdkWE5sY2lCcGN5Qm1hVzVwYzJobFpGeHVJQ0FnS2lBZ0lDQWdkMmwwYUNCcGRDa3VYRzRnSUNBcUwxeHVJQ0JoZEhSaFkyaFFjbTkwYjB4cGMzUmxibVZ5S0Z4dUlDQWdJQ0FnYjNWMGNIVjBVM1J5WldGdFRtRnRaVG9nYzNSeWFXNW5MQ0JqWVd4c1ltRmphMFpqYmpvZ0tHUmhkR0U2SUZWcGJuUTRRWEp5WVhrcElEMCtJSFp2YVdRc1hHNGdJQ0FnSUNCdFlXdGxSR1ZsY0VOdmNIay9PaUJpYjI5c1pXRnVLVG9nZG05cFpDQjdYRzRnSUNBZ0x5OGdVMlYwSUhWd0lHOTFjaUJVVXlCc2FYTjBaVzVsY2lCMGJ5QnlaV05sYVhabElHRnVlU0J3WVdOclpYUnpJR1p2Y2lCMGFHbHpJSE4wY21WaGJTNWNiaUFnSUNCMGFHbHpMbk5sZEV4cGMzUmxibVZ5S0c5MWRIQjFkRk4wY21WaGJVNWhiV1VzSUdOaGJHeGlZV05yUm1OdUtUdGNibHh1SUNBZ0lDOHZJRlJsYkd3Z2IzVnlJR2R5WVhCb0lIUnZJR3hwYzNSbGJpQm1iM0lnWW1sdVlYSjVJSE5sY21saGJHbDZaV1FnY0hKdmRHOGdaR0YwWVNCd1lXTnJaWFJ6SUc5dUlIUm9hWE5jYmlBZ0lDQXZMeUJ6ZEhKbFlXMHVYRzRnSUNBZ2RHaHBjeTUzY21Gd1UzUnlhVzVuVUhSeUtHOTFkSEIxZEZOMGNtVmhiVTVoYldVc0lDaHZkWFJ3ZFhSVGRISmxZVzFPWVcxbFVIUnlPaUJ1ZFcxaVpYSXBJRDArSUh0Y2JpQWdJQ0FnSUhSb2FYTXVkMkZ6YlUxdlpIVnNaUzVmWVhSMFlXTm9VSEp2ZEc5TWFYTjBaVzVsY2loY2JpQWdJQ0FnSUNBZ0lDQnZkWFJ3ZFhSVGRISmxZVzFPWVcxbFVIUnlMQ0J0WVd0bFJHVmxjRU52Y0hrZ2ZId2dabUZzYzJVcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUYwZEdGamFHVnpJR0VnYkdsemRHVnVaWElnWm05eUlHRnVJR0Z5Y21GNUlHOW1JSE5sY21saGJHbDZaV1FnY0hKdmRHOGdjR0ZqYTJWMGN5QjBieUIwYUdWY2JpQWdJQ29nYzNCbFkybG1hV1ZrSUc5MWRIQjFkRjl6ZEhKbFlXMHVYRzRnSUNBcUlFQndZWEpoYlNCdmRYUndkWFJUZEhKbFlXMU9ZVzFsSUZSb1pTQnVZVzFsSUc5bUlIUm9aU0JuY21Gd2FDQnZkWFJ3ZFhRZ2MzUnlaV0Z0SUhSdklHZHlZV0lnWVZ4dUlDQWdLaUFnSUNBZ2RtVmpkRzl5SUc5bUlHSnBibUZ5ZVNCelpYSnBZV3hwZW1Wa0lIQnliM1J2SUdSaGRHRWdabkp2YlNBb2FXNGdWV2x1ZERoQmNuSmhlVnRkSUdadmNtMWhkQ2t1WEc0Z0lDQXFJRUJ3WVhKaGJTQmpZV3hzWW1GamEwWmpiaUJVYUdVZ1puVnVZM1JwYjI0Z2RHaGhkQ0IzYVd4c0lHSmxJR05oYkd4bFpDQmlZV05ySUhkcGRHZ2dkR2hsSUdSaGRHRXNJR0Z6WEc0Z0lDQXFJQ0FnSUNCcGRDQnBjeUJ5WldObGFYWmxaQzRnSUU1dmRHVWdkR2hoZENCaWVTQmtaV1poZFd4MElIUm9aU0JrWVhSaElHbHpJRzl1YkhrZ1ozVmhjbUZ1ZEdWbFpDQjBiMXh1SUNBZ0tpQWdJQ0FnWlhocGMzUWdabTl5SUhSb1pTQmtkWEpoZEdsdmJpQnZaaUIwYUdVZ1kyRnNiR0poWTJzc0lHRnVaQ0IwYUdVZ1kyRnNiR0poWTJzZ2QybHNiQ0JpWlNCallXeHNaV1JjYmlBZ0lDb2dJQ0FnSUdsdWJHbHVaU3dnYzI4Z2FYUWdjMmh2ZFd4a0lHNXZkQ0J3WlhKbWIzSnRJRzkyWlhKc2VTQmpiMjF3YkdsallYUmxaQ0FvYjNJZ1lXNTVJR0Z6ZVc1aktWeHVJQ0FnS2lBZ0lDQWdZbVZvWVhacGIzSXVJRWxtSUhSb1pTQndjbTkwYnlCa1lYUmhJRzVsWldSeklIUnZJR0psSUdGaWJHVWdkRzhnYjNWMGJHbDJaU0IwYUdVZ1kyRnNiQ3dnZVc5MVhHNGdJQ0FxSUNBZ0lDQnRZWGtnYzJWMElIUm9aU0J2Y0hScGIyNWhiQ0J0WVd0bFJHVmxjRU52Y0hrZ2NHRnlZVzFsZEdWeUlIUnZJSFJ5ZFdVc0lHOXlJR05oYmlCdFlXNTFZV3hzZVZ4dUlDQWdLaUFnSUNBZ1pHVmxjQzFqYjNCNUlIUm9aU0JrWVhSaElIbHZkWEp6Wld4bUxseHVJQ0FnS2lCQWNHRnlZVzBnYldGclpVUmxaWEJEYjNCNUlFOXdkR2x2Ym1Gc0lHTnZiblpsYm1sbGJtTmxJSEJoY21GdFpYUmxjaUIzYUdsamFDd2dhV1lnYzJWMElIUnZJSFJ5ZFdVc1hHNGdJQ0FxSUNBZ0lDQjNhV3hzSUc5MlpYSnlhV1JsSUhSb1pTQmtaV1poZFd4MElHMWxiVzl5ZVNCdFlXNWhaMlZ0Wlc1MElHSmxhR0YyYVc5eUlHRnVaQ0J0WVd0bElHRWdaR1ZsY0Z4dUlDQWdLaUFnSUNBZ1kyOXdlU0J2WmlCMGFHVWdkVzVrWlhKc2VXbHVaeUJrWVhSaExDQnlZWFJvWlhJZ2RHaGhiaUJxZFhOMElISmxkSFZ5Ym1sdVp5QmhJSFpwWlhjZ2FXNTBieUIwYUdWY2JpQWdJQ29nSUNBZ0lFTXJLeTF0WVc1aFoyVmtJRzFsYlc5eWVTNGdRWFFnZEdobElHTnZjM1FnYjJZZ1lTQmtZWFJoSUdOdmNIa3NJSFJvYVhNZ1lXeHNiM2R6SUhSb1pWeHVJQ0FnS2lBZ0lDQWdjbVYwZFhKdVpXUWdaR0YwWVNCMGJ5QnZkWFJzYVhabElIUm9aU0JqWVd4c1ltRmpheUJzYVdabGRHbHRaU0FvWVc1a0lHbDBJSGRwYkd3Z1ltVWdZMnhsWVc1bFpGeHVJQ0FnS2lBZ0lDQWdkWEFnWVhWMGIyMWhkR2xqWVd4c2VTQmllU0JLVXlCbllYSmlZV2RsSUdOdmJHeGxZM1JwYjI0Z2QyaGxibVYyWlhJZ2RHaGxJSFZ6WlhJZ2FYTWdabWx1YVhOb1pXUmNiaUFnSUNvZ0lDQWdJSGRwZEdnZ2FYUXBMbHh1SUNBZ0tpOWNiaUFnWVhSMFlXTm9VSEp2ZEc5V1pXTjBiM0pNYVhOMFpXNWxjaWhjYmlBZ0lDQWdJRzkxZEhCMWRGTjBjbVZoYlU1aGJXVTZJSE4wY21sdVp5d2dZMkZzYkdKaFkydEdZMjQ2SUNoa1lYUmhPaUJWYVc1ME9FRnljbUY1VzEwcElEMCtJSFp2YVdRc1hHNGdJQ0FnSUNCdFlXdGxSR1ZsY0VOdmNIay9PaUJpYjI5c1pXRnVLVG9nZG05cFpDQjdYRzRnSUNBZ0x5OGdVMlYwSUhWd0lHOTFjaUJVVXlCc2FYTjBaVzVsY2lCMGJ5QnlaV05sYVhabElHRnVlU0J3WVdOclpYUnpJR1p2Y2lCMGFHbHpJSE4wY21WaGJTNWNiaUFnSUNCMGFHbHpMbk5sZEZabFkzUnZja3hwYzNSbGJtVnlLRzkxZEhCMWRGTjBjbVZoYlU1aGJXVXNJR05oYkd4aVlXTnJSbU51S1R0Y2JseHVJQ0FnSUM4dklGUmxiR3dnYjNWeUlHZHlZWEJvSUhSdklHeHBjM1JsYmlCbWIzSWdZU0IyWldOMGIzSWdiMllnWW1sdVlYSjVJSE5sY21saGJHbDZaV1FnY0hKdmRHOGdjR0ZqYTJWMGMxeHVJQ0FnSUM4dklHOXVJSFJvYVhNZ2MzUnlaV0Z0TGx4dUlDQWdJSFJvYVhNdWQzSmhjRk4wY21sdVoxQjBjaWh2ZFhSd2RYUlRkSEpsWVcxT1lXMWxMQ0FvYjNWMGNIVjBVM1J5WldGdFRtRnRaVkIwY2pvZ2JuVnRZbVZ5S1NBOVBpQjdYRzRnSUNBZ0lDQjBhR2x6TG5kaGMyMU5iMlIxYkdVdVgyRjBkR0ZqYUZCeWIzUnZWbVZqZEc5eVRHbHpkR1Z1WlhJb1hHNGdJQ0FnSUNBZ0lDQWdiM1YwY0hWMFUzUnlaV0Z0VG1GdFpWQjBjaXdnYldGclpVUmxaWEJEYjNCNUlIeDhJR1poYkhObEtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUWlhSeklHRWdiR2x6ZEdWdVpYSWdkRzhnWW1VZ1kyRnNiR1ZrSUdKaFkyc2dkMmwwYUNCaGRXUnBieUJ2ZFhSd2RYUWdjR0ZqYTJWMElHUmhkR0VzSUdGeklHRmNiaUFnSUNvZ1JteHZZWFF6TWtGeWNtRjVMQ0IzYUdWdUlHZHlZWEJvSUdoaGN5Qm1hVzVwYzJobFpDQndjbTlqWlhOemFXNW5JR2wwTGx4dUlDQWdLaUJBY0dGeVlXMGdZWFZrYVc5UGRYUndkWFJNYVhOMFpXNWxjaUJVYUdVZ1kyRnNiR1Z5SjNNZ2JHbHpkR1Z1WlhJZ1puVnVZM1JwYjI0dVhHNGdJQ0FxTDF4dUlDQnpaWFJQYmtGMVpHbHZUM1YwY0hWMEtHRjFaR2x2VDNWMGNIVjBUR2x6ZEdWdVpYSTZJRUYxWkdsdlQzVjBjSFYwVEdsemRHVnVaWElwSUh0Y2JpQWdJQ0IwYUdsekxuZGhjMjFOYjJSMWJHVXViMjVCZFdScGIwOTFkSEIxZENBOUlHRjFaR2x2VDNWMGNIVjBUR2x6ZEdWdVpYSTdYRzRnSUNBZ2FXWWdLQ0YwYUdsekxuZGhjMjFOYjJSMWJHVXVYMkYwZEdGamFFRjFaR2x2VDNWMGNIVjBUR2x6ZEdWdVpYSXBJSHRjYmlBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmloY2JpQWdJQ0FnSUNBZ0lDQW5RWFIwWlcxd2RHbHVaeUIwYnlCMWMyVWdRWFZrYVc5UGRYUndkWFJNYVhOMFpXNWxjaUIzYVhSb2IzVjBJSE4xY0hCdmNuUWdabTl5SUNjZ0sxeHVJQ0FnSUNBZ0lDQWdJQ2R2ZFhSd2RYUWdZWFZrYVc4dUlFbHpJR0oxYVd4a0lHUmxjQ0JjSWpwbmJGOW5jbUZ3YUY5eWRXNXVaWEpmWVhWa2FXOWZiM1YwWENJZ2JXbHpjMmx1Wno4bktUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSbTl5WTJWeklHRnNiQ0J4ZFdWMVpXUXRkWEFnY0dGamEyVjBjeUIwYnlCaVpTQndkWE5vWldRZ2RHaHliM1ZuYUNCMGFHVWdUV1ZrYVdGUWFYQmxJR2R5WVhCb0lHRnpYRzRnSUNBcUlHWmhjaUJoY3lCd2IzTnphV0pzWlN3Z2NHVnlabTl5YldsdVp5QmhiR3dnY0hKdlkyVnpjMmx1WnlCMWJuUnBiQ0J1YnlCdGIzSmxJSEJ5YjJObGMzTnBibWNnWTJGdUlHSmxYRzRnSUNBcUlHUnZibVV1WEc0Z0lDQXFMMXh1SUNCbWFXNXBjMmhRY205alpYTnphVzVuS0NrNklIWnZhV1FnZTF4dUlDQWdJSFJvYVhNdWQyRnpiVTF2WkhWc1pTNWZkMkZwZEZWdWRHbHNTV1JzWlNncE8xeHVJQ0I5WEc1OVhHNWNiaTh2SUZGMWFXTnJJSEJ5YVhaaGRHVWdhR1ZzY0dWeUlIUnZJSEoxYmlCMGFHVWdaMmwyWlc0Z2MyTnlhWEIwSUhOaFptVnNlVnh1WVhONWJtTWdablZ1WTNScGIyNGdjblZ1VTJOeWFYQjBLSE5qY21sd2RGVnliRG9nYzNSeWFXNW5LU0I3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdhVzF3YjNKMFUyTnlhWEIwY3lBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJR2x0Y0c5eWRGTmpjbWx3ZEhNb2MyTnlhWEIwVlhKc0xuUnZVM1J5YVc1bktDa3BPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJR0YzWVdsMElHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBJRDArSUh0Y2JpQWdJQ0FnSUdabGRHTm9LSE5qY21sd2RGVnliQ2t1ZEdobGJpaHlaWE53YjI1elpTQTlQaUJ5WlhOd2IyNXpaUzUwWlhoMEtDa3BMblJvWlc0b2RHVjRkQ0E5UGlCR2RXNWpkR2x2YmloMFpYaDBLU2t1ZEdobGJpaHlaWE52YkhabExDQnlaV3BsWTNRcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dSMnh2WW1Gc0lHWjFibU4wYVc5dUlIUnZJR2x1YVhScFlXeHBlbVVnVjJGemJTQmliRzlpSUdGdVpDQnNiMkZrSUhKMWJuUnBiV1VnWVhOelpYUnpJR1p2Y2lCaFhHNGdLaUFnSUNBZ2MzQmxZMmxoYkdsNlpXUWdUV1ZrYVdGUWFYQmxJR3hwWW5KaGNua3VJRlJvYVhNZ1lXeHNiM2R6SUhWeklIUnZJR055WldGMFpTQmhJSEpsY1hWbGMzUmxaRnh1SUNvZ0lDQWdJSE4xWW1Oc1lYTnpJR2x1YUdWeWFYUnBibWNnWm5KdmJTQlhZWE50VFdWa2FXRlFhWEJsVEdsaUxseHVJQ29nUUhCaGNtRnRJR052Ym5OMGNuVmpkRzl5Um1OdUlGUm9aU0J1WVcxbElHOW1JSFJvWlNCamJHRnpjeUIwYnlCcGJuTjBZVzUwYVdGMFpTQjJhV0VnWENKdVpYZGNJaTVjYmlBcUlFQndZWEpoYlNCM1lYTnRURzloWkdWeVUyTnlhWEIwSUZWeWJDQm1iM0lnZEdobElIZGhjMjB0Y25WdWJtVnlJSE5qY21sd2REc2djSEp2WkhWalpXUWdZbmtnZEdobElHSjFhV3hrWEc0Z0tpQWdJQ0FnY0hKdlkyVnpjeTVjYmlBcUlFQndZWEpoYlNCaGMzTmxkRXh2WVdSbGNsTmpjbWx3ZENCVmNtd2dabTl5SUhSb1pTQmhjM05sZEMxc2IyRmthVzVuSUhOamNtbHdkRHNnY0hKdlpIVmpaV1FnWW5rZ2RHaGxYRzRnS2lBZ0lDQWdZblZwYkdRZ2NISnZZMlZ6Y3k1Y2JpQXFJRUJ3WVhKaGJTQm1hV3hsVEc5allYUnZjaUJCSUdaMWJtTjBhVzl1SUhSdklHOTJaWEp5YVdSbElIUm9aU0JtYVd4bElHeHZZMkYwYVc5dWN5Qm1iM0lnWVhOelpYUnpYRzRnS2lBZ0lDQWdiRzloWkdWa0lHSjVJSFJvWlNCTlpXUnBZVkJwY0dVZ2JHbGljbUZ5ZVM1Y2JpQXFJRUJ5WlhSMWNtNGdjSEp2YldselpTQkJJSEJ5YjIxcGMyVWdkMmhwWTJnZ2QybHNiQ0J5WlhOdmJIWmxJSGRvWlc0Z2FXNXBkR2xoYkdsNllYUnBiMjRnYUdGelhHNGdLaUFnSUNBZ1kyOXRjR3hsZEdWa0lITjFZMk5sYzNObWRXeHNlUzVjYmlBcUwxeHVaWGh3YjNKMElHRnplVzVqSUdaMWJtTjBhVzl1SUdOeVpXRjBaVTFsWkdsaFVHbHdaVXhwWWp4TWFXSlVlWEJsUGloY2JpQWdJQ0JqYjI1emRISjFZM1J2Y2taamJqb2dWMkZ6YlUxbFpHbGhVR2x3WlVOdmJuTjBjblZqZEc5eVBFeHBZbFI1Y0dVK0xGeHVJQ0FnSUhkaGMyMU1iMkZrWlhKVFkzSnBjSFEvT2lCemRISnBibWNzWEc0Z0lDQWdZWE56WlhSTWIyRmtaWEpUWTNKcGNIUS9PaUJ6ZEhKcGJtY3NYRzRnSUNBZ1oyeERZVzUyWVhNL09pQklWRTFNUTJGdWRtRnpSV3hsYldWdWRIeFBabVp6WTNKbFpXNURZVzUyWVhOOGJuVnNiQ3hjYmlBZ0lDQm1hV3hsVEc5allYUnZjajg2SUVacGJHVk1iMk5oZEc5eUtUb2dVSEp2YldselpUeE1hV0pVZVhCbFBpQjdYRzRnSUdOdmJuTjBJSE5qY21sd2RITWdQU0JiWFR0Y2JpQWdMeThnVW5WdUlIZGhjMjB0Ykc5aFpHVnlJSE5qY21sd2RDQm9aWEpsWEc0Z0lHbG1JQ2gzWVhOdFRHOWhaR1Z5VTJOeWFYQjBLU0I3WEc0Z0lDQWdjMk55YVhCMGN5NXdkWE5vS0hkaGMyMU1iMkZrWlhKVFkzSnBjSFFwTzF4dUlDQjlYRzRnSUM4dklGSjFiaUJoYzNObGRDMXNiMkZrWlhJZ2MyTnlhWEIwSUdobGNtVmNiaUFnYVdZZ0tHRnpjMlYwVEc5aFpHVnlVMk55YVhCMEtTQjdYRzRnSUNBZ2MyTnlhWEIwY3k1d2RYTm9LR0Z6YzJWMFRHOWhaR1Z5VTJOeWFYQjBLVHRjYmlBZ2ZWeHVJQ0F2THlCTWIyRmtJSE5qY21sd2RITWdhVzRnY0dGeVlXeHNaV3dzSUdKeWIzZHpaWElnZDJsc2JDQmxlR1ZqZFhSbElIUm9aVzBnYVc0Z2MyVnhkV1Z1WTJVdVhHNGdJR2xtSUNoelkzSnBjSFJ6TG14bGJtZDBhQ2tnZTF4dUlDQWdJR0YzWVdsMElGQnliMjFwYzJVdVlXeHNLSE5qY21sd2RITXViV0Z3S0hKMWJsTmpjbWx3ZENrcE8xeHVJQ0I5WEc0Z0lHbG1JQ2doYzJWc1ppNU5iMlIxYkdWR1lXTjBiM0o1S1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2ROYjJSMWJHVkdZV04wYjNKNUlHNXZkQ0J6WlhRdUp5azdYRzRnSUgxY2JpQWdMeThnVkU5RVR6b2dSVzV6ZFhKbElIUm9ZWFFnWm1sc1pVeHZZMkYwYjNJZ2FYTWdjR0Z6YzJWa0lHbHVJR0o1SUdGc2JDQjFjMlZ5YzF4dUlDQXZMeUJoYm1RZ2JXRnJaU0JwZENCeVpYRjFhWEpsWkZ4dUlDQmpiMjV6ZENCdGIyUjFiR1VnUFZ4dUlDQWdJQ0FnWVhkaGFYUWdjMlZzWmk1TmIyUjFiR1ZHWVdOMGIzSjVLR1pwYkdWTWIyTmhkRzl5SUh4OElITmxiR1l1VFc5a2RXeGxJR0Z6SUVacGJHVk1iMk5oZEc5eUtUdGNiaUFnTHk4Z1JHOXVKM1FnY21WMWMyVWdabUZqZEc5eWVTQnZjaUJ0YjJSMWJHVWdjMlZsWkZ4dUlDQnpaV3htTGsxdlpIVnNaVVpoWTNSdmNua2dQU0J6Wld4bUxrMXZaSFZzWlNBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnY21WMGRYSnVJRzVsZHlCamIyNXpkSEoxWTNSdmNrWmpiaWh0YjJSMWJHVXNJR2RzUTJGdWRtRnpLVHRjYm4xY2JseHVMeW9xWEc0Z0tpQkhiRzlpWVd3Z1puVnVZM1JwYjI0Z2RHOGdhVzVwZEdsaGJHbDZaU0JYWVhOdElHSnNiMklnWVc1a0lHeHZZV1FnY25WdWRHbHRaU0JoYzNObGRITWdabTl5SUdFZ1oyVnVaWEpwWTF4dUlDb2dJQ0FnSUUxbFpHbGhVR2x3WlNCc2FXSnlZWEo1TGx4dUlDb2dRSEJoY21GdElIZGhjMjFNYjJGa1pYSlRZM0pwY0hRZ1ZYSnNJR1p2Y2lCMGFHVWdkMkZ6YlMxeWRXNXVaWElnYzJOeWFYQjBPeUJ3Y205a2RXTmxaQ0JpZVNCMGFHVWdZblZwYkdSY2JpQXFJQ0FnSUNCd2NtOWpaWE56TGx4dUlDb2dRSEJoY21GdElHRnpjMlYwVEc5aFpHVnlVMk55YVhCMElGVnliQ0JtYjNJZ2RHaGxJR0Z6YzJWMExXeHZZV1JwYm1jZ2MyTnlhWEIwT3lCd2NtOWtkV05sWkNCaWVTQjBhR1ZjYmlBcUlDQWdJQ0JpZFdsc1pDQndjbTlqWlhOekxseHVJQ29nUUhCaGNtRnRJR1pwYkdWTWIyTmhkRzl5SUVFZ1puVnVZM1JwYjI0Z2RHOGdiM1psY25KcFpHVWdkR2hsSUdacGJHVWdiRzlqWVhScGIyNXpJR1p2Y2lCaGMzTmxkSE5jYmlBcUlDQWdJQ0JzYjJGa1pXUWdZbmtnZEdobElFMWxaR2xoVUdsd1pTQnNhV0p5WVhKNUxseHVJQ29nUUhKbGRIVnliaUJ3Y205dGFYTmxJRUVnY0hKdmJXbHpaU0IzYUdsamFDQjNhV3hzSUhKbGMyOXNkbVVnZDJobGJpQnBibWwwYVdGc2FYcGhkR2x2YmlCb1lYTmNiaUFxSUNBZ0lDQmpiMjF3YkdWMFpXUWdjM1ZqWTJWemMyWjFiR3g1TGx4dUlDb3ZYRzVsZUhCdmNuUWdZWE41Ym1NZ1puVnVZM1JwYjI0Z1kzSmxZWFJsVjJGemJVMWxaR2xoVUdsd1pVeHBZaWhjYmlBZ0lDQjNZWE50VEc5aFpHVnlVMk55YVhCMFB6b2djM1J5YVc1bkxGeHVJQ0FnSUdGemMyVjBURzloWkdWeVUyTnlhWEIwUHpvZ2MzUnlhVzVuTEZ4dUlDQWdJR2RzUTJGdWRtRnpQem9nU0ZSTlRFTmhiblpoYzBWc1pXMWxiblI4VDJabWMyTnlaV1Z1UTJGdWRtRnpmRzUxYkd3c1hHNGdJQ0FnWm1sc1pVeHZZMkYwYjNJL09pQkdhV3hsVEc5allYUnZjaWs2SUZCeWIyMXBjMlU4VjJGemJVMWxaR2xoVUdsd1pVeHBZajRnZTF4dUlDQnlaWFIxY200Z1kzSmxZWFJsVFdWa2FXRlFhWEJsVEdsaUtGeHVJQ0FnSUNBZ1YyRnpiVTFsWkdsaFVHbHdaVXhwWWl3Z2QyRnpiVXh2WVdSbGNsTmpjbWx3ZEN3Z1lYTnpaWFJNYjJGa1pYSlRZM0pwY0hRc0lHZHNRMkZ1ZG1GekxGeHVJQ0FnSUNBZ1ptbHNaVXh2WTJGMGIzSXBPMXh1ZlZ4dUlsMTkiLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjIgVGhlIE1lZGlhUGlwZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UYXNrUnVubmVyID0gdm9pZCAwO1xuY29uc3QgcmVnaXN0ZXJfbW9kZWxfcmVzb3VyY2VzX2dyYXBoX3NlcnZpY2VfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi93ZWIvZ3JhcGhfcnVubmVyL3JlZ2lzdGVyX21vZGVsX3Jlc291cmNlc19ncmFwaF9zZXJ2aWNlXCIpO1xuY29uc3Qgd2FzbV9tZWRpYXBpcGVfaW1hZ2VfbGliXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vd2ViL2dyYXBoX3J1bm5lci93YXNtX21lZGlhcGlwZV9pbWFnZV9saWJcIik7XG5jb25zdCB3YXNtX21lZGlhcGlwZV9saWJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi93ZWIvZ3JhcGhfcnVubmVyL3dhc21fbWVkaWFwaXBlX2xpYlwiKTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTplbmZvcmNlLW5hbWUtY2FzaW5nXG5jb25zdCBXYXNtTWVkaWFQaXBlSW1hZ2VMaWIgPSAoMCwgcmVnaXN0ZXJfbW9kZWxfcmVzb3VyY2VzX2dyYXBoX3NlcnZpY2VfMS5TdXBwb3J0TW9kZWxSZXNvdXJjZXNHcmFwaFNlcnZpY2UpKCgwLCB3YXNtX21lZGlhcGlwZV9pbWFnZV9saWJfMS5TdXBwb3J0SW1hZ2UpKHdhc21fbWVkaWFwaXBlX2xpYl8xLldhc21NZWRpYVBpcGVMaWIpKTtcbi8qKiBCYXNlIGNsYXNzIGZvciBhbGwgTWVkaWFQaXBlIFRhc2tzLiAqL1xuY2xhc3MgVGFza1J1bm5lciBleHRlbmRzIFdhc21NZWRpYVBpcGVJbWFnZUxpYiB7XG4gICAgY29uc3RydWN0b3Iod2FzbU1vZHVsZSkge1xuICAgICAgICBzdXBlcih3YXNtTW9kdWxlKTtcbiAgICAgICAgdGhpcy5wcm9jZXNzaW5nRXJyb3JzID0gW107XG4gICAgICAgIC8vIERpc2FibGVzIHRoZSBhdXRvbWF0aWMgcmVuZGVyLXRvLXNjcmVlbiBjb2RlLCB3aGljaCBhbGxvd3MgZm9yIHB1cmVcbiAgICAgICAgLy8gQ1BVIHByb2Nlc3NpbmcuXG4gICAgICAgIHRoaXMuc2V0QXV0b1JlbmRlclRvU2NyZWVuKGZhbHNlKTtcbiAgICAgICAgLy8gRW5hYmxlcyB1c2Ugb2Ygb3VyIG1vZGVsIHJlc291cmNlIGNhY2hpbmcgZ3JhcGggc2VydmljZS5cbiAgICAgICAgdGhpcy5yZWdpc3Rlck1vZGVsUmVzb3VyY2VzR3JhcGhTZXJ2aWNlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRha2VzIHRoZSByYXcgZGF0YSBmcm9tIGEgTWVkaWFQaXBlIGdyYXBoLCBhbmQgcGFzc2VzIGl0IHRvIEMrKyB0byBiZSBydW5cbiAgICAgKiBvdmVyIHRoZSB2aWRlbyBzdHJlYW0uIFdpbGwgcmVwbGFjZSB0aGUgcHJldmlvdXNseSBydW5uaW5nIE1lZGlhUGlwZSBncmFwaCxcbiAgICAgKiBpZiB0aGVyZSBpcyBvbmUuXG4gICAgICogQHBhcmFtIGdyYXBoRGF0YSBUaGUgcmF3IE1lZGlhUGlwZSBncmFwaCBkYXRhLCBlaXRoZXIgaW4gYmluYXJ5XG4gICAgICogICAgIHByb3RvYnVmZmVyIGZvcm1hdCAoLmJpbmFyeXBiKSwgb3IgZWxzZSBpbiByYXcgdGV4dCBmb3JtYXQgKC5wYnR4dCBvclxuICAgICAqICAgICAudGV4dHByb3RvKS5cbiAgICAgKiBAcGFyYW0gaXNCaW5hcnkgVGhpcyBzaG91bGQgYmUgc2V0IHRvIHRydWUgaWYgdGhlIGdyYXBoIGlzIGluXG4gICAgICogICAgIGJpbmFyeSBmb3JtYXQsIGFuZCBmYWxzZSBpZiBpdCBpcyBpbiBodW1hbi1yZWFkYWJsZSB0ZXh0IGZvcm1hdC5cbiAgICAgKi9cbiAgICBzZXRHcmFwaChncmFwaERhdGEsIGlzQmluYXJ5KSB7XG4gICAgICAgIHRoaXMuYXR0YWNoRXJyb3JMaXN0ZW5lcigoY29kZSwgbWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzaW5nRXJyb3JzLnB1c2gobmV3IEVycm9yKG1lc3NhZ2UpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN1cGVyLnNldEdyYXBoKGdyYXBoRGF0YSwgaXNCaW5hcnkpO1xuICAgICAgICB0aGlzLmhhbmRsZUVycm9ycygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb3JjZXMgYWxsIHF1ZXVlZC11cCBwYWNrZXRzIHRvIGJlIHB1c2hlZCB0aHJvdWdoIHRoZSBNZWRpYVBpcGUgZ3JhcGggYXNcbiAgICAgKiBmYXIgYXMgcG9zc2libGUsIHBlcmZvcm1pbmcgYWxsIHByb2Nlc3NpbmcgdW50aWwgbm8gbW9yZSBwcm9jZXNzaW5nIGNhbiBiZVxuICAgICAqIGRvbmUuXG4gICAgICovXG4gICAgZmluaXNoUHJvY2Vzc2luZygpIHtcbiAgICAgICAgc3VwZXIuZmluaXNoUHJvY2Vzc2luZygpO1xuICAgICAgICB0aGlzLmhhbmRsZUVycm9ycygpO1xuICAgIH1cbiAgICAvKiogVGhyb3dzIHRoZSBlcnJvciBmcm9tIHRoZSBlcnJvciBsaXN0ZW5lciBpZiBhbiBlcnJvciB3YXMgcmFpc2VkLiAqL1xuICAgIGhhbmRsZUVycm9ycygpIHtcbiAgICAgICAgY29uc3QgZXJyb3JDb3VudCA9IHRoaXMucHJvY2Vzc2luZ0Vycm9ycy5sZW5ndGg7XG4gICAgICAgIGlmIChlcnJvckNvdW50ID09PSAxKSB7XG4gICAgICAgICAgICAvLyBSZS10aHJvdyBlcnJvciB0byBnZXQgYSBtb3JlIG1lYW5pbmdmdWwgc3RhY2t0cmFjZVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMucHJvY2Vzc2luZ0Vycm9yc1swXS5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChlcnJvckNvdW50ID4gMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbmNvdW50ZXJlZCBtdWx0aXBsZSBlcnJvcnM6ICcgK1xuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc2luZ0Vycm9ycy5tYXAoZSA9PiBlLm1lc3NhZ2UpLmpvaW4oJywgJykpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJvY2Vzc2luZ0Vycm9ycyA9IFtdO1xuICAgIH1cbn1cbmV4cG9ydHMuVGFza1J1bm5lciA9IFRhc2tSdW5uZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkR0Z6YTE5eWRXNXVaWEl1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOHVMaTh1TGk4dUxpOHVMaTl0WldScFlYQnBjR1V2ZEdGemEzTXZkMlZpTDJOdmNtVXZkR0Z6YTE5eWRXNXVaWEl1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPenM3T3pzN096czdPenM3T3p0SFFXTkhPenM3UVVGRlNDdzJTRUZCYlVnN1FVRkRia2dzYVVkQlFXZEdPMEZCUTJoR0xIRkdRVUV3Ump0QlFVVXhSaXdyUTBGQkswTTdRVUZETDBNc1RVRkJUU3h4UWtGQmNVSXNSMEZEZGtJc1NVRkJRU3d3UlVGQmFVTXNSVUZCUXl4SlFVRkJMSFZEUVVGWkxFVkJRVU1zY1VOQlFXZENMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJSWFJGTERCRFFVRXdRenRCUVVNeFF5eE5RVUZ6UWl4VlFVRlhMRk5CUVZFc2NVSkJRWEZDTzBsQlJ6VkVMRmxCUVZrc1ZVRkJjMEk3VVVGRGFFTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8xRkJTRm9zY1VKQlFXZENMRWRCUVZrc1JVRkJSU3hEUVVGRE8xRkJTM0pETEhORlFVRnpSVHRSUVVOMFJTeHJRa0ZCYTBJN1VVRkRiRUlzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzFGQlJXeERMREpFUVVFeVJEdFJRVU16UkN4SlFVRkpMRU5CUVVNc2EwTkJRV3RETEVWQlFVVXNRMEZCUXp0SlFVTTFReXhEUVVGRE8wbEJSVVE3T3pzN096czdPenRQUVZOSE8wbEJRMDBzVVVGQlVTeERRVUZETEZOQlFYRkNMRVZCUVVVc1VVRkJhVUk3VVVGRGVFUXNTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVOQlFVTXNTVUZCU1N4RlFVRkZMRTlCUVU4c1JVRkJSU3hGUVVGRk8xbEJRM3BETEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5xUkN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOSUxFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNVMEZCVXl4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE8xRkJRM0JETEVsQlFVa3NRMEZCUXl4WlFVRlpMRVZCUVVVc1EwRkJRenRKUVVOMFFpeERRVUZETzBsQlJVUTdPenM3VDBGSlJ6dEpRVU5OTEdkQ1FVRm5RanRSUVVOMlFpeExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVVzUTBGQlF6dFJRVU42UWl4SlFVRkpMRU5CUVVNc1dVRkJXU3hGUVVGRkxFTkJRVU03U1VGRGRFSXNRMEZCUXp0SlFVVkVMSFZGUVVGMVJUdEpRVU12UkN4WlFVRlpPMUZCUTJ4Q0xFMUJRVTBzVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eE5RVUZOTEVOQlFVTTdVVUZEYUVRc1NVRkJTU3hWUVVGVkxFdEJRVXNzUTBGQlF5eEZRVUZGTzFsQlEzQkNMSEZFUVVGeFJEdFpRVU55UkN4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0VFFVTnVSRHRoUVVGTkxFbEJRVWtzVlVGQlZTeEhRVUZITEVOQlFVTXNSVUZCUlR0WlFVTjZRaXhOUVVGTkxFbEJRVWtzUzBGQlN5eERRVU5ZTEN0Q1FVRXJRanRuUWtGREwwSXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dFRRVU16UkR0UlFVTkVMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNSMEZCUnl4RlFVRkZMRU5CUVVNN1NVRkROMElzUTBGQlF6dERRVU5HTzBGQmRrUkVMR2REUVhWRVF5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRMjl3ZVhKcFoyaDBJREl3TWpJZ1ZHaGxJRTFsWkdsaFVHbHdaU0JCZFhSb2IzSnpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aU0JjSWt4cFkyVnVjMlZjSWlrN1hHNGdLaUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlBcVhHNGdLaUFnSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVJQ29nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHVJQ29nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0Z0tpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0Z0tpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlBcUwxeHVYRzVwYlhCdmNuUWdlMU4xY0hCdmNuUk5iMlJsYkZKbGMyOTFjbU5sYzBkeVlYQm9VMlZ5ZG1salpYMGdabkp2YlNBbkxpNHZMaTR2TGk0dmQyVmlMMmR5WVhCb1gzSjFibTVsY2k5eVpXZHBjM1JsY2w5dGIyUmxiRjl5WlhOdmRYSmpaWE5mWjNKaGNHaGZjMlZ5ZG1salpTYzdYRzVwYlhCdmNuUWdlMU4xY0hCdmNuUkpiV0ZuWlgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2ZDJWaUwyZHlZWEJvWDNKMWJtNWxjaTkzWVhOdFgyMWxaR2xoY0dsd1pWOXBiV0ZuWlY5c2FXSW5PMXh1YVcxd2IzSjBJSHRYWVhOdFRXVmthV0ZRYVhCbFRHbGlMQ0JYWVhOdFRXOWtkV3hsZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTkzWldJdlozSmhjR2hmY25WdWJtVnlMM2RoYzIxZmJXVmthV0Z3YVhCbFgyeHBZaWM3WEc1Y2JpOHZJSFJ6YkdsdWREcGthWE5oWW14bExXNWxlSFF0YkdsdVpUcGxibVp2Y21ObExXNWhiV1V0WTJGemFXNW5YRzVqYjI1emRDQlhZWE50VFdWa2FXRlFhWEJsU1cxaFoyVk1hV0lnUFZ4dUlDQWdJRk4xY0hCdmNuUk5iMlJsYkZKbGMyOTFjbU5sYzBkeVlYQm9VMlZ5ZG1salpTaFRkWEJ3YjNKMFNXMWhaMlVvVjJGemJVMWxaR2xoVUdsd1pVeHBZaWtwTzF4dVhHNHZLaW9nUW1GelpTQmpiR0Z6Y3lCbWIzSWdZV3hzSUUxbFpHbGhVR2x3WlNCVVlYTnJjeTRnS2k5Y2JtVjRjRzl5ZENCaFluTjBjbUZqZENCamJHRnpjeUJVWVhOclVuVnVibVZ5SUdWNGRHVnVaSE1nVjJGemJVMWxaR2xoVUdsd1pVbHRZV2RsVEdsaUlIdGNiaUFnY0hKcGRtRjBaU0J3Y205alpYTnphVzVuUlhKeWIzSnpPaUJGY25KdmNsdGRJRDBnVzEwN1hHNWNiaUFnWTI5dWMzUnlkV04wYjNJb2QyRnpiVTF2WkhWc1pUb2dWMkZ6YlUxdlpIVnNaU2tnZTF4dUlDQWdJSE4xY0dWeUtIZGhjMjFOYjJSMWJHVXBPMXh1WEc0Z0lDQWdMeThnUkdsellXSnNaWE1nZEdobElHRjFkRzl0WVhScFl5QnlaVzVrWlhJdGRHOHRjMk55WldWdUlHTnZaR1VzSUhkb2FXTm9JR0ZzYkc5M2N5Qm1iM0lnY0hWeVpWeHVJQ0FnSUM4dklFTlFWU0J3Y205alpYTnphVzVuTGx4dUlDQWdJSFJvYVhNdWMyVjBRWFYwYjFKbGJtUmxjbFJ2VTJOeVpXVnVLR1poYkhObEtUdGNibHh1SUNBZ0lDOHZJRVZ1WVdKc1pYTWdkWE5sSUc5bUlHOTFjaUJ0YjJSbGJDQnlaWE52ZFhKalpTQmpZV05vYVc1bklHZHlZWEJvSUhObGNuWnBZMlV1WEc0Z0lDQWdkR2hwY3k1eVpXZHBjM1JsY2sxdlpHVnNVbVZ6YjNWeVkyVnpSM0poY0doVFpYSjJhV05sS0NrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWR0ZyWlhNZ2RHaGxJSEpoZHlCa1lYUmhJR1p5YjIwZ1lTQk5aV1JwWVZCcGNHVWdaM0poY0dnc0lHRnVaQ0J3WVhOelpYTWdhWFFnZEc4Z1F5c3JJSFJ2SUdKbElISjFibHh1SUNBZ0tpQnZkbVZ5SUhSb1pTQjJhV1JsYnlCemRISmxZVzB1SUZkcGJHd2djbVZ3YkdGalpTQjBhR1VnY0hKbGRtbHZkWE5zZVNCeWRXNXVhVzVuSUUxbFpHbGhVR2x3WlNCbmNtRndhQ3hjYmlBZ0lDb2dhV1lnZEdobGNtVWdhWE1nYjI1bExseHVJQ0FnS2lCQWNHRnlZVzBnWjNKaGNHaEVZWFJoSUZSb1pTQnlZWGNnVFdWa2FXRlFhWEJsSUdkeVlYQm9JR1JoZEdFc0lHVnBkR2hsY2lCcGJpQmlhVzVoY25sY2JpQWdJQ29nSUNBZ0lIQnliM1J2WW5WbVptVnlJR1p2Y20xaGRDQW9MbUpwYm1GeWVYQmlLU3dnYjNJZ1pXeHpaU0JwYmlCeVlYY2dkR1Y0ZENCbWIzSnRZWFFnS0M1d1luUjRkQ0J2Y2x4dUlDQWdLaUFnSUNBZ0xuUmxlSFJ3Y205MGJ5a3VYRzRnSUNBcUlFQndZWEpoYlNCcGMwSnBibUZ5ZVNCVWFHbHpJSE5vYjNWc1pDQmlaU0J6WlhRZ2RHOGdkSEoxWlNCcFppQjBhR1VnWjNKaGNHZ2dhWE1nYVc1Y2JpQWdJQ29nSUNBZ0lHSnBibUZ5ZVNCbWIzSnRZWFFzSUdGdVpDQm1ZV3h6WlNCcFppQnBkQ0JwY3lCcGJpQm9kVzFoYmkxeVpXRmtZV0pzWlNCMFpYaDBJR1p2Y20xaGRDNWNiaUFnSUNvdlhHNGdJRzkyWlhKeWFXUmxJSE5sZEVkeVlYQm9LR2R5WVhCb1JHRjBZVG9nVldsdWREaEJjbkpoZVN3Z2FYTkNhVzVoY25rNklHSnZiMnhsWVc0cE9pQjJiMmxrSUh0Y2JpQWdJQ0IwYUdsekxtRjBkR0ZqYUVWeWNtOXlUR2x6ZEdWdVpYSW9LR052WkdVc0lHMWxjM05oWjJVcElEMCtJSHRjYmlBZ0lDQWdJSFJvYVhNdWNISnZZMlZ6YzJsdVowVnljbTl5Y3k1d2RYTm9LRzVsZHlCRmNuSnZjaWh0WlhOellXZGxLU2s3WEc0Z0lDQWdmU2s3WEc0Z0lDQWdjM1Z3WlhJdWMyVjBSM0poY0dnb1ozSmhjR2hFWVhSaExDQnBjMEpwYm1GeWVTazdYRzRnSUNBZ2RHaHBjeTVvWVc1a2JHVkZjbkp2Y25Nb0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJHYjNKalpYTWdZV3hzSUhGMVpYVmxaQzExY0NCd1lXTnJaWFJ6SUhSdklHSmxJSEIxYzJobFpDQjBhSEp2ZFdkb0lIUm9aU0JOWldScFlWQnBjR1VnWjNKaGNHZ2dZWE5jYmlBZ0lDb2dabUZ5SUdGeklIQnZjM05wWW14bExDQndaWEptYjNKdGFXNW5JR0ZzYkNCd2NtOWpaWE56YVc1bklIVnVkR2xzSUc1dklHMXZjbVVnY0hKdlkyVnpjMmx1WnlCallXNGdZbVZjYmlBZ0lDb2daRzl1WlM1Y2JpQWdJQ292WEc0Z0lHOTJaWEp5YVdSbElHWnBibWx6YUZCeWIyTmxjM05wYm1jb0tUb2dkbTlwWkNCN1hHNGdJQ0FnYzNWd1pYSXVabWx1YVhOb1VISnZZMlZ6YzJsdVp5Z3BPMXh1SUNBZ0lIUm9hWE11YUdGdVpHeGxSWEp5YjNKektDazdYRzRnSUgxY2JseHVJQ0F2S2lvZ1ZHaHliM2R6SUhSb1pTQmxjbkp2Y2lCbWNtOXRJSFJvWlNCbGNuSnZjaUJzYVhOMFpXNWxjaUJwWmlCaGJpQmxjbkp2Y2lCM1lYTWdjbUZwYzJWa0xpQXFMMXh1SUNCd2NtbDJZWFJsSUdoaGJtUnNaVVZ5Y205eWN5Z3BJSHRjYmlBZ0lDQmpiMjV6ZENCbGNuSnZja052ZFc1MElEMGdkR2hwY3k1d2NtOWpaWE56YVc1blJYSnliM0p6TG14bGJtZDBhRHRjYmlBZ0lDQnBaaUFvWlhKeWIzSkRiM1Z1ZENBOVBUMGdNU2tnZTF4dUlDQWdJQ0FnTHk4Z1VtVXRkR2h5YjNjZ1pYSnliM0lnZEc4Z1oyVjBJR0VnYlc5eVpTQnRaV0Z1YVc1blpuVnNJSE4wWVdOcmRISmhZMlZjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaDBhR2x6TG5CeWIyTmxjM05wYm1kRmNuSnZjbk5iTUYwdWJXVnpjMkZuWlNrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNobGNuSnZja052ZFc1MElENGdNU2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh1SUNBZ0lDQWdJQ0FnSUNkRmJtTnZkVzUwWlhKbFpDQnRkV3gwYVhCc1pTQmxjbkp2Y25NNklDY2dLMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2WTJWemMybHVaMFZ5Y205eWN5NXRZWEFvWlNBOVBpQmxMbTFsYzNOaFoyVXBMbXB2YVc0b0p5d2dKeWtwTzF4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TG5CeWIyTmxjM05wYm1kRmNuSnZjbk1nUFNCYlhUdGNiaUFnZlZ4dWZWeHVYRzVjYmlKZGZRPT0iLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjIgVGhlIE1lZGlhUGlwZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JbWFnZUNsYXNzaWZpZXIgPSB2b2lkIDA7XG5jb25zdCBjYWxjdWxhdG9yX3BiXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL2NhbGN1bGF0b3JfcGJcIik7XG5jb25zdCBjYWxjdWxhdG9yX29wdGlvbnNfcGJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9mcmFtZXdvcmsvY2FsY3VsYXRvcl9vcHRpb25zX3BiXCIpO1xuY29uc3QgY2xhc3NpZmljYXRpb25zX3BiXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vdGFza3MvY2MvY29tcG9uZW50cy9jb250YWluZXJzL3Byb3RvL2NsYXNzaWZpY2F0aW9uc19wYlwiKTtcbmNvbnN0IGltYWdlX2NsYXNzaWZpZXJfZ3JhcGhfb3B0aW9uc19wYl8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL3Rhc2tzL2NjL3Zpc2lvbi9pbWFnZV9jbGFzc2lmaWVyL3Byb3RvL2ltYWdlX2NsYXNzaWZpZXJfZ3JhcGhfb3B0aW9uc19wYlwiKTtcbmNvbnN0IGJhc2Vfb3B0aW9uc18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL3Rhc2tzL3dlYi9jb21wb25lbnRzL3Byb2Nlc3NvcnMvYmFzZV9vcHRpb25zXCIpO1xuY29uc3QgY2xhc3NpZmllcl9vcHRpb25zXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vdGFza3Mvd2ViL2NvbXBvbmVudHMvcHJvY2Vzc29ycy9jbGFzc2lmaWVyX29wdGlvbnNcIik7XG5jb25zdCBjbGFzc2lmaWVyX3Jlc3VsdF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL3Rhc2tzL3dlYi9jb21wb25lbnRzL3Byb2Nlc3NvcnMvY2xhc3NpZmllcl9yZXN1bHRcIik7XG5jb25zdCB0YXNrX3J1bm5lcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL3Rhc2tzL3dlYi9jb3JlL3Rhc2tfcnVubmVyXCIpO1xuY29uc3Qgd2FzbV9tZWRpYXBpcGVfbGliXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vd2ViL2dyYXBoX3J1bm5lci93YXNtX21lZGlhcGlwZV9saWJcIik7XG5jb25zdCBJTUFHRV9DTEFTU0lGSUVSX0dSQVBIID0gJ21lZGlhcGlwZS50YXNrcy52aXNpb24uaW1hZ2VfY2xhc3NpZmllci5JbWFnZUNsYXNzaWZpZXJHcmFwaCc7XG5jb25zdCBJTlBVVF9TVFJFQU0gPSAnaW5wdXRfaW1hZ2UnO1xuY29uc3QgQ0xBU1NJRklDQVRJT05TX1NUUkVBTSA9ICdjbGFzc2lmaWNhdGlvbnMnO1xuLy8gVGhlIE9TUyBKUyBBUEkgZG9lcyBub3Qgc3VwcG9ydCB0aGUgYnVpbGRlciBwYXR0ZXJuLlxuLy8gdHNsaW50OmRpc2FibGU6anNwYi11c2UtYnVpbGRlci1wYXR0ZXJuXG4vKiogUGVyZm9ybXMgY2xhc3NpZmljYXRpb24gb24gaW1hZ2VzLiAqL1xuY2xhc3MgSW1hZ2VDbGFzc2lmaWVyIGV4dGVuZHMgdGFza19ydW5uZXJfMS5UYXNrUnVubmVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jbGFzc2lmaWNhdGlvblJlc3VsdCA9IHsgY2xhc3NpZmljYXRpb25zOiBbXSB9O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBuZXcgaW1hZ2VfY2xhc3NpZmllcl9ncmFwaF9vcHRpb25zX3BiXzEuSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBXYXNtIHJ1bnRpbWUgYW5kIGNyZWF0ZXMgYSBuZXcgaW1hZ2UgY2xhc3NpZmllciBmcm9tIHRoZVxuICAgICAqIHByb3ZpZGVkIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHdhc21Mb2FkZXJPcHRpb25zIEEgY29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCBwcm92aWRlcyB0aGUgbG9jYXRpb25cbiAgICAgKiAgICAgb2YgdGhlIFdhc20gYmluYXJ5IGFuZCBpdHMgbG9hZGVyLlxuICAgICAqIEBwYXJhbSBpbWFnZUNsYXNzaWZpZXJPcHRpb25zIFRoZSBvcHRpb25zIGZvciB0aGUgaW1hZ2UgY2xhc3NpZmllci4gTm90ZVxuICAgICAqICAgICB0aGF0IGVpdGhlciBhIHBhdGggdG8gdGhlIG1vZGVsIGFzc2V0IG9yIGEgbW9kZWwgYnVmZmVyIG5lZWRzIHRvIGJlXG4gICAgICogICAgIHByb3ZpZGVkICh2aWEgYGJhc2VPcHRpb25zYCkuXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGNyZWF0ZUZyb21PcHRpb25zKHdhc21Mb2FkZXJPcHRpb25zLCBpbWFnZUNsYXNzaWZpZXJPcHRpb25zKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIGZpbGUgbG9jYXRvciBiYXNlZCBvbiB0aGUgbG9hZGVyIG9wdGlvbnNcbiAgICAgICAgY29uc3QgZmlsZUxvY2F0b3IgPSB7XG4gICAgICAgICAgICBsb2NhdGVGaWxlKCkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBvbmx5IGZpbGUgd2UgbG9hZCBpcyB0aGUgV2FzbSBiaW5hcnlcbiAgICAgICAgICAgICAgICByZXR1cm4gd2FzbUxvYWRlck9wdGlvbnMud2FzbUJpbmFyeVBhdGgudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY2xhc3NpZmllciA9IGF3YWl0ICgwLCB3YXNtX21lZGlhcGlwZV9saWJfMS5jcmVhdGVNZWRpYVBpcGVMaWIpKEltYWdlQ2xhc3NpZmllciwgd2FzbUxvYWRlck9wdGlvbnMud2FzbUxvYWRlclBhdGgsIFxuICAgICAgICAvKiBhc3NldExvYWRlclNjcmlwdD0gKi8gdW5kZWZpbmVkLCBcbiAgICAgICAgLyogZ2xDYW52YXM9ICovIHVuZGVmaW5lZCwgZmlsZUxvY2F0b3IpO1xuICAgICAgICBhd2FpdCBjbGFzc2lmaWVyLnNldE9wdGlvbnMoaW1hZ2VDbGFzc2lmaWVyT3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBjbGFzc2lmaWVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgV2FzbSBydW50aW1lIGFuZCBjcmVhdGVzIGEgbmV3IGltYWdlIGNsYXNzaWZpZXIgYmFzZWQgb25cbiAgICAgKiB0aGUgcHJvdmlkZWQgbW9kZWwgYXNzZXQgYnVmZmVyLlxuICAgICAqIEBwYXJhbSB3YXNtTG9hZGVyT3B0aW9ucyBBIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgcHJvdmlkZXMgdGhlIGxvY2F0aW9uXG4gICAgICogICAgIG9mIHRoZSBXYXNtIGJpbmFyeSBhbmQgaXRzIGxvYWRlci5cbiAgICAgKiBAcGFyYW0gbW9kZWxBc3NldEJ1ZmZlciBBIGJpbmFyeSByZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwuXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZUZyb21Nb2RlbEJ1ZmZlcih3YXNtTG9hZGVyT3B0aW9ucywgbW9kZWxBc3NldEJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gSW1hZ2VDbGFzc2lmaWVyLmNyZWF0ZUZyb21PcHRpb25zKHdhc21Mb2FkZXJPcHRpb25zLCB7IGJhc2VPcHRpb25zOiB7IG1vZGVsQXNzZXRCdWZmZXIgfSB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIFdhc20gcnVudGltZSBhbmQgY3JlYXRlcyBhIG5ldyBpbWFnZSBjbGFzc2lmaWVyIGJhc2VkIG9uXG4gICAgICogdGhlIHBhdGggdG8gdGhlIG1vZGVsIGFzc2V0LlxuICAgICAqIEBwYXJhbSB3YXNtTG9hZGVyT3B0aW9ucyBBIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgcHJvdmlkZXMgdGhlIGxvY2F0aW9uXG4gICAgICogICAgIG9mIHRoZSBXYXNtIGJpbmFyeSBhbmQgaXRzIGxvYWRlci5cbiAgICAgKiBAcGFyYW0gbW9kZWxBc3NldFBhdGggVGhlIHBhdGggdG8gdGhlIG1vZGVsIGFzc2V0LlxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBjcmVhdGVGcm9tTW9kZWxQYXRoKHdhc21Mb2FkZXJPcHRpb25zLCBtb2RlbEFzc2V0UGF0aCkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKG1vZGVsQXNzZXRQYXRoLnRvU3RyaW5nKCkpO1xuICAgICAgICBjb25zdCBncmFwaERhdGEgPSBhd2FpdCByZXNwb25zZS5hcnJheUJ1ZmZlcigpO1xuICAgICAgICByZXR1cm4gSW1hZ2VDbGFzc2lmaWVyLmNyZWF0ZUZyb21Nb2RlbEJ1ZmZlcih3YXNtTG9hZGVyT3B0aW9ucywgbmV3IFVpbnQ4QXJyYXkoZ3JhcGhEYXRhKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgbmV3IG9wdGlvbnMgZm9yIHRoZSBpbWFnZSBjbGFzc2lmaWVyLlxuICAgICAqXG4gICAgICogQ2FsbGluZyBgc2V0T3B0aW9ucygpYCB3aXRoIGEgc3Vic2V0IG9mIG9wdGlvbnMgb25seSBhZmZlY3RzIHRob3NlIG9wdGlvbnMuXG4gICAgICogWW91IGNhbiByZXNldCBhbiBvcHRpb24gYmFjayB0byBpdHMgZGVmYXVsdCB2YWx1ZSBieSBleHBsaWNpdGx5IHNldHRpbmcgaXRcbiAgICAgKiB0byBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIGZvciB0aGUgaW1hZ2UgY2xhc3NpZmllci5cbiAgICAgKi9cbiAgICBhc3luYyBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuYmFzZU9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGJhc2VPcHRpb25zUHJvdG8gPSBhd2FpdCAoMCwgYmFzZV9vcHRpb25zXzEuY29udmVydEJhc2VPcHRpb25zVG9Qcm90bykob3B0aW9ucy5iYXNlT3B0aW9ucywgdGhpcy5vcHRpb25zLmdldEJhc2VPcHRpb25zKCkpO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNldEJhc2VPcHRpb25zKGJhc2VPcHRpb25zUHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9ucy5zZXRDbGFzc2lmaWVyT3B0aW9ucygoMCwgY2xhc3NpZmllcl9vcHRpb25zXzEuY29udmVydENsYXNzaWZpZXJPcHRpb25zVG9Qcm90bykob3B0aW9ucywgdGhpcy5vcHRpb25zLmdldENsYXNzaWZpZXJPcHRpb25zKCkpKTtcbiAgICAgICAgdGhpcy5yZWZyZXNoR3JhcGgoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgaW1hZ2UgY2xhc3NpZmljYXRpb24gb24gdGhlIHByb3ZpZGVkIGltYWdlIGFuZCB3YWl0cyBzeW5jaHJvbm91c2x5XG4gICAgICogZm9yIHRoZSByZXNwb25zZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbWFnZVNvdXJjZSBBbiBpbWFnZSBzb3VyY2UgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0gdGltZXN0YW1wIFRoZSB0aW1lc3RhbXAgb2YgdGhlIGN1cnJlbnQgZnJhbWUsIGluIG1zLiBJZiBub3RcbiAgICAgKiAgICAgcHJvdmlkZWQsIGRlZmF1bHRzIHRvIGBwZXJmb3JtYW5jZS5ub3coKWAuXG4gICAgICogQHJldHVybiBUaGUgY2xhc3NpZmljYXRpb24gcmVzdWx0IG9mIHRoZSBpbWFnZVxuICAgICAqL1xuICAgIGNsYXNzaWZ5KGltYWdlU291cmNlLCB0aW1lc3RhbXApIHtcbiAgICAgICAgLy8gR2V0IGNsYXNzaWZpY2F0aW9uIHJlc3VsdCBieSBydW5uaW5nIG91ciBNZWRpYVBpcGUgZ3JhcGguXG4gICAgICAgIHRoaXMuY2xhc3NpZmljYXRpb25SZXN1bHQgPSB7IGNsYXNzaWZpY2F0aW9uczogW10gfTtcbiAgICAgICAgdGhpcy5hZGRHcHVCdWZmZXJBc0ltYWdlVG9TdHJlYW0oaW1hZ2VTb3VyY2UsIElOUFVUX1NUUkVBTSwgdGltZXN0YW1wICE9PSBudWxsICYmIHRpbWVzdGFtcCAhPT0gdm9pZCAwID8gdGltZXN0YW1wIDogcGVyZm9ybWFuY2Uubm93KCkpO1xuICAgICAgICB0aGlzLmZpbmlzaFByb2Nlc3NpbmcoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xhc3NpZmljYXRpb25SZXN1bHQ7XG4gICAgfVxuICAgIC8qKiBVcGRhdGVzIHRoZSBNZWRpYVBpcGUgZ3JhcGggY29uZmlndXJhdGlvbi4gKi9cbiAgICByZWZyZXNoR3JhcGgoKSB7XG4gICAgICAgIGNvbnN0IGdyYXBoQ29uZmlnID0gbmV3IGNhbGN1bGF0b3JfcGJfMS5DYWxjdWxhdG9yR3JhcGhDb25maWcoKTtcbiAgICAgICAgZ3JhcGhDb25maWcuYWRkSW5wdXRTdHJlYW0oSU5QVVRfU1RSRUFNKTtcbiAgICAgICAgZ3JhcGhDb25maWcuYWRkT3V0cHV0U3RyZWFtKENMQVNTSUZJQ0FUSU9OU19TVFJFQU0pO1xuICAgICAgICBjb25zdCBjYWxjdWxhdG9yT3B0aW9ucyA9IG5ldyBjYWxjdWxhdG9yX29wdGlvbnNfcGJfMS5DYWxjdWxhdG9yT3B0aW9ucygpO1xuICAgICAgICBjYWxjdWxhdG9yT3B0aW9ucy5zZXRFeHRlbnNpb24oaW1hZ2VfY2xhc3NpZmllcl9ncmFwaF9vcHRpb25zX3BiXzEuSW1hZ2VDbGFzc2lmaWVyR3JhcGhPcHRpb25zLmV4dCwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgLy8gUGVyZm9ybSBpbWFnZSBjbGFzc2lmaWNhdGlvbi4gUHJlLXByb2Nlc3NpbmcgYW5kIHJlc3VsdHMgcG9zdC1wcm9jZXNzaW5nXG4gICAgICAgIC8vIGFyZSBidWlsdC1pbi5cbiAgICAgICAgY29uc3QgY2xhc3NpZmllck5vZGUgPSBuZXcgY2FsY3VsYXRvcl9wYl8xLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlKCk7XG4gICAgICAgIGNsYXNzaWZpZXJOb2RlLnNldENhbGN1bGF0b3IoSU1BR0VfQ0xBU1NJRklFUl9HUkFQSCk7XG4gICAgICAgIGNsYXNzaWZpZXJOb2RlLmFkZElucHV0U3RyZWFtKCdJTUFHRTonICsgSU5QVVRfU1RSRUFNKTtcbiAgICAgICAgY2xhc3NpZmllck5vZGUuYWRkT3V0cHV0U3RyZWFtKCdDTEFTU0lGSUNBVElPTlM6JyArIENMQVNTSUZJQ0FUSU9OU19TVFJFQU0pO1xuICAgICAgICBjbGFzc2lmaWVyTm9kZS5zZXRPcHRpb25zKGNhbGN1bGF0b3JPcHRpb25zKTtcbiAgICAgICAgZ3JhcGhDb25maWcuYWRkTm9kZShjbGFzc2lmaWVyTm9kZSk7XG4gICAgICAgIHRoaXMuYXR0YWNoUHJvdG9MaXN0ZW5lcihDTEFTU0lGSUNBVElPTlNfU1RSRUFNLCBiaW5hcnlQcm90byA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsYXNzaWZpY2F0aW9uUmVzdWx0ID0gKDAsIGNsYXNzaWZpZXJfcmVzdWx0XzEuY29udmVydEZyb21DbGFzc2lmaWNhdGlvblJlc3VsdFByb3RvKShjbGFzc2lmaWNhdGlvbnNfcGJfMS5DbGFzc2lmaWNhdGlvblJlc3VsdC5kZXNlcmlhbGl6ZUJpbmFyeShiaW5hcnlQcm90bykpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgYmluYXJ5R3JhcGggPSBncmFwaENvbmZpZy5zZXJpYWxpemVCaW5hcnkoKTtcbiAgICAgICAgdGhpcy5zZXRHcmFwaChuZXcgVWludDhBcnJheShiaW5hcnlHcmFwaCksIC8qIGlzQmluYXJ5PSAqLyB0cnVlKTtcbiAgICB9XG59XG5leHBvcnRzLkltYWdlQ2xhc3NpZmllciA9IEltYWdlQ2xhc3NpZmllcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXMWhaMlZmWTJ4aGMzTnBabWxsY2k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMeTR1THk0dUx5NHVMeTR1THk0dUwyMWxaR2xoY0dsd1pTOTBZWE5yY3k5M1pXSXZkbWx6YVc5dUwybHRZV2RsWDJOc1lYTnphV1pwWlhJdmFXMWhaMlZmWTJ4aGMzTnBabWxsY2k1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3T3pzN096czdPenM3T3pzN08wZEJZMGM3T3p0QlFVVklMSFZGUVVFd1JUdEJRVU14UlN4MVJrRkJPRVU3UVVGRE9VVXNORWRCUVhsSE8wRkJRM3BITERSSlFVRnBTVHRCUVVOcVNTd3lSa0ZCYlVjN1FVRkRia2NzZFVkQlFTdEhPMEZCUXk5SExIRkhRVUZ0U0R0QlFVTnVTQ3gzUlVGQmEwVTdRVUZGYkVVc2QwWkJRVFpITzBGQlRUZEhMRTFCUVUwc2MwSkJRWE5DTEVkQlEzaENMRGhFUVVFNFJDeERRVUZETzBGQlEyNUZMRTFCUVUwc1dVRkJXU3hIUVVGSExHRkJRV0VzUTBGQlF6dEJRVU51UXl4TlFVRk5MSE5DUVVGelFpeEhRVUZITEdsQ1FVRnBRaXhEUVVGRE8wRkJTV3BFTEhWRVFVRjFSRHRCUVVOMlJDd3dRMEZCTUVNN1FVRkZNVU1zZVVOQlFYbERPMEZCUTNwRExFMUJRV0VzWlVGQlowSXNVMEZCVVN4M1FrRkJWVHRKUVVFdlF6czdVVUZEVlN4NVFrRkJiMElzUjBGQk1FSXNSVUZCUXl4bFFVRmxMRVZCUVVVc1JVRkJSU3hGUVVGRExFTkJRVU03VVVGRE0wUXNXVUZCVHl4SFFVRkhMRWxCUVVrc0swUkJRVEpDTEVWQlFVVXNRMEZCUXp0SlFXbEpMMFFzUTBGQlF6dEpRUzlJUXpzN096czdPenM3VDBGUlJ6dEpRVU5JTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc2FVSkJRV2xDTEVOQlF6RkNMR2xDUVVGdlF5eEZRVU53UXl4elFrRkJPRU03VVVGRmFFUXNiMFJCUVc5RU8xRkJRM0JFTEUxQlFVMHNWMEZCVnl4SFFVRm5RanRaUVVNdlFpeFZRVUZWTzJkQ1FVTlNMREpEUVVFeVF6dG5Ra0ZETTBNc1QwRkJUeXhwUWtGQmFVSXNRMEZCUXl4alFVRmpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU03V1VGRGNrUXNRMEZCUXp0VFFVTkdMRU5CUVVNN1VVRkZSaXhOUVVGTkxGVkJRVlVzUjBGQlJ5eE5RVUZOTEVsQlFVRXNkVU5CUVd0Q0xFVkJRM1pETEdWQlFXVXNSVUZCUlN4cFFrRkJhVUlzUTBGQlF5eGpRVUZqTzFGQlEycEVMSGRDUVVGM1FpeERRVUZETEZOQlFWTTdVVUZEYkVNc1pVRkJaU3hEUVVGRExGTkJRVk1zUlVGQlJTeFhRVUZYTEVOQlFVTXNRMEZCUXp0UlFVTTFReXhOUVVGTkxGVkJRVlVzUTBGQlF5eFZRVUZWTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zUTBGQlF6dFJRVU53UkN4UFFVRlBMRlZCUVZVc1EwRkJRenRKUVVOd1FpeERRVUZETzBsQlJVUTdPenM3T3p0UFFVMUhPMGxCUTBnc1RVRkJUU3hEUVVGRExIRkNRVUZ4UWl4RFFVTjRRaXhwUWtGQmIwTXNSVUZEY0VNc1owSkJRVFJDTzFGQlF6bENMRTlCUVU4c1pVRkJaU3hEUVVGRExHbENRVUZwUWl4RFFVTndReXhwUWtGQmFVSXNSVUZCUlN4RlFVRkRMRmRCUVZjc1JVRkJSU3hGUVVGRExHZENRVUZuUWl4RlFVRkRMRVZCUVVNc1EwRkJReXhEUVVGRE8wbEJRelZFTEVOQlFVTTdTVUZGUkRzN096czdPMDlCVFVjN1NVRkRTQ3hOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEcxQ1FVRnRRaXhEUVVNMVFpeHBRa0ZCYjBNc1JVRkRjRU1zWTBGQmMwSTdVVUZEZUVJc1RVRkJUU3hSUVVGUkxFZEJRVWNzVFVGQlRTeExRVUZMTEVOQlFVTXNZMEZCWXl4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRGVFUXNUVUZCVFN4VFFVRlRMRWRCUVVjc1RVRkJUU3hSUVVGUkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTTdVVUZETDBNc1QwRkJUeXhsUVVGbExFTkJRVU1zY1VKQlFYRkNMRU5CUTNoRExHbENRVUZwUWl4RlFVRkZMRWxCUVVrc1ZVRkJWU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEY0VRc1EwRkJRenRKUVVWRU96czdPenM3T3p0UFFWRkhPMGxCUTBnc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF5eFBRVUVyUWp0UlFVTTVReXhKUVVGSkxFOUJRVThzUTBGQlF5eFhRVUZYTEVWQlFVVTdXVUZEZGtJc1RVRkJUU3huUWtGQlowSXNSMEZCUnl4TlFVRk5MRWxCUVVFc2QwTkJRWGxDTEVWQlEzQkVMRTlCUVU4c1EwRkJReXhYUVVGWExFVkJRVVVzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4alFVRmpMRVZCUVVVc1EwRkJReXhEUVVGRE8xbEJRM2hFTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1kwRkJZeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNN1UwRkRMME03VVVGRlJDeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRzlDUVVGdlFpeERRVUZETEVsQlFVRXNiMFJCUVN0Q0xFVkJRemRFTEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExHOUNRVUZ2UWl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMjVFTEVsQlFVa3NRMEZCUXl4WlFVRlpMRVZCUVVVc1EwRkJRenRKUVVOMFFpeERRVUZETzBsQlJVUTdPenM3T3pzN08wOUJVVWM3U1VGRFNDeFJRVUZSTEVOQlFVTXNWMEZCZDBJc1JVRkJSU3hUUVVGclFqdFJRVVZ1UkN3MFJFRkJORVE3VVVGRE5VUXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeEhRVUZITEVWQlFVTXNaVUZCWlN4RlFVRkZMRVZCUVVVc1JVRkJReXhEUVVGRE8xRkJRMnhFTEVsQlFVa3NRMEZCUXl3eVFrRkJNa0lzUTBGRE5VSXNWMEZCVnl4RlFVRkZMRmxCUVZrc1JVRkJSU3hUUVVGVExHRkJRVlFzVTBGQlV5eGpRVUZVTEZOQlFWTXNSMEZCU1N4WFFVRlhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU12UkN4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVWQlFVVXNRMEZCUXp0UlFVTjRRaXhQUVVGUExFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJRenRKUVVOdVF5eERRVUZETzBsQlJVUXNhVVJCUVdsRU8wbEJRM3BETEZsQlFWazdVVUZEYkVJc1RVRkJUU3hYUVVGWExFZEJRVWNzU1VGQlNTeHhRMEZCY1VJc1JVRkJSU3hEUVVGRE8xRkJRMmhFTEZkQlFWY3NRMEZCUXl4alFVRmpMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03VVVGRGVrTXNWMEZCVnl4RFFVRkRMR1ZCUVdVc1EwRkJReXh6UWtGQmMwSXNRMEZCUXl4RFFVRkRPMUZCUlhCRUxFMUJRVTBzYVVKQlFXbENMRWRCUVVjc1NVRkJTU3g1UTBGQmFVSXNSVUZCUlN4RFFVRkRPMUZCUTJ4RUxHbENRVUZwUWl4RFFVRkRMRmxCUVZrc1EwRkRNVUlzSzBSQlFUSkNMRU5CUVVNc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0UlFVVnVSQ3d5UlVGQk1rVTdVVUZETTBVc1owSkJRV2RDTzFGQlEyaENMRTFCUVUwc1kwRkJZeXhIUVVGSExFbEJRVWtzY1VOQlFYRkNMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU03VVVGRGVFUXNZMEZCWXl4RFFVRkRMR0ZCUVdFc1EwRkJReXh6UWtGQmMwSXNRMEZCUXl4RFFVRkRPMUZCUTNKRUxHTkJRV01zUTBGQlF5eGpRVUZqTEVOQlFVTXNVVUZCVVN4SFFVRkhMRmxCUVZrc1EwRkJReXhEUVVGRE8xRkJRM1pFTEdOQlFXTXNRMEZCUXl4bFFVRmxMRU5CUVVNc2EwSkJRV3RDTEVkQlFVY3NjMEpCUVhOQ0xFTkJRVU1zUTBGQlF6dFJRVU0xUlN4alFVRmpMRU5CUVVNc1ZVRkJWU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1VVRkZOME1zVjBGQlZ5eERRVUZETEU5QlFVOHNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRenRSUVVWd1F5eEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zYzBKQlFYTkNMRVZCUVVVc1YwRkJWeXhEUVVGRExFVkJRVVU3V1VGRE4wUXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeEhRVUZITEVsQlFVRXNkMFJCUVc5RExFVkJRelZFTEhsRFFVRnZRaXhEUVVGRExHbENRVUZwUWl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE0wUXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkZTQ3hOUVVGTkxGZEJRVmNzUjBGQlJ5eFhRVUZYTEVOQlFVTXNaVUZCWlN4RlFVRkZMRU5CUVVNN1VVRkRiRVFzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRlZCUVZVc1EwRkJReXhYUVVGWExFTkJRVU1zUlVGQlJTeGxRVUZsTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1NVRkRia1VzUTBGQlF6dERRVU5HTzBGQmJrbEVMREJEUVcxSlF5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRMjl3ZVhKcFoyaDBJREl3TWpJZ1ZHaGxJRTFsWkdsaFVHbHdaU0JCZFhSb2IzSnpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aU0JjSWt4cFkyVnVjMlZjSWlrN1hHNGdLaUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlBcVhHNGdLaUFnSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVJQ29nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHVJQ29nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0Z0tpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0Z0tpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlBcUwxeHVYRzVwYlhCdmNuUWdlME5oYkdOMWJHRjBiM0pIY21Gd2FFTnZibVpwWjMwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dlpuSmhiV1YzYjNKckwyTmhiR04xYkdGMGIzSmZjR0luTzF4dWFXMXdiM0owSUh0RFlXeGpkV3hoZEc5eVQzQjBhVzl1YzMwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dlpuSmhiV1YzYjNKckwyTmhiR04xYkdGMGIzSmZiM0IwYVc5dWMxOXdZaWM3WEc1cGJYQnZjblFnZTBOc1lYTnphV1pwWTJGMGFXOXVVbVZ6ZFd4MGZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOTBZWE5yY3k5all5OWpiMjF3YjI1bGJuUnpMMk52Ym5SaGFXNWxjbk12Y0hKdmRHOHZZMnhoYzNOcFptbGpZWFJwYjI1elgzQmlKenRjYm1sdGNHOXlkQ0I3U1cxaFoyVkRiR0Z6YzJsbWFXVnlSM0poY0doUGNIUnBiMjV6ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5MFlYTnJjeTlqWXk5MmFYTnBiMjR2YVcxaFoyVmZZMnhoYzNOcFptbGxjaTl3Y205MGJ5OXBiV0ZuWlY5amJHRnpjMmxtYVdWeVgyZHlZWEJvWDI5d2RHbHZibk5mY0dJbk8xeHVhVzF3YjNKMElIdGpiMjUyWlhKMFFtRnpaVTl3ZEdsdmJuTlViMUJ5YjNSdmZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOTBZWE5yY3k5M1pXSXZZMjl0Y0c5dVpXNTBjeTl3Y205alpYTnpiM0p6TDJKaGMyVmZiM0IwYVc5dWN5YzdYRzVwYlhCdmNuUWdlMk52Ym5abGNuUkRiR0Z6YzJsbWFXVnlUM0IwYVc5dWMxUnZVSEp2ZEc5OUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwzUmhjMnR6TDNkbFlpOWpiMjF3YjI1bGJuUnpMM0J5YjJObGMzTnZjbk12WTJ4aGMzTnBabWxsY2w5dmNIUnBiMjV6Snp0Y2JtbHRjRzl5ZENCN1kyOXVkbVZ5ZEVaeWIyMURiR0Z6YzJsbWFXTmhkR2x2YmxKbGMzVnNkRkJ5YjNSdmZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOTBZWE5yY3k5M1pXSXZZMjl0Y0c5dVpXNTBjeTl3Y205alpYTnpiM0p6TDJOc1lYTnphV1pwWlhKZmNtVnpkV3gwSnp0Y2JtbHRjRzl5ZENCN1ZHRnphMUoxYm01bGNuMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZkR0Z6YTNNdmQyVmlMMk52Y21VdmRHRnphMTl5ZFc1dVpYSW5PMXh1YVcxd2IzSjBJSHRYWVhOdFRHOWhaR1Z5VDNCMGFXOXVjMzBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2ZEdGemEzTXZkMlZpTDJOdmNtVXZkMkZ6YlY5c2IyRmtaWEpmYjNCMGFXOXVjeWM3WEc1cGJYQnZjblFnZTJOeVpXRjBaVTFsWkdsaFVHbHdaVXhwWWl3Z1JtbHNaVXh2WTJGMGIzSXNJRWx0WVdkbFUyOTFjbU5sZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5M1pXSXZaM0poY0doZmNuVnVibVZ5TDNkaGMyMWZiV1ZrYVdGd2FYQmxYMnhwWWljN1hHNHZMeUJRYkdGalpXaHZiR1JsY2lCbWIzSWdhVzUwWlhKdVlXd2daR1Z3Wlc1a1pXNWplU0J2YmlCMGNuVnpkR1ZrSUhKbGMyOTFjbU5sSUhWeWJGeHVYRzVwYlhCdmNuUWdlMGx0WVdkbFEyeGhjM05wWm1sbGNrOXdkR2x2Ym5OOUlHWnliMjBnSnk0dmFXMWhaMlZmWTJ4aGMzTnBabWxsY2w5dmNIUnBiMjV6Snp0Y2JtbHRjRzl5ZENCN1NXMWhaMlZEYkdGemMybG1hV1Z5VW1WemRXeDBmU0JtY205dElDY3VMMmx0WVdkbFgyTnNZWE56YVdacFpYSmZjbVZ6ZFd4MEp6dGNibHh1WTI5dWMzUWdTVTFCUjBWZlEweEJVMU5KUmtsRlVsOUhVa0ZRU0NBOVhHNGdJQ0FnSjIxbFpHbGhjR2x3WlM1MFlYTnJjeTUyYVhOcGIyNHVhVzFoWjJWZlkyeGhjM05wWm1sbGNpNUpiV0ZuWlVOc1lYTnphV1pwWlhKSGNtRndhQ2M3WEc1amIyNXpkQ0JKVGxCVlZGOVRWRkpGUVUwZ1BTQW5hVzV3ZFhSZmFXMWhaMlVuTzF4dVkyOXVjM1FnUTB4QlUxTkpSa2xEUVZSSlQwNVRYMU5VVWtWQlRTQTlJQ2RqYkdGemMybG1hV05oZEdsdmJuTW5PMXh1WEc1bGVIQnZjblFnZTBsdFlXZGxVMjkxY21ObGZUc2dJQzh2SUZWelpXUWdhVzRnZEdobElIQjFZbXhwWXlCQlVFbGNibHh1THk4Z1ZHaGxJRTlUVXlCS1V5QkJVRWtnWkc5bGN5QnViM1FnYzNWd2NHOXlkQ0IwYUdVZ1luVnBiR1JsY2lCd1lYUjBaWEp1TGx4dUx5OGdkSE5zYVc1ME9tUnBjMkZpYkdVNmFuTndZaTExYzJVdFluVnBiR1JsY2kxd1lYUjBaWEp1WEc1Y2JpOHFLaUJRWlhKbWIzSnRjeUJqYkdGemMybG1hV05oZEdsdmJpQnZiaUJwYldGblpYTXVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdTVzFoWjJWRGJHRnpjMmxtYVdWeUlHVjRkR1Z1WkhNZ1ZHRnphMUoxYm01bGNpQjdYRzRnSUhCeWFYWmhkR1VnWTJ4aGMzTnBabWxqWVhScGIyNVNaWE4xYkhRNklFbHRZV2RsUTJ4aGMzTnBabWxsY2xKbGMzVnNkQ0E5SUh0amJHRnpjMmxtYVdOaGRHbHZibk02SUZ0ZGZUdGNiaUFnY0hKcGRtRjBaU0J5WldGa2IyNXNlU0J2Y0hScGIyNXpJRDBnYm1WM0lFbHRZV2RsUTJ4aGMzTnBabWxsY2tkeVlYQm9UM0IwYVc5dWN5Z3BPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkpibWwwYVdGc2FYcGxjeUIwYUdVZ1YyRnpiU0J5ZFc1MGFXMWxJR0Z1WkNCamNtVmhkR1Z6SUdFZ2JtVjNJR2x0WVdkbElHTnNZWE56YVdacFpYSWdabkp2YlNCMGFHVmNiaUFnSUNvZ2NISnZkbWxrWldRZ2IzQjBhVzl1Y3k1Y2JpQWdJQ29nUUhCaGNtRnRJSGRoYzIxTWIyRmtaWEpQY0hScGIyNXpJRUVnWTI5dVptbG5kWEpoZEdsdmJpQnZZbXBsWTNRZ2RHaGhkQ0J3Y205MmFXUmxjeUIwYUdVZ2JHOWpZWFJwYjI1Y2JpQWdJQ29nSUNBZ0lHOW1JSFJvWlNCWFlYTnRJR0pwYm1GeWVTQmhibVFnYVhSeklHeHZZV1JsY2k1Y2JpQWdJQ29nUUhCaGNtRnRJR2x0WVdkbFEyeGhjM05wWm1sbGNrOXdkR2x2Ym5NZ1ZHaGxJRzl3ZEdsdmJuTWdabTl5SUhSb1pTQnBiV0ZuWlNCamJHRnpjMmxtYVdWeUxpQk9iM1JsWEc0Z0lDQXFJQ0FnSUNCMGFHRjBJR1ZwZEdobGNpQmhJSEJoZEdnZ2RHOGdkR2hsSUcxdlpHVnNJR0Z6YzJWMElHOXlJR0VnYlc5a1pXd2dZblZtWm1WeUlHNWxaV1J6SUhSdklHSmxYRzRnSUNBcUlDQWdJQ0J3Y205MmFXUmxaQ0FvZG1saElHQmlZWE5sVDNCMGFXOXVjMkFwTGx4dUlDQWdLaTljYmlBZ2MzUmhkR2xqSUdGemVXNWpJR055WldGMFpVWnliMjFQY0hScGIyNXpLRnh1SUNBZ0lDQWdkMkZ6YlV4dllXUmxjazl3ZEdsdmJuTTZJRmRoYzIxTWIyRmtaWEpQY0hScGIyNXpMRnh1SUNBZ0lDQWdhVzFoWjJWRGJHRnpjMmxtYVdWeVQzQjBhVzl1Y3pvZ1NXMWhaMlZEYkdGemMybG1hV1Z5VDNCMGFXOXVjeWs2WEc0Z0lDQWdJQ0JRY205dGFYTmxQRWx0WVdkbFEyeGhjM05wWm1sbGNqNGdlMXh1SUNBZ0lDOHZJRU55WldGMFpTQmhJR1pwYkdVZ2JHOWpZWFJ2Y2lCaVlYTmxaQ0J2YmlCMGFHVWdiRzloWkdWeUlHOXdkR2x2Ym5OY2JpQWdJQ0JqYjI1emRDQm1hV3hsVEc5allYUnZjam9nUm1sc1pVeHZZMkYwYjNJZ1BTQjdYRzRnSUNBZ0lDQnNiMk5oZEdWR2FXeGxLQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QlVhR1VnYjI1c2VTQm1hV3hsSUhkbElHeHZZV1FnYVhNZ2RHaGxJRmRoYzIwZ1ltbHVZWEo1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIzWVhOdFRHOWhaR1Z5VDNCMGFXOXVjeTUzWVhOdFFtbHVZWEo1VUdGMGFDNTBiMU4wY21sdVp5Z3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzVjYmlBZ0lDQmpiMjV6ZENCamJHRnpjMmxtYVdWeUlEMGdZWGRoYVhRZ1kzSmxZWFJsVFdWa2FXRlFhWEJsVEdsaUtGeHVJQ0FnSUNBZ0lDQkpiV0ZuWlVOc1lYTnphV1pwWlhJc0lIZGhjMjFNYjJGa1pYSlBjSFJwYjI1ekxuZGhjMjFNYjJGa1pYSlFZWFJvTEZ4dUlDQWdJQ0FnSUNBdktpQmhjM05sZEV4dllXUmxjbE5qY21sd2REMGdLaThnZFc1a1pXWnBibVZrTEZ4dUlDQWdJQ0FnSUNBdktpQm5iRU5oYm5aaGN6MGdLaThnZFc1a1pXWnBibVZrTENCbWFXeGxURzlqWVhSdmNpazdYRzRnSUNBZ1lYZGhhWFFnWTJ4aGMzTnBabWxsY2k1elpYUlBjSFJwYjI1ektHbHRZV2RsUTJ4aGMzTnBabWxsY2s5d2RHbHZibk1wTzF4dUlDQWdJSEpsZEhWeWJpQmpiR0Z6YzJsbWFXVnlPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVsdWFYUnBZV3hwZW1WeklIUm9aU0JYWVhOdElISjFiblJwYldVZ1lXNWtJR055WldGMFpYTWdZU0J1WlhjZ2FXMWhaMlVnWTJ4aGMzTnBabWxsY2lCaVlYTmxaQ0J2Ymx4dUlDQWdLaUIwYUdVZ2NISnZkbWxrWldRZ2JXOWtaV3dnWVhOelpYUWdZblZtWm1WeUxseHVJQ0FnS2lCQWNHRnlZVzBnZDJGemJVeHZZV1JsY2s5d2RHbHZibk1nUVNCamIyNW1hV2QxY21GMGFXOXVJRzlpYW1WamRDQjBhR0YwSUhCeWIzWnBaR1Z6SUhSb1pTQnNiMk5oZEdsdmJseHVJQ0FnS2lBZ0lDQWdiMllnZEdobElGZGhjMjBnWW1sdVlYSjVJR0Z1WkNCcGRITWdiRzloWkdWeUxseHVJQ0FnS2lCQWNHRnlZVzBnYlc5a1pXeEJjM05sZEVKMVptWmxjaUJCSUdKcGJtRnllU0J5WlhCeVpYTmxiblJoZEdsdmJpQnZaaUIwYUdVZ2JXOWtaV3d1WEc0Z0lDQXFMMXh1SUNCemRHRjBhV01nWTNKbFlYUmxSbkp2YlUxdlpHVnNRblZtWm1WeUtGeHVJQ0FnSUNBZ2QyRnpiVXh2WVdSbGNrOXdkR2x2Ym5NNklGZGhjMjFNYjJGa1pYSlBjSFJwYjI1ekxGeHVJQ0FnSUNBZ2JXOWtaV3hCYzNObGRFSjFabVpsY2pvZ1ZXbHVkRGhCY25KaGVTazZJRkJ5YjIxcGMyVThTVzFoWjJWRGJHRnpjMmxtYVdWeVBpQjdYRzRnSUNBZ2NtVjBkWEp1SUVsdFlXZGxRMnhoYzNOcFptbGxjaTVqY21WaGRHVkdjbTl0VDNCMGFXOXVjeWhjYmlBZ0lDQWdJQ0FnZDJGemJVeHZZV1JsY2s5d2RHbHZibk1zSUh0aVlYTmxUM0IwYVc5dWN6b2dlMjF2WkdWc1FYTnpaWFJDZFdabVpYSjlmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1NXNXBkR2xoYkdsNlpYTWdkR2hsSUZkaGMyMGdjblZ1ZEdsdFpTQmhibVFnWTNKbFlYUmxjeUJoSUc1bGR5QnBiV0ZuWlNCamJHRnpjMmxtYVdWeUlHSmhjMlZrSUc5dVhHNGdJQ0FxSUhSb1pTQndZWFJvSUhSdklIUm9aU0J0YjJSbGJDQmhjM05sZEM1Y2JpQWdJQ29nUUhCaGNtRnRJSGRoYzIxTWIyRmtaWEpQY0hScGIyNXpJRUVnWTI5dVptbG5kWEpoZEdsdmJpQnZZbXBsWTNRZ2RHaGhkQ0J3Y205MmFXUmxjeUIwYUdVZ2JHOWpZWFJwYjI1Y2JpQWdJQ29nSUNBZ0lHOW1JSFJvWlNCWFlYTnRJR0pwYm1GeWVTQmhibVFnYVhSeklHeHZZV1JsY2k1Y2JpQWdJQ29nUUhCaGNtRnRJRzF2WkdWc1FYTnpaWFJRWVhSb0lGUm9aU0J3WVhSb0lIUnZJSFJvWlNCdGIyUmxiQ0JoYzNObGRDNWNiaUFnSUNvdlhHNGdJSE4wWVhScFl5QmhjM2x1WXlCamNtVmhkR1ZHY205dFRXOWtaV3hRWVhSb0tGeHVJQ0FnSUNBZ2QyRnpiVXh2WVdSbGNrOXdkR2x2Ym5NNklGZGhjMjFNYjJGa1pYSlBjSFJwYjI1ekxGeHVJQ0FnSUNBZ2JXOWtaV3hCYzNObGRGQmhkR2c2SUhOMGNtbHVaeWs2SUZCeWIyMXBjMlU4U1cxaFoyVkRiR0Z6YzJsbWFXVnlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2NtVnpjRzl1YzJVZ1BTQmhkMkZwZENCbVpYUmphQ2h0YjJSbGJFRnpjMlYwVUdGMGFDNTBiMU4wY21sdVp5Z3BLVHRjYmlBZ0lDQmpiMjV6ZENCbmNtRndhRVJoZEdFZ1BTQmhkMkZwZENCeVpYTndiMjV6WlM1aGNuSmhlVUoxWm1abGNpZ3BPMXh1SUNBZ0lISmxkSFZ5YmlCSmJXRm5aVU5zWVhOemFXWnBaWEl1WTNKbFlYUmxSbkp2YlUxdlpHVnNRblZtWm1WeUtGeHVJQ0FnSUNBZ0lDQjNZWE50VEc5aFpHVnlUM0IwYVc5dWN5d2dibVYzSUZWcGJuUTRRWEp5WVhrb1ozSmhjR2hFWVhSaEtTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVTJWMGN5QnVaWGNnYjNCMGFXOXVjeUJtYjNJZ2RHaGxJR2x0WVdkbElHTnNZWE56YVdacFpYSXVYRzRnSUNBcVhHNGdJQ0FxSUVOaGJHeHBibWNnWUhObGRFOXdkR2x2Ym5Nb0tXQWdkMmwwYUNCaElITjFZbk5sZENCdlppQnZjSFJwYjI1eklHOXViSGtnWVdabVpXTjBjeUIwYUc5elpTQnZjSFJwYjI1ekxseHVJQ0FnS2lCWmIzVWdZMkZ1SUhKbGMyVjBJR0Z1SUc5d2RHbHZiaUJpWVdOcklIUnZJR2wwY3lCa1pXWmhkV3gwSUhaaGJIVmxJR0o1SUdWNGNHeHBZMmwwYkhrZ2MyVjBkR2x1WnlCcGRGeHVJQ0FnS2lCMGJ5QmdkVzVrWldacGJtVmtZQzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUc5d2RHbHZibk1nVkdobElHOXdkR2x2Ym5NZ1ptOXlJSFJvWlNCcGJXRm5aU0JqYkdGemMybG1hV1Z5TGx4dUlDQWdLaTljYmlBZ1lYTjVibU1nYzJWMFQzQjBhVzl1Y3lodmNIUnBiMjV6T2lCSmJXRm5aVU5zWVhOemFXWnBaWEpQY0hScGIyNXpLVG9nVUhKdmJXbHpaVHgyYjJsa1BpQjdYRzRnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVZbUZ6WlU5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJR0poYzJWUGNIUnBiMjV6VUhKdmRHOGdQU0JoZDJGcGRDQmpiMjUyWlhKMFFtRnpaVTl3ZEdsdmJuTlViMUJ5YjNSdktGeHVJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTXVZbUZ6WlU5d2RHbHZibk1zSUhSb2FYTXViM0IwYVc5dWN5NW5aWFJDWVhObFQzQjBhVzl1Y3lncEtUdGNiaUFnSUNBZ0lIUm9hWE11YjNCMGFXOXVjeTV6WlhSQ1lYTmxUM0IwYVc5dWN5aGlZWE5sVDNCMGFXOXVjMUJ5YjNSdktUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbTl3ZEdsdmJuTXVjMlYwUTJ4aGMzTnBabWxsY2s5d2RHbHZibk1vWTI5dWRtVnlkRU5zWVhOemFXWnBaWEpQY0hScGIyNXpWRzlRY205MGJ5aGNiaUFnSUNBZ0lDQWdiM0IwYVc5dWN5d2dkR2hwY3k1dmNIUnBiMjV6TG1kbGRFTnNZWE56YVdacFpYSlBjSFJwYjI1ektDa3BLVHRjYmlBZ0lDQjBhR2x6TG5KbFpuSmxjMmhIY21Gd2FDZ3BPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZCbGNtWnZjbTF6SUdsdFlXZGxJR05zWVhOemFXWnBZMkYwYVc5dUlHOXVJSFJvWlNCd2NtOTJhV1JsWkNCcGJXRm5aU0JoYm1RZ2QyRnBkSE1nYzNsdVkyaHliMjV2ZFhOc2VWeHVJQ0FnS2lCbWIzSWdkR2hsSUhKbGMzQnZibk5sTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2FXMWhaMlZUYjNWeVkyVWdRVzRnYVcxaFoyVWdjMjkxY21ObElIUnZJSEJ5YjJObGMzTXVYRzRnSUNBcUlFQndZWEpoYlNCMGFXMWxjM1JoYlhBZ1ZHaGxJSFJwYldWemRHRnRjQ0J2WmlCMGFHVWdZM1Z5Y21WdWRDQm1jbUZ0WlN3Z2FXNGdiWE11SUVsbUlHNXZkRnh1SUNBZ0tpQWdJQ0FnY0hKdmRtbGtaV1FzSUdSbFptRjFiSFJ6SUhSdklHQndaWEptYjNKdFlXNWpaUzV1YjNjb0tXQXVYRzRnSUNBcUlFQnlaWFIxY200Z1ZHaGxJR05zWVhOemFXWnBZMkYwYVc5dUlISmxjM1ZzZENCdlppQjBhR1VnYVcxaFoyVmNiaUFnSUNvdlhHNGdJR05zWVhOemFXWjVLR2x0WVdkbFUyOTFjbU5sT2lCSmJXRm5aVk52ZFhKalpTd2dkR2x0WlhOMFlXMXdQem9nYm5WdFltVnlLVHBjYmlBZ0lDQWdJRWx0WVdkbFEyeGhjM05wWm1sbGNsSmxjM1ZzZENCN1hHNGdJQ0FnTHk4Z1IyVjBJR05zWVhOemFXWnBZMkYwYVc5dUlISmxjM1ZzZENCaWVTQnlkVzV1YVc1bklHOTFjaUJOWldScFlWQnBjR1VnWjNKaGNHZ3VYRzRnSUNBZ2RHaHBjeTVqYkdGemMybG1hV05oZEdsdmJsSmxjM1ZzZENBOUlIdGpiR0Z6YzJsbWFXTmhkR2x2Ym5NNklGdGRmVHRjYmlBZ0lDQjBhR2x6TG1Ga1pFZHdkVUoxWm1abGNrRnpTVzFoWjJWVWIxTjBjbVZoYlNoY2JpQWdJQ0FnSUNBZ2FXMWhaMlZUYjNWeVkyVXNJRWxPVUZWVVgxTlVVa1ZCVFN3Z2RHbHRaWE4wWVcxd0lEOC9JSEJsY21admNtMWhibU5sTG01dmR5Z3BLVHRjYmlBZ0lDQjBhR2x6TG1acGJtbHphRkJ5YjJObGMzTnBibWNvS1R0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amJHRnpjMmxtYVdOaGRHbHZibEpsYzNWc2REdGNiaUFnZlZ4dVhHNGdJQzhxS2lCVmNHUmhkR1Z6SUhSb1pTQk5aV1JwWVZCcGNHVWdaM0poY0dnZ1kyOXVabWxuZFhKaGRHbHZiaTRnS2k5Y2JpQWdjSEpwZG1GMFpTQnlaV1p5WlhOb1IzSmhjR2dvS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdZMjl1YzNRZ1ozSmhjR2hEYjI1bWFXY2dQU0J1WlhjZ1EyRnNZM1ZzWVhSdmNrZHlZWEJvUTI5dVptbG5LQ2s3WEc0Z0lDQWdaM0poY0doRGIyNW1hV2N1WVdSa1NXNXdkWFJUZEhKbFlXMG9TVTVRVlZSZlUxUlNSVUZOS1R0Y2JpQWdJQ0JuY21Gd2FFTnZibVpwWnk1aFpHUlBkWFJ3ZFhSVGRISmxZVzBvUTB4QlUxTkpSa2xEUVZSSlQwNVRYMU5VVWtWQlRTazdYRzVjYmlBZ0lDQmpiMjV6ZENCallXeGpkV3hoZEc5eVQzQjBhVzl1Y3lBOUlHNWxkeUJEWVd4amRXeGhkRzl5VDNCMGFXOXVjeWdwTzF4dUlDQWdJR05oYkdOMWJHRjBiM0pQY0hScGIyNXpMbk5sZEVWNGRHVnVjMmx2YmloY2JpQWdJQ0FnSUNBZ1NXMWhaMlZEYkdGemMybG1hV1Z5UjNKaGNHaFBjSFJwYjI1ekxtVjRkQ3dnZEdocGN5NXZjSFJwYjI1ektUdGNibHh1SUNBZ0lDOHZJRkJsY21admNtMGdhVzFoWjJVZ1kyeGhjM05wWm1sallYUnBiMjR1SUZCeVpTMXdjbTlqWlhOemFXNW5JR0Z1WkNCeVpYTjFiSFJ6SUhCdmMzUXRjSEp2WTJWemMybHVaMXh1SUNBZ0lDOHZJR0Z5WlNCaWRXbHNkQzFwYmk1Y2JpQWdJQ0JqYjI1emRDQmpiR0Z6YzJsbWFXVnlUbTlrWlNBOUlHNWxkeUJEWVd4amRXeGhkRzl5UjNKaGNHaERiMjVtYVdjdVRtOWtaU2dwTzF4dUlDQWdJR05zWVhOemFXWnBaWEpPYjJSbExuTmxkRU5oYkdOMWJHRjBiM0lvU1UxQlIwVmZRMHhCVTFOSlJrbEZVbDlIVWtGUVNDazdYRzRnSUNBZ1kyeGhjM05wWm1sbGNrNXZaR1V1WVdSa1NXNXdkWFJUZEhKbFlXMG9KMGxOUVVkRk9pY2dLeUJKVGxCVlZGOVRWRkpGUVUwcE8xeHVJQ0FnSUdOc1lYTnphV1pwWlhKT2IyUmxMbUZrWkU5MWRIQjFkRk4wY21WaGJTZ25RMHhCVTFOSlJrbERRVlJKVDA1VE9pY2dLeUJEVEVGVFUwbEdTVU5CVkVsUFRsTmZVMVJTUlVGTktUdGNiaUFnSUNCamJHRnpjMmxtYVdWeVRtOWtaUzV6WlhSUGNIUnBiMjV6S0dOaGJHTjFiR0YwYjNKUGNIUnBiMjV6S1R0Y2JseHVJQ0FnSUdkeVlYQm9RMjl1Wm1sbkxtRmtaRTV2WkdVb1kyeGhjM05wWm1sbGNrNXZaR1VwTzF4dVhHNGdJQ0FnZEdocGN5NWhkSFJoWTJoUWNtOTBiMHhwYzNSbGJtVnlLRU5NUVZOVFNVWkpRMEZVU1U5T1UxOVRWRkpGUVUwc0lHSnBibUZ5ZVZCeWIzUnZJRDArSUh0Y2JpQWdJQ0FnSUhSb2FYTXVZMnhoYzNOcFptbGpZWFJwYjI1U1pYTjFiSFFnUFNCamIyNTJaWEowUm5KdmJVTnNZWE56YVdacFkyRjBhVzl1VW1WemRXeDBVSEp2ZEc4b1hHNGdJQ0FnSUNBZ0lDQWdRMnhoYzNOcFptbGpZWFJwYjI1U1pYTjFiSFF1WkdWelpYSnBZV3hwZW1WQ2FXNWhjbmtvWW1sdVlYSjVVSEp2ZEc4cEtUdGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lHTnZibk4wSUdKcGJtRnllVWR5WVhCb0lEMGdaM0poY0doRGIyNW1hV2N1YzJWeWFXRnNhWHBsUW1sdVlYSjVLQ2s3WEc0Z0lDQWdkR2hwY3k1elpYUkhjbUZ3YUNodVpYY2dWV2x1ZERoQmNuSmhlU2hpYVc1aGNubEhjbUZ3YUNrc0lDOHFJR2x6UW1sdVlYSjVQU0FxTHlCMGNuVmxLVHRjYmlBZ2ZWeHVmVnh1WEc1Y2JpSmRmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIyIFRoZSBNZWRpYVBpcGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVoyVnpkSFZ5WlY5eVpXTnZaMjVwZW1WeVgyOXdkR2x2Ym5NdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTh1TGk4dUxpOHVMaTh1TGk4dUxpOXRaV1JwWVhCcGNHVXZkR0Z6YTNNdmQyVmlMM1pwYzJsdmJpOW5aWE4wZFhKbFgzSmxZMjluYm1sNlpYSXZaMlZ6ZEhWeVpWOXlaV052WjI1cGVtVnlYMjl3ZEdsdmJuTXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk96czdPenM3T3pzN096czdPenRIUVdOSElpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF5TWlCVWFHVWdUV1ZrYVdGUWFYQmxJRUYxZEdodmNuTXVJRUZzYkNCU2FXZG9kSE1nVW1WelpYSjJaV1F1WEc0Z0tseHVJQ29nVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUNBb2RHaGxJRndpVEdsalpXNXpaVndpS1R0Y2JpQXFJSGx2ZFNCdFlYa2dibTkwSUhWelpTQjBhR2x6SUdacGJHVWdaWGhqWlhCMElHbHVJR052YlhCc2FXRnVZMlVnZDJsMGFDQjBhR1VnVEdsalpXNXpaUzVjYmlBcUlGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1SUNwY2JpQXFJQ0FnSUNCb2RIUndPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjYmlBcVhHNGdLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc0lITnZablIzWVhKbFhHNGdLaUJrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc1hHNGdLaUJYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxrZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzVjYmlBcUlGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVJjYmlBcUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1SUNvdlhHNWNibWx0Y0c5eWRDQjdRbUZ6WlU5d2RHbHZibk45SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNSaGMydHpMM2RsWWk5amIzSmxMMkpoYzJWZmIzQjBhVzl1Y3ljN1hHNXBiWEJ2Y25RZ2UwTnNZWE56YVdacFpYSlBjSFJwYjI1emZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOTBZWE5yY3k5M1pXSXZZMjl5WlM5amJHRnpjMmxtYVdWeVgyOXdkR2x2Ym5Nbk8xeHVYRzR2S2lvZ1QzQjBhVzl1Y3lCMGJ5QmpiMjVtYVdkMWNtVWdkR2hsSUUxbFpHbGhVR2x3WlNCSFpYTjBkWEpsSUZKbFkyOW5ibWw2WlhJZ1ZHRnpheUFxTDF4dVpYaHdiM0owSUdSbFkyeGhjbVVnYVc1MFpYSm1ZV05sSUVkbGMzUjFjbVZTWldOdloyNXBlbVZ5VDNCMGFXOXVjeUI3WEc0Z0lDOHFLaUJQY0hScGIyNXpJSFJ2SUdOdmJtWnBaM1Z5WlNCMGFHVWdiRzloWkdsdVp5QnZaaUIwYUdVZ2JXOWtaV3dnWVhOelpYUnpMaUFxTDF4dUlDQmlZWE5sVDNCMGFXOXVjejg2SUVKaGMyVlBjSFJwYjI1ek8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCVWFHVWdiV0Y0YVcxMWJTQnVkVzFpWlhJZ2IyWWdhR0Z1WkhNZ1kyRnVJR0psSUdSbGRHVmpkR1ZrSUdKNUlIUm9aU0JIWlhOMGRYSmxVbVZqYjJkdWFYcGxjaTVjYmlBZ0lDb2dSR1ZtWVhWc2RITWdkRzhnTVM1Y2JpQWdJQ292WEc0Z0lHNTFiVWhoYm1SelB6b2diblZ0WW1WeWZIVnVaR1ZtYVc1bFpEdGNibHh1SUNBdktpcGNiaUFnSUNvZ1ZHaGxJRzFwYm1sdGRXMGdZMjl1Wm1sa1pXNWpaU0J6WTI5eVpTQm1iM0lnZEdobElHaGhibVFnWkdWMFpXTjBhVzl1SUhSdklHSmxJR052Ym5OcFpHVnlaV1JjYmlBZ0lDb2djM1ZqWTJWemMyWjFiQzRnUkdWbVlYVnNkSE1nZEc4Z01DNDFMbHh1SUNBZ0tpOWNiaUFnYldsdVNHRnVaRVJsZEdWamRHbHZia052Ym1acFpHVnVZMlUvT2lCdWRXMWlaWEo4ZFc1a1pXWnBibVZrTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJVYUdVZ2JXbHVhVzExYlNCamIyNW1hV1JsYm1ObElITmpiM0psSUc5bUlHaGhibVFnY0hKbGMyVnVZMlVnYzJOdmNtVWdhVzRnZEdobElHaGhibVFnYkdGdVpHMWhjbXRjYmlBZ0lDb2daR1YwWldOMGFXOXVMaUJFWldaaGRXeDBjeUIwYnlBd0xqVXVYRzRnSUNBcUwxeHVJQ0J0YVc1SVlXNWtVSEpsYzJWdVkyVkRiMjVtYVdSbGJtTmxQem9nYm5WdFltVnlmSFZ1WkdWbWFXNWxaRHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWR2hsSUcxcGJtbHRkVzBnWTI5dVptbGtaVzVqWlNCelkyOXlaU0JtYjNJZ2RHaGxJR2hoYm1RZ2RISmhZMnRwYm1jZ2RHOGdZbVVnWTI5dWMybGtaWEpsWkZ4dUlDQWdLaUJ6ZFdOalpYTnpablZzTGlCRVpXWmhkV3gwY3lCMGJ5QXdMalV1WEc0Z0lDQXFMMXh1SUNCdGFXNVVjbUZqYTJsdVowTnZibVpwWkdWdVkyVS9PaUJ1ZFcxaVpYSjhkVzVrWldacGJtVmtPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRaWFJ6SUhSb1pTQnZjSFJwYjI1aGJDQmdRMnhoYzNOcFptbGxjazl3ZEdsdmJuTmdJR052Ym5SeWIyeHBibWNnZEdobElHTmhibTVsWkNCblpYTjBkWEpsYzF4dUlDQWdLaUJqYkdGemMybG1hV1Z5TENCemRXTm9JR0Z6SUhOamIzSmxJSFJvY21WemFHOXNaQ3dnWVd4c2IzY2diR2x6ZENCaGJtUWdaR1Z1ZVNCc2FYTjBJRzltSUdkbGMzUjFjbVZ6TGx4dUlDQWdLaUJVYUdVZ1kyRjBaV2R2Y21sbGN5Qm1iM0lnWTJGdWJtVmtJR2RsYzNSMWNtVmNiaUFnSUNvZ1kyeGhjM05wWm1sbGNuTWdZWEpsT2lCYlhDSk9iMjVsWENJc0lGd2lRMnh2YzJWa1gwWnBjM1JjSWl3Z1hDSlBjR1Z1WDFCaGJHMWNJaXdnWENKUWIybHVkR2x1WjE5VmNGd2lMRnh1SUNBZ0tpQmNJbFJvZFcxaVgwUnZkMjVjSWl3Z1hDSlVhSFZ0WWw5VmNGd2lMQ0JjSWxacFkzUnZjbmxjSWl3Z1hDSkpURzkyWlZsdmRWd2lYVnh1SUNBZ0tpOWNiaUFnTHk4Z1ZFOUVUem9nVG05MFpTQjBhR2x6SUc5d2RHbHZiaUJwY3lCemRXSnFaV04wSUhSdklHTm9ZVzVuWlZ4dUlDQmpZVzV1WldSSFpYTjBkWEpsYzBOc1lYTnphV1pwWlhKUGNIUnBiMjV6UHpvZ1EyeGhjM05wWm1sbGNrOXdkR2x2Ym5OOGRXNWtaV1pwYm1Wa08xeHVYRzRnSUM4cUtseHVJQ0FnS2lCUGNIUnBiMjV6SUdadmNpQmpiMjVtYVdkMWNtbHVaeUIwYUdVZ1kzVnpkRzl0SUdkbGMzUjFjbVZ6SUdOc1lYTnphV1pwWlhJc0lITjFZMmdnWVhNZ2MyTnZjbVZjYmlBZ0lDb2dkR2h5WlhOb2IyeGtMQ0JoYkd4dmR5QnNhWE4wSUdGdVpDQmtaVzU1SUd4cGMzUWdiMllnWjJWemRIVnlaWE11WEc0Z0lDQXFMMXh1SUNBdkx5QlVUMFJQSUdJdk1qVXhPREUyTmpRd0tUb2dUbTkwWlNCMGFHbHpJRzl3ZEdsdmJpQnBjeUJ6ZFdKcVpXTjBJSFJ2SUdOb1lXNW5aUzVjYmlBZ1kzVnpkRzl0UjJWemRIVnlaWE5EYkdGemMybG1hV1Z5VDNCMGFXOXVjejg2SUVOc1lYTnphV1pwWlhKUGNIUnBiMjV6ZkhWdVpHVm1hVzVsWkR0Y2JuMWNiaUpkZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMiBUaGUgTWVkaWFQaXBlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2laMlZ6ZEhWeVpWOXlaV052WjI1cGVtVnlYM0psYzNWc2RDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUx5NHVMeTR1THk0dUx5NHVMMjFsWkdsaGNHbHdaUzkwWVhOcmN5OTNaV0l2ZG1semFXOXVMMmRsYzNSMWNtVmZjbVZqYjJkdWFYcGxjaTluWlhOMGRYSmxYM0psWTI5bmJtbDZaWEpmY21WemRXeDBMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUczdPenM3T3pzN096czdPenM3UjBGalJ5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRMjl3ZVhKcFoyaDBJREl3TWpJZ1ZHaGxJRTFsWkdsaFVHbHdaU0JCZFhSb2IzSnpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aU0JjSWt4cFkyVnVjMlZjSWlrN1hHNGdLaUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlBcVhHNGdLaUFnSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVJQ29nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHVJQ29nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0Z0tpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0Z0tpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlBcUwxeHVYRzVwYlhCdmNuUWdlME5oZEdWbmIzSjVmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTkwWVhOcmN5OTNaV0l2WTI5dGNHOXVaVzUwY3k5amIyNTBZV2x1WlhKekwyTmhkR1ZuYjNKNUp6dGNibWx0Y0c5eWRDQjdUR0Z1WkcxaGNtdDlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM1JoYzJ0ekwzZGxZaTlqYjIxd2IyNWxiblJ6TDJOdmJuUmhhVzVsY25NdmJHRnVaRzFoY21zbk8xeHVYRzR2S2lwY2JpQXFJRkpsY0hKbGMyVnVkSE1nZEdobElHZGxjM1IxY21VZ2NtVmpiMmR1YVhScGIyNGdjbVZ6ZFd4MGN5Qm5aVzVsY21GMFpXUWdZbmtnWUVkbGMzUjFjbVZTWldOdloyNXBlbVZ5WUM1Y2JpQXFMMXh1Wlhod2IzSjBJR1JsWTJ4aGNtVWdhVzUwWlhKbVlXTmxJRWRsYzNSMWNtVlNaV052WjI1cGVtVnlVbVZ6ZFd4MElIdGNiaUFnTHlvcUlFaGhibVFnYkdGdVpHMWhjbXR6SUc5bUlHUmxkR1ZqZEdWa0lHaGhibVJ6TGlBcUwxeHVJQ0JzWVc1a2JXRnlhM002SUV4aGJtUnRZWEpyVzExYlhUdGNibHh1SUNBdktpb2dTR0Z1WkNCc1lXNWtiV0Z5YTNNZ2FXNGdkMjl5YkdRZ1kyOXZjbVJ1YVdGMFpYTWdiMllnWkdWMFpXTjBaV1FnYUdGdVpITXVJQ292WEc0Z0lIZHZjbXhrVEdGdVpHMWhjbXR6T2lCTVlXNWtiV0Z5YTF0ZFcxMDdYRzVjYmlBZ0x5b3FJRWhoYm1SbFpHNWxjM01nYjJZZ1pHVjBaV04wWldRZ2FHRnVaSE11SUNvdlhHNGdJR2hoYm1SbFpHNWxjM05sY3pvZ1EyRjBaV2R2Y25sYlhWdGRPMXh1WEc0Z0lDOHFLaUJTWldOdloyNXBlbVZrSUdoaGJtUWdaMlZ6ZEhWeVpYTWdiMllnWkdWMFpXTjBaV1FnYUdGdVpITWdLaTljYmlBZ1oyVnpkSFZ5WlhNNklFTmhkR1ZuYjNKNVcxMWJYVHRjYm4xY2JpSmRmUT09IiwiLy8gc291cmNlOiBtZWRpYXBpcGUvZnJhbWV3b3JrL2Zvcm1hdHMvbGFuZG1hcmsucHJvdG9cbi8qKlxuICogQGZpbGVvdmVydmlld1xuICogQGVuaGFuY2VhYmxlXG4gKiBAc3VwcHJlc3Mge21pc3NpbmdSZXF1aXJlfSByZXBvcnRzIGVycm9yIG9uIGltcGxpY2l0IHR5cGUgdXNhZ2VzLlxuICogQHN1cHByZXNzIHttZXNzYWdlQ29udmVudGlvbnN9IEpTIENvbXBpbGVyIHJlcG9ydHMgYW4gZXJyb3IgaWYgYSB2YXJpYWJsZSBvclxuICogICAgIGZpZWxkIHN0YXJ0cyB3aXRoICdNU0dfJyBhbmQgaXNuJ3QgYSB0cmFuc2xhdGFibGUgbWVzc2FnZS5cbiAqIEBwdWJsaWNcbiAqL1xuLy8gR0VORVJBVEVEIENPREUgLS0gRE8gTk9UIEVESVQhXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcblxudmFyIGpzcGIgPSByZXF1aXJlKCdnb29nbGUtcHJvdG9idWYnKTtcbnZhciBnb29nID0ganNwYjtcbnZhciBnbG9iYWwgPVxuICAgICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93KSB8fFxuICAgICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwpIHx8XG4gICAgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmKSB8fFxuICAgIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KS5jYWxsKG51bGwpIHx8XG4gICAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5MYW5kbWFyaycsIG51bGwsIGdsb2JhbCk7XG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdCcsIG51bGwsIGdsb2JhbCk7XG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdENvbGxlY3Rpb24nLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmsnLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0JywgbnVsbCwgZ2xvYmFsKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdENvbGxlY3Rpb24nLCBudWxsLCBnbG9iYWwpO1xuLyoqXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxuICogdmFsaWQuXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFyayA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUuTGFuZG1hcmssIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUuTGFuZG1hcmsuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrJztcbn1cbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0ID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBwcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0LnJlcGVhdGVkRmllbGRzXywgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0LCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdC5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0Jztcbn1cbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0Q29sbGVjdGlvbiA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdENvbGxlY3Rpb24ucmVwZWF0ZWRGaWVsZHNfLCBudWxsKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3RDb2xsZWN0aW9uLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdENvbGxlY3Rpb24uZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdENvbGxlY3Rpb24nO1xufVxuLyoqXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxuICogdmFsaWQuXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmsgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFyaywganNwYi5NZXNzYWdlKTtcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmsuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFyayc7XG59XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya0xpc3QgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIHByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0LnJlcGVhdGVkRmllbGRzXywgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdCwganNwYi5NZXNzYWdlKTtcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0LmRpc3BsYXlOYW1lID0gJ3Byb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0Jztcbn1cbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdENvbGxlY3Rpb24gPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIHByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0Q29sbGVjdGlvbi5yZXBlYXRlZEZpZWxkc18sIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya0xpc3RDb2xsZWN0aW9uLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya0xpc3RDb2xsZWN0aW9uLmRpc3BsYXlOYW1lID0gJ3Byb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0Q29sbGVjdGlvbic7XG59XG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFyay5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuTGFuZG1hcmsudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuTGFuZG1hcmt9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFyay50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgeDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQobXNnLCAxKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgeTogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQobXNnLCAyKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgejogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQobXNnLCAzKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgdmlzaWJpbGl0eTogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQobXNnLCA0KSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgcHJlc2VuY2U6IChmID0ganNwYi5NZXNzYWdlLmdldE9wdGlvbmFsRmxvYXRpbmdQb2ludEZpZWxkKG1zZywgNSkpID09IG51bGwgPyB1bmRlZmluZWQgOiBmXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTGFuZG1hcmt9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFyay5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS5MYW5kbWFyaztcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5MYW5kbWFyay5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuTGFuZG1hcmt9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrfVxuICovXG5wcm90by5tZWRpYXBpcGUuTGFuZG1hcmsuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRGbG9hdCgpKTtcbiAgICAgIG1zZy5zZXRYKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRGbG9hdCgpKTtcbiAgICAgIG1zZy5zZXRZKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRGbG9hdCgpKTtcbiAgICAgIG1zZy5zZXRaKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRGbG9hdCgpKTtcbiAgICAgIG1zZy5zZXRWaXNpYmlsaXR5KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRGbG9hdCgpKTtcbiAgICAgIG1zZy5zZXRQcmVzZW5jZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFyay5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrfSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFyay5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDEpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUZsb2F0KFxuICAgICAgMSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAyKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVGbG9hdChcbiAgICAgIDIsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMykpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlRmxvYXQoXG4gICAgICAzLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDQpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUZsb2F0KFxuICAgICAgNCxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCA1KSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVGbG9hdChcbiAgICAgIDUsXG4gICAgICBmXG4gICAgKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGZsb2F0IHggPSAxO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuTGFuZG1hcmsucHJvdG90eXBlLmdldFggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5MYW5kbWFya30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFyay5wcm90b3R5cGUuc2V0WCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTGFuZG1hcmt9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTGFuZG1hcmsucHJvdG90eXBlLmNsZWFyWCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrLnByb3RvdHlwZS5oYXNYID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBmbG9hdCB5ID0gMjtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrLnByb3RvdHlwZS5nZXRZID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCAwLjApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTGFuZG1hcmt9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTGFuZG1hcmsucHJvdG90eXBlLnNldFkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrLnByb3RvdHlwZS5jbGVhclkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFyay5wcm90b3R5cGUuaGFzWSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgZmxvYXQgeiA9IDM7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFyay5wcm90b3R5cGUuZ2V0WiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQodGhpcywgMywgMC4wKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrLnByb3RvdHlwZS5zZXRaID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5MYW5kbWFya30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFyay5wcm90b3R5cGUuY2xlYXJaID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMywgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuTGFuZG1hcmsucHJvdG90eXBlLmhhc1ogPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAzKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGZsb2F0IHZpc2liaWxpdHkgPSA0O1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuTGFuZG1hcmsucHJvdG90eXBlLmdldFZpc2liaWxpdHkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDQsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5MYW5kbWFya30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFyay5wcm90b3R5cGUuc2V0VmlzaWJpbGl0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgNCwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTGFuZG1hcmt9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTGFuZG1hcmsucHJvdG90eXBlLmNsZWFyVmlzaWJpbGl0eSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDQsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrLnByb3RvdHlwZS5oYXNWaXNpYmlsaXR5ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNCkgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBmbG9hdCBwcmVzZW5jZSA9IDU7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFyay5wcm90b3R5cGUuZ2V0UHJlc2VuY2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDUsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5MYW5kbWFya30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFyay5wcm90b3R5cGUuc2V0UHJlc2VuY2UgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDUsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrLnByb3RvdHlwZS5jbGVhclByZXNlbmNlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgNSwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuTGFuZG1hcmsucHJvdG90eXBlLmhhc1ByZXNlbmNlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNSkgIT0gbnVsbDtcbn07XG5cblxuXG4vKipcbiAqIExpc3Qgb2YgcmVwZWF0ZWQgZmllbGRzIHdpdGhpbiB0aGlzIG1lc3NhZ2UgdHlwZS5cbiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn1cbiAqIEBjb25zdFxuICovXG5wcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0LnJlcGVhdGVkRmllbGRzXyA9IFsxXTtcblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdC5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdC50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgbGFuZG1hcmtMaXN0OiBqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRMYW5kbWFya0xpc3QoKSxcbiAgICBwcm90by5tZWRpYXBpcGUuTGFuZG1hcmsudG9PYmplY3QsIGluY2x1ZGVJbnN0YW5jZSlcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3QuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0O1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5tZWRpYXBpcGUuTGFuZG1hcms7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XG4gICAgICBtc2cuYWRkTGFuZG1hcmsodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdH0gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gbWVzc2FnZS5nZXRMYW5kbWFya0xpc3QoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZShcbiAgICAgIDEsXG4gICAgICBmLFxuICAgICAgcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIExhbmRtYXJrIGxhbmRtYXJrID0gMTtcbiAqIEByZXR1cm4geyFBcnJheTwhcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdC5wcm90b3R5cGUuZ2V0TGFuZG1hcmtMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuTGFuZG1hcms+fSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLm1lZGlhcGlwZS5MYW5kbWFyaywgMSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuTGFuZG1hcms+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3R9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3QucHJvdG90eXBlLnNldExhbmRtYXJrTGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5MYW5kbWFyaz19IG9wdF92YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTGFuZG1hcmt9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3QucHJvdG90eXBlLmFkZExhbmRtYXJrID0gZnVuY3Rpb24ob3B0X3ZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDEsIG9wdF92YWx1ZSwgcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrLCBvcHRfaW5kZXgpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3R9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0LnByb3RvdHlwZS5jbGVhckxhbmRtYXJrTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRMYW5kbWFya0xpc3QoW10pO1xufTtcblxuXG5cbi8qKlxuICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLlxuICogQHByaXZhdGUgeyFBcnJheTxudW1iZXI+fVxuICogQGNvbnN0XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3RDb2xsZWN0aW9uLnJlcGVhdGVkRmllbGRzXyA9IFsxXTtcblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdENvbGxlY3Rpb24ucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdENvbGxlY3Rpb24udG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0Q29sbGVjdGlvbn0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdENvbGxlY3Rpb24udG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xuICB2YXIgZiwgb2JqID0ge1xuICAgIGxhbmRtYXJrTGlzdExpc3Q6IGpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldExhbmRtYXJrTGlzdExpc3QoKSxcbiAgICBwcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0LnRvT2JqZWN0LCBpbmNsdWRlSW5zdGFuY2UpXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0Q29sbGVjdGlvbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdENvbGxlY3Rpb24uZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0Q29sbGVjdGlvbjtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3RDb2xsZWN0aW9uLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3RDb2xsZWN0aW9ufSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3RDb2xsZWN0aW9ufVxuICovXG5wcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0Q29sbGVjdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3Q7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLmFkZExhbmRtYXJrTGlzdCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3RDb2xsZWN0aW9uLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0Q29sbGVjdGlvbi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3RDb2xsZWN0aW9ufSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3RDb2xsZWN0aW9uLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gbWVzc2FnZS5nZXRMYW5kbWFya0xpc3RMaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoXG4gICAgICAxLFxuICAgICAgZixcbiAgICAgIHByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcbiAgICApO1xuICB9XG59O1xuXG5cbi8qKlxuICogcmVwZWF0ZWQgTGFuZG1hcmtMaXN0IGxhbmRtYXJrX2xpc3QgPSAxO1xuICogQHJldHVybiB7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0Pn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdENvbGxlY3Rpb24ucHJvdG90eXBlLmdldExhbmRtYXJrTGlzdExpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3Q+fSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3QsIDEpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTwhcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdD59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdENvbGxlY3Rpb259IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3RDb2xsZWN0aW9uLnByb3RvdHlwZS5zZXRMYW5kbWFya0xpc3RMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdD19IG9wdF92YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0fVxuICovXG5wcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0Q29sbGVjdGlvbi5wcm90b3R5cGUuYWRkTGFuZG1hcmtMaXN0ID0gZnVuY3Rpb24ob3B0X3ZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDEsIG9wdF92YWx1ZSwgcHJvdG8ubWVkaWFwaXBlLkxhbmRtYXJrTGlzdCwgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTGFuZG1hcmtMaXN0Q29sbGVjdGlvbn0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5MYW5kbWFya0xpc3RDb2xsZWN0aW9uLnByb3RvdHlwZS5jbGVhckxhbmRtYXJrTGlzdExpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0TGFuZG1hcmtMaXN0TGlzdChbXSk7XG59O1xuXG5cblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFyay5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya30gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFyay50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgeDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQobXNnLCAxKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgeTogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQobXNnLCAyKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgejogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQobXNnLCAzKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgdmlzaWJpbGl0eTogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQobXNnLCA0KSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgcHJlc2VuY2U6IChmID0ganNwYi5NZXNzYWdlLmdldE9wdGlvbmFsRmxvYXRpbmdQb2ludEZpZWxkKG1zZywgNSkpID09IG51bGwgPyB1bmRlZmluZWQgOiBmXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrfVxuICovXG5wcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFyaztcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmsuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya30gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrfVxuICovXG5wcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkRmxvYXQoKSk7XG4gICAgICBtc2cuc2V0WCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkRmxvYXQoKSk7XG4gICAgICBtc2cuc2V0WSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkRmxvYXQoKSk7XG4gICAgICBtc2cuc2V0Wih2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkRmxvYXQoKSk7XG4gICAgICBtc2cuc2V0VmlzaWJpbGl0eSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkRmxvYXQoKSk7XG4gICAgICBtc2cuc2V0UHJlc2VuY2UodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya30gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMSkpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlRmxvYXQoXG4gICAgICAxLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDIpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUZsb2F0KFxuICAgICAgMixcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAzKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVGbG9hdChcbiAgICAgIDMsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgNCkpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlRmxvYXQoXG4gICAgICA0LFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDUpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUZsb2F0KFxuICAgICAgNSxcbiAgICAgIGZcbiAgICApO1xuICB9XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgZmxvYXQgeCA9IDE7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmsucHJvdG90eXBlLmdldFggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmt9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrLnByb3RvdHlwZS5zZXRYID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmt9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrLnByb3RvdHlwZS5jbGVhclggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmsucHJvdG90eXBlLmhhc1ggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGZsb2F0IHkgPSAyO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrLnByb3RvdHlwZS5nZXRZID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCAwLjApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFyay5wcm90b3R5cGUuc2V0WSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFyay5wcm90b3R5cGUuY2xlYXJZID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMiwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrLnByb3RvdHlwZS5oYXNZID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBmbG9hdCB6ID0gMztcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFyay5wcm90b3R5cGUuZ2V0WiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQodGhpcywgMywgMC4wKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmsucHJvdG90eXBlLnNldFogPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDMsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmsucHJvdG90eXBlLmNsZWFyWiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDMsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFyay5wcm90b3R5cGUuaGFzWiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDMpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgZmxvYXQgdmlzaWJpbGl0eSA9IDQ7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmsucHJvdG90eXBlLmdldFZpc2liaWxpdHkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDQsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmt9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrLnByb3RvdHlwZS5zZXRWaXNpYmlsaXR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA0LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmt9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrLnByb3RvdHlwZS5jbGVhclZpc2liaWxpdHkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA0LCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmsucHJvdG90eXBlLmhhc1Zpc2liaWxpdHkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA0KSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGZsb2F0IHByZXNlbmNlID0gNTtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFyay5wcm90b3R5cGUuZ2V0UHJlc2VuY2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDUsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmt9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrLnByb3RvdHlwZS5zZXRQcmVzZW5jZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgNSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFyay5wcm90b3R5cGUuY2xlYXJQcmVzZW5jZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDUsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFyay5wcm90b3R5cGUuaGFzUHJlc2VuY2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA1KSAhPSBudWxsO1xufTtcblxuXG5cbi8qKlxuICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLlxuICogQHByaXZhdGUgeyFBcnJheTxudW1iZXI+fVxuICogQGNvbnN0XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0LnJlcGVhdGVkRmllbGRzXyA9IFsxXTtcblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya0xpc3QucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya0xpc3QudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya0xpc3QudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xuICB2YXIgZiwgb2JqID0ge1xuICAgIGxhbmRtYXJrTGlzdDoganNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0TGFuZG1hcmtMaXN0KCksXG4gICAgcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFyay50b09iamVjdCwgaW5jbHVkZUluc3RhbmNlKVxuICB9O1xuXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG59XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya0xpc3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0LmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya0xpc3Q7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya0xpc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmsuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5hZGRMYW5kbWFyayh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0fSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gbWVzc2FnZS5nZXRMYW5kbWFya0xpc3QoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZShcbiAgICAgIDEsXG4gICAgICBmLFxuICAgICAgcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFyay5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBOb3JtYWxpemVkTGFuZG1hcmsgbGFuZG1hcmsgPSAxO1xuICogQHJldHVybiB7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya0xpc3QucHJvdG90eXBlLmdldExhbmRtYXJrTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBleyFBcnJheTwhcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFyaz59ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFyaywgMSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrPn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdH0gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya0xpc3QucHJvdG90eXBlLnNldExhbmRtYXJrTGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcms9fSBvcHRfdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya0xpc3QucHJvdG90eXBlLmFkZExhbmRtYXJrID0gZnVuY3Rpb24ob3B0X3ZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDEsIG9wdF92YWx1ZSwgcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFyaywgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0LnByb3RvdHlwZS5jbGVhckxhbmRtYXJrTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRMYW5kbWFya0xpc3QoW10pO1xufTtcblxuXG5cbi8qKlxuICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLlxuICogQHByaXZhdGUgeyFBcnJheTxudW1iZXI+fVxuICogQGNvbnN0XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0Q29sbGVjdGlvbi5yZXBlYXRlZEZpZWxkc18gPSBbMV07XG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0Q29sbGVjdGlvbi5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdENvbGxlY3Rpb24udG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdENvbGxlY3Rpb259IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0Q29sbGVjdGlvbi50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgbGFuZG1hcmtMaXN0TGlzdDoganNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0TGFuZG1hcmtMaXN0TGlzdCgpLFxuICAgIHByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0LnRvT2JqZWN0LCBpbmNsdWRlSW5zdGFuY2UpXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdENvbGxlY3Rpb259XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0Q29sbGVjdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0Q29sbGVjdGlvbjtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0Q29sbGVjdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdENvbGxlY3Rpb259IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya0xpc3RDb2xsZWN0aW9ufVxuICovXG5wcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdENvbGxlY3Rpb24uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdDtcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLmFkZExhbmRtYXJrTGlzdCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0Q29sbGVjdGlvbi5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya0xpc3RDb2xsZWN0aW9uLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya0xpc3RDb2xsZWN0aW9ufSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0Q29sbGVjdGlvbi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IG1lc3NhZ2UuZ2V0TGFuZG1hcmtMaXN0TGlzdCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKFxuICAgICAgMSxcbiAgICAgIGYsXG4gICAgICBwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBOb3JtYWxpemVkTGFuZG1hcmtMaXN0IGxhbmRtYXJrX2xpc3QgPSAxO1xuICogQHJldHVybiB7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdD59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0Q29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0TGFuZG1hcmtMaXN0TGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBleyFBcnJheTwhcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRMYW5kbWFya0xpc3Q+fSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0LCAxKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0Pn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdENvbGxlY3Rpb259IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0Q29sbGVjdGlvbi5wcm90b3R5cGUuc2V0TGFuZG1hcmtMaXN0TGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0PX0gb3B0X3ZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0fVxuICovXG5wcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZExhbmRtYXJrTGlzdENvbGxlY3Rpb24ucHJvdG90eXBlLmFkZExhbmRtYXJrTGlzdCA9IGZ1bmN0aW9uKG9wdF92YWx1ZSwgb3B0X2luZGV4KSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCAxLCBvcHRfdmFsdWUsIHByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0LCBvcHRfaW5kZXgpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0Q29sbGVjdGlvbn0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0Q29sbGVjdGlvbi5wcm90b3R5cGUuY2xlYXJMYW5kbWFya0xpc3RMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldExhbmRtYXJrTGlzdExpc3QoW10pO1xufTtcblxuXG5nb29nLm9iamVjdC5leHRlbmQoZXhwb3J0cywgcHJvdG8ubWVkaWFwaXBlKTtcbiIsIi8vIHNvdXJjZTogbWVkaWFwaXBlL2ZyYW1ld29yay9mb3JtYXRzL3JlY3QucHJvdG9cbi8qKlxuICogQGZpbGVvdmVydmlld1xuICogQGVuaGFuY2VhYmxlXG4gKiBAc3VwcHJlc3Mge21pc3NpbmdSZXF1aXJlfSByZXBvcnRzIGVycm9yIG9uIGltcGxpY2l0IHR5cGUgdXNhZ2VzLlxuICogQHN1cHByZXNzIHttZXNzYWdlQ29udmVudGlvbnN9IEpTIENvbXBpbGVyIHJlcG9ydHMgYW4gZXJyb3IgaWYgYSB2YXJpYWJsZSBvclxuICogICAgIGZpZWxkIHN0YXJ0cyB3aXRoICdNU0dfJyBhbmQgaXNuJ3QgYSB0cmFuc2xhdGFibGUgbWVzc2FnZS5cbiAqIEBwdWJsaWNcbiAqL1xuLy8gR0VORVJBVEVEIENPREUgLS0gRE8gTk9UIEVESVQhXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcblxudmFyIGpzcGIgPSByZXF1aXJlKCdnb29nbGUtcHJvdG9idWYnKTtcbnZhciBnb29nID0ganNwYjtcbnZhciBnbG9iYWwgPVxuICAgICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93KSB8fFxuICAgICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwpIHx8XG4gICAgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmKSB8fFxuICAgIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KS5jYWxsKG51bGwpIHx8XG4gICAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdCcsIG51bGwsIGdsb2JhbCk7XG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ubWVkaWFwaXBlLlJlY3QnLCBudWxsLCBnbG9iYWwpO1xuLyoqXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxuICogdmFsaWQuXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SZWN0ID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLm1lZGlhcGlwZS5SZWN0LCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLlJlY3QuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLlJlY3QnO1xufVxuLyoqXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxuICogdmFsaWQuXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdCA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZFJlY3QsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZFJlY3QuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRSZWN0Jztcbn1cblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlJlY3QucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLlJlY3QudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuUmVjdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlJlY3QudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xuICB2YXIgZiwgb2JqID0ge1xuICAgIHhDZW50ZXI6IChmID0ganNwYi5NZXNzYWdlLmdldEZpZWxkKG1zZywgMSkpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIHlDZW50ZXI6IChmID0ganNwYi5NZXNzYWdlLmdldEZpZWxkKG1zZywgMikpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIGhlaWdodDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCAzKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgd2lkdGg6IChmID0ganNwYi5NZXNzYWdlLmdldEZpZWxkKG1zZywgNCkpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIHJvdGF0aW9uOiBqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQobXNnLCA1LCAwLjApLFxuICAgIHJlY3RJZDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCA2KSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGZcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5SZWN0fVxuICovXG5wcm90by5tZWRpYXBpcGUuUmVjdC5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS5SZWN0O1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLlJlY3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLlJlY3R9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlJlY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SZWN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkSW50MzIoKSk7XG4gICAgICBtc2cuc2V0WENlbnRlcih2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkSW50MzIoKSk7XG4gICAgICBtc2cuc2V0WUNlbnRlcih2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkSW50MzIoKSk7XG4gICAgICBtc2cuc2V0SGVpZ2h0KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQzMigpKTtcbiAgICAgIG1zZy5zZXRXaWR0aCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkRmxvYXQoKSk7XG4gICAgICBtc2cuc2V0Um90YXRpb24odmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA2OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDY0KCkpO1xuICAgICAgbXNnLnNldFJlY3RJZCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SZWN0LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUuUmVjdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5SZWN0fSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SZWN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMSkpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlSW50MzIoXG4gICAgICAxLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDIpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUludDMyKFxuICAgICAgMixcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAzKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVJbnQzMihcbiAgICAgIDMsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgNCkpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlSW50MzIoXG4gICAgICA0LFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDUpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUZsb2F0KFxuICAgICAgNSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCA2KSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVJbnQ2NChcbiAgICAgIDYsXG4gICAgICBmXG4gICAgKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIHJlcXVpcmVkIGludDMyIHhfY2VudGVyID0gMTtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlJlY3QucHJvdG90eXBlLmdldFhDZW50ZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMSwgMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5SZWN0fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlJlY3QucHJvdG90eXBlLnNldFhDZW50ZXIgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlJlY3R9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUmVjdC5wcm90b3R5cGUuY2xlYXJYQ2VudGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMSwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuUmVjdC5wcm90b3R5cGUuaGFzWENlbnRlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogcmVxdWlyZWQgaW50MzIgeV9jZW50ZXIgPSAyO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuUmVjdC5wcm90b3R5cGUuZ2V0WUNlbnRlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCAwKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlJlY3R9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUmVjdC5wcm90b3R5cGUuc2V0WUNlbnRlciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUmVjdH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SZWN0LnByb3RvdHlwZS5jbGVhcllDZW50ZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SZWN0LnByb3RvdHlwZS5oYXNZQ2VudGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiByZXF1aXJlZCBpbnQzMiBoZWlnaHQgPSAzO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuUmVjdC5wcm90b3R5cGUuZ2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDMsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUmVjdH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SZWN0LnByb3RvdHlwZS5zZXRIZWlnaHQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDMsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlJlY3R9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUmVjdC5wcm90b3R5cGUuY2xlYXJIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SZWN0LnByb3RvdHlwZS5oYXNIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAzKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIHJlcXVpcmVkIGludDMyIHdpZHRoID0gNDtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlJlY3QucHJvdG90eXBlLmdldFdpZHRoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDQsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUmVjdH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SZWN0LnByb3RvdHlwZS5zZXRXaWR0aCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgNCwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUmVjdH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SZWN0LnByb3RvdHlwZS5jbGVhcldpZHRoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgNCwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuUmVjdC5wcm90b3R5cGUuaGFzV2lkdGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA0KSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGZsb2F0IHJvdGF0aW9uID0gNTtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlJlY3QucHJvdG90eXBlLmdldFJvdGF0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdCh0aGlzLCA1LCAwLjApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUmVjdH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SZWN0LnByb3RvdHlwZS5zZXRSb3RhdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgNSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUmVjdH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SZWN0LnByb3RvdHlwZS5jbGVhclJvdGF0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgNSwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuUmVjdC5wcm90b3R5cGUuaGFzUm90YXRpb24gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA1KSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGludDY0IHJlY3RfaWQgPSA2O1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuUmVjdC5wcm90b3R5cGUuZ2V0UmVjdElkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDYsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUmVjdH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SZWN0LnByb3RvdHlwZS5zZXRSZWN0SWQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDYsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlJlY3R9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUmVjdC5wcm90b3R5cGUuY2xlYXJSZWN0SWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA2LCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SZWN0LnByb3RvdHlwZS5oYXNSZWN0SWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA2KSAhPSBudWxsO1xufTtcblxuXG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdC5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZFJlY3QudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZFJlY3R9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdC50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgeENlbnRlcjogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQobXNnLCAxKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgeUNlbnRlcjogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQobXNnLCAyKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgaGVpZ2h0OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRPcHRpb25hbEZsb2F0aW5nUG9pbnRGaWVsZChtc2csIDMpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICB3aWR0aDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQobXNnLCA0KSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgcm90YXRpb246IGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdChtc2csIDUsIDAuMCksXG4gICAgcmVjdElkOiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtc2csIDYpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZlxuICB9O1xuXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG59XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRSZWN0fVxuICovXG5wcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZFJlY3QuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZFJlY3Q7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZFJlY3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRSZWN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRSZWN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkRmxvYXQoKSk7XG4gICAgICBtc2cuc2V0WENlbnRlcih2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkRmxvYXQoKSk7XG4gICAgICBtc2cuc2V0WUNlbnRlcih2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkRmxvYXQoKSk7XG4gICAgICBtc2cuc2V0SGVpZ2h0KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRGbG9hdCgpKTtcbiAgICAgIG1zZy5zZXRXaWR0aCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkRmxvYXQoKSk7XG4gICAgICBtc2cuc2V0Um90YXRpb24odmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA2OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDY0KCkpO1xuICAgICAgbXNnLnNldFJlY3RJZCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRSZWN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRSZWN0fSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDEpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUZsb2F0KFxuICAgICAgMSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAyKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVGbG9hdChcbiAgICAgIDIsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMykpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlRmxvYXQoXG4gICAgICAzLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDQpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUZsb2F0KFxuICAgICAgNCxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCA1KSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVGbG9hdChcbiAgICAgIDUsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgNikpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlSW50NjQoXG4gICAgICA2LFxuICAgICAgZlxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiByZXF1aXJlZCBmbG9hdCB4X2NlbnRlciA9IDE7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdC5wcm90b3R5cGUuZ2V0WENlbnRlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQodGhpcywgMSwgMC4wKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRSZWN0fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRSZWN0LnByb3RvdHlwZS5zZXRYQ2VudGVyID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdC5wcm90b3R5cGUuY2xlYXJYQ2VudGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMSwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZFJlY3QucHJvdG90eXBlLmhhc1hDZW50ZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIHJlcXVpcmVkIGZsb2F0IHlfY2VudGVyID0gMjtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRSZWN0LnByb3RvdHlwZS5nZXRZQ2VudGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCAwLjApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZFJlY3R9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZFJlY3QucHJvdG90eXBlLnNldFlDZW50ZXIgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRSZWN0fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRSZWN0LnByb3RvdHlwZS5jbGVhcllDZW50ZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdC5wcm90b3R5cGUuaGFzWUNlbnRlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogcmVxdWlyZWQgZmxvYXQgaGVpZ2h0ID0gMztcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRSZWN0LnByb3RvdHlwZS5nZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDMsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdC5wcm90b3R5cGUuc2V0SGVpZ2h0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdC5wcm90b3R5cGUuY2xlYXJIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdC5wcm90b3R5cGUuaGFzSGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMykgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiByZXF1aXJlZCBmbG9hdCB3aWR0aCA9IDQ7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdC5wcm90b3R5cGUuZ2V0V2lkdGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDQsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdC5wcm90b3R5cGUuc2V0V2lkdGggPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDQsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRSZWN0fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRSZWN0LnByb3RvdHlwZS5jbGVhcldpZHRoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgNCwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZFJlY3QucHJvdG90eXBlLmhhc1dpZHRoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNCkgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBmbG9hdCByb3RhdGlvbiA9IDU7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdC5wcm90b3R5cGUuZ2V0Um90YXRpb24gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDUsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdC5wcm90b3R5cGUuc2V0Um90YXRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDUsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRSZWN0fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRSZWN0LnByb3RvdHlwZS5jbGVhclJvdGF0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgNSwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuTm9ybWFsaXplZFJlY3QucHJvdG90eXBlLmhhc1JvdGF0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNSkgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBpbnQ2NCByZWN0X2lkID0gNjtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLk5vcm1hbGl6ZWRSZWN0LnByb3RvdHlwZS5nZXRSZWN0SWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgNiwgMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdC5wcm90b3R5cGUuc2V0UmVjdElkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA2LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdC5wcm90b3R5cGUuY2xlYXJSZWN0SWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA2LCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Ob3JtYWxpemVkUmVjdC5wcm90b3R5cGUuaGFzUmVjdElkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNikgIT0gbnVsbDtcbn07XG5cblxuZ29vZy5vYmplY3QuZXh0ZW5kKGV4cG9ydHMsIHByb3RvLm1lZGlhcGlwZSk7XG4iLCIvLyBzb3VyY2U6IG1lZGlhcGlwZS90YXNrcy9jYy92aXNpb24vZ2VzdHVyZV9yZWNvZ25pemVyL3Byb3RvL2dlc3R1cmVfY2xhc3NpZmllcl9ncmFwaF9vcHRpb25zLnByb3RvXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqIEBlbmhhbmNlYWJsZVxuICogQHN1cHByZXNzIHttaXNzaW5nUmVxdWlyZX0gcmVwb3J0cyBlcnJvciBvbiBpbXBsaWNpdCB0eXBlIHVzYWdlcy5cbiAqIEBzdXBwcmVzcyB7bWVzc2FnZUNvbnZlbnRpb25zfSBKUyBDb21waWxlciByZXBvcnRzIGFuIGVycm9yIGlmIGEgdmFyaWFibGUgb3JcbiAqICAgICBmaWVsZCBzdGFydHMgd2l0aCAnTVNHXycgYW5kIGlzbid0IGEgdHJhbnNsYXRhYmxlIG1lc3NhZ2UuXG4gKiBAcHVibGljXG4gKi9cbi8vIEdFTkVSQVRFRCBDT0RFIC0tIERPIE5PVCBFRElUIVxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbnZhciBqc3BiID0gcmVxdWlyZSgnZ29vZ2xlLXByb3RvYnVmJyk7XG52YXIgZ29vZyA9IGpzcGI7XG52YXIgZ2xvYmFsID1cbiAgICAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMpIHx8XG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdykgfHxcbiAgICAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsKSB8fFxuICAgICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZikgfHxcbiAgICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkuY2FsbChudWxsKSB8fFxuICAgIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbnZhciBtZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3JfcGIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi8uLi9tZWRpYXBpcGUvZnJhbWV3b3JrL2NhbGN1bGF0b3JfcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgbWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX3BiKTtcbnZhciBtZWRpYXBpcGVfdGFza3NfY2NfY29tcG9uZW50c19wcm9jZXNzb3JzX3Byb3RvX2NsYXNzaWZpZXJfb3B0aW9uc19wYiA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uLy4uLy4uL21lZGlhcGlwZS90YXNrcy9jYy9jb21wb25lbnRzL3Byb2Nlc3NvcnMvcHJvdG8vY2xhc3NpZmllcl9vcHRpb25zX3BiLmpzJyk7XG5nb29nLm9iamVjdC5leHRlbmQocHJvdG8sIG1lZGlhcGlwZV90YXNrc19jY19jb21wb25lbnRzX3Byb2Nlc3NvcnNfcHJvdG9fY2xhc3NpZmllcl9vcHRpb25zX3BiKTtcbnZhciBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19iYXNlX29wdGlvbnNfcGIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi8uLi9tZWRpYXBpcGUvdGFza3MvY2MvY29yZS9wcm90by9iYXNlX29wdGlvbnNfcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucycsIG51bGwsIGdsb2JhbCk7XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucyc7XG59XG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnN9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBiYXNlT3B0aW9uczogKGYgPSBtc2cuZ2V0QmFzZU9wdGlvbnMoKSkgJiYgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiLkJhc2VPcHRpb25zLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXG4gICAgY2xhc3NpZmllck9wdGlvbnM6IChmID0gbXNnLmdldENsYXNzaWZpZXJPcHRpb25zKCkpICYmIG1lZGlhcGlwZV90YXNrc19jY19jb21wb25lbnRzX3Byb2Nlc3NvcnNfcHJvdG9fY2xhc3NpZmllcl9vcHRpb25zX3BiLkNsYXNzaWZpZXJPcHRpb25zLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZilcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnN9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiLkJhc2VPcHRpb25zO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYi5CYXNlT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldEJhc2VPcHRpb25zKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBtZWRpYXBpcGVfdGFza3NfY2NfY29tcG9uZW50c19wcm9jZXNzb3JzX3Byb3RvX2NsYXNzaWZpZXJfb3B0aW9uc19wYi5DbGFzc2lmaWVyT3B0aW9ucztcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxtZWRpYXBpcGVfdGFza3NfY2NfY29tcG9uZW50c19wcm9jZXNzb3JzX3Byb3RvX2NsYXNzaWZpZXJfb3B0aW9uc19wYi5DbGFzc2lmaWVyT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldENsYXNzaWZpZXJPcHRpb25zKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnN9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG4gIGYgPSBtZXNzYWdlLmdldEJhc2VPcHRpb25zKCk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxuICAgICAgMSxcbiAgICAgIGYsXG4gICAgICBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19iYXNlX29wdGlvbnNfcGIuQmFzZU9wdGlvbnMuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldENsYXNzaWZpZXJPcHRpb25zKCk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxuICAgICAgMixcbiAgICAgIGYsXG4gICAgICBtZWRpYXBpcGVfdGFza3NfY2NfY29tcG9uZW50c19wcm9jZXNzb3JzX3Byb3RvX2NsYXNzaWZpZXJfb3B0aW9uc19wYi5DbGFzc2lmaWVyT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbn07XG5cblxuXG4vKipcbiAqIEEgdHVwbGUgb2Yge2ZpZWxkIG51bWJlciwgY2xhc3MgY29uc3RydWN0b3J9IGZvciB0aGUgZXh0ZW5zaW9uXG4gKiBmaWVsZCBuYW1lZCBgZXh0YC5cbiAqIEB0eXBlIHshanNwYi5FeHRlbnNpb25GaWVsZEluZm88IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMuZXh0ID0gbmV3IGpzcGIuRXh0ZW5zaW9uRmllbGRJbmZvKFxuICAgIDQ3ODgyNTQ2NSxcbiAgICB7ZXh0OiAwfSxcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucyxcbiAgICAgLyoqIEB0eXBlIHs/ZnVuY3Rpb24oKGJvb2xlYW58dW5kZWZpbmVkKSwhanNwYi5NZXNzYWdlPSk6ICFPYmplY3R9ICovIChcbiAgICAgICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zLnRvT2JqZWN0KSxcbiAgICAwKTtcblxubWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX29wdGlvbnNfcGIuQ2FsY3VsYXRvck9wdGlvbnMuZXh0ZW5zaW9uc0JpbmFyeVs0Nzg4MjU0NjVdID0gbmV3IGpzcGIuRXh0ZW5zaW9uRmllbGRCaW5hcnlJbmZvKFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zLmV4dCxcbiAgICBqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZE1lc3NhZ2UsXG4gICAganNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlTWVzc2FnZSxcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcixcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIsXG4gICAgZmFsc2UpO1xuLy8gVGhpcyByZWdpc3RlcnMgdGhlIGV4dGVuc2lvbiBmaWVsZCB3aXRoIHRoZSBleHRlbmRlZCBjbGFzcywgc28gdGhhdFxuLy8gdG9PYmplY3QoKSB3aWxsIGZ1bmN0aW9uIGNvcnJlY3RseS5cbm1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9vcHRpb25zX3BiLkNhbGN1bGF0b3JPcHRpb25zLmV4dGVuc2lvbnNbNDc4ODI1NDY1XSA9IHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zLmV4dDtcblxuLyoqXG4gKiBvcHRpb25hbCBtZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9ucyBiYXNlX29wdGlvbnMgPSAxO1xuICogQHJldHVybiB7P3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuZ2V0QmFzZU9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnN9ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYi5CYXNlT3B0aW9ucywgMSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zfHVuZGVmaW5lZH0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9uc30gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLnNldEJhc2VPcHRpb25zID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLmNsZWFyQmFzZU9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0QmFzZU9wdGlvbnModW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuaGFzQmFzZU9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIG1lZGlhcGlwZS50YXNrcy5jb21wb25lbnRzLnByb2Nlc3NvcnMucHJvdG8uQ2xhc3NpZmllck9wdGlvbnMgY2xhc3NpZmllcl9vcHRpb25zID0gMjtcbiAqIEByZXR1cm4gez9wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuZ2V0Q2xhc3NpZmllck9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvbXBvbmVudHMucHJvY2Vzc29ycy5wcm90by5DbGFzc2lmaWVyT3B0aW9uc30gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvbXBvbmVudHNfcHJvY2Vzc29yc19wcm90b19jbGFzc2lmaWVyX29wdGlvbnNfcGIuQ2xhc3NpZmllck9wdGlvbnMsIDIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUudGFza3MuY29tcG9uZW50cy5wcm9jZXNzb3JzLnByb3RvLkNsYXNzaWZpZXJPcHRpb25zfHVuZGVmaW5lZH0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9uc30gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLnNldENsYXNzaWZpZXJPcHRpb25zID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLmNsZWFyQ2xhc3NpZmllck9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0Q2xhc3NpZmllck9wdGlvbnModW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuaGFzQ2xhc3NpZmllck9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xufTtcblxuXG5cbi8qKlxuICogQSB0dXBsZSBvZiB7ZmllbGQgbnVtYmVyLCBjbGFzcyBjb25zdHJ1Y3Rvcn0gZm9yIHRoZSBleHRlbnNpb25cbiAqIGZpZWxkIG5hbWVkIGBleHRgLlxuICogQHR5cGUgeyFqc3BiLkV4dGVuc2lvbkZpZWxkSW5mbzwhcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnM+fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy5leHQgPSBuZXcganNwYi5FeHRlbnNpb25GaWVsZEluZm8oXG4gICAgNDc4ODI1NDY1LFxuICAgIHtleHQ6IDB9LFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zLFxuICAgICAvKiogQHR5cGUgez9mdW5jdGlvbigoYm9vbGVhbnx1bmRlZmluZWQpLCFqc3BiLk1lc3NhZ2U9KTogIU9iamVjdH0gKi8gKFxuICAgICAgICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMudG9PYmplY3QpLFxuICAgIDApO1xuXG5tZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3Jfb3B0aW9uc19wYi5DYWxjdWxhdG9yT3B0aW9ucy5leHRlbnNpb25zQmluYXJ5WzQ3ODgyNTQ2NV0gPSBuZXcganNwYi5FeHRlbnNpb25GaWVsZEJpbmFyeUluZm8oXG4gICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMuZXh0LFxuICAgIGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkTWVzc2FnZSxcbiAgICBqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVNZXNzYWdlLFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyLFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcixcbiAgICBmYWxzZSk7XG4vLyBUaGlzIHJlZ2lzdGVycyB0aGUgZXh0ZW5zaW9uIGZpZWxkIHdpdGggdGhlIGV4dGVuZGVkIGNsYXNzLCBzbyB0aGF0XG4vLyB0b09iamVjdCgpIHdpbGwgZnVuY3Rpb24gY29ycmVjdGx5LlxubWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX29wdGlvbnNfcGIuQ2FsY3VsYXRvck9wdGlvbnMuZXh0ZW5zaW9uc1s0Nzg4MjU0NjVdID0gcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMuZXh0O1xuXG5nb29nLm9iamVjdC5leHRlbmQoZXhwb3J0cywgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8pO1xuIiwiLy8gc291cmNlOiBtZWRpYXBpcGUvdGFza3MvY2MvdmlzaW9uL2dlc3R1cmVfcmVjb2duaXplci9wcm90by9nZXN0dXJlX2VtYmVkZGVyX2dyYXBoX29wdGlvbnMucHJvdG9cbi8qKlxuICogQGZpbGVvdmVydmlld1xuICogQGVuaGFuY2VhYmxlXG4gKiBAc3VwcHJlc3Mge21pc3NpbmdSZXF1aXJlfSByZXBvcnRzIGVycm9yIG9uIGltcGxpY2l0IHR5cGUgdXNhZ2VzLlxuICogQHN1cHByZXNzIHttZXNzYWdlQ29udmVudGlvbnN9IEpTIENvbXBpbGVyIHJlcG9ydHMgYW4gZXJyb3IgaWYgYSB2YXJpYWJsZSBvclxuICogICAgIGZpZWxkIHN0YXJ0cyB3aXRoICdNU0dfJyBhbmQgaXNuJ3QgYSB0cmFuc2xhdGFibGUgbWVzc2FnZS5cbiAqIEBwdWJsaWNcbiAqL1xuLy8gR0VORVJBVEVEIENPREUgLS0gRE8gTk9UIEVESVQhXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcblxudmFyIGpzcGIgPSByZXF1aXJlKCdnb29nbGUtcHJvdG9idWYnKTtcbnZhciBnb29nID0ganNwYjtcbnZhciBnbG9iYWwgPVxuICAgICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93KSB8fFxuICAgICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwpIHx8XG4gICAgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmKSB8fFxuICAgIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KS5jYWxsKG51bGwpIHx8XG4gICAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxudmFyIG1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9wYiA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uLy4uLy4uL21lZGlhcGlwZS9mcmFtZXdvcmsvY2FsY3VsYXRvcl9wYi5qcycpO1xuZ29vZy5vYmplY3QuZXh0ZW5kKHByb3RvLCBtZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3JfcGIpO1xudmFyIG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYiA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uLy4uLy4uL21lZGlhcGlwZS90YXNrcy9jYy9jb3JlL3Byb3RvL2Jhc2Vfb3B0aW9uc19wYi5qcycpO1xuZ29vZy5vYmplY3QuZXh0ZW5kKHByb3RvLCBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19iYXNlX29wdGlvbnNfcGIpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVFbWJlZGRlckdyYXBoT3B0aW9ucycsIG51bGwsIGdsb2JhbCk7XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVFbWJlZGRlckdyYXBoT3B0aW9ucywganNwYi5NZXNzYWdlKTtcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVFbWJlZGRlckdyYXBoT3B0aW9ucy5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnMnO1xufVxuXG5cblxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnMudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xuICB2YXIgZiwgb2JqID0ge1xuICAgIGJhc2VPcHRpb25zOiAoZiA9IG1zZy5nZXRCYXNlT3B0aW9ucygpKSAmJiBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19iYXNlX29wdGlvbnNfcGIuQmFzZU9wdGlvbnMudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKVxuICB9O1xuXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG59XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnM7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVFbWJlZGRlckdyYXBoT3B0aW9uc31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiLkJhc2VPcHRpb25zO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYi5CYXNlT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldEJhc2VPcHRpb25zKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnMuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnN9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gbWVzc2FnZS5nZXRCYXNlT3B0aW9ucygpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDEsXG4gICAgICBmLFxuICAgICAgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiLkJhc2VPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxufTtcblxuXG5cbi8qKlxuICogQSB0dXBsZSBvZiB7ZmllbGQgbnVtYmVyLCBjbGFzcyBjb25zdHJ1Y3Rvcn0gZm9yIHRoZSBleHRlbnNpb25cbiAqIGZpZWxkIG5hbWVkIGBleHRgLlxuICogQHR5cGUgeyFqc3BiLkV4dGVuc2lvbkZpZWxkSW5mbzwhcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zLmV4dCA9IG5ldyBqc3BiLkV4dGVuc2lvbkZpZWxkSW5mbyhcbiAgICA0Nzg4MjU0MjIsXG4gICAge2V4dDogMH0sXG4gICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zLFxuICAgICAvKiogQHR5cGUgez9mdW5jdGlvbigoYm9vbGVhbnx1bmRlZmluZWQpLCFqc3BiLk1lc3NhZ2U9KTogIU9iamVjdH0gKi8gKFxuICAgICAgICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zLnRvT2JqZWN0KSxcbiAgICAwKTtcblxubWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX29wdGlvbnNfcGIuQ2FsY3VsYXRvck9wdGlvbnMuZXh0ZW5zaW9uc0JpbmFyeVs0Nzg4MjU0MjJdID0gbmV3IGpzcGIuRXh0ZW5zaW9uRmllbGRCaW5hcnlJbmZvKFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVFbWJlZGRlckdyYXBoT3B0aW9ucy5leHQsXG4gICAganNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRNZXNzYWdlLFxuICAgIGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZU1lc3NhZ2UsXG4gICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyLFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVFbWJlZGRlckdyYXBoT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIsXG4gICAgZmFsc2UpO1xuLy8gVGhpcyByZWdpc3RlcnMgdGhlIGV4dGVuc2lvbiBmaWVsZCB3aXRoIHRoZSBleHRlbmRlZCBjbGFzcywgc28gdGhhdFxuLy8gdG9PYmplY3QoKSB3aWxsIGZ1bmN0aW9uIGNvcnJlY3RseS5cbm1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9vcHRpb25zX3BiLkNhbGN1bGF0b3JPcHRpb25zLmV4dGVuc2lvbnNbNDc4ODI1NDIyXSA9IHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVFbWJlZGRlckdyYXBoT3B0aW9ucy5leHQ7XG5cbi8qKlxuICogb3B0aW9uYWwgbWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnMgYmFzZV9vcHRpb25zID0gMTtcbiAqIEByZXR1cm4gez9wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9uc31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5nZXRCYXNlT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9uc30gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiLkJhc2VPcHRpb25zLCAxKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnN8dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVFbWJlZGRlckdyYXBoT3B0aW9uc30gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5zZXRCYXNlT3B0aW9ucyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLmNsZWFyQmFzZU9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0QmFzZU9wdGlvbnModW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLmhhc0Jhc2VPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcbn07XG5cblxuXG4vKipcbiAqIEEgdHVwbGUgb2Yge2ZpZWxkIG51bWJlciwgY2xhc3MgY29uc3RydWN0b3J9IGZvciB0aGUgZXh0ZW5zaW9uXG4gKiBmaWVsZCBuYW1lZCBgZXh0YC5cbiAqIEB0eXBlIHshanNwYi5FeHRlbnNpb25GaWVsZEluZm88IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVFbWJlZGRlckdyYXBoT3B0aW9ucz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVFbWJlZGRlckdyYXBoT3B0aW9ucy5leHQgPSBuZXcganNwYi5FeHRlbnNpb25GaWVsZEluZm8oXG4gICAgNDc4ODI1NDIyLFxuICAgIHtleHQ6IDB9LFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVFbWJlZGRlckdyYXBoT3B0aW9ucyxcbiAgICAgLyoqIEB0eXBlIHs/ZnVuY3Rpb24oKGJvb2xlYW58dW5kZWZpbmVkKSwhanNwYi5NZXNzYWdlPSk6ICFPYmplY3R9ICovIChcbiAgICAgICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVFbWJlZGRlckdyYXBoT3B0aW9ucy50b09iamVjdCksXG4gICAgMCk7XG5cbm1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9vcHRpb25zX3BiLkNhbGN1bGF0b3JPcHRpb25zLmV4dGVuc2lvbnNCaW5hcnlbNDc4ODI1NDIyXSA9IG5ldyBqc3BiLkV4dGVuc2lvbkZpZWxkQmluYXJ5SW5mbyhcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnMuZXh0LFxuICAgIGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkTWVzc2FnZSxcbiAgICBqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVNZXNzYWdlLFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVFbWJlZGRlckdyYXBoT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcixcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyLFxuICAgIGZhbHNlKTtcbi8vIFRoaXMgcmVnaXN0ZXJzIHRoZSBleHRlbnNpb24gZmllbGQgd2l0aCB0aGUgZXh0ZW5kZWQgY2xhc3MsIHNvIHRoYXRcbi8vIHRvT2JqZWN0KCkgd2lsbCBmdW5jdGlvbiBjb3JyZWN0bHkuXG5tZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3Jfb3B0aW9uc19wYi5DYWxjdWxhdG9yT3B0aW9ucy5leHRlbnNpb25zWzQ3ODgyNTQyMl0gPSBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnMuZXh0O1xuXG5nb29nLm9iamVjdC5leHRlbmQoZXhwb3J0cywgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8pO1xuIiwiLy8gc291cmNlOiBtZWRpYXBpcGUvdGFza3MvY2MvdmlzaW9uL2dlc3R1cmVfcmVjb2duaXplci9wcm90by9oYW5kX2dlc3R1cmVfcmVjb2duaXplcl9ncmFwaF9vcHRpb25zLnByb3RvXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqIEBlbmhhbmNlYWJsZVxuICogQHN1cHByZXNzIHttaXNzaW5nUmVxdWlyZX0gcmVwb3J0cyBlcnJvciBvbiBpbXBsaWNpdCB0eXBlIHVzYWdlcy5cbiAqIEBzdXBwcmVzcyB7bWVzc2FnZUNvbnZlbnRpb25zfSBKUyBDb21waWxlciByZXBvcnRzIGFuIGVycm9yIGlmIGEgdmFyaWFibGUgb3JcbiAqICAgICBmaWVsZCBzdGFydHMgd2l0aCAnTVNHXycgYW5kIGlzbid0IGEgdHJhbnNsYXRhYmxlIG1lc3NhZ2UuXG4gKiBAcHVibGljXG4gKi9cbi8vIEdFTkVSQVRFRCBDT0RFIC0tIERPIE5PVCBFRElUIVxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbnZhciBqc3BiID0gcmVxdWlyZSgnZ29vZ2xlLXByb3RvYnVmJyk7XG52YXIgZ29vZyA9IGpzcGI7XG52YXIgZ2xvYmFsID1cbiAgICAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMpIHx8XG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdykgfHxcbiAgICAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsKSB8fFxuICAgICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZikgfHxcbiAgICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkuY2FsbChudWxsKSB8fFxuICAgIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbnZhciBtZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3JfcGIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi8uLi9tZWRpYXBpcGUvZnJhbWV3b3JrL2NhbGN1bGF0b3JfcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgbWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX3BiKTtcbnZhciBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19iYXNlX29wdGlvbnNfcGIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi8uLi9tZWRpYXBpcGUvdGFza3MvY2MvY29yZS9wcm90by9iYXNlX29wdGlvbnNfcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiKTtcbnZhciBtZWRpYXBpcGVfdGFza3NfY2NfdmlzaW9uX2dlc3R1cmVfcmVjb2duaXplcl9wcm90b19nZXN0dXJlX2NsYXNzaWZpZXJfZ3JhcGhfb3B0aW9uc19wYiA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uLy4uLy4uL21lZGlhcGlwZS90YXNrcy9jYy92aXNpb24vZ2VzdHVyZV9yZWNvZ25pemVyL3Byb3RvL2dlc3R1cmVfY2xhc3NpZmllcl9ncmFwaF9vcHRpb25zX3BiLmpzJyk7XG5nb29nLm9iamVjdC5leHRlbmQocHJvdG8sIG1lZGlhcGlwZV90YXNrc19jY192aXNpb25fZ2VzdHVyZV9yZWNvZ25pemVyX3Byb3RvX2dlc3R1cmVfY2xhc3NpZmllcl9ncmFwaF9vcHRpb25zX3BiKTtcbnZhciBtZWRpYXBpcGVfdGFza3NfY2NfdmlzaW9uX2dlc3R1cmVfcmVjb2duaXplcl9wcm90b19nZXN0dXJlX2VtYmVkZGVyX2dyYXBoX29wdGlvbnNfcGIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi8uLi9tZWRpYXBpcGUvdGFza3MvY2MvdmlzaW9uL2dlc3R1cmVfcmVjb2duaXplci9wcm90by9nZXN0dXJlX2VtYmVkZGVyX2dyYXBoX29wdGlvbnNfcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgbWVkaWFwaXBlX3Rhc2tzX2NjX3Zpc2lvbl9nZXN0dXJlX3JlY29nbml6ZXJfcHJvdG9fZ2VzdHVyZV9lbWJlZGRlcl9ncmFwaF9vcHRpb25zX3BiKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMnLCBudWxsLCBnbG9iYWwpO1xuLyoqXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxuICogdmFsaWQuXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucyA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uSGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zJztcbn1cblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uSGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9uc30gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uSGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBiYXNlT3B0aW9uczogKGYgPSBtc2cuZ2V0QmFzZU9wdGlvbnMoKSkgJiYgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiLkJhc2VPcHRpb25zLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXG4gICAgZ2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zOiAoZiA9IG1zZy5nZXRHZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnMoKSkgJiYgbWVkaWFwaXBlX3Rhc2tzX2NjX3Zpc2lvbl9nZXN0dXJlX3JlY29nbml6ZXJfcHJvdG9fZ2VzdHVyZV9lbWJlZGRlcl9ncmFwaF9vcHRpb25zX3BiLkdlc3R1cmVFbWJlZGRlckdyYXBoT3B0aW9ucy50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxuICAgIGNhbm5lZEdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zOiAoZiA9IG1zZy5nZXRDYW5uZWRHZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucygpKSAmJiBtZWRpYXBpcGVfdGFza3NfY2NfdmlzaW9uX2dlc3R1cmVfcmVjb2duaXplcl9wcm90b19nZXN0dXJlX2NsYXNzaWZpZXJfZ3JhcGhfb3B0aW9uc19wYi5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxuICAgIGN1c3RvbUdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zOiAoZiA9IG1zZy5nZXRDdXN0b21HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucygpKSAmJiBtZWRpYXBpcGVfdGFza3NfY2NfdmlzaW9uX2dlc3R1cmVfcmVjb2duaXplcl9wcm90b19nZXN0dXJlX2NsYXNzaWZpZXJfZ3JhcGhfb3B0aW9uc19wYi5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucztcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnN9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uSGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19iYXNlX29wdGlvbnNfcGIuQmFzZU9wdGlvbnM7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiLkJhc2VPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XG4gICAgICBtc2cuc2V0QmFzZU9wdGlvbnModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgdmFyIHZhbHVlID0gbmV3IG1lZGlhcGlwZV90YXNrc19jY192aXNpb25fZ2VzdHVyZV9yZWNvZ25pemVyX3Byb3RvX2dlc3R1cmVfZW1iZWRkZXJfZ3JhcGhfb3B0aW9uc19wYi5HZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnM7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsbWVkaWFwaXBlX3Rhc2tzX2NjX3Zpc2lvbl9nZXN0dXJlX3JlY29nbml6ZXJfcHJvdG9fZ2VzdHVyZV9lbWJlZGRlcl9ncmFwaF9vcHRpb25zX3BiLkdlc3R1cmVFbWJlZGRlckdyYXBoT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldEdlc3R1cmVFbWJlZGRlckdyYXBoT3B0aW9ucyh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgbWVkaWFwaXBlX3Rhc2tzX2NjX3Zpc2lvbl9nZXN0dXJlX3JlY29nbml6ZXJfcHJvdG9fZ2VzdHVyZV9jbGFzc2lmaWVyX2dyYXBoX29wdGlvbnNfcGIuR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnM7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsbWVkaWFwaXBlX3Rhc2tzX2NjX3Zpc2lvbl9nZXN0dXJlX3JlY29nbml6ZXJfcHJvdG9fZ2VzdHVyZV9jbGFzc2lmaWVyX2dyYXBoX29wdGlvbnNfcGIuR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5zZXRDYW5uZWRHZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucyh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgbWVkaWFwaXBlX3Rhc2tzX2NjX3Zpc2lvbl9nZXN0dXJlX3JlY29nbml6ZXJfcHJvdG9fZ2VzdHVyZV9jbGFzc2lmaWVyX2dyYXBoX29wdGlvbnNfcGIuR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnM7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsbWVkaWFwaXBlX3Rhc2tzX2NjX3Zpc2lvbl9nZXN0dXJlX3JlY29nbml6ZXJfcHJvdG9fZ2VzdHVyZV9jbGFzc2lmaWVyX2dyYXBoX29wdGlvbnNfcGIuR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5zZXRDdXN0b21HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucyh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uSGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uSGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zfSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IG1lc3NhZ2UuZ2V0QmFzZU9wdGlvbnMoKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXG4gICAgICAxLFxuICAgICAgZixcbiAgICAgIG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYi5CYXNlT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0R2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zKCk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxuICAgICAgMixcbiAgICAgIGYsXG4gICAgICBtZWRpYXBpcGVfdGFza3NfY2NfdmlzaW9uX2dlc3R1cmVfcmVjb2duaXplcl9wcm90b19nZXN0dXJlX2VtYmVkZGVyX2dyYXBoX29wdGlvbnNfcGIuR2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRDYW5uZWRHZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucygpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDMsXG4gICAgICBmLFxuICAgICAgbWVkaWFwaXBlX3Rhc2tzX2NjX3Zpc2lvbl9nZXN0dXJlX3JlY29nbml6ZXJfcHJvdG9fZ2VzdHVyZV9jbGFzc2lmaWVyX2dyYXBoX29wdGlvbnNfcGIuR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldEN1c3RvbUdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zKCk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxuICAgICAgNCxcbiAgICAgIGYsXG4gICAgICBtZWRpYXBpcGVfdGFza3NfY2NfdmlzaW9uX2dlc3R1cmVfcmVjb2duaXplcl9wcm90b19nZXN0dXJlX2NsYXNzaWZpZXJfZ3JhcGhfb3B0aW9uc19wYi5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbn07XG5cblxuXG4vKipcbiAqIEEgdHVwbGUgb2Yge2ZpZWxkIG51bWJlciwgY2xhc3MgY29uc3RydWN0b3J9IGZvciB0aGUgZXh0ZW5zaW9uXG4gKiBmaWVsZCBuYW1lZCBgZXh0YC5cbiAqIEB0eXBlIHshanNwYi5FeHRlbnNpb25GaWVsZEluZm88IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5leHQgPSBuZXcganNwYi5FeHRlbnNpb25GaWVsZEluZm8oXG4gICAgNDYzMzcwNDUyLFxuICAgIHtleHQ6IDB9LFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucyxcbiAgICAgLyoqIEB0eXBlIHs/ZnVuY3Rpb24oKGJvb2xlYW58dW5kZWZpbmVkKSwhanNwYi5NZXNzYWdlPSk6ICFPYmplY3R9ICovIChcbiAgICAgICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy50b09iamVjdCksXG4gICAgMCk7XG5cbm1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9vcHRpb25zX3BiLkNhbGN1bGF0b3JPcHRpb25zLmV4dGVuc2lvbnNCaW5hcnlbNDYzMzcwNDUyXSA9IG5ldyBqc3BiLkV4dGVuc2lvbkZpZWxkQmluYXJ5SW5mbyhcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMuZXh0LFxuICAgIGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkTWVzc2FnZSxcbiAgICBqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVNZXNzYWdlLFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcixcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyLFxuICAgIGZhbHNlKTtcbi8vIFRoaXMgcmVnaXN0ZXJzIHRoZSBleHRlbnNpb24gZmllbGQgd2l0aCB0aGUgZXh0ZW5kZWQgY2xhc3MsIHNvIHRoYXRcbi8vIHRvT2JqZWN0KCkgd2lsbCBmdW5jdGlvbiBjb3JyZWN0bHkuXG5tZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3Jfb3B0aW9uc19wYi5DYWxjdWxhdG9yT3B0aW9ucy5leHRlbnNpb25zWzQ2MzM3MDQ1Ml0gPSBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMuZXh0O1xuXG4vKipcbiAqIG9wdGlvbmFsIG1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zIGJhc2Vfb3B0aW9ucyA9IDE7XG4gKiBAcmV0dXJuIHs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuZ2V0QmFzZU9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnN9ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYi5CYXNlT3B0aW9ucywgMSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zfHVuZGVmaW5lZH0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnN9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuc2V0QmFzZU9wdGlvbnMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uSGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uSGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5jbGVhckJhc2VPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldEJhc2VPcHRpb25zKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uSGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5oYXNCYXNlT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgR2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zIGdlc3R1cmVfZW1iZWRkZXJfZ3JhcGhfb3B0aW9ucyA9IDI7XG4gKiBAcmV0dXJuIHs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUVtYmVkZGVyR3JhcGhPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLmdldEdlc3R1cmVFbWJlZGRlckdyYXBoT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnN9ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIG1lZGlhcGlwZV90YXNrc19jY192aXNpb25fZ2VzdHVyZV9yZWNvZ25pemVyX3Byb3RvX2dlc3R1cmVfZW1iZWRkZXJfZ3JhcGhfb3B0aW9uc19wYi5HZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnMsIDIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnN8dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9uc30gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uSGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5zZXRHZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uSGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uSGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5jbGVhckdlc3R1cmVFbWJlZGRlckdyYXBoT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRHZXN0dXJlRW1iZWRkZXJHcmFwaE9wdGlvbnModW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLmhhc0dlc3R1cmVFbWJlZGRlckdyYXBoT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMgY2FubmVkX2dlc3R1cmVfY2xhc3NpZmllcl9ncmFwaF9vcHRpb25zID0gMztcbiAqIEByZXR1cm4gez9wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9uc31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uSGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5nZXRDYW5uZWRHZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9uc30gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgbWVkaWFwaXBlX3Rhc2tzX2NjX3Zpc2lvbl9nZXN0dXJlX3JlY29nbml6ZXJfcHJvdG9fZ2VzdHVyZV9jbGFzc2lmaWVyX2dyYXBoX29wdGlvbnNfcGIuR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMsIDMpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9uc3x1bmRlZmluZWR9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uSGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zfSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLnNldENhbm5lZEdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuY2xlYXJDYW5uZWRHZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRDYW5uZWRHZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucyh1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuaGFzQ2FubmVkR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAzKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIEdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zIGN1c3RvbV9nZXN0dXJlX2NsYXNzaWZpZXJfZ3JhcGhfb3B0aW9ucyA9IDQ7XG4gKiBAcmV0dXJuIHs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuZ2V0Q3VzdG9tR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnN9ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIG1lZGlhcGlwZV90YXNrc19jY192aXNpb25fZ2VzdHVyZV9yZWNvZ25pemVyX3Byb3RvX2dlc3R1cmVfY2xhc3NpZmllcl9ncmFwaF9vcHRpb25zX3BiLkdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zLCA0KSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnN8dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9uc30gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uSGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5zZXRDdXN0b21HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDQsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLmNsZWFyQ3VzdG9tR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0Q3VzdG9tR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnModW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLmhhc0N1c3RvbUdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNCkgIT0gbnVsbDtcbn07XG5cblxuXG4vKipcbiAqIEEgdHVwbGUgb2Yge2ZpZWxkIG51bWJlciwgY2xhc3MgY29uc3RydWN0b3J9IGZvciB0aGUgZXh0ZW5zaW9uXG4gKiBmaWVsZCBuYW1lZCBgZXh0YC5cbiAqIEB0eXBlIHshanNwYi5FeHRlbnNpb25GaWVsZEluZm88IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5leHQgPSBuZXcganNwYi5FeHRlbnNpb25GaWVsZEluZm8oXG4gICAgNDYzMzcwNDUyLFxuICAgIHtleHQ6IDB9LFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucyxcbiAgICAgLyoqIEB0eXBlIHs/ZnVuY3Rpb24oKGJvb2xlYW58dW5kZWZpbmVkKSwhanNwYi5NZXNzYWdlPSk6ICFPYmplY3R9ICovIChcbiAgICAgICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy50b09iamVjdCksXG4gICAgMCk7XG5cbm1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9vcHRpb25zX3BiLkNhbGN1bGF0b3JPcHRpb25zLmV4dGVuc2lvbnNCaW5hcnlbNDYzMzcwNDUyXSA9IG5ldyBqc3BiLkV4dGVuc2lvbkZpZWxkQmluYXJ5SW5mbyhcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMuZXh0LFxuICAgIGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkTWVzc2FnZSxcbiAgICBqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVNZXNzYWdlLFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcixcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyLFxuICAgIGZhbHNlKTtcbi8vIFRoaXMgcmVnaXN0ZXJzIHRoZSBleHRlbnNpb24gZmllbGQgd2l0aCB0aGUgZXh0ZW5kZWQgY2xhc3MsIHNvIHRoYXRcbi8vIHRvT2JqZWN0KCkgd2lsbCBmdW5jdGlvbiBjb3JyZWN0bHkuXG5tZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3Jfb3B0aW9uc19wYi5DYWxjdWxhdG9yT3B0aW9ucy5leHRlbnNpb25zWzQ2MzM3MDQ1Ml0gPSBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMuZXh0O1xuXG5nb29nLm9iamVjdC5leHRlbmQoZXhwb3J0cywgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8pO1xuIiwiLy8gc291cmNlOiBtZWRpYXBpcGUvdGFza3MvY2MvdmlzaW9uL2hhbmRfZGV0ZWN0b3IvcHJvdG8vaGFuZF9kZXRlY3Rvcl9ncmFwaF9vcHRpb25zLnByb3RvXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqIEBlbmhhbmNlYWJsZVxuICogQHN1cHByZXNzIHttaXNzaW5nUmVxdWlyZX0gcmVwb3J0cyBlcnJvciBvbiBpbXBsaWNpdCB0eXBlIHVzYWdlcy5cbiAqIEBzdXBwcmVzcyB7bWVzc2FnZUNvbnZlbnRpb25zfSBKUyBDb21waWxlciByZXBvcnRzIGFuIGVycm9yIGlmIGEgdmFyaWFibGUgb3JcbiAqICAgICBmaWVsZCBzdGFydHMgd2l0aCAnTVNHXycgYW5kIGlzbid0IGEgdHJhbnNsYXRhYmxlIG1lc3NhZ2UuXG4gKiBAcHVibGljXG4gKi9cbi8vIEdFTkVSQVRFRCBDT0RFIC0tIERPIE5PVCBFRElUIVxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbnZhciBqc3BiID0gcmVxdWlyZSgnZ29vZ2xlLXByb3RvYnVmJyk7XG52YXIgZ29vZyA9IGpzcGI7XG52YXIgZ2xvYmFsID1cbiAgICAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMpIHx8XG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdykgfHxcbiAgICAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsKSB8fFxuICAgICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZikgfHxcbiAgICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkuY2FsbChudWxsKSB8fFxuICAgIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbnZhciBtZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3JfcGIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi8uLi9tZWRpYXBpcGUvZnJhbWV3b3JrL2NhbGN1bGF0b3JfcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgbWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX3BiKTtcbnZhciBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19iYXNlX29wdGlvbnNfcGIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi8uLi9tZWRpYXBpcGUvdGFza3MvY2MvY29yZS9wcm90by9iYXNlX29wdGlvbnNfcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zJywgbnVsbCwgZ2xvYmFsKTtcbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnMsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zLmRpc3BsYXlOYW1lID0gJ3Byb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnMnO1xufVxuXG5cblxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnMudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBiYXNlT3B0aW9uczogKGYgPSBtc2cuZ2V0QmFzZU9wdGlvbnMoKSkgJiYgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiLkJhc2VPcHRpb25zLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXG4gICAgbWluRGV0ZWN0aW9uQ29uZmlkZW5jZToganNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMiwgMC41KSxcbiAgICBudW1IYW5kczogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCAzKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGZcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2RldGVjdG9yLnByb3RvLkhhbmREZXRlY3RvckdyYXBoT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19iYXNlX29wdGlvbnNfcGIuQmFzZU9wdGlvbnM7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiLkJhc2VPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XG4gICAgICBtc2cuc2V0QmFzZU9wdGlvbnModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEZsb2F0KCkpO1xuICAgICAgbXNnLnNldE1pbkRldGVjdGlvbkNvbmZpZGVuY2UodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDMyKCkpO1xuICAgICAgbXNnLnNldE51bUhhbmRzKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2RldGVjdG9yLnByb3RvLkhhbmREZXRlY3RvckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2RldGVjdG9yLnByb3RvLkhhbmREZXRlY3RvckdyYXBoT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnN9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2RldGVjdG9yLnByb3RvLkhhbmREZXRlY3RvckdyYXBoT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IG1lc3NhZ2UuZ2V0QmFzZU9wdGlvbnMoKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXG4gICAgICAxLFxuICAgICAgZixcbiAgICAgIG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYi5CYXNlT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDIpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUZsb2F0KFxuICAgICAgMixcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAzKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVJbnQzMihcbiAgICAgIDMsXG4gICAgICBmXG4gICAgKTtcbiAgfVxufTtcblxuXG5cbi8qKlxuICogQSB0dXBsZSBvZiB7ZmllbGQgbnVtYmVyLCBjbGFzcyBjb25zdHJ1Y3Rvcn0gZm9yIHRoZSBleHRlbnNpb25cbiAqIGZpZWxkIG5hbWVkIGBleHRgLlxuICogQHR5cGUgeyFqc3BiLkV4dGVuc2lvbkZpZWxkSW5mbzwhcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2RldGVjdG9yLnByb3RvLkhhbmREZXRlY3RvckdyYXBoT3B0aW9ucz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnMuZXh0ID0gbmV3IGpzcGIuRXh0ZW5zaW9uRmllbGRJbmZvKFxuICAgIDQ2NDg2NDI4OCxcbiAgICB7ZXh0OiAwfSxcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zLFxuICAgICAvKiogQHR5cGUgez9mdW5jdGlvbigoYm9vbGVhbnx1bmRlZmluZWQpLCFqc3BiLk1lc3NhZ2U9KTogIU9iamVjdH0gKi8gKFxuICAgICAgICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2RldGVjdG9yLnByb3RvLkhhbmREZXRlY3RvckdyYXBoT3B0aW9ucy50b09iamVjdCksXG4gICAgMCk7XG5cbm1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9vcHRpb25zX3BiLkNhbGN1bGF0b3JPcHRpb25zLmV4dGVuc2lvbnNCaW5hcnlbNDY0ODY0Mjg4XSA9IG5ldyBqc3BiLkV4dGVuc2lvbkZpZWxkQmluYXJ5SW5mbyhcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zLmV4dCxcbiAgICBqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZE1lc3NhZ2UsXG4gICAganNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlTWVzc2FnZSxcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyLFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyLFxuICAgIGZhbHNlKTtcbi8vIFRoaXMgcmVnaXN0ZXJzIHRoZSBleHRlbnNpb24gZmllbGQgd2l0aCB0aGUgZXh0ZW5kZWQgY2xhc3MsIHNvIHRoYXRcbi8vIHRvT2JqZWN0KCkgd2lsbCBmdW5jdGlvbiBjb3JyZWN0bHkuXG5tZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3Jfb3B0aW9uc19wYi5DYWxjdWxhdG9yT3B0aW9ucy5leHRlbnNpb25zWzQ2NDg2NDI4OF0gPSBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zLmV4dDtcblxuLyoqXG4gKiBvcHRpb25hbCBtZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9ucyBiYXNlX29wdGlvbnMgPSAxO1xuICogQHJldHVybiB7P3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zLnByb3RvdHlwZS5nZXRCYXNlT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9uc30gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiLkJhc2VPcHRpb25zLCAxKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnN8dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnN9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnMucHJvdG90eXBlLnNldEJhc2VPcHRpb25zID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zLnByb3RvdHlwZS5jbGVhckJhc2VPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldEJhc2VPcHRpb25zKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2RldGVjdG9yLnByb3RvLkhhbmREZXRlY3RvckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuaGFzQmFzZU9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGZsb2F0IG1pbl9kZXRlY3Rpb25fY29uZmlkZW5jZSA9IDI7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnMucHJvdG90eXBlLmdldE1pbkRldGVjdGlvbkNvbmZpZGVuY2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDIsIDAuNSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zLnByb3RvdHlwZS5zZXRNaW5EZXRlY3Rpb25Db25maWRlbmNlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zLnByb3RvdHlwZS5jbGVhck1pbkRldGVjdGlvbkNvbmZpZGVuY2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnMucHJvdG90eXBlLmhhc01pbkRldGVjdGlvbkNvbmZpZGVuY2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGludDMyIG51bV9oYW5kcyA9IDM7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnMucHJvdG90eXBlLmdldE51bUhhbmRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDMsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2RldGVjdG9yLnByb3RvLkhhbmREZXRlY3RvckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuc2V0TnVtSGFuZHMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDMsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2RldGVjdG9yLnByb3RvLkhhbmREZXRlY3RvckdyYXBoT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnMucHJvdG90eXBlLmNsZWFyTnVtSGFuZHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnMucHJvdG90eXBlLmhhc051bUhhbmRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMykgIT0gbnVsbDtcbn07XG5cblxuXG4vKipcbiAqIEEgdHVwbGUgb2Yge2ZpZWxkIG51bWJlciwgY2xhc3MgY29uc3RydWN0b3J9IGZvciB0aGUgZXh0ZW5zaW9uXG4gKiBmaWVsZCBuYW1lZCBgZXh0YC5cbiAqIEB0eXBlIHshanNwYi5FeHRlbnNpb25GaWVsZEluZm88IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnM+fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zLmV4dCA9IG5ldyBqc3BiLkV4dGVuc2lvbkZpZWxkSW5mbyhcbiAgICA0NjQ4NjQyODgsXG4gICAge2V4dDogMH0sXG4gICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2RldGVjdG9yLnByb3RvLkhhbmREZXRlY3RvckdyYXBoT3B0aW9ucyxcbiAgICAgLyoqIEB0eXBlIHs/ZnVuY3Rpb24oKGJvb2xlYW58dW5kZWZpbmVkKSwhanNwYi5NZXNzYWdlPSk6ICFPYmplY3R9ICovIChcbiAgICAgICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnMudG9PYmplY3QpLFxuICAgIDApO1xuXG5tZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3Jfb3B0aW9uc19wYi5DYWxjdWxhdG9yT3B0aW9ucy5leHRlbnNpb25zQmluYXJ5WzQ2NDg2NDI4OF0gPSBuZXcganNwYi5FeHRlbnNpb25GaWVsZEJpbmFyeUluZm8oXG4gICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2RldGVjdG9yLnByb3RvLkhhbmREZXRlY3RvckdyYXBoT3B0aW9ucy5leHQsXG4gICAganNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRNZXNzYWdlLFxuICAgIGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZU1lc3NhZ2UsXG4gICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2RldGVjdG9yLnByb3RvLkhhbmREZXRlY3RvckdyYXBoT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcixcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcixcbiAgICBmYWxzZSk7XG4vLyBUaGlzIHJlZ2lzdGVycyB0aGUgZXh0ZW5zaW9uIGZpZWxkIHdpdGggdGhlIGV4dGVuZGVkIGNsYXNzLCBzbyB0aGF0XG4vLyB0b09iamVjdCgpIHdpbGwgZnVuY3Rpb24gY29ycmVjdGx5LlxubWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX29wdGlvbnNfcGIuQ2FsY3VsYXRvck9wdGlvbnMuZXh0ZW5zaW9uc1s0NjQ4NjQyODhdID0gcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2RldGVjdG9yLnByb3RvLkhhbmREZXRlY3RvckdyYXBoT3B0aW9ucy5leHQ7XG5cbmdvb2cub2JqZWN0LmV4dGVuZChleHBvcnRzLCBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8pO1xuIiwiLy8gc291cmNlOiBtZWRpYXBpcGUvdGFza3MvY2MvdmlzaW9uL2hhbmRfbGFuZG1hcmtlci9wcm90by9oYW5kX2xhbmRtYXJrc19kZXRlY3Rvcl9ncmFwaF9vcHRpb25zLnByb3RvXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqIEBlbmhhbmNlYWJsZVxuICogQHN1cHByZXNzIHttaXNzaW5nUmVxdWlyZX0gcmVwb3J0cyBlcnJvciBvbiBpbXBsaWNpdCB0eXBlIHVzYWdlcy5cbiAqIEBzdXBwcmVzcyB7bWVzc2FnZUNvbnZlbnRpb25zfSBKUyBDb21waWxlciByZXBvcnRzIGFuIGVycm9yIGlmIGEgdmFyaWFibGUgb3JcbiAqICAgICBmaWVsZCBzdGFydHMgd2l0aCAnTVNHXycgYW5kIGlzbid0IGEgdHJhbnNsYXRhYmxlIG1lc3NhZ2UuXG4gKiBAcHVibGljXG4gKi9cbi8vIEdFTkVSQVRFRCBDT0RFIC0tIERPIE5PVCBFRElUIVxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbnZhciBqc3BiID0gcmVxdWlyZSgnZ29vZ2xlLXByb3RvYnVmJyk7XG52YXIgZ29vZyA9IGpzcGI7XG52YXIgZ2xvYmFsID1cbiAgICAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMpIHx8XG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdykgfHxcbiAgICAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsKSB8fFxuICAgICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZikgfHxcbiAgICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkuY2FsbChudWxsKSB8fFxuICAgIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbnZhciBtZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3JfcGIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi8uLi9tZWRpYXBpcGUvZnJhbWV3b3JrL2NhbGN1bGF0b3JfcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgbWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX3BiKTtcbnZhciBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19iYXNlX29wdGlvbnNfcGIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi8uLi9tZWRpYXBpcGUvdGFza3MvY2MvY29yZS9wcm90by9iYXNlX29wdGlvbnNfcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMnLCBudWxsLCBnbG9iYWwpO1xuLyoqXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxuICogdmFsaWQuXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya3NEZXRlY3RvckdyYXBoT3B0aW9ucyA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zJztcbn1cblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya3NEZXRlY3RvckdyYXBoT3B0aW9ucy50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya3NEZXRlY3RvckdyYXBoT3B0aW9uc30gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBiYXNlT3B0aW9uczogKGYgPSBtc2cuZ2V0QmFzZU9wdGlvbnMoKSkgJiYgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiLkJhc2VPcHRpb25zLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXG4gICAgbWluRGV0ZWN0aW9uQ29uZmlkZW5jZToganNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMiwgMC41KVxuICB9O1xuXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG59XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnM7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya3NEZXRlY3RvckdyYXBoT3B0aW9uc31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiLkJhc2VPcHRpb25zO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYi5CYXNlT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldEJhc2VPcHRpb25zKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRGbG9hdCgpKTtcbiAgICAgIG1zZy5zZXRNaW5EZXRlY3Rpb25Db25maWRlbmNlKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnN9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gbWVzc2FnZS5nZXRCYXNlT3B0aW9ucygpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDEsXG4gICAgICBmLFxuICAgICAgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiLkJhc2VPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMikpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlRmxvYXQoXG4gICAgICAyLFxuICAgICAgZlxuICAgICk7XG4gIH1cbn07XG5cblxuXG4vKipcbiAqIEEgdHVwbGUgb2Yge2ZpZWxkIG51bWJlciwgY2xhc3MgY29uc3RydWN0b3J9IGZvciB0aGUgZXh0ZW5zaW9uXG4gKiBmaWVsZCBuYW1lZCBgZXh0YC5cbiAqIEB0eXBlIHshanNwYi5FeHRlbnNpb25GaWVsZEluZm88IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya3NEZXRlY3RvckdyYXBoT3B0aW9ucz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya3NEZXRlY3RvckdyYXBoT3B0aW9ucy5leHQgPSBuZXcganNwYi5FeHRlbnNpb25GaWVsZEluZm8oXG4gICAgNDc0NDcyNDcwLFxuICAgIHtleHQ6IDB9LFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya3NEZXRlY3RvckdyYXBoT3B0aW9ucyxcbiAgICAgLyoqIEB0eXBlIHs/ZnVuY3Rpb24oKGJvb2xlYW58dW5kZWZpbmVkKSwhanNwYi5NZXNzYWdlPSk6ICFPYmplY3R9ICovIChcbiAgICAgICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya3NEZXRlY3RvckdyYXBoT3B0aW9ucy50b09iamVjdCksXG4gICAgMCk7XG5cbm1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9vcHRpb25zX3BiLkNhbGN1bGF0b3JPcHRpb25zLmV4dGVuc2lvbnNCaW5hcnlbNDc0NDcyNDcwXSA9IG5ldyBqc3BiLkV4dGVuc2lvbkZpZWxkQmluYXJ5SW5mbyhcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMuZXh0LFxuICAgIGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkTWVzc2FnZSxcbiAgICBqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVNZXNzYWdlLFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya3NEZXRlY3RvckdyYXBoT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcixcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyLFxuICAgIGZhbHNlKTtcbi8vIFRoaXMgcmVnaXN0ZXJzIHRoZSBleHRlbnNpb24gZmllbGQgd2l0aCB0aGUgZXh0ZW5kZWQgY2xhc3MsIHNvIHRoYXRcbi8vIHRvT2JqZWN0KCkgd2lsbCBmdW5jdGlvbiBjb3JyZWN0bHkuXG5tZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3Jfb3B0aW9uc19wYi5DYWxjdWxhdG9yT3B0aW9ucy5leHRlbnNpb25zWzQ3NDQ3MjQ3MF0gPSBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMuZXh0O1xuXG4vKipcbiAqIG9wdGlvbmFsIG1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zIGJhc2Vfb3B0aW9ucyA9IDE7XG4gKiBAcmV0dXJuIHs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya3NEZXRlY3RvckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuZ2V0QmFzZU9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnN9ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYi5CYXNlT3B0aW9ucywgMSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zfHVuZGVmaW5lZH0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnN9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya3NEZXRlY3RvckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuc2V0QmFzZU9wdGlvbnMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zLnByb3RvdHlwZS5jbGVhckJhc2VPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldEJhc2VPcHRpb25zKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zLnByb3RvdHlwZS5oYXNCYXNlT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgZmxvYXQgbWluX2RldGVjdGlvbl9jb25maWRlbmNlID0gMjtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zLnByb3RvdHlwZS5nZXRNaW5EZXRlY3Rpb25Db25maWRlbmNlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCAwLjUpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMucHJvdG90eXBlLnNldE1pbkRldGVjdGlvbkNvbmZpZGVuY2UgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zLnByb3RvdHlwZS5jbGVhck1pbkRldGVjdGlvbkNvbmZpZGVuY2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya3NEZXRlY3RvckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuaGFzTWluRGV0ZWN0aW9uQ29uZmlkZW5jZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XG59O1xuXG5cblxuLyoqXG4gKiBBIHR1cGxlIG9mIHtmaWVsZCBudW1iZXIsIGNsYXNzIGNvbnN0cnVjdG9yfSBmb3IgdGhlIGV4dGVuc2lvblxuICogZmllbGQgbmFtZWQgYGV4dGAuXG4gKiBAdHlwZSB7IWpzcGIuRXh0ZW5zaW9uRmllbGRJbmZvPCFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnM+fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMuZXh0ID0gbmV3IGpzcGIuRXh0ZW5zaW9uRmllbGRJbmZvKFxuICAgIDQ3NDQ3MjQ3MCxcbiAgICB7ZXh0OiAwfSxcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMsXG4gICAgIC8qKiBAdHlwZSB7P2Z1bmN0aW9uKChib29sZWFufHVuZGVmaW5lZCksIWpzcGIuTWVzc2FnZT0pOiAhT2JqZWN0fSAqLyAoXG4gICAgICAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMudG9PYmplY3QpLFxuICAgIDApO1xuXG5tZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3Jfb3B0aW9uc19wYi5DYWxjdWxhdG9yT3B0aW9ucy5leHRlbnNpb25zQmluYXJ5WzQ3NDQ3MjQ3MF0gPSBuZXcganNwYi5FeHRlbnNpb25GaWVsZEJpbmFyeUluZm8oXG4gICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zLmV4dCxcbiAgICBqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZE1lc3NhZ2UsXG4gICAganNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlTWVzc2FnZSxcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIsXG4gICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcixcbiAgICBmYWxzZSk7XG4vLyBUaGlzIHJlZ2lzdGVycyB0aGUgZXh0ZW5zaW9uIGZpZWxkIHdpdGggdGhlIGV4dGVuZGVkIGNsYXNzLCBzbyB0aGF0XG4vLyB0b09iamVjdCgpIHdpbGwgZnVuY3Rpb24gY29ycmVjdGx5LlxubWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX29wdGlvbnNfcGIuQ2FsY3VsYXRvck9wdGlvbnMuZXh0ZW5zaW9uc1s0NzQ0NzI0NzBdID0gcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zLmV4dDtcblxuZ29vZy5vYmplY3QuZXh0ZW5kKGV4cG9ydHMsIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvKTtcbiIsIi8vIHNvdXJjZTogbWVkaWFwaXBlL3Rhc2tzL2NjL3Zpc2lvbi9oYW5kX2xhbmRtYXJrZXIvcHJvdG8vaGFuZF9sYW5kbWFya2VyX2dyYXBoX29wdGlvbnMucHJvdG9cbi8qKlxuICogQGZpbGVvdmVydmlld1xuICogQGVuaGFuY2VhYmxlXG4gKiBAc3VwcHJlc3Mge21pc3NpbmdSZXF1aXJlfSByZXBvcnRzIGVycm9yIG9uIGltcGxpY2l0IHR5cGUgdXNhZ2VzLlxuICogQHN1cHByZXNzIHttZXNzYWdlQ29udmVudGlvbnN9IEpTIENvbXBpbGVyIHJlcG9ydHMgYW4gZXJyb3IgaWYgYSB2YXJpYWJsZSBvclxuICogICAgIGZpZWxkIHN0YXJ0cyB3aXRoICdNU0dfJyBhbmQgaXNuJ3QgYSB0cmFuc2xhdGFibGUgbWVzc2FnZS5cbiAqIEBwdWJsaWNcbiAqL1xuLy8gR0VORVJBVEVEIENPREUgLS0gRE8gTk9UIEVESVQhXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcblxudmFyIGpzcGIgPSByZXF1aXJlKCdnb29nbGUtcHJvdG9idWYnKTtcbnZhciBnb29nID0ganNwYjtcbnZhciBnbG9iYWwgPVxuICAgICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93KSB8fFxuICAgICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwpIHx8XG4gICAgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmKSB8fFxuICAgIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KS5jYWxsKG51bGwpIHx8XG4gICAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxudmFyIG1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9wYiA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uLy4uLy4uL21lZGlhcGlwZS9mcmFtZXdvcmsvY2FsY3VsYXRvcl9wYi5qcycpO1xuZ29vZy5vYmplY3QuZXh0ZW5kKHByb3RvLCBtZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3JfcGIpO1xudmFyIG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYiA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uLy4uLy4uL21lZGlhcGlwZS90YXNrcy9jYy9jb3JlL3Byb3RvL2Jhc2Vfb3B0aW9uc19wYi5qcycpO1xuZ29vZy5vYmplY3QuZXh0ZW5kKHByb3RvLCBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19iYXNlX29wdGlvbnNfcGIpO1xudmFyIG1lZGlhcGlwZV90YXNrc19jY192aXNpb25faGFuZF9kZXRlY3Rvcl9wcm90b19oYW5kX2RldGVjdG9yX2dyYXBoX29wdGlvbnNfcGIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi8uLi9tZWRpYXBpcGUvdGFza3MvY2MvdmlzaW9uL2hhbmRfZGV0ZWN0b3IvcHJvdG8vaGFuZF9kZXRlY3Rvcl9ncmFwaF9vcHRpb25zX3BiLmpzJyk7XG5nb29nLm9iamVjdC5leHRlbmQocHJvdG8sIG1lZGlhcGlwZV90YXNrc19jY192aXNpb25faGFuZF9kZXRlY3Rvcl9wcm90b19oYW5kX2RldGVjdG9yX2dyYXBoX29wdGlvbnNfcGIpO1xudmFyIG1lZGlhcGlwZV90YXNrc19jY192aXNpb25faGFuZF9sYW5kbWFya2VyX3Byb3RvX2hhbmRfbGFuZG1hcmtzX2RldGVjdG9yX2dyYXBoX29wdGlvbnNfcGIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi8uLi9tZWRpYXBpcGUvdGFza3MvY2MvdmlzaW9uL2hhbmRfbGFuZG1hcmtlci9wcm90by9oYW5kX2xhbmRtYXJrc19kZXRlY3Rvcl9ncmFwaF9vcHRpb25zX3BiLmpzJyk7XG5nb29nLm9iamVjdC5leHRlbmQocHJvdG8sIG1lZGlhcGlwZV90YXNrc19jY192aXNpb25faGFuZF9sYW5kbWFya2VyX3Byb3RvX2hhbmRfbGFuZG1hcmtzX2RldGVjdG9yX2dyYXBoX29wdGlvbnNfcGIpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zJywgbnVsbCwgZ2xvYmFsKTtcbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucyA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucywganNwYi5NZXNzYWdlKTtcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zLmRpc3BsYXlOYW1lID0gJ3Byb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zJztcbn1cblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnMudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9uc30gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnMudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xuICB2YXIgZiwgb2JqID0ge1xuICAgIGJhc2VPcHRpb25zOiAoZiA9IG1zZy5nZXRCYXNlT3B0aW9ucygpKSAmJiBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19iYXNlX29wdGlvbnNfcGIuQmFzZU9wdGlvbnMudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcbiAgICBoYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnM6IChmID0gbXNnLmdldEhhbmREZXRlY3RvckdyYXBoT3B0aW9ucygpKSAmJiBtZWRpYXBpcGVfdGFza3NfY2NfdmlzaW9uX2hhbmRfZGV0ZWN0b3JfcHJvdG9faGFuZF9kZXRlY3Rvcl9ncmFwaF9vcHRpb25zX3BiLkhhbmREZXRlY3RvckdyYXBoT3B0aW9ucy50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxuICAgIGhhbmRMYW5kbWFya3NEZXRlY3RvckdyYXBoT3B0aW9uczogKGYgPSBtc2cuZ2V0SGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zKCkpICYmIG1lZGlhcGlwZV90YXNrc19jY192aXNpb25faGFuZF9sYW5kbWFya2VyX3Byb3RvX2hhbmRfbGFuZG1hcmtzX2RldGVjdG9yX2dyYXBoX29wdGlvbnNfcGIuSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXG4gICAgbWluVHJhY2tpbmdDb25maWRlbmNlOiBqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQobXNnLCA0LCAwLjUpXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9uc31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucztcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gbmV3IG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYi5CYXNlT3B0aW9ucztcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19iYXNlX29wdGlvbnNfcGIuQmFzZU9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5zZXRCYXNlT3B0aW9ucyh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgbWVkaWFwaXBlX3Rhc2tzX2NjX3Zpc2lvbl9oYW5kX2RldGVjdG9yX3Byb3RvX2hhbmRfZGV0ZWN0b3JfZ3JhcGhfb3B0aW9uc19wYi5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnM7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsbWVkaWFwaXBlX3Rhc2tzX2NjX3Zpc2lvbl9oYW5kX2RldGVjdG9yX3Byb3RvX2hhbmRfZGV0ZWN0b3JfZ3JhcGhfb3B0aW9uc19wYi5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5zZXRIYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgdmFyIHZhbHVlID0gbmV3IG1lZGlhcGlwZV90YXNrc19jY192aXNpb25faGFuZF9sYW5kbWFya2VyX3Byb3RvX2hhbmRfbGFuZG1hcmtzX2RldGVjdG9yX2dyYXBoX29wdGlvbnNfcGIuSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLG1lZGlhcGlwZV90YXNrc19jY192aXNpb25faGFuZF9sYW5kbWFya2VyX3Byb3RvX2hhbmRfbGFuZG1hcmtzX2RldGVjdG9yX2dyYXBoX29wdGlvbnNfcGIuSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XG4gICAgICBtc2cuc2V0SGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRGbG9hdCgpKTtcbiAgICAgIG1zZy5zZXRNaW5UcmFja2luZ0NvbmZpZGVuY2UodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnMuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9uc30gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IG1lc3NhZ2UuZ2V0QmFzZU9wdGlvbnMoKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXG4gICAgICAxLFxuICAgICAgZixcbiAgICAgIG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYi5CYXNlT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0SGFuZERldGVjdG9yR3JhcGhPcHRpb25zKCk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxuICAgICAgMixcbiAgICAgIGYsXG4gICAgICBtZWRpYXBpcGVfdGFza3NfY2NfdmlzaW9uX2hhbmRfZGV0ZWN0b3JfcHJvdG9faGFuZF9kZXRlY3Rvcl9ncmFwaF9vcHRpb25zX3BiLkhhbmREZXRlY3RvckdyYXBoT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0SGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zKCk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxuICAgICAgMyxcbiAgICAgIGYsXG4gICAgICBtZWRpYXBpcGVfdGFza3NfY2NfdmlzaW9uX2hhbmRfbGFuZG1hcmtlcl9wcm90b19oYW5kX2xhbmRtYXJrc19kZXRlY3Rvcl9ncmFwaF9vcHRpb25zX3BiLkhhbmRMYW5kbWFya3NEZXRlY3RvckdyYXBoT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDQpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUZsb2F0KFxuICAgICAgNCxcbiAgICAgIGZcbiAgICApO1xuICB9XG59O1xuXG5cblxuLyoqXG4gKiBBIHR1cGxlIG9mIHtmaWVsZCBudW1iZXIsIGNsYXNzIGNvbnN0cnVjdG9yfSBmb3IgdGhlIGV4dGVuc2lvblxuICogZmllbGQgbmFtZWQgYGV4dGAuXG4gKiBAdHlwZSB7IWpzcGIuRXh0ZW5zaW9uRmllbGRJbmZvPCFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zLmV4dCA9IG5ldyBqc3BiLkV4dGVuc2lvbkZpZWxkSW5mbyhcbiAgICA0NjI3MTMyMDIsXG4gICAge2V4dDogMH0sXG4gICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnMsXG4gICAgIC8qKiBAdHlwZSB7P2Z1bmN0aW9uKChib29sZWFufHVuZGVmaW5lZCksIWpzcGIuTWVzc2FnZT0pOiAhT2JqZWN0fSAqLyAoXG4gICAgICAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucy50b09iamVjdCksXG4gICAgMCk7XG5cbm1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9vcHRpb25zX3BiLkNhbGN1bGF0b3JPcHRpb25zLmV4dGVuc2lvbnNCaW5hcnlbNDYyNzEzMjAyXSA9IG5ldyBqc3BiLkV4dGVuc2lvbkZpZWxkQmluYXJ5SW5mbyhcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucy5leHQsXG4gICAganNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRNZXNzYWdlLFxuICAgIGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZU1lc3NhZ2UsXG4gICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnMuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIsXG4gICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyLFxuICAgIGZhbHNlKTtcbi8vIFRoaXMgcmVnaXN0ZXJzIHRoZSBleHRlbnNpb24gZmllbGQgd2l0aCB0aGUgZXh0ZW5kZWQgY2xhc3MsIHNvIHRoYXRcbi8vIHRvT2JqZWN0KCkgd2lsbCBmdW5jdGlvbiBjb3JyZWN0bHkuXG5tZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3Jfb3B0aW9uc19wYi5DYWxjdWxhdG9yT3B0aW9ucy5leHRlbnNpb25zWzQ2MjcxMzIwMl0gPSBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucy5leHQ7XG5cbi8qKlxuICogb3B0aW9uYWwgbWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnMgYmFzZV9vcHRpb25zID0gMTtcbiAqIEByZXR1cm4gez9wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9uc31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLmdldEJhc2VPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zfSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19iYXNlX29wdGlvbnNfcGIuQmFzZU9wdGlvbnMsIDEpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9uc3x1bmRlZmluZWR9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnN9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5zZXRCYXNlT3B0aW9ucyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5jbGVhckJhc2VPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldEJhc2VPcHRpb25zKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLmhhc0Jhc2VPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBtZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zIGhhbmRfZGV0ZWN0b3JfZ3JhcGhfb3B0aW9ucyA9IDI7XG4gKiBAcmV0dXJuIHs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2RldGVjdG9yLnByb3RvLkhhbmREZXRlY3RvckdyYXBoT3B0aW9uc31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLmdldEhhbmREZXRlY3RvckdyYXBoT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfZGV0ZWN0b3IucHJvdG8uSGFuZERldGVjdG9yR3JhcGhPcHRpb25zfSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBtZWRpYXBpcGVfdGFza3NfY2NfdmlzaW9uX2hhbmRfZGV0ZWN0b3JfcHJvdG9faGFuZF9kZXRlY3Rvcl9ncmFwaF9vcHRpb25zX3BiLkhhbmREZXRlY3RvckdyYXBoT3B0aW9ucywgMikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P3Byb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9kZXRlY3Rvci5wcm90by5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnN8dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zfSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuc2V0SGFuZERldGVjdG9yR3JhcGhPcHRpb25zID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLmNsZWFySGFuZERldGVjdG9yR3JhcGhPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldEhhbmREZXRlY3RvckdyYXBoT3B0aW9ucyh1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5oYXNIYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIEhhbmRMYW5kbWFya3NEZXRlY3RvckdyYXBoT3B0aW9ucyBoYW5kX2xhbmRtYXJrc19kZXRlY3Rvcl9ncmFwaF9vcHRpb25zID0gMztcbiAqIEByZXR1cm4gez9wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5nZXRIYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zfSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBtZWRpYXBpcGVfdGFza3NfY2NfdmlzaW9uX2hhbmRfbGFuZG1hcmtlcl9wcm90b19oYW5kX2xhbmRtYXJrc19kZXRlY3Rvcl9ncmFwaF9vcHRpb25zX3BiLkhhbmRMYW5kbWFya3NEZXRlY3RvckdyYXBoT3B0aW9ucywgMykpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P3Byb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya3NEZXRlY3RvckdyYXBoT3B0aW9uc3x1bmRlZmluZWR9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnN9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5zZXRIYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuY2xlYXJIYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0SGFuZExhbmRtYXJrc0RldGVjdG9yR3JhcGhPcHRpb25zKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLmhhc0hhbmRMYW5kbWFya3NEZXRlY3RvckdyYXBoT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDMpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgZmxvYXQgbWluX3RyYWNraW5nX2NvbmZpZGVuY2UgPSA0O1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuZ2V0TWluVHJhY2tpbmdDb25maWRlbmNlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdCh0aGlzLCA0LCAwLjUpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5zZXRNaW5UcmFja2luZ0NvbmZpZGVuY2UgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDQsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuY2xlYXJNaW5UcmFja2luZ0NvbmZpZGVuY2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA0LCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5oYXNNaW5UcmFja2luZ0NvbmZpZGVuY2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA0KSAhPSBudWxsO1xufTtcblxuXG5cbi8qKlxuICogQSB0dXBsZSBvZiB7ZmllbGQgbnVtYmVyLCBjbGFzcyBjb25zdHJ1Y3Rvcn0gZm9yIHRoZSBleHRlbnNpb25cbiAqIGZpZWxkIG5hbWVkIGBleHRgLlxuICogQHR5cGUgeyFqc3BiLkV4dGVuc2lvbkZpZWxkSW5mbzwhcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnM+fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucy5leHQgPSBuZXcganNwYi5FeHRlbnNpb25GaWVsZEluZm8oXG4gICAgNDYyNzEzMjAyLFxuICAgIHtleHQ6IDB9LFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zLFxuICAgICAvKiogQHR5cGUgez9mdW5jdGlvbigoYm9vbGVhbnx1bmRlZmluZWQpLCFqc3BiLk1lc3NhZ2U9KTogIU9iamVjdH0gKi8gKFxuICAgICAgICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnMudG9PYmplY3QpLFxuICAgIDApO1xuXG5tZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3Jfb3B0aW9uc19wYi5DYWxjdWxhdG9yT3B0aW9ucy5leHRlbnNpb25zQmluYXJ5WzQ2MjcxMzIwMl0gPSBuZXcganNwYi5FeHRlbnNpb25GaWVsZEJpbmFyeUluZm8oXG4gICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnMuZXh0LFxuICAgIGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkTWVzc2FnZSxcbiAgICBqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVNZXNzYWdlLFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyLFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uaGFuZF9sYW5kbWFya2VyLnByb3RvLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcixcbiAgICBmYWxzZSk7XG4vLyBUaGlzIHJlZ2lzdGVycyB0aGUgZXh0ZW5zaW9uIGZpZWxkIHdpdGggdGhlIGV4dGVuZGVkIGNsYXNzLCBzbyB0aGF0XG4vLyB0b09iamVjdCgpIHdpbGwgZnVuY3Rpb24gY29ycmVjdGx5LlxubWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX29wdGlvbnNfcGIuQ2FsY3VsYXRvck9wdGlvbnMuZXh0ZW5zaW9uc1s0NjI3MTMyMDJdID0gcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnMuZXh0O1xuXG5nb29nLm9iamVjdC5leHRlbmQoZXhwb3J0cywgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8pO1xuIiwiLy8gc291cmNlOiBtZWRpYXBpcGUvdGFza3MvY2MvdmlzaW9uL2dlc3R1cmVfcmVjb2duaXplci9wcm90by9nZXN0dXJlX3JlY29nbml6ZXJfZ3JhcGhfb3B0aW9ucy5wcm90b1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKiBAZW5oYW5jZWFibGVcbiAqIEBzdXBwcmVzcyB7bWlzc2luZ1JlcXVpcmV9IHJlcG9ydHMgZXJyb3Igb24gaW1wbGljaXQgdHlwZSB1c2FnZXMuXG4gKiBAc3VwcHJlc3Mge21lc3NhZ2VDb252ZW50aW9uc30gSlMgQ29tcGlsZXIgcmVwb3J0cyBhbiBlcnJvciBpZiBhIHZhcmlhYmxlIG9yXG4gKiAgICAgZmllbGQgc3RhcnRzIHdpdGggJ01TR18nIGFuZCBpc24ndCBhIHRyYW5zbGF0YWJsZSBtZXNzYWdlLlxuICogQHB1YmxpY1xuICovXG4vLyBHRU5FUkFURUQgQ09ERSAtLSBETyBOT1QgRURJVCFcbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuXG52YXIganNwYiA9IHJlcXVpcmUoJ2dvb2dsZS1wcm90b2J1ZicpO1xudmFyIGdvb2cgPSBqc3BiO1xudmFyIGdsb2JhbCA9XG4gICAgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzKSB8fFxuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cpIHx8XG4gICAgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbCkgfHxcbiAgICAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYpIHx8XG4gICAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pLmNhbGwobnVsbCkgfHxcbiAgICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG52YXIgbWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX3BiID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vLi4vLi4vbWVkaWFwaXBlL2ZyYW1ld29yay9jYWxjdWxhdG9yX3BiLmpzJyk7XG5nb29nLm9iamVjdC5leHRlbmQocHJvdG8sIG1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9wYik7XG52YXIgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vLi4vLi4vbWVkaWFwaXBlL3Rhc2tzL2NjL2NvcmUvcHJvdG8vYmFzZV9vcHRpb25zX3BiLmpzJyk7XG5nb29nLm9iamVjdC5leHRlbmQocHJvdG8sIG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYik7XG52YXIgbWVkaWFwaXBlX3Rhc2tzX2NjX3Zpc2lvbl9nZXN0dXJlX3JlY29nbml6ZXJfcHJvdG9faGFuZF9nZXN0dXJlX3JlY29nbml6ZXJfZ3JhcGhfb3B0aW9uc19wYiA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uLy4uLy4uL21lZGlhcGlwZS90YXNrcy9jYy92aXNpb24vZ2VzdHVyZV9yZWNvZ25pemVyL3Byb3RvL2hhbmRfZ2VzdHVyZV9yZWNvZ25pemVyX2dyYXBoX29wdGlvbnNfcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgbWVkaWFwaXBlX3Rhc2tzX2NjX3Zpc2lvbl9nZXN0dXJlX3JlY29nbml6ZXJfcHJvdG9faGFuZF9nZXN0dXJlX3JlY29nbml6ZXJfZ3JhcGhfb3B0aW9uc19wYik7XG52YXIgbWVkaWFwaXBlX3Rhc2tzX2NjX3Zpc2lvbl9oYW5kX2xhbmRtYXJrZXJfcHJvdG9faGFuZF9sYW5kbWFya2VyX2dyYXBoX29wdGlvbnNfcGIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi8uLi9tZWRpYXBpcGUvdGFza3MvY2MvdmlzaW9uL2hhbmRfbGFuZG1hcmtlci9wcm90by9oYW5kX2xhbmRtYXJrZXJfZ3JhcGhfb3B0aW9uc19wYi5qcycpO1xuZ29vZy5vYmplY3QuZXh0ZW5kKHByb3RvLCBtZWRpYXBpcGVfdGFza3NfY2NfdmlzaW9uX2hhbmRfbGFuZG1hcmtlcl9wcm90b19oYW5kX2xhbmRtYXJrZXJfZ3JhcGhfb3B0aW9uc19wYik7XG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMnLCBudWxsLCBnbG9iYWwpO1xuLyoqXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxuICogdmFsaWQuXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMnO1xufVxuXG5cblxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgYmFzZU9wdGlvbnM6IChmID0gbXNnLmdldEJhc2VPcHRpb25zKCkpICYmIG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYi5CYXNlT3B0aW9ucy50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxuICAgIGhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zOiAoZiA9IG1zZy5nZXRIYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucygpKSAmJiBtZWRpYXBpcGVfdGFza3NfY2NfdmlzaW9uX2hhbmRfbGFuZG1hcmtlcl9wcm90b19oYW5kX2xhbmRtYXJrZXJfZ3JhcGhfb3B0aW9uc19wYi5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucy50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxuICAgIGhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9uczogKGYgPSBtc2cuZ2V0SGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zKCkpICYmIG1lZGlhcGlwZV90YXNrc19jY192aXNpb25fZ2VzdHVyZV9yZWNvZ25pemVyX3Byb3RvX2hhbmRfZ2VzdHVyZV9yZWNvZ25pemVyX2dyYXBoX29wdGlvbnNfcGIuSGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZilcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnN9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiLkJhc2VPcHRpb25zO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYi5CYXNlT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldEJhc2VPcHRpb25zKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBtZWRpYXBpcGVfdGFza3NfY2NfdmlzaW9uX2hhbmRfbGFuZG1hcmtlcl9wcm90b19oYW5kX2xhbmRtYXJrZXJfZ3JhcGhfb3B0aW9uc19wYi5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucztcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxtZWRpYXBpcGVfdGFza3NfY2NfdmlzaW9uX2hhbmRfbGFuZG1hcmtlcl9wcm90b19oYW5kX2xhbmRtYXJrZXJfZ3JhcGhfb3B0aW9uc19wYi5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldEhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBtZWRpYXBpcGVfdGFza3NfY2NfdmlzaW9uX2dlc3R1cmVfcmVjb2duaXplcl9wcm90b19oYW5kX2dlc3R1cmVfcmVjb2duaXplcl9ncmFwaF9vcHRpb25zX3BiLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucztcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxtZWRpYXBpcGVfdGFza3NfY2NfdmlzaW9uX2dlc3R1cmVfcmVjb2duaXplcl9wcm90b19oYW5kX2dlc3R1cmVfcmVjb2duaXplcl9ncmFwaF9vcHRpb25zX3BiLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldEhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucyh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zfSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gbWVzc2FnZS5nZXRCYXNlT3B0aW9ucygpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDEsXG4gICAgICBmLFxuICAgICAgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiLkJhc2VPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRIYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucygpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDIsXG4gICAgICBmLFxuICAgICAgbWVkaWFwaXBlX3Rhc2tzX2NjX3Zpc2lvbl9oYW5kX2xhbmRtYXJrZXJfcHJvdG9faGFuZF9sYW5kbWFya2VyX2dyYXBoX29wdGlvbnNfcGIuSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnMuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldEhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucygpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDMsXG4gICAgICBmLFxuICAgICAgbWVkaWFwaXBlX3Rhc2tzX2NjX3Zpc2lvbl9nZXN0dXJlX3JlY29nbml6ZXJfcHJvdG9faGFuZF9nZXN0dXJlX3JlY29nbml6ZXJfZ3JhcGhfb3B0aW9uc19wYi5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcbiAgICApO1xuICB9XG59O1xuXG5cblxuLyoqXG4gKiBBIHR1cGxlIG9mIHtmaWVsZCBudW1iZXIsIGNsYXNzIGNvbnN0cnVjdG9yfSBmb3IgdGhlIGV4dGVuc2lvblxuICogZmllbGQgbmFtZWQgYGV4dGAuXG4gKiBAdHlwZSB7IWpzcGIuRXh0ZW5zaW9uRmllbGRJbmZvPCFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLmV4dCA9IG5ldyBqc3BiLkV4dGVuc2lvbkZpZWxkSW5mbyhcbiAgICA0NzkwOTcwNTQsXG4gICAge2V4dDogMH0sXG4gICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMsXG4gICAgIC8qKiBAdHlwZSB7P2Z1bmN0aW9uKChib29sZWFufHVuZGVmaW5lZCksIWpzcGIuTWVzc2FnZT0pOiAhT2JqZWN0fSAqLyAoXG4gICAgICAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy50b09iamVjdCksXG4gICAgMCk7XG5cbm1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9vcHRpb25zX3BiLkNhbGN1bGF0b3JPcHRpb25zLmV4dGVuc2lvbnNCaW5hcnlbNDc5MDk3MDU0XSA9IG5ldyBqc3BiLkV4dGVuc2lvbkZpZWxkQmluYXJ5SW5mbyhcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5leHQsXG4gICAganNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRNZXNzYWdlLFxuICAgIGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZU1lc3NhZ2UsXG4gICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIsXG4gICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyLFxuICAgIGZhbHNlKTtcbi8vIFRoaXMgcmVnaXN0ZXJzIHRoZSBleHRlbnNpb24gZmllbGQgd2l0aCB0aGUgZXh0ZW5kZWQgY2xhc3MsIHNvIHRoYXRcbi8vIHRvT2JqZWN0KCkgd2lsbCBmdW5jdGlvbiBjb3JyZWN0bHkuXG5tZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3Jfb3B0aW9uc19wYi5DYWxjdWxhdG9yT3B0aW9ucy5leHRlbnNpb25zWzQ3OTA5NzA1NF0gPSBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5leHQ7XG5cbi8qKlxuICogb3B0aW9uYWwgbWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnMgYmFzZV9vcHRpb25zID0gMTtcbiAqIEByZXR1cm4gez9wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9uc31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLmdldEJhc2VPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zfSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19iYXNlX29wdGlvbnNfcGIuQmFzZU9wdGlvbnMsIDEpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUudGFza3MuY29yZS5wcm90by5CYXNlT3B0aW9uc3x1bmRlZmluZWR9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnN9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5zZXRCYXNlT3B0aW9ucyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5jbGVhckJhc2VPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldEJhc2VPcHRpb25zKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLmhhc0Jhc2VPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBtZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucyBoYW5kX2xhbmRtYXJrZXJfZ3JhcGhfb3B0aW9ucyA9IDI7XG4gKiBAcmV0dXJuIHs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5oYW5kX2xhbmRtYXJrZXIucHJvdG8uSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5nZXRIYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9uc30gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgbWVkaWFwaXBlX3Rhc2tzX2NjX3Zpc2lvbl9oYW5kX2xhbmRtYXJrZXJfcHJvdG9faGFuZF9sYW5kbWFya2VyX2dyYXBoX29wdGlvbnNfcGIuSGFuZExhbmRtYXJrZXJHcmFwaE9wdGlvbnMsIDIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmhhbmRfbGFuZG1hcmtlci5wcm90by5IYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9uc3x1bmRlZmluZWR9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnN9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5zZXRIYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIG1lc3NhZ2UgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5jbGVhckhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldEhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLmhhc0hhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBIYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMgaGFuZF9nZXN0dXJlX3JlY29nbml6ZXJfZ3JhcGhfb3B0aW9ucyA9IDM7XG4gKiBAcmV0dXJuIHs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uSGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuZ2V0SGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9uc30gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgbWVkaWFwaXBlX3Rhc2tzX2NjX3Zpc2lvbl9nZXN0dXJlX3JlY29nbml6ZXJfcHJvdG9faGFuZF9nZXN0dXJlX3JlY29nbml6ZXJfZ3JhcGhfb3B0aW9uc19wYi5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMsIDMpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5IYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnN8dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zfSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5wcm90b3R5cGUuc2V0SGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMucHJvdG90eXBlLmNsZWFySGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldEhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucyh1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLnByb3RvdHlwZS5oYXNIYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAzKSAhPSBudWxsO1xufTtcblxuXG5cbi8qKlxuICogQSB0dXBsZSBvZiB7ZmllbGQgbnVtYmVyLCBjbGFzcyBjb25zdHJ1Y3Rvcn0gZm9yIHRoZSBleHRlbnNpb25cbiAqIGZpZWxkIG5hbWVkIGBleHRgLlxuICogQHR5cGUgeyFqc3BiLkV4dGVuc2lvbkZpZWxkSW5mbzwhcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnM+fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLmdlc3R1cmVfcmVjb2duaXplci5wcm90by5HZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucy5leHQgPSBuZXcganNwYi5FeHRlbnNpb25GaWVsZEluZm8oXG4gICAgNDc5MDk3MDU0LFxuICAgIHtleHQ6IDB9LFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLFxuICAgICAvKiogQHR5cGUgez9mdW5jdGlvbigoYm9vbGVhbnx1bmRlZmluZWQpLCFqc3BiLk1lc3NhZ2U9KTogIU9iamVjdH0gKi8gKFxuICAgICAgICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMudG9PYmplY3QpLFxuICAgIDApO1xuXG5tZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3Jfb3B0aW9uc19wYi5DYWxjdWxhdG9yT3B0aW9ucy5leHRlbnNpb25zQmluYXJ5WzQ3OTA5NzA1NF0gPSBuZXcganNwYi5FeHRlbnNpb25GaWVsZEJpbmFyeUluZm8oXG4gICAgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMuZXh0LFxuICAgIGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkTWVzc2FnZSxcbiAgICBqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVNZXNzYWdlLFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyLFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLnByb3RvLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcixcbiAgICBmYWxzZSk7XG4vLyBUaGlzIHJlZ2lzdGVycyB0aGUgZXh0ZW5zaW9uIGZpZWxkIHdpdGggdGhlIGV4dGVuZGVkIGNsYXNzLCBzbyB0aGF0XG4vLyB0b09iamVjdCgpIHdpbGwgZnVuY3Rpb24gY29ycmVjdGx5LlxubWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX29wdGlvbnNfcGIuQ2FsY3VsYXRvck9wdGlvbnMuZXh0ZW5zaW9uc1s0NzkwOTcwNTRdID0gcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8uR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMuZXh0O1xuXG5nb29nLm9iamVjdC5leHRlbmQoZXhwb3J0cywgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5nZXN0dXJlX3JlY29nbml6ZXIucHJvdG8pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIyIFRoZSBNZWRpYVBpcGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR2VzdHVyZVJlY29nbml6ZXIgPSB2b2lkIDA7XG5jb25zdCBjYWxjdWxhdG9yX3BiXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL2NhbGN1bGF0b3JfcGJcIik7XG5jb25zdCBjYWxjdWxhdG9yX29wdGlvbnNfcGJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9mcmFtZXdvcmsvY2FsY3VsYXRvcl9vcHRpb25zX3BiXCIpO1xuY29uc3QgY2xhc3NpZmljYXRpb25fcGJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9mcmFtZXdvcmsvZm9ybWF0cy9jbGFzc2lmaWNhdGlvbl9wYlwiKTtcbmNvbnN0IGxhbmRtYXJrX3BiXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL2Zvcm1hdHMvbGFuZG1hcmtfcGJcIik7XG5jb25zdCByZWN0X3BiXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL2Zvcm1hdHMvcmVjdF9wYlwiKTtcbmNvbnN0IGdlc3R1cmVfY2xhc3NpZmllcl9ncmFwaF9vcHRpb25zX3BiXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vdGFza3MvY2MvdmlzaW9uL2dlc3R1cmVfcmVjb2duaXplci9wcm90by9nZXN0dXJlX2NsYXNzaWZpZXJfZ3JhcGhfb3B0aW9uc19wYlwiKTtcbmNvbnN0IGdlc3R1cmVfcmVjb2duaXplcl9ncmFwaF9vcHRpb25zX3BiXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vdGFza3MvY2MvdmlzaW9uL2dlc3R1cmVfcmVjb2duaXplci9wcm90by9nZXN0dXJlX3JlY29nbml6ZXJfZ3JhcGhfb3B0aW9uc19wYlwiKTtcbmNvbnN0IGhhbmRfZ2VzdHVyZV9yZWNvZ25pemVyX2dyYXBoX29wdGlvbnNfcGJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi90YXNrcy9jYy92aXNpb24vZ2VzdHVyZV9yZWNvZ25pemVyL3Byb3RvL2hhbmRfZ2VzdHVyZV9yZWNvZ25pemVyX2dyYXBoX29wdGlvbnNfcGJcIik7XG5jb25zdCBoYW5kX2RldGVjdG9yX2dyYXBoX29wdGlvbnNfcGJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi90YXNrcy9jYy92aXNpb24vaGFuZF9kZXRlY3Rvci9wcm90by9oYW5kX2RldGVjdG9yX2dyYXBoX29wdGlvbnNfcGJcIik7XG5jb25zdCBoYW5kX2xhbmRtYXJrZXJfZ3JhcGhfb3B0aW9uc19wYl8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL3Rhc2tzL2NjL3Zpc2lvbi9oYW5kX2xhbmRtYXJrZXIvcHJvdG8vaGFuZF9sYW5kbWFya2VyX2dyYXBoX29wdGlvbnNfcGJcIik7XG5jb25zdCBoYW5kX2xhbmRtYXJrc19kZXRlY3Rvcl9ncmFwaF9vcHRpb25zX3BiXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vdGFza3MvY2MvdmlzaW9uL2hhbmRfbGFuZG1hcmtlci9wcm90by9oYW5kX2xhbmRtYXJrc19kZXRlY3Rvcl9ncmFwaF9vcHRpb25zX3BiXCIpO1xuY29uc3QgYmFzZV9vcHRpb25zXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vdGFza3Mvd2ViL2NvbXBvbmVudHMvcHJvY2Vzc29ycy9iYXNlX29wdGlvbnNcIik7XG5jb25zdCBjbGFzc2lmaWVyX29wdGlvbnNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi90YXNrcy93ZWIvY29tcG9uZW50cy9wcm9jZXNzb3JzL2NsYXNzaWZpZXJfb3B0aW9uc1wiKTtcbmNvbnN0IHRhc2tfcnVubmVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vdGFza3Mvd2ViL2NvcmUvdGFza19ydW5uZXJcIik7XG5jb25zdCB3YXNtX21lZGlhcGlwZV9saWJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi93ZWIvZ3JhcGhfcnVubmVyL3dhc21fbWVkaWFwaXBlX2xpYlwiKTtcbi8vIFRoZSBPU1MgSlMgQVBJIGRvZXMgbm90IHN1cHBvcnQgdGhlIGJ1aWxkZXIgcGF0dGVybi5cbi8vIHRzbGludDpkaXNhYmxlOmpzcGItdXNlLWJ1aWxkZXItcGF0dGVyblxuY29uc3QgSU1BR0VfU1RSRUFNID0gJ2ltYWdlX2luJztcbmNvbnN0IE5PUk1fUkVDVF9TVFJFQU0gPSAnbm9ybV9yZWN0JztcbmNvbnN0IEhBTkRfR0VTVFVSRVNfU1RSRUFNID0gJ2hhbmRfZ2VzdHVyZXMnO1xuY29uc3QgTEFORE1BUktTX1NUUkVBTSA9ICdoYW5kX2xhbmRtYXJrcyc7XG5jb25zdCBXT1JMRF9MQU5ETUFSS1NfU1RSRUFNID0gJ3dvcmxkX2hhbmRfbGFuZG1hcmtzJztcbmNvbnN0IEhBTkRFRE5FU1NfU1RSRUFNID0gJ2hhbmRlZG5lc3MnO1xuY29uc3QgR0VTVFVSRV9SRUNPR05JWkVSX0dSQVBIID0gJ21lZGlhcGlwZS50YXNrcy52aXNpb24uZ2VzdHVyZV9yZWNvZ25pemVyLkdlc3R1cmVSZWNvZ25pemVyR3JhcGgnO1xuY29uc3QgREVGQVVMVF9OVU1fSEFORFMgPSAxO1xuY29uc3QgREVGQVVMVF9TQ09SRV9USFJFU0hPTEQgPSAwLjU7XG5jb25zdCBERUZBVUxUX0NBVEVHT1JZX0lOREVYID0gLTE7XG5jb25zdCBGVUxMX0lNQUdFX1JFQ1QgPSBuZXcgcmVjdF9wYl8xLk5vcm1hbGl6ZWRSZWN0KCk7XG5GVUxMX0lNQUdFX1JFQ1Quc2V0WENlbnRlcigwLjUpO1xuRlVMTF9JTUFHRV9SRUNULnNldFlDZW50ZXIoMC41KTtcbkZVTExfSU1BR0VfUkVDVC5zZXRXaWR0aCgxKTtcbkZVTExfSU1BR0VfUkVDVC5zZXRIZWlnaHQoMSk7XG4vKiogUGVyZm9ybXMgaGFuZCBnZXN0dXJlIHJlY29nbml0aW9uIG9uIGltYWdlcy4gKi9cbmNsYXNzIEdlc3R1cmVSZWNvZ25pemVyIGV4dGVuZHMgdGFza19ydW5uZXJfMS5UYXNrUnVubmVyIHtcbiAgICBjb25zdHJ1Y3Rvcih3YXNtTW9kdWxlKSB7XG4gICAgICAgIHN1cGVyKHdhc21Nb2R1bGUpO1xuICAgICAgICB0aGlzLmdlc3R1cmVzID0gW107XG4gICAgICAgIHRoaXMubGFuZG1hcmtzID0gW107XG4gICAgICAgIHRoaXMud29ybGRMYW5kbWFya3MgPSBbXTtcbiAgICAgICAgdGhpcy5oYW5kZWRuZXNzZXMgPSBbXTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gbmV3IGdlc3R1cmVfcmVjb2duaXplcl9ncmFwaF9vcHRpb25zX3BiXzEuR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnMoKTtcbiAgICAgICAgdGhpcy5oYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucyA9IG5ldyBoYW5kX2xhbmRtYXJrZXJfZ3JhcGhfb3B0aW9uc19wYl8xLkhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zKCk7XG4gICAgICAgIHRoaXMub3B0aW9ucy5zZXRIYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucyh0aGlzLmhhbmRMYW5kbWFya2VyR3JhcGhPcHRpb25zKTtcbiAgICAgICAgdGhpcy5oYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMgPVxuICAgICAgICAgICAgbmV3IGhhbmRfbGFuZG1hcmtzX2RldGVjdG9yX2dyYXBoX29wdGlvbnNfcGJfMS5IYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMoKTtcbiAgICAgICAgdGhpcy5oYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucy5zZXRIYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnModGhpcy5oYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMpO1xuICAgICAgICB0aGlzLmhhbmREZXRlY3RvckdyYXBoT3B0aW9ucyA9IG5ldyBoYW5kX2RldGVjdG9yX2dyYXBoX29wdGlvbnNfcGJfMS5IYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnMoKTtcbiAgICAgICAgdGhpcy5oYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucy5zZXRIYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnModGhpcy5oYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnMpO1xuICAgICAgICB0aGlzLmhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucyA9XG4gICAgICAgICAgICBuZXcgaGFuZF9nZXN0dXJlX3JlY29nbml6ZXJfZ3JhcGhfb3B0aW9uc19wYl8xLkhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9ucygpO1xuICAgICAgICB0aGlzLm9wdGlvbnMuc2V0SGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zKHRoaXMuaGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zKTtcbiAgICAgICAgdGhpcy5pbml0RGVmYXVsdHMoKTtcbiAgICAgICAgLy8gRGlzYWJsZXMgdGhlIGF1dG9tYXRpYyByZW5kZXItdG8tc2NyZWVuIGNvZGUsIHdoaWNoIGFsbG93cyBmb3IgcHVyZVxuICAgICAgICAvLyBDUFUgcHJvY2Vzc2luZy5cbiAgICAgICAgdGhpcy5zZXRBdXRvUmVuZGVyVG9TY3JlZW4oZmFsc2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgV2FzbSBydW50aW1lIGFuZCBjcmVhdGVzIGEgbmV3IGdlc3R1cmUgcmVjb2duaXplciBmcm9tIHRoZVxuICAgICAqIHByb3ZpZGVkIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHdhc21Mb2FkZXJPcHRpb25zIEEgY29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCBwcm92aWRlcyB0aGUgbG9jYXRpb25cbiAgICAgKiAgICAgb2YgdGhlIFdhc20gYmluYXJ5IGFuZCBpdHMgbG9hZGVyLlxuICAgICAqIEBwYXJhbSBnZXN0dXJlUmVjb2duaXplck9wdGlvbnMgVGhlIG9wdGlvbnMgZm9yIHRoZSBnZXN0dXJlIHJlY29nbml6ZXIuXG4gICAgICogICAgIE5vdGUgdGhhdCBlaXRoZXIgYSBwYXRoIHRvIHRoZSBtb2RlbCBhc3NldCBvciBhIG1vZGVsIGJ1ZmZlciBuZWVkcyB0b1xuICAgICAqICAgICBiZSBwcm92aWRlZCAodmlhIGBiYXNlT3B0aW9uc2ApLlxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBjcmVhdGVGcm9tT3B0aW9ucyh3YXNtTG9hZGVyT3B0aW9ucywgZ2VzdHVyZVJlY29nbml6ZXJPcHRpb25zKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIGZpbGUgbG9jYXRvciBiYXNlZCBvbiB0aGUgbG9hZGVyIG9wdGlvbnNcbiAgICAgICAgY29uc3QgZmlsZUxvY2F0b3IgPSB7XG4gICAgICAgICAgICBsb2NhdGVGaWxlKCkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBvbmx5IGZpbGUgd2UgbG9hZCB2aWEgdGhpcyBtZWNoYW5pc20gaXMgdGhlIFdhc20gYmluYXJ5XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdhc21Mb2FkZXJPcHRpb25zLndhc21CaW5hcnlQYXRoLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlY29nbml6ZXIgPSBhd2FpdCAoMCwgd2FzbV9tZWRpYXBpcGVfbGliXzEuY3JlYXRlTWVkaWFQaXBlTGliKShHZXN0dXJlUmVjb2duaXplciwgd2FzbUxvYWRlck9wdGlvbnMud2FzbUxvYWRlclBhdGgsIFxuICAgICAgICAvKiBhc3NldExvYWRlclNjcmlwdD0gKi8gdW5kZWZpbmVkLCBcbiAgICAgICAgLyogZ2xDYW52YXM9ICovIHVuZGVmaW5lZCwgZmlsZUxvY2F0b3IpO1xuICAgICAgICBhd2FpdCByZWNvZ25pemVyLnNldE9wdGlvbnMoZ2VzdHVyZVJlY29nbml6ZXJPcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHJlY29nbml6ZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBXYXNtIHJ1bnRpbWUgYW5kIGNyZWF0ZXMgYSBuZXcgZ2VzdHVyZSByZWNvZ25pemVyIGJhc2VkIG9uXG4gICAgICogdGhlIHByb3ZpZGVkIG1vZGVsIGFzc2V0IGJ1ZmZlci5cbiAgICAgKiBAcGFyYW0gd2FzbUxvYWRlck9wdGlvbnMgQSBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IHByb3ZpZGVzIHRoZSBsb2NhdGlvblxuICAgICAqICAgICBvZiB0aGUgV2FzbSBiaW5hcnkgYW5kIGl0cyBsb2FkZXIuXG4gICAgICogQHBhcmFtIG1vZGVsQXNzZXRCdWZmZXIgQSBiaW5hcnkgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1vZGVsLlxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVGcm9tTW9kZWxCdWZmZXIod2FzbUxvYWRlck9wdGlvbnMsIG1vZGVsQXNzZXRCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIEdlc3R1cmVSZWNvZ25pemVyLmNyZWF0ZUZyb21PcHRpb25zKHdhc21Mb2FkZXJPcHRpb25zLCB7IGJhc2VPcHRpb25zOiB7IG1vZGVsQXNzZXRCdWZmZXIgfSB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIFdhc20gcnVudGltZSBhbmQgY3JlYXRlcyBhIG5ldyBnZXN0dXJlIHJlY29nbml6ZXIgYmFzZWQgb25cbiAgICAgKiB0aGUgcGF0aCB0byB0aGUgbW9kZWwgYXNzZXQuXG4gICAgICogQHBhcmFtIHdhc21Mb2FkZXJPcHRpb25zIEEgY29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCBwcm92aWRlcyB0aGUgbG9jYXRpb25cbiAgICAgKiAgICAgb2YgdGhlIFdhc20gYmluYXJ5IGFuZCBpdHMgbG9hZGVyLlxuICAgICAqIEBwYXJhbSBtb2RlbEFzc2V0UGF0aCBUaGUgcGF0aCB0byB0aGUgbW9kZWwgYXNzZXQuXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGNyZWF0ZUZyb21Nb2RlbFBhdGgod2FzbUxvYWRlck9wdGlvbnMsIG1vZGVsQXNzZXRQYXRoKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gobW9kZWxBc3NldFBhdGgudG9TdHJpbmcoKSk7XG4gICAgICAgIGNvbnN0IGdyYXBoRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG4gICAgICAgIHJldHVybiBHZXN0dXJlUmVjb2duaXplci5jcmVhdGVGcm9tTW9kZWxCdWZmZXIod2FzbUxvYWRlck9wdGlvbnMsIG5ldyBVaW50OEFycmF5KGdyYXBoRGF0YSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIG5ldyBvcHRpb25zIGZvciB0aGUgZ2VzdHVyZSByZWNvZ25pemVyLlxuICAgICAqXG4gICAgICogQ2FsbGluZyBgc2V0T3B0aW9ucygpYCB3aXRoIGEgc3Vic2V0IG9mIG9wdGlvbnMgb25seSBhZmZlY3RzIHRob3NlIG9wdGlvbnMuXG4gICAgICogWW91IGNhbiByZXNldCBhbiBvcHRpb24gYmFjayB0byBpdHMgZGVmYXVsdCB2YWx1ZSBieSBleHBsaWNpdGx5IHNldHRpbmcgaXRcbiAgICAgKiB0byBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIGZvciB0aGUgZ2VzdHVyZSByZWNvZ25pemVyLlxuICAgICAqL1xuICAgIGFzeW5jIHNldE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oO1xuICAgICAgICBpZiAob3B0aW9ucy5iYXNlT3B0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgYmFzZU9wdGlvbnNQcm90byA9IGF3YWl0ICgwLCBiYXNlX29wdGlvbnNfMS5jb252ZXJ0QmFzZU9wdGlvbnNUb1Byb3RvKShvcHRpb25zLmJhc2VPcHRpb25zLCB0aGlzLm9wdGlvbnMuZ2V0QmFzZU9wdGlvbnMoKSk7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2V0QmFzZU9wdGlvbnMoYmFzZU9wdGlvbnNQcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCdudW1IYW5kcycgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5oYW5kRGV0ZWN0b3JHcmFwaE9wdGlvbnMuc2V0TnVtSGFuZHMoKF9hID0gb3B0aW9ucy5udW1IYW5kcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogREVGQVVMVF9OVU1fSEFORFMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnbWluSGFuZERldGVjdGlvbkNvbmZpZGVuY2UnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZERldGVjdG9yR3JhcGhPcHRpb25zLnNldE1pbkRldGVjdGlvbkNvbmZpZGVuY2UoKF9iID0gb3B0aW9ucy5taW5IYW5kRGV0ZWN0aW9uQ29uZmlkZW5jZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogREVGQVVMVF9TQ09SRV9USFJFU0hPTEQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnbWluSGFuZFByZXNlbmNlQ29uZmlkZW5jZScgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5oYW5kTGFuZG1hcmtzRGV0ZWN0b3JHcmFwaE9wdGlvbnMuc2V0TWluRGV0ZWN0aW9uQ29uZmlkZW5jZSgoX2MgPSBvcHRpb25zLm1pbkhhbmRQcmVzZW5jZUNvbmZpZGVuY2UpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IERFRkFVTFRfU0NPUkVfVEhSRVNIT0xEKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ21pblRyYWNraW5nQ29uZmlkZW5jZScgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5oYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucy5zZXRNaW5UcmFja2luZ0NvbmZpZGVuY2UoKF9kID0gb3B0aW9ucy5taW5UcmFja2luZ0NvbmZpZGVuY2UpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IERFRkFVTFRfU0NPUkVfVEhSRVNIT0xEKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5jYW5uZWRHZXN0dXJlc0NsYXNzaWZpZXJPcHRpb25zKSB7XG4gICAgICAgICAgICAvLyBOb3RlIHRoYXQgd2UgaGF2ZSB0byBzdXBwb3J0IGJvdGggSlNQQiBhbmQgUHJvdG9idWZKUyBhbmQgY2Fubm90XG4gICAgICAgICAgICAvLyB1c2UgSlNQQidzIGdldE11dGFibGVYKCkgQVBJcy5cbiAgICAgICAgICAgIGNvbnN0IGdyYXBoT3B0aW9ucyA9IG5ldyBnZXN0dXJlX2NsYXNzaWZpZXJfZ3JhcGhfb3B0aW9uc19wYl8xLkdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zKCk7XG4gICAgICAgICAgICBncmFwaE9wdGlvbnMuc2V0Q2xhc3NpZmllck9wdGlvbnMoKDAsIGNsYXNzaWZpZXJfb3B0aW9uc18xLmNvbnZlcnRDbGFzc2lmaWVyT3B0aW9uc1RvUHJvdG8pKG9wdGlvbnMuY2FubmVkR2VzdHVyZXNDbGFzc2lmaWVyT3B0aW9ucywgKF9lID0gdGhpcy5oYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnNcbiAgICAgICAgICAgICAgICAuZ2V0Q2FubmVkR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMoKSkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLmdldENsYXNzaWZpZXJPcHRpb25zKCkpKTtcbiAgICAgICAgICAgIHRoaXMuaGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zXG4gICAgICAgICAgICAgICAgLnNldENhbm5lZEdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zKGdyYXBoT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucy5jYW5uZWRHZXN0dXJlc0NsYXNzaWZpZXJPcHRpb25zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIChfZiA9IHRoaXMuaGFuZEdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zXG4gICAgICAgICAgICAgICAgLmdldENhbm5lZEdlc3R1cmVDbGFzc2lmaWVyR3JhcGhPcHRpb25zKCkpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5jbGVhckNsYXNzaWZpZXJPcHRpb25zKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuY3VzdG9tR2VzdHVyZXNDbGFzc2lmaWVyT3B0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgZ3JhcGhPcHRpb25zID0gbmV3IGdlc3R1cmVfY2xhc3NpZmllcl9ncmFwaF9vcHRpb25zX3BiXzEuR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMoKTtcbiAgICAgICAgICAgIGdyYXBoT3B0aW9ucy5zZXRDbGFzc2lmaWVyT3B0aW9ucygoMCwgY2xhc3NpZmllcl9vcHRpb25zXzEuY29udmVydENsYXNzaWZpZXJPcHRpb25zVG9Qcm90bykob3B0aW9ucy5jdXN0b21HZXN0dXJlc0NsYXNzaWZpZXJPcHRpb25zLCAoX2cgPSB0aGlzLmhhbmRHZXN0dXJlUmVjb2duaXplckdyYXBoT3B0aW9uc1xuICAgICAgICAgICAgICAgIC5nZXRDdXN0b21HZXN0dXJlQ2xhc3NpZmllckdyYXBoT3B0aW9ucygpKSA9PT0gbnVsbCB8fCBfZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2cuZ2V0Q2xhc3NpZmllck9wdGlvbnMoKSkpO1xuICAgICAgICAgICAgdGhpcy5oYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnNcbiAgICAgICAgICAgICAgICAuc2V0Q3VzdG9tR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMoZ3JhcGhPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zLmN1c3RvbUdlc3R1cmVzQ2xhc3NpZmllck9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgKF9oID0gdGhpcy5oYW5kR2VzdHVyZVJlY29nbml6ZXJHcmFwaE9wdGlvbnNcbiAgICAgICAgICAgICAgICAuZ2V0Q3VzdG9tR2VzdHVyZUNsYXNzaWZpZXJHcmFwaE9wdGlvbnMoKSkgPT09IG51bGwgfHwgX2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9oLmNsZWFyQ2xhc3NpZmllck9wdGlvbnMoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZnJlc2hHcmFwaCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBnZXN0dXJlIHJlY29nbml0aW9uIG9uIHRoZSBwcm92aWRlZCBzaW5nbGUgaW1hZ2UgYW5kIHdhaXRzXG4gICAgICogc3luY2hyb25vdXNseSBmb3IgdGhlIHJlc3BvbnNlLlxuICAgICAqIEBwYXJhbSBpbWFnZVNvdXJjZSBBbiBpbWFnZSBzb3VyY2UgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0gdGltZXN0YW1wIFRoZSB0aW1lc3RhbXAgb2YgdGhlIGN1cnJlbnQgZnJhbWUsIGluIG1zLiBJZiBub3RcbiAgICAgKiAgICBwcm92aWRlZCwgZGVmYXVsdHMgdG8gYHBlcmZvcm1hbmNlLm5vdygpYC5cbiAgICAgKiBAcmV0dXJuIFRoZSBkZXRlY3RlZCBnZXN0dXJlcy5cbiAgICAgKi9cbiAgICByZWNvZ25pemUoaW1hZ2VTb3VyY2UsIHRpbWVzdGFtcCA9IHBlcmZvcm1hbmNlLm5vdygpKSB7XG4gICAgICAgIHRoaXMuZ2VzdHVyZXMgPSBbXTtcbiAgICAgICAgdGhpcy5sYW5kbWFya3MgPSBbXTtcbiAgICAgICAgdGhpcy53b3JsZExhbmRtYXJrcyA9IFtdO1xuICAgICAgICB0aGlzLmhhbmRlZG5lc3NlcyA9IFtdO1xuICAgICAgICB0aGlzLmFkZEdwdUJ1ZmZlckFzSW1hZ2VUb1N0cmVhbShpbWFnZVNvdXJjZSwgSU1BR0VfU1RSRUFNLCB0aW1lc3RhbXApO1xuICAgICAgICB0aGlzLmFkZFByb3RvVG9TdHJlYW0oRlVMTF9JTUFHRV9SRUNULnNlcmlhbGl6ZUJpbmFyeSgpLCAnbWVkaWFwaXBlLk5vcm1hbGl6ZWRSZWN0JywgTk9STV9SRUNUX1NUUkVBTSwgdGltZXN0YW1wKTtcbiAgICAgICAgdGhpcy5maW5pc2hQcm9jZXNzaW5nKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXN0dXJlczogdGhpcy5nZXN0dXJlcyxcbiAgICAgICAgICAgIGxhbmRtYXJrczogdGhpcy5sYW5kbWFya3MsXG4gICAgICAgICAgICB3b3JsZExhbmRtYXJrczogdGhpcy53b3JsZExhbmRtYXJrcyxcbiAgICAgICAgICAgIGhhbmRlZG5lc3NlczogdGhpcy5oYW5kZWRuZXNzZXNcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqIFNldHMgdGhlIGRlZmF1bHQgdmFsdWVzIGZvciB0aGUgZ3JhcGguICovXG4gICAgaW5pdERlZmF1bHRzKCkge1xuICAgICAgICB0aGlzLmhhbmREZXRlY3RvckdyYXBoT3B0aW9ucy5zZXROdW1IYW5kcyhERUZBVUxUX05VTV9IQU5EUyk7XG4gICAgICAgIHRoaXMuaGFuZERldGVjdG9yR3JhcGhPcHRpb25zLnNldE1pbkRldGVjdGlvbkNvbmZpZGVuY2UoREVGQVVMVF9TQ09SRV9USFJFU0hPTEQpO1xuICAgICAgICB0aGlzLmhhbmRMYW5kbWFya3NEZXRlY3RvckdyYXBoT3B0aW9ucy5zZXRNaW5EZXRlY3Rpb25Db25maWRlbmNlKERFRkFVTFRfU0NPUkVfVEhSRVNIT0xEKTtcbiAgICAgICAgdGhpcy5oYW5kTGFuZG1hcmtlckdyYXBoT3B0aW9ucy5zZXRNaW5UcmFja2luZ0NvbmZpZGVuY2UoREVGQVVMVF9TQ09SRV9USFJFU0hPTEQpO1xuICAgIH1cbiAgICAvKiogQ29udmVydHMgdGhlIHByb3RvIGRhdGEgdG8gYSBDYXRlZ29yeVtdW10gc3RydWN0dXJlLiAqL1xuICAgIHRvSnNDYXRlZ29yaWVzKGRhdGEpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBiaW5hcnlQcm90byBvZiBkYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dExpc3QgPSBjbGFzc2lmaWNhdGlvbl9wYl8xLkNsYXNzaWZpY2F0aW9uTGlzdC5kZXNlcmlhbGl6ZUJpbmFyeShiaW5hcnlQcm90byk7XG4gICAgICAgICAgICBjb25zdCBvdXRwdXRMaXN0ID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNsYXNzaWZpY2F0aW9uIG9mIGlucHV0TGlzdC5nZXRDbGFzc2lmaWNhdGlvbkxpc3QoKSkge1xuICAgICAgICAgICAgICAgIG91dHB1dExpc3QucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHNjb3JlOiAoX2EgPSBjbGFzc2lmaWNhdGlvbi5nZXRTY29yZSgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwLFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogKF9iID0gY2xhc3NpZmljYXRpb24uZ2V0SW5kZXgoKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogREVGQVVMVF9DQVRFR09SWV9JTkRFWCxcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlOYW1lOiAoX2MgPSBjbGFzc2lmaWNhdGlvbi5nZXRMYWJlbCgpKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IChfZCA9IGNsYXNzaWZpY2F0aW9uLmdldERpc3BsYXlOYW1lKCkpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6ICcnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnB1c2gob3V0cHV0TGlzdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqIENvbnZlcnRzIHJhdyBkYXRhIGludG8gYSBsYW5kbWFyaywgYW5kIGFkZHMgaXQgdG8gb3VyIGxhbmRtYXJrcyBsaXN0LiAqL1xuICAgIGFkZEpzTGFuZG1hcmtzKGRhdGEpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGZvciAoY29uc3QgYmluYXJ5UHJvdG8gb2YgZGF0YSkge1xuICAgICAgICAgICAgY29uc3QgaGFuZExhbmRtYXJrc1Byb3RvID0gbGFuZG1hcmtfcGJfMS5Ob3JtYWxpemVkTGFuZG1hcmtMaXN0LmRlc2VyaWFsaXplQmluYXJ5KGJpbmFyeVByb3RvKTtcbiAgICAgICAgICAgIGNvbnN0IGxhbmRtYXJrcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBoYW5kTGFuZG1hcmtQcm90byBvZiBoYW5kTGFuZG1hcmtzUHJvdG8uZ2V0TGFuZG1hcmtMaXN0KCkpIHtcbiAgICAgICAgICAgICAgICBsYW5kbWFya3MucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHg6IChfYSA9IGhhbmRMYW5kbWFya1Byb3RvLmdldFgoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMCxcbiAgICAgICAgICAgICAgICAgICAgeTogKF9iID0gaGFuZExhbmRtYXJrUHJvdG8uZ2V0WSgpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwLFxuICAgICAgICAgICAgICAgICAgICB6OiAoX2MgPSBoYW5kTGFuZG1hcmtQcm90by5nZXRaKCkpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDAsXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubGFuZG1hcmtzLnB1c2gobGFuZG1hcmtzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyByYXcgZGF0YSBpbnRvIGEgbGFuZG1hcmssIGFuZCBhZGRzIGl0IHRvIG91ciB3b3JsZExhbmRtYXJrc1xuICAgICAqIGxpc3QuXG4gICAgICovXG4gICAgYWRkZEpzV29ybGRMYW5kbWFya3MoZGF0YSkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgZm9yIChjb25zdCBiaW5hcnlQcm90byBvZiBkYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBoYW5kV29ybGRMYW5kbWFya3NQcm90byA9IGxhbmRtYXJrX3BiXzEuTGFuZG1hcmtMaXN0LmRlc2VyaWFsaXplQmluYXJ5KGJpbmFyeVByb3RvKTtcbiAgICAgICAgICAgIGNvbnN0IHdvcmxkTGFuZG1hcmtzID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGhhbmRXb3JsZExhbmRtYXJrUHJvdG8gb2YgaGFuZFdvcmxkTGFuZG1hcmtzUHJvdG8uZ2V0TGFuZG1hcmtMaXN0KCkpIHtcbiAgICAgICAgICAgICAgICB3b3JsZExhbmRtYXJrcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgeDogKF9hID0gaGFuZFdvcmxkTGFuZG1hcmtQcm90by5nZXRYKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDAsXG4gICAgICAgICAgICAgICAgICAgIHk6IChfYiA9IGhhbmRXb3JsZExhbmRtYXJrUHJvdG8uZ2V0WSgpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwLFxuICAgICAgICAgICAgICAgICAgICB6OiAoX2MgPSBoYW5kV29ybGRMYW5kbWFya1Byb3RvLmdldFooKSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMCxcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMud29ybGRMYW5kbWFya3MucHVzaCh3b3JsZExhbmRtYXJrcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIFVwZGF0ZXMgdGhlIE1lZGlhUGlwZSBncmFwaCBjb25maWd1cmF0aW9uLiAqL1xuICAgIHJlZnJlc2hHcmFwaCgpIHtcbiAgICAgICAgY29uc3QgZ3JhcGhDb25maWcgPSBuZXcgY2FsY3VsYXRvcl9wYl8xLkNhbGN1bGF0b3JHcmFwaENvbmZpZygpO1xuICAgICAgICBncmFwaENvbmZpZy5hZGRJbnB1dFN0cmVhbShJTUFHRV9TVFJFQU0pO1xuICAgICAgICBncmFwaENvbmZpZy5hZGRJbnB1dFN0cmVhbShOT1JNX1JFQ1RfU1RSRUFNKTtcbiAgICAgICAgZ3JhcGhDb25maWcuYWRkT3V0cHV0U3RyZWFtKEhBTkRfR0VTVFVSRVNfU1RSRUFNKTtcbiAgICAgICAgZ3JhcGhDb25maWcuYWRkT3V0cHV0U3RyZWFtKExBTkRNQVJLU19TVFJFQU0pO1xuICAgICAgICBncmFwaENvbmZpZy5hZGRPdXRwdXRTdHJlYW0oV09STERfTEFORE1BUktTX1NUUkVBTSk7XG4gICAgICAgIGdyYXBoQ29uZmlnLmFkZE91dHB1dFN0cmVhbShIQU5ERURORVNTX1NUUkVBTSk7XG4gICAgICAgIGNvbnN0IGNhbGN1bGF0b3JPcHRpb25zID0gbmV3IGNhbGN1bGF0b3Jfb3B0aW9uc19wYl8xLkNhbGN1bGF0b3JPcHRpb25zKCk7XG4gICAgICAgIGNhbGN1bGF0b3JPcHRpb25zLnNldEV4dGVuc2lvbihnZXN0dXJlX3JlY29nbml6ZXJfZ3JhcGhfb3B0aW9uc19wYl8xLkdlc3R1cmVSZWNvZ25pemVyR3JhcGhPcHRpb25zLmV4dCwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgY29uc3QgcmVjb2duaXplck5vZGUgPSBuZXcgY2FsY3VsYXRvcl9wYl8xLkNhbGN1bGF0b3JHcmFwaENvbmZpZy5Ob2RlKCk7XG4gICAgICAgIHJlY29nbml6ZXJOb2RlLnNldENhbGN1bGF0b3IoR0VTVFVSRV9SRUNPR05JWkVSX0dSQVBIKTtcbiAgICAgICAgcmVjb2duaXplck5vZGUuYWRkSW5wdXRTdHJlYW0oJ0lNQUdFOicgKyBJTUFHRV9TVFJFQU0pO1xuICAgICAgICByZWNvZ25pemVyTm9kZS5hZGRJbnB1dFN0cmVhbSgnTk9STV9SRUNUOicgKyBOT1JNX1JFQ1RfU1RSRUFNKTtcbiAgICAgICAgcmVjb2duaXplck5vZGUuYWRkT3V0cHV0U3RyZWFtKCdIQU5EX0dFU1RVUkVTOicgKyBIQU5EX0dFU1RVUkVTX1NUUkVBTSk7XG4gICAgICAgIHJlY29nbml6ZXJOb2RlLmFkZE91dHB1dFN0cmVhbSgnTEFORE1BUktTOicgKyBMQU5ETUFSS1NfU1RSRUFNKTtcbiAgICAgICAgcmVjb2duaXplck5vZGUuYWRkT3V0cHV0U3RyZWFtKCdXT1JMRF9MQU5ETUFSS1M6JyArIFdPUkxEX0xBTkRNQVJLU19TVFJFQU0pO1xuICAgICAgICByZWNvZ25pemVyTm9kZS5hZGRPdXRwdXRTdHJlYW0oJ0hBTkRFRE5FU1M6JyArIEhBTkRFRE5FU1NfU1RSRUFNKTtcbiAgICAgICAgcmVjb2duaXplck5vZGUuc2V0T3B0aW9ucyhjYWxjdWxhdG9yT3B0aW9ucyk7XG4gICAgICAgIGdyYXBoQ29uZmlnLmFkZE5vZGUocmVjb2duaXplck5vZGUpO1xuICAgICAgICB0aGlzLmF0dGFjaFByb3RvVmVjdG9yTGlzdGVuZXIoTEFORE1BUktTX1NUUkVBTSwgYmluYXJ5UHJvdG8gPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRKc0xhbmRtYXJrcyhiaW5hcnlQcm90byk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmF0dGFjaFByb3RvVmVjdG9yTGlzdGVuZXIoV09STERfTEFORE1BUktTX1NUUkVBTSwgYmluYXJ5UHJvdG8gPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRkSnNXb3JsZExhbmRtYXJrcyhiaW5hcnlQcm90byk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmF0dGFjaFByb3RvVmVjdG9yTGlzdGVuZXIoSEFORF9HRVNUVVJFU19TVFJFQU0sIGJpbmFyeVByb3RvID0+IHtcbiAgICAgICAgICAgIHRoaXMuZ2VzdHVyZXMucHVzaCguLi50aGlzLnRvSnNDYXRlZ29yaWVzKGJpbmFyeVByb3RvKSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmF0dGFjaFByb3RvVmVjdG9yTGlzdGVuZXIoSEFOREVETkVTU19TVFJFQU0sIGJpbmFyeVByb3RvID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGVkbmVzc2VzLnB1c2goLi4udGhpcy50b0pzQ2F0ZWdvcmllcyhiaW5hcnlQcm90bykpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgYmluYXJ5R3JhcGggPSBncmFwaENvbmZpZy5zZXJpYWxpemVCaW5hcnkoKTtcbiAgICAgICAgdGhpcy5zZXRHcmFwaChuZXcgVWludDhBcnJheShiaW5hcnlHcmFwaCksIC8qIGlzQmluYXJ5PSAqLyB0cnVlKTtcbiAgICB9XG59XG5leHBvcnRzLkdlc3R1cmVSZWNvZ25pemVyID0gR2VzdHVyZVJlY29nbml6ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2laMlZ6ZEhWeVpWOXlaV052WjI1cGVtVnlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2TGk0dkxpNHZMaTR2TGk0dkxpNHZMaTR2YldWa2FXRndhWEJsTDNSaGMydHpMM2RsWWk5MmFYTnBiMjR2WjJWemRIVnlaVjl5WldOdloyNXBlbVZ5TDJkbGMzUjFjbVZmY21WamIyZHVhWHBsY2k1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3T3pzN096czdPenM3T3pzN08wZEJZMGM3T3p0QlFVVklMSFZGUVVFd1JUdEJRVU14UlN4MVJrRkJPRVU3UVVGRE9VVXNkVVpCUVcxR08wRkJRMjVHTERKRlFVRXJSanRCUVVNdlJpeHRSVUZCY1VVN1FVRkRja1VzYTBwQlFYVkpPMEZCUTNaSkxHdEtRVUYxU1R0QlFVTjJTU3cwU2tGQlowbzdRVUZEYUVvc2JVbEJRWGRJTzBGQlEzaElMSGxKUVVFNFNEdEJRVU01U0N4NVNrRkJOa2s3UVVGSE4wa3NNa1pCUVcxSE8wRkJRMjVITEhWSFFVRXJSenRCUVVNdlJ5eDNSVUZCYTBVN1FVRkZiRVVzZDBaQlFYbElPMEZCVVhwSUxIVkVRVUYxUkR0QlFVTjJSQ3d3UTBGQk1FTTdRVUZGTVVNc1RVRkJUU3haUVVGWkxFZEJRVWNzVlVGQlZTeERRVUZETzBGQlEyaERMRTFCUVUwc1owSkJRV2RDTEVkQlFVY3NWMEZCVnl4RFFVRkRPMEZCUTNKRExFMUJRVTBzYjBKQlFXOUNMRWRCUVVjc1pVRkJaU3hEUVVGRE8wRkJRemRETEUxQlFVMHNaMEpCUVdkQ0xFZEJRVWNzWjBKQlFXZENMRU5CUVVNN1FVRkRNVU1zVFVGQlRTeHpRa0ZCYzBJc1IwRkJSeXh6UWtGQmMwSXNRMEZCUXp0QlFVTjBSQ3hOUVVGTkxHbENRVUZwUWl4SFFVRkhMRmxCUVZrc1EwRkJRenRCUVVOMlF5eE5RVUZOTEhkQ1FVRjNRaXhIUVVNeFFpeHJSVUZCYTBVc1EwRkJRenRCUVVWMlJTeE5RVUZOTEdsQ1FVRnBRaXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU0xUWl4TlFVRk5MSFZDUVVGMVFpeEhRVUZITEVkQlFVY3NRMEZCUXp0QlFVTndReXhOUVVGTkxITkNRVUZ6UWl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJSV3hETEUxQlFVMHNaVUZCWlN4SFFVRkhMRWxCUVVrc2QwSkJRV01zUlVGQlJTeERRVUZETzBGQlF6ZERMR1ZCUVdVc1EwRkJReXhWUVVGVkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEYUVNc1pVRkJaU3hEUVVGRExGVkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTm9ReXhsUVVGbExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUXpWQ0xHVkJRV1VzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkZOMElzYlVSQlFXMUVPMEZCUTI1RUxFMUJRV0VzYVVKQlFXdENMRk5CUVZFc2QwSkJRVlU3U1VGNVJTOURMRmxCUVZrc1ZVRkJjMEk3VVVGRGFFTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8xRkJla1ZhTEdGQlFWRXNSMEZCYVVJc1JVRkJSU3hEUVVGRE8xRkJRelZDTEdOQlFWTXNSMEZCYVVJc1JVRkJSU3hEUVVGRE8xRkJRemRDTEcxQ1FVRmpMRWRCUVdsQ0xFVkJRVVVzUTBGQlF6dFJRVU5zUXl4cFFrRkJXU3hIUVVGcFFpeEZRVUZGTEVOQlFVTTdVVUYzUlhSRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NTVUZCU1N4dFJVRkJOa0lzUlVGQlJTeERRVUZETzFGQlEyNUVMRWxCUVVrc1EwRkJReXd3UWtGQk1FSXNSMEZCUnl4SlFVRkpMRFpFUVVFd1FpeEZRVUZGTEVOQlFVTTdVVUZEYmtVc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5dzJRa0ZCTmtJc1EwRkJReXhKUVVGSkxFTkJRVU1zTUVKQlFUQkNMRU5CUVVNc1EwRkJRenRSUVVNMVJTeEpRVUZKTEVOQlFVTXNhVU5CUVdsRE8xbEJRMnhETEVsQlFVa3NORVZCUVdsRExFVkJRVVVzUTBGQlF6dFJRVU0xUXl4SlFVRkpMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNiME5CUVc5RExFTkJRMmhGTEVsQlFVa3NRMEZCUXl4cFEwRkJhVU1zUTBGQlF5eERRVUZETzFGQlF6VkRMRWxCUVVrc1EwRkJReXgzUWtGQmQwSXNSMEZCUnl4SlFVRkpMSGxFUVVGM1FpeEZRVUZGTEVOQlFVTTdVVUZETDBRc1NVRkJTU3hEUVVGRExEQkNRVUV3UWl4RFFVRkRMREpDUVVFeVFpeERRVU4yUkN4SlFVRkpMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNRMEZCUXp0UlFVTnVReXhKUVVGSkxFTkJRVU1zYVVOQlFXbERPMWxCUTJ4RExFbEJRVWtzTkVWQlFXbERMRVZCUVVVc1EwRkJRenRSUVVNMVF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRzlEUVVGdlF5eERRVU0zUXl4SlFVRkpMRU5CUVVNc2FVTkJRV2xETEVOQlFVTXNRMEZCUXp0UlFVVTFReXhKUVVGSkxFTkJRVU1zV1VGQldTeEZRVUZGTEVOQlFVTTdVVUZGY0VJc2MwVkJRWE5GTzFGQlEzUkZMR3RDUVVGclFqdFJRVU5zUWl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1NVRkRjRU1zUTBGQlF6dEpRV3hHUkRzN096czdPenM3VDBGUlJ6dEpRVU5JTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc2FVSkJRV2xDTEVOQlF6RkNMR2xDUVVGdlF5eEZRVU53UXl4M1FrRkJhMFE3VVVGRmNFUXNiMFJCUVc5RU8xRkJRM0JFTEUxQlFVMHNWMEZCVnl4SFFVRm5RanRaUVVNdlFpeFZRVUZWTzJkQ1FVTlNMRGhFUVVFNFJEdG5Ra0ZET1VRc1QwRkJUeXhwUWtGQmFVSXNRMEZCUXl4alFVRmpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU03V1VGRGNrUXNRMEZCUXp0VFFVTkdMRU5CUVVNN1VVRkZSaXhOUVVGTkxGVkJRVlVzUjBGQlJ5eE5RVUZOTEVsQlFVRXNkVU5CUVd0Q0xFVkJRM1pETEdsQ1FVRnBRaXhGUVVGRkxHbENRVUZwUWl4RFFVRkRMR05CUVdNN1VVRkRia1FzZDBKQlFYZENMRU5CUVVNc1UwRkJVenRSUVVOc1F5eGxRVUZsTEVOQlFVTXNVMEZCVXl4RlFVRkZMRmRCUVZjc1EwRkJReXhEUVVGRE8xRkJRelZETEUxQlFVMHNWVUZCVlN4RFFVRkRMRlZCUVZVc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4RFFVRkRPMUZCUTNSRUxFOUJRVThzVlVGQlZTeERRVUZETzBsQlEzQkNMRU5CUVVNN1NVRkZSRHM3T3pzN08wOUJUVWM3U1VGRFNDeE5RVUZOTEVOQlFVTXNjVUpCUVhGQ0xFTkJRM2hDTEdsQ1FVRnZReXhGUVVOd1F5eG5Ra0ZCTkVJN1VVRkRPVUlzVDBGQlR5eHBRa0ZCYVVJc1EwRkJReXhwUWtGQmFVSXNRMEZEZEVNc2FVSkJRV2xDTEVWQlFVVXNSVUZCUXl4WFFVRlhMRVZCUVVVc1JVRkJReXhuUWtGQlowSXNSVUZCUXl4RlFVRkRMRU5CUVVNc1EwRkJRenRKUVVNMVJDeERRVUZETzBsQlJVUTdPenM3T3p0UFFVMUhPMGxCUTBnc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eHRRa0ZCYlVJc1EwRkROVUlzYVVKQlFXOURMRVZCUTNCRExHTkJRWE5DTzFGQlEzaENMRTFCUVUwc1VVRkJVU3hIUVVGSExFMUJRVTBzUzBGQlN5eERRVUZETEdOQlFXTXNRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRM2hFTEUxQlFVMHNVMEZCVXl4SFFVRkhMRTFCUVUwc1VVRkJVU3hEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZETzFGQlF5OURMRTlCUVU4c2FVSkJRV2xDTEVOQlFVTXNjVUpCUVhGQ0xFTkJRekZETEdsQ1FVRnBRaXhGUVVGRkxFbEJRVWtzVlVGQlZTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRjRVFzUTBGQlF6dEpRVEpDUkRzN096czdPenM3VDBGUlJ6dEpRVU5JTEV0QlFVc3NRMEZCUXl4VlFVRlZMRU5CUVVNc1QwRkJhVU03TzFGQlEyaEVMRWxCUVVrc1QwRkJUeXhEUVVGRExGZEJRVmNzUlVGQlJUdFpRVU4yUWl4TlFVRk5MR2RDUVVGblFpeEhRVUZITEUxQlFVMHNTVUZCUVN4M1EwRkJlVUlzUlVGRGNFUXNUMEZCVHl4RFFVRkRMRmRCUVZjc1JVRkJSU3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEdOQlFXTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1dVRkRlRVFzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4alFVRmpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXp0VFFVTXZRenRSUVVWRUxFbEJRVWtzVlVGQlZTeEpRVUZKTEU5QlFVOHNSVUZCUlR0WlFVTjZRaXhKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1YwRkJWeXhEUVVOeVF5eE5RVUZCTEU5QlFVOHNRMEZCUXl4UlFVRlJMRzFEUVVGSkxHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1UwRkROVU03VVVGRFJDeEpRVUZKTERSQ1FVRTBRaXhKUVVGSkxFOUJRVThzUlVGQlJUdFpRVU16UXl4SlFVRkpMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNlVUpCUVhsQ0xFTkJRMjVFTEUxQlFVRXNUMEZCVHl4RFFVRkRMREJDUVVFd1FpeHRRMEZCU1N4MVFrRkJkVUlzUTBGQlF5eERRVUZETzFOQlEzQkZPMUZCUTBRc1NVRkJTU3d5UWtGQk1rSXNTVUZCU1N4UFFVRlBMRVZCUVVVN1dVRkRNVU1zU1VGQlNTeERRVUZETEdsRFFVRnBReXhEUVVGRExIbENRVUY1UWl4RFFVTTFSQ3hOUVVGQkxFOUJRVThzUTBGQlF5eDVRa0ZCZVVJc2JVTkJRVWtzZFVKQlFYVkNMRU5CUVVNc1EwRkJRenRUUVVOdVJUdFJRVU5FTEVsQlFVa3NkVUpCUVhWQ0xFbEJRVWtzVDBGQlR5eEZRVUZGTzFsQlEzUkRMRWxCUVVrc1EwRkJReXd3UWtGQk1FSXNRMEZCUXl4M1FrRkJkMElzUTBGRGNFUXNUVUZCUVN4UFFVRlBMRU5CUVVNc2NVSkJRWEZDTEcxRFFVRkpMSFZDUVVGMVFpeERRVUZETEVOQlFVTTdVMEZETDBRN1VVRkZSQ3hKUVVGSkxFOUJRVThzUTBGQlF5d3JRa0ZCSzBJc1JVRkJSVHRaUVVNelF5eHRSVUZCYlVVN1dVRkRia1VzYVVOQlFXbERPMWxCUTJwRExFMUJRVTBzV1VGQldTeEhRVUZITEVsQlFVa3NiVVZCUVRaQ0xFVkJRVVVzUTBGQlF6dFpRVU42UkN4WlFVRlpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNTVUZCUVN4dlJFRkJLMElzUlVGRE4wUXNUMEZCVHl4RFFVRkRMQ3RDUVVFclFpeEZRVU4yUXl4TlFVRkJMRWxCUVVrc1EwRkJReXhwUTBGQmFVTTdhVUpCUTJwRExITkRRVUZ6UXl4RlFVRkZMREJEUVVOMlF5eHZRa0ZCYjBJc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU51UXl4SlFVRkpMRU5CUVVNc2FVTkJRV2xETzJsQ1FVTnFReXh6UTBGQmMwTXNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRenRUUVVNelJEdGhRVUZOTEVsQlFVa3NUMEZCVHl4RFFVRkRMQ3RDUVVFclFpeExRVUZMTEZOQlFWTXNSVUZCUlR0WlFVTm9SU3hOUVVGQkxFbEJRVWtzUTBGQlF5eHBRMEZCYVVNN2FVSkJRMnBETEhORFFVRnpReXhGUVVGRkxEQkRRVU4yUXl4elFrRkJjMElzUlVGQlJTeERRVUZETzFOQlEyaERPMUZCUlVRc1NVRkJTU3hQUVVGUExFTkJRVU1zSzBKQlFTdENMRVZCUVVVN1dVRkRNME1zVFVGQlRTeFpRVUZaTEVkQlFVY3NTVUZCU1N4dFJVRkJOa0lzUlVGQlJTeERRVUZETzFsQlEzcEVMRmxCUVZrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4SlFVRkJMRzlFUVVFclFpeEZRVU0zUkN4UFFVRlBMRU5CUVVNc0swSkJRU3RDTEVWQlEzWkRMRTFCUVVFc1NVRkJTU3hEUVVGRExHbERRVUZwUXp0cFFrRkRha01zYzBOQlFYTkRMRVZCUVVVc01FTkJRM1pETEc5Q1FVRnZRaXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyNURMRWxCUVVrc1EwRkJReXhwUTBGQmFVTTdhVUpCUTJwRExITkRRVUZ6UXl4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8xTkJRek5FTzJGQlFVMHNTVUZCU1N4UFFVRlBMRU5CUVVNc0swSkJRU3RDTEV0QlFVc3NVMEZCVXl4RlFVRkZPMWxCUTJoRkxFMUJRVUVzU1VGQlNTeERRVUZETEdsRFFVRnBRenRwUWtGRGFrTXNjME5CUVhORExFVkJRVVVzTUVOQlEzWkRMSE5DUVVGelFpeEZRVUZGTEVOQlFVTTdVMEZEYUVNN1VVRkZSQ3hKUVVGSkxFTkJRVU1zV1VGQldTeEZRVUZGTEVOQlFVTTdTVUZEZEVJc1EwRkJRenRKUVVWRU96czdPenM3TzA5QlQwYzdTVUZEU0N4VFFVRlRMRU5CUVVNc1YwRkJkMElzUlVGQlJTeFpRVUZ2UWl4WFFVRlhMRU5CUVVNc1IwRkJSeXhGUVVGRk8xRkJSWFpGTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRMjVDTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRM0JDTEVsQlFVa3NRMEZCUXl4alFVRmpMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRM3BDTEVsQlFVa3NRMEZCUXl4WlFVRlpMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJSWFpDTEVsQlFVa3NRMEZCUXl3eVFrRkJNa0lzUTBGQlF5eFhRVUZYTEVWQlFVVXNXVUZCV1N4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVGRE8xRkJRM1pGTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGRGFrSXNaVUZCWlN4RFFVRkRMR1ZCUVdVc1JVRkJSU3hGUVVGRkxEQkNRVUV3UWl4RlFVTTNSQ3huUWtGQlowSXNSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJRenRSUVVOcVF5eEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVVzUTBGQlF6dFJRVVY0UWl4UFFVRlBPMWxCUTB3c1VVRkJVU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFJRVUZSTzFsQlEzWkNMRk5CUVZNc1JVRkJSU3hKUVVGSkxFTkJRVU1zVTBGQlV6dFpRVU42UWl4alFVRmpMRVZCUVVVc1NVRkJTU3hEUVVGRExHTkJRV003V1VGRGJrTXNXVUZCV1N4RlFVRkZMRWxCUVVrc1EwRkJReXhaUVVGWk8xTkJRMmhETEVOQlFVTTdTVUZEU2l4RFFVRkRPMGxCUlVRc05rTkJRVFpETzBsQlEzSkRMRmxCUVZrN1VVRkRiRUlzU1VGQlNTeERRVUZETEhkQ1FVRjNRaXhEUVVGRExGZEJRVmNzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRE8xRkJRemRFTEVsQlFVa3NRMEZCUXl4M1FrRkJkMElzUTBGQlF5eDVRa0ZCZVVJc1EwRkRia1FzZFVKQlFYVkNMRU5CUVVNc1EwRkJRenRSUVVNM1FpeEpRVUZKTEVOQlFVTXNhVU5CUVdsRExFTkJRVU1zZVVKQlFYbENMRU5CUXpWRUxIVkNRVUYxUWl4RFFVRkRMRU5CUVVNN1VVRkROMElzU1VGQlNTeERRVUZETERCQ1FVRXdRaXhEUVVGRExIZENRVUYzUWl4RFFVTndSQ3gxUWtGQmRVSXNRMEZCUXl4RFFVRkRPMGxCUXk5Q0xFTkJRVU03U1VGRlJDd3lSRUZCTWtRN1NVRkRia1FzWTBGQll5eERRVUZETEVsQlFXdENPenRSUVVOMlF5eE5RVUZOTEUxQlFVMHNSMEZCYVVJc1JVRkJSU3hEUVVGRE8xRkJRMmhETEV0QlFVc3NUVUZCVFN4WFFVRlhMRWxCUVVrc1NVRkJTU3hGUVVGRk8xbEJRemxDTEUxQlFVMHNVMEZCVXl4SFFVRkhMSE5EUVVGclFpeERRVUZETEdsQ1FVRnBRaXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzFsQlEzQkZMRTFCUVUwc1ZVRkJWU3hIUVVGbExFVkJRVVVzUTBGQlF6dFpRVU5zUXl4TFFVRkxMRTFCUVUwc1kwRkJZeXhKUVVGSkxGTkJRVk1zUTBGQlF5eHhRa0ZCY1VJc1JVRkJSU3hGUVVGRk8yZENRVU01UkN4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRE8yOUNRVU5rTEV0QlFVc3NSVUZCUlN4TlFVRkJMR05CUVdNc1EwRkJReXhSUVVGUkxFVkJRVVVzYlVOQlFVa3NRMEZCUXp0dlFrRkRja01zUzBGQlN5eEZRVUZGTEUxQlFVRXNZMEZCWXl4RFFVRkRMRkZCUVZFc1JVRkJSU3h0UTBGQlNTeHpRa0ZCYzBJN2IwSkJRekZFTEZsQlFWa3NSVUZCUlN4TlFVRkJMR05CUVdNc1EwRkJReXhSUVVGUkxFVkJRVVVzYlVOQlFVa3NSVUZCUlR0dlFrRkROME1zVjBGQlZ5eEZRVUZGTEUxQlFVRXNZMEZCWXl4RFFVRkRMR05CUVdNc1JVRkJSU3h0UTBGQlNTeEZRVUZGTzJsQ1FVTnVSQ3hEUVVGRExFTkJRVU03WVVGRFNqdFpRVU5FTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03VTBGRGVrSTdVVUZEUkN4UFFVRlBMRTFCUVUwc1EwRkJRenRKUVVOb1FpeERRVUZETzBsQlJVUXNORVZCUVRSRk8wbEJRM0JGTEdOQlFXTXNRMEZCUXl4SlFVRnJRanM3VVVGRGRrTXNTMEZCU3l4TlFVRk5MRmRCUVZjc1NVRkJTU3hKUVVGSkxFVkJRVVU3V1VGRE9VSXNUVUZCVFN4clFrRkJhMElzUjBGRGNFSXNiME5CUVhOQ0xFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03V1VGRE1VUXNUVUZCVFN4VFFVRlRMRWRCUVdVc1JVRkJSU3hEUVVGRE8xbEJRMnBETEV0QlFVc3NUVUZCVFN4cFFrRkJhVUlzU1VGQlNTeHJRa0ZCYTBJc1EwRkJReXhsUVVGbExFVkJRVVVzUlVGQlJUdG5Ra0ZEY0VVc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF6dHZRa0ZEWWl4RFFVRkRMRVZCUVVVc1RVRkJRU3hwUWtGQmFVSXNRMEZCUXl4SlFVRkpMRVZCUVVVc2JVTkJRVWtzUTBGQlF6dHZRa0ZEYUVNc1EwRkJReXhGUVVGRkxFMUJRVUVzYVVKQlFXbENMRU5CUVVNc1NVRkJTU3hGUVVGRkxHMURRVUZKTEVOQlFVTTdiMEpCUTJoRExFTkJRVU1zUlVGQlJTeE5RVUZCTEdsQ1FVRnBRaXhEUVVGRExFbEJRVWtzUlVGQlJTeHRRMEZCU1N4RFFVRkRPMjlDUVVOb1F5eFZRVUZWTEVWQlFVVXNTVUZCU1R0cFFrRkRha0lzUTBGQlF5eERRVUZETzJGQlEwbzdXVUZEUkN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0VFFVTm9RenRKUVVOSUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTeXh2UWtGQmIwSXNRMEZCUXl4SlFVRnJRanM3VVVGRE4wTXNTMEZCU3l4TlFVRk5MRmRCUVZjc1NVRkJTU3hKUVVGSkxFVkJRVVU3V1VGRE9VSXNUVUZCVFN4MVFrRkJkVUlzUjBGRGVrSXNNRUpCUVZrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenRaUVVOb1JDeE5RVUZOTEdOQlFXTXNSMEZCWlN4RlFVRkZMRU5CUVVNN1dVRkRkRU1zUzBGQlN5eE5RVUZOTEhOQ1FVRnpRaXhKUVVONFFpeDFRa0ZCZFVJc1EwRkJReXhsUVVGbExFVkJRVVVzUlVGQlJUdG5Ra0ZEYkVRc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF6dHZRa0ZEYkVJc1EwRkJReXhGUVVGRkxFMUJRVUVzYzBKQlFYTkNMRU5CUVVNc1NVRkJTU3hGUVVGRkxHMURRVUZKTEVOQlFVTTdiMEpCUTNKRExFTkJRVU1zUlVGQlJTeE5RVUZCTEhOQ1FVRnpRaXhEUVVGRExFbEJRVWtzUlVGQlJTeHRRMEZCU1N4RFFVRkRPMjlDUVVOeVF5eERRVUZETEVWQlFVVXNUVUZCUVN4elFrRkJjMElzUTBGQlF5eEpRVUZKTEVWQlFVVXNiVU5CUVVrc1EwRkJRenR2UWtGRGNrTXNWVUZCVlN4RlFVRkZMRXRCUVVzN2FVSkJRMnhDTEVOQlFVTXNRMEZCUXp0aFFVTktPMWxCUTBRc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNN1UwRkRNVU03U1VGRFNDeERRVUZETzBsQlJVUXNhVVJCUVdsRU8wbEJRM3BETEZsQlFWazdVVUZEYkVJc1RVRkJUU3hYUVVGWExFZEJRVWNzU1VGQlNTeHhRMEZCY1VJc1JVRkJSU3hEUVVGRE8xRkJRMmhFTEZkQlFWY3NRMEZCUXl4alFVRmpMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03VVVGRGVrTXNWMEZCVnl4RFFVRkRMR05CUVdNc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4RFFVRkRPMUZCUXpkRExGZEJRVmNzUTBGQlF5eGxRVUZsTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zUTBGQlF6dFJRVU5zUkN4WFFVRlhMRU5CUVVNc1pVRkJaU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNN1VVRkRPVU1zVjBGQlZ5eERRVUZETEdWQlFXVXNRMEZCUXl4elFrRkJjMElzUTBGQlF5eERRVUZETzFGQlEzQkVMRmRCUVZjc1EwRkJReXhsUVVGbExFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJRenRSUVVVdlF5eE5RVUZOTEdsQ1FVRnBRaXhIUVVGSExFbEJRVWtzZVVOQlFXbENMRVZCUVVVc1EwRkJRenRSUVVOc1JDeHBRa0ZCYVVJc1EwRkJReXhaUVVGWkxFTkJRekZDTEcxRlFVRTJRaXhEUVVGRExFZEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1VVRkZja1FzVFVGQlRTeGpRVUZqTEVkQlFVY3NTVUZCU1N4eFEwRkJjVUlzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0UlFVTjRSQ3hqUVVGakxFTkJRVU1zWVVGQllTeERRVUZETEhkQ1FVRjNRaXhEUVVGRExFTkJRVU03VVVGRGRrUXNZMEZCWXl4RFFVRkRMR05CUVdNc1EwRkJReXhSUVVGUkxFZEJRVWNzV1VGQldTeERRVUZETEVOQlFVTTdVVUZEZGtRc1kwRkJZeXhEUVVGRExHTkJRV01zUTBGQlF5eFpRVUZaTEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6dFJRVU12UkN4alFVRmpMRU5CUVVNc1pVRkJaU3hEUVVGRExHZENRVUZuUWl4SFFVRkhMRzlDUVVGdlFpeERRVUZETEVOQlFVTTdVVUZEZUVVc1kwRkJZeXhEUVVGRExHVkJRV1VzUTBGQlF5eFpRVUZaTEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6dFJRVU5vUlN4alFVRmpMRU5CUVVNc1pVRkJaU3hEUVVGRExHdENRVUZyUWl4SFFVRkhMSE5DUVVGelFpeERRVUZETEVOQlFVTTdVVUZETlVVc1kwRkJZeXhEUVVGRExHVkJRV1VzUTBGQlF5eGhRVUZoTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU1zUTBGQlF6dFJRVU5zUlN4alFVRmpMRU5CUVVNc1ZVRkJWU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1VVRkZOME1zVjBGQlZ5eERRVUZETEU5QlFVOHNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRenRSUVVWd1F5eEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zWjBKQlFXZENMRVZCUVVVc1YwRkJWeXhEUVVGRExFVkJRVVU3V1VGRE4wUXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6dFJRVU51UXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOSUxFbEJRVWtzUTBGQlF5eDVRa0ZCZVVJc1EwRkJReXh6UWtGQmMwSXNSVUZCUlN4WFFVRlhMRU5CUVVNc1JVRkJSVHRaUVVOdVJTeEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdVVUZEZWtNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRFNDeEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zYjBKQlFXOUNMRVZCUVVVc1YwRkJWeXhEUVVGRExFVkJRVVU3V1VGRGFrVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE1VUXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRTQ3hKUVVGSkxFTkJRVU1zZVVKQlFYbENMRU5CUVVNc2FVSkJRV2xDTEVWQlFVVXNWMEZCVnl4RFFVRkRMRVZCUVVVN1dVRkRPVVFzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRPVVFzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZGU0N4TlFVRk5MRmRCUVZjc1IwRkJSeXhYUVVGWExFTkJRVU1zWlVGQlpTeEZRVUZGTEVOQlFVTTdVVUZEYkVRc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEZWQlFWVXNRMEZCUXl4WFFVRlhMRU5CUVVNc1JVRkJSU3hsUVVGbExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTVUZEYmtVc1EwRkJRenREUVVOR08wRkJibFJFTERoRFFXMVVReUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01qSWdWR2hsSUUxbFpHbGhVR2x3WlNCQmRYUm9iM0p6TGlCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlNCY0lreHBZMlZ1YzJWY0lpazdYRzRnS2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhHNGdLaUJaYjNVZ2JXRjVJRzlpZEdGcGJpQmhJR052Y0hrZ2IyWWdkR2hsSUV4cFkyVnVjMlVnWVhSY2JpQXFYRzRnS2lBZ0lDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh1SUNvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhHNGdLaUJUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pTQnpjR1ZqYVdacFl5QnNZVzVuZFdGblpTQm5iM1psY201cGJtY2djR1Z5YldsemMybHZibk1nWVc1a1hHNGdLaUJzYVcxcGRHRjBhVzl1Y3lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFMMXh1WEc1cGJYQnZjblFnZTBOaGJHTjFiR0YwYjNKSGNtRndhRU52Ym1acFozMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZabkpoYldWM2IzSnJMMk5oYkdOMWJHRjBiM0pmY0dJbk8xeHVhVzF3YjNKMElIdERZV3hqZFd4aGRHOXlUM0IwYVc5dWMzMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZabkpoYldWM2IzSnJMMk5oYkdOMWJHRjBiM0pmYjNCMGFXOXVjMTl3WWljN1hHNXBiWEJ2Y25RZ2UwTnNZWE56YVdacFkyRjBhVzl1VEdsemRIMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZabkpoYldWM2IzSnJMMlp2Y20xaGRITXZZMnhoYzNOcFptbGpZWFJwYjI1ZmNHSW5PMXh1YVcxd2IzSjBJSHRNWVc1a2JXRnlhMHhwYzNRc0lFNXZjbTFoYkdsNlpXUk1ZVzVrYldGeWEweHBjM1I5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDJaeVlXMWxkMjl5YXk5bWIzSnRZWFJ6TDJ4aGJtUnRZWEpyWDNCaUp6dGNibWx0Y0c5eWRDQjdUbTl5YldGc2FYcGxaRkpsWTNSOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwyWnlZVzFsZDI5eWF5OW1iM0p0WVhSekwzSmxZM1JmY0dJbk8xeHVhVzF3YjNKMElIdEhaWE4wZFhKbFEyeGhjM05wWm1sbGNrZHlZWEJvVDNCMGFXOXVjMzBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2ZEdGemEzTXZZMk12ZG1semFXOXVMMmRsYzNSMWNtVmZjbVZqYjJkdWFYcGxjaTl3Y205MGJ5OW5aWE4wZFhKbFgyTnNZWE56YVdacFpYSmZaM0poY0doZmIzQjBhVzl1YzE5d1lpYzdYRzVwYlhCdmNuUWdlMGRsYzNSMWNtVlNaV052WjI1cGVtVnlSM0poY0doUGNIUnBiMjV6ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5MFlYTnJjeTlqWXk5MmFYTnBiMjR2WjJWemRIVnlaVjl5WldOdloyNXBlbVZ5TDNCeWIzUnZMMmRsYzNSMWNtVmZjbVZqYjJkdWFYcGxjbDluY21Gd2FGOXZjSFJwYjI1elgzQmlKenRjYm1sdGNHOXlkQ0I3U0dGdVpFZGxjM1IxY21WU1pXTnZaMjVwZW1WeVIzSmhjR2hQY0hScGIyNXpmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTkwWVhOcmN5OWpZeTkyYVhOcGIyNHZaMlZ6ZEhWeVpWOXlaV052WjI1cGVtVnlMM0J5YjNSdkwyaGhibVJmWjJWemRIVnlaVjl5WldOdloyNXBlbVZ5WDJkeVlYQm9YMjl3ZEdsdmJuTmZjR0luTzF4dWFXMXdiM0owSUh0SVlXNWtSR1YwWldOMGIzSkhjbUZ3YUU5d2RHbHZibk45SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNSaGMydHpMMk5qTDNacGMybHZiaTlvWVc1a1gyUmxkR1ZqZEc5eUwzQnliM1J2TDJoaGJtUmZaR1YwWldOMGIzSmZaM0poY0doZmIzQjBhVzl1YzE5d1lpYzdYRzVwYlhCdmNuUWdlMGhoYm1STVlXNWtiV0Z5YTJWeVIzSmhjR2hQY0hScGIyNXpmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTkwWVhOcmN5OWpZeTkyYVhOcGIyNHZhR0Z1WkY5c1lXNWtiV0Z5YTJWeUwzQnliM1J2TDJoaGJtUmZiR0Z1WkcxaGNtdGxjbDluY21Gd2FGOXZjSFJwYjI1elgzQmlKenRjYm1sdGNHOXlkQ0I3U0dGdVpFeGhibVJ0WVhKcmMwUmxkR1ZqZEc5eVIzSmhjR2hQY0hScGIyNXpmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTkwWVhOcmN5OWpZeTkyYVhOcGIyNHZhR0Z1WkY5c1lXNWtiV0Z5YTJWeUwzQnliM1J2TDJoaGJtUmZiR0Z1WkcxaGNtdHpYMlJsZEdWamRHOXlYMmR5WVhCb1gyOXdkR2x2Ym5OZmNHSW5PMXh1YVcxd2IzSjBJSHREWVhSbFoyOXllWDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2ZEdGemEzTXZkMlZpTDJOdmJYQnZibVZ1ZEhNdlkyOXVkR0ZwYm1WeWN5OWpZWFJsWjI5eWVTYzdYRzVwYlhCdmNuUWdlMHhoYm1SdFlYSnJmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTkwWVhOcmN5OTNaV0l2WTI5dGNHOXVaVzUwY3k5amIyNTBZV2x1WlhKekwyeGhibVJ0WVhKckp6dGNibWx0Y0c5eWRDQjdZMjl1ZG1WeWRFSmhjMlZQY0hScGIyNXpWRzlRY205MGIzMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZkR0Z6YTNNdmQyVmlMMk52YlhCdmJtVnVkSE12Y0hKdlkyVnpjMjl5Y3k5aVlYTmxYMjl3ZEdsdmJuTW5PMXh1YVcxd2IzSjBJSHRqYjI1MlpYSjBRMnhoYzNOcFptbGxjazl3ZEdsdmJuTlViMUJ5YjNSdmZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOTBZWE5yY3k5M1pXSXZZMjl0Y0c5dVpXNTBjeTl3Y205alpYTnpiM0p6TDJOc1lYTnphV1pwWlhKZmIzQjBhVzl1Y3ljN1hHNXBiWEJ2Y25RZ2UxUmhjMnRTZFc1dVpYSjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM1JoYzJ0ekwzZGxZaTlqYjNKbEwzUmhjMnRmY25WdWJtVnlKenRjYm1sdGNHOXlkQ0I3VjJGemJVeHZZV1JsY2s5d2RHbHZibk45SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNSaGMydHpMM2RsWWk5amIzSmxMM2RoYzIxZmJHOWhaR1Z5WDI5d2RHbHZibk1uTzF4dWFXMXdiM0owSUh0amNtVmhkR1ZOWldScFlWQnBjR1ZNYVdJc0lFWnBiR1ZNYjJOaGRHOXlMQ0JKYldGblpWTnZkWEpqWlN3Z1YyRnpiVTF2WkhWc1pYMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZkMlZpTDJkeVlYQm9YM0oxYm01bGNpOTNZWE50WDIxbFpHbGhjR2x3WlY5c2FXSW5PMXh1THk4Z1VHeGhZMlZvYjJ4a1pYSWdabTl5SUdsdWRHVnlibUZzSUdSbGNHVnVaR1Z1WTNrZ2IyNGdkSEoxYzNSbFpDQnlaWE52ZFhKalpTQjFjbXhjYmx4dWFXMXdiM0owSUh0SFpYTjBkWEpsVW1WamIyZHVhWHBsY2s5d2RHbHZibk45SUdaeWIyMGdKeTR2WjJWemRIVnlaVjl5WldOdloyNXBlbVZ5WDI5d2RHbHZibk1uTzF4dWFXMXdiM0owSUh0SFpYTjBkWEpsVW1WamIyZHVhWHBsY2xKbGMzVnNkSDBnWm5KdmJTQW5MaTluWlhOMGRYSmxYM0psWTI5bmJtbDZaWEpmY21WemRXeDBKenRjYmx4dVpYaHdiM0owSUh0SmJXRm5aVk52ZFhKalpYMDdYRzVjYmk4dklGUm9aU0JQVTFNZ1NsTWdRVkJKSUdSdlpYTWdibTkwSUhOMWNIQnZjblFnZEdobElHSjFhV3hrWlhJZ2NHRjBkR1Z5Ymk1Y2JpOHZJSFJ6YkdsdWREcGthWE5oWW14bE9tcHpjR0l0ZFhObExXSjFhV3hrWlhJdGNHRjBkR1Z5Ymx4dVhHNWpiMjV6ZENCSlRVRkhSVjlUVkZKRlFVMGdQU0FuYVcxaFoyVmZhVzRuTzF4dVkyOXVjM1FnVGs5U1RWOVNSVU5VWDFOVVVrVkJUU0E5SUNkdWIzSnRYM0psWTNRbk8xeHVZMjl1YzNRZ1NFRk9SRjlIUlZOVVZWSkZVMTlUVkZKRlFVMGdQU0FuYUdGdVpGOW5aWE4wZFhKbGN5YzdYRzVqYjI1emRDQk1RVTVFVFVGU1MxTmZVMVJTUlVGTklEMGdKMmhoYm1SZmJHRnVaRzFoY210ekp6dGNibU52Ym5OMElGZFBVa3hFWDB4QlRrUk5RVkpMVTE5VFZGSkZRVTBnUFNBbmQyOXliR1JmYUdGdVpGOXNZVzVrYldGeWEzTW5PMXh1WTI5dWMzUWdTRUZPUkVWRVRrVlRVMTlUVkZKRlFVMGdQU0FuYUdGdVpHVmtibVZ6Y3ljN1hHNWpiMjV6ZENCSFJWTlVWVkpGWDFKRlEwOUhUa2xhUlZKZlIxSkJVRWdnUFZ4dUlDQWdJQ2R0WldScFlYQnBjR1V1ZEdGemEzTXVkbWx6YVc5dUxtZGxjM1IxY21WZmNtVmpiMmR1YVhwbGNpNUhaWE4wZFhKbFVtVmpiMmR1YVhwbGNrZHlZWEJvSnp0Y2JseHVZMjl1YzNRZ1JFVkdRVlZNVkY5T1ZVMWZTRUZPUkZNZ1BTQXhPMXh1WTI5dWMzUWdSRVZHUVZWTVZGOVRRMDlTUlY5VVNGSkZVMGhQVEVRZ1BTQXdMalU3WEc1amIyNXpkQ0JFUlVaQlZVeFVYME5CVkVWSFQxSlpYMGxPUkVWWUlEMGdMVEU3WEc1Y2JtTnZibk4wSUVaVlRFeGZTVTFCUjBWZlVrVkRWQ0E5SUc1bGR5Qk9iM0p0WVd4cGVtVmtVbVZqZENncE8xeHVSbFZNVEY5SlRVRkhSVjlTUlVOVUxuTmxkRmhEWlc1MFpYSW9NQzQxS1R0Y2JrWlZURXhmU1UxQlIwVmZVa1ZEVkM1elpYUlpRMlZ1ZEdWeUtEQXVOU2s3WEc1R1ZVeE1YMGxOUVVkRlgxSkZRMVF1YzJWMFYybGtkR2dvTVNrN1hHNUdWVXhNWDBsTlFVZEZYMUpGUTFRdWMyVjBTR1ZwWjJoMEtERXBPMXh1WEc0dktpb2dVR1Z5Wm05eWJYTWdhR0Z1WkNCblpYTjBkWEpsSUhKbFkyOW5ibWwwYVc5dUlHOXVJR2x0WVdkbGN5NGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QkhaWE4wZFhKbFVtVmpiMmR1YVhwbGNpQmxlSFJsYm1SeklGUmhjMnRTZFc1dVpYSWdlMXh1SUNCd2NtbDJZWFJsSUdkbGMzUjFjbVZ6T2lCRFlYUmxaMjl5ZVZ0ZFcxMGdQU0JiWFR0Y2JpQWdjSEpwZG1GMFpTQnNZVzVrYldGeWEzTTZJRXhoYm1SdFlYSnJXMTFiWFNBOUlGdGRPMXh1SUNCd2NtbDJZWFJsSUhkdmNteGtUR0Z1WkcxaGNtdHpPaUJNWVc1a2JXRnlhMXRkVzEwZ1BTQmJYVHRjYmlBZ2NISnBkbUYwWlNCb1lXNWtaV1J1WlhOelpYTTZJRU5oZEdWbmIzSjVXMTFiWFNBOUlGdGRPMXh1WEc0Z0lIQnlhWFpoZEdVZ2NtVmhaRzl1YkhrZ2IzQjBhVzl1Y3pvZ1IyVnpkSFZ5WlZKbFkyOW5ibWw2WlhKSGNtRndhRTl3ZEdsdmJuTTdYRzRnSUhCeWFYWmhkR1VnY21WaFpHOXViSGtnYUdGdVpFeGhibVJ0WVhKclpYSkhjbUZ3YUU5d2RHbHZibk02SUVoaGJtUk1ZVzVrYldGeWEyVnlSM0poY0doUGNIUnBiMjV6TzF4dUlDQndjbWwyWVhSbElISmxZV1J2Ym14NUlHaGhibVJNWVc1a2JXRnlhM05FWlhSbFkzUnZja2R5WVhCb1QzQjBhVzl1Y3pwY2JpQWdJQ0FnSUVoaGJtUk1ZVzVrYldGeWEzTkVaWFJsWTNSdmNrZHlZWEJvVDNCMGFXOXVjenRjYmlBZ2NISnBkbUYwWlNCeVpXRmtiMjVzZVNCb1lXNWtSR1YwWldOMGIzSkhjbUZ3YUU5d2RHbHZibk02SUVoaGJtUkVaWFJsWTNSdmNrZHlZWEJvVDNCMGFXOXVjenRjYmlBZ2NISnBkbUYwWlNCeVpXRmtiMjVzZVNCb1lXNWtSMlZ6ZEhWeVpWSmxZMjluYm1sNlpYSkhjbUZ3YUU5d2RHbHZibk02WEc0Z0lDQWdJQ0JJWVc1a1IyVnpkSFZ5WlZKbFkyOW5ibWw2WlhKSGNtRndhRTl3ZEdsdmJuTTdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbHVhWFJwWVd4cGVtVnpJSFJvWlNCWFlYTnRJSEoxYm5ScGJXVWdZVzVrSUdOeVpXRjBaWE1nWVNCdVpYY2daMlZ6ZEhWeVpTQnlaV052WjI1cGVtVnlJR1p5YjIwZ2RHaGxYRzRnSUNBcUlIQnliM1pwWkdWa0lHOXdkR2x2Ym5NdVhHNGdJQ0FxSUVCd1lYSmhiU0IzWVhOdFRHOWhaR1Z5VDNCMGFXOXVjeUJCSUdOdmJtWnBaM1Z5WVhScGIyNGdiMkpxWldOMElIUm9ZWFFnY0hKdmRtbGtaWE1nZEdobElHeHZZMkYwYVc5dVhHNGdJQ0FxSUNBZ0lDQnZaaUIwYUdVZ1YyRnpiU0JpYVc1aGNua2dZVzVrSUdsMGN5QnNiMkZrWlhJdVhHNGdJQ0FxSUVCd1lYSmhiU0JuWlhOMGRYSmxVbVZqYjJkdWFYcGxjazl3ZEdsdmJuTWdWR2hsSUc5d2RHbHZibk1nWm05eUlIUm9aU0JuWlhOMGRYSmxJSEpsWTI5bmJtbDZaWEl1WEc0Z0lDQXFJQ0FnSUNCT2IzUmxJSFJvWVhRZ1pXbDBhR1Z5SUdFZ2NHRjBhQ0IwYnlCMGFHVWdiVzlrWld3Z1lYTnpaWFFnYjNJZ1lTQnRiMlJsYkNCaWRXWm1aWElnYm1WbFpITWdkRzljYmlBZ0lDb2dJQ0FnSUdKbElIQnliM1pwWkdWa0lDaDJhV0VnWUdKaGMyVlBjSFJwYjI1ellDa3VYRzRnSUNBcUwxeHVJQ0J6ZEdGMGFXTWdZWE41Ym1NZ1kzSmxZWFJsUm5KdmJVOXdkR2x2Ym5Nb1hHNGdJQ0FnSUNCM1lYTnRURzloWkdWeVQzQjBhVzl1Y3pvZ1YyRnpiVXh2WVdSbGNrOXdkR2x2Ym5Nc1hHNGdJQ0FnSUNCblpYTjBkWEpsVW1WamIyZHVhWHBsY2s5d2RHbHZibk02SUVkbGMzUjFjbVZTWldOdloyNXBlbVZ5VDNCMGFXOXVjeWs2WEc0Z0lDQWdJQ0JRY205dGFYTmxQRWRsYzNSMWNtVlNaV052WjI1cGVtVnlQaUI3WEc0Z0lDQWdMeThnUTNKbFlYUmxJR0VnWm1sc1pTQnNiMk5oZEc5eUlHSmhjMlZrSUc5dUlIUm9aU0JzYjJGa1pYSWdiM0IwYVc5dWMxeHVJQ0FnSUdOdmJuTjBJR1pwYkdWTWIyTmhkRzl5T2lCR2FXeGxURzlqWVhSdmNpQTlJSHRjYmlBZ0lDQWdJR3h2WTJGMFpVWnBiR1VvS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRlJvWlNCdmJteDVJR1pwYkdVZ2QyVWdiRzloWkNCMmFXRWdkR2hwY3lCdFpXTm9ZVzVwYzIwZ2FYTWdkR2hsSUZkaGMyMGdZbWx1WVhKNVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCM1lYTnRURzloWkdWeVQzQjBhVzl1Y3k1M1lYTnRRbWx1WVhKNVVHRjBhQzUwYjFOMGNtbHVaeWdwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JqYjI1emRDQnlaV052WjI1cGVtVnlJRDBnWVhkaGFYUWdZM0psWVhSbFRXVmthV0ZRYVhCbFRHbGlLRnh1SUNBZ0lDQWdJQ0JIWlhOMGRYSmxVbVZqYjJkdWFYcGxjaXdnZDJGemJVeHZZV1JsY2s5d2RHbHZibk11ZDJGemJVeHZZV1JsY2xCaGRHZ3NYRzRnSUNBZ0lDQWdJQzhxSUdGemMyVjBURzloWkdWeVUyTnlhWEIwUFNBcUx5QjFibVJsWm1sdVpXUXNYRzRnSUNBZ0lDQWdJQzhxSUdkc1EyRnVkbUZ6UFNBcUx5QjFibVJsWm1sdVpXUXNJR1pwYkdWTWIyTmhkRzl5S1R0Y2JpQWdJQ0JoZDJGcGRDQnlaV052WjI1cGVtVnlMbk5sZEU5d2RHbHZibk1vWjJWemRIVnlaVkpsWTI5bmJtbDZaWEpQY0hScGIyNXpLVHRjYmlBZ0lDQnlaWFIxY200Z2NtVmpiMmR1YVhwbGNqdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJKYm1sMGFXRnNhWHBsY3lCMGFHVWdWMkZ6YlNCeWRXNTBhVzFsSUdGdVpDQmpjbVZoZEdWeklHRWdibVYzSUdkbGMzUjFjbVVnY21WamIyZHVhWHBsY2lCaVlYTmxaQ0J2Ymx4dUlDQWdLaUIwYUdVZ2NISnZkbWxrWldRZ2JXOWtaV3dnWVhOelpYUWdZblZtWm1WeUxseHVJQ0FnS2lCQWNHRnlZVzBnZDJGemJVeHZZV1JsY2s5d2RHbHZibk1nUVNCamIyNW1hV2QxY21GMGFXOXVJRzlpYW1WamRDQjBhR0YwSUhCeWIzWnBaR1Z6SUhSb1pTQnNiMk5oZEdsdmJseHVJQ0FnS2lBZ0lDQWdiMllnZEdobElGZGhjMjBnWW1sdVlYSjVJR0Z1WkNCcGRITWdiRzloWkdWeUxseHVJQ0FnS2lCQWNHRnlZVzBnYlc5a1pXeEJjM05sZEVKMVptWmxjaUJCSUdKcGJtRnllU0J5WlhCeVpYTmxiblJoZEdsdmJpQnZaaUIwYUdVZ2JXOWtaV3d1WEc0Z0lDQXFMMXh1SUNCemRHRjBhV01nWTNKbFlYUmxSbkp2YlUxdlpHVnNRblZtWm1WeUtGeHVJQ0FnSUNBZ2QyRnpiVXh2WVdSbGNrOXdkR2x2Ym5NNklGZGhjMjFNYjJGa1pYSlBjSFJwYjI1ekxGeHVJQ0FnSUNBZ2JXOWtaV3hCYzNObGRFSjFabVpsY2pvZ1ZXbHVkRGhCY25KaGVTazZJRkJ5YjIxcGMyVThSMlZ6ZEhWeVpWSmxZMjluYm1sNlpYSStJSHRjYmlBZ0lDQnlaWFIxY200Z1IyVnpkSFZ5WlZKbFkyOW5ibWw2WlhJdVkzSmxZWFJsUm5KdmJVOXdkR2x2Ym5Nb1hHNGdJQ0FnSUNBZ0lIZGhjMjFNYjJGa1pYSlBjSFJwYjI1ekxDQjdZbUZ6WlU5d2RHbHZibk02SUh0dGIyUmxiRUZ6YzJWMFFuVm1abVZ5ZlgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWx1YVhScFlXeHBlbVZ6SUhSb1pTQlhZWE50SUhKMWJuUnBiV1VnWVc1a0lHTnlaV0YwWlhNZ1lTQnVaWGNnWjJWemRIVnlaU0J5WldOdloyNXBlbVZ5SUdKaGMyVmtJRzl1WEc0Z0lDQXFJSFJvWlNCd1lYUm9JSFJ2SUhSb1pTQnRiMlJsYkNCaGMzTmxkQzVjYmlBZ0lDb2dRSEJoY21GdElIZGhjMjFNYjJGa1pYSlBjSFJwYjI1eklFRWdZMjl1Wm1sbmRYSmhkR2x2YmlCdlltcGxZM1FnZEdoaGRDQndjbTkyYVdSbGN5QjBhR1VnYkc5allYUnBiMjVjYmlBZ0lDb2dJQ0FnSUc5bUlIUm9aU0JYWVhOdElHSnBibUZ5ZVNCaGJtUWdhWFJ6SUd4dllXUmxjaTVjYmlBZ0lDb2dRSEJoY21GdElHMXZaR1ZzUVhOelpYUlFZWFJvSUZSb1pTQndZWFJvSUhSdklIUm9aU0J0YjJSbGJDQmhjM05sZEM1Y2JpQWdJQ292WEc0Z0lITjBZWFJwWXlCaGMzbHVZeUJqY21WaGRHVkdjbTl0VFc5a1pXeFFZWFJvS0Z4dUlDQWdJQ0FnZDJGemJVeHZZV1JsY2s5d2RHbHZibk02SUZkaGMyMU1iMkZrWlhKUGNIUnBiMjV6TEZ4dUlDQWdJQ0FnYlc5a1pXeEJjM05sZEZCaGRHZzZJSE4wY21sdVp5azZJRkJ5YjIxcGMyVThSMlZ6ZEhWeVpWSmxZMjluYm1sNlpYSStJSHRjYmlBZ0lDQmpiMjV6ZENCeVpYTndiMjV6WlNBOUlHRjNZV2wwSUdabGRHTm9LRzF2WkdWc1FYTnpaWFJRWVhSb0xuUnZVM1J5YVc1bktDa3BPMXh1SUNBZ0lHTnZibk4wSUdkeVlYQm9SR0YwWVNBOUlHRjNZV2wwSUhKbGMzQnZibk5sTG1GeWNtRjVRblZtWm1WeUtDazdYRzRnSUNBZ2NtVjBkWEp1SUVkbGMzUjFjbVZTWldOdloyNXBlbVZ5TG1OeVpXRjBaVVp5YjIxTmIyUmxiRUoxWm1abGNpaGNiaUFnSUNBZ0lDQWdkMkZ6YlV4dllXUmxjazl3ZEdsdmJuTXNJRzVsZHlCVmFXNTBPRUZ5Y21GNUtHZHlZWEJvUkdGMFlTa3BPMXh1SUNCOVhHNWNiaUFnWTI5dWMzUnlkV04wYjNJb2QyRnpiVTF2WkhWc1pUb2dWMkZ6YlUxdlpIVnNaU2tnZTF4dUlDQWdJSE4xY0dWeUtIZGhjMjFOYjJSMWJHVXBPMXh1WEc0Z0lDQWdkR2hwY3k1dmNIUnBiMjV6SUQwZ2JtVjNJRWRsYzNSMWNtVlNaV052WjI1cGVtVnlSM0poY0doUGNIUnBiMjV6S0NrN1hHNGdJQ0FnZEdocGN5NW9ZVzVrVEdGdVpHMWhjbXRsY2tkeVlYQm9UM0IwYVc5dWN5QTlJRzVsZHlCSVlXNWtUR0Z1WkcxaGNtdGxja2R5WVhCb1QzQjBhVzl1Y3lncE8xeHVJQ0FnSUhSb2FYTXViM0IwYVc5dWN5NXpaWFJJWVc1a1RHRnVaRzFoY210bGNrZHlZWEJvVDNCMGFXOXVjeWgwYUdsekxtaGhibVJNWVc1a2JXRnlhMlZ5UjNKaGNHaFBjSFJwYjI1ektUdGNiaUFnSUNCMGFHbHpMbWhoYm1STVlXNWtiV0Z5YTNORVpYUmxZM1J2Y2tkeVlYQm9UM0IwYVc5dWN5QTlYRzRnSUNBZ0lDQWdJRzVsZHlCSVlXNWtUR0Z1WkcxaGNtdHpSR1YwWldOMGIzSkhjbUZ3YUU5d2RHbHZibk1vS1R0Y2JpQWdJQ0IwYUdsekxtaGhibVJNWVc1a2JXRnlhMlZ5UjNKaGNHaFBjSFJwYjI1ekxuTmxkRWhoYm1STVlXNWtiV0Z5YTNORVpYUmxZM1J2Y2tkeVlYQm9UM0IwYVc5dWN5aGNiaUFnSUNBZ0lDQWdkR2hwY3k1b1lXNWtUR0Z1WkcxaGNtdHpSR1YwWldOMGIzSkhjbUZ3YUU5d2RHbHZibk1wTzF4dUlDQWdJSFJvYVhNdWFHRnVaRVJsZEdWamRHOXlSM0poY0doUGNIUnBiMjV6SUQwZ2JtVjNJRWhoYm1SRVpYUmxZM1J2Y2tkeVlYQm9UM0IwYVc5dWN5Z3BPMXh1SUNBZ0lIUm9hWE11YUdGdVpFeGhibVJ0WVhKclpYSkhjbUZ3YUU5d2RHbHZibk11YzJWMFNHRnVaRVJsZEdWamRHOXlSM0poY0doUGNIUnBiMjV6S0Z4dUlDQWdJQ0FnSUNCMGFHbHpMbWhoYm1SRVpYUmxZM1J2Y2tkeVlYQm9UM0IwYVc5dWN5azdYRzRnSUNBZ2RHaHBjeTVvWVc1a1IyVnpkSFZ5WlZKbFkyOW5ibWw2WlhKSGNtRndhRTl3ZEdsdmJuTWdQVnh1SUNBZ0lDQWdJQ0J1WlhjZ1NHRnVaRWRsYzNSMWNtVlNaV052WjI1cGVtVnlSM0poY0doUGNIUnBiMjV6S0NrN1hHNGdJQ0FnZEdocGN5NXZjSFJwYjI1ekxuTmxkRWhoYm1SSFpYTjBkWEpsVW1WamIyZHVhWHBsY2tkeVlYQm9UM0IwYVc5dWN5aGNiaUFnSUNBZ0lDQWdkR2hwY3k1b1lXNWtSMlZ6ZEhWeVpWSmxZMjluYm1sNlpYSkhjbUZ3YUU5d2RHbHZibk1wTzF4dVhHNGdJQ0FnZEdocGN5NXBibWwwUkdWbVlYVnNkSE1vS1R0Y2JseHVJQ0FnSUM4dklFUnBjMkZpYkdWeklIUm9aU0JoZFhSdmJXRjBhV01nY21WdVpHVnlMWFJ2TFhOamNtVmxiaUJqYjJSbExDQjNhR2xqYUNCaGJHeHZkM01nWm05eUlIQjFjbVZjYmlBZ0lDQXZMeUJEVUZVZ2NISnZZMlZ6YzJsdVp5NWNiaUFnSUNCMGFHbHpMbk5sZEVGMWRHOVNaVzVrWlhKVWIxTmpjbVZsYmlobVlXeHpaU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVjBjeUJ1WlhjZ2IzQjBhVzl1Y3lCbWIzSWdkR2hsSUdkbGMzUjFjbVVnY21WamIyZHVhWHBsY2k1Y2JpQWdJQ3BjYmlBZ0lDb2dRMkZzYkdsdVp5QmdjMlYwVDNCMGFXOXVjeWdwWUNCM2FYUm9JR0VnYzNWaWMyVjBJRzltSUc5d2RHbHZibk1nYjI1c2VTQmhabVpsWTNSeklIUm9iM05sSUc5d2RHbHZibk11WEc0Z0lDQXFJRmx2ZFNCallXNGdjbVZ6WlhRZ1lXNGdiM0IwYVc5dUlHSmhZMnNnZEc4Z2FYUnpJR1JsWm1GMWJIUWdkbUZzZFdVZ1lua2daWGh3YkdsamFYUnNlU0J6WlhSMGFXNW5JR2wwWEc0Z0lDQXFJSFJ2SUdCMWJtUmxabWx1WldSZ0xseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdiM0IwYVc5dWN5QlVhR1VnYjNCMGFXOXVjeUJtYjNJZ2RHaGxJR2RsYzNSMWNtVWdjbVZqYjJkdWFYcGxjaTVjYmlBZ0lDb3ZYRzRnSUdGemVXNWpJSE5sZEU5d2RHbHZibk1vYjNCMGFXOXVjem9nUjJWemRIVnlaVkpsWTI5bmJtbDZaWEpQY0hScGIyNXpLVG9nVUhKdmJXbHpaVHgyYjJsa1BpQjdYRzRnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVZbUZ6WlU5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJR0poYzJWUGNIUnBiMjV6VUhKdmRHOGdQU0JoZDJGcGRDQmpiMjUyWlhKMFFtRnpaVTl3ZEdsdmJuTlViMUJ5YjNSdktGeHVJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTXVZbUZ6WlU5d2RHbHZibk1zSUhSb2FYTXViM0IwYVc5dWN5NW5aWFJDWVhObFQzQjBhVzl1Y3lncEtUdGNiaUFnSUNBZ0lIUm9hWE11YjNCMGFXOXVjeTV6WlhSQ1lYTmxUM0IwYVc5dWN5aGlZWE5sVDNCMGFXOXVjMUJ5YjNSdktUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9KMjUxYlVoaGJtUnpKeUJwYmlCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbWhoYm1SRVpYUmxZM1J2Y2tkeVlYQm9UM0IwYVc5dWN5NXpaWFJPZFcxSVlXNWtjeWhjYmlBZ0lDQWdJQ0FnSUNCdmNIUnBiMjV6TG01MWJVaGhibVJ6SUQ4L0lFUkZSa0ZWVEZSZlRsVk5YMGhCVGtSVEtUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tDZHRhVzVJWVc1a1JHVjBaV04wYVc5dVEyOXVabWxrWlc1alpTY2dhVzRnYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnZEdocGN5NW9ZVzVrUkdWMFpXTjBiM0pIY21Gd2FFOXdkR2x2Ym5NdWMyVjBUV2x1UkdWMFpXTjBhVzl1UTI5dVptbGtaVzVqWlNoY2JpQWdJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxtMXBia2hoYm1SRVpYUmxZM1JwYjI1RGIyNW1hV1JsYm1ObElEOC9JRVJGUmtGVlRGUmZVME5QVWtWZlZFaFNSVk5JVDB4RUtUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tDZHRhVzVJWVc1a1VISmxjMlZ1WTJWRGIyNW1hV1JsYm1ObEp5QnBiaUJ2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtaGhibVJNWVc1a2JXRnlhM05FWlhSbFkzUnZja2R5WVhCb1QzQjBhVzl1Y3k1elpYUk5hVzVFWlhSbFkzUnBiMjVEYjI1bWFXUmxibU5sS0Z4dUlDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdWJXbHVTR0Z1WkZCeVpYTmxibU5sUTI5dVptbGtaVzVqWlNBL1B5QkVSVVpCVlV4VVgxTkRUMUpGWDFSSVVrVlRTRTlNUkNrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNnbmJXbHVWSEpoWTJ0cGJtZERiMjVtYVdSbGJtTmxKeUJwYmlCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbWhoYm1STVlXNWtiV0Z5YTJWeVIzSmhjR2hQY0hScGIyNXpMbk5sZEUxcGJsUnlZV05yYVc1blEyOXVabWxrWlc1alpTaGNiaUFnSUNBZ0lDQWdJQ0J2Y0hScGIyNXpMbTFwYmxSeVlXTnJhVzVuUTI5dVptbGtaVzVqWlNBL1B5QkVSVVpCVlV4VVgxTkRUMUpGWDFSSVVrVlRTRTlNUkNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdVkyRnVibVZrUjJWemRIVnlaWE5EYkdGemMybG1hV1Z5VDNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnTHk4Z1RtOTBaU0IwYUdGMElIZGxJR2hoZG1VZ2RHOGdjM1Z3Y0c5eWRDQmliM1JvSUVwVFVFSWdZVzVrSUZCeWIzUnZZblZtU2xNZ1lXNWtJR05oYm01dmRGeHVJQ0FnSUNBZ0x5OGdkWE5sSUVwVFVFSW5jeUJuWlhSTmRYUmhZbXhsV0NncElFRlFTWE11WEc0Z0lDQWdJQ0JqYjI1emRDQm5jbUZ3YUU5d2RHbHZibk1nUFNCdVpYY2dSMlZ6ZEhWeVpVTnNZWE56YVdacFpYSkhjbUZ3YUU5d2RHbHZibk1vS1R0Y2JpQWdJQ0FnSUdkeVlYQm9UM0IwYVc5dWN5NXpaWFJEYkdGemMybG1hV1Z5VDNCMGFXOXVjeWhqYjI1MlpYSjBRMnhoYzNOcFptbGxjazl3ZEdsdmJuTlViMUJ5YjNSdktGeHVJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTXVZMkZ1Ym1Wa1IyVnpkSFZ5WlhORGJHRnpjMmxtYVdWeVQzQjBhVzl1Y3l4Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1oaGJtUkhaWE4wZFhKbFVtVmpiMmR1YVhwbGNrZHlZWEJvVDNCMGFXOXVjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXVaMlYwUTJGdWJtVmtSMlZ6ZEhWeVpVTnNZWE56YVdacFpYSkhjbUZ3YUU5d2RHbHZibk1vS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0EvTG1kbGRFTnNZWE56YVdacFpYSlBjSFJwYjI1ektDa3BLVHRjYmlBZ0lDQWdJSFJvYVhNdWFHRnVaRWRsYzNSMWNtVlNaV052WjI1cGVtVnlSM0poY0doUGNIUnBiMjV6WEc0Z0lDQWdJQ0FnSUNBZ0xuTmxkRU5oYm01bFpFZGxjM1IxY21WRGJHRnpjMmxtYVdWeVIzSmhjR2hQY0hScGIyNXpLR2R5WVhCb1QzQjBhVzl1Y3lrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNodmNIUnBiMjV6TG1OaGJtNWxaRWRsYzNSMWNtVnpRMnhoYzNOcFptbGxjazl3ZEdsdmJuTWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVvWVc1a1IyVnpkSFZ5WlZKbFkyOW5ibWw2WlhKSGNtRndhRTl3ZEdsdmJuTmNiaUFnSUNBZ0lDQWdJQ0F1WjJWMFEyRnVibVZrUjJWemRIVnlaVU5zWVhOemFXWnBaWEpIY21Gd2FFOXdkR2x2Ym5Nb0tWeHVJQ0FnSUNBZ0lDQWdJRDh1WTJ4bFlYSkRiR0Z6YzJsbWFXVnlUM0IwYVc5dWN5Z3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbU4xYzNSdmJVZGxjM1IxY21WelEyeGhjM05wWm1sbGNrOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lHTnZibk4wSUdkeVlYQm9UM0IwYVc5dWN5QTlJRzVsZHlCSFpYTjBkWEpsUTJ4aGMzTnBabWxsY2tkeVlYQm9UM0IwYVc5dWN5Z3BPMXh1SUNBZ0lDQWdaM0poY0doUGNIUnBiMjV6TG5ObGRFTnNZWE56YVdacFpYSlBjSFJwYjI1ektHTnZiblpsY25SRGJHRnpjMmxtYVdWeVQzQjBhVzl1YzFSdlVISnZkRzhvWEc0Z0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1amRYTjBiMjFIWlhOMGRYSmxjME5zWVhOemFXWnBaWEpQY0hScGIyNXpMRnh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVhR0Z1WkVkbGMzUjFjbVZTWldOdloyNXBlbVZ5UjNKaGNHaFBjSFJwYjI1elhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM1blpYUkRkWE4wYjIxSFpYTjBkWEpsUTJ4aGMzTnBabWxsY2tkeVlYQm9UM0IwYVc5dWN5Z3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEOHVaMlYwUTJ4aGMzTnBabWxsY2s5d2RHbHZibk1vS1NrcE8xeHVJQ0FnSUNBZ2RHaHBjeTVvWVc1a1IyVnpkSFZ5WlZKbFkyOW5ibWw2WlhKSGNtRndhRTl3ZEdsdmJuTmNiaUFnSUNBZ0lDQWdJQ0F1YzJWMFEzVnpkRzl0UjJWemRIVnlaVU5zWVhOemFXWnBaWEpIY21Gd2FFOXdkR2x2Ym5Nb1ozSmhjR2hQY0hScGIyNXpLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzl3ZEdsdmJuTXVZM1Z6ZEc5dFIyVnpkSFZ5WlhORGJHRnpjMmxtYVdWeVQzQjBhVzl1Y3lBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtaGhibVJIWlhOMGRYSmxVbVZqYjJkdWFYcGxja2R5WVhCb1QzQjBhVzl1YzF4dUlDQWdJQ0FnSUNBZ0lDNW5aWFJEZFhOMGIyMUhaWE4wZFhKbFEyeGhjM05wWm1sbGNrZHlZWEJvVDNCMGFXOXVjeWdwWEc0Z0lDQWdJQ0FnSUNBZ1B5NWpiR1ZoY2tOc1lYTnphV1pwWlhKUGNIUnBiMjV6S0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NXlaV1p5WlhOb1IzSmhjR2dvS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlFaWEptYjNKdGN5Qm5aWE4wZFhKbElISmxZMjluYm1sMGFXOXVJRzl1SUhSb1pTQndjbTkyYVdSbFpDQnphVzVuYkdVZ2FXMWhaMlVnWVc1a0lIZGhhWFJ6WEc0Z0lDQXFJSE41Ym1Ob2NtOXViM1Z6YkhrZ1ptOXlJSFJvWlNCeVpYTndiMjV6WlM1Y2JpQWdJQ29nUUhCaGNtRnRJR2x0WVdkbFUyOTFjbU5sSUVGdUlHbHRZV2RsSUhOdmRYSmpaU0IwYnlCd2NtOWpaWE56TGx4dUlDQWdLaUJBY0dGeVlXMGdkR2x0WlhOMFlXMXdJRlJvWlNCMGFXMWxjM1JoYlhBZ2IyWWdkR2hsSUdOMWNuSmxiblFnWm5KaGJXVXNJR2x1SUcxekxpQkpaaUJ1YjNSY2JpQWdJQ29nSUNBZ2NISnZkbWxrWldRc0lHUmxabUYxYkhSeklIUnZJR0J3WlhKbWIzSnRZVzVqWlM1dWIzY29LV0F1WEc0Z0lDQXFJRUJ5WlhSMWNtNGdWR2hsSUdSbGRHVmpkR1ZrSUdkbGMzUjFjbVZ6TGx4dUlDQWdLaTljYmlBZ2NtVmpiMmR1YVhwbEtHbHRZV2RsVTI5MWNtTmxPaUJKYldGblpWTnZkWEpqWlN3Z2RHbHRaWE4wWVcxd09pQnVkVzFpWlhJZ1BTQndaWEptYjNKdFlXNWpaUzV1YjNjb0tTazZYRzRnSUNBZ0lDQkhaWE4wZFhKbFVtVmpiMmR1YVhwbGNsSmxjM1ZzZENCN1hHNGdJQ0FnZEdocGN5NW5aWE4wZFhKbGN5QTlJRnRkTzF4dUlDQWdJSFJvYVhNdWJHRnVaRzFoY210eklEMGdXMTA3WEc0Z0lDQWdkR2hwY3k1M2IzSnNaRXhoYm1SdFlYSnJjeUE5SUZ0ZE8xeHVJQ0FnSUhSb2FYTXVhR0Z1WkdWa2JtVnpjMlZ6SUQwZ1cxMDdYRzVjYmlBZ0lDQjBhR2x6TG1Ga1pFZHdkVUoxWm1abGNrRnpTVzFoWjJWVWIxTjBjbVZoYlNocGJXRm5aVk52ZFhKalpTd2dTVTFCUjBWZlUxUlNSVUZOTENCMGFXMWxjM1JoYlhBcE8xeHVJQ0FnSUhSb2FYTXVZV1JrVUhKdmRHOVViMU4wY21WaGJTaGNiaUFnSUNBZ0lDQWdSbFZNVEY5SlRVRkhSVjlTUlVOVUxuTmxjbWxoYkdsNlpVSnBibUZ5ZVNncExDQW5iV1ZrYVdGd2FYQmxMazV2Y20xaGJHbDZaV1JTWldOMEp5eGNiaUFnSUNBZ0lDQWdUazlTVFY5U1JVTlVYMU5VVWtWQlRTd2dkR2x0WlhOMFlXMXdLVHRjYmlBZ0lDQjBhR2x6TG1acGJtbHphRkJ5YjJObGMzTnBibWNvS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0JuWlhOMGRYSmxjem9nZEdocGN5NW5aWE4wZFhKbGN5eGNiaUFnSUNBZ0lHeGhibVJ0WVhKcmN6b2dkR2hwY3k1c1lXNWtiV0Z5YTNNc1hHNGdJQ0FnSUNCM2IzSnNaRXhoYm1SdFlYSnJjem9nZEdocGN5NTNiM0pzWkV4aGJtUnRZWEpyY3l4Y2JpQWdJQ0FnSUdoaGJtUmxaRzVsYzNObGN6b2dkR2hwY3k1b1lXNWtaV1J1WlhOelpYTmNiaUFnSUNCOU8xeHVJQ0I5WEc1Y2JpQWdMeW9xSUZObGRITWdkR2hsSUdSbFptRjFiSFFnZG1Gc2RXVnpJR1p2Y2lCMGFHVWdaM0poY0dndUlDb3ZYRzRnSUhCeWFYWmhkR1VnYVc1cGRFUmxabUYxYkhSektDazZJSFp2YVdRZ2UxeHVJQ0FnSUhSb2FYTXVhR0Z1WkVSbGRHVmpkRzl5UjNKaGNHaFBjSFJwYjI1ekxuTmxkRTUxYlVoaGJtUnpLRVJGUmtGVlRGUmZUbFZOWDBoQlRrUlRLVHRjYmlBZ0lDQjBhR2x6TG1oaGJtUkVaWFJsWTNSdmNrZHlZWEJvVDNCMGFXOXVjeTV6WlhSTmFXNUVaWFJsWTNScGIyNURiMjVtYVdSbGJtTmxLRnh1SUNBZ0lDQWdJQ0JFUlVaQlZVeFVYMU5EVDFKRlgxUklVa1ZUU0U5TVJDazdYRzRnSUNBZ2RHaHBjeTVvWVc1a1RHRnVaRzFoY210elJHVjBaV04wYjNKSGNtRndhRTl3ZEdsdmJuTXVjMlYwVFdsdVJHVjBaV04wYVc5dVEyOXVabWxrWlc1alpTaGNiaUFnSUNBZ0lDQWdSRVZHUVZWTVZGOVRRMDlTUlY5VVNGSkZVMGhQVEVRcE8xeHVJQ0FnSUhSb2FYTXVhR0Z1WkV4aGJtUnRZWEpyWlhKSGNtRndhRTl3ZEdsdmJuTXVjMlYwVFdsdVZISmhZMnRwYm1kRGIyNW1hV1JsYm1ObEtGeHVJQ0FnSUNBZ0lDQkVSVVpCVlV4VVgxTkRUMUpGWDFSSVVrVlRTRTlNUkNrN1hHNGdJSDFjYmx4dUlDQXZLaW9nUTI5dWRtVnlkSE1nZEdobElIQnliM1J2SUdSaGRHRWdkRzhnWVNCRFlYUmxaMjl5ZVZ0ZFcxMGdjM1J5ZFdOMGRYSmxMaUFxTDF4dUlDQndjbWwyWVhSbElIUnZTbk5EWVhSbFoyOXlhV1Z6S0dSaGRHRTZJRlZwYm5RNFFYSnlZWGxiWFNrNklFTmhkR1ZuYjNKNVcxMWJYU0I3WEc0Z0lDQWdZMjl1YzNRZ2NtVnpkV3gwT2lCRFlYUmxaMjl5ZVZ0ZFcxMGdQU0JiWFR0Y2JpQWdJQ0JtYjNJZ0tHTnZibk4wSUdKcGJtRnllVkJ5YjNSdklHOW1JR1JoZEdFcElIdGNiaUFnSUNBZ0lHTnZibk4wSUdsdWNIVjBUR2x6ZENBOUlFTnNZWE56YVdacFkyRjBhVzl1VEdsemRDNWtaWE5sY21saGJHbDZaVUpwYm1GeWVTaGlhVzVoY25sUWNtOTBieWs3WEc0Z0lDQWdJQ0JqYjI1emRDQnZkWFJ3ZFhSTWFYTjBPaUJEWVhSbFoyOXllVnRkSUQwZ1cxMDdYRzRnSUNBZ0lDQm1iM0lnS0dOdmJuTjBJR05zWVhOemFXWnBZMkYwYVc5dUlHOW1JR2x1Y0hWMFRHbHpkQzVuWlhSRGJHRnpjMmxtYVdOaGRHbHZia3hwYzNRb0tTa2dlMXh1SUNBZ0lDQWdJQ0J2ZFhSd2RYUk1hWE4wTG5CMWMyZ29lMXh1SUNBZ0lDQWdJQ0FnSUhOamIzSmxPaUJqYkdGemMybG1hV05oZEdsdmJpNW5aWFJUWTI5eVpTZ3BJRDgvSURBc1hHNGdJQ0FnSUNBZ0lDQWdhVzVrWlhnNklHTnNZWE56YVdacFkyRjBhVzl1TG1kbGRFbHVaR1Y0S0NrZ1B6OGdSRVZHUVZWTVZGOURRVlJGUjA5U1dWOUpUa1JGV0N4Y2JpQWdJQ0FnSUNBZ0lDQmpZWFJsWjI5eWVVNWhiV1U2SUdOc1lYTnphV1pwWTJGMGFXOXVMbWRsZEV4aFltVnNLQ2tnUHo4Z0p5Y3NYRzRnSUNBZ0lDQWdJQ0FnWkdsemNHeGhlVTVoYldVNklHTnNZWE56YVdacFkyRjBhVzl1TG1kbGRFUnBjM0JzWVhsT1lXMWxLQ2tnUHo4Z0p5Y3NYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WemRXeDBMbkIxYzJnb2IzVjBjSFYwVEdsemRDazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUgxY2JseHVJQ0F2S2lvZ1EyOXVkbVZ5ZEhNZ2NtRjNJR1JoZEdFZ2FXNTBieUJoSUd4aGJtUnRZWEpyTENCaGJtUWdZV1JrY3lCcGRDQjBieUJ2ZFhJZ2JHRnVaRzFoY210eklHeHBjM1F1SUNvdlhHNGdJSEJ5YVhaaGRHVWdZV1JrU25OTVlXNWtiV0Z5YTNNb1pHRjBZVG9nVldsdWREaEJjbkpoZVZ0ZEtUb2dkbTlwWkNCN1hHNGdJQ0FnWm05eUlDaGpiMjV6ZENCaWFXNWhjbmxRY205MGJ5QnZaaUJrWVhSaEtTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCb1lXNWtUR0Z1WkcxaGNtdHpVSEp2ZEc4Z1BWeHVJQ0FnSUNBZ0lDQWdJRTV2Y20xaGJHbDZaV1JNWVc1a2JXRnlhMHhwYzNRdVpHVnpaWEpwWVd4cGVtVkNhVzVoY25rb1ltbHVZWEo1VUhKdmRHOHBPMXh1SUNBZ0lDQWdZMjl1YzNRZ2JHRnVaRzFoY210ek9pQk1ZVzVrYldGeWExdGRJRDBnVzEwN1hHNGdJQ0FnSUNCbWIzSWdLR052Ym5OMElHaGhibVJNWVc1a2JXRnlhMUJ5YjNSdklHOW1JR2hoYm1STVlXNWtiV0Z5YTNOUWNtOTBieTVuWlhSTVlXNWtiV0Z5YTB4cGMzUW9LU2tnZTF4dUlDQWdJQ0FnSUNCc1lXNWtiV0Z5YTNNdWNIVnphQ2g3WEc0Z0lDQWdJQ0FnSUNBZ2VEb2dhR0Z1WkV4aGJtUnRZWEpyVUhKdmRHOHVaMlYwV0NncElEOC9JREFzWEc0Z0lDQWdJQ0FnSUNBZ2VUb2dhR0Z1WkV4aGJtUnRZWEpyVUhKdmRHOHVaMlYwV1NncElEOC9JREFzWEc0Z0lDQWdJQ0FnSUNBZ2Vqb2dhR0Z1WkV4aGJtUnRZWEpyVUhKdmRHOHVaMlYwV2lncElEOC9JREFzWEc0Z0lDQWdJQ0FnSUNBZ2JtOXliV0ZzYVhwbFpEb2dkSEoxWlZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIUm9hWE11YkdGdVpHMWhjbXR6TG5CMWMyZ29iR0Z1WkcxaGNtdHpLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUTI5dWRtVnlkSE1nY21GM0lHUmhkR0VnYVc1MGJ5QmhJR3hoYm1SdFlYSnJMQ0JoYm1RZ1lXUmtjeUJwZENCMGJ5QnZkWElnZDI5eWJHUk1ZVzVrYldGeWEzTmNiaUFnSUNvZ2JHbHpkQzVjYmlBZ0lDb3ZYRzRnSUhCeWFYWmhkR1VnWVdSa1pFcHpWMjl5YkdSTVlXNWtiV0Z5YTNNb1pHRjBZVG9nVldsdWREaEJjbkpoZVZ0ZEtUb2dkbTlwWkNCN1hHNGdJQ0FnWm05eUlDaGpiMjV6ZENCaWFXNWhjbmxRY205MGJ5QnZaaUJrWVhSaEtTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCb1lXNWtWMjl5YkdSTVlXNWtiV0Z5YTNOUWNtOTBieUE5WEc0Z0lDQWdJQ0FnSUNBZ1RHRnVaRzFoY210TWFYTjBMbVJsYzJWeWFXRnNhWHBsUW1sdVlYSjVLR0pwYm1GeWVWQnliM1J2S1R0Y2JpQWdJQ0FnSUdOdmJuTjBJSGR2Y214a1RHRnVaRzFoY210ek9pQk1ZVzVrYldGeWExdGRJRDBnVzEwN1hHNGdJQ0FnSUNCbWIzSWdLR052Ym5OMElHaGhibVJYYjNKc1pFeGhibVJ0WVhKclVISnZkRzhnYjJaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdoaGJtUlhiM0pzWkV4aGJtUnRZWEpyYzFCeWIzUnZMbWRsZEV4aGJtUnRZWEpyVEdsemRDZ3BLU0I3WEc0Z0lDQWdJQ0FnSUhkdmNteGtUR0Z1WkcxaGNtdHpMbkIxYzJnb2UxeHVJQ0FnSUNBZ0lDQWdJSGc2SUdoaGJtUlhiM0pzWkV4aGJtUnRZWEpyVUhKdmRHOHVaMlYwV0NncElEOC9JREFzWEc0Z0lDQWdJQ0FnSUNBZ2VUb2dhR0Z1WkZkdmNteGtUR0Z1WkcxaGNtdFFjbTkwYnk1blpYUlpLQ2tnUHo4Z01DeGNiaUFnSUNBZ0lDQWdJQ0I2T2lCb1lXNWtWMjl5YkdSTVlXNWtiV0Z5YTFCeWIzUnZMbWRsZEZvb0tTQS9QeUF3TEZ4dUlDQWdJQ0FnSUNBZ0lHNXZjbTFoYkdsNlpXUTZJR1poYkhObFhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkR2hwY3k1M2IzSnNaRXhoYm1SdFlYSnJjeTV3ZFhOb0tIZHZjbXhrVEdGdVpHMWhjbXR6S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpb2dWWEJrWVhSbGN5QjBhR1VnVFdWa2FXRlFhWEJsSUdkeVlYQm9JR052Ym1acFozVnlZWFJwYjI0dUlDb3ZYRzRnSUhCeWFYWmhkR1VnY21WbWNtVnphRWR5WVhCb0tDazZJSFp2YVdRZ2UxeHVJQ0FnSUdOdmJuTjBJR2R5WVhCb1EyOXVabWxuSUQwZ2JtVjNJRU5oYkdOMWJHRjBiM0pIY21Gd2FFTnZibVpwWnlncE8xeHVJQ0FnSUdkeVlYQm9RMjl1Wm1sbkxtRmtaRWx1Y0hWMFUzUnlaV0Z0S0VsTlFVZEZYMU5VVWtWQlRTazdYRzRnSUNBZ1ozSmhjR2hEYjI1bWFXY3VZV1JrU1c1d2RYUlRkSEpsWVcwb1RrOVNUVjlTUlVOVVgxTlVVa1ZCVFNrN1hHNGdJQ0FnWjNKaGNHaERiMjVtYVdjdVlXUmtUM1YwY0hWMFUzUnlaV0Z0S0VoQlRrUmZSMFZUVkZWU1JWTmZVMVJTUlVGTktUdGNiaUFnSUNCbmNtRndhRU52Ym1acFp5NWhaR1JQZFhSd2RYUlRkSEpsWVcwb1RFRk9SRTFCVWt0VFgxTlVVa1ZCVFNrN1hHNGdJQ0FnWjNKaGNHaERiMjVtYVdjdVlXUmtUM1YwY0hWMFUzUnlaV0Z0S0ZkUFVreEVYMHhCVGtSTlFWSkxVMTlUVkZKRlFVMHBPMXh1SUNBZ0lHZHlZWEJvUTI5dVptbG5MbUZrWkU5MWRIQjFkRk4wY21WaGJTaElRVTVFUlVST1JWTlRYMU5VVWtWQlRTazdYRzVjYmlBZ0lDQmpiMjV6ZENCallXeGpkV3hoZEc5eVQzQjBhVzl1Y3lBOUlHNWxkeUJEWVd4amRXeGhkRzl5VDNCMGFXOXVjeWdwTzF4dUlDQWdJR05oYkdOMWJHRjBiM0pQY0hScGIyNXpMbk5sZEVWNGRHVnVjMmx2YmloY2JpQWdJQ0FnSUNBZ1IyVnpkSFZ5WlZKbFkyOW5ibWw2WlhKSGNtRndhRTl3ZEdsdmJuTXVaWGgwTENCMGFHbHpMbTl3ZEdsdmJuTXBPMXh1WEc0Z0lDQWdZMjl1YzNRZ2NtVmpiMmR1YVhwbGNrNXZaR1VnUFNCdVpYY2dRMkZzWTNWc1lYUnZja2R5WVhCb1EyOXVabWxuTGs1dlpHVW9LVHRjYmlBZ0lDQnlaV052WjI1cGVtVnlUbTlrWlM1elpYUkRZV3hqZFd4aGRHOXlLRWRGVTFSVlVrVmZVa1ZEVDBkT1NWcEZVbDlIVWtGUVNDazdYRzRnSUNBZ2NtVmpiMmR1YVhwbGNrNXZaR1V1WVdSa1NXNXdkWFJUZEhKbFlXMG9KMGxOUVVkRk9pY2dLeUJKVFVGSFJWOVRWRkpGUVUwcE8xeHVJQ0FnSUhKbFkyOW5ibWw2WlhKT2IyUmxMbUZrWkVsdWNIVjBVM1J5WldGdEtDZE9UMUpOWDFKRlExUTZKeUFySUU1UFVrMWZVa1ZEVkY5VFZGSkZRVTBwTzF4dUlDQWdJSEpsWTI5bmJtbDZaWEpPYjJSbExtRmtaRTkxZEhCMWRGTjBjbVZoYlNnblNFRk9SRjlIUlZOVVZWSkZVem9uSUNzZ1NFRk9SRjlIUlZOVVZWSkZVMTlUVkZKRlFVMHBPMXh1SUNBZ0lISmxZMjluYm1sNlpYSk9iMlJsTG1Ga1pFOTFkSEIxZEZOMGNtVmhiU2duVEVGT1JFMUJVa3RUT2ljZ0t5Qk1RVTVFVFVGU1MxTmZVMVJTUlVGTktUdGNiaUFnSUNCeVpXTnZaMjVwZW1WeVRtOWtaUzVoWkdSUGRYUndkWFJUZEhKbFlXMG9KMWRQVWt4RVgweEJUa1JOUVZKTFV6b25JQ3NnVjA5U1RFUmZURUZPUkUxQlVrdFRYMU5VVWtWQlRTazdYRzRnSUNBZ2NtVmpiMmR1YVhwbGNrNXZaR1V1WVdSa1QzVjBjSFYwVTNSeVpXRnRLQ2RJUVU1RVJVUk9SVk5UT2ljZ0t5QklRVTVFUlVST1JWTlRYMU5VVWtWQlRTazdYRzRnSUNBZ2NtVmpiMmR1YVhwbGNrNXZaR1V1YzJWMFQzQjBhVzl1Y3loallXeGpkV3hoZEc5eVQzQjBhVzl1Y3lrN1hHNWNiaUFnSUNCbmNtRndhRU52Ym1acFp5NWhaR1JPYjJSbEtISmxZMjluYm1sNlpYSk9iMlJsS1R0Y2JseHVJQ0FnSUhSb2FYTXVZWFIwWVdOb1VISnZkRzlXWldOMGIzSk1hWE4wWlc1bGNpaE1RVTVFVFVGU1MxTmZVMVJTUlVGTkxDQmlhVzVoY25sUWNtOTBieUE5UGlCN1hHNGdJQ0FnSUNCMGFHbHpMbUZrWkVwelRHRnVaRzFoY210ektHSnBibUZ5ZVZCeWIzUnZLVHRjYmlBZ0lDQjlLVHRjYmlBZ0lDQjBhR2x6TG1GMGRHRmphRkJ5YjNSdlZtVmpkRzl5VEdsemRHVnVaWElvVjA5U1RFUmZURUZPUkUxQlVrdFRYMU5VVWtWQlRTd2dZbWx1WVhKNVVISnZkRzhnUFQ0Z2UxeHVJQ0FnSUNBZ2RHaHBjeTVoWkdSa1NuTlhiM0pzWkV4aGJtUnRZWEpyY3loaWFXNWhjbmxRY205MGJ5azdYRzRnSUNBZ2ZTazdYRzRnSUNBZ2RHaHBjeTVoZEhSaFkyaFFjbTkwYjFabFkzUnZja3hwYzNSbGJtVnlLRWhCVGtSZlIwVlRWRlZTUlZOZlUxUlNSVUZOTENCaWFXNWhjbmxRY205MGJ5QTlQaUI3WEc0Z0lDQWdJQ0IwYUdsekxtZGxjM1IxY21WekxuQjFjMmdvTGk0dWRHaHBjeTUwYjBwelEyRjBaV2R2Y21sbGN5aGlhVzVoY25sUWNtOTBieWtwTzF4dUlDQWdJSDBwTzF4dUlDQWdJSFJvYVhNdVlYUjBZV05vVUhKdmRHOVdaV04wYjNKTWFYTjBaVzVsY2loSVFVNUVSVVJPUlZOVFgxTlVVa1ZCVFN3Z1ltbHVZWEo1VUhKdmRHOGdQVDRnZTF4dUlDQWdJQ0FnZEdocGN5NW9ZVzVrWldSdVpYTnpaWE11Y0hWemFDZ3VMaTUwYUdsekxuUnZTbk5EWVhSbFoyOXlhV1Z6S0dKcGJtRnllVkJ5YjNSdktTazdYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQmpiMjV6ZENCaWFXNWhjbmxIY21Gd2FDQTlJR2R5WVhCb1EyOXVabWxuTG5ObGNtbGhiR2w2WlVKcGJtRnllU2dwTzF4dUlDQWdJSFJvYVhNdWMyVjBSM0poY0dnb2JtVjNJRlZwYm5RNFFYSnlZWGtvWW1sdVlYSjVSM0poY0dncExDQXZLaUJwYzBKcGJtRnllVDBnS2k4Z2RISjFaU2s3WEc0Z0lIMWNibjFjYmx4dVhHNGlYWDA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIyIFRoZSBNZWRpYVBpcGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWIySnFaV04wWDJSbGRHVmpkRzl5WDI5d2RHbHZibk11YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOHVMaTh1TGk4dUxpOHVMaTh1TGk5dFpXUnBZWEJwY0dVdmRHRnphM012ZDJWaUwzWnBjMmx2Ymk5dlltcGxZM1JmWkdWMFpXTjBiM0l2YjJKcVpXTjBYMlJsZEdWamRHOXlYMjl3ZEdsdmJuTXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk96czdPenM3T3pzN096czdPenRIUVdOSElpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF5TWlCVWFHVWdUV1ZrYVdGUWFYQmxJRUYxZEdodmNuTXVJRUZzYkNCU2FXZG9kSE1nVW1WelpYSjJaV1F1WEc0Z0tseHVJQ29nVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUNBb2RHaGxJRndpVEdsalpXNXpaVndpS1R0Y2JpQXFJSGx2ZFNCdFlYa2dibTkwSUhWelpTQjBhR2x6SUdacGJHVWdaWGhqWlhCMElHbHVJR052YlhCc2FXRnVZMlVnZDJsMGFDQjBhR1VnVEdsalpXNXpaUzVjYmlBcUlGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1SUNwY2JpQXFJQ0FnSUNCb2RIUndPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjYmlBcVhHNGdLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc0lITnZablIzWVhKbFhHNGdLaUJrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc1hHNGdLaUJYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxrZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzVjYmlBcUlGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVJjYmlBcUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1SUNvdlhHNWNibWx0Y0c5eWRDQjdRbUZ6WlU5d2RHbHZibk45SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNSaGMydHpMM2RsWWk5amIzSmxMMkpoYzJWZmIzQjBhVzl1Y3ljN1hHNWNiaThxS2lCUGNIUnBiMjV6SUhSdklHTnZibVpwWjNWeVpTQjBhR1VnVFdWa2FXRlFhWEJsSUU5aWFtVmpkQ0JFWlhSbFkzUnZjaUJVWVhOcklDb3ZYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRTlpYW1WamRFUmxkR1ZqZEc5eVQzQjBhVzl1Y3lCN1hHNGdJQzhxS2lCUGNIUnBiMjV6SUhSdklHTnZibVpwWjNWeVpTQjBhR1VnYkc5aFpHbHVaeUJ2WmlCMGFHVWdiVzlrWld3Z1lYTnpaWFJ6TGlBcUwxeHVJQ0JpWVhObFQzQjBhVzl1Y3o4NklFSmhjMlZQY0hScGIyNXpPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlVhR1VnYkc5allXeGxJSFJ2SUhWelpTQm1iM0lnWkdsemNHeGhlU0J1WVcxbGN5QnpjR1ZqYVdacFpXUWdkR2h5YjNWbmFDQjBhR1VnVkVaTWFYUmxJRTF2WkdWc1hHNGdJQ0FxSUUxbGRHRmtZWFJoTENCcFppQmhibmt1SUVSbFptRjFiSFJ6SUhSdklFVnVaMnhwYzJndVhHNGdJQ0FxTDF4dUlDQmthWE53YkdGNVRtRnRaWE5NYjJOaGJHVS9PaUJ6ZEhKcGJtZDhkVzVrWldacGJtVmtPMXh1WEc0Z0lDOHFLaUJVYUdVZ2JXRjRhVzExYlNCdWRXMWlaWElnYjJZZ2RHOXdMWE5qYjNKbFpDQmtaWFJsWTNScGIyNGdjbVZ6ZFd4MGN5QjBieUJ5WlhSMWNtNHVJQ292WEc0Z0lHMWhlRkpsYzNWc2RITS9PaUJ1ZFcxaVpYSjhkVzVrWldacGJtVmtPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlBkbVZ5Y21sa1pYTWdkR2hsSUhaaGJIVmxJSEJ5YjNacFpHVmtJR2x1SUhSb1pTQnRiMlJsYkNCdFpYUmhaR0YwWVM0Z1VtVnpkV3gwY3lCaVpXeHZkeUIwYUdselhHNGdJQ0FxSUhaaGJIVmxJR0Z5WlNCeVpXcGxZM1JsWkM1Y2JpQWdJQ292WEc0Z0lITmpiM0psVkdoeVpYTm9iMnhrUHpvZ2JuVnRZbVZ5ZkhWdVpHVm1hVzVsWkR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUVd4c2IzZHNhWE4wSUc5bUlHTmhkR1ZuYjNKNUlHNWhiV1Z6TGlCSlppQnViMjR0Wlcxd2RIa3NJR1JsZEdWamRHbHZiaUJ5WlhOMWJIUnpJSGRvYjNObElHTmhkR1ZuYjNKNVhHNGdJQ0FxSUc1aGJXVWdhWE1nYm05MElHbHVJSFJvYVhNZ2MyVjBJSGRwYkd3Z1ltVWdabWxzZEdWeVpXUWdiM1YwTGlCRWRYQnNhV05oZEdVZ2IzSWdkVzVyYm05M2JpQmpZWFJsWjI5eWVWeHVJQ0FnS2lCdVlXMWxjeUJoY21VZ2FXZHViM0psWkM0Z1RYVjBkV0ZzYkhrZ1pYaGpiSFZ6YVhabElIZHBkR2dnWUdOaGRHVm5iM0o1UkdWdWVXeHBjM1JnTGx4dUlDQWdLaTljYmlBZ1kyRjBaV2R2Y25sQmJHeHZkMnhwYzNRL09pQnpkSEpwYm1kYlhYeDFibVJsWm1sdVpXUTdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFUmxibmxzYVhOMElHOW1JR05oZEdWbmIzSjVJRzVoYldWekxpQkpaaUJ1YjI0dFpXMXdkSGtzSUdSbGRHVmpkR2x2YmlCeVpYTjFiSFJ6SUhkb2IzTmxJR05oZEdWbmIzSjVYRzRnSUNBcUlHNWhiV1VnYVhNZ2FXNGdkR2hwY3lCelpYUWdkMmxzYkNCaVpTQm1hV3gwWlhKbFpDQnZkWFF1SUVSMWNHeHBZMkYwWlNCdmNpQjFibXR1YjNkdUlHTmhkR1ZuYjNKNVhHNGdJQ0FxSUc1aGJXVnpJR0Z5WlNCcFoyNXZjbVZrTGlCTmRYUjFZV3hzZVNCbGVHTnNkWE5wZG1VZ2QybDBhQ0JnWTJGMFpXZHZjbmxCYkd4dmQyeHBjM1JnTGx4dUlDQWdLaTljYmlBZ1kyRjBaV2R2Y25sRVpXNTViR2x6ZEQ4NklITjBjbWx1WjF0ZGZIVnVaR1ZtYVc1bFpEdGNibjFjYmlKZGZRPT0iLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjIgVGhlIE1lZGlhUGlwZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYjJKcVpXTjBYMlJsZEdWamRHOXlYM0psYzNWc2RDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUx5NHVMeTR1THk0dUx5NHVMMjFsWkdsaGNHbHdaUzkwWVhOcmN5OTNaV0l2ZG1semFXOXVMMjlpYW1WamRGOWtaWFJsWTNSdmNpOXZZbXBsWTNSZlpHVjBaV04wYjNKZmNtVnpkV3gwTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHM3T3pzN096czdPenM3T3pzN1IwRmpSeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01qSWdWR2hsSUUxbFpHbGhVR2x3WlNCQmRYUm9iM0p6TGlCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlNCY0lreHBZMlZ1YzJWY0lpazdYRzRnS2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhHNGdLaUJaYjNVZ2JXRjVJRzlpZEdGcGJpQmhJR052Y0hrZ2IyWWdkR2hsSUV4cFkyVnVjMlVnWVhSY2JpQXFYRzRnS2lBZ0lDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh1SUNvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhHNGdLaUJUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pTQnpjR1ZqYVdacFl5QnNZVzVuZFdGblpTQm5iM1psY201cGJtY2djR1Z5YldsemMybHZibk1nWVc1a1hHNGdLaUJzYVcxcGRHRjBhVzl1Y3lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFMMXh1WEc1cGJYQnZjblFnZTBOaGRHVm5iM0o1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5MFlYTnJjeTkzWldJdlkyOXRjRzl1Wlc1MGN5OWpiMjUwWVdsdVpYSnpMMk5oZEdWbmIzSjVKenRjYmx4dUx5b3FJRUZ1SUdsdWRHVm5aWElnWW05MWJtUnBibWNnWW05NExDQmhlR2x6SUdGc2FXZHVaV1F1SUNvdlhHNWxlSEJ2Y25RZ1pHVmpiR0Z5WlNCcGJuUmxjbVpoWTJVZ1FtOTFibVJwYm1kQ2IzZ2dlMXh1SUNBdktpb2dWR2hsSUZnZ1kyOXZjbVJwYm1GMFpTQnZaaUIwYUdVZ2RHOXdMV3hsWm5RZ1kyOXlibVZ5TENCcGJpQndhWGhsYkhNdUlDb3ZYRzRnSUc5eWFXZHBibGc2SUc1MWJXSmxjanRjYmlBZ0x5b3FJRlJvWlNCWklHTnZiM0prYVc1aGRHVWdiMllnZEdobElIUnZjQzFzWldaMElHTnZjbTVsY2l3Z2FXNGdjR2w0Wld4ekxpQXFMMXh1SUNCdmNtbG5hVzVaT2lCdWRXMWlaWEk3WEc0Z0lDOHFLaUJVYUdVZ2QybGtkR2dnYjJZZ2RHaGxJR0p2ZFc1a2FXNW5JR0p2ZUN3Z2FXNGdjR2w0Wld4ekxpQXFMMXh1SUNCM2FXUjBhRG9nYm5WdFltVnlPMXh1SUNBdktpb2dWR2hsSUdobGFXZG9kQ0J2WmlCMGFHVWdZbTkxYm1ScGJtY2dZbTk0TENCcGJpQndhWGhsYkhNdUlDb3ZYRzRnSUdobGFXZG9kRG9nYm5WdFltVnlPMXh1ZlZ4dVhHNHZLaW9nVW1Wd2NtVnpaVzUwY3lCdmJtVWdiMkpxWldOMElHUmxkR1ZqZEdWa0lHSjVJSFJvWlNCZ1QySnFaV04wUkdWMFpXTjBiM0pnTGlBcUwxeHVaWGh3YjNKMElHUmxZMnhoY21VZ2FXNTBaWEptWVdObElFUmxkR1ZqZEdsdmJpQjdYRzRnSUM4cUtpQkJJR3hwYzNRZ2IyWWdZRU5oZEdWbmIzSjVZQ0J2WW1wbFkzUnpMaUFxTDF4dUlDQmpZWFJsWjI5eWFXVnpPaUJEWVhSbFoyOXllVnRkTzF4dVhHNGdJQzhxS2lCVWFHVWdZbTkxYm1ScGJtY2dZbTk0SUc5bUlIUm9aU0JrWlhSbFkzUmxaQ0J2WW1wbFkzUnpMaUFxTDF4dUlDQmliM1Z1WkdsdVowSnZlRDg2SUVKdmRXNWthVzVuUW05NE8xeHVmVnh1SWwxOSIsIi8vIHNvdXJjZTogbWVkaWFwaXBlL2ZyYW1ld29yay9mb3JtYXRzL2Fubm90YXRpb24vcmFzdGVyaXphdGlvbi5wcm90b1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKiBAZW5oYW5jZWFibGVcbiAqIEBzdXBwcmVzcyB7bWlzc2luZ1JlcXVpcmV9IHJlcG9ydHMgZXJyb3Igb24gaW1wbGljaXQgdHlwZSB1c2FnZXMuXG4gKiBAc3VwcHJlc3Mge21lc3NhZ2VDb252ZW50aW9uc30gSlMgQ29tcGlsZXIgcmVwb3J0cyBhbiBlcnJvciBpZiBhIHZhcmlhYmxlIG9yXG4gKiAgICAgZmllbGQgc3RhcnRzIHdpdGggJ01TR18nIGFuZCBpc24ndCBhIHRyYW5zbGF0YWJsZSBtZXNzYWdlLlxuICogQHB1YmxpY1xuICovXG4vLyBHRU5FUkFURUQgQ09ERSAtLSBETyBOT1QgRURJVCFcbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuXG52YXIganNwYiA9IHJlcXVpcmUoJ2dvb2dsZS1wcm90b2J1ZicpO1xudmFyIGdvb2cgPSBqc3BiO1xudmFyIGdsb2JhbCA9XG4gICAgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzKSB8fFxuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cpIHx8XG4gICAgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbCkgfHxcbiAgICAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYpIHx8XG4gICAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pLmNhbGwobnVsbCkgfHxcbiAgICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24nLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsJywgbnVsbCwgZ2xvYmFsKTtcbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbiA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgcHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24ucmVwZWF0ZWRGaWVsZHNfLCBudWxsKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24nO1xufVxuLyoqXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxuICogdmFsaWQuXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uSW50ZXJ2YWwuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uSW50ZXJ2YWwnO1xufVxuXG4vKipcbiAqIExpc3Qgb2YgcmVwZWF0ZWQgZmllbGRzIHdpdGhpbiB0aGlzIG1lc3NhZ2UgdHlwZS5cbiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn1cbiAqIEBjb25zdFxuICovXG5wcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbi5yZXBlYXRlZEZpZWxkc18gPSBbMV07XG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb259IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBpbnRlcnZhbExpc3Q6IGpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldEludGVydmFsTGlzdCgpLFxuICAgIHByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsLnRvT2JqZWN0LCBpbmNsdWRlSW5zdGFuY2UpXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbjtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9ufSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9ufVxuICovXG5wcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XG4gICAgICBtc2cuYWRkSW50ZXJ2YWwodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbi5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbn0gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IG1lc3NhZ2UuZ2V0SW50ZXJ2YWxMaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoXG4gICAgICAxLFxuICAgICAgZixcbiAgICAgIHByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxufTtcblxuXG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uSW50ZXJ2YWx9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICB5OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtc2csIDEpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICBsZWZ0WDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCAyKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgcmlnaHRYOiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtc2csIDMpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZlxuICB9O1xuXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG59XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uSW50ZXJ2YWx9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uSW50ZXJ2YWw7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbi5JbnRlcnZhbC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbi5JbnRlcnZhbH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbi5JbnRlcnZhbH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uSW50ZXJ2YWwuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQzMigpKTtcbiAgICAgIG1zZy5zZXRZKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQzMigpKTtcbiAgICAgIG1zZy5zZXRMZWZ0WCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkSW50MzIoKSk7XG4gICAgICBtc2cuc2V0UmlnaHRYKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uSW50ZXJ2YWwucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uSW50ZXJ2YWx9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uSW50ZXJ2YWwuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAxKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVJbnQzMihcbiAgICAgIDEsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMikpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlSW50MzIoXG4gICAgICAyLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDMpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUludDMyKFxuICAgICAgMyxcbiAgICAgIGZcbiAgICApO1xuICB9XG59O1xuXG5cbi8qKlxuICogcmVxdWlyZWQgaW50MzIgeSA9IDE7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsLnByb3RvdHlwZS5nZXRZID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbi5JbnRlcnZhbH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsLnByb3RvdHlwZS5zZXRZID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uSW50ZXJ2YWwucHJvdG90eXBlLmNsZWFyWSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uSW50ZXJ2YWwucHJvdG90eXBlLmhhc1kgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIHJlcXVpcmVkIGludDMyIGxlZnRfeCA9IDI7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsLnByb3RvdHlwZS5nZXRMZWZ0WCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCAwKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uSW50ZXJ2YWx9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbi5JbnRlcnZhbC5wcm90b3R5cGUuc2V0TGVmdFggPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uSW50ZXJ2YWx9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbi5JbnRlcnZhbC5wcm90b3R5cGUuY2xlYXJMZWZ0WCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uSW50ZXJ2YWwucHJvdG90eXBlLmhhc0xlZnRYID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiByZXF1aXJlZCBpbnQzMiByaWdodF94ID0gMztcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uSW50ZXJ2YWwucHJvdG90eXBlLmdldFJpZ2h0WCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAzLCAwKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uSW50ZXJ2YWx9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbi5JbnRlcnZhbC5wcm90b3R5cGUuc2V0UmlnaHRYID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uSW50ZXJ2YWwucHJvdG90eXBlLmNsZWFyUmlnaHRYID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMywgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbi5JbnRlcnZhbC5wcm90b3R5cGUuaGFzUmlnaHRYID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMykgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBJbnRlcnZhbCBpbnRlcnZhbCA9IDE7XG4gKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24ucHJvdG90eXBlLmdldEludGVydmFsTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBleyFBcnJheTwhcHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24uSW50ZXJ2YWw+fSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIHByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsLCAxKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsPn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbn0gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb24ucHJvdG90eXBlLnNldEludGVydmFsTGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsPX0gb3B0X3ZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLkludGVydmFsfVxuICovXG5wcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbi5wcm90b3R5cGUuYWRkSW50ZXJ2YWwgPSBmdW5jdGlvbihvcHRfdmFsdWUsIG9wdF9pbmRleCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgMSwgb3B0X3ZhbHVlLCBwcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbi5JbnRlcnZhbCwgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbn0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5SYXN0ZXJpemF0aW9uLnByb3RvdHlwZS5jbGVhckludGVydmFsTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRJbnRlcnZhbExpc3QoW10pO1xufTtcblxuXG5nb29nLm9iamVjdC5leHRlbmQoZXhwb3J0cywgcHJvdG8ubWVkaWFwaXBlKTtcbiIsIi8vIHNvdXJjZTogbWVkaWFwaXBlL2ZyYW1ld29yay9mb3JtYXRzL2xvY2F0aW9uX2RhdGEucHJvdG9cbi8qKlxuICogQGZpbGVvdmVydmlld1xuICogQGVuaGFuY2VhYmxlXG4gKiBAc3VwcHJlc3Mge21pc3NpbmdSZXF1aXJlfSByZXBvcnRzIGVycm9yIG9uIGltcGxpY2l0IHR5cGUgdXNhZ2VzLlxuICogQHN1cHByZXNzIHttZXNzYWdlQ29udmVudGlvbnN9IEpTIENvbXBpbGVyIHJlcG9ydHMgYW4gZXJyb3IgaWYgYSB2YXJpYWJsZSBvclxuICogICAgIGZpZWxkIHN0YXJ0cyB3aXRoICdNU0dfJyBhbmQgaXNuJ3QgYSB0cmFuc2xhdGFibGUgbWVzc2FnZS5cbiAqIEBwdWJsaWNcbiAqL1xuLy8gR0VORVJBVEVEIENPREUgLS0gRE8gTk9UIEVESVQhXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcblxudmFyIGpzcGIgPSByZXF1aXJlKCdnb29nbGUtcHJvdG9idWYnKTtcbnZhciBnb29nID0ganNwYjtcbnZhciBnbG9iYWwgPVxuICAgICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93KSB8fFxuICAgICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwpIHx8XG4gICAgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmKSB8fFxuICAgIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KS5jYWxsKG51bGwpIHx8XG4gICAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxudmFyIG1lZGlhcGlwZV9mcmFtZXdvcmtfZm9ybWF0c19hbm5vdGF0aW9uX3Jhc3Rlcml6YXRpb25fcGIgPSByZXF1aXJlKCcuLi8uLi8uLi9tZWRpYXBpcGUvZnJhbWV3b3JrL2Zvcm1hdHMvYW5ub3RhdGlvbi9yYXN0ZXJpemF0aW9uX3BiLmpzJyk7XG5nb29nLm9iamVjdC5leHRlbmQocHJvdG8sIG1lZGlhcGlwZV9mcmFtZXdvcmtfZm9ybWF0c19hbm5vdGF0aW9uX3Jhc3Rlcml6YXRpb25fcGIpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEnLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQmluYXJ5TWFzaycsIG51bGwsIGdsb2JhbCk7XG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Cb3VuZGluZ0JveCcsIG51bGwsIGdsb2JhbCk7XG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Gb3JtYXQnLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveCcsIG51bGwsIGdsb2JhbCk7XG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUtleXBvaW50JywgbnVsbCwgZ2xvYmFsKTtcbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLnJlcGVhdGVkRmllbGRzXywgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhJztcbn1cbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJvdW5kaW5nQm94ID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQm91bmRpbmdCb3gsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJvdW5kaW5nQm94LmRpc3BsYXlOYW1lID0gJ3Byb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQm91bmRpbmdCb3gnO1xufVxuLyoqXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxuICogdmFsaWQuXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveCA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgbnVsbCwgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlQm91bmRpbmdCb3gsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlQm91bmRpbmdCb3guZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUJvdW5kaW5nQm94Jztcbn1cbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJpbmFyeU1hc2sgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5CaW5hcnlNYXNrLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5CaW5hcnlNYXNrLmRpc3BsYXlOYW1lID0gJ3Byb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQmluYXJ5TWFzayc7XG59XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUtleXBvaW50ID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludCwganNwYi5NZXNzYWdlKTtcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludC5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlS2V5cG9pbnQnO1xufVxuXG4vKipcbiAqIExpc3Qgb2YgcmVwZWF0ZWQgZmllbGRzIHdpdGhpbiB0aGlzIG1lc3NhZ2UgdHlwZS5cbiAqIEBwcml2YXRlIHshQXJyYXk8bnVtYmVyPn1cbiAqIEBjb25zdFxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLnJlcGVhdGVkRmllbGRzXyA9IFs1XTtcblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgZm9ybWF0OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtc2csIDEpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICBib3VuZGluZ0JveDogKGYgPSBtc2cuZ2V0Qm91bmRpbmdCb3goKSkgJiYgcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Cb3VuZGluZ0JveC50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxuICAgIHJlbGF0aXZlQm91bmRpbmdCb3g6IChmID0gbXNnLmdldFJlbGF0aXZlQm91bmRpbmdCb3goKSkgJiYgcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUJvdW5kaW5nQm94LnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXG4gICAgbWFzazogKGYgPSBtc2cuZ2V0TWFzaygpKSAmJiBwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJpbmFyeU1hc2sudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcbiAgICByZWxhdGl2ZUtleXBvaW50c0xpc3Q6IGpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldFJlbGF0aXZlS2V5cG9pbnRzTGlzdCgpLFxuICAgIHByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludC50b09iamVjdCwgaW5jbHVkZUluc3RhbmNlKVxuICB9O1xuXG4gIGlmIChpbmNsdWRlSW5zdGFuY2UpIHtcbiAgICBvYmouJGpzcGJNZXNzYWdlSW5zdGFuY2UgPSBtc2c7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG59XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEBwYXJhbSB7anNwYi5CeXRlU291cmNlfSBieXRlcyBUaGUgYnl0ZXMgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGE7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGF9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Gb3JtYXR9ICovIChyZWFkZXIucmVhZEVudW0oKSk7XG4gICAgICBtc2cuc2V0Rm9ybWF0KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJvdW5kaW5nQm94O1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQm91bmRpbmdCb3guZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5zZXRCb3VuZGluZ0JveCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUJvdW5kaW5nQm94O1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldFJlbGF0aXZlQm91bmRpbmdCb3godmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQmluYXJ5TWFzaztcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJpbmFyeU1hc2suZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5zZXRNYXNrKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlS2V5cG9pbnQ7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUtleXBvaW50LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XG4gICAgICBtc2cuYWRkUmVsYXRpdmVLZXlwb2ludHModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsIHdyaXRlcik7XG4gIHJldHVybiB3cml0ZXIuZ2V0UmVzdWx0QnVmZmVyKCk7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZVxuICogZm9ybWF0KSwgd3JpdGluZyB0byB0aGUgZ2l2ZW4gQmluYXJ5V3JpdGVyLlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YX0gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gLyoqIEB0eXBlIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Gb3JtYXR9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMSkpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlRW51bShcbiAgICAgIDEsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRCb3VuZGluZ0JveCgpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDIsXG4gICAgICBmLFxuICAgICAgcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Cb3VuZGluZ0JveC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0UmVsYXRpdmVCb3VuZGluZ0JveCgpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDMsXG4gICAgICBmLFxuICAgICAgcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUJvdW5kaW5nQm94LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRNYXNrKCk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVNZXNzYWdlKFxuICAgICAgNCxcbiAgICAgIGYsXG4gICAgICBwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJpbmFyeU1hc2suc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldFJlbGF0aXZlS2V5cG9pbnRzTGlzdCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKFxuICAgICAgNSxcbiAgICAgIGYsXG4gICAgICBwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlS2V5cG9pbnQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcbiAgICApO1xuICB9XG59O1xuXG5cbi8qKlxuICogQGVudW0ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Gb3JtYXQgPSB7XG4gIEdMT0JBTDogMCxcbiAgQk9VTkRJTkdfQk9YOiAxLFxuICBSRUxBVElWRV9CT1VORElOR19CT1g6IDIsXG4gIE1BU0s6IDNcbn07XG5cblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Cb3VuZGluZ0JveC5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJvdW5kaW5nQm94LnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Cb3VuZGluZ0JveH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Cb3VuZGluZ0JveC50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgeG1pbjogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCAxKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgeW1pbjogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCAyKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgd2lkdGg6IChmID0ganNwYi5NZXNzYWdlLmdldEZpZWxkKG1zZywgMykpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIGhlaWdodDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCA0KSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGZcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQm91bmRpbmdCb3h9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQm91bmRpbmdCb3guZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJvdW5kaW5nQm94O1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Cb3VuZGluZ0JveC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJvdW5kaW5nQm94fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQm91bmRpbmdCb3h9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQm91bmRpbmdCb3guZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQzMigpKTtcbiAgICAgIG1zZy5zZXRYbWluKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQzMigpKTtcbiAgICAgIG1zZy5zZXRZbWluKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQzMigpKTtcbiAgICAgIG1zZy5zZXRXaWR0aCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkSW50MzIoKSk7XG4gICAgICBtc2cuc2V0SGVpZ2h0KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Cb3VuZGluZ0JveC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Cb3VuZGluZ0JveC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQm91bmRpbmdCb3h9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Cb3VuZGluZ0JveC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDEpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUludDMyKFxuICAgICAgMSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAyKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVJbnQzMihcbiAgICAgIDIsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMykpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlSW50MzIoXG4gICAgICAzLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDQpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUludDMyKFxuICAgICAgNCxcbiAgICAgIGZcbiAgICApO1xuICB9XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgaW50MzIgeG1pbiA9IDE7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQm91bmRpbmdCb3gucHJvdG90eXBlLmdldFhtaW4gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMSwgMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQm91bmRpbmdCb3h9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJvdW5kaW5nQm94LnByb3RvdHlwZS5zZXRYbWluID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQm91bmRpbmdCb3h9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJvdW5kaW5nQm94LnByb3RvdHlwZS5jbGVhclhtaW4gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQm91bmRpbmdCb3gucHJvdG90eXBlLmhhc1htaW4gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGludDMyIHltaW4gPSAyO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJvdW5kaW5nQm94LnByb3RvdHlwZS5nZXRZbWluID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDIsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJvdW5kaW5nQm94fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Cb3VuZGluZ0JveC5wcm90b3R5cGUuc2V0WW1pbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJvdW5kaW5nQm94fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Cb3VuZGluZ0JveC5wcm90b3R5cGUuY2xlYXJZbWluID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMiwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJvdW5kaW5nQm94LnByb3RvdHlwZS5oYXNZbWluID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMikgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBpbnQzMiB3aWR0aCA9IDM7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQm91bmRpbmdCb3gucHJvdG90eXBlLmdldFdpZHRoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDMsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJvdW5kaW5nQm94fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Cb3VuZGluZ0JveC5wcm90b3R5cGUuc2V0V2lkdGggPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDMsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Cb3VuZGluZ0JveH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQm91bmRpbmdCb3gucHJvdG90eXBlLmNsZWFyV2lkdGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQm91bmRpbmdCb3gucHJvdG90eXBlLmhhc1dpZHRoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMykgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBpbnQzMiBoZWlnaHQgPSA0O1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJvdW5kaW5nQm94LnByb3RvdHlwZS5nZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgNCwgMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQm91bmRpbmdCb3h9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJvdW5kaW5nQm94LnByb3RvdHlwZS5zZXRIZWlnaHQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDQsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Cb3VuZGluZ0JveH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQm91bmRpbmdCb3gucHJvdG90eXBlLmNsZWFySGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgNCwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJvdW5kaW5nQm94LnByb3RvdHlwZS5oYXNIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA0KSAhPSBudWxsO1xufTtcblxuXG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveC5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlQm91bmRpbmdCb3gudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlQm91bmRpbmdCb3h9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveC50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgeG1pbjogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQobXNnLCAxKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgeW1pbjogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQobXNnLCAyKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgd2lkdGg6IChmID0ganNwYi5NZXNzYWdlLmdldE9wdGlvbmFsRmxvYXRpbmdQb2ludEZpZWxkKG1zZywgMykpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIGhlaWdodDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQobXNnLCA0KSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGZcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUJvdW5kaW5nQm94LmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUJvdW5kaW5nQm94O1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUJvdW5kaW5nQm94LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlQm91bmRpbmdCb3h9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEZsb2F0KCkpO1xuICAgICAgbXNnLnNldFhtaW4odmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEZsb2F0KCkpO1xuICAgICAgbXNnLnNldFltaW4odmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEZsb2F0KCkpO1xuICAgICAgbXNnLnNldFdpZHRoKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRGbG9hdCgpKTtcbiAgICAgIG1zZy5zZXRIZWlnaHQodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlQm91bmRpbmdCb3gucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveH0gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlQm91bmRpbmdCb3guc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAxKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVGbG9hdChcbiAgICAgIDEsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMikpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlRmxvYXQoXG4gICAgICAyLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDMpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUZsb2F0KFxuICAgICAgMyxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCA0KSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVGbG9hdChcbiAgICAgIDQsXG4gICAgICBmXG4gICAgKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGZsb2F0IHhtaW4gPSAxO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlQm91bmRpbmdCb3gucHJvdG90eXBlLmdldFhtaW4gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveC5wcm90b3R5cGUuc2V0WG1pbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlQm91bmRpbmdCb3h9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlQm91bmRpbmdCb3gucHJvdG90eXBlLmNsZWFyWG1pbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUJvdW5kaW5nQm94LnByb3RvdHlwZS5oYXNYbWluID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBmbG9hdCB5bWluID0gMjtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUJvdW5kaW5nQm94LnByb3RvdHlwZS5nZXRZbWluID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCAwLjApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlQm91bmRpbmdCb3h9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlQm91bmRpbmdCb3gucHJvdG90eXBlLnNldFltaW4gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUJvdW5kaW5nQm94fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUJvdW5kaW5nQm94LnByb3RvdHlwZS5jbGVhclltaW4gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveC5wcm90b3R5cGUuaGFzWW1pbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgZmxvYXQgd2lkdGggPSAzO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlQm91bmRpbmdCb3gucHJvdG90eXBlLmdldFdpZHRoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAzLCAwLjApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlQm91bmRpbmdCb3h9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlQm91bmRpbmdCb3gucHJvdG90eXBlLnNldFdpZHRoID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveC5wcm90b3R5cGUuY2xlYXJXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDMsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUJvdW5kaW5nQm94LnByb3RvdHlwZS5oYXNXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDMpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgZmxvYXQgaGVpZ2h0ID0gNDtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUJvdW5kaW5nQm94LnByb3RvdHlwZS5nZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDQsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveC5wcm90b3R5cGUuc2V0SGVpZ2h0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA0LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveC5wcm90b3R5cGUuY2xlYXJIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA0LCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVCb3VuZGluZ0JveC5wcm90b3R5cGUuaGFzSGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNCkgIT0gbnVsbDtcbn07XG5cblxuXG5cblxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJpbmFyeU1hc2sucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5CaW5hcnlNYXNrLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5CaW5hcnlNYXNrfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJpbmFyeU1hc2sudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xuICB2YXIgZiwgb2JqID0ge1xuICAgIHdpZHRoOiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtc2csIDEpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICBoZWlnaHQ6IChmID0ganNwYi5NZXNzYWdlLmdldEZpZWxkKG1zZywgMikpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIHJhc3Rlcml6YXRpb246IChmID0gbXNnLmdldFJhc3Rlcml6YXRpb24oKSkgJiYgbWVkaWFwaXBlX2ZyYW1ld29ya19mb3JtYXRzX2Fubm90YXRpb25fcmFzdGVyaXphdGlvbl9wYi5SYXN0ZXJpemF0aW9uLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZilcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQmluYXJ5TWFza31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5CaW5hcnlNYXNrLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5CaW5hcnlNYXNrO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5CaW5hcnlNYXNrLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQmluYXJ5TWFza30gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJpbmFyeU1hc2t9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQmluYXJ5TWFzay5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDMyKCkpO1xuICAgICAgbXNnLnNldFdpZHRoKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQzMigpKTtcbiAgICAgIG1zZy5zZXRIZWlnaHQodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgdmFyIHZhbHVlID0gbmV3IG1lZGlhcGlwZV9mcmFtZXdvcmtfZm9ybWF0c19hbm5vdGF0aW9uX3Jhc3Rlcml6YXRpb25fcGIuUmFzdGVyaXphdGlvbjtcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxtZWRpYXBpcGVfZnJhbWV3b3JrX2Zvcm1hdHNfYW5ub3RhdGlvbl9yYXN0ZXJpemF0aW9uX3BiLlJhc3Rlcml6YXRpb24uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5zZXRSYXN0ZXJpemF0aW9uKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5CaW5hcnlNYXNrLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJpbmFyeU1hc2suc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJpbmFyeU1hc2t9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5CaW5hcnlNYXNrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMSkpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlSW50MzIoXG4gICAgICAxLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDIpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUludDMyKFxuICAgICAgMixcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldFJhc3Rlcml6YXRpb24oKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXG4gICAgICAzLFxuICAgICAgZixcbiAgICAgIG1lZGlhcGlwZV9mcmFtZXdvcmtfZm9ybWF0c19hbm5vdGF0aW9uX3Jhc3Rlcml6YXRpb25fcGIuUmFzdGVyaXphdGlvbi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBpbnQzMiB3aWR0aCA9IDE7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQmluYXJ5TWFzay5wcm90b3R5cGUuZ2V0V2lkdGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMSwgMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQmluYXJ5TWFza30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQmluYXJ5TWFzay5wcm90b3R5cGUuc2V0V2lkdGggPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5CaW5hcnlNYXNrfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5CaW5hcnlNYXNrLnByb3RvdHlwZS5jbGVhcldpZHRoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMSwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJpbmFyeU1hc2sucHJvdG90eXBlLmhhc1dpZHRoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgMSkgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBpbnQzMiBoZWlnaHQgPSAyO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJpbmFyeU1hc2sucHJvdG90eXBlLmdldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAyLCAwKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5CaW5hcnlNYXNrfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5CaW5hcnlNYXNrLnByb3RvdHlwZS5zZXRIZWlnaHQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5CaW5hcnlNYXNrfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5CaW5hcnlNYXNrLnByb3RvdHlwZS5jbGVhckhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5CaW5hcnlNYXNrLnByb3RvdHlwZS5oYXNIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIFJhc3Rlcml6YXRpb24gcmFzdGVyaXphdGlvbiA9IDM7XG4gKiBAcmV0dXJuIHs/cHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb259XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQmluYXJ5TWFzay5wcm90b3R5cGUuZ2V0UmFzdGVyaXphdGlvbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5tZWRpYXBpcGUuUmFzdGVyaXphdGlvbn0gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgbWVkaWFwaXBlX2ZyYW1ld29ya19mb3JtYXRzX2Fubm90YXRpb25fcmFzdGVyaXphdGlvbl9wYi5SYXN0ZXJpemF0aW9uLCAzKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHs/cHJvdG8ubWVkaWFwaXBlLlJhc3Rlcml6YXRpb258dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQmluYXJ5TWFza30gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5CaW5hcnlNYXNrLnByb3RvdHlwZS5zZXRSYXN0ZXJpemF0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQmluYXJ5TWFza30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQmluYXJ5TWFzay5wcm90b3R5cGUuY2xlYXJSYXN0ZXJpemF0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldFJhc3Rlcml6YXRpb24odW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJpbmFyeU1hc2sucHJvdG90eXBlLmhhc1Jhc3Rlcml6YXRpb24gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAzKSAhPSBudWxsO1xufTtcblxuXG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludC5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlS2V5cG9pbnQudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlS2V5cG9pbnR9IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludC50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgeDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQobXNnLCAxKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgeTogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQobXNnLCAyKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAga2V5cG9pbnRMYWJlbDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCAzKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgc2NvcmU6IChmID0ganNwYi5NZXNzYWdlLmdldE9wdGlvbmFsRmxvYXRpbmdQb2ludEZpZWxkKG1zZywgNCkpID09IG51bGwgPyB1bmRlZmluZWQgOiBmXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlS2V5cG9pbnR9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludC5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludDtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlS2V5cG9pbnR9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUtleXBvaW50fVxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlS2V5cG9pbnQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRGbG9hdCgpKTtcbiAgICAgIG1zZy5zZXRYKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRGbG9hdCgpKTtcbiAgICAgIG1zZy5zZXRZKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuc2V0S2V5cG9pbnRMYWJlbCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkRmxvYXQoKSk7XG4gICAgICBtc2cuc2V0U2NvcmUodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlYWRlci5za2lwRmllbGQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbXNnO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KS5cbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlS2V5cG9pbnQucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludH0gbWVzc2FnZVxuICogQHBhcmFtIHshanNwYi5CaW5hcnlXcml0ZXJ9IHdyaXRlclxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlS2V5cG9pbnQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAxKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVGbG9hdChcbiAgICAgIDEsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMikpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlRmxvYXQoXG4gICAgICAyLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDMpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZVN0cmluZyhcbiAgICAgIDMsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgNCkpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlRmxvYXQoXG4gICAgICA0LFxuICAgICAgZlxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBmbG9hdCB4ID0gMTtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUtleXBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxLCAwLjApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlS2V5cG9pbnR9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlS2V5cG9pbnQucHJvdG90eXBlLnNldFggPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUtleXBvaW50fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUtleXBvaW50LnByb3RvdHlwZS5jbGVhclggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludC5wcm90b3R5cGUuaGFzWCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgZmxvYXQgeSA9IDI7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludC5wcm90b3R5cGUuZ2V0WSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQodGhpcywgMiwgMC4wKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUtleXBvaW50fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUtleXBvaW50LnByb3RvdHlwZS5zZXRZID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludC5wcm90b3R5cGUuY2xlYXJZID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMiwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlS2V5cG9pbnQucHJvdG90eXBlLmhhc1kgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyBrZXlwb2ludF9sYWJlbCA9IDM7XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludC5wcm90b3R5cGUuZ2V0S2V5cG9pbnRMYWJlbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAzLCBcIlwiKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUtleXBvaW50fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUtleXBvaW50LnByb3RvdHlwZS5zZXRLZXlwb2ludExhYmVsID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludC5wcm90b3R5cGUuY2xlYXJLZXlwb2ludExhYmVsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMywgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlS2V5cG9pbnQucHJvdG90eXBlLmhhc0tleXBvaW50TGFiZWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAzKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGZsb2F0IHNjb3JlID0gNDtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUtleXBvaW50LnByb3RvdHlwZS5nZXRTY29yZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQodGhpcywgNCwgMC4wKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUtleXBvaW50fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUtleXBvaW50LnByb3RvdHlwZS5zZXRTY29yZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgNCwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlS2V5cG9pbnR9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlS2V5cG9pbnQucHJvdG90eXBlLmNsZWFyU2NvcmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA0LCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludC5wcm90b3R5cGUuaGFzU2NvcmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA0KSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIEZvcm1hdCBmb3JtYXQgPSAxO1xuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuRm9ybWF0fVxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLnByb3RvdHlwZS5nZXRGb3JtYXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuRm9ybWF0fSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMSwgMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuRm9ybWF0fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGF9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLnByb3RvdHlwZS5zZXRGb3JtYXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEucHJvdG90eXBlLmNsZWFyRm9ybWF0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMSwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLnByb3RvdHlwZS5oYXNGb3JtYXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAxKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIEJvdW5kaW5nQm94IGJvdW5kaW5nX2JveCA9IDI7XG4gKiBAcmV0dXJuIHs/cHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Cb3VuZGluZ0JveH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5wcm90b3R5cGUuZ2V0Qm91bmRpbmdCb3ggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Cb3VuZGluZ0JveH0gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5Cb3VuZGluZ0JveCwgMikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P3Byb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuQm91bmRpbmdCb3h8dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGF9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEucHJvdG90eXBlLnNldEJvdW5kaW5nQm94ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGF9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLnByb3RvdHlwZS5jbGVhckJvdW5kaW5nQm94ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldEJvdW5kaW5nQm94KHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5wcm90b3R5cGUuaGFzQm91bmRpbmdCb3ggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIFJlbGF0aXZlQm91bmRpbmdCb3ggcmVsYXRpdmVfYm91bmRpbmdfYm94ID0gMztcbiAqIEByZXR1cm4gez9wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlQm91bmRpbmdCb3h9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEucHJvdG90eXBlLmdldFJlbGF0aXZlQm91bmRpbmdCb3ggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUJvdW5kaW5nQm94fSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlQm91bmRpbmdCb3gsIDMpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlQm91bmRpbmdCb3h8dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGF9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEucHJvdG90eXBlLnNldFJlbGF0aXZlQm91bmRpbmdCb3ggPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEucHJvdG90eXBlLmNsZWFyUmVsYXRpdmVCb3VuZGluZ0JveCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRSZWxhdGl2ZUJvdW5kaW5nQm94KHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5wcm90b3R5cGUuaGFzUmVsYXRpdmVCb3VuZGluZ0JveCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDMpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgQmluYXJ5TWFzayBtYXNrID0gNDtcbiAqIEByZXR1cm4gez9wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJpbmFyeU1hc2t9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEucHJvdG90eXBlLmdldE1hc2sgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5CaW5hcnlNYXNrfSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJpbmFyeU1hc2ssIDQpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLkJpbmFyeU1hc2t8dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGF9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEucHJvdG90eXBlLnNldE1hc2sgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCA0LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEucHJvdG90eXBlLmNsZWFyTWFzayA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRNYXNrKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5wcm90b3R5cGUuaGFzTWFzayA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDQpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogcmVwZWF0ZWQgUmVsYXRpdmVLZXlwb2ludCByZWxhdGl2ZV9rZXlwb2ludHMgPSA1O1xuICogQHJldHVybiB7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlS2V5cG9pbnQ+fVxuICovXG5wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLnByb3RvdHlwZS5nZXRSZWxhdGl2ZUtleXBvaW50c0xpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludD59ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUtleXBvaW50LCA1KSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludD59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YX0gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5wcm90b3R5cGUuc2V0UmVsYXRpdmVLZXlwb2ludHNMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCA1LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5SZWxhdGl2ZUtleXBvaW50PX0gb3B0X3ZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEuUmVsYXRpdmVLZXlwb2ludH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YS5wcm90b3R5cGUuYWRkUmVsYXRpdmVLZXlwb2ludHMgPSBmdW5jdGlvbihvcHRfdmFsdWUsIG9wdF9pbmRleCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgNSwgb3B0X3ZhbHVlLCBwcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhLlJlbGF0aXZlS2V5cG9pbnQsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5Mb2NhdGlvbkRhdGEucHJvdG90eXBlLmNsZWFyUmVsYXRpdmVLZXlwb2ludHNMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldFJlbGF0aXZlS2V5cG9pbnRzTGlzdChbXSk7XG59O1xuXG5cbmdvb2cub2JqZWN0LmV4dGVuZChleHBvcnRzLCBwcm90by5tZWRpYXBpcGUpO1xuIiwiLy8gc291cmNlOiBtZWRpYXBpcGUvZnJhbWV3b3JrL2Zvcm1hdHMvZGV0ZWN0aW9uLnByb3RvXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqIEBlbmhhbmNlYWJsZVxuICogQHN1cHByZXNzIHttaXNzaW5nUmVxdWlyZX0gcmVwb3J0cyBlcnJvciBvbiBpbXBsaWNpdCB0eXBlIHVzYWdlcy5cbiAqIEBzdXBwcmVzcyB7bWVzc2FnZUNvbnZlbnRpb25zfSBKUyBDb21waWxlciByZXBvcnRzIGFuIGVycm9yIGlmIGEgdmFyaWFibGUgb3JcbiAqICAgICBmaWVsZCBzdGFydHMgd2l0aCAnTVNHXycgYW5kIGlzbid0IGEgdHJhbnNsYXRhYmxlIG1lc3NhZ2UuXG4gKiBAcHVibGljXG4gKi9cbi8vIEdFTkVSQVRFRCBDT0RFIC0tIERPIE5PVCBFRElUIVxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbnZhciBqc3BiID0gcmVxdWlyZSgnZ29vZ2xlLXByb3RvYnVmJyk7XG52YXIgZ29vZyA9IGpzcGI7XG52YXIgZ2xvYmFsID1cbiAgICAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMpIHx8XG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdykgfHxcbiAgICAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsKSB8fFxuICAgICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZikgfHxcbiAgICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkuY2FsbChudWxsKSB8fFxuICAgIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbnZhciBtZWRpYXBpcGVfZnJhbWV3b3JrX2Zvcm1hdHNfbG9jYXRpb25fZGF0YV9wYiA9IHJlcXVpcmUoJy4uLy4uLy4uL21lZGlhcGlwZS9mcmFtZXdvcmsvZm9ybWF0cy9sb2NhdGlvbl9kYXRhX3BiLmpzJyk7XG5nb29nLm9iamVjdC5leHRlbmQocHJvdG8sIG1lZGlhcGlwZV9mcmFtZXdvcmtfZm9ybWF0c19sb2NhdGlvbl9kYXRhX3BiKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uJywgbnVsbCwgZ2xvYmFsKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLkFzc29jaWF0ZWREZXRlY3Rpb24nLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb25MaXN0JywgbnVsbCwgZ2xvYmFsKTtcbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnJlcGVhdGVkRmllbGRzXywgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5kaXNwbGF5TmFtZSA9ICdwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uJztcbn1cbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLkFzc29jaWF0ZWREZXRlY3Rpb24gPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5Bc3NvY2lhdGVkRGV0ZWN0aW9uLCBqc3BiLk1lc3NhZ2UpO1xuaWYgKGdvb2cuREVCVUcgJiYgIUNPTVBJTEVEKSB7XG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5Bc3NvY2lhdGVkRGV0ZWN0aW9uLmRpc3BsYXlOYW1lID0gJ3Byb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24uQXNzb2NpYXRlZERldGVjdGlvbic7XG59XG4vKipcbiAqIEdlbmVyYXRlZCBieSBKc1BiQ29kZUdlbmVyYXRvci5cbiAqIEBwYXJhbSB7QXJyYXk9fSBvcHRfZGF0YSBPcHRpb25hbCBpbml0aWFsIGRhdGEgYXJyYXksIHR5cGljYWxseSBmcm9tIGFcbiAqIHNlcnZlciByZXNwb25zZSwgb3IgY29uc3RydWN0ZWQgZGlyZWN0bHkgaW4gSmF2YXNjcmlwdC4gVGhlIGFycmF5IGlzIHVzZWRcbiAqIGluIHBsYWNlIGFuZCBiZWNvbWVzIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGVkIG9iamVjdC4gSXQgaXMgbm90IGNsb25lZC5cbiAqIElmIG5vIGRhdGEgaXMgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3Qgd2lsbCBiZSBlbXB0eSwgYnV0IHN0aWxsXG4gKiB2YWxpZC5cbiAqIEBleHRlbmRzIHtqc3BiLk1lc3NhZ2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbkxpc3QgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIHByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb25MaXN0LnJlcGVhdGVkRmllbGRzXywgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uTGlzdCwganNwYi5NZXNzYWdlKTtcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb25MaXN0LmRpc3BsYXlOYW1lID0gJ3Byb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb25MaXN0Jztcbn1cblxuLyoqXG4gKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuXG4gKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59XG4gKiBAY29uc3RcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5yZXBlYXRlZEZpZWxkc18gPSBbMSwyLDMsOCw5XTtcblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbn0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgbGFiZWxMaXN0OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKG1zZywgMSkpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIGxhYmVsSWRMaXN0OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKG1zZywgMikpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIHNjb3JlTGlzdDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGbG9hdGluZ1BvaW50RmllbGQobXNnLCAzKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgbG9jYXRpb25EYXRhOiAoZiA9IG1zZy5nZXRMb2NhdGlvbkRhdGEoKSkgJiYgbWVkaWFwaXBlX2ZyYW1ld29ya19mb3JtYXRzX2xvY2F0aW9uX2RhdGFfcGIuTG9jYXRpb25EYXRhLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXG4gICAgZmVhdHVyZVRhZzogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCA1KSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgdHJhY2tJZDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCA2KSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgZGV0ZWN0aW9uSWQ6IChmID0ganNwYi5NZXNzYWdlLmdldEZpZWxkKG1zZywgNykpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIGFzc29jaWF0ZWREZXRlY3Rpb25zTGlzdDoganNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0QXNzb2NpYXRlZERldGVjdGlvbnNMaXN0KCksXG4gICAgcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5Bc3NvY2lhdGVkRGV0ZWN0aW9uLnRvT2JqZWN0LCBpbmNsdWRlSW5zdGFuY2UpLFxuICAgIGRpc3BsYXlOYW1lTGlzdDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZChtc2csIDkpKSA9PSBudWxsID8gdW5kZWZpbmVkIDogZixcbiAgICB0aW1lc3RhbXBVc2VjOiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtc2csIDEwKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGZcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb259XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24uZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9ufSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb259XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuYWRkTGFiZWwodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgdmFyIHZhbHVlcyA9IC8qKiBAdHlwZSB7IUFycmF5PG51bWJlcj59ICovIChyZWFkZXIuaXNEZWxpbWl0ZWQoKSA/IHJlYWRlci5yZWFkUGFja2VkSW50MzIoKSA6IFtyZWFkZXIucmVhZEludDMyKCldKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1zZy5hZGRMYWJlbElkKHZhbHVlc1tpXSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgdmFsdWVzID0gLyoqIEB0eXBlIHshQXJyYXk8bnVtYmVyPn0gKi8gKHJlYWRlci5pc0RlbGltaXRlZCgpID8gcmVhZGVyLnJlYWRQYWNrZWRGbG9hdCgpIDogW3JlYWRlci5yZWFkRmxvYXQoKV0pO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbXNnLmFkZFNjb3JlKHZhbHVlc1tpXSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgbWVkaWFwaXBlX2ZyYW1ld29ya19mb3JtYXRzX2xvY2F0aW9uX2RhdGFfcGIuTG9jYXRpb25EYXRhO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLG1lZGlhcGlwZV9mcmFtZXdvcmtfZm9ybWF0c19sb2NhdGlvbl9kYXRhX3BiLkxvY2F0aW9uRGF0YS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldExvY2F0aW9uRGF0YSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xuICAgICAgbXNnLnNldEZlYXR1cmVUYWcodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA2OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5zZXRUcmFja0lkKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNzpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQ2NCgpKTtcbiAgICAgIG1zZy5zZXREZXRlY3Rpb25JZCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDg6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5Bc3NvY2lhdGVkRGV0ZWN0aW9uO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24uQXNzb2NpYXRlZERldGVjdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLmFkZEFzc29jaWF0ZWREZXRlY3Rpb25zKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgOTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuYWRkRGlzcGxheU5hbWUodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQ2NCgpKTtcbiAgICAgIG1zZy5zZXRUaW1lc3RhbXBVc2VjKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb259IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IG1lc3NhZ2UuZ2V0TGFiZWxMaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZFN0cmluZyhcbiAgICAgIDEsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRMYWJlbElkTGlzdCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlUGFja2VkSW50MzIoXG4gICAgICAyLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0U2NvcmVMaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVQYWNrZWRGbG9hdChcbiAgICAgIDMsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRMb2NhdGlvbkRhdGEoKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXG4gICAgICA0LFxuICAgICAgZixcbiAgICAgIG1lZGlhcGlwZV9mcmFtZXdvcmtfZm9ybWF0c19sb2NhdGlvbl9kYXRhX3BiLkxvY2F0aW9uRGF0YS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDUpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZVN0cmluZyhcbiAgICAgIDUsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgNikpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxuICAgICAgNixcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCA3KSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVJbnQ2NChcbiAgICAgIDcsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRBc3NvY2lhdGVkRGV0ZWN0aW9uc0xpc3QoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZShcbiAgICAgIDgsXG4gICAgICBmLFxuICAgICAgcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5Bc3NvY2lhdGVkRGV0ZWN0aW9uLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXREaXNwbGF5TmFtZUxpc3QoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkU3RyaW5nKFxuICAgICAgOSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAxMCkpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlSW50NjQoXG4gICAgICAxMCxcbiAgICAgIGZcbiAgICApO1xuICB9XG59O1xuXG5cblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5Bc3NvY2lhdGVkRGV0ZWN0aW9uLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24uQXNzb2NpYXRlZERldGVjdGlvbi50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24uQXNzb2NpYXRlZERldGVjdGlvbn0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5Bc3NvY2lhdGVkRGV0ZWN0aW9uLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBpZDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobXNnLCAxKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgY29uZmlkZW5jZTogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQobXNnLCAyKSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGZcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24uQXNzb2NpYXRlZERldGVjdGlvbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5Bc3NvY2lhdGVkRGV0ZWN0aW9uLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5Bc3NvY2lhdGVkRGV0ZWN0aW9uO1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5Bc3NvY2lhdGVkRGV0ZWN0aW9uLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24uQXNzb2NpYXRlZERldGVjdGlvbn0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLkFzc29jaWF0ZWREZXRlY3Rpb259XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24uQXNzb2NpYXRlZERldGVjdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDMyKCkpO1xuICAgICAgbXNnLnNldElkKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRGbG9hdCgpKTtcbiAgICAgIG1zZy5zZXRDb25maWRlbmNlKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5Bc3NvY2lhdGVkRGV0ZWN0aW9uLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLkFzc29jaWF0ZWREZXRlY3Rpb24uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLkFzc29jaWF0ZWREZXRlY3Rpb259IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5Bc3NvY2lhdGVkRGV0ZWN0aW9uLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMSkpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlSW50MzIoXG4gICAgICAxLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkKG1lc3NhZ2UsIDIpKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZUZsb2F0KFxuICAgICAgMixcbiAgICAgIGZcbiAgICApO1xuICB9XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgaW50MzIgaWQgPSAxO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLkFzc29jaWF0ZWREZXRlY3Rpb24ucHJvdG90eXBlLmdldElkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLkFzc29jaWF0ZWREZXRlY3Rpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLkFzc29jaWF0ZWREZXRlY3Rpb24ucHJvdG90eXBlLnNldElkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24uQXNzb2NpYXRlZERldGVjdGlvbn0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24uQXNzb2NpYXRlZERldGVjdGlvbi5wcm90b3R5cGUuY2xlYXJJZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDEsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5Bc3NvY2lhdGVkRGV0ZWN0aW9uLnByb3RvdHlwZS5oYXNJZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgZmxvYXQgY29uZmlkZW5jZSA9IDI7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24uQXNzb2NpYXRlZERldGVjdGlvbi5wcm90b3R5cGUuZ2V0Q29uZmlkZW5jZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQodGhpcywgMiwgMC4wKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5Bc3NvY2lhdGVkRGV0ZWN0aW9ufSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5Bc3NvY2lhdGVkRGV0ZWN0aW9uLnByb3RvdHlwZS5zZXRDb25maWRlbmNlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24uQXNzb2NpYXRlZERldGVjdGlvbn0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24uQXNzb2NpYXRlZERldGVjdGlvbi5wcm90b3R5cGUuY2xlYXJDb25maWRlbmNlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMiwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLkFzc29jaWF0ZWREZXRlY3Rpb24ucHJvdG90eXBlLmhhc0NvbmZpZGVuY2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIHN0cmluZyBsYWJlbCA9IDE7XG4gKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5wcm90b3R5cGUuZ2V0TGFiZWxMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUgeyFBcnJheTxzdHJpbmc+fSAqLyAoanNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodGhpcywgMSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbn0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24ucHJvdG90eXBlLnNldExhYmVsTGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMSwgdmFsdWUgfHwgW10pO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9ufSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5wcm90b3R5cGUuYWRkTGFiZWwgPSBmdW5jdGlvbih2YWx1ZSwgb3B0X2luZGV4KSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZEZpZWxkKHRoaXMsIDEsIHZhbHVlLCBvcHRfaW5kZXgpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnByb3RvdHlwZS5jbGVhckxhYmVsTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRMYWJlbExpc3QoW10pO1xufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIGludDMyIGxhYmVsX2lkID0gMjtcbiAqIEByZXR1cm4geyFBcnJheTxudW1iZXI+fVxuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnByb3RvdHlwZS5nZXRMYWJlbElkTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHshQXJyYXk8bnVtYmVyPn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKHRoaXMsIDIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTxudW1iZXI+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnByb3RvdHlwZS5zZXRMYWJlbElkTGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMiwgdmFsdWUgfHwgW10pO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9ufSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5wcm90b3R5cGUuYWRkTGFiZWxJZCA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkRmllbGQodGhpcywgMiwgdmFsdWUsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbn0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24ucHJvdG90eXBlLmNsZWFyTGFiZWxJZExpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0TGFiZWxJZExpc3QoW10pO1xufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIGZsb2F0IHNjb3JlID0gMztcbiAqIEByZXR1cm4geyFBcnJheTxudW1iZXI+fVxuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnByb3RvdHlwZS5nZXRTY29yZUxpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IUFycmF5PG51bWJlcj59ICovIChqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGbG9hdGluZ1BvaW50RmllbGQodGhpcywgMykpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PG51bWJlcj59IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbn0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24ucHJvdG90eXBlLnNldFNjb3JlTGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMywgdmFsdWUgfHwgW10pO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9ufSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5wcm90b3R5cGUuYWRkU2NvcmUgPSBmdW5jdGlvbih2YWx1ZSwgb3B0X2luZGV4KSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZEZpZWxkKHRoaXMsIDMsIHZhbHVlLCBvcHRfaW5kZXgpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnByb3RvdHlwZS5jbGVhclNjb3JlTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRTY29yZUxpc3QoW10pO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIExvY2F0aW9uRGF0YSBsb2NhdGlvbl9kYXRhID0gNDtcbiAqIEByZXR1cm4gez9wcm90by5tZWRpYXBpcGUuTG9jYXRpb25EYXRhfVxuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnByb3RvdHlwZS5nZXRMb2NhdGlvbkRhdGEgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YX0gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgbWVkaWFwaXBlX2ZyYW1ld29ya19mb3JtYXRzX2xvY2F0aW9uX2RhdGFfcGIuTG9jYXRpb25EYXRhLCA0KSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHs/cHJvdG8ubWVkaWFwaXBlLkxvY2F0aW9uRGF0YXx1bmRlZmluZWR9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbn0gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5wcm90b3R5cGUuc2V0TG9jYXRpb25EYXRhID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgNCwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnByb3RvdHlwZS5jbGVhckxvY2F0aW9uRGF0YSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRMb2NhdGlvbkRhdGEodW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnByb3RvdHlwZS5oYXNMb2NhdGlvbkRhdGEgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA0KSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyBmZWF0dXJlX3RhZyA9IDU7XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24ucHJvdG90eXBlLmdldEZlYXR1cmVUYWcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgNSwgXCJcIikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnByb3RvdHlwZS5zZXRGZWF0dXJlVGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA1LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnByb3RvdHlwZS5jbGVhckZlYXR1cmVUYWcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA1LCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24ucHJvdG90eXBlLmhhc0ZlYXR1cmVUYWcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA1KSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyB0cmFja19pZCA9IDY7XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24ucHJvdG90eXBlLmdldFRyYWNrSWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgNiwgXCJcIikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnByb3RvdHlwZS5zZXRUcmFja0lkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA2LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnByb3RvdHlwZS5jbGVhclRyYWNrSWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA2LCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24ucHJvdG90eXBlLmhhc1RyYWNrSWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCA2KSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGludDY0IGRldGVjdGlvbl9pZCA9IDc7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24ucHJvdG90eXBlLmdldERldGVjdGlvbklkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDcsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9ufSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5wcm90b3R5cGUuc2V0RGV0ZWN0aW9uSWQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDcsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbn0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24ucHJvdG90eXBlLmNsZWFyRGV0ZWN0aW9uSWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA3LCB1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24ucHJvdG90eXBlLmhhc0RldGVjdGlvbklkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNykgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBBc3NvY2lhdGVkRGV0ZWN0aW9uIGFzc29jaWF0ZWRfZGV0ZWN0aW9ucyA9IDg7XG4gKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24uQXNzb2NpYXRlZERldGVjdGlvbj59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24ucHJvdG90eXBlLmdldEFzc29jaWF0ZWREZXRlY3Rpb25zTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBleyFBcnJheTwhcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5Bc3NvY2lhdGVkRGV0ZWN0aW9uPn0gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLkFzc29jaWF0ZWREZXRlY3Rpb24sIDgpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTwhcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5Bc3NvY2lhdGVkRGV0ZWN0aW9uPn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9ufSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnByb3RvdHlwZS5zZXRBc3NvY2lhdGVkRGV0ZWN0aW9uc0xpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDgsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLkFzc29jaWF0ZWREZXRlY3Rpb249fSBvcHRfdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5Bc3NvY2lhdGVkRGV0ZWN0aW9ufVxuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnByb3RvdHlwZS5hZGRBc3NvY2lhdGVkRGV0ZWN0aW9ucyA9IGZ1bmN0aW9uKG9wdF92YWx1ZSwgb3B0X2luZGV4KSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCA4LCBvcHRfdmFsdWUsIHByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24uQXNzb2NpYXRlZERldGVjdGlvbiwgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9ufSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5wcm90b3R5cGUuY2xlYXJBc3NvY2lhdGVkRGV0ZWN0aW9uc0xpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0QXNzb2NpYXRlZERldGVjdGlvbnNMaXN0KFtdKTtcbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBzdHJpbmcgZGlzcGxheV9uYW1lID0gOTtcbiAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fVxuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnByb3RvdHlwZS5nZXREaXNwbGF5TmFtZUxpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IUFycmF5PHN0cmluZz59ICovIChqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0aGlzLCA5KSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9ufSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5wcm90b3R5cGUuc2V0RGlzcGxheU5hbWVMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA5LCB2YWx1ZSB8fCBbXSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnByb3RvdHlwZS5hZGREaXNwbGF5TmFtZSA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkRmllbGQodGhpcywgOSwgdmFsdWUsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbn0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24ucHJvdG90eXBlLmNsZWFyRGlzcGxheU5hbWVMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldERpc3BsYXlOYW1lTGlzdChbXSk7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgaW50NjQgdGltZXN0YW1wX3VzZWMgPSAxMDtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5wcm90b3R5cGUuZ2V0VGltZXN0YW1wVXNlYyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxMCwgMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb259IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnByb3RvdHlwZS5zZXRUaW1lc3RhbXBVc2VjID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAxMCwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgZmllbGQgbWFraW5nIGl0IHVuZGVmaW5lZC5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9ufSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5wcm90b3R5cGUuY2xlYXJUaW1lc3RhbXBVc2VjID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMTAsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5wcm90b3R5cGUuaGFzVGltZXN0YW1wVXNlYyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEwKSAhPSBudWxsO1xufTtcblxuXG5cbi8qKlxuICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLlxuICogQHByaXZhdGUgeyFBcnJheTxudW1iZXI+fVxuICogQGNvbnN0XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb25MaXN0LnJlcGVhdGVkRmllbGRzXyA9IFsxXTtcblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbkxpc3QucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbkxpc3QudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uTGlzdH0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbkxpc3QudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xuICB2YXIgZiwgb2JqID0ge1xuICAgIGRldGVjdGlvbkxpc3Q6IGpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldERldGVjdGlvbkxpc3QoKSxcbiAgICBwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLnRvT2JqZWN0LCBpbmNsdWRlSW5zdGFuY2UpXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uTGlzdH1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbkxpc3QuZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcbiAgdmFyIG1zZyA9IG5ldyBwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uTGlzdDtcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb25MaXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihtc2csIHJlYWRlcik7XG59O1xuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkgZnJvbSB0aGVcbiAqIGdpdmVuIHJlYWRlciBpbnRvIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb25MaXN0fSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb25MaXN0fVxuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uTGlzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIgPSBmdW5jdGlvbihtc2csIHJlYWRlcikge1xuICB3aGlsZSAocmVhZGVyLm5leHRGaWVsZCgpKSB7XG4gICAgaWYgKHJlYWRlci5pc0VuZEdyb3VwKCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZmllbGQgPSByZWFkZXIuZ2V0RmllbGROdW1iZXIoKTtcbiAgICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb247XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLmFkZERldGVjdGlvbih2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb25MaXN0LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uTGlzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb25MaXN0fSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb25MaXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gbWVzc2FnZS5nZXREZXRlY3Rpb25MaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoXG4gICAgICAxLFxuICAgICAgZixcbiAgICAgIHByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXJcbiAgICApO1xuICB9XG59O1xuXG5cbi8qKlxuICogcmVwZWF0ZWQgRGV0ZWN0aW9uIGRldGVjdGlvbiA9IDE7XG4gKiBAcmV0dXJuIHshQXJyYXk8IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb24+fVxuICovXG5wcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uTGlzdC5wcm90b3R5cGUuZ2V0RGV0ZWN0aW9uTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBleyFBcnJheTwhcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbj59ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgcHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbiwgMSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uPn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uTGlzdH0gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbkxpc3QucHJvdG90eXBlLnNldERldGVjdGlvbkxpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uPX0gb3B0X3ZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb259XG4gKi9cbnByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb25MaXN0LnByb3RvdHlwZS5hZGREZXRlY3Rpb24gPSBmdW5jdGlvbihvcHRfdmFsdWUsIG9wdF9pbmRleCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgMSwgb3B0X3ZhbHVlLCBwcm90by5tZWRpYXBpcGUuRGV0ZWN0aW9uLCBvcHRfaW5kZXgpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS5EZXRlY3Rpb25MaXN0fSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLkRldGVjdGlvbkxpc3QucHJvdG90eXBlLmNsZWFyRGV0ZWN0aW9uTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXREZXRlY3Rpb25MaXN0KFtdKTtcbn07XG5cblxuZ29vZy5vYmplY3QuZXh0ZW5kKGV4cG9ydHMsIHByb3RvLm1lZGlhcGlwZSk7XG4iLCIvLyBzb3VyY2U6IG1lZGlhcGlwZS90YXNrcy9jYy92aXNpb24vb2JqZWN0X2RldGVjdG9yL3Byb3RvL29iamVjdF9kZXRlY3Rvcl9vcHRpb25zLnByb3RvXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqIEBlbmhhbmNlYWJsZVxuICogQHN1cHByZXNzIHttaXNzaW5nUmVxdWlyZX0gcmVwb3J0cyBlcnJvciBvbiBpbXBsaWNpdCB0eXBlIHVzYWdlcy5cbiAqIEBzdXBwcmVzcyB7bWVzc2FnZUNvbnZlbnRpb25zfSBKUyBDb21waWxlciByZXBvcnRzIGFuIGVycm9yIGlmIGEgdmFyaWFibGUgb3JcbiAqICAgICBmaWVsZCBzdGFydHMgd2l0aCAnTVNHXycgYW5kIGlzbid0IGEgdHJhbnNsYXRhYmxlIG1lc3NhZ2UuXG4gKiBAcHVibGljXG4gKi9cbi8vIEdFTkVSQVRFRCBDT0RFIC0tIERPIE5PVCBFRElUIVxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbnZhciBqc3BiID0gcmVxdWlyZSgnZ29vZ2xlLXByb3RvYnVmJyk7XG52YXIgZ29vZyA9IGpzcGI7XG52YXIgZ2xvYmFsID1cbiAgICAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMpIHx8XG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdykgfHxcbiAgICAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsKSB8fFxuICAgICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZikgfHxcbiAgICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkuY2FsbChudWxsKSB8fFxuICAgIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbnZhciBtZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3JfcGIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi8uLi9tZWRpYXBpcGUvZnJhbWV3b3JrL2NhbGN1bGF0b3JfcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgbWVkaWFwaXBlX2ZyYW1ld29ya19jYWxjdWxhdG9yX3BiKTtcbnZhciBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19iYXNlX29wdGlvbnNfcGIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi8uLi9tZWRpYXBpcGUvdGFza3MvY2MvY29yZS9wcm90by9iYXNlX29wdGlvbnNfcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnMnLCBudWxsLCBnbG9iYWwpO1xuLyoqXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxuICogdmFsaWQuXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucyA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zLnJlcGVhdGVkRmllbGRzXywgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnMsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnMuZGlzcGxheU5hbWUgPSAncHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zJztcbn1cblxuLyoqXG4gKiBMaXN0IG9mIHJlcGVhdGVkIGZpZWxkcyB3aXRoaW4gdGhpcyBtZXNzYWdlIHR5cGUuXG4gKiBAcHJpdmF0ZSB7IUFycmF5PG51bWJlcj59XG4gKiBAY29uc3RcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zLnJlcGVhdGVkRmllbGRzXyA9IFs1LDZdO1xuXG5cblxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnMucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xuICByZXR1cm4gcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zfSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnMudG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xuICB2YXIgZiwgb2JqID0ge1xuICAgIGJhc2VPcHRpb25zOiAoZiA9IG1zZy5nZXRCYXNlT3B0aW9ucygpKSAmJiBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19iYXNlX29wdGlvbnNfcGIuQmFzZU9wdGlvbnMudG9PYmplY3QoaW5jbHVkZUluc3RhbmNlLCBmKSxcbiAgICBkaXNwbGF5TmFtZXNMb2NhbGU6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMiwgXCJlblwiKSxcbiAgICBtYXhSZXN1bHRzOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDMsIC0xKSxcbiAgICBzY29yZVRocmVzaG9sZDogKGYgPSBqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQobXNnLCA0KSkgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGYsXG4gICAgY2F0ZWdvcnlBbGxvd2xpc3RMaXN0OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKG1zZywgNSkpID09IG51bGwgPyB1bmRlZmluZWQgOiBmLFxuICAgIGNhdGVnb3J5RGVueWxpc3RMaXN0OiAoZiA9IGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKG1zZywgNikpID09IG51bGwgPyB1bmRlZmluZWQgOiBmXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucztcbiAgcmV0dXJuIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnN9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zfVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBtZWRpYXBpcGVfdGFza3NfY2NfY29yZV9wcm90b19iYXNlX29wdGlvbnNfcGIuQmFzZU9wdGlvbnM7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUsbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiLkJhc2VPcHRpb25zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcik7XG4gICAgICBtc2cuc2V0QmFzZU9wdGlvbnModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5zZXREaXNwbGF5TmFtZXNMb2NhbGUodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDMyKCkpO1xuICAgICAgbXNnLnNldE1heFJlc3VsdHModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEZsb2F0KCkpO1xuICAgICAgbXNnLnNldFNjb3JlVGhyZXNob2xkKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuYWRkQ2F0ZWdvcnlBbGxvd2xpc3QodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA2OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5hZGRDYXRlZ29yeURlbnlsaXN0KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnMuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnN9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gbWVzc2FnZS5nZXRCYXNlT3B0aW9ucygpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlTWVzc2FnZShcbiAgICAgIDEsXG4gICAgICBmLFxuICAgICAgbWVkaWFwaXBlX3Rhc2tzX2NjX2NvcmVfcHJvdG9fYmFzZV9vcHRpb25zX3BiLkJhc2VPcHRpb25zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgMikpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxuICAgICAgMixcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZChtZXNzYWdlLCAzKSk7XG4gIGlmIChmICE9IG51bGwpIHtcbiAgICB3cml0ZXIud3JpdGVJbnQzMihcbiAgICAgIDMsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGQobWVzc2FnZSwgNCkpO1xuICBpZiAoZiAhPSBudWxsKSB7XG4gICAgd3JpdGVyLndyaXRlRmxvYXQoXG4gICAgICA0LFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0Q2F0ZWdvcnlBbGxvd2xpc3RMaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZFN0cmluZyhcbiAgICAgIDUsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRDYXRlZ29yeURlbnlsaXN0TGlzdCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRTdHJpbmcoXG4gICAgICA2LFxuICAgICAgZlxuICAgICk7XG4gIH1cbn07XG5cblxuXG4vKipcbiAqIEEgdHVwbGUgb2Yge2ZpZWxkIG51bWJlciwgY2xhc3MgY29uc3RydWN0b3J9IGZvciB0aGUgZXh0ZW5zaW9uXG4gKiBmaWVsZCBuYW1lZCBgZXh0YC5cbiAqIEB0eXBlIHshanNwYi5FeHRlbnNpb25GaWVsZEluZm88IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucy5leHQgPSBuZXcganNwYi5FeHRlbnNpb25GaWVsZEluZm8oXG4gICAgNDQzNDQyMDU4LFxuICAgIHtleHQ6IDB9LFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucyxcbiAgICAgLyoqIEB0eXBlIHs/ZnVuY3Rpb24oKGJvb2xlYW58dW5kZWZpbmVkKSwhanNwYi5NZXNzYWdlPSk6ICFPYmplY3R9ICovIChcbiAgICAgICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucy50b09iamVjdCksXG4gICAgMCk7XG5cbm1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9vcHRpb25zX3BiLkNhbGN1bGF0b3JPcHRpb25zLmV4dGVuc2lvbnNCaW5hcnlbNDQzNDQyMDU4XSA9IG5ldyBqc3BiLkV4dGVuc2lvbkZpZWxkQmluYXJ5SW5mbyhcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnMuZXh0LFxuICAgIGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkTWVzc2FnZSxcbiAgICBqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVNZXNzYWdlLFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcixcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyLFxuICAgIGZhbHNlKTtcbi8vIFRoaXMgcmVnaXN0ZXJzIHRoZSBleHRlbnNpb24gZmllbGQgd2l0aCB0aGUgZXh0ZW5kZWQgY2xhc3MsIHNvIHRoYXRcbi8vIHRvT2JqZWN0KCkgd2lsbCBmdW5jdGlvbiBjb3JyZWN0bHkuXG5tZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3Jfb3B0aW9uc19wYi5DYWxjdWxhdG9yT3B0aW9ucy5leHRlbnNpb25zWzQ0MzQ0MjA1OF0gPSBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnMuZXh0O1xuXG4vKipcbiAqIG9wdGlvbmFsIG1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zIGJhc2Vfb3B0aW9ucyA9IDE7XG4gKiBAcmV0dXJuIHs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnN9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucy5wcm90b3R5cGUuZ2V0QmFzZU9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8ubWVkaWFwaXBlLnRhc2tzLmNvcmUucHJvdG8uQmFzZU9wdGlvbnN9ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIG1lZGlhcGlwZV90YXNrc19jY19jb3JlX3Byb3RvX2Jhc2Vfb3B0aW9uc19wYi5CYXNlT3B0aW9ucywgMSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P3Byb3RvLm1lZGlhcGlwZS50YXNrcy5jb3JlLnByb3RvLkJhc2VPcHRpb25zfHVuZGVmaW5lZH0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnN9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucy5wcm90b3R5cGUuc2V0QmFzZU9wdGlvbnMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zLnByb3RvdHlwZS5jbGVhckJhc2VPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldEJhc2VPcHRpb25zKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zLnByb3RvdHlwZS5oYXNCYXNlT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgc3RyaW5nIGRpc3BsYXlfbmFtZXNfbG9jYWxlID0gMjtcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zLnByb3RvdHlwZS5nZXREaXNwbGF5TmFtZXNMb2NhbGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMiwgXCJlblwiKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zLnByb3RvdHlwZS5zZXREaXNwbGF5TmFtZXNMb2NhbGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zLnByb3RvdHlwZS5jbGVhckRpc3BsYXlOYW1lc0xvY2FsZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDIsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zLnByb3RvdHlwZS5oYXNEaXNwbGF5TmFtZXNMb2NhbGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGludDMyIG1heF9yZXN1bHRzID0gMztcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zLnByb3RvdHlwZS5nZXRNYXhSZXN1bHRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDMsIC0xKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zLnByb3RvdHlwZS5zZXRNYXhSZXN1bHRzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCAzLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucy5wcm90b3R5cGUuY2xlYXJNYXhSZXN1bHRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgMywgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnMucHJvdG90eXBlLmhhc01heFJlc3VsdHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAzKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGZsb2F0IHNjb3JlX3RocmVzaG9sZCA9IDQ7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucy5wcm90b3R5cGUuZ2V0U2NvcmVUaHJlc2hvbGQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDQsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucy5wcm90b3R5cGUuc2V0U2NvcmVUaHJlc2hvbGQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldEZpZWxkKHRoaXMsIDQsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zLnByb3RvdHlwZS5jbGVhclNjb3JlVGhyZXNob2xkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywgNCwgdW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnMucHJvdG90eXBlLmhhc1Njb3JlVGhyZXNob2xkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywgNCkgIT0gbnVsbDtcbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBzdHJpbmcgY2F0ZWdvcnlfYWxsb3dsaXN0ID0gNTtcbiAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fVxuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnMucHJvdG90eXBlLmdldENhdGVnb3J5QWxsb3dsaXN0TGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHshQXJyYXk8c3RyaW5nPn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKHRoaXMsIDUpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucy5wcm90b3R5cGUuc2V0Q2F0ZWdvcnlBbGxvd2xpc3RMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA1LCB2YWx1ZSB8fCBbXSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucy5wcm90b3R5cGUuYWRkQ2F0ZWdvcnlBbGxvd2xpc3QgPSBmdW5jdGlvbih2YWx1ZSwgb3B0X2luZGV4KSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZEZpZWxkKHRoaXMsIDUsIHZhbHVlLCBvcHRfaW5kZXgpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLlxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucy5wcm90b3R5cGUuY2xlYXJDYXRlZ29yeUFsbG93bGlzdExpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0Q2F0ZWdvcnlBbGxvd2xpc3RMaXN0KFtdKTtcbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBzdHJpbmcgY2F0ZWdvcnlfZGVueWxpc3QgPSA2O1xuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucy5wcm90b3R5cGUuZ2V0Q2F0ZWdvcnlEZW55bGlzdExpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IUFycmF5PHN0cmluZz59ICovIChqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0aGlzLCA2KSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnN9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnMucHJvdG90eXBlLnNldENhdGVnb3J5RGVueWxpc3RMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLCA2LCB2YWx1ZSB8fCBbXSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9uc30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucy5wcm90b3R5cGUuYWRkQ2F0ZWdvcnlEZW55bGlzdCA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkRmllbGQodGhpcywgNiwgdmFsdWUsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8uT2JqZWN0RGV0ZWN0b3JPcHRpb25zLnByb3RvdHlwZS5jbGVhckNhdGVnb3J5RGVueWxpc3RMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldENhdGVnb3J5RGVueWxpc3RMaXN0KFtdKTtcbn07XG5cblxuXG4vKipcbiAqIEEgdHVwbGUgb2Yge2ZpZWxkIG51bWJlciwgY2xhc3MgY29uc3RydWN0b3J9IGZvciB0aGUgZXh0ZW5zaW9uXG4gKiBmaWVsZCBuYW1lZCBgZXh0YC5cbiAqIEB0eXBlIHshanNwYi5FeHRlbnNpb25GaWVsZEluZm88IXByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucz59XG4gKi9cbnByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucy5leHQgPSBuZXcganNwYi5FeHRlbnNpb25GaWVsZEluZm8oXG4gICAgNDQzNDQyMDU4LFxuICAgIHtleHQ6IDB9LFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucyxcbiAgICAgLyoqIEB0eXBlIHs/ZnVuY3Rpb24oKGJvb2xlYW58dW5kZWZpbmVkKSwhanNwYi5NZXNzYWdlPSk6ICFPYmplY3R9ICovIChcbiAgICAgICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucy50b09iamVjdCksXG4gICAgMCk7XG5cbm1lZGlhcGlwZV9mcmFtZXdvcmtfY2FsY3VsYXRvcl9vcHRpb25zX3BiLkNhbGN1bGF0b3JPcHRpb25zLmV4dGVuc2lvbnNCaW5hcnlbNDQzNDQyMDU4XSA9IG5ldyBqc3BiLkV4dGVuc2lvbkZpZWxkQmluYXJ5SW5mbyhcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnMuZXh0LFxuICAgIGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkTWVzc2FnZSxcbiAgICBqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVNZXNzYWdlLFxuICAgIHByb3RvLm1lZGlhcGlwZS50YXNrcy52aXNpb24ub2JqZWN0X2RldGVjdG9yLnByb3RvLk9iamVjdERldGVjdG9yT3B0aW9ucy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcixcbiAgICBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyLFxuICAgIGZhbHNlKTtcbi8vIFRoaXMgcmVnaXN0ZXJzIHRoZSBleHRlbnNpb24gZmllbGQgd2l0aCB0aGUgZXh0ZW5kZWQgY2xhc3MsIHNvIHRoYXRcbi8vIHRvT2JqZWN0KCkgd2lsbCBmdW5jdGlvbiBjb3JyZWN0bHkuXG5tZWRpYXBpcGVfZnJhbWV3b3JrX2NhbGN1bGF0b3Jfb3B0aW9uc19wYi5DYWxjdWxhdG9yT3B0aW9ucy5leHRlbnNpb25zWzQ0MzQ0MjA1OF0gPSBwcm90by5tZWRpYXBpcGUudGFza3MudmlzaW9uLm9iamVjdF9kZXRlY3Rvci5wcm90by5PYmplY3REZXRlY3Rvck9wdGlvbnMuZXh0O1xuXG5nb29nLm9iamVjdC5leHRlbmQoZXhwb3J0cywgcHJvdG8ubWVkaWFwaXBlLnRhc2tzLnZpc2lvbi5vYmplY3RfZGV0ZWN0b3IucHJvdG8pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIyIFRoZSBNZWRpYVBpcGUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT2JqZWN0RGV0ZWN0b3IgPSB2b2lkIDA7XG5jb25zdCBjYWxjdWxhdG9yX3BiXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL2NhbGN1bGF0b3JfcGJcIik7XG5jb25zdCBjYWxjdWxhdG9yX29wdGlvbnNfcGJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9mcmFtZXdvcmsvY2FsY3VsYXRvcl9vcHRpb25zX3BiXCIpO1xuY29uc3QgZGV0ZWN0aW9uX3BiXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL2Zvcm1hdHMvZGV0ZWN0aW9uX3BiXCIpO1xuY29uc3Qgb2JqZWN0X2RldGVjdG9yX29wdGlvbnNfcGJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi90YXNrcy9jYy92aXNpb24vb2JqZWN0X2RldGVjdG9yL3Byb3RvL29iamVjdF9kZXRlY3Rvcl9vcHRpb25zX3BiXCIpO1xuY29uc3QgYmFzZV9vcHRpb25zXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vdGFza3Mvd2ViL2NvbXBvbmVudHMvcHJvY2Vzc29ycy9iYXNlX29wdGlvbnNcIik7XG5jb25zdCB0YXNrX3J1bm5lcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL3Rhc2tzL3dlYi9jb3JlL3Rhc2tfcnVubmVyXCIpO1xuY29uc3Qgd2FzbV9tZWRpYXBpcGVfbGliXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vd2ViL2dyYXBoX3J1bm5lci93YXNtX21lZGlhcGlwZV9saWJcIik7XG5jb25zdCBJTlBVVF9TVFJFQU0gPSAnaW5wdXRfZnJhbWVfZ3B1JztcbmNvbnN0IERFVEVDVElPTlNfU1RSRUFNID0gJ2RldGVjdGlvbnMnO1xuY29uc3QgT0JKRUNUX0RFVEVDVE9SX0dSQVBIID0gJ21lZGlhcGlwZS50YXNrcy52aXNpb24uT2JqZWN0RGV0ZWN0b3JHcmFwaCc7XG5jb25zdCBERUZBVUxUX0NBVEVHT1JZX0lOREVYID0gLTE7XG4vLyBUaGUgT1NTIEpTIEFQSSBkb2VzIG5vdCBzdXBwb3J0IHRoZSBidWlsZGVyIHBhdHRlcm4uXG4vLyB0c2xpbnQ6ZGlzYWJsZTpqc3BiLXVzZS1idWlsZGVyLXBhdHRlcm5cbi8qKiBQZXJmb3JtcyBvYmplY3QgZGV0ZWN0aW9uIG9uIGltYWdlcy4gKi9cbmNsYXNzIE9iamVjdERldGVjdG9yIGV4dGVuZHMgdGFza19ydW5uZXJfMS5UYXNrUnVubmVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5kZXRlY3Rpb25zID0gW107XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG5ldyBvYmplY3RfZGV0ZWN0b3Jfb3B0aW9uc19wYl8xLk9iamVjdERldGVjdG9yT3B0aW9ucygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgV2FzbSBydW50aW1lIGFuZCBjcmVhdGVzIGEgbmV3IG9iamVjdCBkZXRlY3RvciBmcm9tIHRoZVxuICAgICAqIHByb3ZpZGVkIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHdhc21Mb2FkZXJPcHRpb25zIEEgY29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCBwcm92aWRlcyB0aGUgbG9jYXRpb25cbiAgICAgKiAgICAgb2YgdGhlIFdhc20gYmluYXJ5IGFuZCBpdHMgbG9hZGVyLlxuICAgICAqIEBwYXJhbSBvYmplY3REZXRlY3Rvck9wdGlvbnMgVGhlIG9wdGlvbnMgZm9yIHRoZSBPYmplY3QgRGV0ZWN0b3IuIE5vdGUgdGhhdFxuICAgICAqICAgICBlaXRoZXIgYSBwYXRoIHRvIHRoZSBtb2RlbCBhc3NldCBvciBhIG1vZGVsIGJ1ZmZlciBuZWVkcyB0byBiZVxuICAgICAqICAgICBwcm92aWRlZCAodmlhIGBiYXNlT3B0aW9uc2ApLlxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBjcmVhdGVGcm9tT3B0aW9ucyh3YXNtTG9hZGVyT3B0aW9ucywgb2JqZWN0RGV0ZWN0b3JPcHRpb25zKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIGZpbGUgbG9jYXRvciBiYXNlZCBvbiB0aGUgbG9hZGVyIG9wdGlvbnNcbiAgICAgICAgY29uc3QgZmlsZUxvY2F0b3IgPSB7XG4gICAgICAgICAgICBsb2NhdGVGaWxlKCkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBvbmx5IGZpbGUgd2UgbG9hZCBpcyB0aGUgV2FzbSBiaW5hcnlcbiAgICAgICAgICAgICAgICByZXR1cm4gd2FzbUxvYWRlck9wdGlvbnMud2FzbUJpbmFyeVBhdGgudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZGV0ZWN0b3IgPSBhd2FpdCAoMCwgd2FzbV9tZWRpYXBpcGVfbGliXzEuY3JlYXRlTWVkaWFQaXBlTGliKShPYmplY3REZXRlY3Rvciwgd2FzbUxvYWRlck9wdGlvbnMud2FzbUxvYWRlclBhdGgsIFxuICAgICAgICAvKiBhc3NldExvYWRlclNjcmlwdD0gKi8gdW5kZWZpbmVkLCBcbiAgICAgICAgLyogZ2xDYW52YXM9ICovIHVuZGVmaW5lZCwgZmlsZUxvY2F0b3IpO1xuICAgICAgICBhd2FpdCBkZXRlY3Rvci5zZXRPcHRpb25zKG9iamVjdERldGVjdG9yT3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBkZXRlY3RvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIFdhc20gcnVudGltZSBhbmQgY3JlYXRlcyBhIG5ldyBvYmplY3QgZGV0ZWN0b3IgYmFzZWQgb24gdGhlXG4gICAgICogcHJvdmlkZWQgbW9kZWwgYXNzZXQgYnVmZmVyLlxuICAgICAqIEBwYXJhbSB3YXNtTG9hZGVyT3B0aW9ucyBBIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgcHJvdmlkZXMgdGhlIGxvY2F0aW9uXG4gICAgICogICAgIG9mIHRoZSBXYXNtIGJpbmFyeSBhbmQgaXRzIGxvYWRlci5cbiAgICAgKiBAcGFyYW0gbW9kZWxBc3NldEJ1ZmZlciBBIGJpbmFyeSByZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwuXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZUZyb21Nb2RlbEJ1ZmZlcih3YXNtTG9hZGVyT3B0aW9ucywgbW9kZWxBc3NldEJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gT2JqZWN0RGV0ZWN0b3IuY3JlYXRlRnJvbU9wdGlvbnMod2FzbUxvYWRlck9wdGlvbnMsIHsgYmFzZU9wdGlvbnM6IHsgbW9kZWxBc3NldEJ1ZmZlciB9IH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgV2FzbSBydW50aW1lIGFuZCBjcmVhdGVzIGEgbmV3IG9iamVjdCBkZXRlY3RvciBiYXNlZCBvbiB0aGVcbiAgICAgKiBwYXRoIHRvIHRoZSBtb2RlbCBhc3NldC5cbiAgICAgKiBAcGFyYW0gd2FzbUxvYWRlck9wdGlvbnMgQSBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IHByb3ZpZGVzIHRoZSBsb2NhdGlvblxuICAgICAqICAgICBvZiB0aGUgV2FzbSBiaW5hcnkgYW5kIGl0cyBsb2FkZXIuXG4gICAgICogQHBhcmFtIG1vZGVsQXNzZXRQYXRoIFRoZSBwYXRoIHRvIHRoZSBtb2RlbCBhc3NldC5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgY3JlYXRlRnJvbU1vZGVsUGF0aCh3YXNtTG9hZGVyT3B0aW9ucywgbW9kZWxBc3NldFBhdGgpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChtb2RlbEFzc2V0UGF0aC50b1N0cmluZygpKTtcbiAgICAgICAgY29uc3QgZ3JhcGhEYXRhID0gYXdhaXQgcmVzcG9uc2UuYXJyYXlCdWZmZXIoKTtcbiAgICAgICAgcmV0dXJuIE9iamVjdERldGVjdG9yLmNyZWF0ZUZyb21Nb2RlbEJ1ZmZlcih3YXNtTG9hZGVyT3B0aW9ucywgbmV3IFVpbnQ4QXJyYXkoZ3JhcGhEYXRhKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgbmV3IG9wdGlvbnMgZm9yIHRoZSBvYmplY3QgZGV0ZWN0b3IuXG4gICAgICpcbiAgICAgKiBDYWxsaW5nIGBzZXRPcHRpb25zKClgIHdpdGggYSBzdWJzZXQgb2Ygb3B0aW9ucyBvbmx5IGFmZmVjdHMgdGhvc2Ugb3B0aW9ucy5cbiAgICAgKiBZb3UgY2FuIHJlc2V0IGFuIG9wdGlvbiBiYWNrIHRvIGl0cyBkZWZhdWx0IHZhbHVlIGJ5IGV4cGxpY2l0bHkgc2V0dGluZyBpdFxuICAgICAqIHRvIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIG9wdGlvbnMgZm9yIHRoZSBvYmplY3QgZGV0ZWN0b3IuXG4gICAgICovXG4gICAgYXN5bmMgc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmJhc2VPcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBiYXNlT3B0aW9uc1Byb3RvID0gYXdhaXQgKDAsIGJhc2Vfb3B0aW9uc18xLmNvbnZlcnRCYXNlT3B0aW9uc1RvUHJvdG8pKG9wdGlvbnMuYmFzZU9wdGlvbnMsIHRoaXMub3B0aW9ucy5nZXRCYXNlT3B0aW9ucygpKTtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zZXRCYXNlT3B0aW9ucyhiYXNlT3B0aW9uc1Byb3RvKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgaGF2ZSB0byBzdXBwb3J0IGJvdGggSlNQQiBhbmQgUHJvdG9idWZKUywgaGVuY2Ugd2VcbiAgICAgICAgLy8gaGF2ZSB0byBleHBsaWNsaXR5IGNsZWFyIHRoZSB2YWx1ZXMgaW5zdGVhZCBvZiBzZXR0aW5nIHRoZW0gdG9cbiAgICAgICAgLy8gYHVuZGVmaW5lZGAuXG4gICAgICAgIGlmIChvcHRpb25zLmRpc3BsYXlOYW1lc0xvY2FsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2V0RGlzcGxheU5hbWVzTG9jYWxlKG9wdGlvbnMuZGlzcGxheU5hbWVzTG9jYWxlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgnZGlzcGxheU5hbWVzTG9jYWxlJyBpbiBvcHRpb25zKSB7IC8vIENoZWNrIGZvciB1bmRlZmluZWRcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5jbGVhckRpc3BsYXlOYW1lc0xvY2FsZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLm1heFJlc3VsdHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNldE1heFJlc3VsdHMob3B0aW9ucy5tYXhSZXN1bHRzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgnbWF4UmVzdWx0cycgaW4gb3B0aW9ucykgeyAvLyBDaGVjayBmb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuY2xlYXJNYXhSZXN1bHRzKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuc2NvcmVUaHJlc2hvbGQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNldFNjb3JlVGhyZXNob2xkKG9wdGlvbnMuc2NvcmVUaHJlc2hvbGQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCdzY29yZVRocmVzaG9sZCcgaW4gb3B0aW9ucykgeyAvLyBDaGVjayBmb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuY2xlYXJTY29yZVRocmVzaG9sZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmNhdGVnb3J5QWxsb3dsaXN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zZXRDYXRlZ29yeUFsbG93bGlzdExpc3Qob3B0aW9ucy5jYXRlZ29yeUFsbG93bGlzdCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoJ2NhdGVnb3J5QWxsb3dsaXN0JyBpbiBvcHRpb25zKSB7IC8vIENoZWNrIGZvciB1bmRlZmluZWRcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5jbGVhckNhdGVnb3J5QWxsb3dsaXN0TGlzdCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmNhdGVnb3J5RGVueWxpc3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNldENhdGVnb3J5RGVueWxpc3RMaXN0KG9wdGlvbnMuY2F0ZWdvcnlEZW55bGlzdCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoJ2NhdGVnb3J5RGVueWxpc3QnIGluIG9wdGlvbnMpIHsgLy8gQ2hlY2sgZm9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmNsZWFyQ2F0ZWdvcnlEZW55bGlzdExpc3QoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZnJlc2hHcmFwaCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBvYmplY3QgZGV0ZWN0aW9uIG9uIHRoZSBwcm92aWRlZCBzaW5nbGUgaW1hZ2UgYW5kIHdhaXRzXG4gICAgICogc3luY2hyb25vdXNseSBmb3IgdGhlIHJlc3BvbnNlLlxuICAgICAqIEBwYXJhbSBpbWFnZVNvdXJjZSBBbiBpbWFnZSBzb3VyY2UgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0gdGltZXN0YW1wIFRoZSB0aW1lc3RhbXAgb2YgdGhlIGN1cnJlbnQgZnJhbWUsIGluIG1zLiBJZiBub3RcbiAgICAgKiAgICBwcm92aWRlZCwgZGVmYXVsdHMgdG8gYHBlcmZvcm1hbmNlLm5vdygpYC5cbiAgICAgKiBAcmV0dXJuIFRoZSBsaXN0IG9mIGRldGVjdGVkIG9iamVjdHNcbiAgICAgKi9cbiAgICBkZXRlY3QoaW1hZ2VTb3VyY2UsIHRpbWVzdGFtcCkge1xuICAgICAgICAvLyBHZXQgZGV0ZWN0aW9ucyBieSBydW5uaW5nIG91ciBNZWRpYVBpcGUgZ3JhcGguXG4gICAgICAgIHRoaXMuZGV0ZWN0aW9ucyA9IFtdO1xuICAgICAgICB0aGlzLmFkZEdwdUJ1ZmZlckFzSW1hZ2VUb1N0cmVhbShpbWFnZVNvdXJjZSwgSU5QVVRfU1RSRUFNLCB0aW1lc3RhbXAgIT09IG51bGwgJiYgdGltZXN0YW1wICE9PSB2b2lkIDAgPyB0aW1lc3RhbXAgOiBwZXJmb3JtYW5jZS5ub3coKSk7XG4gICAgICAgIHRoaXMuZmluaXNoUHJvY2Vzc2luZygpO1xuICAgICAgICByZXR1cm4gWy4uLnRoaXMuZGV0ZWN0aW9uc107XG4gICAgfVxuICAgIC8qKiBDb252ZXJ0cyByYXcgZGF0YSBpbnRvIGEgRGV0ZWN0aW9uLCBhbmQgYWRkcyBpdCB0byBvdXIgZGV0ZWN0aW9uIGxpc3QuICovXG4gICAgYWRkSnNPYmplY3REZXRlY3Rpb25zKGRhdGEpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaDtcbiAgICAgICAgZm9yIChjb25zdCBiaW5hcnlQcm90byBvZiBkYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBkZXRlY3Rpb25Qcm90byA9IGRldGVjdGlvbl9wYl8xLkRldGVjdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeShiaW5hcnlQcm90byk7XG4gICAgICAgICAgICBjb25zdCBzY29yZXMgPSBkZXRlY3Rpb25Qcm90by5nZXRTY29yZUxpc3QoKTtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ZXMgPSBkZXRlY3Rpb25Qcm90by5nZXRMYWJlbElkTGlzdCgpO1xuICAgICAgICAgICAgY29uc3QgbGFiZWxzID0gZGV0ZWN0aW9uUHJvdG8uZ2V0TGFiZWxMaXN0KCk7XG4gICAgICAgICAgICBjb25zdCBkaXNwbGF5TmFtZXMgPSBkZXRlY3Rpb25Qcm90by5nZXREaXNwbGF5TmFtZUxpc3QoKTtcbiAgICAgICAgICAgIGNvbnN0IGRldGVjdGlvbiA9IHsgY2F0ZWdvcmllczogW10gfTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2NvcmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZGV0ZWN0aW9uLmNhdGVnb3JpZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHNjb3JlOiBzY29yZXNbaV0sXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiAoX2EgPSBpbmRleGVzW2ldKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBERUZBVUxUX0NBVEVHT1JZX0lOREVYLFxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeU5hbWU6IChfYiA9IGxhYmVsc1tpXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJycsXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAoX2MgPSBkaXNwbGF5TmFtZXNbaV0pICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6ICcnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYm91bmRpbmdCb3ggPSAoX2QgPSBkZXRlY3Rpb25Qcm90by5nZXRMb2NhdGlvbkRhdGEoKSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmdldEJvdW5kaW5nQm94KCk7XG4gICAgICAgICAgICBpZiAoYm91bmRpbmdCb3gpIHtcbiAgICAgICAgICAgICAgICBkZXRlY3Rpb24uYm91bmRpbmdCb3ggPSB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpblg6IChfZSA9IGJvdW5kaW5nQm94LmdldFhtaW4oKSkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogMCxcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luWTogKF9mID0gYm91bmRpbmdCb3guZ2V0WW1pbigpKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiAwLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogKF9nID0gYm91bmRpbmdCb3guZ2V0V2lkdGgoKSkgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogMCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAoX2ggPSBib3VuZGluZ0JveC5nZXRIZWlnaHQoKSkgIT09IG51bGwgJiYgX2ggIT09IHZvaWQgMCA/IF9oIDogMFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRldGVjdGlvbnMucHVzaChkZXRlY3Rpb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBVcGRhdGVzIHRoZSBNZWRpYVBpcGUgZ3JhcGggY29uZmlndXJhdGlvbi4gKi9cbiAgICByZWZyZXNoR3JhcGgoKSB7XG4gICAgICAgIGNvbnN0IGdyYXBoQ29uZmlnID0gbmV3IGNhbGN1bGF0b3JfcGJfMS5DYWxjdWxhdG9yR3JhcGhDb25maWcoKTtcbiAgICAgICAgZ3JhcGhDb25maWcuYWRkSW5wdXRTdHJlYW0oSU5QVVRfU1RSRUFNKTtcbiAgICAgICAgZ3JhcGhDb25maWcuYWRkT3V0cHV0U3RyZWFtKERFVEVDVElPTlNfU1RSRUFNKTtcbiAgICAgICAgY29uc3QgY2FsY3VsYXRvck9wdGlvbnMgPSBuZXcgY2FsY3VsYXRvcl9vcHRpb25zX3BiXzEuQ2FsY3VsYXRvck9wdGlvbnMoKTtcbiAgICAgICAgY2FsY3VsYXRvck9wdGlvbnMuc2V0RXh0ZW5zaW9uKG9iamVjdF9kZXRlY3Rvcl9vcHRpb25zX3BiXzEuT2JqZWN0RGV0ZWN0b3JPcHRpb25zLmV4dCwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgY29uc3QgZGV0ZWN0b3JOb2RlID0gbmV3IGNhbGN1bGF0b3JfcGJfMS5DYWxjdWxhdG9yR3JhcGhDb25maWcuTm9kZSgpO1xuICAgICAgICBkZXRlY3Rvck5vZGUuc2V0Q2FsY3VsYXRvcihPQkpFQ1RfREVURUNUT1JfR1JBUEgpO1xuICAgICAgICBkZXRlY3Rvck5vZGUuYWRkSW5wdXRTdHJlYW0oJ0lNQUdFOicgKyBJTlBVVF9TVFJFQU0pO1xuICAgICAgICBkZXRlY3Rvck5vZGUuYWRkT3V0cHV0U3RyZWFtKCdERVRFQ1RJT05TOicgKyBERVRFQ1RJT05TX1NUUkVBTSk7XG4gICAgICAgIGRldGVjdG9yTm9kZS5zZXRPcHRpb25zKGNhbGN1bGF0b3JPcHRpb25zKTtcbiAgICAgICAgZ3JhcGhDb25maWcuYWRkTm9kZShkZXRlY3Rvck5vZGUpO1xuICAgICAgICB0aGlzLmF0dGFjaFByb3RvVmVjdG9yTGlzdGVuZXIoREVURUNUSU9OU19TVFJFQU0sIGJpbmFyeVByb3RvID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWRkSnNPYmplY3REZXRlY3Rpb25zKGJpbmFyeVByb3RvKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGJpbmFyeUdyYXBoID0gZ3JhcGhDb25maWcuc2VyaWFsaXplQmluYXJ5KCk7XG4gICAgICAgIHRoaXMuc2V0R3JhcGgobmV3IFVpbnQ4QXJyYXkoYmluYXJ5R3JhcGgpLCAvKiBpc0JpbmFyeT0gKi8gdHJ1ZSk7XG4gICAgfVxufVxuZXhwb3J0cy5PYmplY3REZXRlY3RvciA9IE9iamVjdERldGVjdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYjJKcVpXTjBYMlJsZEdWamRHOXlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2TGk0dkxpNHZMaTR2TGk0dkxpNHZMaTR2YldWa2FXRndhWEJsTDNSaGMydHpMM2RsWWk5MmFYTnBiMjR2YjJKcVpXTjBYMlJsZEdWamRHOXlMMjlpYW1WamRGOWtaWFJsWTNSdmNpNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN096czdPenM3T3pzN096czdPMGRCWTBjN096dEJRVVZJTEhWRlFVRXdSVHRCUVVNeFJTeDFSa0ZCT0VVN1FVRkRPVVVzTmtWQlFYVkdPMEZCUTNaR0xEWklRVUZwU2p0QlFVTnFTaXd5UmtGQmJVYzdRVUZEYmtjc2QwVkJRV3RGTzBGQlJXeEZMSGRHUVVFMlJ6dEJRVTAzUnl4TlFVRk5MRmxCUVZrc1IwRkJSeXhwUWtGQmFVSXNRMEZCUXp0QlFVTjJReXhOUVVGTkxHbENRVUZwUWl4SFFVRkhMRmxCUVZrc1EwRkJRenRCUVVOMlF5eE5RVUZOTEhGQ1FVRnhRaXhIUVVGSExEUkRRVUUwUXl4RFFVRkRPMEZCUlRORkxFMUJRVTBzYzBKQlFYTkNMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03UVVGSmJFTXNkVVJCUVhWRU8wRkJRM1pFTERCRFFVRXdRenRCUVVVeFF5d3lRMEZCTWtNN1FVRkRNME1zVFVGQllTeGpRVUZsTEZOQlFWRXNkMEpCUVZVN1NVRkJPVU03TzFGQlExVXNaVUZCVlN4SFFVRm5RaXhGUVVGRkxFTkJRVU03VVVGRGNFSXNXVUZCVHl4SFFVRkhMRWxCUVVrc2EwUkJRVEJDTEVWQlFVVXNRMEZCUXp0SlFUSk1PVVFzUTBGQlF6dEpRWHBNUXpzN096czdPenM3VDBGUlJ6dEpRVU5JTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc2FVSkJRV2xDTEVOQlF6RkNMR2xDUVVGdlF5eEZRVU53UXl4eFFrRkJORU03VVVGRE9VTXNiMFJCUVc5RU8xRkJRM0JFTEUxQlFVMHNWMEZCVnl4SFFVRm5RanRaUVVNdlFpeFZRVUZWTzJkQ1FVTlNMREpEUVVFeVF6dG5Ra0ZETTBNc1QwRkJUeXhwUWtGQmFVSXNRMEZCUXl4alFVRmpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU03V1VGRGNrUXNRMEZCUXp0VFFVTkdMRU5CUVVNN1VVRkZSaXhOUVVGTkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEVsQlFVRXNkVU5CUVd0Q0xFVkJRM0pETEdOQlFXTXNSVUZCUlN4cFFrRkJhVUlzUTBGQlF5eGpRVUZqTzFGQlEyaEVMSGRDUVVGM1FpeERRVUZETEZOQlFWTTdVVUZEYkVNc1pVRkJaU3hEUVVGRExGTkJRVk1zUlVGQlJTeFhRVUZYTEVOQlFVTXNRMEZCUXp0UlFVTTFReXhOUVVGTkxGRkJRVkVzUTBGQlF5eFZRVUZWTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zUTBGQlF6dFJRVU5xUkN4UFFVRlBMRkZCUVZFc1EwRkJRenRKUVVOc1FpeERRVUZETzBsQlJVUTdPenM3T3p0UFFVMUhPMGxCUTBnc1RVRkJUU3hEUVVGRExIRkNRVUZ4UWl4RFFVTjRRaXhwUWtGQmIwTXNSVUZEY0VNc1owSkJRVFJDTzFGQlF6bENMRTlCUVU4c1kwRkJZeXhEUVVGRExHbENRVUZwUWl4RFFVTnVReXhwUWtGQmFVSXNSVUZCUlN4RlFVRkRMRmRCUVZjc1JVRkJSU3hGUVVGRExHZENRVUZuUWl4RlFVRkRMRVZCUVVNc1EwRkJReXhEUVVGRE8wbEJRelZFTEVOQlFVTTdTVUZGUkRzN096czdPMDlCVFVjN1NVRkRTQ3hOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEcxQ1FVRnRRaXhEUVVNMVFpeHBRa0ZCYjBNc1JVRkRjRU1zWTBGQmMwSTdVVUZEZUVJc1RVRkJUU3hSUVVGUkxFZEJRVWNzVFVGQlRTeExRVUZMTEVOQlFVTXNZMEZCWXl4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRGVFUXNUVUZCVFN4VFFVRlRMRWRCUVVjc1RVRkJUU3hSUVVGUkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTTdVVUZETDBNc1QwRkJUeXhqUVVGakxFTkJRVU1zY1VKQlFYRkNMRU5CUTNaRExHbENRVUZwUWl4RlFVRkZMRWxCUVVrc1ZVRkJWU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEY0VRc1EwRkJRenRKUVVWRU96czdPenM3T3p0UFFWRkhPMGxCUTBnc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF5eFBRVUU0UWp0UlFVTTNReXhKUVVGSkxFOUJRVThzUTBGQlF5eFhRVUZYTEVWQlFVVTdXVUZEZGtJc1RVRkJUU3huUWtGQlowSXNSMEZCUnl4TlFVRk5MRWxCUVVFc2QwTkJRWGxDTEVWQlEzQkVMRTlCUVU4c1EwRkJReXhYUVVGWExFVkJRVVVzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4alFVRmpMRVZCUVVVc1EwRkJReXhEUVVGRE8xbEJRM2hFTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1kwRkJZeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNN1UwRkRMME03VVVGRlJDeHJSVUZCYTBVN1VVRkRiRVVzYVVWQlFXbEZPMUZCUTJwRkxHVkJRV1U3VVVGRFppeEpRVUZKTEU5QlFVOHNRMEZCUXl4clFrRkJhMElzUzBGQlN5eFRRVUZUTEVWQlFVVTdXVUZETlVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhQUVVGUExFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJRenRUUVVOb1JUdGhRVUZOTEVsQlFVa3NiMEpCUVc5Q0xFbEJRVWtzVDBGQlR5eEZRVUZGTEVWQlFVY3NjMEpCUVhOQ08xbEJRMjVGTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc2RVSkJRWFZDTEVWQlFVVXNRMEZCUXp0VFFVTjRRenRSUVVWRUxFbEJRVWtzVDBGQlR5eERRVUZETEZWQlFWVXNTMEZCU3l4VFFVRlRMRVZCUVVVN1dVRkRjRU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4aFFVRmhMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzFOQlEyaEVPMkZCUVUwc1NVRkJTU3haUVVGWkxFbEJRVWtzVDBGQlR5eEZRVUZGTEVWQlFVY3NjMEpCUVhOQ08xbEJRek5FTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1pVRkJaU3hGUVVGRkxFTkJRVU03VTBGRGFFTTdVVUZGUkN4SlFVRkpMRTlCUVU4c1EwRkJReXhqUVVGakxFdEJRVXNzVTBGQlV5eEZRVUZGTzFsQlEzaERMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1QwRkJUeXhEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETzFOQlEzaEVPMkZCUVUwc1NVRkJTU3huUWtGQlowSXNTVUZCU1N4UFFVRlBMRVZCUVVVc1JVRkJSeXh6UWtGQmMwSTdXVUZETDBRc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eHRRa0ZCYlVJc1JVRkJSU3hEUVVGRE8xTkJRM0JETzFGQlJVUXNTVUZCU1N4UFFVRlBMRU5CUVVNc2FVSkJRV2xDTEV0QlFVc3NVMEZCVXl4RlFVRkZPMWxCUXpORExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zVDBGQlR5eERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVU03VTBGRGJFVTdZVUZCVFN4SlFVRkpMRzFDUVVGdFFpeEpRVUZKTEU5QlFVOHNSVUZCUlN4RlFVRkhMSE5DUVVGelFqdFpRVU5zUlN4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExEQkNRVUV3UWl4RlFVRkZMRU5CUVVNN1UwRkRNME03VVVGRlJDeEpRVUZKTEU5QlFVOHNRMEZCUXl4blFrRkJaMElzUzBGQlN5eFRRVUZUTEVWQlFVVTdXVUZETVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhQUVVGUExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJRenRUUVVOb1JUdGhRVUZOTEVsQlFVa3NhMEpCUVd0Q0xFbEJRVWtzVDBGQlR5eEZRVUZGTEVWQlFVY3NjMEpCUVhOQ08xbEJRMnBGTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc2VVSkJRWGxDTEVWQlFVVXNRMEZCUXp0VFFVTXhRenRSUVVWRUxFbEJRVWtzUTBGQlF5eFpRVUZaTEVWQlFVVXNRMEZCUXp0SlFVTjBRaXhEUVVGRE8wbEJSVVE3T3pzN096czdUMEZQUnp0SlFVTklMRTFCUVUwc1EwRkJReXhYUVVGM1FpeEZRVUZGTEZOQlFXdENPMUZCUTJwRUxHbEVRVUZwUkR0UlFVTnFSQ3hKUVVGSkxFTkJRVU1zVlVGQlZTeEhRVUZITEVWQlFVVXNRMEZCUXp0UlFVTnlRaXhKUVVGSkxFTkJRVU1zTWtKQlFUSkNMRU5CUXpWQ0xGZEJRVmNzUlVGQlJTeFpRVUZaTEVWQlFVVXNVMEZCVXl4aFFVRlVMRk5CUVZNc1kwRkJWQ3hUUVVGVExFZEJRVWtzVjBGQlZ5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRMMFFzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhGUVVGRkxFTkJRVU03VVVGRGVFSXNUMEZCVHl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBsQlF6bENMRU5CUVVNN1NVRkZSQ3cyUlVGQk5rVTdTVUZEY2tVc2NVSkJRWEZDTEVOQlFVTXNTVUZCYTBJN08xRkJRemxETEV0QlFVc3NUVUZCVFN4WFFVRlhMRWxCUVVrc1NVRkJTU3hGUVVGRk8xbEJRemxDTEUxQlFVMHNZMEZCWXl4SFFVRkhMSGRDUVVGakxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03V1VGRGNrVXNUVUZCVFN4TlFVRk5MRWRCUVVjc1kwRkJZeXhEUVVGRExGbEJRVmtzUlVGQlJTeERRVUZETzFsQlF6ZERMRTFCUVUwc1QwRkJUeXhIUVVGSExHTkJRV01zUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUXp0WlFVTm9SQ3hOUVVGTkxFMUJRVTBzUjBGQlJ5eGpRVUZqTEVOQlFVTXNXVUZCV1N4RlFVRkZMRU5CUVVNN1dVRkROME1zVFVGQlRTeFpRVUZaTEVkQlFVY3NZMEZCWXl4RFFVRkRMR3RDUVVGclFpeEZRVUZGTEVOQlFVTTdXVUZGZWtRc1RVRkJUU3hUUVVGVExFZEJRV01zUlVGQlF5eFZRVUZWTEVWQlFVVXNSVUZCUlN4RlFVRkRMRU5CUVVNN1dVRkRPVU1zUzBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1owSkJRM1JETEZOQlFWTXNRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRE8yOUNRVU40UWl4TFFVRkxMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZEYUVJc1MwRkJTeXhGUVVGRkxFMUJRVUVzVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4dFEwRkJTU3h6UWtGQmMwSTdiMEpCUXpORExGbEJRVmtzUlVGQlJTeE5RVUZCTEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc2JVTkJRVWtzUlVGQlJUdHZRa0ZETjBJc1YwRkJWeXhGUVVGRkxFMUJRVUVzV1VGQldTeERRVUZETEVOQlFVTXNRMEZCUXl4dFEwRkJTU3hGUVVGRk8ybENRVU51UXl4RFFVRkRMRU5CUVVNN1lVRkRTanRaUVVWRUxFMUJRVTBzVjBGQlZ5eEhRVUZITEUxQlFVRXNZMEZCWXl4RFFVRkRMR1ZCUVdVc1JVRkJSU3d3UTBGQlJTeGpRVUZqTEVWQlFVVXNRMEZCUXp0WlFVTjJSU3hKUVVGSkxGZEJRVmNzUlVGQlJUdG5Ra0ZEWml4VFFVRlRMRU5CUVVNc1YwRkJWeXhIUVVGSE8yOUNRVU4wUWl4UFFVRlBMRVZCUVVVc1RVRkJRU3hYUVVGWExFTkJRVU1zVDBGQlR5eEZRVUZGTEcxRFFVRkpMRU5CUVVNN2IwSkJRMjVETEU5QlFVOHNSVUZCUlN4TlFVRkJMRmRCUVZjc1EwRkJReXhQUVVGUExFVkJRVVVzYlVOQlFVa3NRMEZCUXp0dlFrRkRia01zUzBGQlN5eEZRVUZGTEUxQlFVRXNWMEZCVnl4RFFVRkRMRkZCUVZFc1JVRkJSU3h0UTBGQlNTeERRVUZETzI5Q1FVTnNReXhOUVVGTkxFVkJRVVVzVFVGQlFTeFhRVUZYTEVOQlFVTXNVMEZCVXl4RlFVRkZMRzFEUVVGSkxFTkJRVU03YVVKQlEzSkRMRU5CUVVNN1lVRkRTRHRaUVVWRUxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8xTkJRMnBETzBsQlEwZ3NRMEZCUXp0SlFVVkVMR2xFUVVGcFJEdEpRVU42UXl4WlFVRlpPMUZCUTJ4Q0xFMUJRVTBzVjBGQlZ5eEhRVUZITEVsQlFVa3NjVU5CUVhGQ0xFVkJRVVVzUTBGQlF6dFJRVU5vUkN4WFFVRlhMRU5CUVVNc1kwRkJZeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzFGQlEzcERMRmRCUVZjc1EwRkJReXhsUVVGbExFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJRenRSUVVVdlF5eE5RVUZOTEdsQ1FVRnBRaXhIUVVGSExFbEJRVWtzZVVOQlFXbENMRVZCUVVVc1EwRkJRenRSUVVOc1JDeHBRa0ZCYVVJc1EwRkJReXhaUVVGWkxFTkJRekZDTEd0RVFVRXdRaXhEUVVGRExFZEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1VVRkZiRVFzVFVGQlRTeFpRVUZaTEVkQlFVY3NTVUZCU1N4eFEwRkJjVUlzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0UlFVTjBSQ3haUVVGWkxFTkJRVU1zWVVGQllTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFTkJRVU03VVVGRGJFUXNXVUZCV1N4RFFVRkRMR05CUVdNc1EwRkJReXhSUVVGUkxFZEJRVWNzV1VGQldTeERRVUZETEVOQlFVTTdVVUZEY2tRc1dVRkJXU3hEUVVGRExHVkJRV1VzUTBGQlF5eGhRVUZoTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU1zUTBGQlF6dFJRVU5vUlN4WlFVRlpMRU5CUVVNc1ZVRkJWU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1VVRkZNME1zVjBGQlZ5eERRVUZETEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRenRSUVVWc1F5eEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zYVVKQlFXbENMRVZCUVVVc1YwRkJWeXhEUVVGRExFVkJRVVU3V1VGRE9VUXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMUZCUXpGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlJVZ3NUVUZCVFN4WFFVRlhMRWRCUVVjc1YwRkJWeXhEUVVGRExHVkJRV1VzUlVGQlJTeERRVUZETzFGQlEyeEVMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeFZRVUZWTEVOQlFVTXNWMEZCVnl4RFFVRkRMRVZCUVVVc1pVRkJaU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBsQlEyNUZMRU5CUVVNN1EwRkRSanRCUVRkTVJDeDNRMEUyVEVNaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREl5SUZSb1pTQk5aV1JwWVZCcGNHVWdRWFYwYUc5eWN5NGdRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjYmlBcVhHNGdLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4dUlDb2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaU0IzYVhSb0lIUm9aU0JNYVdObGJuTmxMbHh1SUNvZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0FnSUdoMGRIQTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh1SUNwY2JpQXFJRlZ1YkdWemN5QnlaWEYxYVhKbFpDQmllU0JoY0hCc2FXTmhZbXhsSUd4aGR5QnZjaUJoWjNKbFpXUWdkRzhnYVc0Z2QzSnBkR2x1Wnl3Z2MyOW1kSGRoY21WY2JpQXFJR1JwYzNSeWFXSjFkR1ZrSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sSUdseklHUnBjM1J5YVdKMWRHVmtJRzl1SUdGdUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl4Y2JpQXFJRmRKVkVoUFZWUWdWMEZTVWtGT1ZFbEZVeUJQVWlCRFQwNUVTVlJKVDA1VElFOUdJRUZPV1NCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMbHh1SUNvZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1VnYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaRnh1SUNvZ2JHbHRhWFJoZEdsdmJuTWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2k5Y2JseHVhVzF3YjNKMElIdERZV3hqZFd4aGRHOXlSM0poY0doRGIyNW1hV2Q5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDJaeVlXMWxkMjl5YXk5allXeGpkV3hoZEc5eVgzQmlKenRjYm1sdGNHOXlkQ0I3UTJGc1kzVnNZWFJ2Y2s5d2RHbHZibk45SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDJaeVlXMWxkMjl5YXk5allXeGpkV3hoZEc5eVgyOXdkR2x2Ym5OZmNHSW5PMXh1YVcxd2IzSjBJSHRFWlhSbFkzUnBiMjRnWVhNZ1JHVjBaV04wYVc5dVVISnZkRzk5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDJaeVlXMWxkMjl5YXk5bWIzSnRZWFJ6TDJSbGRHVmpkR2x2Ymw5d1lpYzdYRzVwYlhCdmNuUWdlMDlpYW1WamRFUmxkR1ZqZEc5eVQzQjBhVzl1Y3lCaGN5QlBZbXBsWTNSRVpYUmxZM1J2Y2s5d2RHbHZibk5RY205MGIzMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZkR0Z6YTNNdlkyTXZkbWx6YVc5dUwyOWlhbVZqZEY5a1pYUmxZM1J2Y2k5d2NtOTBieTl2WW1wbFkzUmZaR1YwWldOMGIzSmZiM0IwYVc5dWMxOXdZaWM3WEc1cGJYQnZjblFnZTJOdmJuWmxjblJDWVhObFQzQjBhVzl1YzFSdlVISnZkRzk5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNSaGMydHpMM2RsWWk5amIyMXdiMjVsYm5SekwzQnliMk5sYzNOdmNuTXZZbUZ6WlY5dmNIUnBiMjV6Snp0Y2JtbHRjRzl5ZENCN1ZHRnphMUoxYm01bGNuMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZkR0Z6YTNNdmQyVmlMMk52Y21VdmRHRnphMTl5ZFc1dVpYSW5PMXh1YVcxd2IzSjBJSHRYWVhOdFRHOWhaR1Z5VDNCMGFXOXVjMzBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2ZEdGemEzTXZkMlZpTDJOdmNtVXZkMkZ6YlY5c2IyRmtaWEpmYjNCMGFXOXVjeWM3WEc1cGJYQnZjblFnZTJOeVpXRjBaVTFsWkdsaFVHbHdaVXhwWWl3Z1JtbHNaVXh2WTJGMGIzSXNJRWx0WVdkbFUyOTFjbU5sZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5M1pXSXZaM0poY0doZmNuVnVibVZ5TDNkaGMyMWZiV1ZrYVdGd2FYQmxYMnhwWWljN1hHNHZMeUJRYkdGalpXaHZiR1JsY2lCbWIzSWdhVzUwWlhKdVlXd2daR1Z3Wlc1a1pXNWplU0J2YmlCMGNuVnpkR1ZrSUhKbGMyOTFjbU5sSUhWeWJGeHVYRzVwYlhCdmNuUWdlMDlpYW1WamRFUmxkR1ZqZEc5eVQzQjBhVzl1YzMwZ1puSnZiU0FuTGk5dlltcGxZM1JmWkdWMFpXTjBiM0pmYjNCMGFXOXVjeWM3WEc1cGJYQnZjblFnZTBSbGRHVmpkR2x2Ym4wZ1puSnZiU0FuTGk5dlltcGxZM1JmWkdWMFpXTjBiM0pmY21WemRXeDBKenRjYmx4dVkyOXVjM1FnU1U1UVZWUmZVMVJTUlVGTklEMGdKMmx1Y0hWMFgyWnlZVzFsWDJkd2RTYzdYRzVqYjI1emRDQkVSVlJGUTFSSlQwNVRYMU5VVWtWQlRTQTlJQ2RrWlhSbFkzUnBiMjV6Snp0Y2JtTnZibk4wSUU5Q1NrVkRWRjlFUlZSRlExUlBVbDlIVWtGUVNDQTlJQ2R0WldScFlYQnBjR1V1ZEdGemEzTXVkbWx6YVc5dUxrOWlhbVZqZEVSbGRHVmpkRzl5UjNKaGNHZ25PMXh1WEc1amIyNXpkQ0JFUlVaQlZVeFVYME5CVkVWSFQxSlpYMGxPUkVWWUlEMGdMVEU3WEc1Y2JtVjRjRzl5ZENCN1NXMWhaMlZUYjNWeVkyVjlPeUFnTHk4Z1ZYTmxaQ0JwYmlCMGFHVWdjSFZpYkdsaklFRlFTVnh1WEc0dkx5QlVhR1VnVDFOVElFcFRJRUZRU1NCa2IyVnpJRzV2ZENCemRYQndiM0owSUhSb1pTQmlkV2xzWkdWeUlIQmhkSFJsY200dVhHNHZMeUIwYzJ4cGJuUTZaR2x6WVdKc1pUcHFjM0JpTFhWelpTMWlkV2xzWkdWeUxYQmhkSFJsY201Y2JseHVMeW9xSUZCbGNtWnZjbTF6SUc5aWFtVmpkQ0JrWlhSbFkzUnBiMjRnYjI0Z2FXMWhaMlZ6TGlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUU5aWFtVmpkRVJsZEdWamRHOXlJR1Y0ZEdWdVpITWdWR0Z6YTFKMWJtNWxjaUI3WEc0Z0lIQnlhWFpoZEdVZ1pHVjBaV04wYVc5dWN6b2dSR1YwWldOMGFXOXVXMTBnUFNCYlhUdGNiaUFnY0hKcGRtRjBaU0J5WldGa2IyNXNlU0J2Y0hScGIyNXpJRDBnYm1WM0lFOWlhbVZqZEVSbGRHVmpkRzl5VDNCMGFXOXVjMUJ5YjNSdktDazdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbHVhWFJwWVd4cGVtVnpJSFJvWlNCWFlYTnRJSEoxYm5ScGJXVWdZVzVrSUdOeVpXRjBaWE1nWVNCdVpYY2diMkpxWldOMElHUmxkR1ZqZEc5eUlHWnliMjBnZEdobFhHNGdJQ0FxSUhCeWIzWnBaR1ZrSUc5d2RHbHZibk11WEc0Z0lDQXFJRUJ3WVhKaGJTQjNZWE50VEc5aFpHVnlUM0IwYVc5dWN5QkJJR052Ym1acFozVnlZWFJwYjI0Z2IySnFaV04wSUhSb1lYUWdjSEp2ZG1sa1pYTWdkR2hsSUd4dlkyRjBhVzl1WEc0Z0lDQXFJQ0FnSUNCdlppQjBhR1VnVjJGemJTQmlhVzVoY25rZ1lXNWtJR2wwY3lCc2IyRmtaWEl1WEc0Z0lDQXFJRUJ3WVhKaGJTQnZZbXBsWTNSRVpYUmxZM1J2Y2s5d2RHbHZibk1nVkdobElHOXdkR2x2Ym5NZ1ptOXlJSFJvWlNCUFltcGxZM1FnUkdWMFpXTjBiM0l1SUU1dmRHVWdkR2hoZEZ4dUlDQWdLaUFnSUNBZ1pXbDBhR1Z5SUdFZ2NHRjBhQ0IwYnlCMGFHVWdiVzlrWld3Z1lYTnpaWFFnYjNJZ1lTQnRiMlJsYkNCaWRXWm1aWElnYm1WbFpITWdkRzhnWW1WY2JpQWdJQ29nSUNBZ0lIQnliM1pwWkdWa0lDaDJhV0VnWUdKaGMyVlBjSFJwYjI1ellDa3VYRzRnSUNBcUwxeHVJQ0J6ZEdGMGFXTWdZWE41Ym1NZ1kzSmxZWFJsUm5KdmJVOXdkR2x2Ym5Nb1hHNGdJQ0FnSUNCM1lYTnRURzloWkdWeVQzQjBhVzl1Y3pvZ1YyRnpiVXh2WVdSbGNrOXdkR2x2Ym5Nc1hHNGdJQ0FnSUNCdlltcGxZM1JFWlhSbFkzUnZjazl3ZEdsdmJuTTZJRTlpYW1WamRFUmxkR1ZqZEc5eVQzQjBhVzl1Y3lrNklGQnliMjFwYzJVOFQySnFaV04wUkdWMFpXTjBiM0krSUh0Y2JpQWdJQ0F2THlCRGNtVmhkR1VnWVNCbWFXeGxJR3h2WTJGMGIzSWdZbUZ6WldRZ2IyNGdkR2hsSUd4dllXUmxjaUJ2Y0hScGIyNXpYRzRnSUNBZ1kyOXVjM1FnWm1sc1pVeHZZMkYwYjNJNklFWnBiR1ZNYjJOaGRHOXlJRDBnZTF4dUlDQWdJQ0FnYkc5allYUmxSbWxzWlNncElIdGNiaUFnSUNBZ0lDQWdMeThnVkdobElHOXViSGtnWm1sc1pTQjNaU0JzYjJGa0lHbHpJSFJvWlNCWFlYTnRJR0pwYm1GeWVWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2QyRnpiVXh2WVdSbGNrOXdkR2x2Ym5NdWQyRnpiVUpwYm1GeWVWQmhkR2d1ZEc5VGRISnBibWNvS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnWTI5dWMzUWdaR1YwWldOMGIzSWdQU0JoZDJGcGRDQmpjbVZoZEdWTlpXUnBZVkJwY0dWTWFXSW9YRzRnSUNBZ0lDQWdJRTlpYW1WamRFUmxkR1ZqZEc5eUxDQjNZWE50VEc5aFpHVnlUM0IwYVc5dWN5NTNZWE50VEc5aFpHVnlVR0YwYUN4Y2JpQWdJQ0FnSUNBZ0x5b2dZWE56WlhSTWIyRmtaWEpUWTNKcGNIUTlJQ292SUhWdVpHVm1hVzVsWkN4Y2JpQWdJQ0FnSUNBZ0x5b2daMnhEWVc1MllYTTlJQ292SUhWdVpHVm1hVzVsWkN3Z1ptbHNaVXh2WTJGMGIzSXBPMXh1SUNBZ0lHRjNZV2wwSUdSbGRHVmpkRzl5TG5ObGRFOXdkR2x2Ym5Nb2IySnFaV04wUkdWMFpXTjBiM0pQY0hScGIyNXpLVHRjYmlBZ0lDQnlaWFIxY200Z1pHVjBaV04wYjNJN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dTVzVwZEdsaGJHbDZaWE1nZEdobElGZGhjMjBnY25WdWRHbHRaU0JoYm1RZ1kzSmxZWFJsY3lCaElHNWxkeUJ2WW1wbFkzUWdaR1YwWldOMGIzSWdZbUZ6WldRZ2IyNGdkR2hsWEc0Z0lDQXFJSEJ5YjNacFpHVmtJRzF2WkdWc0lHRnpjMlYwSUdKMVptWmxjaTVjYmlBZ0lDb2dRSEJoY21GdElIZGhjMjFNYjJGa1pYSlBjSFJwYjI1eklFRWdZMjl1Wm1sbmRYSmhkR2x2YmlCdlltcGxZM1FnZEdoaGRDQndjbTkyYVdSbGN5QjBhR1VnYkc5allYUnBiMjVjYmlBZ0lDb2dJQ0FnSUc5bUlIUm9aU0JYWVhOdElHSnBibUZ5ZVNCaGJtUWdhWFJ6SUd4dllXUmxjaTVjYmlBZ0lDb2dRSEJoY21GdElHMXZaR1ZzUVhOelpYUkNkV1ptWlhJZ1FTQmlhVzVoY25rZ2NtVndjbVZ6Wlc1MFlYUnBiMjRnYjJZZ2RHaGxJRzF2WkdWc0xseHVJQ0FnS2k5Y2JpQWdjM1JoZEdsaklHTnlaV0YwWlVaeWIyMU5iMlJsYkVKMVptWmxjaWhjYmlBZ0lDQWdJSGRoYzIxTWIyRmtaWEpQY0hScGIyNXpPaUJYWVhOdFRHOWhaR1Z5VDNCMGFXOXVjeXhjYmlBZ0lDQWdJRzF2WkdWc1FYTnpaWFJDZFdabVpYSTZJRlZwYm5RNFFYSnlZWGtwT2lCUWNtOXRhWE5sUEU5aWFtVmpkRVJsZEdWamRHOXlQaUI3WEc0Z0lDQWdjbVYwZFhKdUlFOWlhbVZqZEVSbGRHVmpkRzl5TG1OeVpXRjBaVVp5YjIxUGNIUnBiMjV6S0Z4dUlDQWdJQ0FnSUNCM1lYTnRURzloWkdWeVQzQjBhVzl1Y3l3Z2UySmhjMlZQY0hScGIyNXpPaUI3Ylc5a1pXeEJjM05sZEVKMVptWmxjbjE5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkpibWwwYVdGc2FYcGxjeUIwYUdVZ1YyRnpiU0J5ZFc1MGFXMWxJR0Z1WkNCamNtVmhkR1Z6SUdFZ2JtVjNJRzlpYW1WamRDQmtaWFJsWTNSdmNpQmlZWE5sWkNCdmJpQjBhR1ZjYmlBZ0lDb2djR0YwYUNCMGJ5QjBhR1VnYlc5a1pXd2dZWE56WlhRdVhHNGdJQ0FxSUVCd1lYSmhiU0IzWVhOdFRHOWhaR1Z5VDNCMGFXOXVjeUJCSUdOdmJtWnBaM1Z5WVhScGIyNGdiMkpxWldOMElIUm9ZWFFnY0hKdmRtbGtaWE1nZEdobElHeHZZMkYwYVc5dVhHNGdJQ0FxSUNBZ0lDQnZaaUIwYUdVZ1YyRnpiU0JpYVc1aGNua2dZVzVrSUdsMGN5QnNiMkZrWlhJdVhHNGdJQ0FxSUVCd1lYSmhiU0J0YjJSbGJFRnpjMlYwVUdGMGFDQlVhR1VnY0dGMGFDQjBieUIwYUdVZ2JXOWtaV3dnWVhOelpYUXVYRzRnSUNBcUwxeHVJQ0J6ZEdGMGFXTWdZWE41Ym1NZ1kzSmxZWFJsUm5KdmJVMXZaR1ZzVUdGMGFDaGNiaUFnSUNBZ0lIZGhjMjFNYjJGa1pYSlBjSFJwYjI1ek9pQlhZWE50VEc5aFpHVnlUM0IwYVc5dWN5eGNiaUFnSUNBZ0lHMXZaR1ZzUVhOelpYUlFZWFJvT2lCemRISnBibWNwT2lCUWNtOXRhWE5sUEU5aWFtVmpkRVJsZEdWamRHOXlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2NtVnpjRzl1YzJVZ1BTQmhkMkZwZENCbVpYUmphQ2h0YjJSbGJFRnpjMlYwVUdGMGFDNTBiMU4wY21sdVp5Z3BLVHRjYmlBZ0lDQmpiMjV6ZENCbmNtRndhRVJoZEdFZ1BTQmhkMkZwZENCeVpYTndiMjV6WlM1aGNuSmhlVUoxWm1abGNpZ3BPMXh1SUNBZ0lISmxkSFZ5YmlCUFltcGxZM1JFWlhSbFkzUnZjaTVqY21WaGRHVkdjbTl0VFc5a1pXeENkV1ptWlhJb1hHNGdJQ0FnSUNBZ0lIZGhjMjFNYjJGa1pYSlBjSFJwYjI1ekxDQnVaWGNnVldsdWREaEJjbkpoZVNobmNtRndhRVJoZEdFcEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUWlhSeklHNWxkeUJ2Y0hScGIyNXpJR1p2Y2lCMGFHVWdiMkpxWldOMElHUmxkR1ZqZEc5eUxseHVJQ0FnS2x4dUlDQWdLaUJEWVd4c2FXNW5JR0J6WlhSUGNIUnBiMjV6S0NsZ0lIZHBkR2dnWVNCemRXSnpaWFFnYjJZZ2IzQjBhVzl1Y3lCdmJteDVJR0ZtWm1WamRITWdkR2h2YzJVZ2IzQjBhVzl1Y3k1Y2JpQWdJQ29nV1c5MUlHTmhiaUJ5WlhObGRDQmhiaUJ2Y0hScGIyNGdZbUZqYXlCMGJ5QnBkSE1nWkdWbVlYVnNkQ0IyWVd4MVpTQmllU0JsZUhCc2FXTnBkR3g1SUhObGRIUnBibWNnYVhSY2JpQWdJQ29nZEc4Z1lIVnVaR1ZtYVc1bFpHQXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0J2Y0hScGIyNXpJRlJvWlNCdmNIUnBiMjV6SUdadmNpQjBhR1VnYjJKcVpXTjBJR1JsZEdWamRHOXlMbHh1SUNBZ0tpOWNiaUFnWVhONWJtTWdjMlYwVDNCMGFXOXVjeWh2Y0hScGIyNXpPaUJQWW1wbFkzUkVaWFJsWTNSdmNrOXdkR2x2Ym5NcE9pQlFjbTl0YVhObFBIWnZhV1ErSUh0Y2JpQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1aVlYTmxUM0IwYVc5dWN5a2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ1ltRnpaVTl3ZEdsdmJuTlFjbTkwYnlBOUlHRjNZV2wwSUdOdmJuWmxjblJDWVhObFQzQjBhVzl1YzFSdlVISnZkRzhvWEc0Z0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1aVlYTmxUM0IwYVc5dWN5d2dkR2hwY3k1dmNIUnBiMjV6TG1kbGRFSmhjMlZQY0hScGIyNXpLQ2twTzF4dUlDQWdJQ0FnZEdocGN5NXZjSFJwYjI1ekxuTmxkRUpoYzJWUGNIUnBiMjV6S0dKaGMyVlBjSFJwYjI1elVISnZkRzhwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUU1dmRHVWdkR2hoZENCM1pTQm9ZWFpsSUhSdklITjFjSEJ2Y25RZ1ltOTBhQ0JLVTFCQ0lHRnVaQ0JRY205MGIySjFaa3BUTENCb1pXNWpaU0IzWlZ4dUlDQWdJQzh2SUdoaGRtVWdkRzhnWlhod2JHbGpiR2wwZVNCamJHVmhjaUIwYUdVZ2RtRnNkV1Z6SUdsdWMzUmxZV1FnYjJZZ2MyVjBkR2x1WnlCMGFHVnRJSFJ2WEc0Z0lDQWdMeThnWUhWdVpHVm1hVzVsWkdBdVhHNGdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdVpHbHpjR3hoZVU1aGJXVnpURzlqWVd4bElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUhSb2FYTXViM0IwYVc5dWN5NXpaWFJFYVhOd2JHRjVUbUZ0WlhOTWIyTmhiR1VvYjNCMGFXOXVjeTVrYVhOd2JHRjVUbUZ0WlhOTWIyTmhiR1VwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvSjJScGMzQnNZWGxPWVcxbGMweHZZMkZzWlNjZ2FXNGdiM0IwYVc5dWN5a2dleUFnTHk4Z1EyaGxZMnNnWm05eUlIVnVaR1ZtYVc1bFpGeHVJQ0FnSUNBZ2RHaHBjeTV2Y0hScGIyNXpMbU5zWldGeVJHbHpjR3hoZVU1aGJXVnpURzlqWVd4bEtDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLRzl3ZEdsdmJuTXViV0Y0VW1WemRXeDBjeUFoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQjBhR2x6TG05d2RHbHZibk11YzJWMFRXRjRVbVZ6ZFd4MGN5aHZjSFJwYjI1ekxtMWhlRkpsYzNWc2RITXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9KMjFoZUZKbGMzVnNkSE1uSUdsdUlHOXdkR2x2Ym5NcElIc2dJQzh2SUVOb1pXTnJJR1p2Y2lCMWJtUmxabWx1WldSY2JpQWdJQ0FnSUhSb2FYTXViM0IwYVc5dWN5NWpiR1ZoY2sxaGVGSmxjM1ZzZEhNb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9iM0IwYVc5dWN5NXpZMjl5WlZSb2NtVnphRzlzWkNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtOXdkR2x2Ym5NdWMyVjBVMk52Y21WVWFISmxjMmh2YkdRb2IzQjBhVzl1Y3k1elkyOXlaVlJvY21WemFHOXNaQ2s3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2duYzJOdmNtVlVhSEpsYzJodmJHUW5JR2x1SUc5d2RHbHZibk1wSUhzZ0lDOHZJRU5vWldOcklHWnZjaUIxYm1SbFptbHVaV1JjYmlBZ0lDQWdJSFJvYVhNdWIzQjBhVzl1Y3k1amJHVmhjbE5qYjNKbFZHaHlaWE5vYjJ4a0tDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVZMkYwWldkdmNubEJiR3h2ZDJ4cGMzUWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV2Y0hScGIyNXpMbk5sZEVOaGRHVm5iM0o1UVd4c2IzZHNhWE4wVEdsemRDaHZjSFJwYjI1ekxtTmhkR1ZuYjNKNVFXeHNiM2RzYVhOMEtUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tDZGpZWFJsWjI5eWVVRnNiRzkzYkdsemRDY2dhVzRnYjNCMGFXOXVjeWtnZXlBZ0x5OGdRMmhsWTJzZ1ptOXlJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lDQWdkR2hwY3k1dmNIUnBiMjV6TG1Oc1pXRnlRMkYwWldkdmNubEJiR3h2ZDJ4cGMzUk1hWE4wS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdVkyRjBaV2R2Y25sRVpXNTViR2x6ZENBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtOXdkR2x2Ym5NdWMyVjBRMkYwWldkdmNubEVaVzU1YkdsemRFeHBjM1FvYjNCMGFXOXVjeTVqWVhSbFoyOXllVVJsYm5sc2FYTjBLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLQ2RqWVhSbFoyOXllVVJsYm5sc2FYTjBKeUJwYmlCdmNIUnBiMjV6S1NCN0lDQXZMeUJEYUdWamF5Qm1iM0lnZFc1a1pXWnBibVZrWEc0Z0lDQWdJQ0IwYUdsekxtOXdkR2x2Ym5NdVkyeGxZWEpEWVhSbFoyOXllVVJsYm5sc2FYTjBUR2x6ZENncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVjbVZtY21WemFFZHlZWEJvS0NrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVR1Z5Wm05eWJYTWdiMkpxWldOMElHUmxkR1ZqZEdsdmJpQnZiaUIwYUdVZ2NISnZkbWxrWldRZ2MybHVaMnhsSUdsdFlXZGxJR0Z1WkNCM1lXbDBjMXh1SUNBZ0tpQnplVzVqYUhKdmJtOTFjMng1SUdadmNpQjBhR1VnY21WemNHOXVjMlV1WEc0Z0lDQXFJRUJ3WVhKaGJTQnBiV0ZuWlZOdmRYSmpaU0JCYmlCcGJXRm5aU0J6YjNWeVkyVWdkRzhnY0hKdlkyVnpjeTVjYmlBZ0lDb2dRSEJoY21GdElIUnBiV1Z6ZEdGdGNDQlVhR1VnZEdsdFpYTjBZVzF3SUc5bUlIUm9aU0JqZFhKeVpXNTBJR1p5WVcxbExDQnBiaUJ0Y3k0Z1NXWWdibTkwWEc0Z0lDQXFJQ0FnSUhCeWIzWnBaR1ZrTENCa1pXWmhkV3gwY3lCMGJ5QmdjR1Z5Wm05eWJXRnVZMlV1Ym05M0tDbGdMbHh1SUNBZ0tpQkFjbVYwZFhKdUlGUm9aU0JzYVhOMElHOW1JR1JsZEdWamRHVmtJRzlpYW1WamRITmNiaUFnSUNvdlhHNGdJR1JsZEdWamRDaHBiV0ZuWlZOdmRYSmpaVG9nU1cxaFoyVlRiM1Z5WTJVc0lIUnBiV1Z6ZEdGdGNEODZJRzUxYldKbGNpazZJRVJsZEdWamRHbHZibHRkSUh0Y2JpQWdJQ0F2THlCSFpYUWdaR1YwWldOMGFXOXVjeUJpZVNCeWRXNXVhVzVuSUc5MWNpQk5aV1JwWVZCcGNHVWdaM0poY0dndVhHNGdJQ0FnZEdocGN5NWtaWFJsWTNScGIyNXpJRDBnVzEwN1hHNGdJQ0FnZEdocGN5NWhaR1JIY0hWQ2RXWm1aWEpCYzBsdFlXZGxWRzlUZEhKbFlXMG9YRzRnSUNBZ0lDQWdJR2x0WVdkbFUyOTFjbU5sTENCSlRsQlZWRjlUVkZKRlFVMHNJSFJwYldWemRHRnRjQ0EvUHlCd1pYSm1iM0p0WVc1alpTNXViM2NvS1NrN1hHNGdJQ0FnZEdocGN5NW1hVzVwYzJoUWNtOWpaWE56YVc1bktDazdYRzRnSUNBZ2NtVjBkWEp1SUZzdUxpNTBhR2x6TG1SbGRHVmpkR2x2Ym5OZE8xeHVJQ0I5WEc1Y2JpQWdMeW9xSUVOdmJuWmxjblJ6SUhKaGR5QmtZWFJoSUdsdWRHOGdZU0JFWlhSbFkzUnBiMjRzSUdGdVpDQmhaR1J6SUdsMElIUnZJRzkxY2lCa1pYUmxZM1JwYjI0Z2JHbHpkQzRnS2k5Y2JpQWdjSEpwZG1GMFpTQmhaR1JLYzA5aWFtVmpkRVJsZEdWamRHbHZibk1vWkdGMFlUb2dWV2x1ZERoQmNuSmhlVnRkS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdabTl5SUNoamIyNXpkQ0JpYVc1aGNubFFjbTkwYnlCdlppQmtZWFJoS1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0JrWlhSbFkzUnBiMjVRY205MGJ5QTlJRVJsZEdWamRHbHZibEJ5YjNSdkxtUmxjMlZ5YVdGc2FYcGxRbWx1WVhKNUtHSnBibUZ5ZVZCeWIzUnZLVHRjYmlBZ0lDQWdJR052Ym5OMElITmpiM0psY3lBOUlHUmxkR1ZqZEdsdmJsQnliM1J2TG1kbGRGTmpiM0psVEdsemRDZ3BPMXh1SUNBZ0lDQWdZMjl1YzNRZ2FXNWtaWGhsY3lBOUlHUmxkR1ZqZEdsdmJsQnliM1J2TG1kbGRFeGhZbVZzU1dSTWFYTjBLQ2s3WEc0Z0lDQWdJQ0JqYjI1emRDQnNZV0psYkhNZ1BTQmtaWFJsWTNScGIyNVFjbTkwYnk1blpYUk1ZV0psYkV4cGMzUW9LVHRjYmlBZ0lDQWdJR052Ym5OMElHUnBjM0JzWVhsT1lXMWxjeUE5SUdSbGRHVmpkR2x2YmxCeWIzUnZMbWRsZEVScGMzQnNZWGxPWVcxbFRHbHpkQ2dwTzF4dVhHNGdJQ0FnSUNCamIyNXpkQ0JrWlhSbFkzUnBiMjQ2SUVSbGRHVmpkR2x2YmlBOUlIdGpZWFJsWjI5eWFXVnpPaUJiWFgwN1hHNGdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElITmpiM0psY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0JrWlhSbFkzUnBiMjR1WTJGMFpXZHZjbWxsY3k1d2RYTm9LSHRjYmlBZ0lDQWdJQ0FnSUNCelkyOXlaVG9nYzJOdmNtVnpXMmxkTEZ4dUlDQWdJQ0FnSUNBZ0lHbHVaR1Y0T2lCcGJtUmxlR1Z6VzJsZElEOC9JRVJGUmtGVlRGUmZRMEZVUlVkUFVsbGZTVTVFUlZnc1hHNGdJQ0FnSUNBZ0lDQWdZMkYwWldkdmNubE9ZVzFsT2lCc1lXSmxiSE5iYVYwZ1B6OGdKeWNzWEc0Z0lDQWdJQ0FnSUNBZ1pHbHpjR3hoZVU1aGJXVTZJR1JwYzNCc1lYbE9ZVzFsYzF0cFhTQS9QeUFuSnl4Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR052Ym5OMElHSnZkVzVrYVc1blFtOTRJRDBnWkdWMFpXTjBhVzl1VUhKdmRHOHVaMlYwVEc5allYUnBiMjVFWVhSaEtDay9MbWRsZEVKdmRXNWthVzVuUW05NEtDazdYRzRnSUNBZ0lDQnBaaUFvWW05MWJtUnBibWRDYjNncElIdGNiaUFnSUNBZ0lDQWdaR1YwWldOMGFXOXVMbUp2ZFc1a2FXNW5RbTk0SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJRzl5YVdkcGJsZzZJR0p2ZFc1a2FXNW5RbTk0TG1kbGRGaHRhVzRvS1NBL1B5QXdMRnh1SUNBZ0lDQWdJQ0FnSUc5eWFXZHBibGs2SUdKdmRXNWthVzVuUW05NExtZGxkRmx0YVc0b0tTQS9QeUF3TEZ4dUlDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lCaWIzVnVaR2x1WjBKdmVDNW5aWFJYYVdSMGFDZ3BJRDgvSURBc1hHNGdJQ0FnSUNBZ0lDQWdhR1ZwWjJoME9pQmliM1Z1WkdsdVowSnZlQzVuWlhSSVpXbG5hSFFvS1NBL1B5QXdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhSb2FYTXVaR1YwWldOMGFXOXVjeTV3ZFhOb0tHUmxkR1ZqZEdsdmJpazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdMeW9xSUZWd1pHRjBaWE1nZEdobElFMWxaR2xoVUdsd1pTQm5jbUZ3YUNCamIyNW1hV2QxY21GMGFXOXVMaUFxTDF4dUlDQndjbWwyWVhSbElISmxabkpsYzJoSGNtRndhQ2dwT2lCMmIybGtJSHRjYmlBZ0lDQmpiMjV6ZENCbmNtRndhRU52Ym1acFp5QTlJRzVsZHlCRFlXeGpkV3hoZEc5eVIzSmhjR2hEYjI1bWFXY29LVHRjYmlBZ0lDQm5jbUZ3YUVOdmJtWnBaeTVoWkdSSmJuQjFkRk4wY21WaGJTaEpUbEJWVkY5VFZGSkZRVTBwTzF4dUlDQWdJR2R5WVhCb1EyOXVabWxuTG1Ga1pFOTFkSEIxZEZOMGNtVmhiU2hFUlZSRlExUkpUMDVUWDFOVVVrVkJUU2s3WEc1Y2JpQWdJQ0JqYjI1emRDQmpZV3hqZFd4aGRHOXlUM0IwYVc5dWN5QTlJRzVsZHlCRFlXeGpkV3hoZEc5eVQzQjBhVzl1Y3lncE8xeHVJQ0FnSUdOaGJHTjFiR0YwYjNKUGNIUnBiMjV6TG5ObGRFVjRkR1Z1YzJsdmJpaGNiaUFnSUNBZ0lDQWdUMkpxWldOMFJHVjBaV04wYjNKUGNIUnBiMjV6VUhKdmRHOHVaWGgwTENCMGFHbHpMbTl3ZEdsdmJuTXBPMXh1WEc0Z0lDQWdZMjl1YzNRZ1pHVjBaV04wYjNKT2IyUmxJRDBnYm1WM0lFTmhiR04xYkdGMGIzSkhjbUZ3YUVOdmJtWnBaeTVPYjJSbEtDazdYRzRnSUNBZ1pHVjBaV04wYjNKT2IyUmxMbk5sZEVOaGJHTjFiR0YwYjNJb1QwSktSVU5VWDBSRlZFVkRWRTlTWDBkU1FWQklLVHRjYmlBZ0lDQmtaWFJsWTNSdmNrNXZaR1V1WVdSa1NXNXdkWFJUZEhKbFlXMG9KMGxOUVVkRk9pY2dLeUJKVGxCVlZGOVRWRkpGUVUwcE8xeHVJQ0FnSUdSbGRHVmpkRzl5VG05a1pTNWhaR1JQZFhSd2RYUlRkSEpsWVcwb0owUkZWRVZEVkVsUFRsTTZKeUFySUVSRlZFVkRWRWxQVGxOZlUxUlNSVUZOS1R0Y2JpQWdJQ0JrWlhSbFkzUnZjazV2WkdVdWMyVjBUM0IwYVc5dWN5aGpZV3hqZFd4aGRHOXlUM0IwYVc5dWN5azdYRzVjYmlBZ0lDQm5jbUZ3YUVOdmJtWnBaeTVoWkdST2IyUmxLR1JsZEdWamRHOXlUbTlrWlNrN1hHNWNiaUFnSUNCMGFHbHpMbUYwZEdGamFGQnliM1J2Vm1WamRHOXlUR2x6ZEdWdVpYSW9SRVZVUlVOVVNVOU9VMTlUVkZKRlFVMHNJR0pwYm1GeWVWQnliM1J2SUQwK0lIdGNiaUFnSUNBZ0lIUm9hWE11WVdSa1NuTlBZbXBsWTNSRVpYUmxZM1JwYjI1ektHSnBibUZ5ZVZCeWIzUnZLVHRjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJR052Ym5OMElHSnBibUZ5ZVVkeVlYQm9JRDBnWjNKaGNHaERiMjVtYVdjdWMyVnlhV0ZzYVhwbFFtbHVZWEo1S0NrN1hHNGdJQ0FnZEdocGN5NXpaWFJIY21Gd2FDaHVaWGNnVldsdWREaEJjbkpoZVNoaWFXNWhjbmxIY21Gd2FDa3NJQzhxSUdselFtbHVZWEo1UFNBcUx5QjBjblZsS1R0Y2JpQWdmVnh1ZlZ4dVhHNWNiaUpkZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMiBUaGUgTWVkaWFQaXBlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIEltYWdlIENsYXNzaWZpZXJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi4vLi4vLi4vdGFza3Mvd2ViL3Zpc2lvbi9pbWFnZV9jbGFzc2lmaWVyL2ltYWdlX2NsYXNzaWZpZXJfb3B0aW9uc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4uLy4uLy4uL3Rhc2tzL3dlYi92aXNpb24vaW1hZ2VfY2xhc3NpZmllci9pbWFnZV9jbGFzc2lmaWVyX3Jlc3VsdFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4uLy4uLy4uL3Rhc2tzL3dlYi92aXNpb24vaW1hZ2VfY2xhc3NpZmllci9pbWFnZV9jbGFzc2lmaWVyXCIpLCBleHBvcnRzKTtcbi8vIEdlc3R1cmUgUmVjb2duaXplclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuLi8uLi8uLi90YXNrcy93ZWIvdmlzaW9uL2dlc3R1cmVfcmVjb2duaXplci9nZXN0dXJlX3JlY29nbml6ZXJfb3B0aW9uc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4uLy4uLy4uL3Rhc2tzL3dlYi92aXNpb24vZ2VzdHVyZV9yZWNvZ25pemVyL2dlc3R1cmVfcmVjb2duaXplcl9yZXN1bHRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuLi8uLi8uLi90YXNrcy93ZWIvdmlzaW9uL2dlc3R1cmVfcmVjb2duaXplci9nZXN0dXJlX3JlY29nbml6ZXJcIiksIGV4cG9ydHMpO1xuLy8gT2JqZWN0IERldGVjdG9yXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4uLy4uLy4uL3Rhc2tzL3dlYi92aXNpb24vb2JqZWN0X2RldGVjdG9yL29iamVjdF9kZXRlY3Rvcl9vcHRpb25zXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi4vLi4vLi4vdGFza3Mvd2ViL3Zpc2lvbi9vYmplY3RfZGV0ZWN0b3Ivb2JqZWN0X2RldGVjdG9yX3Jlc3VsdFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4uLy4uLy4uL3Rhc2tzL3dlYi92aXNpb24vb2JqZWN0X2RldGVjdG9yL29iamVjdF9kZXRlY3RvclwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTh1TGk4dUxpOHVMaTh1TGk5dFpXUnBZWEJwY0dVdmRHRnphM012ZDJWaUwzWnBjMmx2Ymk5cGJtUmxlQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdPenM3T3pzN096czdPenM3TzBkQlkwYzdPenM3T3pzN096czdPenM3T3pzN1FVRkZTQ3h0UWtGQmJVSTdRVUZEYmtJc2MwZEJRVzlHTzBGQlEzQkdMSEZIUVVGdFJqdEJRVU51Uml3NFJrRkJORVU3UVVGRk5VVXNjVUpCUVhGQ08wRkJRM0pDTERCSFFVRjNSanRCUVVONFJpeDVSMEZCZFVZN1FVRkRka1lzYTBkQlFXZEdPMEZCUldoR0xHdENRVUZyUWp0QlFVTnNRaXh2UjBGQmEwWTdRVUZEYkVZc2JVZEJRV2xHTzBGQlEycEdMRFJHUVVFd1JTSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRMjl3ZVhKcFoyaDBJREl3TWpJZ1ZHaGxJRTFsWkdsaFVHbHdaU0JCZFhSb2IzSnpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aU0JjSWt4cFkyVnVjMlZjSWlrN1hHNGdLaUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlBcVhHNGdLaUFnSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVJQ29nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHVJQ29nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0Z0tpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0Z0tpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlBcUwxeHVYRzR2THlCSmJXRm5aU0JEYkdGemMybG1hV1Z5WEc1bGVIQnZjblFnS2lCbWNtOXRJQ2N1TGk4dUxpOHVMaTkwWVhOcmN5OTNaV0l2ZG1semFXOXVMMmx0WVdkbFgyTnNZWE56YVdacFpYSXZhVzFoWjJWZlkyeGhjM05wWm1sbGNsOXZjSFJwYjI1ekp6dGNibVY0Y0c5eWRDQXFJR1p5YjIwZ0p5NHVMeTR1THk0dUwzUmhjMnR6TDNkbFlpOTJhWE5wYjI0dmFXMWhaMlZmWTJ4aGMzTnBabWxsY2k5cGJXRm5aVjlqYkdGemMybG1hV1Z5WDNKbGMzVnNkQ2M3WEc1bGVIQnZjblFnS2lCbWNtOXRJQ2N1TGk4dUxpOHVMaTkwWVhOcmN5OTNaV0l2ZG1semFXOXVMMmx0WVdkbFgyTnNZWE56YVdacFpYSXZhVzFoWjJWZlkyeGhjM05wWm1sbGNpYzdYRzVjYmk4dklFZGxjM1IxY21VZ1VtVmpiMmR1YVhwbGNseHVaWGh3YjNKMElDb2dabkp2YlNBbkxpNHZMaTR2TGk0dmRHRnphM012ZDJWaUwzWnBjMmx2Ymk5blpYTjBkWEpsWDNKbFkyOW5ibWw2WlhJdloyVnpkSFZ5WlY5eVpXTnZaMjVwZW1WeVgyOXdkR2x2Ym5Nbk8xeHVaWGh3YjNKMElDb2dabkp2YlNBbkxpNHZMaTR2TGk0dmRHRnphM012ZDJWaUwzWnBjMmx2Ymk5blpYTjBkWEpsWDNKbFkyOW5ibWw2WlhJdloyVnpkSFZ5WlY5eVpXTnZaMjVwZW1WeVgzSmxjM1ZzZENjN1hHNWxlSEJ2Y25RZ0tpQm1jbTl0SUNjdUxpOHVMaTh1TGk5MFlYTnJjeTkzWldJdmRtbHphVzl1TDJkbGMzUjFjbVZmY21WamIyZHVhWHBsY2k5blpYTjBkWEpsWDNKbFkyOW5ibWw2WlhJbk8xeHVYRzR2THlCUFltcGxZM1FnUkdWMFpXTjBiM0pjYm1WNGNHOXlkQ0FxSUdaeWIyMGdKeTR1THk0dUx5NHVMM1JoYzJ0ekwzZGxZaTkyYVhOcGIyNHZiMkpxWldOMFgyUmxkR1ZqZEc5eUwyOWlhbVZqZEY5a1pYUmxZM1J2Y2w5dmNIUnBiMjV6Snp0Y2JtVjRjRzl5ZENBcUlHWnliMjBnSnk0dUx5NHVMeTR1TDNSaGMydHpMM2RsWWk5MmFYTnBiMjR2YjJKcVpXTjBYMlJsZEdWamRHOXlMMjlpYW1WamRGOWtaWFJsWTNSdmNsOXlaWE4xYkhRbk8xeHVaWGh3YjNKMElDb2dabkp2YlNBbkxpNHZMaTR2TGk0dmRHRnphM012ZDJWaUwzWnBjMmx2Ymk5dlltcGxZM1JmWkdWMFpXTjBiM0l2YjJKcVpXTjBYMlJsZEdWamRHOXlKenRjYmlKZGZRPT0iLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjIgVGhlIE1lZGlhUGlwZSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4uLy4uL3Rhc2tzL3dlYi92aXNpb24vaW5kZXhcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZG1semFXOXVMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2TGk0dkxpNHZMaTR2TGk0dmJXVmthV0Z3YVhCbEwzUmhjMnR6TDNkbFlpOTJhWE5wYjI0dWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCT3pzN096czdPenM3T3pzN096dEhRV05IT3pzN096czdPenM3T3pzN096czdPMEZCUlVnc0swUkJRVFpESWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXlNaUJVYUdVZ1RXVmthV0ZRYVhCbElFRjFkR2h2Y25NdUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYRzRnS2x4dUlDb2dUR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUZ3WVdOb1pTQk1hV05sYm5ObExDQldaWEp6YVc5dUlESXVNQ0FvZEdobElGd2lUR2xqWlc1elpWd2lLVHRjYmlBcUlIbHZkU0J0WVhrZ2JtOTBJSFZ6WlNCMGFHbHpJR1pwYkdVZ1pYaGpaWEIwSUdsdUlHTnZiWEJzYVdGdVkyVWdkMmwwYUNCMGFHVWdUR2xqWlc1elpTNWNiaUFxSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVJQ3BjYmlBcUlDQWdJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaUFxWEc0Z0tpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzSUhOdlpuUjNZWEpsWEc0Z0tpQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmlCY0lrRlRJRWxUWENJZ1FrRlRTVk1zWEc0Z0tpQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGtnUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNWNiaUFxSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUmNiaUFxSUd4cGJXbDBZWFJwYjI1eklIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVJQ292WEc1Y2JtVjRjRzl5ZENBcUlHWnliMjBnSnk0dUx5NHVMM1JoYzJ0ekwzZGxZaTkyYVhOcGIyNHZhVzVrWlhnbk8xeHVJbDE5Il0sIm5hbWVzIjpbInJlcXVpcmUkJDEiLCJyZXF1aXJlJCQzIiwicmVxdWlyZSQkNCIsInJlcXVpcmUkJDUiLCJyZXF1aXJlJCQ2IiwicmVxdWlyZSQkNyIsInJlcXVpcmUkJDIiLCJyZXF1aXJlJCQwIiwid2FzbV9tZWRpYXBpcGVfbGliXzEiLCJjYWxjdWxhdG9yX3BiXzEiLCJjYWxjdWxhdG9yX29wdGlvbnNfcGJfMSIsImJhc2Vfb3B0aW9uc18xIiwiY2xhc3NpZmllcl9vcHRpb25zXzEiLCJ0YXNrX3J1bm5lcl8xIiwicmVxdWlyZSQkOCIsIklOUFVUX1NUUkVBTSIsInJlcXVpcmUkJDkiLCJyZXF1aXJlJCQxMCIsInJlcXVpcmUkJDExIiwicmVxdWlyZSQkMTIiLCJyZXF1aXJlJCQxMyIsInJlcXVpcmUkJDE0IiwiREVGQVVMVF9DQVRFR09SWV9JTkRFWCIsInRoaXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FBQyxjQUFjLENBQUMsd0JBQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUM7Ozs7QUNmN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUFDLGNBQWMsQ0FBQyx1QkFBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQzs7Ozs7Ozs7O0FDaEI3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLElBQUksSUFBSSxHQUFHLFVBQTBCLENBQUM7Q0FDdEMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2hCLENBQUEsSUFBSSxNQUFNO0FBQ1YsS0FBSSxDQUFDLE9BQU8sVUFBVSxLQUFLLFdBQVcsSUFBSSxVQUFVO0FBQ3BELE1BQUssT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQztBQUM3QyxNQUFLLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxNQUFNLENBQUM7QUFDN0MsTUFBSyxPQUFPLElBQUksS0FBSyxXQUFXLElBQUksSUFBSSxDQUFDO0tBQ3JDLENBQUMsWUFBWSxFQUFFLE9BQU8sSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzdDLEtBQUksUUFBUSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7QUFDOUI7Q0FDQSxJQUFJLENBQUMsWUFBWSxDQUFDLG1DQUFtQyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLFFBQVEsRUFBRTtBQUN2RCxHQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUQsRUFBQyxDQUFDO0FBQ0YsQ0FBQSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQy9ELENBQUEsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0dBQ0UsS0FBSyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEdBQUcsbUNBQW1DLENBQUM7RUFDckY7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsU0FBUyxtQkFBbUIsRUFBRTtBQUNyRixHQUFFLE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDL0UsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsUUFBUSxHQUFHLFNBQVMsZUFBZSxFQUFFLEdBQUcsRUFBRTtBQUM1RSxHQUFFLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRztLQUNYLFdBQVcsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxHQUFHLFNBQVMsR0FBRyxDQUFDO0FBQ25GLElBQUcsQ0FBQztBQUNKO0dBQ0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsK0JBQStCLEdBQUcsR0FBRyxHQUFHO0FBQ3hFLE9BQU0sS0FBSyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsWUFBWTtPQUN0RyxlQUFlLENBQUMsQ0FBQztHQUNyQixJQUFJLGVBQWUsRUFBRTtBQUN2QixLQUFJLEdBQUcsQ0FBQyxvQkFBb0IsR0FBRyxHQUFHLENBQUM7SUFDaEM7R0FDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLEVBQUMsQ0FBQztFQUNEO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixHQUFHLFNBQVMsS0FBSyxFQUFFO0dBQ3BFLElBQUksTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUMxQyxJQUFJLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUM7QUFDbEQsR0FBRSxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsMkJBQTJCLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3BGLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsMkJBQTJCLEdBQUcsU0FBUyxHQUFHLEVBQUUsTUFBTSxFQUFFO0FBQ3RGLEdBQUUsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUU7QUFDN0IsS0FBSSxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBRTtBQUM3QixPQUFNLE1BQU07TUFDUDtBQUNMLEtBQUksSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ3hDLEtBQUksUUFBUSxLQUFLO0FBQ2pCLEtBQUksS0FBSyxDQUFDO09BQ0osSUFBSSxLQUFLLDJCQUEyQixNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUM3RCxPQUFNLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDaEMsT0FBTSxNQUFNO0tBQ1I7T0FDRSxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxNQUFNO0FBQ2xELFNBQVEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0I7U0FDbEQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsWUFBWTtTQUN4RCxLQUFLLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNsRSxPQUFNLE1BQU07TUFDUDtJQUNGO0dBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsV0FBVztHQUN2RSxJQUFJLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUN2QyxHQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzFFLEdBQUUsT0FBTyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDbEMsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyx1QkFBdUIsR0FBRyxTQUFTLE9BQU8sRUFBRSxNQUFNLEVBQUU7QUFDdEYsR0FBRSxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUM7QUFDcEIsR0FBRSxDQUFDLDJCQUEyQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqRSxHQUFFLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtLQUNiLE1BQU0sQ0FBQyxTQUFTO0FBQ3BCLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0dBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxPQUFPLEVBQUUsTUFBTTtBQUN4RCxLQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDbEgsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFdBQVc7QUFDeEUsR0FBRSwrQkFBK0IsSUFBSSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFO0FBQzFGLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxTQUFTLEtBQUssRUFBRTtBQUM3RSxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMvQyxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsR0FBRyxXQUFXO0FBQzFFLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ25ELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxXQUFXO0FBQ3hFLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO0FBQ2hELEVBQUMsQ0FBQztBQUNGO0FBQ0E7Q0FDQSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFBOzs7Ozs7QUN2TzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsSUFBSSxJQUFJLEdBQUcsVUFBMEIsQ0FBQztDQUN0QyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7QUFDaEIsQ0FBQSxJQUFJLE1BQU07QUFDVixLQUFJLENBQUMsT0FBTyxVQUFVLEtBQUssV0FBVyxJQUFJLFVBQVU7QUFDcEQsTUFBSyxPQUFPLE1BQU0sS0FBSyxXQUFXLElBQUksTUFBTSxDQUFDO0FBQzdDLE1BQUssT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQztBQUM3QyxNQUFLLE9BQU8sSUFBSSxLQUFLLFdBQVcsSUFBSSxJQUFJLENBQUM7S0FDckMsQ0FBQyxZQUFZLEVBQUUsT0FBTyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDN0MsS0FBSSxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztBQUM5QjtDQUNBLElBQUksQ0FBQyxZQUFZLENBQUMsa0NBQWtDLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLGdCQUFnQixHQUFHLFNBQVMsUUFBUSxFQUFFO0FBQ3RELEdBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM1RCxFQUFDLENBQUM7QUFDRixDQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDOUQsQ0FBQSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7R0FDRSxLQUFLLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFdBQVcsR0FBRyxrQ0FBa0MsQ0FBQztFQUNuRjtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxTQUFTLG1CQUFtQixFQUFFO0FBQ3BGLEdBQUUsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM5RSxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEdBQUcsU0FBUyxlQUFlLEVBQUUsR0FBRyxFQUFFO0FBQzNFLEdBQU0sSUFBRyxHQUFHLEdBQUc7QUFDZjtBQUNBLEtBQUk7QUFDSjtHQUNFLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLCtCQUErQixHQUFHLEdBQUcsR0FBRztBQUN4RSxPQUFNLEtBQUssQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLFlBQVk7T0FDcEcsZUFBZSxDQUFDLENBQUM7R0FDckIsSUFBSSxlQUFlLEVBQUU7QUFDdkIsS0FBSSxHQUFHLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxDQUFDO0lBQ2hDO0dBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixFQUFDLENBQUM7RUFDRDtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLEtBQUssRUFBRTtHQUNuRSxJQUFJLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDMUMsSUFBSSxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDO0FBQ2pELEdBQUUsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLDJCQUEyQixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNuRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLDJCQUEyQixHQUFHLFNBQVMsR0FBRyxFQUFFLE1BQU0sRUFBRTtBQUNyRixHQUFFLE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFO0FBQzdCLEtBQUksSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUU7QUFDN0IsT0FBTSxNQUFNO01BQ1A7QUFDTCxLQUFJLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUN4QyxLQUFJLFFBQVEsS0FBSztLQUNiO09BQ0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsTUFBTTtBQUNsRCxTQUFRLEtBQUssQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCO1NBQ2pELEtBQUssQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLFlBQVk7U0FDdkQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDakUsT0FBTSxNQUFNO01BQ1A7SUFDRjtHQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsZUFBZSxHQUFHLFdBQVc7R0FDdEUsSUFBSSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDdkMsR0FBRSxLQUFLLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN6RSxHQUFFLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ2xDLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsdUJBQXVCLEdBQUcsU0FBUyxPQUFPLEVBQUUsTUFBTSxFQUFFO0dBRW5GLElBQUksQ0FBQyxPQUFPLENBQUMseUJBQXlCLENBQUMsT0FBTyxFQUFFLE1BQU07QUFDeEQsS0FBSSxLQUFLLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ2hILEVBQUMsQ0FBQztBQUNGO0FBQ0E7Q0FDQSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFBOzs7Ozs7QUN4TDVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsSUFBSSxJQUFJLEdBQUcsVUFBMEIsQ0FBQztDQUN0QyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7QUFDaEIsQ0FBQSxJQUFJLE1BQU07QUFDVixLQUFJLENBQUMsT0FBTyxVQUFVLEtBQUssV0FBVyxJQUFJLFVBQVU7QUFDcEQsTUFBSyxPQUFPLE1BQU0sS0FBSyxXQUFXLElBQUksTUFBTSxDQUFDO0FBQzdDLE1BQUssT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQztBQUM3QyxNQUFLLE9BQU8sSUFBSSxLQUFLLFdBQVcsSUFBSSxJQUFJLENBQUM7S0FDckMsQ0FBQyxZQUFZLEVBQUUsT0FBTyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDN0MsS0FBSSxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztBQUM5QjtDQUNBLElBQUksQ0FBQyxZQUFZLENBQUMscUNBQXFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ3ZFLElBQUksQ0FBQyxZQUFZLENBQUMsc0NBQXNDLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ3hFLElBQUksQ0FBQyxZQUFZLENBQUMscUNBQXFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLG9CQUFvQixHQUFHLFNBQVMsUUFBUSxFQUFFO0FBQzFELEdBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM1RCxFQUFDLENBQUM7QUFDRixDQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbEUsQ0FBQSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7R0FDRSxLQUFLLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLFdBQVcsR0FBRyxzQ0FBc0MsQ0FBQztFQUMzRjtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixHQUFHLFNBQVMsUUFBUSxFQUFFO0FBQ3pELEdBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM5RCxFQUFDLENBQUM7QUFDRixDQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDakUsQ0FBQSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7R0FDRSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLFdBQVcsR0FBRyxxQ0FBcUMsQ0FBQztFQUN6RjtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixHQUFHLFNBQVMsUUFBUSxFQUFFO0dBQ3ZELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzVHLEVBQUMsQ0FBQztBQUNGLENBQUEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNqRSxDQUFBLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtHQUNFLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsV0FBVyxHQUFHLHFDQUFxQyxDQUFDO0VBQ3pGO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUU7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLFNBQVMsbUJBQW1CLEVBQUU7QUFDeEYsR0FBRSxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2xGLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsR0FBRyxTQUFTLGVBQWUsRUFBRSxHQUFHLEVBQUU7QUFDL0UsR0FBTSxJQUFHLEdBQUcsR0FBRztBQUNmO0FBQ0EsS0FBSTtBQUNKO0dBQ0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsK0JBQStCLEdBQUcsR0FBRyxHQUFHO0FBQ3hFLE9BQU0sS0FBSyxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsWUFBWTtPQUM1RyxlQUFlLENBQUMsQ0FBQztHQUNyQixJQUFJLGVBQWUsRUFBRTtBQUN2QixLQUFJLEdBQUcsQ0FBQyxvQkFBb0IsR0FBRyxHQUFHLENBQUM7SUFDaEM7R0FDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLEVBQUMsQ0FBQztFQUNEO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLGlCQUFpQixHQUFHLFNBQVMsS0FBSyxFQUFFO0dBQ3ZFLElBQUksTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUMxQyxJQUFJLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUM7QUFDckQsR0FBRSxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsMkJBQTJCLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZGLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsMkJBQTJCLEdBQUcsU0FBUyxHQUFHLEVBQUUsTUFBTSxFQUFFO0FBQ3pGLEdBQUUsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUU7QUFDN0IsS0FBSSxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBRTtBQUM3QixPQUFNLE1BQU07TUFDUDtBQUNMLEtBQUksSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ3hDLEtBQUksUUFBUSxLQUFLO0tBQ2I7T0FDRSxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxNQUFNO0FBQ2xELFNBQVEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxnQkFBZ0I7U0FDckQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsWUFBWTtTQUMzRCxLQUFLLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNyRSxPQUFNLE1BQU07TUFDUDtJQUNGO0dBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsV0FBVztHQUMxRSxJQUFJLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUN2QyxHQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzdFLEdBQUUsT0FBTyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDbEMsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyx1QkFBdUIsR0FBRyxTQUFTLE9BQU8sRUFBRSxNQUFNLEVBQUU7R0FFdkYsSUFBSSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxPQUFPLEVBQUUsTUFBTTtBQUN4RCxLQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDeEgsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxTQUFTLG1CQUFtQixFQUFFO0FBQ3ZGLEdBQUUsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNqRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEdBQUcsU0FBUyxlQUFlLEVBQUUsR0FBRyxFQUFFO0FBQzlFLEdBQUUsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHO0tBQ1gsYUFBYSxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsU0FBUyxHQUFHLENBQUM7S0FDMUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksR0FBRyxTQUFTLEdBQUcsQ0FBQztLQUM3RSxjQUFjLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLElBQUksR0FBRyxTQUFTLEdBQUcsQ0FBQztLQUM5RSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLFVBQVUsRUFBRSxLQUFLLEtBQUssQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7QUFDeEcsSUFBRyxDQUFDO0FBQ0o7R0FDRSxJQUFJLGVBQWUsRUFBRTtBQUN2QixLQUFJLEdBQUcsQ0FBQyxvQkFBb0IsR0FBRyxHQUFHLENBQUM7SUFDaEM7R0FDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLEVBQUMsQ0FBQztFQUNEO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLGlCQUFpQixHQUFHLFNBQVMsS0FBSyxFQUFFO0dBQ3RFLElBQUksTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUMxQyxJQUFJLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUM7QUFDcEQsR0FBRSxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsMkJBQTJCLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3RGLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsMkJBQTJCLEdBQUcsU0FBUyxHQUFHLEVBQUUsTUFBTSxFQUFFO0FBQ3hGLEdBQUUsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUU7QUFDN0IsS0FBSSxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBRTtBQUM3QixPQUFNLE1BQU07TUFDUDtBQUNMLEtBQUksSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ3hDLEtBQUksUUFBUSxLQUFLO0FBQ2pCLEtBQUksS0FBSyxDQUFDO09BQ0osSUFBSSxLQUFLLDBCQUEwQixNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUM5RCxPQUFNLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssQ0FBQztPQUNKLElBQUksS0FBSywwQkFBMEIsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDOUQsT0FBTSxHQUFHLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDckMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLElBQUk7T0FDUCxJQUFJLEtBQUssMEJBQTBCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE9BQU0sR0FBRyxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25DLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxDQUFDO09BQ0osSUFBSSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDO0FBQzNELE9BQU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQ2pHLE9BQU0sR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1QixPQUFNLE1BQU07S0FDUjtBQUNKLE9BQU0sTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ3pCLE9BQU0sTUFBTTtNQUNQO0lBQ0Y7R0FDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLGVBQWUsR0FBRyxXQUFXO0dBQ3pFLElBQUksTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ3ZDLEdBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDNUUsR0FBRSxPQUFPLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUNsQyxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLHVCQUF1QixHQUFHLFNBQVMsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUN4RixHQUFFLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQztBQUNwQixHQUFFLENBQUMsMEJBQTBCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLEdBQUUsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO0tBQ2IsTUFBTSxDQUFDLFdBQVc7QUFDdEIsT0FBTSxDQUFDO0FBQ1AsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsMEJBQTBCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLEdBQUUsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO0tBQ2IsTUFBTSxDQUFDLFdBQVc7QUFDdEIsT0FBTSxDQUFDO0FBQ1AsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsMEJBQTBCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ25FLEdBQUUsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO0tBQ2IsTUFBTSxDQUFDLFdBQVc7QUFDdEIsT0FBTSxJQUFJO0FBQ1YsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDM0IsR0FBRSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7S0FDYixNQUFNLENBQUMsWUFBWTtBQUN2QixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxPQUFNLEtBQUssQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsdUJBQXVCO0FBQ2xFLE1BQUssQ0FBQztJQUNIO0FBQ0gsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEdBQUcsV0FBVztBQUM1RSxHQUFFLDhCQUE4QixJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7QUFDL0UsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDakYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDL0MsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEdBQUcsV0FBVztBQUM5RSxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNuRCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsR0FBRyxXQUFXO0FBQzVFLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO0FBQ2hELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLG1CQUFtQixHQUFHLFdBQVc7QUFDL0UsR0FBRSw4QkFBOEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO0FBQy9FLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLG1CQUFtQixHQUFHLFNBQVMsS0FBSyxFQUFFO0FBQ3BGLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQy9DLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLHFCQUFxQixHQUFHLFdBQVc7QUFDakYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDbkQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEdBQUcsV0FBVztBQUMvRSxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQztBQUNoRCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsR0FBRyxXQUFXO0FBQzdFLEdBQUUsOEJBQThCLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRTtBQUNsRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLEtBQUssRUFBRTtBQUNsRixHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNsRCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsR0FBRyxXQUFXO0FBQy9FLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3RELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLGlCQUFpQixHQUFHLFdBQVc7QUFDN0UsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUM7QUFDbkQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFdBQVc7R0FDcEU7QUFDRixLQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2pGLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxTQUFTLEtBQUssRUFBRTtBQUMzRSxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0RCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUcsV0FBVztBQUN4RSxHQUFFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNwQyxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsV0FBVztBQUN0RSxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQztBQUNoRCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxRDtBQUNBO0FBQ0E7QUFDQSxDQUFBLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsU0FBUyxtQkFBbUIsRUFBRTtBQUN2RixHQUFFLE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDakYsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsUUFBUSxHQUFHLFNBQVMsZUFBZSxFQUFFLEdBQUcsRUFBRTtBQUM5RSxHQUFNLElBQUcsR0FBRyxHQUFHO0tBQ1gsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUU7S0FDekQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDO0FBQ2xFLEtBQUk7QUFDSjtHQUNFLElBQUksZUFBZSxFQUFFO0FBQ3ZCLEtBQUksR0FBRyxDQUFDLG9CQUFvQixHQUFHLEdBQUcsQ0FBQztJQUNoQztHQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsRUFBQyxDQUFDO0VBQ0Q7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxLQUFLLEVBQUU7R0FDdEUsSUFBSSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQzFDLElBQUksR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQztBQUNwRCxHQUFFLE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQywyQkFBMkIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdEYsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQywyQkFBMkIsR0FBRyxTQUFTLEdBQUcsRUFBRSxNQUFNLEVBQUU7QUFDeEYsR0FBRSxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtBQUM3QixLQUFJLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFO0FBQzdCLE9BQU0sTUFBTTtNQUNQO0FBQ0wsS0FBSSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDeEMsS0FBSSxRQUFRLEtBQUs7QUFDakIsS0FBSSxLQUFLLENBQUM7T0FDSixJQUFJLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUM7QUFDMUQsT0FBTSxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDaEcsT0FBTSxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzNCLE9BQU0sTUFBTTtLQUNSO0FBQ0osT0FBTSxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDekIsT0FBTSxNQUFNO01BQ1A7SUFDRjtHQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsZUFBZSxHQUFHLFdBQVc7R0FDekUsSUFBSSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDdkMsR0FBRSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM1RSxHQUFFLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ2xDLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsdUJBQXVCLEdBQUcsU0FBUyxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQ3hGLEdBQUUsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDO0FBQ3BCLEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUM5QixHQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7S0FDaEIsTUFBTSxDQUFDLG9CQUFvQjtBQUMvQixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxPQUFNLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsdUJBQXVCO0FBQ2pFLE1BQUssQ0FBQztJQUNIO0FBQ0gsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsYUFBYSxHQUFHLFdBQVc7R0FDdkU7QUFDRixLQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLEVBQUU7QUFDeEYsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsYUFBYSxHQUFHLFNBQVMsS0FBSyxFQUFFO0FBQzlFLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDOUQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxTQUFTLFNBQVMsRUFBRSxTQUFTLEVBQUU7R0FDdkYsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHlCQUF5QixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDcEgsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsZUFBZSxHQUFHLFdBQVc7QUFDM0UsR0FBRSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDaEMsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtDQUNBLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUE7Ozs7OztBQzNxQjVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsSUFBSSxJQUFJLEdBQUcsVUFBMEIsQ0FBQztDQUN0QyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7QUFDaEIsQ0FBQSxJQUFJLE1BQU07QUFDVixLQUFJLENBQUMsT0FBTyxVQUFVLEtBQUssV0FBVyxJQUFJLFVBQVU7QUFDcEQsTUFBSyxPQUFPLE1BQU0sS0FBSyxXQUFXLElBQUksTUFBTSxDQUFDO0FBQzdDLE1BQUssT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQztBQUM3QyxNQUFLLE9BQU8sSUFBSSxLQUFLLFdBQVcsSUFBSSxJQUFJLENBQUM7S0FDckMsQ0FBQyxZQUFZLEVBQUUsT0FBTyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDN0MsS0FBSSxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztBQUM5QjtDQUNBLElBQUksQ0FBQyxZQUFZLENBQUMsdUNBQXVDLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ3pFLElBQUksQ0FBQyxZQUFZLENBQUMsd0NBQXdDLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLHNCQUFzQixHQUFHLFNBQVMsUUFBUSxFQUFFO0FBQzVELEdBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM1RCxFQUFDLENBQUM7QUFDRixDQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEUsQ0FBQSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7R0FDRSxLQUFLLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLFdBQVcsR0FBRyx3Q0FBd0MsQ0FBQztFQUMvRjtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixHQUFHLFNBQVMsUUFBUSxFQUFFO0dBQ3pELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMvRyxFQUFDLENBQUM7QUFDRixDQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbkUsQ0FBQSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7R0FDRSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLFdBQVcsR0FBRyx1Q0FBdUMsQ0FBQztFQUM3RjtBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxTQUFTLG1CQUFtQixFQUFFO0FBQzFGLEdBQUUsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNwRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLEdBQUcsU0FBUyxlQUFlLEVBQUUsR0FBRyxFQUFFO0FBQ2pGLEdBQU0sSUFBRyxHQUFHLEdBQUc7QUFDZixLQUFJLFdBQVcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDO0FBQ3RFLEtBQUk7QUFDSjtHQUNFLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLCtCQUErQixHQUFHLEdBQUcsR0FBRztBQUN4RSxPQUFNLEtBQUssQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLFlBQVk7T0FDaEgsZUFBZSxDQUFDLENBQUM7R0FDckIsSUFBSSxlQUFlLEVBQUU7QUFDdkIsS0FBSSxHQUFHLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxDQUFDO0lBQ2hDO0dBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixFQUFDLENBQUM7RUFDRDtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLEtBQUssRUFBRTtHQUN6RSxJQUFJLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDMUMsSUFBSSxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDO0FBQ3ZELEdBQUUsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLDJCQUEyQixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN6RixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLDJCQUEyQixHQUFHLFNBQVMsR0FBRyxFQUFFLE1BQU0sRUFBRTtBQUMzRixHQUFFLE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFO0FBQzdCLEtBQUksSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUU7QUFDN0IsT0FBTSxNQUFNO01BQ1A7QUFDTCxLQUFJLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUN4QyxLQUFJLFFBQVEsS0FBSztBQUNqQixLQUFJLEtBQUssQ0FBQztPQUNKLElBQUksS0FBSywyQkFBMkIsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDN0QsT0FBTSxHQUFHLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hDLE9BQU0sTUFBTTtLQUNSO09BQ0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsTUFBTTtBQUNsRCxTQUFRLEtBQUssQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsZ0JBQWdCO1NBQ3ZELEtBQUssQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLFlBQVk7U0FDN0QsS0FBSyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDdkUsT0FBTSxNQUFNO01BQ1A7SUFDRjtHQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsZUFBZSxHQUFHLFdBQVc7R0FDNUUsSUFBSSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDdkMsR0FBRSxLQUFLLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMvRSxHQUFFLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ2xDLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsdUJBQXVCLEdBQUcsU0FBUyxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQzNGLEdBQUUsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDO0FBQ3BCLEdBQUUsQ0FBQywyQkFBMkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakUsR0FBRSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7S0FDYixNQUFNLENBQUMsU0FBUztBQUNwQixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtHQUNELElBQUksQ0FBQyxPQUFPLENBQUMseUJBQXlCLENBQUMsT0FBTyxFQUFFLE1BQU07QUFDeEQsS0FBSSxLQUFLLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzVILEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxXQUFXO0FBQzdFLEdBQUUsK0JBQStCLElBQUksQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRTtBQUN6RixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDbEYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDL0MsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEdBQUcsV0FBVztBQUMvRSxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNuRCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsV0FBVztBQUM3RSxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQztBQUNoRCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBLENBQUEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxTQUFTLG1CQUFtQixFQUFFO0FBQ3pGLEdBQUUsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNuRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLEdBQUcsU0FBUyxlQUFlLEVBQUUsR0FBRyxFQUFFO0FBQ2hGLEdBQUUsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHO0tBQ1gsZUFBZSxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsU0FBUyxHQUFHLENBQUM7S0FDNUUsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxHQUFHLFNBQVMsR0FBRyxDQUFDO0tBQ3hGLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLElBQUksR0FBRyxTQUFTLEdBQUcsQ0FBQztLQUN6RixvQkFBb0IsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsU0FBUyxHQUFHLENBQUM7S0FDekYsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssSUFBSSxHQUFHLFNBQVMsR0FBRyxDQUFDO0tBQzFGLE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsVUFBVSxFQUFFLEtBQUssS0FBSyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztBQUMxRyxJQUFHLENBQUM7QUFDSjtHQUNFLElBQUksZUFBZSxFQUFFO0FBQ3ZCLEtBQUksR0FBRyxDQUFDLG9CQUFvQixHQUFHLEdBQUcsQ0FBQztJQUNoQztHQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsRUFBQyxDQUFDO0VBQ0Q7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxLQUFLLEVBQUU7R0FDeEUsSUFBSSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQzFDLElBQUksR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQztBQUN0RCxHQUFFLE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQywyQkFBMkIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDeEYsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQywyQkFBMkIsR0FBRyxTQUFTLEdBQUcsRUFBRSxNQUFNLEVBQUU7QUFDMUYsR0FBRSxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtBQUM3QixLQUFJLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFO0FBQzdCLE9BQU0sTUFBTTtNQUNQO0FBQ0wsS0FBSSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDeEMsS0FBSSxRQUFRLEtBQUs7QUFDakIsS0FBSSxLQUFLLENBQUM7T0FDSixJQUFJLEtBQUssMEJBQTBCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE9BQU0sR0FBRyxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BDLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxDQUFDO09BQ0osSUFBSSxLQUFLLDBCQUEwQixNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUM5RCxPQUFNLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwQyxPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssSUFBSTtPQUNQLElBQUksS0FBSywwQkFBMEIsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDOUQsT0FBTSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbEMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLENBQUM7T0FDSixJQUFJLEtBQUssMEJBQTBCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE9BQU0sR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxJQUFJO09BQ1AsSUFBSSxLQUFLLDBCQUEwQixNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUM5RCxPQUFNLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuQyxPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssQ0FBQztPQUNKLElBQUksS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQztBQUM3RCxPQUFNLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUNuRyxPQUFNLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUIsT0FBTSxNQUFNO0tBQ1I7QUFDSixPQUFNLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUN6QixPQUFNLE1BQU07TUFDUDtJQUNGO0dBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsV0FBVztHQUMzRSxJQUFJLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUN2QyxHQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzlFLEdBQUUsT0FBTyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDbEMsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyx1QkFBdUIsR0FBRyxTQUFTLE9BQU8sRUFBRSxNQUFNLEVBQUU7QUFDMUYsR0FBRSxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUM7QUFDcEIsR0FBRSxDQUFDLDBCQUEwQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoRSxHQUFFLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtLQUNiLE1BQU0sQ0FBQyxXQUFXO0FBQ3RCLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUM7QUFDdkMsR0FBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0tBQ2hCLE1BQU0sQ0FBQyxtQkFBbUI7QUFDOUIsT0FBTSxDQUFDO0FBQ1AsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztBQUNyQyxHQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7S0FDaEIsTUFBTSxDQUFDLG1CQUFtQjtBQUM5QixPQUFNLElBQUk7QUFDVixPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO0FBQ3hDLEdBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtLQUNoQixNQUFNLENBQUMsbUJBQW1CO0FBQzlCLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixFQUFFLENBQUM7QUFDdEMsR0FBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0tBQ2hCLE1BQU0sQ0FBQyxtQkFBbUI7QUFDOUIsT0FBTSxJQUFJO0FBQ1YsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDM0IsR0FBRSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7S0FDYixNQUFNLENBQUMsWUFBWTtBQUN2QixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxPQUFNLEtBQUssQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsdUJBQXVCO0FBQ3BFLE1BQUssQ0FBQztJQUNIO0FBQ0gsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEdBQUcsV0FBVztBQUNoRixHQUFFLDhCQUE4QixJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7QUFDL0UsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDckYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDL0MsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEdBQUcsV0FBVztBQUNsRixHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNuRCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsR0FBRyxXQUFXO0FBQ2hGLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO0FBQ2hELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLHNCQUFzQixHQUFHLFdBQVc7R0FDbEYsc0NBQXNDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2hGLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLHNCQUFzQixHQUFHLFNBQVMsS0FBSyxFQUFFO0FBQ3pGLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNyRCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEdBQUcsU0FBUyxLQUFLLEVBQUUsU0FBUyxFQUFFO0FBQ2hHLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3BFLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLHdCQUF3QixHQUFHLFdBQVc7QUFDdEYsR0FBRSxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN6QyxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsR0FBRyxXQUFXO0dBQ2hGLHNDQUFzQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRTtBQUNuRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsR0FBRyxTQUFTLEtBQUssRUFBRTtBQUN2RixHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDLENBQUM7QUFDeEQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLGdCQUFnQixHQUFHLFNBQVMsS0FBSyxFQUFFLFNBQVMsRUFBRTtBQUM5RixHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN2RSxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsR0FBRyxXQUFXO0FBQ3BGLEdBQUUsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdkMsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsdUJBQXVCLEdBQUcsV0FBVztHQUNuRixzQ0FBc0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUU7QUFDaEYsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsdUJBQXVCLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDMUYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3JELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsR0FBRyxTQUFTLEtBQUssRUFBRSxTQUFTLEVBQUU7QUFDakcsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDcEUsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMseUJBQXlCLEdBQUcsV0FBVztBQUN2RixHQUFFLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzFDLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLHFCQUFxQixHQUFHLFdBQVc7R0FDakYsc0NBQXNDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFO0FBQ25GLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLHFCQUFxQixHQUFHLFNBQVMsS0FBSyxFQUFFO0FBQ3hGLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN4RCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxLQUFLLEVBQUUsU0FBUyxFQUFFO0FBQy9GLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3ZFLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLHVCQUF1QixHQUFHLFdBQVc7QUFDckYsR0FBRSxPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN4QyxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsV0FBVztHQUN0RTtBQUNGLEtBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDLEVBQUU7QUFDbkYsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFNBQVMsS0FBSyxFQUFFO0FBQzdFLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3RELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLFlBQVksR0FBRyxXQUFXO0FBQzFFLEdBQUUsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BDLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxXQUFXO0FBQ3hFLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO0FBQ2hELEVBQUMsQ0FBQztBQUNGO0FBQ0E7Q0FDQSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFBOzs7Ozs7QUMvb0I1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLElBQUksSUFBSSxHQUFHLFVBQTBCLENBQUM7Q0FDdEMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2hCLENBQUEsSUFBSSxNQUFNO0FBQ1YsS0FBSSxDQUFDLE9BQU8sVUFBVSxLQUFLLFdBQVcsSUFBSSxVQUFVO0FBQ3BELE1BQUssT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQztBQUM3QyxNQUFLLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxNQUFNLENBQUM7QUFDN0MsTUFBSyxPQUFPLElBQUksS0FBSyxXQUFXLElBQUksSUFBSSxDQUFDO0tBQ3JDLENBQUMsWUFBWSxFQUFFLE9BQU8sSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzdDLEtBQUksUUFBUSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7QUFDOUI7Q0FDQSxJQUFJLHdDQUF3QyxHQUFHQSxvQkFBNEQsQ0FBQztDQUM1RyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsd0NBQXdDLENBQUMsQ0FBQztDQUNwRSxJQUFJLENBQUMsWUFBWSxDQUFDLHFDQUFxQyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsR0FBRyxTQUFTLFFBQVEsRUFBRTtHQUN2RCxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDN0csRUFBQyxDQUFDO0FBQ0YsQ0FBQSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2pFLENBQUEsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0dBQ0UsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEdBQUcscUNBQXFDLENBQUM7RUFDekY7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9EO0FBQ0E7QUFDQTtBQUNBLENBQUEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxTQUFTLG1CQUFtQixFQUFFO0FBQ3ZGLEdBQUUsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNqRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEdBQUcsU0FBUyxlQUFlLEVBQUUsR0FBRyxFQUFFO0FBQzlFLEdBQUUsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHO0tBQ1gsYUFBYSxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsU0FBUyxHQUFHLENBQUM7S0FDMUUsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxHQUFHLFNBQVMsR0FBRyxDQUFDO0tBQ3hGLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLElBQUksR0FBRyxTQUFTLEdBQUcsQ0FBQztBQUM3RixLQUFJLE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsVUFBVSxFQUFFLEtBQUssd0NBQXdDLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7QUFDN0gsSUFBRyxDQUFDO0FBQ0o7R0FDRSxJQUFJLGVBQWUsRUFBRTtBQUN2QixLQUFJLEdBQUcsQ0FBQyxvQkFBb0IsR0FBRyxHQUFHLENBQUM7SUFDaEM7R0FDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLEVBQUMsQ0FBQztFQUNEO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLGlCQUFpQixHQUFHLFNBQVMsS0FBSyxFQUFFO0dBQ3RFLElBQUksTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUMxQyxJQUFJLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUM7QUFDcEQsR0FBRSxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsMkJBQTJCLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3RGLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsMkJBQTJCLEdBQUcsU0FBUyxHQUFHLEVBQUUsTUFBTSxFQUFFO0FBQ3hGLEdBQUUsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUU7QUFDN0IsS0FBSSxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBRTtBQUM3QixPQUFNLE1BQU07TUFDUDtBQUNMLEtBQUksSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ3hDLEtBQUksUUFBUSxLQUFLO0FBQ2pCLEtBQUksS0FBSyxDQUFDO09BQ0osSUFBSSxLQUFLLDBCQUEwQixNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUM5RCxPQUFNLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssQ0FBQztPQUNKLElBQUksS0FBSywwQkFBMEIsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDOUQsT0FBTSxHQUFHLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLElBQUk7T0FDUCxJQUFJLEtBQUssMEJBQTBCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE9BQU0sR0FBRyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2xDLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxDQUFDO0FBQ1YsT0FBTSxJQUFJLEtBQUssR0FBRyxJQUFJLHdDQUF3QyxDQUFDLGdCQUFnQixDQUFDO0FBQ2hGLE9BQU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsd0NBQXdDLENBQUMsZ0JBQWdCLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUN0SCxPQUFNLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUIsT0FBTSxNQUFNO0tBQ1I7QUFDSixPQUFNLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUN6QixPQUFNLE1BQU07TUFDUDtJQUNGO0dBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsV0FBVztHQUN6RSxJQUFJLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUN2QyxHQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzVFLEdBQUUsT0FBTyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDbEMsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyx1QkFBdUIsR0FBRyxTQUFTLE9BQU8sRUFBRSxNQUFNLEVBQUU7QUFDeEYsR0FBRSxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUM7QUFDcEIsR0FBRSxDQUFDLDBCQUEwQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoRSxHQUFFLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtLQUNiLE1BQU0sQ0FBQyxXQUFXO0FBQ3RCLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUM7QUFDdkMsR0FBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0tBQ2hCLE1BQU0sQ0FBQyxtQkFBbUI7QUFDOUIsT0FBTSxDQUFDO0FBQ1AsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztBQUNyQyxHQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7S0FDaEIsTUFBTSxDQUFDLG1CQUFtQjtBQUM5QixPQUFNLElBQUk7QUFDVixPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUMzQixHQUFFLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtLQUNiLE1BQU0sQ0FBQyxZQUFZO0FBQ3ZCLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztBQUNQLE9BQU0sd0NBQXdDLENBQUMsZ0JBQWdCLENBQUMsdUJBQXVCO0FBQ3ZGLE1BQUssQ0FBQztJQUNIO0FBQ0gsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEdBQUcsV0FBVztBQUM1RSxHQUFFLDhCQUE4QixJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7QUFDL0UsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDakYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDL0MsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEdBQUcsV0FBVztBQUM5RSxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNuRCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsR0FBRyxXQUFXO0FBQzVFLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO0FBQ2hELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLHNCQUFzQixHQUFHLFdBQVc7R0FDaEYsc0NBQXNDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2hGLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLHNCQUFzQixHQUFHLFNBQVMsS0FBSyxFQUFFO0FBQ3ZGLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNyRCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEdBQUcsU0FBUyxLQUFLLEVBQUUsU0FBUyxFQUFFO0FBQzlGLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3BFLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLHdCQUF3QixHQUFHLFdBQVc7QUFDcEYsR0FBRSxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN6QyxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsR0FBRyxXQUFXO0dBQzlFLHNDQUFzQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRTtBQUNuRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsR0FBRyxTQUFTLEtBQUssRUFBRTtBQUNyRixHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDLENBQUM7QUFDeEQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLGdCQUFnQixHQUFHLFNBQVMsS0FBSyxFQUFFLFNBQVMsRUFBRTtBQUM1RixHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN2RSxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsR0FBRyxXQUFXO0FBQ2xGLEdBQUUsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdkMsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFdBQVc7R0FDcEU7QUFDRixLQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSx3Q0FBd0MsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsRUFBRTtBQUN0RyxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDM0UsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdEQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsWUFBWSxHQUFHLFdBQVc7QUFDeEUsR0FBRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDcEMsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFdBQVc7QUFDdEUsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7QUFDaEQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtDQUNBLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUE7Ozs7OztBQy9WNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxJQUFJLElBQUksR0FBRyxVQUEwQixDQUFDO0NBQ3RDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztBQUNoQixDQUFBLElBQUksTUFBTTtBQUNWLEtBQUksQ0FBQyxPQUFPLFVBQVUsS0FBSyxXQUFXLElBQUksVUFBVTtBQUNwRCxNQUFLLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxNQUFNLENBQUM7QUFDN0MsTUFBSyxPQUFPLE1BQU0sS0FBSyxXQUFXLElBQUksTUFBTSxDQUFDO0FBQzdDLE1BQUssT0FBTyxJQUFJLEtBQUssV0FBVyxJQUFJLElBQUksQ0FBQztLQUNyQyxDQUFDLFlBQVksRUFBRSxPQUFPLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQztBQUM3QyxLQUFJLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO0FBQzlCO0NBQ0EsSUFBSSx3Q0FBd0MsR0FBR0Esb0JBQTRELENBQUM7Q0FDNUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLHdDQUF3QyxDQUFDLENBQUM7Q0FDcEUsSUFBSSxDQUFDLFlBQVksQ0FBQywwQ0FBMEMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDNUUsSUFBSSxDQUFDLFlBQVksQ0FBQywyQ0FBMkMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMsd0JBQXdCLEdBQUcsU0FBUyxRQUFRLEVBQUU7QUFDOUQsR0FBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDN0QsRUFBQyxDQUFDO0FBQ0YsQ0FBQSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsd0JBQXdCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3RFLENBQUEsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0dBQ0UsS0FBSyxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxXQUFXLEdBQUcsMENBQTBDLENBQUM7RUFDbkc7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsR0FBRyxTQUFTLFFBQVEsRUFBRTtHQUM3RCxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNsSCxFQUFDLENBQUM7QUFDRixDQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdkUsQ0FBQSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7R0FDRSxLQUFLLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLFdBQVcsR0FBRywyQ0FBMkMsQ0FBQztFQUNyRztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxTQUFTLG1CQUFtQixFQUFFO0FBQzVGLEdBQUUsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN0RixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxRQUFRLEdBQUcsU0FBUyxlQUFlLEVBQUUsR0FBRyxFQUFFO0FBQ25GLEdBQUUsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHO0FBQ2YsS0FBSSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsMkJBQTJCLENBQUM7QUFDN0YsS0FBSSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLFVBQVUsRUFBRSxLQUFLLHdDQUF3QyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0FBQzdILElBQUcsQ0FBQztBQUNKO0dBQ0UsSUFBSSxlQUFlLEVBQUU7QUFDdkIsS0FBSSxHQUFHLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxDQUFDO0lBQ2hDO0dBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixFQUFDLENBQUM7RUFDRDtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLEtBQUssRUFBRTtHQUMzRSxJQUFJLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDMUMsSUFBSSxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDO0FBQ3pELEdBQUUsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLDJCQUEyQixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMzRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLDJCQUEyQixHQUFHLFNBQVMsR0FBRyxFQUFFLE1BQU0sRUFBRTtBQUM3RixHQUFFLE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFO0FBQzdCLEtBQUksSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUU7QUFDN0IsT0FBTSxNQUFNO01BQ1A7QUFDTCxLQUFJLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUN4QyxLQUFJLFFBQVEsS0FBSztBQUNqQixLQUFJLEtBQUssQ0FBQztPQUNKLElBQUksS0FBSywwQkFBMEIsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDOUQsT0FBTSxHQUFHLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLENBQUM7QUFDVixPQUFNLElBQUksS0FBSyxHQUFHLElBQUksd0NBQXdDLENBQUMsZ0JBQWdCLENBQUM7QUFDaEYsT0FBTSxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxnQkFBZ0IsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQ3RILE9BQU0sR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1QixPQUFNLE1BQU07S0FDUjtBQUNKLE9BQU0sTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ3pCLE9BQU0sTUFBTTtNQUNQO0lBQ0Y7R0FDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsU0FBUyxDQUFDLGVBQWUsR0FBRyxXQUFXO0dBQzlFLElBQUksTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ3ZDLEdBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDakYsR0FBRSxPQUFPLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUNsQyxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLHVCQUF1QixHQUFHLFNBQVMsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUM3RixHQUFFLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQztBQUNwQixHQUFFLENBQUMsMEJBQTBCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLEdBQUUsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO0tBQ2IsTUFBTSxDQUFDLFdBQVc7QUFDdEIsT0FBTSxDQUFDO0FBQ1AsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDM0IsR0FBRSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7S0FDYixNQUFNLENBQUMsWUFBWTtBQUN2QixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxPQUFNLHdDQUF3QyxDQUFDLGdCQUFnQixDQUFDLHVCQUF1QjtBQUN2RixNQUFLLENBQUM7SUFDSDtBQUNILEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsU0FBUyxDQUFDLHFCQUFxQixHQUFHLFdBQVc7QUFDdEYsR0FBRSw4QkFBOEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLDJCQUEyQixDQUFDLEVBQUU7QUFDeEcsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxTQUFTLENBQUMscUJBQXFCLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDM0YsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDL0MsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxTQUFTLENBQUMsdUJBQXVCLEdBQUcsV0FBVztBQUN4RixHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNuRCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsR0FBRyxXQUFXO0FBQ3RGLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO0FBQ2hELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxXQUFXO0dBQ3pFO0FBQ0YsS0FBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsd0NBQXdDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLEVBQUU7QUFDdEcsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFNBQVMsS0FBSyxFQUFFO0FBQ2hGLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3RELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsU0FBUyxDQUFDLFlBQVksR0FBRyxXQUFXO0FBQzdFLEdBQUUsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BDLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxXQUFXO0FBQzNFLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO0FBQ2hELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBLENBQUEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxTQUFTLG1CQUFtQixFQUFFO0FBQzdGLEdBQUUsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN2RixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLEdBQUcsU0FBUyxlQUFlLEVBQUUsR0FBRyxFQUFFO0FBQ3BGLEdBQUUsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHO0FBQ2YsS0FBSSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsNEJBQTRCLENBQUM7S0FDM0YsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxHQUFHLFNBQVMsR0FBRyxDQUFDO0FBQzVGLEtBQUksT0FBTyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxVQUFVLEVBQUUsS0FBSyx3Q0FBd0MsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztBQUM3SCxJQUFHLENBQUM7QUFDSjtHQUNFLElBQUksZUFBZSxFQUFFO0FBQ3ZCLEtBQUksR0FBRyxDQUFDLG9CQUFvQixHQUFHLEdBQUcsQ0FBQztJQUNoQztHQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsRUFBQyxDQUFDO0VBQ0Q7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxLQUFLLEVBQUU7R0FDNUUsSUFBSSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQzFDLElBQUksR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQztBQUMxRCxHQUFFLE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQywyQkFBMkIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDNUYsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQywyQkFBMkIsR0FBRyxTQUFTLEdBQUcsRUFBRSxNQUFNLEVBQUU7QUFDOUYsR0FBRSxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtBQUM3QixLQUFJLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFO0FBQzdCLE9BQU0sTUFBTTtNQUNQO0FBQ0wsS0FBSSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDeEMsS0FBSSxRQUFRLEtBQUs7QUFDakIsS0FBSSxLQUFLLENBQUM7T0FDSixJQUFJLEtBQUssMEJBQTBCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE9BQU0sR0FBRyxDQUFDLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hDLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxDQUFDO09BQ0osSUFBSSxLQUFLLDBCQUEwQixNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUM5RCxPQUFNLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwQyxPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssQ0FBQztBQUNWLE9BQU0sSUFBSSxLQUFLLEdBQUcsSUFBSSx3Q0FBd0MsQ0FBQyxnQkFBZ0IsQ0FBQztBQUNoRixPQUFNLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLHdDQUF3QyxDQUFDLGdCQUFnQixDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDdEgsT0FBTSxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzVCLE9BQU0sTUFBTTtLQUNSO0FBQ0osT0FBTSxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDekIsT0FBTSxNQUFNO01BQ1A7SUFDRjtHQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsZUFBZSxHQUFHLFdBQVc7R0FDL0UsSUFBSSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDdkMsR0FBRSxLQUFLLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNsRixHQUFFLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ2xDLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsdUJBQXVCLEdBQUcsU0FBUyxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQzlGLEdBQUUsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDO0FBQ3BCLEdBQUUsQ0FBQywwQkFBMEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEUsR0FBRSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7S0FDYixNQUFNLENBQUMsV0FBVztBQUN0QixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0FBQ3ZDLEdBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtLQUNoQixNQUFNLENBQUMsbUJBQW1CO0FBQzlCLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQzNCLEdBQUUsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO0tBQ2IsTUFBTSxDQUFDLFlBQVk7QUFDdkIsT0FBTSxDQUFDO0FBQ1AsT0FBTSxDQUFDO0FBQ1AsT0FBTSx3Q0FBd0MsQ0FBQyxnQkFBZ0IsQ0FBQyx1QkFBdUI7QUFDdkYsTUFBSyxDQUFDO0lBQ0g7QUFDSCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsR0FBRyxXQUFXO0FBQ3hGLEdBQUUsOEJBQThCLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSw0QkFBNEIsQ0FBQyxFQUFFO0FBQ3pHLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsU0FBUyxDQUFDLHNCQUFzQixHQUFHLFNBQVMsS0FBSyxFQUFFO0FBQzdGLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQy9DLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsU0FBUyxDQUFDLHdCQUF3QixHQUFHLFdBQVc7QUFDMUYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDbkQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsc0JBQXNCLEdBQUcsV0FBVztBQUN4RixHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQztBQUNoRCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsR0FBRyxXQUFXO0dBQ3RGLHNDQUFzQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRTtBQUNoRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsR0FBRyxTQUFTLEtBQUssRUFBRTtBQUM3RixHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDLENBQUM7QUFDckQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsU0FBUyxDQUFDLGtCQUFrQixHQUFHLFNBQVMsS0FBSyxFQUFFLFNBQVMsRUFBRTtBQUNwRyxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNwRSxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsR0FBRyxXQUFXO0FBQzFGLEdBQUUsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDekMsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFdBQVc7R0FDMUU7QUFDRixLQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSx3Q0FBd0MsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsRUFBRTtBQUN0RyxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDakYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdEQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsWUFBWSxHQUFHLFdBQVc7QUFDOUUsR0FBRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDcEMsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFdBQVc7QUFDNUUsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7QUFDaEQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtDQUNBLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUE7Ozs7QUMzZ0I1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLElBQUksSUFBSSxHQUFHLFVBQTBCLENBQUM7Q0FDdEMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2hCLENBQUEsSUFBSSxNQUFNO0FBQ1YsS0FBSSxDQUFDLE9BQU8sVUFBVSxLQUFLLFdBQVcsSUFBSSxVQUFVO0FBQ3BELE1BQUssT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQztBQUM3QyxNQUFLLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxNQUFNLENBQUM7QUFDN0MsTUFBSyxPQUFPLElBQUksS0FBSyxXQUFXLElBQUksSUFBSSxDQUFDO0tBQ3JDLENBQUMsWUFBWSxFQUFFLE9BQU8sSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzdDLEtBQUksUUFBUSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7QUFDOUI7Q0FDQSxJQUFJLHlDQUF5QyxHQUFHQSxxQkFBNkQsQ0FBQztDQUM5RyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUseUNBQXlDLENBQUMsQ0FBQztDQUNyRSxJQUFJLHNCQUFzQixHQUFHLFVBQW9ELENBQUM7Q0FDbEYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLHNCQUFzQixDQUFDLENBQUM7Q0FDbEQsSUFBSSx3Q0FBd0MsR0FBR0Msb0JBQTRELENBQUM7Q0FDNUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLHdDQUF3QyxDQUFDLENBQUM7Q0FDcEUsSUFBSSxxQ0FBcUMsR0FBR0MsaUJBQXlELENBQUM7Q0FDdEcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLHFDQUFxQyxDQUFDLENBQUM7Q0FDakUsSUFBSSx1Q0FBdUMsR0FBR0MsbUJBQTJELENBQUM7Q0FDMUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLHVDQUF1QyxDQUFDLENBQUM7Q0FDbkUsSUFBSSxxQ0FBcUMsR0FBR0MsaUJBQXlELENBQUM7Q0FDdEcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLHFDQUFxQyxDQUFDLENBQUM7Q0FDakUsSUFBSSxxQ0FBcUMsR0FBR0MsaUJBQXlELENBQUM7Q0FDdEcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLHFDQUFxQyxDQUFDLENBQUM7Q0FDakUsSUFBSSxDQUFDLFlBQVksQ0FBQyx1Q0FBdUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDekUsSUFBSSxDQUFDLFlBQVksQ0FBQyw0Q0FBNEMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDOUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQ0FBZ0MsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDbEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQ0FBaUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDbkUsSUFBSSxDQUFDLFlBQVksQ0FBQywyQ0FBMkMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDN0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxvQ0FBb0MsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDdEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQ0FBaUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDbkUsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQ0FBZ0MsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFNBQVMsUUFBUSxFQUFFO0FBQ3BELEdBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzdELEVBQUMsQ0FBQztBQUNGLENBQUEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDNUQsQ0FBQSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7R0FDRSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxXQUFXLEdBQUcsZ0NBQWdDLENBQUM7RUFDL0U7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsU0FBUyxRQUFRLEVBQUU7R0FDbkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN6RyxFQUFDLENBQUM7QUFDRixDQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzdELENBQUEsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0dBQ0UsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsV0FBVyxHQUFHLGlDQUFpQyxDQUFDO0VBQ2pGO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEdBQUcsU0FBUyxRQUFRLEVBQUU7R0FDdEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDM0csRUFBQyxDQUFDO0FBQ0YsQ0FBQSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2hFLENBQUEsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0dBQ0UsS0FBSyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEdBQUcsb0NBQW9DLENBQUM7RUFDdkY7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsU0FBUyxRQUFRLEVBQUU7QUFDckQsR0FBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDN0QsRUFBQyxDQUFDO0FBQ0YsQ0FBQSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM3RCxDQUFBLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtHQUNFLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFdBQVcsR0FBRyxpQ0FBaUMsQ0FBQztFQUNqRjtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxTQUFTLFFBQVEsRUFBRTtHQUNsRCxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDdkcsRUFBQyxDQUFDO0FBQ0YsQ0FBQSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM1RCxDQUFBLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtHQUNFLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFdBQVcsR0FBRyxnQ0FBZ0MsQ0FBQztFQUMvRTtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixHQUFHLFNBQVMsUUFBUSxFQUFFO0dBQ3pELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMvRyxFQUFDLENBQUM7QUFDRixDQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbkUsQ0FBQSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7R0FDRSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLFdBQVcsR0FBRyx1Q0FBdUMsQ0FBQztFQUM3RjtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLEdBQUcsU0FBUyxRQUFRLEVBQUU7R0FDOUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNwSCxFQUFDLENBQUM7QUFDRixDQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3hFLENBQUEsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0dBQ0UsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLDRDQUE0QyxDQUFDO0VBQ3ZHO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUU7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxTQUFTLG1CQUFtQixFQUFFO0FBQ2xGLEdBQUUsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUUsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFFBQVEsR0FBRyxTQUFTLGVBQWUsRUFBRSxHQUFHLEVBQUU7QUFDekUsR0FBRSxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUc7QUFDZixLQUFJLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQ3RELEtBQUksSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDdEQsS0FBSSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLFVBQVUsRUFBRSxLQUFLLHdDQUF3QyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0FBQzdILElBQUcsQ0FBQztBQUNKO0dBQ0UsSUFBSSxlQUFlLEVBQUU7QUFDdkIsS0FBSSxHQUFHLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxDQUFDO0lBQ2hDO0dBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixFQUFDLENBQUM7RUFDRDtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxLQUFLLEVBQUU7R0FDakUsSUFBSSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQzFDLElBQUksR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUM7QUFDL0MsR0FBRSxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLDJCQUEyQixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNqRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQywyQkFBMkIsR0FBRyxTQUFTLEdBQUcsRUFBRSxNQUFNLEVBQUU7QUFDbkYsR0FBRSxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtBQUM3QixLQUFJLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFO0FBQzdCLE9BQU0sTUFBTTtNQUNQO0FBQ0wsS0FBSSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDeEMsS0FBSSxRQUFRLEtBQUs7QUFDakIsS0FBSSxLQUFLLENBQUM7T0FDSixJQUFJLEtBQUssMEJBQTBCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE9BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN6QixPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssQ0FBQztPQUNKLElBQUksS0FBSywwQkFBMEIsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDOUQsT0FBTSxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pCLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxDQUFDO0FBQ1YsT0FBTSxJQUFJLEtBQUssR0FBRyxJQUFJLHdDQUF3QyxDQUFDLGdCQUFnQixDQUFDO0FBQ2hGLE9BQU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsd0NBQXdDLENBQUMsZ0JBQWdCLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUN0SCxPQUFNLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUIsT0FBTSxNQUFNO0tBQ1I7QUFDSixPQUFNLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUN6QixPQUFNLE1BQU07TUFDUDtJQUNGO0dBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsZUFBZSxHQUFHLFdBQVc7R0FDcEUsSUFBSSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDdkMsR0FBRSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdkUsR0FBRSxPQUFPLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUNsQyxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsR0FBRyxTQUFTLE9BQU8sRUFBRSxNQUFNLEVBQUU7QUFDbkYsR0FBRSxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUM7QUFDcEIsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3hCLEdBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtLQUNoQixNQUFNLENBQUMsV0FBVztBQUN0QixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUN4QixHQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7S0FDaEIsTUFBTSxDQUFDLFdBQVc7QUFDdEIsT0FBTSxDQUFDO0FBQ1AsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDM0IsR0FBRSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7S0FDYixNQUFNLENBQUMsWUFBWTtBQUN2QixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxPQUFNLHdDQUF3QyxDQUFDLGdCQUFnQixDQUFDLHVCQUF1QjtBQUN2RixNQUFLLENBQUM7SUFDSDtBQUNILEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsV0FBVztBQUM5RCxHQUFFLDhCQUE4QixJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7QUFDL0UsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxTQUFTLEtBQUssRUFBRTtBQUNuRSxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzNELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsV0FBVztBQUM5RCxHQUFFLDhCQUE4QixJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7QUFDL0UsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxTQUFTLEtBQUssRUFBRTtBQUNuRSxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzNELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsV0FBVztHQUMvRDtBQUNGLEtBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLHdDQUF3QyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ3RHLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDdEUsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdEQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLFlBQVksR0FBRyxXQUFXO0FBQ25FLEdBQUUsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BDLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsV0FBVztBQUNqRSxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQztBQUNoRCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUU7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxTQUFTLG1CQUFtQixFQUFFO0FBQ25GLEdBQUUsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDN0UsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFFBQVEsR0FBRyxTQUFTLGVBQWUsRUFBRSxHQUFHLEVBQUU7QUFDMUUsR0FBRSxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUc7QUFDZixLQUFJLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO0tBQ2xELGtCQUFrQixFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksR0FBRyxTQUFTLEdBQUcsQ0FBQztLQUN2RixxQkFBcUIsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxJQUFJLEdBQUcsU0FBUyxHQUFHLENBQUM7QUFDakcsS0FBSSxTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMxRCxLQUFJLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQzFELElBQUcsQ0FBQztBQUNKO0dBQ0UsSUFBSSxlQUFlLEVBQUU7QUFDdkIsS0FBSSxHQUFHLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxDQUFDO0lBQ2hDO0dBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixFQUFDLENBQUM7RUFDRDtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxLQUFLLEVBQUU7R0FDbEUsSUFBSSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQzFDLElBQUksR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUM7QUFDaEQsR0FBRSxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLDJCQUEyQixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNsRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQywyQkFBMkIsR0FBRyxTQUFTLEdBQUcsRUFBRSxNQUFNLEVBQUU7QUFDcEYsR0FBRSxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtBQUM3QixLQUFJLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFO0FBQzdCLE9BQU0sTUFBTTtNQUNQO0FBQ0wsS0FBSSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDeEMsS0FBSSxRQUFRLEtBQUs7QUFDakIsS0FBSSxLQUFLLENBQUM7T0FDSixJQUFJLEtBQUssMEJBQTBCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE9BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN6QixPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssQ0FBQztPQUNKLElBQUksS0FBSywwQkFBMEIsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDOUQsT0FBTSxHQUFHLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbkMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLElBQUk7T0FDUCxJQUFJLEtBQUssMEJBQTBCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE9BQU0sR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3RDLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxDQUFDO09BQ0osSUFBSSxLQUFLLDhEQUE4RCxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUNoRyxPQUFNLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDOUIsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLENBQUM7T0FDSixJQUFJLEtBQUssMEJBQTBCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE9BQU0sR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3QixPQUFNLE1BQU07S0FDUjtBQUNKLE9BQU0sTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ3pCLE9BQU0sTUFBTTtNQUNQO0lBQ0Y7R0FDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsV0FBVztHQUNyRSxJQUFJLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUN2QyxHQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN4RSxHQUFFLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ2xDLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLHVCQUF1QixHQUFHLFNBQVMsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUNwRixHQUFFLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQztBQUNwQixHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDeEIsR0FBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0tBQ2hCLE1BQU0sQ0FBQyxXQUFXO0FBQ3RCLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixFQUFFLENBQUM7QUFDdEMsR0FBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0tBQ2hCLE1BQU0sQ0FBQyxtQkFBbUI7QUFDOUIsT0FBTSxDQUFDO0FBQ1AsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztBQUN6QyxHQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7S0FDaEIsTUFBTSxDQUFDLG1CQUFtQjtBQUM5QixPQUFNLElBQUk7QUFDVixPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUM3QixHQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRTtLQUNiLE1BQU0sQ0FBQyxTQUFTO0FBQ3BCLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzVCLEdBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtLQUNoQixNQUFNLENBQUMsV0FBVztBQUN0QixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFNBQVMsR0FBRztHQUMxQyxPQUFPLEVBQUUsQ0FBQztHQUNWLFFBQVEsRUFBRSxDQUFDO0dBQ1gsZ0JBQWdCLEVBQUUsQ0FBQztHQUNuQixnQkFBZ0IsRUFBRSxDQUFDO0dBQ25CLG1CQUFtQixFQUFFLENBQUM7QUFDeEIsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsV0FBVztBQUMvRCxHQUFFLDhCQUE4QixJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7QUFDL0UsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxTQUFTLEtBQUssRUFBRTtBQUNwRSxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzNELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsR0FBRyxXQUFXO0dBQzNFLHNDQUFzQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRTtBQUNoRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMscUJBQXFCLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDbEYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3JELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxLQUFLLEVBQUUsU0FBUyxFQUFFO0FBQ3pGLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3BFLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsR0FBRyxXQUFXO0FBQy9FLEdBQUUsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEMsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLHdCQUF3QixHQUFHLFdBQVc7R0FDOUUsc0NBQXNDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFO0FBQ25GLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsR0FBRyxTQUFTLEtBQUssRUFBRTtBQUNyRixHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDLENBQUM7QUFDeEQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsR0FBRyxTQUFTLEtBQUssRUFBRSxTQUFTLEVBQUU7QUFDNUYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDdkUsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLDBCQUEwQixHQUFHLFdBQVc7QUFDbEYsR0FBRSxPQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMzQyxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsWUFBWSxHQUFHLFdBQVc7QUFDcEUsR0FBRSxrRUFBa0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2xILEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDekUsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN6RCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFdBQVc7QUFDbkUsR0FBRSw4QkFBOEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO0FBQy9FLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDeEUsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMzRCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6RDtBQUNBO0FBQ0E7QUFDQSxDQUFBLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsU0FBUyxtQkFBbUIsRUFBRTtBQUN0RixHQUFFLE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDaEYsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsUUFBUSxHQUFHLFNBQVMsZUFBZSxFQUFFLEdBQUcsRUFBRTtBQUM3RSxHQUFNLElBQUcsR0FBRyxHQUFHO0tBQ1gsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLHNCQUFzQixFQUFFO0tBQzNFLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUM7QUFDOUQsS0FBSTtBQUNKO0dBQ0UsSUFBSSxlQUFlLEVBQUU7QUFDdkIsS0FBSSxHQUFHLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxDQUFDO0lBQ2hDO0dBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixFQUFDLENBQUM7RUFDRDtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLEtBQUssRUFBRTtHQUNyRSxJQUFJLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDMUMsSUFBSSxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDO0FBQ25ELEdBQUUsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLDJCQUEyQixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNyRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLDJCQUEyQixHQUFHLFNBQVMsR0FBRyxFQUFFLE1BQU0sRUFBRTtBQUN2RixHQUFFLE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFO0FBQzdCLEtBQUksSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUU7QUFDN0IsT0FBTSxNQUFNO01BQ1A7QUFDTCxLQUFJLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUN4QyxLQUFJLFFBQVEsS0FBSztBQUNqQixLQUFJLEtBQUssQ0FBQztPQUNKLElBQUksS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUM7QUFDdEQsT0FBTSxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQzVGLE9BQU0sR0FBRyxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BDLE9BQU0sTUFBTTtLQUNSO0FBQ0osT0FBTSxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDekIsT0FBTSxNQUFNO01BQ1A7SUFDRjtHQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsZUFBZSxHQUFHLFdBQVc7R0FDeEUsSUFBSSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDdkMsR0FBRSxLQUFLLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMzRSxHQUFFLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ2xDLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsdUJBQXVCLEdBQUcsU0FBUyxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQ3ZGLEdBQUUsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDO0FBQ3BCLEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0FBQ3ZDLEdBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtLQUNoQixNQUFNLENBQUMsb0JBQW9CO0FBQy9CLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztBQUNQLE9BQU0sS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsdUJBQXVCO0FBQzdELE1BQUssQ0FBQztJQUNIO0FBQ0gsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsc0JBQXNCLEdBQUcsV0FBVztHQUMvRTtBQUNGLEtBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLEVBQUU7QUFDcEYsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsc0JBQXNCLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDdEYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM5RCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEdBQUcsU0FBUyxTQUFTLEVBQUUsU0FBUyxFQUFFO0dBQy9GLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNoSCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsR0FBRyxXQUFXO0FBQ25GLEdBQUUsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDekMsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsU0FBUyxtQkFBbUIsRUFBRTtBQUNuRixHQUFFLE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzdFLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxRQUFRLEdBQUcsU0FBUyxlQUFlLEVBQUUsR0FBRyxFQUFFO0FBQzFFLEdBQU0sSUFBRyxHQUFHLEdBQUc7QUFDZixLQUFJLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQzFELEtBQUksUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUM7QUFDcEUsS0FBSTtBQUNKO0dBQ0UsSUFBSSxlQUFlLEVBQUU7QUFDdkIsS0FBSSxHQUFHLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxDQUFDO0lBQ2hDO0dBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixFQUFDLENBQUM7RUFDRDtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxLQUFLLEVBQUU7R0FDbEUsSUFBSSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQzFDLElBQUksR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUM7QUFDaEQsR0FBRSxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLDJCQUEyQixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNsRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQywyQkFBMkIsR0FBRyxTQUFTLEdBQUcsRUFBRSxNQUFNLEVBQUU7QUFDcEYsR0FBRSxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtBQUM3QixLQUFJLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFO0FBQzdCLE9BQU0sTUFBTTtNQUNQO0FBQ0wsS0FBSSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDeEMsS0FBSSxRQUFRLEtBQUs7QUFDakIsS0FBSSxLQUFLLENBQUM7T0FDSixJQUFJLEtBQUssMEJBQTBCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE9BQU0sR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3QixPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssQ0FBQztPQUNKLElBQUksS0FBSywyQkFBMkIsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDN0QsT0FBTSxHQUFHLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdCLE9BQU0sTUFBTTtLQUNSO0FBQ0osT0FBTSxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDekIsT0FBTSxNQUFNO01BQ1A7SUFDRjtHQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLGVBQWUsR0FBRyxXQUFXO0dBQ3JFLElBQUksTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ3ZDLEdBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3hFLEdBQUUsT0FBTyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDbEMsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsdUJBQXVCLEdBQUcsU0FBUyxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQ3BGLEdBQUUsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDO0FBQ3BCLEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUM1QixHQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7S0FDaEIsTUFBTSxDQUFDLFdBQVc7QUFDdEIsT0FBTSxDQUFDO0FBQ1AsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7R0FDMUIsSUFBSSxDQUFDLEVBQUU7S0FDTCxNQUFNLENBQUMsU0FBUztBQUNwQixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsV0FBVztBQUNuRSxHQUFFLDhCQUE4QixJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7QUFDL0UsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxTQUFTLEtBQUssRUFBRTtBQUN4RSxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzNELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsV0FBVztBQUNuRSxHQUFFLCtCQUErQixJQUFJLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUU7QUFDMUYsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxTQUFTLEtBQUssRUFBRTtBQUN4RSxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzVELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNyRDtBQUNBO0FBQ0E7QUFDQSxDQUFBLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLFNBQVMsbUJBQW1CLEVBQUU7QUFDbEYsR0FBRSxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM1RSxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsUUFBUSxHQUFHLFNBQVMsZUFBZSxFQUFFLEdBQUcsRUFBRTtBQUN6RSxHQUFFLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRztBQUNmLEtBQUkseUJBQXlCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMxRSxLQUFJLHFCQUFxQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdEUsS0FBSSx3QkFBd0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDO0FBQ3BGLEtBQUksY0FBYyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUM7QUFDMUUsS0FBSSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDO0FBQy9FLEtBQUksZ0NBQWdDLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQztBQUM1RixLQUFJLGdCQUFnQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDN0QsMkJBQTJCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxHQUFHLFNBQVMsR0FBRyxDQUFDO0FBQ3BHLEtBQUksWUFBWSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDOUQsS0FBSSxhQUFhLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMvRCxLQUFJLG9CQUFvQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDdEUsS0FBSSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3BFLEtBQUksc0JBQXNCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQztBQUNuRixLQUFJLHFCQUFxQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDdkUsS0FBSSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDO0FBQzdFLEtBQUksWUFBWSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUM7QUFDekUsS0FBSSxxQkFBcUIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDO0FBQ2xGLEtBQUksZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUNuRSxJQUFHLENBQUM7QUFDSjtHQUNFLElBQUksZUFBZSxFQUFFO0FBQ3ZCLEtBQUksR0FBRyxDQUFDLG9CQUFvQixHQUFHLEdBQUcsQ0FBQztJQUNoQztHQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsRUFBQyxDQUFDO0VBQ0Q7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLGlCQUFpQixHQUFHLFNBQVMsS0FBSyxFQUFFO0dBQ2pFLElBQUksTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUMxQyxJQUFJLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDO0FBQy9DLEdBQUUsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQywyQkFBMkIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDakYsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsMkJBQTJCLEdBQUcsU0FBUyxHQUFHLEVBQUUsTUFBTSxFQUFFO0FBQ25GLEdBQUUsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUU7QUFDN0IsS0FBSSxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBRTtBQUM3QixPQUFNLE1BQU07TUFDUDtBQUNMLEtBQUksSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ3hDLEtBQUksUUFBUSxLQUFLO0FBQ2pCLEtBQUksS0FBSyxDQUFDO09BQ0osSUFBSSxLQUFLLDBCQUEwQixNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUM3RCxPQUFNLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM5QyxPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssQ0FBQztPQUNKLElBQUksS0FBSywwQkFBMEIsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7QUFDN0QsT0FBTSxHQUFHLENBQUMsd0JBQXdCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLENBQUM7T0FDSixJQUFJLEtBQUssMkJBQTJCLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQzdELE9BQU0sR0FBRyxDQUFDLDJCQUEyQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdDLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxDQUFDO09BQ0osSUFBSSxLQUFLLDJCQUEyQixNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUM3RCxPQUFNLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuQyxPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssQ0FBQztPQUNKLElBQUksS0FBSywyQkFBMkIsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDN0QsT0FBTSxHQUFHLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDeEMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLENBQUM7T0FDSixJQUFJLEtBQUssMkJBQTJCLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQzdELE9BQU0sR0FBRyxDQUFDLG1DQUFtQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JELE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxDQUFDO09BQ0osSUFBSSxLQUFLLDBCQUEwQixNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUM3RCxPQUFNLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQyxPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssQ0FBQztPQUNKLElBQUksTUFBTSxrQ0FBa0MsTUFBTSxDQUFDLFdBQVcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDMUgsT0FBTSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtTQUN0QyxHQUFHLENBQUMsMEJBQTBCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0M7QUFDUCxPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssQ0FBQztPQUNKLElBQUksS0FBSywwQkFBMEIsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDOUQsT0FBTSxHQUFHLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2pDLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxFQUFFO09BQ0wsSUFBSSxLQUFLLDBCQUEwQixNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUM3RCxPQUFNLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssRUFBRTtPQUNMLElBQUksS0FBSywwQkFBMEIsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7QUFDN0QsT0FBTSxHQUFHLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLEVBQUU7T0FDTCxJQUFJLEtBQUssMEJBQTBCLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQzdELE9BQU0sR0FBRyxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3ZDLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxFQUFFO09BQ0wsSUFBSSxLQUFLLDJCQUEyQixNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUM3RCxPQUFNLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzQyxPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssRUFBRTtPQUNMLElBQUksS0FBSywwQkFBMEIsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7QUFDN0QsT0FBTSxHQUFHLENBQUMsd0JBQXdCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLEVBQUU7T0FDTCxJQUFJLEtBQUssMkJBQTJCLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQzdELE9BQU0sR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxFQUFFO09BQ0wsSUFBSSxLQUFLLDJCQUEyQixNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUM3RCxPQUFNLEdBQUcsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLEVBQUU7T0FDTCxJQUFJLEtBQUssMkJBQTJCLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQzdELE9BQU0sR0FBRyxDQUFDLHdCQUF3QixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFDLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxFQUFFO09BQ0wsSUFBSSxLQUFLLDBCQUEwQixNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUM5RCxPQUFNLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQyxPQUFNLE1BQU07S0FDUjtBQUNKLE9BQU0sTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ3pCLE9BQU0sTUFBTTtNQUNQO0lBQ0Y7R0FDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsV0FBVztHQUNwRSxJQUFJLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUN2QyxHQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN2RSxHQUFFLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ2xDLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLHVCQUF1QixHQUFHLFNBQVMsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUNuRixHQUFFLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQztBQUNwQixHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsNEJBQTRCLEVBQUUsQ0FBQztBQUM3QyxHQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtLQUNYLE1BQU0sQ0FBQyxVQUFVO0FBQ3JCLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLHdCQUF3QixFQUFFLENBQUM7QUFDekMsR0FBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7S0FDWCxNQUFNLENBQUMsVUFBVTtBQUNyQixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQywyQkFBMkIsRUFBRSxDQUFDO0dBQzFDLElBQUksQ0FBQyxFQUFFO0tBQ0wsTUFBTSxDQUFDLFNBQVM7QUFDcEIsT0FBTSxDQUFDO0FBQ1AsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztHQUNoQyxJQUFJLENBQUMsRUFBRTtLQUNMLE1BQU0sQ0FBQyxTQUFTO0FBQ3BCLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUM7R0FDckMsSUFBSSxDQUFDLEVBQUU7S0FDTCxNQUFNLENBQUMsU0FBUztBQUNwQixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxtQ0FBbUMsRUFBRSxDQUFDO0dBQ2xELElBQUksQ0FBQyxFQUFFO0tBQ0wsTUFBTSxDQUFDLFNBQVM7QUFDcEIsT0FBTSxDQUFDO0FBQ1AsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztBQUNwQyxHQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtLQUNYLE1BQU0sQ0FBQyxVQUFVO0FBQ3JCLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLDhCQUE4QixFQUFFLENBQUM7QUFDL0MsR0FBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0tBQ2hCLE1BQU0sQ0FBQyxnQkFBZ0I7QUFDM0IsT0FBTSxDQUFDO0FBQ1AsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDaEMsR0FBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0tBQ2hCLE1BQU0sQ0FBQyxXQUFXO0FBQ3RCLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixFQUFFLENBQUM7QUFDakMsR0FBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7S0FDWCxNQUFNLENBQUMsVUFBVTtBQUNyQixPQUFNLEVBQUU7QUFDUixPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO0FBQ3hDLEdBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO0tBQ1gsTUFBTSxDQUFDLFVBQVU7QUFDckIsT0FBTSxFQUFFO0FBQ1IsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMscUJBQXFCLEVBQUUsQ0FBQztBQUN0QyxHQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtLQUNYLE1BQU0sQ0FBQyxVQUFVO0FBQ3JCLE9BQU0sRUFBRTtBQUNSLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLHlCQUF5QixFQUFFLENBQUM7R0FDeEMsSUFBSSxDQUFDLEVBQUU7S0FDTCxNQUFNLENBQUMsU0FBUztBQUNwQixPQUFNLEVBQUU7QUFDUixPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0FBQ3pDLEdBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO0tBQ1gsTUFBTSxDQUFDLFVBQVU7QUFDckIsT0FBTSxFQUFFO0FBQ1IsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztHQUNsQyxJQUFJLENBQUMsRUFBRTtLQUNMLE1BQU0sQ0FBQyxTQUFTO0FBQ3BCLE9BQU0sRUFBRTtBQUNSLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLGVBQWUsRUFBRSxDQUFDO0dBQzlCLElBQUksQ0FBQyxFQUFFO0tBQ0wsTUFBTSxDQUFDLFNBQVM7QUFDcEIsT0FBTSxFQUFFO0FBQ1IsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztHQUN2QyxJQUFJLENBQUMsRUFBRTtLQUNMLE1BQU0sQ0FBQyxTQUFTO0FBQ3BCLE9BQU0sRUFBRTtBQUNSLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixFQUFFLENBQUM7QUFDcEMsR0FBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0tBQ2hCLE1BQU0sQ0FBQyxXQUFXO0FBQ3RCLE9BQU0sRUFBRTtBQUNSLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLDRCQUE0QixHQUFHLFdBQVc7QUFDbkYsR0FBRSw4QkFBOEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQzlFLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyw0QkFBNEIsR0FBRyxTQUFTLEtBQUssRUFBRTtBQUN4RixHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3hELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsR0FBRyxXQUFXO0FBQy9FLEdBQUUsOEJBQThCLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRTtBQUM5RSxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsd0JBQXdCLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDcEYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN4RCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsMkJBQTJCLEdBQUcsV0FBVztBQUNsRixHQUFFLCtCQUErQixJQUFJLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUU7QUFDMUYsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLDJCQUEyQixHQUFHLFNBQVMsS0FBSyxFQUFFO0FBQ3ZGLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDNUQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLGlCQUFpQixHQUFHLFdBQVc7QUFDeEUsR0FBRSwrQkFBK0IsSUFBSSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFO0FBQzFGLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLEtBQUssRUFBRTtBQUM3RSxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzVELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsR0FBRyxXQUFXO0FBQzdFLEdBQUUsK0JBQStCLElBQUksQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRTtBQUMxRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsc0JBQXNCLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDbEYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM1RCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsbUNBQW1DLEdBQUcsV0FBVztBQUMxRixHQUFFLCtCQUErQixJQUFJLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUU7QUFDMUYsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLG1DQUFtQyxHQUFHLFNBQVMsS0FBSyxFQUFFO0FBQy9GLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDNUQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLG1CQUFtQixHQUFHLFdBQVc7QUFDMUUsR0FBRSw4QkFBOEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQzlFLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsR0FBRyxTQUFTLEtBQUssRUFBRTtBQUMvRSxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3hELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyw4QkFBOEIsR0FBRyxXQUFXO0dBQ25GLHNDQUFzQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRTtBQUNoRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsOEJBQThCLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDMUYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3JELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsMEJBQTBCLEdBQUcsU0FBUyxLQUFLLEVBQUUsU0FBUyxFQUFFO0FBQ2pHLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3BFLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxnQ0FBZ0MsR0FBRyxXQUFXO0FBQ3ZGLEdBQUUsT0FBTyxJQUFJLENBQUMsOEJBQThCLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDakQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLGVBQWUsR0FBRyxXQUFXO0FBQ3RFLEdBQUUsOEJBQThCLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtBQUMvRSxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsZUFBZSxHQUFHLFNBQVMsS0FBSyxFQUFFO0FBQzNFLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDM0QsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLGdCQUFnQixHQUFHLFdBQVc7QUFDdkUsR0FBRSw4QkFBOEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQy9FLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsR0FBRyxTQUFTLEtBQUssRUFBRTtBQUM1RSxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3pELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsR0FBRyxXQUFXO0FBQzlFLEdBQUUsOEJBQThCLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRTtBQUMvRSxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsdUJBQXVCLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDbkYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN6RCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMscUJBQXFCLEdBQUcsV0FBVztBQUM1RSxHQUFFLDhCQUE4QixJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUU7QUFDL0UsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLHFCQUFxQixHQUFHLFNBQVMsS0FBSyxFQUFFO0FBQ2pGLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDekQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLHlCQUF5QixHQUFHLFdBQVc7QUFDaEYsR0FBRSwrQkFBK0IsSUFBSSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFO0FBQzNGLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsR0FBRyxTQUFTLEtBQUssRUFBRTtBQUNyRixHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzdELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsR0FBRyxXQUFXO0FBQy9FLEdBQUUsOEJBQThCLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRTtBQUMvRSxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsd0JBQXdCLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDcEYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN6RCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEdBQUcsV0FBVztBQUMxRSxHQUFFLCtCQUErQixJQUFJLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUU7QUFDM0YsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLG1CQUFtQixHQUFHLFNBQVMsS0FBSyxFQUFFO0FBQy9FLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDN0QsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLGVBQWUsR0FBRyxXQUFXO0FBQ3RFLEdBQUUsK0JBQStCLElBQUksQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRTtBQUMzRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsZUFBZSxHQUFHLFNBQVMsS0FBSyxFQUFFO0FBQzNFLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDN0QsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLHdCQUF3QixHQUFHLFdBQVc7QUFDL0UsR0FBRSwrQkFBK0IsSUFBSSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFO0FBQzNGLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsR0FBRyxTQUFTLEtBQUssRUFBRTtBQUNwRixHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzdELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsR0FBRyxXQUFXO0FBQzFFLEdBQUUsOEJBQThCLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRTtBQUNoRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDL0UsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM1RCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBLENBQUEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxTQUFTLG1CQUFtQixFQUFFO0FBQ3pGLEdBQUUsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNuRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLEdBQUcsU0FBUyxlQUFlLEVBQUUsR0FBRyxFQUFFO0FBQ2hGLEdBQUUsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHO0tBQ1gsUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUU7S0FDckQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLGVBQWUsQ0FBQztLQUNyRSxpQkFBaUIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUU7QUFDM0UsS0FBSSxxQ0FBcUMsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDO0tBQ3BGLG1CQUFtQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRTtBQUMvRSxLQUFJLHVDQUF1QyxDQUFDLHFCQUFxQixDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUM7QUFDNUYsS0FBSSxVQUFVLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUN2RCxpQkFBaUIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUU7QUFDM0UsS0FBSSxxQ0FBcUMsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDO0tBQ3BGLGVBQWUsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsS0FBSyxJQUFJLEdBQUcsU0FBUyxHQUFHLENBQUM7S0FDckYsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEtBQUssSUFBSSxHQUFHLFNBQVMsR0FBRyxDQUFDO0tBQ3RGLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxLQUFLLElBQUksR0FBRyxTQUFTLEdBQUcsQ0FBQztLQUN6RixvQkFBb0IsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsS0FBSyxJQUFJLEdBQUcsU0FBUyxHQUFHLENBQUM7QUFDOUYsS0FBSSxZQUFZLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM5RCxLQUFJLGNBQWMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDO0FBQzNFLEtBQUksa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLHFCQUFxQixFQUFFLEtBQUsscUNBQXFDLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7QUFDeEosS0FBSSxtQkFBbUIsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsc0JBQXNCLEVBQUUsS0FBSyxxQ0FBcUMsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztLQUN2SixZQUFZLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRTtLQUM3RCxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDO0tBQ3pELGNBQWMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztBQUNoSCxLQUFJLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO0FBQzdELEtBQUksSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7QUFDdkQsS0FBSSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLFVBQVUsRUFBRSxLQUFLLHdDQUF3QyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0tBQ3pILGdCQUFnQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRTtBQUN6RSxLQUFJLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDO0FBQ3pELElBQUcsQ0FBQztBQUNKO0dBQ0UsSUFBSSxlQUFlLEVBQUU7QUFDdkIsS0FBSSxHQUFHLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxDQUFDO0lBQ2hDO0dBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixFQUFDLENBQUM7RUFDRDtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLEtBQUssRUFBRTtHQUN4RSxJQUFJLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDMUMsSUFBSSxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDO0FBQ3RELEdBQUUsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLDJCQUEyQixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN4RixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLDJCQUEyQixHQUFHLFNBQVMsR0FBRyxFQUFFLE1BQU0sRUFBRTtBQUMxRixHQUFFLE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFO0FBQzdCLEtBQUksSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUU7QUFDN0IsT0FBTSxNQUFNO01BQ1A7QUFDTCxLQUFJLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUN4QyxLQUFJLFFBQVEsS0FBSztBQUNqQixLQUFJLEtBQUssQ0FBQztPQUNKLElBQUksS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUM7QUFDakUsT0FBTSxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQ3ZHLE9BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN6QixPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssQ0FBQztBQUNWLE9BQU0sSUFBSSxLQUFLLEdBQUcsSUFBSSxxQ0FBcUMsQ0FBQyxtQkFBbUIsQ0FBQztBQUNoRixPQUFNLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxDQUFDLG1CQUFtQixDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDdEgsT0FBTSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbEMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLENBQUM7QUFDVixPQUFNLElBQUksS0FBSyxHQUFHLElBQUksdUNBQXVDLENBQUMscUJBQXFCLENBQUM7QUFDcEYsT0FBTSxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxxQkFBcUIsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQzFILE9BQU0sR0FBRyxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BDLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxDQUFDO09BQ0osSUFBSSxLQUFLLDBCQUEwQixNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUM3RCxPQUFNLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDL0IsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLENBQUM7QUFDVixPQUFNLElBQUksS0FBSyxHQUFHLElBQUkscUNBQXFDLENBQUMsbUJBQW1CLENBQUM7QUFDaEYsT0FBTSxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxtQkFBbUIsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQ3RILE9BQU0sR0FBRyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2xDLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxFQUFFO09BQ0wsSUFBSSxLQUFLLDBCQUEwQixNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUM5RCxPQUFNLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDaEMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLEVBQUU7T0FDTCxJQUFJLEtBQUssMEJBQTBCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE9BQU0sR0FBRyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqQyxPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssRUFBRTtPQUNMLElBQUksS0FBSywwQkFBMEIsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDOUQsT0FBTSxHQUFHLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLEVBQUU7T0FDTCxJQUFJLEtBQUssMEJBQTBCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE9BQU0sR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxFQUFFO09BQ0wsSUFBSSxLQUFLLDBCQUEwQixNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUM3RCxPQUFNLEdBQUcsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLEVBQUU7T0FDTCxJQUFJLEtBQUssMkJBQTJCLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQzdELE9BQU0sR0FBRyxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25DLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxFQUFFO0FBQ1gsT0FBTSxJQUFJLEtBQUssR0FBRyxJQUFJLHFDQUFxQyxDQUFDLHdCQUF3QixDQUFDO0FBQ3JGLE9BQU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMscUNBQXFDLENBQUMsd0JBQXdCLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUMzSCxPQUFNLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2QyxPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssRUFBRTtBQUNYLE9BQU0sSUFBSSxLQUFLLEdBQUcsSUFBSSxxQ0FBcUMsQ0FBQyx5QkFBeUIsQ0FBQztBQUN0RixPQUFNLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxDQUFDLHlCQUF5QixDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDNUgsT0FBTSxHQUFHLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDeEMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLEVBQUU7T0FDTCxJQUFJLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDO0FBQ3JELE9BQU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUMzRixPQUFNLEdBQUcsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDN0IsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLEVBQUU7T0FDTCxJQUFJLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDO0FBQ3JELE9BQU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUMzRixPQUFNLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuQyxPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssRUFBRTtPQUNMLElBQUksS0FBSywwQkFBMEIsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDOUQsT0FBTSxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzVCLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxFQUFFO09BQ0wsSUFBSSxLQUFLLDBCQUEwQixNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUM5RCxPQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekIsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLElBQUk7QUFDYixPQUFNLElBQUksS0FBSyxHQUFHLElBQUksd0NBQXdDLENBQUMsZ0JBQWdCLENBQUM7QUFDaEYsT0FBTSxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxnQkFBZ0IsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQ3RILE9BQU0sR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1QixPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssSUFBSTtBQUNiLE9BQU0sSUFBSSxLQUFLLEdBQUcsSUFBSSxzQkFBc0IsQ0FBQyxHQUFHLENBQUM7QUFDakQsT0FBTSxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUN2RixPQUFNLEdBQUcsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakMsT0FBTSxNQUFNO0tBQ1I7QUFDSixPQUFNLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUN6QixPQUFNLE1BQU07TUFDUDtJQUNGO0dBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsV0FBVztHQUMzRSxJQUFJLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUN2QyxHQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzlFLEdBQUUsT0FBTyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDbEMsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyx1QkFBdUIsR0FBRyxTQUFTLE9BQU8sRUFBRSxNQUFNLEVBQUU7QUFDMUYsR0FBRSxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUM7QUFDcEIsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzVCLEdBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtLQUNoQixNQUFNLENBQUMsb0JBQW9CO0FBQy9CLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztPQUNELEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLHVCQUF1QjtBQUN4RSxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0FBQ3JDLEdBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtLQUNoQixNQUFNLENBQUMsb0JBQW9CO0FBQy9CLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztBQUNQLE9BQU0scUNBQXFDLENBQUMsbUJBQW1CLENBQUMsdUJBQXVCO0FBQ3ZGLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUM7QUFDdkMsR0FBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0tBQ2hCLE1BQU0sQ0FBQyxvQkFBb0I7QUFDL0IsT0FBTSxDQUFDO0FBQ1AsT0FBTSxDQUFDO0FBQ1AsT0FBTSx1Q0FBdUMsQ0FBQyxxQkFBcUIsQ0FBQyx1QkFBdUI7QUFDM0YsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDOUIsR0FBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7S0FDWCxNQUFNLENBQUMsVUFBVTtBQUNyQixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0FBQ3JDLEdBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtLQUNoQixNQUFNLENBQUMsb0JBQW9CO0FBQy9CLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztBQUNQLE9BQU0scUNBQXFDLENBQUMsbUJBQW1CLENBQUMsdUJBQXVCO0FBQ3ZGLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixFQUFFLENBQUM7QUFDbkMsR0FBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0tBQ2hCLE1BQU0sQ0FBQyxtQkFBbUI7QUFDOUIsT0FBTSxFQUFFO0FBQ1IsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztBQUNwQyxHQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7S0FDaEIsTUFBTSxDQUFDLG1CQUFtQjtBQUM5QixPQUFNLEVBQUU7QUFDUixPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0FBQ3ZDLEdBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtLQUNoQixNQUFNLENBQUMsbUJBQW1CO0FBQzlCLE9BQU0sRUFBRTtBQUNSLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixFQUFFLENBQUM7QUFDeEMsR0FBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0tBQ2hCLE1BQU0sQ0FBQyxtQkFBbUI7QUFDOUIsT0FBTSxFQUFFO0FBQ1IsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDaEMsR0FBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7S0FDWCxNQUFNLENBQUMsVUFBVTtBQUNyQixPQUFNLEVBQUU7QUFDUixPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0dBQ2hDLElBQUksQ0FBQyxFQUFFO0tBQ0wsTUFBTSxDQUFDLFNBQVM7QUFDcEIsT0FBTSxFQUFFO0FBQ1IsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMscUJBQXFCLEVBQUUsQ0FBQztBQUN0QyxHQUFFLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtLQUNiLE1BQU0sQ0FBQyxZQUFZO0FBQ3ZCLE9BQU0sRUFBRTtBQUNSLE9BQU0sQ0FBQztBQUNQLE9BQU0scUNBQXFDLENBQUMsd0JBQXdCLENBQUMsdUJBQXVCO0FBQzVGLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUM7QUFDdkMsR0FBRSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7S0FDYixNQUFNLENBQUMsWUFBWTtBQUN2QixPQUFNLEVBQUU7QUFDUixPQUFNLENBQUM7QUFDUCxPQUFNLHFDQUFxQyxDQUFDLHlCQUF5QixDQUFDLHVCQUF1QjtBQUM3RixNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUNoQyxHQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7S0FDaEIsTUFBTSxDQUFDLG9CQUFvQjtBQUMvQixPQUFNLEVBQUU7QUFDUixPQUFNLENBQUM7QUFDUCxPQUFNLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLHVCQUF1QjtBQUM1RCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0FBQ2xDLEdBQUUsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO0tBQ2IsTUFBTSxDQUFDLFlBQVk7QUFDdkIsT0FBTSxFQUFFO0FBQ1IsT0FBTSxDQUFDO0FBQ1AsT0FBTSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyx1QkFBdUI7QUFDNUQsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDM0IsR0FBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0tBQ2hCLE1BQU0sQ0FBQyxXQUFXO0FBQ3RCLE9BQU0sRUFBRTtBQUNSLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3hCLEdBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtLQUNoQixNQUFNLENBQUMsV0FBVztBQUN0QixPQUFNLEVBQUU7QUFDUixPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUMzQixHQUFFLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtLQUNiLE1BQU0sQ0FBQyxZQUFZO0FBQ3ZCLE9BQU0sSUFBSTtBQUNWLE9BQU0sQ0FBQztBQUNQLE9BQU0sd0NBQXdDLENBQUMsZ0JBQWdCLENBQUMsdUJBQXVCO0FBQ3ZGLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixFQUFFLENBQUM7QUFDcEMsR0FBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0tBQ2hCLE1BQU0sQ0FBQyxvQkFBb0I7QUFDL0IsT0FBTSxJQUFJO0FBQ1YsT0FBTSxDQUFDO0FBQ1AsT0FBTSxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsdUJBQXVCO0FBQ3hELE1BQUssQ0FBQztJQUNIO0FBQ0gsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNwRjtBQUNBO0FBQ0E7QUFDQSxDQUFBLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsU0FBUyxtQkFBbUIsRUFBRTtBQUM5RixHQUFFLE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3hGLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLGVBQWUsRUFBRSxHQUFHLEVBQUU7QUFDckYsR0FBRSxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUc7QUFDZixLQUFJLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQ3RELEtBQUksVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7S0FDeEQsZUFBZSxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksR0FBRyxTQUFTLEdBQUcsQ0FBQztLQUNwRixnQkFBZ0IsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsU0FBUyxHQUFHLENBQUM7S0FDckYsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxHQUFHLFNBQVMsR0FBRyxDQUFDO0tBQ3hGLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksR0FBRyxTQUFTLEdBQUcsQ0FBQztBQUM3RixLQUFJLE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsVUFBVSxFQUFFLEtBQUsseUNBQXlDLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7S0FDM0gsZUFBZSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRTtBQUN2RSxLQUFJLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDO0FBQ3pELEtBQUksV0FBVyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDNUQsS0FBSSxjQUFjLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNoRSxLQUFJLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLHFDQUFxQyxDQUFDLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0FBQ3hKLEtBQUksbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLHNCQUFzQixFQUFFLEtBQUsscUNBQXFDLENBQUMseUJBQXlCLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7S0FDdkosbUJBQW1CLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLHNCQUFzQixFQUFFO0tBQzNFLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUM7QUFDOUQsS0FBSSxRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztLQUN2RCxjQUFjLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEtBQUssS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7QUFDaEgsS0FBSSxXQUFXLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUN6RCxlQUFlLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEtBQUssSUFBSSxHQUFHLFNBQVMsR0FBRyxDQUFDO0tBQ3JGLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLElBQUksR0FBRyxTQUFTLEdBQUcsQ0FBQztBQUM3RixJQUFHLENBQUM7QUFDSjtHQUNFLElBQUksZUFBZSxFQUFFO0FBQ3ZCLEtBQUksR0FBRyxDQUFDLG9CQUFvQixHQUFHLEdBQUcsQ0FBQztJQUNoQztHQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsRUFBQyxDQUFDO0VBQ0Q7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFNBQVMsS0FBSyxFQUFFO0dBQzdFLElBQUksTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUMxQyxJQUFJLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDO0FBQzNELEdBQUUsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDN0YsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQywyQkFBMkIsR0FBRyxTQUFTLEdBQUcsRUFBRSxNQUFNLEVBQUU7QUFDL0YsR0FBRSxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtBQUM3QixLQUFJLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFO0FBQzdCLE9BQU0sTUFBTTtNQUNQO0FBQ0wsS0FBSSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDeEMsS0FBSSxRQUFRLEtBQUs7QUFDakIsS0FBSSxLQUFLLENBQUM7T0FDSixJQUFJLEtBQUssMEJBQTBCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE9BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN6QixPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssQ0FBQztPQUNKLElBQUksS0FBSywwQkFBMEIsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDOUQsT0FBTSxHQUFHLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQy9CLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxDQUFDO09BQ0osSUFBSSxLQUFLLDBCQUEwQixNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUM5RCxPQUFNLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDaEMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLENBQUM7T0FDSixJQUFJLEtBQUssMEJBQTBCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE9BQU0sR0FBRyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqQyxPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssQ0FBQztPQUNKLElBQUksS0FBSywwQkFBMEIsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDOUQsT0FBTSxHQUFHLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLENBQUM7T0FDSixJQUFJLEtBQUssMEJBQTBCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE9BQU0sR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxDQUFDO0FBQ1YsT0FBTSxJQUFJLEtBQUssR0FBRyxJQUFJLHlDQUF5QyxDQUFDLGlCQUFpQixDQUFDO0FBQ2xGLE9BQU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMseUNBQXlDLENBQUMsaUJBQWlCLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUN4SCxPQUFNLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUIsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLENBQUM7QUFDVixPQUFNLElBQUksS0FBSyxHQUFHLElBQUksc0JBQXNCLENBQUMsR0FBRyxDQUFDO0FBQ2pELE9BQU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDdkYsT0FBTSxHQUFHLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hDLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxDQUFDO09BQ0osSUFBSSxLQUFLLDBCQUEwQixNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUM3RCxPQUFNLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDaEMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLEVBQUU7T0FDTCxJQUFJLEtBQUssMEJBQTBCLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQzdELE9BQU0sR0FBRyxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25DLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxFQUFFO0FBQ1gsT0FBTSxJQUFJLEtBQUssR0FBRyxJQUFJLHFDQUFxQyxDQUFDLHdCQUF3QixDQUFDO0FBQ3JGLE9BQU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMscUNBQXFDLENBQUMsd0JBQXdCLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUMzSCxPQUFNLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2QyxPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssRUFBRTtBQUNYLE9BQU0sSUFBSSxLQUFLLEdBQUcsSUFBSSxxQ0FBcUMsQ0FBQyx5QkFBeUIsQ0FBQztBQUN0RixPQUFNLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxDQUFDLHlCQUF5QixDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDNUgsT0FBTSxHQUFHLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDeEMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLEVBQUU7T0FDTCxJQUFJLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDO0FBQ3RELE9BQU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUM1RixPQUFNLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwQyxPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssRUFBRTtPQUNMLElBQUksS0FBSywwQkFBMEIsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDOUQsT0FBTSxHQUFHLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdCLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxFQUFFO09BQ0wsSUFBSSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQztBQUNyRCxPQUFNLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDM0YsT0FBTSxHQUFHLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbkMsT0FBTSxNQUFNO0FBQ1osS0FBSSxLQUFLLEVBQUU7T0FDTCxJQUFJLEtBQUssMEJBQTBCLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQzdELE9BQU0sR0FBRyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNoQyxPQUFNLE1BQU07QUFDWixLQUFJLEtBQUssRUFBRTtPQUNMLElBQUksS0FBSywwQkFBMEIsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDOUQsT0FBTSxHQUFHLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hDLE9BQU0sTUFBTTtBQUNaLEtBQUksS0FBSyxJQUFJO09BQ1AsSUFBSSxLQUFLLDBCQUEwQixNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUM5RCxPQUFNLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxPQUFNLE1BQU07S0FDUjtBQUNKLE9BQU0sTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ3pCLE9BQU0sTUFBTTtNQUNQO0lBQ0Y7R0FDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsV0FBVztHQUNoRixJQUFJLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUN2QyxHQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNuRixHQUFFLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ2xDLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsU0FBUyxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQy9GLEdBQUUsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDO0FBQ3BCLEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUN4QixHQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7S0FDaEIsTUFBTSxDQUFDLFdBQVc7QUFDdEIsT0FBTSxDQUFDO0FBQ1AsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDOUIsR0FBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0tBQ2hCLE1BQU0sQ0FBQyxXQUFXO0FBQ3RCLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixFQUFFLENBQUM7QUFDbkMsR0FBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0tBQ2hCLE1BQU0sQ0FBQyxtQkFBbUI7QUFDOUIsT0FBTSxDQUFDO0FBQ1AsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztBQUNwQyxHQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7S0FDaEIsTUFBTSxDQUFDLG1CQUFtQjtBQUM5QixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0FBQ3ZDLEdBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtLQUNoQixNQUFNLENBQUMsbUJBQW1CO0FBQzlCLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixFQUFFLENBQUM7QUFDeEMsR0FBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0tBQ2hCLE1BQU0sQ0FBQyxtQkFBbUI7QUFDOUIsT0FBTSxDQUFDO0FBQ1AsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDM0IsR0FBRSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7S0FDYixNQUFNLENBQUMsWUFBWTtBQUN2QixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxPQUFNLHlDQUF5QyxDQUFDLGlCQUFpQixDQUFDLHVCQUF1QjtBQUN6RixNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0FBQ25DLEdBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtLQUNoQixNQUFNLENBQUMsb0JBQW9CO0FBQy9CLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztBQUNQLE9BQU0sc0JBQXNCLENBQUMsR0FBRyxDQUFDLHVCQUF1QjtBQUN4RCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUMvQixHQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtLQUNYLE1BQU0sQ0FBQyxVQUFVO0FBQ3JCLE9BQU0sQ0FBQztBQUNQLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUM7QUFDbEMsR0FBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7S0FDWCxNQUFNLENBQUMsVUFBVTtBQUNyQixPQUFNLEVBQUU7QUFDUixPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0FBQ3RDLEdBQUUsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO0tBQ2IsTUFBTSxDQUFDLFlBQVk7QUFDdkIsT0FBTSxFQUFFO0FBQ1IsT0FBTSxDQUFDO0FBQ1AsT0FBTSxxQ0FBcUMsQ0FBQyx3QkFBd0IsQ0FBQyx1QkFBdUI7QUFDNUYsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztBQUN2QyxHQUFFLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtLQUNiLE1BQU0sQ0FBQyxZQUFZO0FBQ3ZCLE9BQU0sRUFBRTtBQUNSLE9BQU0sQ0FBQztBQUNQLE9BQU0scUNBQXFDLENBQUMseUJBQXlCLENBQUMsdUJBQXVCO0FBQzdGLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUM7QUFDdkMsR0FBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0tBQ2hCLE1BQU0sQ0FBQyxvQkFBb0I7QUFDL0IsT0FBTSxFQUFFO0FBQ1IsT0FBTSxDQUFDO0FBQ1AsT0FBTSxLQUFLLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyx1QkFBdUI7QUFDN0QsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDNUIsR0FBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0tBQ2hCLE1BQU0sQ0FBQyxXQUFXO0FBQ3RCLE9BQU0sRUFBRTtBQUNSLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUM7QUFDbEMsR0FBRSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7S0FDYixNQUFNLENBQUMsWUFBWTtBQUN2QixPQUFNLEVBQUU7QUFDUixPQUFNLENBQUM7QUFDUCxPQUFNLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLHVCQUF1QjtBQUM1RCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUMvQixHQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtLQUNYLE1BQU0sQ0FBQyxVQUFVO0FBQ3JCLE9BQU0sRUFBRTtBQUNSLE9BQU0sQ0FBQztBQUNQLE1BQUssQ0FBQztJQUNIO0FBQ0gsR0FBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixFQUFFLENBQUM7QUFDbkMsR0FBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0tBQ2hCLE1BQU0sQ0FBQyxtQkFBbUI7QUFDOUIsT0FBTSxFQUFFO0FBQ1IsT0FBTSxDQUFDO0FBQ1AsTUFBSyxDQUFDO0lBQ0g7QUFDSCxHQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztBQUNyQyxHQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7S0FDaEIsTUFBTSxDQUFDLG1CQUFtQjtBQUM5QixPQUFNLElBQUk7QUFDVixPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsV0FBVztBQUMxRSxHQUFFLDhCQUE4QixJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7QUFDL0UsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLFNBQVMsS0FBSyxFQUFFO0FBQy9FLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDM0QsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRyxXQUFXO0FBQ2hGLEdBQUUsOEJBQThCLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtBQUMvRSxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDckYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMzRCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEdBQUcsV0FBVztHQUNuRixzQ0FBc0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUU7QUFDaEYsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDMUYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3JELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFNBQVMsS0FBSyxFQUFFLFNBQVMsRUFBRTtBQUNqRyxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNwRSxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEdBQUcsV0FBVztBQUN2RixHQUFFLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3JDLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsR0FBRyxXQUFXO0dBQ3BGLHNDQUFzQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRTtBQUNoRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsR0FBRyxTQUFTLEtBQUssRUFBRTtBQUMzRixHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDLENBQUM7QUFDckQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsU0FBUyxLQUFLLEVBQUUsU0FBUyxFQUFFO0FBQ2xHLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3BFLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsR0FBRyxXQUFXO0FBQ3hGLEdBQUUsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdEMsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLHNCQUFzQixHQUFHLFdBQVc7R0FDdkYsc0NBQXNDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2hGLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLHNCQUFzQixHQUFHLFNBQVMsS0FBSyxFQUFFO0FBQzlGLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNyRCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixHQUFHLFNBQVMsS0FBSyxFQUFFLFNBQVMsRUFBRTtBQUNyRyxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNwRSxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsd0JBQXdCLEdBQUcsV0FBVztBQUMzRixHQUFFLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3pDLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsR0FBRyxXQUFXO0dBQ3hGLHNDQUFzQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRTtBQUNoRixFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsR0FBRyxTQUFTLEtBQUssRUFBRTtBQUMvRixHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDLENBQUM7QUFDckQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsR0FBRyxTQUFTLEtBQUssRUFBRSxTQUFTLEVBQUU7QUFDdEcsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDcEUsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLHlCQUF5QixHQUFHLFdBQVc7QUFDNUYsR0FBRSxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMxQyxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFdBQVc7R0FDM0U7QUFDRixLQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSx5Q0FBeUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsRUFBRTtBQUN4RyxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDbEYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdEQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksR0FBRyxXQUFXO0FBQy9FLEdBQUUsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BDLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsV0FBVztBQUM3RSxHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQztBQUNoRCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEdBQUcsV0FBVztHQUNuRjtBQUNGLEtBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsc0JBQXNCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQy9FLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixHQUFHLFNBQVMsS0FBSyxFQUFFO0FBQzFGLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDOUQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsU0FBUyxTQUFTLEVBQUUsU0FBUyxFQUFFO0dBQ25HLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDMUcsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLG9CQUFvQixHQUFHLFdBQVc7QUFDdkYsR0FBRSxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNyQyxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFdBQVc7QUFDakYsR0FBRSw4QkFBOEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQzlFLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxTQUFTLEtBQUssRUFBRTtBQUN0RixHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3hELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsR0FBRyxXQUFXO0FBQ3BGLEdBQUUsOEJBQThCLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRTtBQUMvRSxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLEtBQUssRUFBRTtBQUN6RixHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3pELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsR0FBRyxXQUFXO0dBQ3RGO0FBQ0YsS0FBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUscUNBQXFDLENBQUMsd0JBQXdCLEVBQUUsRUFBRSxDQUFDLEVBQUU7QUFDNUcsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMscUJBQXFCLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDN0YsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdkQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLHVCQUF1QixHQUFHLFdBQVc7QUFDMUYsR0FBRSxPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQyxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMscUJBQXFCLEdBQUcsV0FBVztBQUN4RixHQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQztBQUNqRCxFQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FDQSxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsc0JBQXNCLEdBQUcsV0FBVztHQUN2RjtBQUNGLEtBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLHFDQUFxQyxDQUFDLHlCQUF5QixFQUFFLEVBQUUsQ0FBQyxFQUFFO0FBQzdHLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLHNCQUFzQixHQUFHLFNBQVMsS0FBSyxFQUFFO0FBQzlGLEdBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3ZELEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsR0FBRyxXQUFXO0FBQzNGLEdBQUUsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDaEQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLHNCQUFzQixHQUFHLFdBQVc7QUFDekYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUM7QUFDakQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLHNCQUFzQixHQUFHLFdBQVc7R0FDdkY7QUFDRixLQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxFQUFFO0FBQ3JGLEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFB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UyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDOUksRUFBQyxDQUFDO0NBQ0YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbkcsQ0FBQSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLFdBQVcsR0FBRyx1RUFBdUUsQ0FBQztFQUM3SjtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsU0FBUyxRQUFRLEVBQUU7QUFDdkYsR0FBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzFJLEVBQUMsQ0FBQztDQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMvRixDQUFBLElBQUksSUFBSSxDQUFDLEtBQUssSUFB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SUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEgsR0FBRSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7S0FDYixNQUFNLENBQUMsU0FBUztBQUNwQixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQywyQkFBMkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakUsR0FBRSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7S0FDYixNQUFNLENBQUMsU0FBUztBQUNwQixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQywwQkFBMEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEUsR0FBRSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7S0FDYixNQUFNLENBQUMsV0FBVztBQUN0QixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQywwQkFBMEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEUsR0FBRSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7S0FDYixNQUFNLENBQUMsV0FBVztBQUN0QixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQywwQkFBMEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEUsR0FBRSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7S0FDYixNQUFNLENBQUMsV0FBVztBQUN0QixPQUFNLENBQUM7QUFDUCxPQUFNLENB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QUFDQSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDdkYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdEQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsZUFBZSxHQUFHLFdBQVc7QUFDcEYsR0FBRSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdkMsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsYUFBYSxHQUFHLFdBQVc7QUFDbEYsR0FBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7QUFDaEQsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEdBQUcsV0FBVztBQUNyRixHQUFFLCtCQUErQixJQUFJLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUU7QUFDMUYsRUFBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxD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SSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3JHLEVBQUMsQ0FBQztBQUNGLENBQUEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDMUQsQ0FBQSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7R0FDRSxLQUFLLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxXQUFXLEdBQUcsOEJBQThCLENBQUM7RUFDM0U7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsR0FBRyxTQUFTLFFBQVEsRUFBRTtHQUMxRCxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMvRyxFQUFDLENBQUM7QUFDRixDQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEUsQ0FBQSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7R0FDRSxLQUFLLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLFdBQVcsR0FBRyx3Q0FBd0MsQ0FBQztFQUMvRjtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLGtC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Q0FBQywwQkFBMEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEUsR0FBRSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7S0FDYixNQUFNLENBQUMsVUFBVTtBQUNyQixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQywwQkFBMEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEUsR0FBRSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7S0FDYixNQUFNLENBQUMsVUFBVTtBQUNyQixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQywwQkFBMEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEUsR0FBRSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7S0FDYixNQUFNLENBQUMsVUFBVTtBQUNyQixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEdBQUUsQ0FBQywwQkFBMEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEUsR0FBRSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7S0FDYixNQUFNLENBQUMsVUFBVTtBQUNyQixPQUFNLENBQUM7QUFDUCxPQUFNLENBQUM7QUFDUCxNQUFLLENBQUM7SUFDSDtBQUNILEVBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUNBLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsV0FBVztBQUNyRCxHQUFFLDhCQUE4QixJQUFJLENBQUMsT0FBTyxDQUFDLGdDQUFnQyxDQUFD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\n","\n// @ts-ignore\nimport mp from '@mediapipe/tasks-vision';\nconst ObjectDetector = mp.ObjectDetector;\nconst Detection = mp.Detection;\n\nlet detector: typeof ObjectDetector;\nlet video: HTMLVideoElement;\n\n// Interval in seconds at which we refresh the results.\nconst DRAW_OBJECTS_INTERVAL = 0.1;\nconst DRAW_PROCESSING_TIME_INTERVAL = 0.25;\n\nconst messageTag = document.getElementById('message') as HTMLElement;\nconst outputBox = document.getElementById('container') as HTMLElement;\noutputBox.style.bottom = '-30px';\n\nconst canvas = document.getElementById('output') as HTMLCanvasElement;\nconst ctx = canvas.getContext('2d')!;\n\nfunction drawBox(\n    label: string, x: number, y: number, w: number, h: number): void {\n    ctx.strokeStyle = 'red';\n    ctx.lineWidth = 3;\n    ctx.font = '24px roboto';\n    ctx.beginPath();\n    ctx.strokeStyle = 'white';\n    ctx.strokeText(label, x, y - 8);\n    ctx.strokeStyle = 'red';\n    ctx.moveTo(x, y);\n    ctx.lineTo(x + w, y);\n    ctx.lineTo(x + w, y + h);\n    ctx.lineTo(x, y + h);\n    ctx.lineTo(x, y);\n    ctx.closePath();\n    ctx.stroke();\n}\n\n// The last time in ms we processed data. Since we do not special handle the\n// first detection, we only display accurate value after the second frame.\nlet lastVideoTime = -1;\nlet lastObjectDrawTime = -1;\nlet lastProcessingTimeDrawTime = -1;\nlet detectionsSinceLastRefresh = 0;\n\n// Process video detections in a loop\nfunction detectLoop(): void {\n    if (video.currentTime !== lastVideoTime) {\n        const startTime = performance.now();\n        const detections = detector.detect(video, startTime);\n        const endTime = performance.now();\n        ++detectionsSinceLastRefresh;\n\n        if (endTime - lastObjectDrawTime > DRAW_OBJECTS_INTERVAL) {\n            drawObjects(detections);\n            lastObjectDrawTime = endTime;\n        }\n\n        if (endTime - lastProcessingTimeDrawTime > DRAW_PROCESSING_TIME_INTERVAL) {\n            drawProcessingTime(\n                (endTime - lastProcessingTimeDrawTime) / detectionsSinceLastRefresh);\n            lastProcessingTimeDrawTime = endTime;\n            detectionsSinceLastRefresh = 0;\n        }\n\n        lastVideoTime = video.currentTime;\n    }\n\n    requestAnimationFrame(() => {\n        detectLoop();\n    });\n}\n\nfunction drawObjects(detections: typeof Detection[]): void {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    for (const detection of detections) {\n        const box = detection.boundingBox!;\n        for (const category of detection.categories) {\n            const label = `${category.categoryName} (${category.index}): ${\n                category.score.toFixed(2)}`;\n            drawBox(label, box.originX, box.originY, box.width, box.height);\n        }\n    }\n}\n\nfunction drawProcessingTime(frameAverage: number): void {\n    messageTag.textContent = `Throughput: ${frameAverage.toFixed(2)} ms`;\n}\n\n// Stream webcam into detections loop (and also make video visible)\nasync function streamWebcamThroughDetector(): Promise<void> {\n    video = document.getElementById('video') as HTMLVideoElement;\n\n\n    function onAcquiredUserMedia(stream: MediaStream): void {\n        video.srcObject = stream;\n        video.onloadedmetadata = () => {\n            canvas.width = video.videoWidth;\n            canvas.height = video.videoHeight;\n            video.play();\n            detectLoop();\n        };\n    }\n\n    try {\n        const evt = await navigator.mediaDevices.getUserMedia({\n            'audio': false,\n            'video': {\n                facingMode: 'user',\n                width: 1280,\n                height: 720,\n            }\n        });\n        onAcquiredUserMedia(evt);\n    } catch (e) {\n        console.error(`Failed to acquire camera feed: ${e}`);\n    }\n}\n\nasync function runDemo() {\n    detector = await ObjectDetector.createFromOptions(\n        {\n            wasmLoaderPath: `object_detector_wasm_internal.js`,\n            wasmBinaryPath: `object_detector_wasm_internal.wasm`,\n        },\n        {\n            baseOptions: {\n                modelAssetPath:\n                    `coco_ssd_mobilenet_v1_1.0_quant_2018_06_29.tflite`\n            },\n            maxResults: 5\n        });\n    await streamWebcamThroughDetector();\n}\n\nrunDemo();\n"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","$jscomp","scope","findInternal","a","b","c","String","d","i","ASSUME_ES5","ASSUME_NO_NATIVE_MAP","ASSUME_NO_NATIVE_SET","SIMPLE_FROUND_POLYFILL","defineProperty","Object","defineProperties","Array","prototype","getGlobal","window","global","this","polyfill","split","configurable","writable","checkStringArgs","RegExp","Math","max","min","RangeError","COMPILED","goog","self","exportPath_","execScript","shift","define","FEATURESET_YEAR","DEBUG","LOCALE","TRUSTED_SITE","STRICT_MODE_COMPATIBLE","DISALLOW_TEST_ONLY_CODE","ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING","provide","isInModuleLoader_","Error","constructNamespace_","getScriptNonce","getScriptNonce_","document","cspNonce_","NONCE_PATTERN_","querySelector","nonce","getAttribute","test","VALID_MODULE_RE_","module","search","isInGoogModuleLoader_","moduleLoaderState_","moduleName","get","getInternal_","ModuleType","ES6","GOOG","isInEs6ModuleLoader_","type","getCurrentModulePath","declareLegacyNamespace","declareModuleId","require","loadedModules_","exports","moduleId","setTestOnly","forwardDeclare","getObjectByName","globalize","addDependency","ENABLE_DEBUG_LOADER","logToConsole_","console","error","requireType","basePath","nullFunction","abstractMethod","addSingletonGetter","instance_","getInstance","instantiatedSingletons_","LOAD_MODULE_USING_EVAL","SEAL_MODULE_EXPORTS","DEPENDENCIES_ENABLED","TRANSPILE","ASSUME_ES_MODULES_TRANSPILED","TRANSPILE_TO_LANGUAGE","TRANSPILER","hasBadLetScoping","useSafari10Workaround","eval","workaroundSafari10EvalBug","loadModule","isFunction","loadModuleFromSource_","seal","normalizePath_","splice","join","loadFileSync_","CLOSURE_LOAD_FILE_SYNC","XMLHttpRequest","open","send","status","responseText","transpile_","transpile","$gwtExport","JSON","stringify","typeOf","toString","propertyIsEnumerable","isArray","isArrayLike","isDateLike","isObject","getFullYear","getUid","hasOwnProperty","UID_PROPERTY_","uidCounter_","hasUid","removeUid","removeAttribute","random","getHashCode","removeHashCode","cloneObject","clone","bindNative_","bind","arguments","bindJs_","slice","unshift","Function","indexOf","partial","mixin","now","Date","globalEval","evalWorksForGlobals_","_evalTest_","createElement","defer","appendChild","createTextNode","head","removeChild","getCssName","charAt","cssNameMapping_","cssNameMappingStyle_","CLOSURE_CSS_NAME_MAP_FN","setCssNameMapping","getMsg","html","replace","getMsgWithFallback","exportSymbol","exportProperty","inherits","superClass_","constructor","base","defineClass","statics","createSealingConstructor_","applyProperties_","SEAL_CLASS_INSTANCES","isUnsealable_","UNSEALABLE_CONSTRUCTOR_PROPERTY_","OBJECT_PROTOTYPE_FIELDS_","tagUnsealableClass","TRUSTED_TYPES_POLICY_NAME","identity_","createTrustedTypesPolicy","trustedTypes","TrustedTypes","createPolicy","createHTML","createScript","createScriptURL","createURL","message","TRUSTED_TYPES_POLICY_","object","is","forEach","filter","map","some","every","getCount","getAnyKey","getAnyValue","contains","containsValue","getValues","getKeys","getValueByKeys","containsKey","findKey","findValue","isEmpty","clear","remove","add","set","setIfUndefined","setWithReturnValueIfNotSet","equals","unsafeClone","transpose","PROTOTYPE_FIELDS_","extend","create","createSet","createImmutableView","isFrozen","freeze","isImmutableView","getAllPropertyNames","getOwnPropertyNames","getPrototypeOf","getSuperClass","jspb","asserts","doAssertFailure","assert","assertString","assertArray","fail","assertInstanceof","getType","displayName","name","BinaryConstants","ConstBinaryMessage","BinaryMessage","FieldType","INVALID","DOUBLE","FLOAT","INT64","UINT64","INT32","FIXED64","FIXED32","BOOL","STRING","GROUP","MESSAGE","BYTES","UINT32","ENUM","SFIXED32","SFIXED64","SINT32","SINT64","FHASH64","VHASH64","WireType","VARINT","DELIMITED","START_GROUP","END_GROUP","FieldTypeToWireType","INVALID_FIELD_NUMBER","FLOAT32_EPS","FLOAT32_MIN","FLOAT32_MAX","FLOAT64_EPS","FLOAT64_MIN","FLOAT64_MAX","TWO_TO_20","TWO_TO_23","TWO_TO_31","TWO_TO_32","TWO_TO_52","TWO_TO_63","TWO_TO_64","ZERO_HASH","debug","captureStackTrace","stack","reportErrorToServer","dom","NodeType","ELEMENT","ATTRIBUTE","TEXT","CDATA_SECTION","ENTITY_REFERENCE","ENTITY","PROCESSING_INSTRUCTION","COMMENT","DOCUMENT","DOCUMENT_TYPE","DOCUMENT_FRAGMENT","NOTATION","ENABLE_ASSERTS","AssertionError","subs_","messagePattern","DEFAULT_ERROR_HANDLER","errorHandler_","doAssertFailure_","setErrorHandler","assertExists","assertNumber","assertFunction","assertObject","assertBoolean","assertElement","nodeType","getType_","assertFinite","isFinite","assertObjectPrototypeIsIntact","array","NATIVE_ARRAY_PROTOTYPES","ASSUME_NATIVE_FUNCTIONS","peek","last","lastIndexOf","forEachRight","h","k","reduce","reduceRight","count","find","findIndex","findRight","findIndexRight","insert","insertAt","insertArrayAt","insertBefore","removeAt","removeLast","removeIf","removeAllIf","concat","toArray","removeDuplicates","binarySearch","binarySearch_","defaultCompare","binarySelect","l","sort","stableSort","index","sortByKey","sortObjectsByKey","isSorted","defaultCompareEquality","compare3","inverseDefaultCompare","binaryInsert","binaryRemove","bucket","toObject","range","repeat","flatten","rotate","moveItem","zip","shuffle","floor","copyByIndex","concatMap","crypt","stringToByteArray","charCodeAt","byteArrayToString","fromCharCode","byteArrayToHex","hexToByteArray","parseInt","substring","stringToUtf8ByteArray","utf8ByteArrayToString","xorByteArray","assertIsLocation","getWindow_","Location","Element","debugStringForType_","assertIsElementType_","assertIsHTMLAnchorElement","assertIsHTMLButtonElement","assertIsHTMLLinkElement","assertIsHTMLImageElement","assertIsHTMLAudioElement","assertIsHTMLVideoElement","assertIsHTMLInputElement","assertIsHTMLTextAreaElement","assertIsHTMLCanvasElement","assertIsHTMLEmbedElement","assertIsHTMLFormElement","assertIsHTMLFrameElement","assertIsHTMLIFrameElement","assertIsHTMLObjectElement","assertIsHTMLScriptElement","ownerDocument","defaultView","parentWindow","functions","constant","FALSE","TRUE","NULL","identity","lock","nth","partialRight","withReturnValue","sequence","equalTo","compose","and","or","not","CACHE_RETURN_VALUE","cacheReturnValue","once","debounce","clearTimeout","setTimeout","throttle","rateLimit","HtmlElement","TagName","tagName_","A","ABBR","ACRONYM","ADDRESS","APPLET","AREA","ARTICLE","ASIDE","AUDIO","B","BASE","BASEFONT","BDI","BDO","BIG","BLOCKQUOTE","BODY","BR","BUTTON","CANVAS","CAPTION","CENTER","CITE","CODE","COL","COLGROUP","COMMAND","DATA","DATALIST","DD","DEL","DETAILS","DFN","DIALOG","DIR","DIV","DL","DT","EM","EMBED","FIELDSET","FIGCAPTION","FIGURE","FONT","FOOTER","FORM","FRAME","FRAMESET","H1","H2","H3","H4","H5","H6","HEAD","HEADER","HGROUP","HR","HTML","I","IFRAME","IMG","INPUT","INS","ISINDEX","KBD","KEYGEN","LABEL","LEGEND","LI","LINK","MAIN","MAP","MARK","MATH","MENU","MENUITEM","META","METER","NAV","NOFRAMES","NOSCRIPT","OBJECT","OL","OPTGROUP","OPTION","OUTPUT","PARAM","PICTURE","PRE","PROGRESS","Q","RP","RT","RTC","RUBY","S","SAMP","SCRIPT","SECTION","SELECT","SMALL","SOURCE","SPAN","STRIKE","STRONG","STYLE","SUB","SUMMARY","SUP","SVG","TABLE","TBODY","TD","TEMPLATE","TEXTAREA","TFOOT","TH","THEAD","TIME","TITLE","TR","TRACK","TT","U","UL","VAR","VIDEO","WBR","tags","VOID_TAGS_","area","br","col","command","embed","hr","img","input","keygen","link","meta","param","source","track","wbr","isVoidTag","trustedtypes","PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY","string","TypedString","Const","stringConstValueWithSecurityContract__googStringSecurityPrivate_","GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_","STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_","TYPE_MARKER_","implementsGoogStringTypedString","getTypedStringValue","unwrap","from","EMPTY","SafeScript","privateDoNotAccessOrElseSafeScriptWrappedValue_","SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_","TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_","fromConstant","createSafeScriptSecurityPrivateDoNotAccessOrElse","fromConstantAndArgs","stringify_","fromJson","unwrapTrustedScript","initSecurityPrivateDoNotAccessOrElse_","fs","url","createObjectUrl","getUrlObject_","createObjectURL","revokeObjectUrl","revokeObjectURL","UrlObject_","findUrlObject_","URL","webkitURL","browserSupportsObjectUrls","blob","getBlob","BlobBuilder","WebKitBlobBuilder","append","getBlobWithProperties","Blob","endings","i18n","bidi","FORCE_RTL","IS_RTL","toLowerCase","Format","LRE","RLE","PDF","LRM","RLM","Dir","LTR","RTL","NEUTRAL","RIGHT","LEFT","I18N_RIGHT","I18N_LEFT","toDir","ltrChars_","rtlChars_","htmlSkipReg_","stripHtmlIfNeeded_","rtlCharReg_","ltrCharReg_","hasAnyRtl","hasRtlChar","hasAnyLtr","ltrRe_","rtlRe_","isRtlChar","isLtrChar","isNeutralChar","ltrDirCheckRe_","rtlDirCheckRe_","startsWithRtl","isRtlText","startsWithLtr","isLtrText","isRequiredLtrRe_","isNeutralText","ltrExitDirCheckRe_","rtlExitDirCheckRe_","endsWithLtr","isLtrExitText","endsWithRtl","isRtlExitText","rtlLocalesRe_","isRtlLanguage","bracketGuardTextRe_","guardBracketInText","enforceRtlInHtml","enforceRtlInText","enforceLtrInHtml","enforceLtrInText","dimensionsRe_","leftRe_","rightRe_","tempRe_","mirrorCSS","doubleQuoteSubstituteRe_","singleQuoteSubstituteRe_","normalizeHebrewQuote","wordSeparatorRe_","hasNumeralsRe_","rtlDetectionThreshold_","estimateDirection","detectRtlDirectionality","setElementDirAndAlign","style","textAlign","dir","setElementDirByTextDirectionality","DirectionalString","TrustedResourceUrl","privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_","CONSTRUCTOR_TOKEN_PRIVATE_","TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_","implementsGoogI18nBidiDirectionalString","getDirection","cloneWithParams","URL_PARAM_PARSER_","exec","createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse","stringifyParams_","unwrapTrustedScriptURL","format","BASE_URL_","FORMAT_MARKER_","encodeURIComponent","formatWithParams","fromConstants","fromSafeScript","internal","startsWith","endsWith","caseInsensitiveStartsWith","caseInsensitiveCompare","substr","caseInsensitiveEndsWith","caseInsensitiveEquals","isEmptyOrWhitespace","trim","newLineToBr","htmlEscape","AMP_RE_","LT_RE_","GT_RE_","QUOT_RE_","SINGLE_QUOTE_RE_","NULL_RE_","ALL_RE_","whitespaceEscape","caseInsensitiveContains","compareVersions","compareElements_","SafeUrl","privateDoNotAccessOrElseSafeUrlWrappedValue_","SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_","INNOCUOUS_STRING","createSafeUrlSecurityPrivateDoNotAccessOrElse","SAFE_MIME_TYPE_PATTERN_","isSafeMimeType","fromBlob","fromMediaSource","MediaSource","DATA_URL_PATTERN_","fromDataUrl","match","fromTelUrl","SIP_URL_PATTERN_","fromSipUrl","decodeURIComponent","fromFacebookMessengerUrl","fromWhatsAppUrl","fromSmsUrl","isSmsUrlBodyValid_","fromSshUrl","sanitizeChromeExtensionUrl","sanitizeExtensionUrl_","sanitizeFirefoxExtensionUrl","sanitizeEdgeExtensionUrl","fromTrustedResourceUrl","SAFE_URL_PATTERN_","SAFE_URL_PATTERN","sanitize","sanitizeAssertUnchanged","ABOUT_BLANK","SafeStyle","privateDoNotAccessOrElseSafeStyleWrappedValue_","SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_","createSafeStyleSecurityPrivateDoNotAccessOrElse","sanitizePropertyValue_","sanitizePropertyValueString_","FUNCTIONS_RE_","URL_RE_","VALUE_RE_","COMMENT_RE_","hasBalancedQuotes_","hasBalancedSquareBrackets_","VALUE_ALLOWED_CHARS_","sanitizeUrl_","ALLOWED_FUNCTIONS_","SafeStyleSheet","privateDoNotAccessOrElseSafeStyleSheetWrappedValue_","SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_","createRule","hasBalancedBrackets_","createSafeStyleSheetSecurityPrivateDoNotAccessOrElse","labs","userAgent","util","getNativeUserAgentString_","getNavigator_","navigator","userAgent_","setUserAgent","getUserAgent","matchUserAgent","matchUserAgentIgnoreCase","extractVersionTuples","browser","matchOpera_","matchIE_","matchEdgeHtml_","matchEdgeChromium_","matchOperaChromium_","matchFirefox_","matchSafari_","matchChrome_","matchCoast_","isSilk","matchIosWebview_","matchAndroidBrowser_","isChrome","isFirefox","isOpera","isIE","isEdge","isEdgeChromium","isOperaChromium","isSafari","isCoast","isIosWebview","isAndroidBrowser","getVersion","getIEVersion_","isVersionOrHigher","SafeHtml","privateDoNotAccessOrElseSafeHtmlWrappedValue_","SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_","dir_","ENABLE_ERROR_MESSAGES","SUPPORT_STYLE_ATTRIBUTE","unwrapTrustedHTML","createSafeHtmlSecurityPrivateDoNotAccessOrElse","htmlEscapePreservingNewlines","htmlEscapePreservingNewlinesAndSpaces","comment","VALID_NAMES_IN_TAG_","URL_ATTRIBUTES_","action","cite","data","formaction","href","manifest","poster","src","NOT_ALLOWED_TAG_NAMES_","verifyTagName","createSafeHtmlTagSecurityPrivateDoNotAccessOrElse","toUpperCase","createIframe","srcdoc","combineAttributes","sandbox","createSandboxIframe","canUseSandboxIframe","HTMLIFrameElement","createScriptSrc","createStyle","createMetaRefresh","content","getAttrNameAndValue_","getStyleValue_","createWithDir","concatWithDir","stringifyAttributes","DOCTYPE_HTML","uncheckedconversions","safeHtmlFromStringKnownToSatisfyTypeContract","safeScriptFromStringKnownToSatisfyTypeContract","safeStyleFromStringKnownToSatisfyTypeContract","safeStyleSheetFromStringKnownToSatisfyTypeContract","safeUrlFromStringKnownToSatisfyTypeContract","trustedResourceUrlFromStringKnownToSatisfyTypeContract","safe","InsertAdjacentHtmlPosition","AFTERBEGIN","AFTEREND","BEFOREBEGIN","BEFOREEND","insertAdjacentHtml","insertAdjacentHTML","SET_INNER_HTML_DISALLOWED_TAGS_","isInnerHtmlCleanupRecursive_","firstChild","innerHTML","parentElement","unsafeSetInnerHtmlDoNotUseOrElse","lastChild","setInnerHtml","tagName","setOuterHtml","outerHTML","setFormElementAction","setButtonFormAction","formAction","setInputFormAction","setStyle","cssText","documentWrite","write","setAnchorHref","setImageSrc","setAudioSrc","setVideoSrc","setEmbedSrc","setFrameSrc","setIframeSrc","setIframeSrcdoc","setLinkHrefAndRel","rel","setObjectData","setScriptSrc","setAttribute","setScriptContent","text","setLocationHref","assignLocation","assign","replaceLocation","openInWindow","parseFromStringHtml","parseFromString","createImageFromBlob","Image","onload","DETECT_DOUBLE_ESCAPING","FORCE_NON_DOM_HTML_UNESCAPING","Unicode","NBSP","subs","collapseWhitespace","isEmptyString","isEmptyOrWhitespaceSafe","makeSafe","isEmptySafe","isBreakingWhitespace","isAlpha","isNumeric","isAlphaNumeric","isSpace","isUnicodeChar","stripNewlines","canonicalizeNewlines","normalizeWhitespace","normalizeSpaces","collapseBreakingSpaces","trimLeft","trimRight","numberAwareCompare_","isNaN","intAwareCompare","floatAwareCompare","numerateCompare","urlEncode","urlDecode","E_RE_","unescapeEntities","unescapeEntitiesUsingDom_","unescapePureXmlEntities_","unescapeEntitiesWithDocument","HTML_ENTITY_PATTERN_","Number","nodeValue","preserveSpaces","stripQuotes","truncate","truncateMiddle","specialEscapeChars_","jsEscapeCache_","quote","escapeChar","escapeString","countOf","removeAll","regExpEscape","replaceAll","padNumber","toFixed","buildString","getRandomString","abs","hashCode","uniqueStringCounter_","createUniqueString","toNumber","NaN","isLowerCamelCase","isUpperCamelCase","toCamelCase","toSelectorCase","toTitleCase","capitalize","splitLimit","lastComponent","editDistance","engine","isPresto","isTrident","isWebKit","isGecko","getEngineTuple_","getVersionForKey_","platform","isAndroid","isIpod","isIphone","isIpad","isIos","isMacintosh","isLinux","isWindows","isChromeOS","isChromecast","isKaiOS","reflect","objectProperty","sinkValue","canAccessProperty","cache","ASSUME_IE","ASSUME_EDGE","ASSUME_GECKO","ASSUME_WEBKIT","ASSUME_MOBILE_WEBKIT","ASSUME_OPERA","ASSUME_ANY_VERSION","BROWSER_KNOWN_","getUserAgentString","getNavigatorTyped","getNavigator","OPERA","IE","EDGE","EDGE_OR_IE","GECKO","WEBKIT","isMobile_","MOBILE","SAFARI","determinePlatform_","PLATFORM","ASSUME_MAC","ASSUME_WINDOWS","ASSUME_LINUX","ASSUME_X11","ASSUME_ANDROID","ASSUME_IPHONE","ASSUME_IPAD","ASSUME_IPOD","ASSUME_KAIOS","PLATFORM_KNOWN_","MAC","WINDOWS","isLegacyLinux_","LINUX","isX11_","appVersion","X11","ANDROID","IPHONE","IPAD","IPOD","IOS","KAIOS","determineVersion_","getVersionRegexResult_","getDocumentMode_","parseFloat","documentMode","VERSION","compare","isVersionOrHigherCache_","isVersion","isDocumentModeOrHigher","DOCUMENT_MODE","isDocumentMode","product","ASSUME_FIREFOX","ASSUME_CHROME","ASSUME_SAFARI","PRODUCT_KNOWN_","FIREFOX","isIphoneOrIpod_","CHROME","isSafariDesktop_","base64","DEFAULT_ALPHABET_COMMON_","ENCODED_VALS","ENCODED_VALS_WEBSAFE","Alphabet","DEFAULT","NO_PADDING","WEBSAFE","WEBSAFE_DOT_PADDING","WEBSAFE_NO_PADDING","paddingChars_","isPadding_","byteToCharMaps_","charToByteMap_","ASSUME_NATIVE_SUPPORT_","HAS_NATIVE_ENCODE_","btoa","HAS_NATIVE_DECODE_","atob","encodeByteArray","init_","encodeString","decodeString","decodeStringInternal_","decodeStringToByteArray","decodeStringToUint8Array","Uint8Array","subarray","utils","split64Low","split64High","splitUint64","splitInt64","splitZigzag64","splitFloat32","round","pow","log","LN2","splitFloat64","splitHash64","joinUint64","joinInt64","toZigzag64","joinZigzag64","fromZigzag64","joinFloat32","Infinity","joinFloat64","joinHash64","DIGITS","ZERO_CHAR_CODE_","A_CHAR_CODE_","joinUnsignedDecimalString","joinSignedDecimalString","hash64ToDecimalString","hash64ArrayToDecimalStrings","decimalStringToHash64","splitDecimalString","toHexDigit_","fromHexCharCode_","hash64ToHexString","hexStringToHash64","hash64ToNumber","numberToHash64","countVarints","countVarintFields","countFixedFields_","countFixed32Fields","countFixed64Fields","countDelimitedFields","debugBytesToTextFormat","byteSourceToUint8Array","debugScalarToTextFormat","ArrayBuffer","buffer","byteOffset","byteLength","BinaryDecoder","bytes_","cursor_","end_","start_","error_","setBlock","instanceCache_","alloc","free","getBuffer","getEnd","setEnd","reset","getCursor","setCursor","advance","atEnd","pastEnd","getError","readSplitVarint64","readSplitZigzagVarint64","readSplitFixed64","skipVarint","unskipVarint","readUnsignedVarint32","readSignedVarint32","readUnsignedVarint32String","readSignedVarint32String","readZigzagVarint32","readUnsignedVarint64","readUnsignedVarint64String","readSignedVarint64","readSignedVarint64String","readZigzagVarint64","readZigzagVarintHash64","readZigzagVarint64String","readUint8","readUint16","readUint32","readUint64","readUint64String","readInt8","readInt16","readInt32","readInt64","readInt64String","readFloat","readDouble","readBool","readEnum","readString","readStringWithLength","readBytes","readVarintHash64","readFixedHash64","BinaryReader","decoder_","fieldCursor_","nextField_","nextWireType_","readCallbacks_","getFieldCursor","getFieldNumber","getWireType","isDelimited","isEndGroup","nextField","unskipHeader","skipMatchingFields","skipField","skipVarintField","skipDelimitedField","skipFixed32Field","skipFixed64Field","skipGroup","registerReadCallback","runReadCallback","readAny","readFixed64","readFixed32","readSfixed32","readSfixed64","readSint32","readSint64","readMessage","readGroup","getFieldDecoder","readInt32String","readUint32String","readSint64String","readFixed64String","readSfixed32String","readSfixed64String","readSintHash64","readPackedField_","readPackedInt32","readPackedInt32String","readPackedInt64","readPackedInt64String","readPackedUint32","readPackedUint32String","readPackedUint64","readPackedUint64String","readPackedSint32","readPackedSint64","readPackedSint64String","readPackedFixed32","readPackedFixed64","readPackedFixed64String","readPackedSfixed32","readPackedSfixed64","readPackedSfixed64String","readPackedFloat","readPackedDouble","readPackedBool","readPackedEnum","readPackedVarintHash64","readPackedFixedHash64","BinaryEncoder","buffer_","end","writeSplitVarint64","writeSplitFixed64","writeUint32","writeUnsignedVarint32","writeSignedVarint32","writeUnsignedVarint64","writeSignedVarint64","writeZigzagVarint32","writeZigzagVarint64","writeZigzagVarint64String","writeZigzagVarintHash64","writeUint8","writeUint16","writeUint64","writeInt8","writeInt16","writeInt32","writeInt64","writeInt64String","writeFloat","writeDouble","writeBool","writeEnum","writeBytes","writeVarintHash64","writeFixedHash64","writeString","arith","UInt64","lo","hi","cmp","rightShift","leftShift","msb","lsb","zero","sub","mul32x32","mul","div","fromString","Int64","BinaryWriter","blocks_","totalLength_","encoder_","bookmarks_","appendUint8Array_","beginDelimited_","writeFieldHeader_","endDelimited_","writeSerializedMessage","maybeWriteSerializedMessage","getResultBuffer","getResultBase64String","beginSubMessage","endSubMessage","writeAny","writeFixed64","writeFixed32","writeSfixed32","writeSfixed64","writeSint32","writeSint64","writeUnsignedVarint32_","writeSignedVarint32_","writeUnsignedVarint64_","writeSignedVarint64_","writeZigzagVarint32_","writeZigzagVarint64_","writeZigzagVarint64String_","writeZigzagVarintHash64_","writeInt32String","writeUint32String","writeUint64String","writeSintHash64","writeSint64String","writeFixed64String","writeSfixed64String","writeMessage","writeMessageSet","writeGroup","writeSplitZigzagVarint64","writeRepeatedInt32","writeRepeatedInt32String","writeRepeatedInt64","writeRepeatedSplitFixed64","writeRepeatedSplitVarint64","writeRepeatedSplitZigzagVarint64","writeRepeatedInt64String","writeRepeatedUint32","writeRepeatedUint32String","writeRepeatedUint64","writeRepeatedUint64String","writeRepeatedSint32","writeRepeatedSint64","writeRepeatedSint64String","writeRepeatedSintHash64","writeRepeatedFixed32","writeRepeatedFixed64","writeRepeatedFixed64String","writeRepeatedSfixed32","writeRepeatedSfixed64","writeRepeatedSfixed64String","writeRepeatedFloat","writeRepeatedDouble","writeRepeatedBool","writeRepeatedEnum","writeRepeatedString","writeRepeatedBytes","writeRepeatedMessage","writeRepeatedGroup","writeRepeatedFixedHash64","writeRepeatedVarintHash64","writePackedInt32","writePackedInt32String","writePackedInt64","writePackedSplitFixed64","writePackedSplitVarint64","writePackedSplitZigzagVarint64","writePackedInt64String","writePackedUint32","writePackedUint32String","writePackedUint64","writePackedUint64String","writePackedSint32","writePackedSint64","writePackedSint64String","writePackedSintHash64","writePackedFixed32","writePackedFixed64","writePackedFixed64String","writePackedSfixed32","writePackedSfixed64","writePackedSfixed64String","writePackedFloat","writePackedDouble","writePackedBool","writePackedEnum","writePackedFixedHash64","writePackedVarintHash64","Map","arr_","valueCtor_","map_","arrClean","loadFromArray_","Entry_","valueWrapper","stringKeys_","key","wrapEntry_","fromObject","ArrayIteratorIterable_","idx_","getLength","del","getEntryList","entries","keys","values","has","serializeBinary","deserializeBinary","ExtensionFieldInfo","fieldIndex","fieldName","ctor","toObjectFn","isRepeated","ExtensionFieldBinaryInfo","fieldInfo","binaryReaderFn","binaryWriterFn","binaryMessageSerializeFn","binaryMessageDeserializeFn","isPacked","isMessageType","Message","GENERATE_TO_OBJECT","GENERATE_FROM_OBJECT","GENERATE_TO_STRING","ASSUME_LOCAL_ARRAYS","SERIALIZE_EMPTY_TRAILING_FIELDS","SUPPORTS_UINT8ARRAY_","getJsPbMessageId","messageId_","getIndex_","arrayIndexOffset_","hiddenES6Property_","getFieldNumber_","initialize","wrappers_","initPivotAndExtensionObject_","convertedPrimitiveFields_","repeatedFields","pivot_","EMPTY_LIST_SENTINEL_","maybeInitEmptyExtensionObject_","extensionObject_","computeOneofCase","isArray_","isExtensionObject_","MAX_VALUE","toObjectList","toObjectExtension","serializeBinaryExtensions","readBinaryExtension","getField","getRepeatedField","getOptionalFloatingPointField","getBooleanField","getRepeatedFloatingPointField","getRepeatedBooleanField","bytesAsB64","bytesAsU8","bytesListAsB64","assertConsistentTypes_","bytesListAsU8","getFieldWithDefault","getBooleanFieldWithDefault","getFloatingPointFieldWithDefault","getFieldProto3","getMapField","setField","setProto3IntField","setFieldIgnoringDefault_","setProto3FloatField","setProto3BooleanField","setProto3StringField","setProto3BytesField","setProto3EnumField","setProto3StringIntField","addToRepeatedField","setOneofField","getWrapperField","getRepeatedWrapperField","wrapRepeatedField_","setWrapperField","setOneofWrapperField","setRepeatedWrapperField","addToRepeatedWrapperField","toMap","syncMapFields_","getExtension","setExtension","difference","compareFields","compareExtensions","cloneMessage","clone_","copyInto","registerMessageType","messageId","messageSetExtensions","messageSetExtensionsBinary","Export","globalThis","proto","google","protobuf","Any","opt_data","opt_includeInstance","includeInstance","msg","obj","typeUrl","getValue_asB64","$jspbMessageInstance","bytes","reader","deserializeBinaryFromReader","field","setTypeUrl","setValue","writer","serializeBinaryToWriter","undefined","getTypeUrl","getValue_asU8","getValue","getTypeName","pack","serialized","opt_typeUrlPrefix","unpack","deserialize","image_classifier_options","mp"],"mappingsqEO,SAASA,SAAS,CAACC,OAAO,EAAEC,UAAU,EAAEC,CAAC,EAAEC,SAAS,EAAE;IACzD,SAASC,KAAK,CAACC,KAAK,EAAE;MAAE,OAAOA,KAAK,YAAYH,CAAC,GAAGG,KAAK,GAAG,IAAIH,CAAC,CAAC,UAAUI,OAAO,EAAE;QAAEA,OAAO,CAACD,KAAK,CAAC,CAAA;EAAE,KAAC,CAAC,CAAA;EAAE,GAAA;EAC3G,EAAA,OAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAO,CAAC,EAAE,UAAUD,OAAO,EAAEE,MAAM,EAAE;MACvD,SAASC,SAAS,CAACJ,KAAK,EAAE;QAAE,IAAI;EAAEK,QAAAA,IAAI,CAACP,SAAS,CAACQ,IAAI,CAACN,KAAK,CAAC,CAAC,CAAA;SAAG,CAAC,OAAOO,CAAC,EAAE;UAAEJ,MAAM,CAACI,CAAC,CAAC,CAAA;EAAE,OAAA;EAAE,KAAA;MAC1F,SAASC,QAAQ,CAACR,KAAK,EAAE;QAAE,IAAI;UAAEK,IAAI,CAACP,SAAS,CAAC,OAAO,CAAC,CAACE,KAAK,CAAC,CAAC,CAAA;SAAG,CAAC,OAAOO,CAAC,EAAE;UAAEJ,MAAM,CAACI,CAAC,CAAC,CAAA;EAAE,OAAA;EAAE,KAAA;MAC7F,SAASF,IAAI,CAACI,MAAM,EAAE;QAAEA,MAAM,CAACC,IAAI,GAAGT,OAAO,CAACQ,MAAM,CAACT,KAAK,CAAC,GAAGD,KAAK,CAACU,MAAM,CAACT,KAAK,CAAC,CAACW,IAAI,CAACP,SAAS,EAAEI,QAAQ,CAAC,CAAA;EAAE,KAAA;EAC7GH,IAAAA,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAK,CAACjB,OAAO,EAAEC,UAAU,IAAI,EAAE,CAAC,EAAEU,IAAI,EAAE,CAAC,CAAA;EACzE,GAAC,CAAC,CAAA;EACN,CAAA;EAEO,SAASO,WAAW,CAAClB,OAAO,EAAEmB,IAAI,EAAE;EACvC,EAAA,IAAIC,CAAC,GAAG;EAAEC,MAAAA,KAAK,EAAE,CAAC;EAAEC,MAAAA,IAAI,EAAE,SAAW,IAAA,GAAA;UAAE,IAAIC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,MAAMA,CAAC,CAAC,CAAC,CAAC,CAAA;UAAE,OAAOA,CAAC,CAAC,CAAC,CAAC,CAAA;SAAG;EAAEC,MAAAA,IAAI,EAAE,EAAE;EAAEC,MAAAA,GAAG,EAAE,EAAA;OAAI;MAAEC,CAAC;MAAEC,CAAC;MAAEJ,CAAC;MAAEK,CAAC,CAAA;EAChH,EAAA,OAAOA,CAAC,GAAG;EAAEjB,IAAAA,IAAI,EAAEkB,IAAI,CAAC,CAAC,CAAC;EAAE,IAAA,OAAO,EAAEA,IAAI,CAAC,CAAC,CAAC;MAAE,QAAQ,EAAEA,IAAI,CAAC,CAAC,CAAA;EAAE,GAAC,EAAE,OAAOC,MAAM,KAAK,UAAU,KAAKF,CAAC,CAACE,MAAM,CAACC,QAAQ,CAAC,GAAG,YAAW;EAAE,IAAA,OAAO,IAAI,CAAA;KAAG,CAAC,EAAEH,CAAC,CAAA;IACxJ,SAASC,IAAI,CAACG,CAAC,EAAE;MAAE,OAAO,UAAUC,CAAC,EAAE;EAAE,MAAA,OAAOvB,IAAI,CAAC,CAACsB,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAA;OAAG,CAAA;EAAE,GAAA;IACjE,SAASvB,IAAI,CAACwB,EAAE,EAAE;EACd,IAAA,IAAIR,CAAC,EAAE,MAAM,IAAIS,SAAS,CAAC,iCAAiC,CAAC,CAAA;EAC7D,IAAA,OAAOP,CAAC,KAAKA,CAAC,GAAG,CAAC,EAAEM,EAAE,CAAC,CAAC,CAAC,KAAKd,CAAC,GAAG,CAAC,CAAC,CAAC,EAAEA,CAAC,EAAA;QAAE,IAAI;EAC1C,QAAA,IAAIM,CAAC,GAAG,CAAC,EAAEC,CAAC,KAAKJ,CAAC,GAAGW,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGP,CAAC,CAAC,QAAQ,CAAC,GAAGO,EAAE,CAAC,CAAC,CAAC,GAAGP,CAAC,CAAC,OAAO,CAAC,KAAK,CAACJ,CAAC,GAAGI,CAAC,CAAC,QAAQ,CAAC,KAAKJ,CAAC,CAACa,IAAI,CAACT,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGA,CAAC,CAAChB,IAAI,CAAC,IAAI,CAAC,CAACY,CAAC,GAAGA,CAAC,CAACa,IAAI,CAACT,CAAC,EAAEO,EAAE,CAAC,CAAC,CAAC,CAAC,EAAEnB,IAAI,EAAE,OAAOQ,CAAC,CAAA;EAC5J,QAAA,IAAII,CAAC,GAAG,CAAC,EAAEJ,CAAC,EAAEW,EAAE,GAAG,CAACA,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEX,CAAC,CAAClB,KAAK,CAAC,CAAA;UACvC,QAAQ6B,EAAE,CAAC,CAAC,CAAC;EACT,UAAA,KAAK,CAAC,CAAA;EAAE,UAAA,KAAK,CAAC;EAAEX,YAAAA,CAAC,GAAGW,EAAE,CAAA;EAAE,YAAA,MAAA;EACxB,UAAA,KAAK,CAAC;cAAEd,CAAC,CAACC,KAAK,EAAE,CAAA;cAAE,OAAO;EAAEhB,cAAAA,KAAK,EAAE6B,EAAE,CAAC,CAAC,CAAC;EAAEnB,cAAAA,IAAI,EAAE,KAAA;eAAO,CAAA;EACvD,UAAA,KAAK,CAAC;cAAEK,CAAC,CAACC,KAAK,EAAE,CAAA;EAAEM,YAAAA,CAAC,GAAGO,EAAE,CAAC,CAAC,CAAC,CAAA;cAAEA,EAAE,GAAG,CAAC,CAAC,CAAC,CAAA;EAAE,YAAA,SAAA;EACxC,UAAA,KAAK,CAAC;EAAEA,YAAAA,EAAE,GAAGd,CAAC,CAACK,GAAG,CAACY,GAAG,EAAE,CAAA;EAAEjB,YAAAA,CAAC,CAACI,IAAI,CAACa,GAAG,EAAE,CAAA;EAAE,YAAA,SAAA;EACxC,UAAA;EACI,YAAA,IAAI,EAAEd,CAAC,GAAGH,CAAC,CAACI,IAAI,EAAED,CAAC,GAAGA,CAAC,CAACe,MAAM,GAAG,CAAC,IAAIf,CAAC,CAACA,CAAC,CAACe,MAAM,GAAG,CAAC,CAAC,CAAC,KAAKJ,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAIA,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;EAAEd,cAAAA,CAAC,GAAG,CAAC,CAAA;EAAE,cAAA,SAAA;EAAU,aAAA;EAC3G,YAAA,IAAIc,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAACX,CAAC,IAAKW,EAAE,CAAC,CAAC,CAAC,GAAGX,CAAC,CAAC,CAAC,CAAC,IAAIW,EAAE,CAAC,CAAC,CAAC,GAAGX,CAAC,CAAC,CAAC,CAAE,CAAC,EAAE;EAAEH,cAAAA,CAAC,CAACC,KAAK,GAAGa,EAAE,CAAC,CAAC,CAAC,CAAA;EAAE,cAAA,MAAA;EAAO,aAAA;EACrF,YAAA,IAAIA,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAId,CAAC,CAACC,KAAK,GAAGE,CAAC,CAAC,CAAC,CAAC,EAAE;EAAEH,cAAAA,CAAC,CAACC,KAAK,GAAGE,CAAC,CAAC,CAAC,CAAC,CAAA;EAAEA,cAAAA,CAAC,GAAGW,EAAE,CAAA;EAAE,cAAA,MAAA;EAAO,aAAA;cACpE,IAAIX,CAAC,IAAIH,CAAC,CAACC,KAAK,GAAGE,CAAC,CAAC,CAAC,CAAC,EAAE;EAAEH,cAAAA,CAAC,CAACC,KAAK,GAAGE,CAAC,CAAC,CAAC,CAAC,CAAA;EAAEH,cAAAA,CAAC,CAACK,GAAG,CAACc,IAAI,CAACL,EAAE,CAAC,CAAA;EAAE,cAAA,MAAA;EAAO,aAAA;cAClE,IAAIX,CAAC,CAAC,CAAC,CAAC,EAAEH,CAAC,CAACK,GAAG,CAACY,GAAG,EAAE,CAAA;EACrBjB,YAAAA,CAAC,CAACI,IAAI,CAACa,GAAG,EAAE,CAAA;EAAE,YAAA,SAAA;EAAS,SAAA;UAE/BH,EAAE,GAAGf,IAAI,CAACiB,IAAI,CAACpC,OAAO,EAAEoB,CAAC,CAAC,CAAA;SAC7B,CAAC,OAAOR,CAAC,EAAE;EAAEsB,QAAAA,EAAE,GAAG,CAAC,CAAC,EAAEtB,CAAC,CAAC,CAAA;EAAEe,QAAAA,CAAC,GAAG,CAAC,CAAA;EAAE,OAAC,SAAS;UAAED,CAAC,GAAGH,CAAC,GAAG,CAAC,CAAA;EAAE,OAAA;EAAC,KAAA;MAC1D,IAAIW,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,MAAMA,EAAE,CAAC,CAAC,CAAC,CAAA;MAAE,OAAO;EAAE7B,MAAAA,KAAK,EAAE6B,EAAE,CAAC,CAAC,CAAC,GAAGA,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;EAAEnB,MAAAA,IAAI,EAAE,IAAA;OAAM,CAAA;EACpF,GAAA;EACJ;;;;;;;;;;;;;;;;;;;ECzGA;EACA;EACA;EACA;EACA;EACA,EAAA,IAAIyB,OAAO,GAACA,OAAO,IAAE,EAAE,CAAA;EAACA,EAAAA,OAAO,CAACC,KAAK,GAAC,EAAE,CAAA;IAACD,OAAO,CAACE,YAAY,GAAC,UAASC,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAACF,CAAC,YAAYG,MAAM,KAAGH,CAAC,GAACG,MAAM,CAACH,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,KAAI,IAAII,CAAC,GAACJ,CAAC,CAACL,MAAM,EAAC1B,CAAC,GAAC,CAAC,EAACA,CAAC,GAACmC,CAAC,EAACnC,CAAC,EAAE,EAAC;EAAC,MAAA,IAAIc,CAAC,GAACiB,CAAC,CAAC/B,CAAC,CAAC,CAAA;EAAC,MAAA,IAAGgC,CAAC,CAACR,IAAI,CAACS,CAAC,EAACnB,CAAC,EAACd,CAAC,EAAC+B,CAAC,CAAC,EAAC,OAAM;EAACK,QAAAA,CAAC,EAACpC,CAAC;EAACqB,QAAAA,CAAC,EAACP,CAAAA;SAAE,CAAA;EAAA,KAAA;MAAC,OAAM;QAACsB,CAAC,EAAC,CAAC,CAAC;EAACf,MAAAA,CAAC,EAAC,KAAK,CAAA;OAAE,CAAA;KAAC,CAAA;EAACO,EAAAA,OAAO,CAACS,UAAU,GAAC,CAAC,CAAC,CAAA;EAACT,EAAAA,OAAO,CAACU,oBAAoB,GAAC,CAAC,CAAC,CAAA;EAACV,EAAAA,OAAO,CAACW,oBAAoB,GAAC,CAAC,CAAC,CAAA;EAACX,EAAAA,OAAO,CAACY,sBAAsB,GAAC,CAAC,CAAC,CAAA;IAC7UZ,OAAO,CAACa,cAAc,GAACb,OAAO,CAACS,UAAU,IAAE,UAAU,IAAE,OAAOK,MAAM,CAACC,gBAAgB,GAACD,MAAM,CAACD,cAAc,GAAC,UAASV,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAACF,IAAAA,CAAC,IAAEa,KAAK,CAACC,SAAS,IAAEd,CAAC,IAAEW,MAAM,CAACG,SAAS,KAAGd,CAAC,CAACC,CAAC,CAAC,GAACC,CAAC,CAACxC,KAAK,CAAC,CAAA;KAAC,CAAA;EAACmC,EAAAA,OAAO,CAACkB,SAAS,GAAC,UAASf,CAAC,EAAC;EAAC,IAAA,OAAM,WAAW,IAAE,OAAOgB,MAAM,IAAEA,MAAM,KAAGhB,CAAC,GAACA,CAAC,GAAC,WAAW,IAAE,OAAOiB,gBAAM,IAAE,IAAI,IAAEA,gBAAM,GAACA,gBAAM,GAACjB,CAAC,CAAA;KAAC,CAAA;IAACH,OAAO,CAACoB,MAAM,GAACpB,OAAO,CAACkB,SAAS,CAACG,gBAAI,CAAC,CAAA;IAC3VrB,OAAO,CAACsB,QAAQ,GAAC,UAASnB,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;EAAC,IAAA,IAAGH,CAAC,EAAC;QAACC,CAAC,GAACL,OAAO,CAACoB,MAAM,CAAA;EAACjB,MAAAA,CAAC,GAACA,CAAC,CAACoB,KAAK,CAAC,GAAG,CAAC,CAAA;EAAC,MAAA,KAAIhB,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,CAAC,CAACL,MAAM,GAAC,CAAC,EAACS,CAAC,EAAE,EAAC;EAAC,QAAA,IAAInC,CAAC,GAAC+B,CAAC,CAACI,CAAC,CAAC,CAAA;UAACnC,CAAC,IAAIiC,CAAC,KAAGA,CAAC,CAACjC,CAAC,CAAC,GAAC,EAAE,CAAC,CAAA;EAACiC,QAAAA,CAAC,GAACA,CAAC,CAACjC,CAAC,CAAC,CAAA;EAAA,OAAA;QAAC+B,CAAC,GAACA,CAAC,CAACA,CAAC,CAACL,MAAM,GAAC,CAAC,CAAC,CAAA;EAACS,MAAAA,CAAC,GAACF,CAAC,CAACF,CAAC,CAAC,CAAA;EAACC,MAAAA,CAAC,GAACA,CAAC,CAACG,CAAC,CAAC,CAAA;EAACH,MAAAA,CAAC,IAAEG,CAAC,IAAE,IAAI,IAAEH,CAAC,IAAEJ,OAAO,CAACa,cAAc,CAACR,CAAC,EAACF,CAAC,EAAC;UAACqB,YAAY,EAAC,CAAC,CAAC;UAACC,QAAQ,EAAC,CAAC,CAAC;EAAC5D,QAAAA,KAAK,EAACuC,CAAAA;EAAC,OAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EAACJ,EAAAA,OAAO,CAACsB,QAAQ,CAAC,2BAA2B,EAAC,UAASnB,CAAC,EAAC;MAAC,OAAOA,CAAC,GAACA,CAAC,GAAC,UAASA,CAAC,EAACE,CAAC,EAAC;QAAC,OAAOL,OAAO,CAACE,YAAY,CAAC,IAAI,EAACC,CAAC,EAACE,CAAC,CAAC,CAACG,CAAC,CAAA;OAAC,CAAA;EAAA,GAAC,EAAC,KAAK,EAAC,KAAK,CAAC,CAAA;IAChYR,OAAO,CAAC0B,eAAe,GAAC,UAASvB,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEF,CAAC,EAAC,MAAM,IAAIR,SAAS,CAAC,wCAAwC,GAACU,CAAC,GAAC,gCAAgC,CAAC,CAAA;EAAC,IAAA,IAAGD,CAAC,YAAYuB,MAAM,EAAC,MAAM,IAAIhC,SAAS,CAAC,qCAAqC,GAACU,CAAC,GAAC,mCAAmC,CAAC,CAAA;MAAC,OAAOF,CAAC,GAAC,EAAE,CAAA;KAAC,CAAA;EACxRH,EAAAA,OAAO,CAACsB,QAAQ,CAAC,2BAA2B,EAAC,UAASnB,CAAC,EAAC;MAAC,OAAOA,CAAC,GAACA,CAAC,GAAC,UAASA,CAAC,EAACE,CAAC,EAAC;QAAC,IAAID,CAAC,GAACJ,OAAO,CAAC0B,eAAe,CAAC,IAAI,EAACvB,CAAC,EAAC,UAAU,CAAC,CAAA;EAACA,MAAAA,CAAC,IAAE,EAAE,CAAA;QAAC,KAAK,CAAC,KAAGE,CAAC,KAAGA,CAAC,GAACD,CAAC,CAACN,MAAM,CAAC,CAAA;EAACO,MAAAA,CAAC,GAACuB,IAAI,CAACC,GAAG,CAAC,CAAC,EAACD,IAAI,CAACE,GAAG,CAACzB,CAAC,GAAC,CAAC,EAACD,CAAC,CAACN,MAAM,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAI1B,CAAC,GAAC+B,CAAC,CAACL,MAAM,EAAC,CAAC,GAAC1B,CAAC,IAAE,CAAC,GAACiC,CAAC,GAAA;EAAE,QAAA,IAAGD,CAAC,CAAC,EAAEC,CAAC,CAAC,IAAEF,CAAC,CAAC,EAAE/B,CAAC,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,OAAA;QAAA,OAAO,CAAC,IAAEA,CAAC,CAAA;OAAC,CAAA;EAAA,GAAC,EAAC,KAAK,EAAC,KAAK,CAAC,CAAA;EAAC4B,EAAAA,OAAO,CAACsB,QAAQ,CAAC,sBAAsB,EAAC,UAASnB,CAAC,EAAC;MAAC,OAAOA,CAAC,GAACA,CAAC,GAAC,UAASA,CAAC,EAACE,CAAC,EAAC;QAAC,OAAOL,OAAO,CAACE,YAAY,CAAC,IAAI,EAACC,CAAC,EAACE,CAAC,CAAC,CAACZ,CAAC,CAAA;OAAC,CAAA;EAAA,GAAC,EAAC,KAAK,EAAC,KAAK,CAAC,CAAA;EAC7ZO,EAAAA,OAAO,CAACsB,QAAQ,CAAC,6BAA6B,EAAC,UAASnB,CAAC,EAAC;MAAC,OAAOA,CAAC,GAACA,CAAC,GAAC,UAASA,CAAC,EAACE,CAAC,EAAC;QAAC,IAAID,CAAC,GAACJ,OAAO,CAAC0B,eAAe,CAAC,IAAI,EAACvB,CAAC,EAAC,YAAY,CAAC,CAAA;EAACA,MAAAA,CAAC,IAAE,EAAE,CAAA;EAAC,MAAA,IAAI/B,CAAC,GAACgC,CAAC,CAACN,MAAM;UAACZ,CAAC,GAACiB,CAAC,CAACL,MAAM,CAAA;EAACO,MAAAA,CAAC,GAACuB,IAAI,CAACC,GAAG,CAAC,CAAC,EAACD,IAAI,CAACE,GAAG,CAACzB,CAAC,GAAC,CAAC,EAACD,CAAC,CAACN,MAAM,CAAC,CAAC,CAAA;QAAC,KAAI,IAAIV,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,IAAEmB,CAAC,GAACjC,CAAC,GAAA;EAAE,QAAA,IAAGgC,CAAC,CAACC,CAAC,EAAE,CAAC,IAAEF,CAAC,CAACf,CAAC,EAAE,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,OAAA;QAAA,OAAOA,CAAC,IAAEF,CAAC,CAAA;OAAC,CAAA;EAAA,GAAC,EAAC,KAAK,EAAC,KAAK,CAAC,CAAA;EACvRc,EAAAA,OAAO,CAACsB,QAAQ,CAAC,yBAAyB,EAAC,UAASnB,CAAC,EAAC;EAAC,IAAA,OAAOA,CAAC,GAACA,CAAC,GAAC,UAASA,CAAC,EAAC;QAAC,IAAIC,CAAC,GAACJ,OAAO,CAAC0B,eAAe,CAAC,IAAI,EAAC,IAAI,EAAC,QAAQ,CAAC,CAAA;EAAC,MAAA,IAAG,CAAC,GAACvB,CAAC,IAAE,UAAU,GAACA,CAAC,EAAC,MAAM,IAAI4B,UAAU,CAAC,qBAAqB,CAAC,CAAA;EAAC5B,MAAAA,CAAC,IAAE,CAAC,CAAA;EAAC,MAAA,KAAI,IAAII,CAAC,GAAC,EAAE,EAACJ,CAAC,GAAA;EAAE,QAAA,IAAGA,CAAC,GAAC,CAAC,KAAGI,CAAC,IAAEH,CAAC,CAAC,EAACD,CAAC,MAAI,CAAC,EAACC,CAAC,IAAEA,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,OAAOG,CAAC,CAAA;OAAC,CAAA;EAAA,GAAC,EAAC,KAAK,EAAC,KAAK,CAAC,CAAA;IAAC,IAAIyB,QAAQ,GAAC,CAAC,CAAC;EAACC,IAAAA,IAAI,GAACA,IAAI,IAAE,EAAE,CAAA;EAACA,EAAAA,IAAI,CAACb,MAAM,GAACC,gBAAI,IAAEa,IAAI,CAAA;IAC7TD,IAAI,CAACE,WAAW,GAAC,UAAShC,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAACF,IAAAA,CAAC,GAACA,CAAC,CAACoB,KAAK,CAAC,GAAG,CAAC,CAAA;EAAClB,IAAAA,CAAC,GAACA,CAAC,IAAE4B,IAAI,CAACb,MAAM,CAAA;MAACjB,CAAC,CAAC,CAAC,CAAC,IAAGE,CAAC,IAAE,WAAW,IAAE,OAAOA,CAAC,CAAC+B,UAAU,IAAE/B,CAAC,CAAC+B,UAAU,CAAC,MAAM,GAACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,KAAI,IAAII,CAAC,EAACJ,CAAC,CAACL,MAAM,KAAGS,CAAC,GAACJ,CAAC,CAACkC,KAAK,EAAE,CAAC,GAAA;QAAElC,CAAC,CAACL,MAAM,IAAE,KAAK,CAAC,KAAGM,CAAC,GAACC,CAAC,GAACA,CAAC,CAACE,CAAC,CAAC,IAAEF,CAAC,CAACE,CAAC,CAAC,KAAGO,MAAM,CAACG,SAAS,CAACV,CAAC,CAAC,GAACF,CAAC,CAACE,CAAC,CAAC,GAACF,CAAC,CAACE,CAAC,CAAC,GAAC,EAAE,GAACF,CAAC,CAACE,CAAC,CAAC,GAACH,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EACtP6B,EAAAA,IAAI,CAACK,MAAM,GAAC,UAASnC,CAAC,EAACC,CAAC,EAAC;EAA+O,IAAA,OAAOA,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACM,eAAe,GAAC,IAAI,CAAA;EAACN,EAAAA,IAAI,CAACO,KAAK,GAAC,CAAC,CAAC,CAAA;IAACP,IAAI,CAACQ,MAAM,GAAC,IAAI,CAAA;EAACR,EAAAA,IAAI,CAACS,YAAY,GAAC,CAAC,CAAC,CAAA;EAACT,EAAAA,IAAI,CAACU,sBAAsB,GAAC,CAAC,CAAC,CAAA;IAACV,IAAI,CAACW,uBAAuB,GAAW,CAACX,IAAI,CAACO,KAAK,CAAA;EAACP,EAAAA,IAAI,CAACY,qCAAqC,GAAC,CAAC,CAAC,CAAA;EAC/dZ,EAAAA,IAAI,CAACa,OAAO,GAAC,UAAS3C,CAAC,EAAC;MAAC,IAAG8B,IAAI,CAACc,iBAAiB,EAAE,EAAC,MAAMC,KAAK,CAAC,8CAA8C,CAAC,CAAA;EAAsFf,IAAAA,IAAI,CAACgB,mBAAmB,CAAC9C,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACgB,mBAAmB,GAAC,UAAS9C,CAAC,EAACC,CAAC,EAAC;EAA8J6B,IAAAA,IAAI,CAACE,WAAW,CAAChC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EAC7b6B,EAAAA,IAAI,CAACiB,cAAc,GAAC,UAAS/C,CAAC,EAAC;EAAC,IAAA,IAAGA,CAAC,IAAEA,CAAC,IAAE8B,IAAI,CAACb,MAAM,EAAC,OAAOa,IAAI,CAACkB,eAAe,CAAChD,CAAC,CAACiD,QAAQ,CAAC,CAAA;EAAC,IAAA,IAAI,KAAGnB,IAAI,CAACoB,SAAS,KAAGpB,IAAI,CAACoB,SAAS,GAACpB,IAAI,CAACkB,eAAe,CAAClB,IAAI,CAACb,MAAM,CAACgC,QAAQ,CAAC,CAAC,CAAA;MAAC,OAAOnB,IAAI,CAACoB,SAAS,CAAA;KAAC,CAAA;IAACpB,IAAI,CAACqB,cAAc,GAAC,qBAAqB,CAAA;IAACrB,IAAI,CAACoB,SAAS,GAAC,IAAI,CAAA;EAACpB,EAAAA,IAAI,CAACkB,eAAe,GAAC,UAAShD,CAAC,EAAC;EAAC,IAAA,OAAM,CAACA,CAAC,GAACA,CAAC,CAACoD,aAAa,IAAEpD,CAAC,CAACoD,aAAa,CAAC,eAAe,CAAC,MAAIpD,CAAC,GAACA,CAAC,CAACqD,KAAK,IAAErD,CAAC,CAACsD,YAAY,CAAC,OAAO,CAAC,CAAC,IAAExB,IAAI,CAACqB,cAAc,CAACI,IAAI,CAACvD,CAAC,CAAC,GAACA,CAAC,GAAC,EAAE,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC0B,gBAAgB,GAAC,6BAA6B,CAAA;EAC9d1B,EAAAA,IAAI,CAAC2B,MAAM,GAAC,UAASzD,CAAC,EAAC;MAAC,IAAG,QAAQ,KAAG,OAAOA,CAAC,IAAE,CAACA,CAAC,IAAE,CAAC,CAAC,IAAEA,CAAC,CAAC0D,MAAM,CAAC5B,IAAI,CAAC0B,gBAAgB,CAAC,EAAC,MAAMX,KAAK,CAAC,2BAA2B,CAAC,CAAA;EAAC,IAAA,IAAG,CAACf,IAAI,CAAC6B,qBAAqB,EAAE,EAAC,MAAMd,KAAK,CAAC,SAAS,GAAC7C,CAAC,GAAC,0XAA0X,CAAC,CAAA;MACrjB,IAAG8B,IAAI,CAAC8B,kBAAkB,CAACC,UAAU,EAAC,MAAMhB,KAAK,CAAC,iDAAiD,CAAC,CAAA;EAACf,IAAAA,IAAI,CAAC8B,kBAAkB,CAACC,UAAU,GAAC7D,CAAC,CAAA;KAA6H,CAAA;EAAC8B,EAAAA,IAAI,CAAC2B,MAAM,CAACK,GAAG,GAAC,UAAS9D,CAAC,EAAC;EAAC,IAAA,OAAO8B,IAAI,CAAC2B,MAAM,CAACM,YAAY,CAAC/D,CAAC,CAAC,CAAA;KAAC,CAAA;EACtU8B,EAAAA,IAAI,CAAC2B,MAAM,CAACM,YAAY,GAAC,UAAS/D,CAAC,EAAC;EAAiK,IAAA,OAAO,IAAI,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACkC,UAAU,GAAC;EAACC,IAAAA,GAAG,EAAC,KAAK;EAACC,IAAAA,IAAI,EAAC,MAAA;KAAO,CAAA;IAACpC,IAAI,CAAC8B,kBAAkB,GAAC,IAAI,CAAA;IAAC9B,IAAI,CAACc,iBAAiB,GAAC,YAAU;MAAC,OAAOd,IAAI,CAAC6B,qBAAqB,EAAE,IAAE7B,IAAI,CAACqC,oBAAoB,EAAE,CAAA;KAAC,CAAA;IAACrC,IAAI,CAAC6B,qBAAqB,GAAC,YAAU;EAAC,IAAA,OAAM,CAAC,CAAC7B,IAAI,CAAC8B,kBAAkB,IAAE9B,IAAI,CAAC8B,kBAAkB,CAACQ,IAAI,IAAEtC,IAAI,CAACkC,UAAU,CAACE,IAAI,CAAA;KAAC,CAAA;IACrfpC,IAAI,CAACqC,oBAAoB,GAAC,YAAU;EAAC,IAAA,IAAGrC,IAAI,CAAC8B,kBAAkB,IAAE9B,IAAI,CAAC8B,kBAAkB,CAACQ,IAAI,IAAEtC,IAAI,CAACkC,UAAU,CAACC,GAAG,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,IAAA,IAAIjE,CAAC,GAAC8B,IAAI,CAACb,MAAM,CAACpB,OAAO,CAAA;MAAC,OAAOG,CAAC,GAAC,UAAU,IAAE,OAAOA,CAAC,CAACqE,oBAAoB,GAAC,CAAC,CAAC,GAAC,CAAC,CAACrE,CAAC,CAACqE,oBAAoB,EAAE,GAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAC1OvC,EAAAA,IAAI,CAAC2B,MAAM,CAACa,sBAAsB,GAAC,YAAU;EAAiRxC,IAAAA,IAAI,CAAC8B,kBAAkB,CAACU,sBAAsB,GAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAChXxC,EAAAA,IAAI,CAACyC,eAAe,GAAC,UAASvE,CAAC,EAAC;EAAiW,IAAA,IAAG8B,IAAI,CAAC8B,kBAAkB,EAAC9B,IAAI,CAAC8B,kBAAkB,CAACC,UAAU,GAAC7D,CAAC,CAAC,KAAI;EAAC,MAAA,IAAIC,CAAC,GAAC6B,IAAI,CAACb,MAAM,CAACpB,OAAO,CAAA;EAAC,MAAA,IAAG,CAACI,CAAC,IAAE,UAAU,IAAE,OAAOA,CAAC,CAACoE,oBAAoB,EAAC,MAAMxB,KAAK,CAAC,yBAAyB,GACtjB7C,CAAC,GAAC,gCAAgC,CAAC,CAAA;QAACC,CAAC,GAACA,CAAC,CAACuE,OAAO,CAACvE,CAAC,CAACoE,oBAAoB,EAAE,CAAC,CAAA;EAACvC,MAAAA,IAAI,CAAC2C,cAAc,CAACzE,CAAC,CAAC,GAAC;EAAC0E,QAAAA,OAAO,EAACzE,CAAC;EAACmE,QAAAA,IAAI,EAACtC,IAAI,CAACkC,UAAU,CAACC,GAAG;EAACU,QAAAA,QAAQ,EAAC3E,CAAAA;SAAE,CAAA;EAAA,KAAA;KAAE,CAAA;EAAC8B,EAAAA,IAAI,CAAC8C,WAAW,GAAC,UAAS5E,CAAC,EAAC;MAAC,IAAG8B,IAAI,CAACW,uBAAuB,EAAC,MAAMzC,CAAC,GAACA,CAAC,IAAE,EAAE,EAAC6C,KAAK,CAAC,qDAAqD,IAAE7C,CAAC,GAAC,IAAI,GAACA,CAAC,GAAC,GAAG,CAAC,CAAC,CAAA;KAAE,CAAA;EAAC8B,EAAAA,IAAI,CAAC+C,cAAc,GAAC,UAAS7E,CAAC,EAAC,EAAE,CAAA;EAC7U8B,EAAAA,IAAI,CAACgD,eAAe,GAAC,UAAS9E,CAAC,EAACC,CAAC,EAAC;EAACD,IAAAA,CAAC,GAACA,CAAC,CAACoB,KAAK,CAAC,GAAG,CAAC,CAAA;EAACnB,IAAAA,CAAC,GAACA,CAAC,IAAE6B,IAAI,CAACb,MAAM,CAAA;EAAC,IAAA,KAAI,IAAIf,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,CAACL,MAAM,EAACO,CAAC,EAAE,EAAA;EAAC,MAAA,IAAGD,CAAC,GAACA,CAAC,CAACD,CAAC,CAACE,CAAC,CAAC,CAAC,EAAC,IAAI,IAAED,CAAC,EAAC,OAAO,IAAI,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOA,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACiD,SAAS,GAAC,UAAS/E,CAAC,EAACC,CAAC,EAAC;EAACA,IAAAA,CAAC,GAACA,CAAC,IAAE6B,IAAI,CAACb,MAAM,CAAA;MAAC,KAAI,IAAIf,CAAC,IAAIF,CAAC,EAAA;EAACC,MAAAA,CAAC,CAACC,CAAC,CAAC,GAACF,CAAC,CAACE,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;IAAC4B,IAAI,CAACkD,aAAa,GAAC,UAAShF,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;KAAgF,CAAA;EAAC0B,EAAAA,IAAI,CAACmD,mBAAmB,GAAC,CAAC,CAAC,CAAA;EAACnD,EAAAA,IAAI,CAACoD,aAAa,GAAC,UAASlF,CAAC,EAAC;EAAC8B,IAAAA,IAAI,CAACb,MAAM,CAACkE,OAAO,IAAErD,IAAI,CAACb,MAAM,CAACkE,OAAO,CAACC,KAAK,CAACpF,CAAC,CAAC,CAAA;KAAC,CAAA;EACnb8B,EAAAA,IAAI,CAAC0C,OAAO,GAAC,UAASxE,CAAC,EAAC;KAA2U,CAAA;EAAC8B,EAAAA,IAAI,CAACuD,WAAW,GAAC,UAASrF,CAAC,EAAC;EAAC,IAAA,OAAM,EAAE,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACwD,QAAQ,GAAC,EAAE,CAAA;EAACxD,EAAAA,IAAI,CAACyD,YAAY,GAAC,YAAU,EAAE,CAAA;IAC1bzD,IAAI,CAAC0D,cAAc,GAAC,YAAU;MAAC,MAAM3C,KAAK,CAAC,+BAA+B,CAAC,CAAA;KAAE,CAAA;EAACf,EAAAA,IAAI,CAAC2D,kBAAkB,GAAC,UAASzF,CAAC,EAAC;EAACA,IAAAA,CAAC,CAAC0F,SAAS,GAAC,KAAK,CAAC,CAAA;MAAC1F,CAAC,CAAC2F,WAAW,GAAC,YAAU;EAAC,MAAA,IAAG3F,CAAC,CAAC0F,SAAS,EAAC,OAAO1F,CAAC,CAAC0F,SAAS,CAAA;EAAC5D,MAAAA,IAAI,CAACO,KAAK,KAAGP,IAAI,CAAC8D,uBAAuB,CAAC9D,IAAI,CAAC8D,uBAAuB,CAACjG,MAAM,CAAC,GAACK,CAAC,CAAC,CAAA;EAAC,MAAA,OAAOA,CAAC,CAAC0F,SAAS,GAAC,IAAI1F,CAAC,EAAA,CAAA;OAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC8D,uBAAuB,GAAC,EAAE,CAAA;EAAC9D,EAAAA,IAAI,CAAC+D,sBAAsB,GAAC,CAAC,CAAC,CAAA;EAAC/D,EAAAA,IAAI,CAACgE,mBAAmB,GAAChE,IAAI,CAACO,KAAK,CAAA;EAACP,EAAAA,IAAI,CAAC2C,cAAc,GAAC,EAAE,CAAA;IAAC3C,IAAI,CAACiE,oBAAoB,GAAC,CAAClE,QAAQ,CAA0B,CAAA;IAACC,IAAI,CAACkE,SAAS,GAAC,QAAQ,CAAA;EAC5flE,EAAAA,IAAI,CAACmE,4BAA4B,GAAC,CAAC,CAAC,CAAA;IAACnE,IAAI,CAACoE,qBAAqB,GAAC,EAAE,CAAA;IAACpE,IAAI,CAACqE,UAAU,GAAC,cAAc,CAAA;IAACrE,IAAI,CAACsE,gBAAgB,GAAC,IAAI,CAAA;IAACtE,IAAI,CAACuE,qBAAqB,GAAC,YAAU;EAAC,IAAA,IAAG,IAAI,IAAEvE,IAAI,CAACsE,gBAAgB,EAAC;QAAC,IAAG;EAAC,QAAA,IAAIpG,CAAC,GAAC,CAACsG,IAAI,CAAC,4EAA4E,CAAC,CAAA;SAAC,CAAA,OAAMrG,CAAC,EAAC;UAACD,CAAC,GAAC,CAAC,CAAC,CAAA;EAAA,OAAA;QAAC8B,IAAI,CAACsE,gBAAgB,GAACpG,CAAC,CAAA;EAAA,KAAA;MAAC,OAAO8B,IAAI,CAACsE,gBAAgB,CAAA;KAAC,CAAA;EAACtE,EAAAA,IAAI,CAACyE,yBAAyB,GAAC,UAASvG,CAAC,EAAC;EAAC,IAAA,OAAM,cAAc,GAACA,CAAC,GAAC,YAAY,CAAA;KAAC,CAAA;EACpb8B,EAAAA,IAAI,CAAC0E,UAAU,GAAC,UAASxG,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAAC6B,IAAI,CAAC8B,kBAAkB,CAAA;MAAC,IAAG;QAAC9B,IAAI,CAAC8B,kBAAkB,GAAC;EAACC,QAAAA,UAAU,EAAC,EAAE;UAACS,sBAAsB,EAAC,CAAC,CAAC;EAACF,QAAAA,IAAI,EAACtC,IAAI,CAACkC,UAAU,CAACE,IAAAA;SAAK,CAAA;EAAC,MAAA,IAAGpC,IAAI,CAAC2E,UAAU,CAACzG,CAAC,CAAC,EAAC,IAAIE,CAAC,GAACF,CAAC,CAACP,IAAI,CAAC,KAAK,CAAC,EAAC,EAAE,CAAC,CAAC,KAAK,IAAG,QAAQ,KAAG,OAAOO,CAAC,EAAC8B,IAAI,CAACuE,qBAAqB,EAAE,KAAGrG,CAAC,GAAC8B,IAAI,CAACyE,yBAAyB,CAACvG,CAAC,CAAC,CAAC,EAACE,CAAC,GAAC4B,IAAI,CAAC4E,qBAAqB,CAACjH,IAAI,CAAC,KAAK,CAAC,EAACO,CAAC,CAAC,CAAC,KAAK,MAAM6C,KAAK,CAAC,2BAA2B,CAAC,CAAA;EAAC,MAAA,IAAIzC,CAAC,GAAC0B,IAAI,CAAC8B,kBAAkB,CAACC,UAAU,CAAA;QAAC,IAAG,QAAQ,KAAG,OAAOzD,CAAC,IAAEA,CAAC,EAAC0B,IAAI,CAAC8B,kBAAkB,CAACU,sBAAsB,GAACxC,IAAI,CAACgB,mBAAmB,CAAC1C,CAAC,EAC9gBF,CAAC,CAAC,GAAC4B,IAAI,CAACgE,mBAAmB,IAAEnF,MAAM,CAACgG,IAAI,IAAE,QAAQ,IAAA,OAAA,CAASzG,CAAC,CAAE,IAAA,IAAI,IAAEA,CAAC,IAAES,MAAM,CAACgG,IAAI,CAACzG,CAAC,CAAC,EAAC4B,IAAI,CAAC2C,cAAc,CAACrE,CAAC,CAAC,GAAC;EAACsE,QAAAA,OAAO,EAACxE,CAAC;EAACkE,QAAAA,IAAI,EAACtC,IAAI,CAACkC,UAAU,CAACE,IAAI;EAACS,QAAAA,QAAQ,EAAC7C,IAAI,CAAC8B,kBAAkB,CAACC,UAAAA;SAAW,CAAC,KAAK,MAAMhB,KAAK,CAAC,uBAAuB,GAACzC,CAAC,GAAC,GAAG,CAAC,CAAA;EAAC,KAAC,SAAO;QAAC0B,IAAI,CAAC8B,kBAAkB,GAAC3D,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EAAC6B,EAAAA,IAAI,CAAC4E,qBAAqB,GAAC,UAAS1G,CAAC,EAAC;MAACsG,IAAI,CAACtG,CAAC,CAAC,CAAA;EAAC,IAAA,OAAM,EAAE,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC8E,cAAc,GAAC,UAAS5G,CAAC,EAAC;EAACA,IAAAA,CAAC,GAACA,CAAC,CAACoB,KAAK,CAAC,GAAG,CAAC,CAAA;MAAC,KAAI,IAAInB,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACL,MAAM,GAAA;QAAE,GAAG,IAAEK,CAAC,CAACC,CAAC,CAAC,GAACD,CAAC,CAAC6G,MAAM,CAAC5G,CAAC,EAAC,CAAC,CAAC,GAACA,CAAC,IAAE,IAAI,IAAED,CAAC,CAACC,CAAC,CAAC,IAAED,CAAC,CAACC,CAAC,GAAC,CAAC,CAAC,IAAE,IAAI,IAAED,CAAC,CAACC,CAAC,GAAC,CAAC,CAAC,GAACD,CAAC,CAAC6G,MAAM,CAAC,EAAE5G,CAAC,EAAC,CAAC,CAAC,GAACA,CAAC,EAAE,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOD,CAAC,CAAC8G,IAAI,CAAC,GAAG,CAAC,CAAA;KAAC,CAAA;EACvfhF,EAAAA,IAAI,CAACiF,aAAa,GAAC,UAAS/G,CAAC,EAAC;EAAC,IAAA,IAAG8B,IAAI,CAACb,MAAM,CAAC+F,sBAAsB,EAAC,OAAOlF,IAAI,CAACb,MAAM,CAAC+F,sBAAsB,CAAChH,CAAC,CAAC,CAAA;MAAC,IAAG;EAAC,MAAA,IAAIC,CAAC,GAAC,IAAI6B,IAAI,CAACb,MAAM,CAACgG,cAAc,EAAA,CAAA;QAAChH,CAAC,CAACiH,IAAI,CAAC,KAAK,EAAClH,CAAC,EAAC,CAAC,CAAC,CAAC,CAAA;QAACC,CAAC,CAACkH,IAAI,EAAE,CAAA;EAAC,MAAA,OAAO,CAAC,IAAElH,CAAC,CAACmH,MAAM,IAAE,GAAG,IAAEnH,CAAC,CAACmH,MAAM,GAACnH,CAAC,CAACoH,YAAY,GAAC,IAAI,CAAA;OAAC,CAAA,OAAMnH,CAAC,EAAC;EAAC,MAAA,OAAO,IAAI,CAAA;EAAA,KAAA;KAAE,CAAA;IACnQ4B,IAAI,CAACwF,UAAU,GAAC,UAAStH,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIE,CAAC,GAAC0B,IAAI,CAACb,MAAM,CAACpB,OAAO,CAAA;MAACO,CAAC,KAAG0B,IAAI,CAACb,MAAM,CAACpB,OAAO,GAACO,CAAC,GAAC,EAAE,CAAC,CAAA;EAAC,IAAA,IAAInC,CAAC,GAACmC,CAAC,CAACmH,SAAS,CAAA;MAAC,IAAG,CAACtJ,CAAC,EAAC;QAAC,IAAIc,CAAC,GAAC+C,IAAI,CAACwD,QAAQ,GAACxD,IAAI,CAACqE,UAAU;EAAClH,QAAAA,CAAC,GAAC6C,IAAI,CAACiF,aAAa,CAAChI,CAAC,CAAC,CAAA;EAAC,MAAA,IAAGE,CAAC,EAAC;EAAC,QAAA,CAAC,YAAU;YAAC,IAAGqH,IAAI,EAAErH,CAAC,GAAC,kBAAkB,GAACF,CAAC,CAAC,CAAA;EAAA,SAAC,EAAEU,IAAI,CAACqC,IAAI,CAACb,MAAM,CAAC,CAAA;EAAC,QAAA,IAAGa,IAAI,CAACb,MAAM,CAACuG,UAAU,IAAE1F,IAAI,CAACb,MAAM,CAACuG,UAAU,CAAC3H,OAAO,IAAE,CAACiC,IAAI,CAACb,MAAM,CAACuG,UAAU,CAAC3H,OAAO,CAAC0H,SAAS,EAAC,MAAM1E,KAAK,CAAC,6EAA6E,GAAC4E,IAAI,CAACC,SAAS,CAAC5F,IAAI,CAACb,MAAM,CAACuG,UAAU,CAAC,CAAC,CAAA;EAAC1F,QAAAA,IAAI,CAACb,MAAM,CAACpB,OAAO,CAAC0H,SAAS,GACxfzF,IAAI,CAACb,MAAM,CAACuG,UAAU,CAAC3H,OAAO,CAAC0H,SAAS,CAAA;EAACnH,QAAAA,CAAC,GAAC0B,IAAI,CAACb,MAAM,CAACpB,OAAO,CAAA;UAAC5B,CAAC,GAACmC,CAAC,CAACmH,SAAS,CAAA;EAAA,OAAA;EAAC,KAAA;MAACtJ,CAAC,KAAGA,CAAC,GAACmC,CAAC,CAACmH,SAAS,GAAC,UAASvH,CAAC,EAACC,CAAC,EAAC;EAAC6B,MAAAA,IAAI,CAACoD,aAAa,CAACjF,CAAC,GAAC,sDAAsD,CAAC,CAAA;EAAC,MAAA,OAAOD,CAAC,CAAA;EAAA,KAAC,CAAC,CAAA;EAAC,IAAA,OAAO/B,CAAC,CAAC+B,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EACtN4B,EAAAA,IAAI,CAAC6F,MAAM,GAAC,UAAS3H,CAAC,EAAC;MAAC,IAAIC,CAAC,WAAQD,CAAC,CAAA,CAAA;MAAC,IAAG,QAAQ,IAAEC,CAAC,EAAA;EAAC,MAAA,IAAGD,CAAC,EAAC;EAAC,QAAA,IAAGA,CAAC,YAAYa,KAAK,EAAC,OAAM,OAAO,CAAA;EAAC,QAAA,IAAGb,CAAC,YAAYW,MAAM,EAAC,OAAOV,CAAC,CAAA;UAAC,IAAIC,CAAC,GAACS,MAAM,CAACG,SAAS,CAAC8G,QAAQ,CAACnI,IAAI,CAACO,CAAC,CAAC,CAAA;EAAC,QAAA,IAAG,iBAAiB,IAAEE,CAAC,EAAC,OAAM,QAAQ,CAAA;EAAC,QAAA,IAAG,gBAAgB,IAAEA,CAAC,IAAE,QAAQ,IAAE,OAAOF,CAAC,CAACL,MAAM,IAAE,WAAW,IAAE,OAAOK,CAAC,CAAC6G,MAAM,IAAE,WAAW,IAAE,OAAO7G,CAAC,CAAC6H,oBAAoB,IAAE,CAAC7H,CAAC,CAAC6H,oBAAoB,CAAC,QAAQ,CAAC,EAAC,OAAM,OAAO,CAAA;UAAC,IAAG,mBAAmB,IAAE3H,CAAC,IAAE,WAAW,IAAE,OAAOF,CAAC,CAACP,IAAI,IAAE,WAAW,IAAE,OAAOO,CAAC,CAAC6H,oBAAoB,IAAE,CAAC7H,CAAC,CAAC6H,oBAAoB,CAAC,MAAM,CAAC,EAAC,OAAM,UAAU,CAAA;SAAC,MAAK,OAAM,MAAM,CAAA;EAAC,KAAA,MAC7hB,IAAG,UAAU,IAAE5H,CAAC,IAAE,WAAW,IAAE,OAAOD,CAAC,CAACP,IAAI,EAAC,OAAM,QAAQ,CAAA;EAAC,IAAA,OAAOQ,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACgG,OAAO,GAAC,UAAS9H,CAAC,EAAC;EAAC,IAAA,OAAM,OAAO,IAAE8B,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiG,WAAW,GAAC,UAAS/H,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAAC6B,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,CAAA;EAAC,IAAA,OAAM,OAAO,IAAEC,CAAC,IAAE,QAAQ,IAAEA,CAAC,IAAE,QAAQ,IAAE,OAAOD,CAAC,CAACL,MAAM,CAAA;KAAC,CAAA;EAACmC,EAAAA,IAAI,CAACkG,UAAU,GAAC,UAAShI,CAAC,EAAC;EAAC,IAAA,OAAO8B,IAAI,CAACmG,QAAQ,CAACjI,CAAC,CAAC,IAAE,UAAU,IAAE,OAAOA,CAAC,CAACkI,WAAW,CAAA;KAAC,CAAA;EAACpG,EAAAA,IAAI,CAAC2E,UAAU,GAAC,UAASzG,CAAC,EAAC;EAAC,IAAA,OAAM,UAAU,IAAE8B,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACmG,QAAQ,GAAC,UAASjI,CAAC,EAAC;MAAC,IAAIC,CAAC,WAAQD,CAAC,CAAA,CAAA;MAAC,OAAM,QAAQ,IAAEC,CAAC,IAAE,IAAI,IAAED,CAAC,IAAE,UAAU,IAAEC,CAAC,CAAA;KAAC,CAAA;EACvd6B,EAAAA,IAAI,CAACqG,MAAM,GAAC,UAASnI,CAAC,EAAC;EAAC,IAAA,OAAOW,MAAM,CAACG,SAAS,CAACsH,cAAc,CAAC3I,IAAI,CAACO,CAAC,EAAC8B,IAAI,CAACuG,aAAa,CAAC,IAAErI,CAAC,CAAC8B,IAAI,CAACuG,aAAa,CAAC,KAAGrI,CAAC,CAAC8B,IAAI,CAACuG,aAAa,CAAC,GAAC,EAAEvG,IAAI,CAACwG,WAAW,CAAC,CAAA;KAAC,CAAA;EAACxG,EAAAA,IAAI,CAACyG,MAAM,GAAC,UAASvI,CAAC,EAAC;EAAC,IAAA,OAAM,CAAC,CAACA,CAAC,CAAC8B,IAAI,CAACuG,aAAa,CAAC,CAAA;KAAC,CAAA;EAACvG,EAAAA,IAAI,CAAC0G,SAAS,GAAC,UAASxI,CAAC,EAAC;EAAC,IAAA,IAAI,KAAGA,CAAC,IAAE,iBAAiB,IAAGA,CAAC,IAAEA,CAAC,CAACyI,eAAe,CAAC3G,IAAI,CAACuG,aAAa,CAAC,CAAA;MAAC,IAAG;EAAC,MAAA,OAAOrI,CAAC,CAAC8B,IAAI,CAACuG,aAAa,CAAC,CAAA;OAAC,CAAA,OAAMpI,CAAC,EAAC,EAAE;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACuG,aAAa,GAAC,cAAc,IAAE,GAAG,GAAC5G,IAAI,CAACiH,MAAM,EAAE,KAAG,CAAC,CAAC,CAAA;IAAC5G,IAAI,CAACwG,WAAW,GAAC,CAAC,CAAA;EAACxG,EAAAA,IAAI,CAAC6G,WAAW,GAAC7G,IAAI,CAACqG,MAAM,CAAA;EAACrG,EAAAA,IAAI,CAAC8G,cAAc,GAAC9G,IAAI,CAAC0G,SAAS,CAAA;EAChf1G,EAAAA,IAAI,CAAC+G,WAAW,GAAC,UAAS7I,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAAC6B,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,CAAA;EAAC,IAAA,IAAG,QAAQ,IAAEC,CAAC,IAAE,OAAO,IAAEA,CAAC,EAAC;QAAC,IAAG,UAAU,KAAG,OAAOD,CAAC,CAAC8I,KAAK,EAAC,OAAO9I,CAAC,CAAC8I,KAAK,EAAE,CAAA;QAAC7I,CAAC,GAAC,OAAO,IAAEA,CAAC,GAAC,EAAE,GAAC,EAAE,CAAA;QAAC,KAAI,IAAIC,CAAC,IAAIF,CAAC,EAAA;EAACC,QAAAA,CAAC,CAACC,CAAC,CAAC,GAAC4B,IAAI,CAAC+G,WAAW,CAAC7I,CAAC,CAACE,CAAC,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,OAAOD,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOD,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACiH,WAAW,GAAC,UAAS/I,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,OAAOF,CAAC,CAACP,IAAI,CAACnB,KAAK,CAAC0B,CAAC,CAACgJ,IAAI,EAACC,SAAS,CAAC,CAAA;KAAC,CAAA;IACtRnH,IAAI,CAACoH,OAAO,GAAC,UAASlJ,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,CAACF,CAAC,EAAC,MAAM6C,KAAK,EAAE,CAAA;EAAC,IAAA,IAAG,CAAC,GAACoG,SAAS,CAACtJ,MAAM,EAAC;EAAC,MAAA,IAAIS,CAAC,GAACS,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,EAAC,CAAC,CAAC,CAAA;EAAC,MAAA,OAAO,YAAU;UAAC,IAAI/I,CAAC,GAACW,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,CAAC,CAAA;UAACpI,KAAK,CAACC,SAAS,CAACsI,OAAO,CAAC9K,KAAK,CAAC4B,CAAC,EAACE,CAAC,CAAC,CAAA;EAAC,QAAA,OAAOJ,CAAC,CAAC1B,KAAK,CAAC2B,CAAC,EAACC,CAAC,CAAC,CAAA;SAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAO,YAAU;EAAC,MAAA,OAAOF,CAAC,CAAC1B,KAAK,CAAC2B,CAAC,EAACgJ,SAAS,CAAC,CAAA;OAAC,CAAA;KAAC,CAAA;IAACnH,IAAI,CAACkH,IAAI,GAAC,UAAShJ,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAACmJ,IAAAA,QAAQ,CAACvI,SAAS,CAACkI,IAAI,IAAE,CAAC,CAAC,IAAEK,QAAQ,CAACvI,SAAS,CAACkI,IAAI,CAACpB,QAAQ,EAAE,CAAC0B,OAAO,CAAC,aAAa,CAAC,GAACxH,IAAI,CAACkH,IAAI,GAAClH,IAAI,CAACiH,WAAW,GAACjH,IAAI,CAACkH,IAAI,GAAClH,IAAI,CAACoH,OAAO,CAAA;MAAC,OAAOpH,IAAI,CAACkH,IAAI,CAAC1K,KAAK,CAAC,IAAI,EAAC2K,SAAS,CAAC,CAAA;KAAC,CAAA;EACtenH,EAAAA,IAAI,CAACyH,OAAO,GAAC,UAASvJ,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAACW,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,EAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO,YAAU;EAAC,MAAA,IAAIhJ,CAAC,GAACC,CAAC,CAACiJ,KAAK,EAAE,CAAA;QAAClJ,CAAC,CAACL,IAAI,CAACtB,KAAK,CAAC2B,CAAC,EAACgJ,SAAS,CAAC,CAAA;EAAC,MAAA,OAAOjJ,CAAC,CAAC1B,KAAK,CAAC,IAAI,EAAC2B,CAAC,CAAC,CAAA;OAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAAC0H,KAAK,GAAC,UAASxJ,CAAC,EAACC,CAAC,EAAC;MAAC,KAAI,IAAIC,CAAC,IAAID,CAAC,EAAA;EAACD,MAAAA,CAAC,CAACE,CAAC,CAAC,GAACD,CAAC,CAACC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;IAAC4B,IAAI,CAAC2H,GAAG,GAAC3H,IAAI,CAACS,YAAY,IAAEmH,IAAI,CAACD,GAAG,IAAE,YAAU;MAAC,OAAM,CAAC,IAAIC,IAAI,EAAA,CAAA;KAAC,CAAA;EAClR5H,EAAAA,IAAI,CAAC6H,UAAU,GAAC,UAAS3J,CAAC,EAAC;MAAC,IAAG8B,IAAI,CAACb,MAAM,CAACgB,UAAU,EAACH,IAAI,CAACb,MAAM,CAACgB,UAAU,CAACjC,CAAC,EAAC,YAAY,CAAC,CAAC,KAAK,IAAG8B,IAAI,CAACb,MAAM,CAACqF,IAAI,EAAC;EAAC,MAAA,IAAG,IAAI,IAAExE,IAAI,CAAC8H,oBAAoB,EAAC;UAAC,IAAG;EAAC9H,UAAAA,IAAI,CAACb,MAAM,CAACqF,IAAI,CAAC,qBAAqB,CAAC,CAAA;WAAC,CAAA,OAAMlG,CAAC,EAAC,EAAA;UAAE,IAAG,WAAW,IAAE,OAAO0B,IAAI,CAACb,MAAM,CAAC4I,UAAU,EAAC;YAAC,IAAG;EAAC,YAAA,OAAO/H,IAAI,CAACb,MAAM,CAAC4I,UAAU,CAAA;aAAC,CAAA,OAAMzJ,CAAC,EAAC,EAAA;EAAE0B,UAAAA,IAAI,CAAC8H,oBAAoB,GAAC,CAAC,CAAC,CAAA;EAAA,SAAC,MAAK9H,IAAI,CAAC8H,oBAAoB,GAAC,CAAC,CAAC,CAAA;EAAA,OAAA;EAAC,MAAA,IAAG9H,IAAI,CAAC8H,oBAAoB,EAAC9H,IAAI,CAACb,MAAM,CAACqF,IAAI,CAACtG,CAAC,CAAC,CAAC,KAAI;EAAC,QAAA,IAAIC,CAAC,GAAC6B,IAAI,CAACb,MAAM,CAACgC,QAAQ;EAAC/C,UAAAA,CAAC,GAACD,CAAC,CAAC6J,aAAa,CAAC,QAAQ,CAAC,CAAA;UAAC5J,CAAC,CAACkE,IAAI,GAAC,iBAAiB,CAAA;EAAClE,QAAAA,CAAC,CAAC6J,KAAK,GACxf,CAAC,CAAC,CAAA;UAAC7J,CAAC,CAAC8J,WAAW,CAAC/J,CAAC,CAACgK,cAAc,CAACjK,CAAC,CAAC,CAAC,CAAA;EAACC,QAAAA,CAAC,CAACiK,IAAI,CAACF,WAAW,CAAC9J,CAAC,CAAC,CAAA;EAACD,QAAAA,CAAC,CAACiK,IAAI,CAACC,WAAW,CAACjK,CAAC,CAAC,CAAA;EAAA,OAAA;EAAC,KAAC,MAAK,MAAM2C,KAAK,CAAC,+BAA+B,CAAC,CAAA;KAAE,CAAA;IAACf,IAAI,CAAC8H,oBAAoB,GAAC,IAAI,CAAA;EACrK9H,EAAAA,IAAI,CAACsI,UAAU,GAAC,UAASpK,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,GAAG,IAAEE,MAAM,CAACH,CAAC,CAAC,CAACqK,MAAM,CAAC,CAAC,CAAC,EAAC,MAAMxH,KAAK,CAAC,2EAA2E,GAAC7C,CAAC,CAAC,CAAA;EAAC,IAAA,IAAIE,CAAC,GAAC,SAAFA,CAAC,CAAUF,CAAC,EAAC;EAAC,QAAA,OAAO8B,IAAI,CAACwI,eAAe,CAACtK,CAAC,CAAC,IAAEA,CAAC,CAAA;SAAC;QAACI,CAAC,GAAC,SAASJ,CAAAA,CAAAA,CAAC,EAAC;EAACA,QAAAA,CAAC,GAACA,CAAC,CAACoB,KAAK,CAAC,GAAG,CAAC,CAAA;EAAC,QAAA,KAAI,IAAInB,CAAC,GAAC,EAAE,EAACG,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,CAAC,CAACL,MAAM,EAACS,CAAC,EAAE,EAAA;YAACH,CAAC,CAACL,IAAI,CAACM,CAAC,CAACF,CAAC,CAACI,CAAC,CAAC,CAAC,CAAC,CAAA;EAAC,SAAA;EAAA,QAAA,OAAOH,CAAC,CAAC6G,IAAI,CAAC,GAAG,CAAC,CAAA;SAAC,CAAA;EAAC1G,IAAAA,CAAC,GAAC0B,IAAI,CAACwI,eAAe,GAAC,UAAU,IAAExI,IAAI,CAACyI,oBAAoB,GAACrK,CAAC,GAACE,CAAC,GAAC,UAASJ,CAAC,EAAC;EAAC,MAAA,OAAOA,CAAC,CAAA;OAAC,CAAA;EAACA,IAAAA,CAAC,GAACC,CAAC,GAACD,CAAC,GAAC,GAAG,GAACI,CAAC,CAACH,CAAC,CAAC,GAACG,CAAC,CAACJ,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO8B,IAAI,CAACb,MAAM,CAACuJ,uBAAuB,GAAC1I,IAAI,CAACb,MAAM,CAACuJ,uBAAuB,CAACxK,CAAC,CAAC,GAACA,CAAC,CAAA;KAAC,CAAA;EAC1e8B,EAAAA,IAAI,CAAC2I,iBAAiB,GAAC,UAASzK,CAAC,EAACC,CAAC,EAAC;MAAC6B,IAAI,CAACwI,eAAe,GAACtK,CAAC,CAAA;MAAC8B,IAAI,CAACyI,oBAAoB,GAACtK,CAAC,CAAA;KAAC,CAAA;IAA8G6B,IAAI,CAAC4I,MAAM,GAAC,UAAS1K,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAACA,IAAAA,CAAC,IAAEA,CAAC,CAACyK,IAAI,KAAG3K,CAAC,GAACA,CAAC,CAAC4K,OAAO,CAAC,IAAI,EAAC,MAAM,CAAC,CAAC,CAAA;EAAC3K,IAAAA,CAAC,KAAGD,CAAC,GAACA,CAAC,CAAC4K,OAAO,CAAC,eAAe,EAAC,UAAS5K,CAAC,EAACE,CAAC,EAAC;EAAC,MAAA,OAAO,IAAI,IAAED,CAAC,IAAEC,CAAC,IAAID,CAAC,GAACA,CAAC,CAACC,CAAC,CAAC,GAACF,CAAC,CAAA;EAAA,KAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOA,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC+I,kBAAkB,GAAC,UAAS7K,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAOD,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACgJ,YAAY,GAAC,UAAS9K,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC4B,IAAI,CAACE,WAAW,CAAChC,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;IAC3c4B,IAAI,CAACiJ,cAAc,GAAC,UAAS/K,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAACF,IAAAA,CAAC,CAACC,CAAC,CAAC,GAACC,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACkJ,QAAQ,GAAC,UAAShL,CAAC,EAACC,CAAC,EAAC;MAAC,SAASC,CAAC,GAAE;EAAEA,IAAAA,CAAC,CAACY,SAAS,GAACb,CAAC,CAACa,SAAS,CAAA;EAACd,IAAAA,CAAC,CAACiL,WAAW,GAAChL,CAAC,CAACa,SAAS,CAAA;EAACd,IAAAA,CAAC,CAACc,SAAS,GAAC,IAAIZ,CAAC,EAAA,CAAA;EAACF,IAAAA,CAAC,CAACc,SAAS,CAACoK,WAAW,GAAClL,CAAC,CAAA;MAACA,CAAC,CAACmL,IAAI,GAAC,UAASnL,CAAC,EAACE,CAAC,EAACnB,CAAC,EAAC;QAAC,KAAI,IAAIqB,CAAC,GAACS,KAAK,CAACoI,SAAS,CAACtJ,MAAM,GAAC,CAAC,CAAC,EAAC1B,CAAC,GAAC,CAAC,EAACA,CAAC,GAACgL,SAAS,CAACtJ,MAAM,EAAC1B,CAAC,EAAE,EAAA;UAACmC,CAAC,CAACnC,CAAC,GAAC,CAAC,CAAC,GAACgL,SAAS,CAAChL,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,OAAOgC,CAAC,CAACa,SAAS,CAACZ,CAAC,CAAC,CAAC5B,KAAK,CAAC0B,CAAC,EAACI,CAAC,CAAC,CAAA;OAAC,CAAA;KAAC,CAAA;EAAC0B,EAAAA,IAAI,CAAChC,KAAK,GAAC,UAASE,CAAC,EAAC;MAAC,IAAG8B,IAAI,CAACc,iBAAiB,EAAE,EAAC,MAAMC,KAAK,CAAC,8CAA8C,CAAC,CAAA;EAAC7C,IAAAA,CAAC,CAACP,IAAI,CAACqC,IAAI,CAACb,MAAM,CAAC,CAAA;KAAC,CAAA;EACpca,EAAAA,IAAI,CAACsJ,WAAW,GAAC,UAASpL,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAACD,CAAC,CAACiL,WAAW;QAAC9K,CAAC,GAACH,CAAC,CAACoL,OAAO,CAAA;MAACnL,CAAC,IAAEA,CAAC,IAAES,MAAM,CAACG,SAAS,CAACoK,WAAW,KAAGhL,CAAC,GAAC,SAAU,CAAA,GAAA;QAAC,MAAM2C,KAAK,CAAC,2DAA2D,CAAC,CAAA;EAAC,KAAC,CAAC,CAAA;MAAC3C,CAAC,GAAC4B,IAAI,CAACsJ,WAAW,CAACE,yBAAyB,CAACpL,CAAC,EAACF,CAAC,CAAC,CAAA;MAACA,CAAC,IAAE8B,IAAI,CAACkJ,QAAQ,CAAC9K,CAAC,EAACF,CAAC,CAAC,CAAA;MAAC,OAAOC,CAAC,CAACiL,WAAW,CAAA;MAAC,OAAOjL,CAAC,CAACoL,OAAO,CAAA;MAACvJ,IAAI,CAACsJ,WAAW,CAACG,gBAAgB,CAACrL,CAAC,CAACY,SAAS,EAACb,CAAC,CAAC,CAAA;MAAC,IAAI,IAAEG,CAAC,KAAGA,CAAC,YAAYiJ,QAAQ,GAACjJ,CAAC,CAACF,CAAC,CAAC,GAAC4B,IAAI,CAACsJ,WAAW,CAACG,gBAAgB,CAACrL,CAAC,EAACE,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOF,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACsJ,WAAW,CAACI,oBAAoB,GAAC1J,IAAI,CAACO,KAAK,CAAA;IACneP,IAAI,CAACsJ,WAAW,CAACE,yBAAyB,GAAC,UAAStL,CAAC,EAACC,CAAC,EAAC;MAAC,IAAG,CAAC6B,IAAI,CAACsJ,WAAW,CAACI,oBAAoB,EAAC,OAAOxL,CAAC,CAAA;MAAC,IAAIE,CAAC,GAAC,CAAC4B,IAAI,CAACsJ,WAAW,CAACK,aAAa,CAACxL,CAAC,CAAC;QAACG,CAAC,GAAC,SAAFA,CAAC,GAAW;UAAC,IAAIH,CAAC,GAACD,CAAC,CAAC1B,KAAK,CAAC,IAAI,EAAC2K,SAAS,CAAC,IAAE,IAAI,CAAA;UAAChJ,CAAC,CAAC6B,IAAI,CAACuG,aAAa,CAAC,GAACpI,CAAC,CAAC6B,IAAI,CAACuG,aAAa,CAAC,CAAA;EAAC,QAAA,IAAI,CAAC6C,WAAW,KAAG9K,CAAC,IAAEF,CAAC,IAAES,MAAM,CAACgG,IAAI,YAAY0C,QAAQ,IAAE1I,MAAM,CAACgG,IAAI,CAAC1G,CAAC,CAAC,CAAA;EAAC,QAAA,OAAOA,CAAC,CAAA;SAAC,CAAA;EAAC,IAAA,OAAOG,CAAC,CAAA;KAAC,CAAA;EAAC0B,EAAAA,IAAI,CAACsJ,WAAW,CAACK,aAAa,GAAC,UAASzL,CAAC,EAAC;EAAC,IAAA,OAAOA,CAAC,IAAEA,CAAC,CAACc,SAAS,IAAEd,CAAC,CAACc,SAAS,CAACgB,IAAI,CAAC4J,gCAAgC,CAAC,CAAA;KAAC,CAAA;IAAC5J,IAAI,CAACsJ,WAAW,CAACO,wBAAwB,GAAC,+FAA+F,CAACvK,KAAK,CAAC,GAAG,CAAC,CAAA;IACzlBU,IAAI,CAACsJ,WAAW,CAACG,gBAAgB,GAAC,UAASvL,CAAC,EAACC,CAAC,EAAC;MAAC,KAAI,IAAIC,CAAC,IAAID,CAAC,EAAA;QAACU,MAAM,CAACG,SAAS,CAACsH,cAAc,CAAC3I,IAAI,CAACQ,CAAC,EAACC,CAAC,CAAC,KAAGF,CAAC,CAACE,CAAC,CAAC,GAACD,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC0B,IAAI,CAACsJ,WAAW,CAACO,wBAAwB,CAAChM,MAAM,EAACS,CAAC,EAAE,EAAA;EAACF,MAAAA,CAAC,GAAC4B,IAAI,CAACsJ,WAAW,CAACO,wBAAwB,CAACvL,CAAC,CAAC,EAACO,MAAM,CAACG,SAAS,CAACsH,cAAc,CAAC3I,IAAI,CAACQ,CAAC,EAACC,CAAC,CAAC,KAAGF,CAAC,CAACE,CAAC,CAAC,GAACD,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAAC8J,kBAAkB,GAAC,UAAS5L,CAAC,EAAC;KAA2G,CAAA;IAAC8B,IAAI,CAAC4J,gCAAgC,GAAC,oCAAoC,CAAA;IAgCrZ5J,IAAI,CAAC+J,yBAAyB,GAAC,EAAE,CAAA;EAAC/J,EAAAA,IAAI,CAACgK,SAAS,GAAC,UAAS9L,CAAC,EAAC;EAAC,IAAA,OAAOA,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiK,wBAAwB,GAAC,UAAS/L,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,IAAI;QAACC,CAAC,GAAC4B,IAAI,CAACb,MAAM,CAAC+K,YAAY,IAAElK,IAAI,CAACb,MAAM,CAACgL,YAAY,CAAA;MAAC,IAAG,CAAC/L,CAAC,IAAE,CAACA,CAAC,CAACgM,YAAY,EAAC,OAAOjM,CAAC,CAAA;MAAC,IAAG;EAACA,MAAAA,CAAC,GAACC,CAAC,CAACgM,YAAY,CAAClM,CAAC,EAAC;UAACmM,UAAU,EAACrK,IAAI,CAACgK,SAAS;UAACM,YAAY,EAACtK,IAAI,CAACgK,SAAS;UAACO,eAAe,EAACvK,IAAI,CAACgK,SAAS;UAACQ,SAAS,EAACxK,IAAI,CAACgK,SAAAA;EAAS,OAAC,CAAC,CAAA;OAAC,CAAA,OAAM1L,CAAC,EAAC;EAAC0B,MAAAA,IAAI,CAACoD,aAAa,CAAC9E,CAAC,CAACmM,OAAO,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOtM,CAAC,CAAA;KAAC,CAAA;EAC7e6B,EAAAA,IAAI,CAAC0K,qBAAqB,GAAC1K,IAAI,CAAC+J,yBAAyB,GAAC/J,IAAI,CAACiK,wBAAwB,CAACjK,IAAI,CAAC+J,yBAAyB,GAAC,OAAO,CAAC,GAAC,IAAI,CAAA;EAAC/J,EAAAA,IAAI,CAAC2K,MAAM,GAAC,EAAE,CAAA;IAAC3K,IAAI,CAAC2K,MAAM,CAACC,EAAE,GAAC,UAAS1M,CAAC,EAACC,CAAC,EAAC;MAAC,OAAOD,CAAC,KAAGC,CAAC,GAAC,CAAC,KAAGD,CAAC,IAAE,CAAC,GAACA,CAAC,KAAG,CAAC,GAACC,CAAC,GAACD,CAAC,KAAGA,CAAC,IAAEC,CAAC,KAAGA,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC2K,MAAM,CAACE,OAAO,GAAC,UAAS3M,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,KAAI,IAAIE,CAAC,IAAIJ,CAAC,EAAA;EAACC,MAAAA,CAAC,CAACR,IAAI,CAACS,CAAC,EAACF,CAAC,CAACI,CAAC,CAAC,EAACA,CAAC,EAACJ,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC2K,MAAM,CAACG,MAAM,GAAC,UAAS5M,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIE,CAAC,GAAC,EAAE;QAACnC,CAAC,CAAA;MAAC,KAAIA,CAAC,IAAI+B,CAAC,EAAA;QAACC,CAAC,CAACR,IAAI,CAACS,CAAC,EAACF,CAAC,CAAC/B,CAAC,CAAC,EAACA,CAAC,EAAC+B,CAAC,CAAC,KAAGI,CAAC,CAACnC,CAAC,CAAC,GAAC+B,CAAC,CAAC/B,CAAC,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOmC,CAAC,CAAA;KAAC,CAAA;IAAC0B,IAAI,CAAC2K,MAAM,CAACI,GAAG,GAAC,UAAS7M,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIE,CAAC,GAAC,EAAE;QAACnC,CAAC,CAAA;MAAC,KAAIA,CAAC,IAAI+B,CAAC,EAAA;EAACI,MAAAA,CAAC,CAACnC,CAAC,CAAC,GAACgC,CAAC,CAACR,IAAI,CAACS,CAAC,EAACF,CAAC,CAAC/B,CAAC,CAAC,EAACA,CAAC,EAAC+B,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOI,CAAC,CAAA;KAAC,CAAA;IAAC0B,IAAI,CAAC2K,MAAM,CAACK,IAAI,GAAC,UAAS9M,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,KAAI,IAAIE,CAAC,IAAIJ,CAAC,EAAA;EAAC,MAAA,IAAGC,CAAC,CAACR,IAAI,CAACS,CAAC,EAACF,CAAC,CAACI,CAAC,CAAC,EAACA,CAAC,EAACJ,CAAC,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAM,CAAC,CAAC,CAAA;KAAC,CAAA;IACvjB8B,IAAI,CAAC2K,MAAM,CAACM,KAAK,GAAC,UAAS/M,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,KAAI,IAAIE,CAAC,IAAIJ,CAAC,EAAA;EAAC,MAAA,IAAG,CAACC,CAAC,CAACR,IAAI,CAACS,CAAC,EAACF,CAAC,CAACI,CAAC,CAAC,EAACA,CAAC,EAACJ,CAAC,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAM,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC2K,MAAM,CAACO,QAAQ,GAAC,UAAShN,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,CAAC;QAACC,CAAC,CAAA;MAAC,KAAIA,CAAC,IAAIF,CAAC,EAAA;EAACC,MAAAA,CAAC,EAAE,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOA,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAAC2K,MAAM,CAACQ,SAAS,GAAC,UAASjN,CAAC,EAAC;MAAC,KAAI,IAAIC,CAAC,IAAID,CAAC,EAAA;EAAC,MAAA,OAAOC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAAC2K,MAAM,CAACS,WAAW,GAAC,UAASlN,CAAC,EAAC;MAAC,KAAI,IAAIC,CAAC,IAAID,CAAC,EAAA;QAAC,OAAOA,CAAC,CAACC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC2K,MAAM,CAACU,QAAQ,GAAC,UAASnN,CAAC,EAACC,CAAC,EAAC;MAAC,OAAO6B,IAAI,CAAC2K,MAAM,CAACW,aAAa,CAACpN,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAAC2K,MAAM,CAACY,SAAS,GAAC,UAASrN,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,EAAE;EAACC,MAAAA,CAAC,GAAC,CAAC;QAACE,CAAC,CAAA;MAAC,KAAIA,CAAC,IAAIJ,CAAC,EAAA;QAACC,CAAC,CAACC,CAAC,EAAE,CAAC,GAACF,CAAC,CAACI,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOH,CAAC,CAAA;KAAC,CAAA;EACrb6B,EAAAA,IAAI,CAAC2K,MAAM,CAACa,OAAO,GAAC,UAAStN,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,EAAE;EAACC,MAAAA,CAAC,GAAC,CAAC;QAACE,CAAC,CAAA;MAAC,KAAIA,CAAC,IAAIJ,CAAC,EAAA;EAACC,MAAAA,CAAC,CAACC,CAAC,EAAE,CAAC,GAACE,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOH,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC2K,MAAM,CAACc,cAAc,GAAC,UAASvN,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAAC4B,IAAI,CAACiG,WAAW,CAAC9H,CAAC,CAAC;EAACG,MAAAA,CAAC,GAACF,CAAC,GAACD,CAAC,GAACgJ,SAAS,CAAA;EAAC,IAAA,KAAI/I,CAAC,GAACA,CAAC,GAAC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACE,CAAC,CAACT,MAAM,EAACO,CAAC,EAAE,EAAC;QAAC,IAAG,IAAI,IAAEF,CAAC,EAAC,OAAA;EAAOA,MAAAA,CAAC,GAACA,CAAC,CAACI,CAAC,CAACF,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOF,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC2K,MAAM,CAACe,WAAW,GAAC,UAASxN,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO,IAAI,KAAGD,CAAC,IAAEC,CAAC,IAAID,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC2K,MAAM,CAACW,aAAa,GAAC,UAASpN,CAAC,EAACC,CAAC,EAAC;MAAC,KAAI,IAAIC,CAAC,IAAIF,CAAC,EAAA;QAAC,IAAGA,CAAC,CAACE,CAAC,CAAC,IAAED,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAM,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC2K,MAAM,CAACgB,OAAO,GAAC,UAASzN,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,KAAI,IAAIE,CAAC,IAAIJ,CAAC,EAAA;EAAC,MAAA,IAAGC,CAAC,CAACR,IAAI,CAACS,CAAC,EAACF,CAAC,CAACI,CAAC,CAAC,EAACA,CAAC,EAACJ,CAAC,CAAC,EAAC,OAAOI,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;IACxc0B,IAAI,CAAC2K,MAAM,CAACiB,SAAS,GAAC,UAAS1N,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAM,CAACD,CAAC,GAAC6B,IAAI,CAAC2K,MAAM,CAACgB,OAAO,CAACzN,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,KAAGF,CAAC,CAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAAC2K,MAAM,CAACkB,OAAO,GAAC,UAAS3N,CAAC,EAAC;MAAC,KAAI,IAAIC,CAAC,IAAID,CAAC,EAAA;EAAC,MAAA,OAAM,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAM,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC2K,MAAM,CAACmB,KAAK,GAAC,UAAS5N,CAAC,EAAC;MAAC,KAAI,IAAIC,CAAC,IAAID,CAAC,EAAA;QAAC,OAAOA,CAAC,CAACC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC2K,MAAM,CAACoB,MAAM,GAAC,UAAS7N,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,CAAA;MAAC,CAACA,CAAC,GAACD,CAAC,IAAID,CAAC,KAAG,OAAOA,CAAC,CAACC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOC,CAAC,CAAA;KAAC,CAAA;IAAC4B,IAAI,CAAC2K,MAAM,CAACqB,GAAG,GAAC,UAAS9N,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,KAAGF,CAAC,IAAEC,CAAC,IAAID,CAAC,EAAC,MAAM6C,KAAK,CAAC,uCAAuC,GAAC5C,CAAC,GAAC,GAAG,CAAC,CAAA;MAAC6B,IAAI,CAAC2K,MAAM,CAACsB,GAAG,CAAC/N,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC4B,IAAI,CAAC2K,MAAM,CAAC3I,GAAG,GAAC,UAAS9D,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO,IAAI,KAAGF,CAAC,IAAEC,CAAC,IAAID,CAAC,GAACA,CAAC,CAACC,CAAC,CAAC,GAACC,CAAC,CAAA;KAAC,CAAA;IAC7d4B,IAAI,CAAC2K,MAAM,CAACsB,GAAG,GAAC,UAAS/N,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAACF,IAAAA,CAAC,CAACC,CAAC,CAAC,GAACC,CAAC,CAAA;KAAC,CAAA;IAAC4B,IAAI,CAAC2K,MAAM,CAACuB,cAAc,GAAC,UAAShO,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAOD,CAAC,IAAID,CAAC,GAACA,CAAC,CAACC,CAAC,CAAC,GAACD,CAAC,CAACC,CAAC,CAAC,GAACC,CAAC,CAAA;KAAC,CAAA;IAAC4B,IAAI,CAAC2K,MAAM,CAACwB,0BAA0B,GAAC,UAASjO,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAGD,CAAC,IAAID,CAAC,EAAC,OAAOA,CAAC,CAACC,CAAC,CAAC,CAAA;MAACC,CAAC,GAACA,CAAC,EAAE,CAAA;EAAC,IAAA,OAAOF,CAAC,CAACC,CAAC,CAAC,GAACC,CAAC,CAAA;KAAC,CAAA;IAAC4B,IAAI,CAAC2K,MAAM,CAACyB,MAAM,GAAC,UAASlO,CAAC,EAACC,CAAC,EAAC;MAAC,KAAI,IAAIC,CAAC,IAAIF,CAAC,EAAA;EAAC,MAAA,IAAG,EAAEE,CAAC,IAAID,CAAC,CAAC,IAAED,CAAC,CAACE,CAAC,CAAC,KAAGD,CAAC,CAACC,CAAC,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,KAAA;MAAA,KAAI,IAAIE,CAAC,IAAIH,CAAC,EAAA;QAAC,IAAG,EAAEG,CAAC,IAAIJ,CAAC,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAM,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC2K,MAAM,CAAC3D,KAAK,GAAC,UAAS9I,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,EAAE;QAACC,CAAC,CAAA;MAAC,KAAIA,CAAC,IAAIF,CAAC,EAAA;EAACC,MAAAA,CAAC,CAACC,CAAC,CAAC,GAACF,CAAC,CAACE,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOD,CAAC,CAAA;KAAC,CAAA;EACzZ6B,EAAAA,IAAI,CAAC2K,MAAM,CAAC0B,WAAW,GAAC,UAASnO,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAAC6B,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,CAAA;EAAC,IAAA,IAAG,QAAQ,IAAEC,CAAC,IAAE,OAAO,IAAEA,CAAC,EAAC;EAAC,MAAA,IAAG6B,IAAI,CAAC2E,UAAU,CAACzG,CAAC,CAAC8I,KAAK,CAAC,EAAC,OAAO9I,CAAC,CAAC8I,KAAK,EAAE,CAAA;QAAC7I,CAAC,GAAC,OAAO,IAAEA,CAAC,GAAC,EAAE,GAAC,EAAE,CAAA;QAAC,KAAI,IAAIC,CAAC,IAAIF,CAAC,EAAA;EAACC,QAAAA,CAAC,CAACC,CAAC,CAAC,GAAC4B,IAAI,CAAC2K,MAAM,CAAC0B,WAAW,CAACnO,CAAC,CAACE,CAAC,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,OAAOD,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOD,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC2K,MAAM,CAAC2B,SAAS,GAAC,UAASpO,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,EAAE;QAACC,CAAC,CAAA;MAAC,KAAIA,CAAC,IAAIF,CAAC,EAAA;EAACC,MAAAA,CAAC,CAACD,CAAC,CAACE,CAAC,CAAC,CAAC,GAACA,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOD,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC2K,MAAM,CAAC4B,iBAAiB,GAAC,+FAA+F,CAACjN,KAAK,CAAC,GAAG,CAAC,CAAA;IAC9aU,IAAI,CAAC2K,MAAM,CAAC6B,MAAM,GAAC,UAAStO,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIC,CAAC,EAACE,CAAC,EAACnC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACgL,SAAS,CAACtJ,MAAM,EAAC1B,CAAC,EAAE,EAAC;EAACmC,MAAAA,CAAC,GAAC6I,SAAS,CAAChL,CAAC,CAAC,CAAA;QAAC,KAAIiC,CAAC,IAAIE,CAAC,EAAA;EAACJ,QAAAA,CAAC,CAACE,CAAC,CAAC,GAACE,CAAC,CAACF,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,KAAI,IAAInB,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC+C,IAAI,CAAC2K,MAAM,CAAC4B,iBAAiB,CAAC1O,MAAM,EAACZ,CAAC,EAAE,EAAA;EAACmB,QAAAA,CAAC,GAAC4B,IAAI,CAAC2K,MAAM,CAAC4B,iBAAiB,CAACtP,CAAC,CAAC,EAAC4B,MAAM,CAACG,SAAS,CAACsH,cAAc,CAAC3I,IAAI,CAACW,CAAC,EAACF,CAAC,CAAC,KAAGF,CAAC,CAACE,CAAC,CAAC,GAACE,CAAC,CAACF,CAAC,CAAC,CAAC,CAAA;EAAA,OAAA;EAAA,KAAA;KAAE,CAAA;EAC/P4B,EAAAA,IAAI,CAAC2K,MAAM,CAAC8B,MAAM,GAAC,UAASvO,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAACgJ,SAAS,CAACtJ,MAAM,CAAA;EAAC,IAAA,IAAG,CAAC,IAAEM,CAAC,IAAEY,KAAK,CAACiH,OAAO,CAACmB,SAAS,CAAC,CAAC,CAAC,CAAC,EAAC,OAAOnH,IAAI,CAAC2K,MAAM,CAAC8B,MAAM,CAACjQ,KAAK,CAAC,IAAI,EAAC2K,SAAS,CAAC,CAAC,CAAC,CAAC,CAAA;MAAC,IAAGhJ,CAAC,GAAC,CAAC,EAAC,MAAM4C,KAAK,CAAC,4BAA4B,CAAC,CAAA;EAAC,IAAA,KAAI,IAAI3C,CAAC,GAAC,EAAE,EAACE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACH,CAAC,EAACG,CAAC,IAAE,CAAC,EAAA;EAACF,MAAAA,CAAC,CAAC+I,SAAS,CAAC7I,CAAC,CAAC,CAAC,GAAC6I,SAAS,CAAC7I,CAAC,GAAC,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOF,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAAC2K,MAAM,CAAC+B,SAAS,GAAC,UAASxO,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAACgJ,SAAS,CAACtJ,MAAM,CAAA;EAAC,IAAA,IAAG,CAAC,IAAEM,CAAC,IAAEY,KAAK,CAACiH,OAAO,CAACmB,SAAS,CAAC,CAAC,CAAC,CAAC,EAAC,OAAOnH,IAAI,CAAC2K,MAAM,CAAC+B,SAAS,CAAClQ,KAAK,CAAC,IAAI,EAAC2K,SAAS,CAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,KAAI,IAAI/I,CAAC,GAAC,EAAE,EAACE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACH,CAAC,EAACG,CAAC,EAAE,EAAA;QAACF,CAAC,CAAC+I,SAAS,CAAC7I,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOF,CAAC,CAAA;KAAC,CAAA;EAC3c4B,EAAAA,IAAI,CAAC2K,MAAM,CAACgC,mBAAmB,GAAC,UAASzO,CAAC,EAAC;MAAC,IAAIC,CAAC,GAACD,CAAC,CAAA;MAACW,MAAM,CAAC+N,QAAQ,IAAE,CAAC/N,MAAM,CAAC+N,QAAQ,CAAC1O,CAAC,CAAC,KAAGC,CAAC,GAACU,MAAM,CAAC4N,MAAM,CAACvO,CAAC,CAAC,EAACW,MAAM,CAACgO,MAAM,CAAC1O,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOA,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAAC2K,MAAM,CAACmC,eAAe,GAAC,UAAS5O,CAAC,EAAC;MAAC,OAAM,CAAC,CAACW,MAAM,CAAC+N,QAAQ,IAAE/N,MAAM,CAAC+N,QAAQ,CAAC1O,CAAC,CAAC,CAAA;KAAC,CAAA;IAC9N8B,IAAI,CAAC2K,MAAM,CAACoC,mBAAmB,GAAC,UAAS7O,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,CAACF,CAAC,EAAC,OAAM,EAAE,CAAA;EAAC,IAAA,IAAG,CAACW,MAAM,CAACmO,mBAAmB,IAAE,CAACnO,MAAM,CAACoO,cAAc,EAAC,OAAOjN,IAAI,CAAC2K,MAAM,CAACa,OAAO,CAACtN,CAAC,CAAC,CAAA;MAAC,KAAI,IAAII,CAAC,GAAC,EAAE,EAACJ,CAAC,KAAGA,CAAC,KAAGW,MAAM,CAACG,SAAS,IAAEb,CAAC,CAAC,KAAGD,CAAC,KAAGqJ,QAAQ,CAACvI,SAAS,IAAEZ,CAAC,CAAC,GAAE;QAAC,KAAI,IAAIjC,CAAC,GAAC0C,MAAM,CAACmO,mBAAmB,CAAC9O,CAAC,CAAC,EAACjB,CAAC,GAAC,CAAC,EAACA,CAAC,GAACd,CAAC,CAAC0B,MAAM,EAACZ,CAAC,EAAE,EAAA;UAACqB,CAAC,CAACnC,CAAC,CAACc,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAA;EAAC,OAAA;EAAAiB,MAAAA,CAAC,GAACW,MAAM,CAACoO,cAAc,CAAC/O,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAO8B,IAAI,CAAC2K,MAAM,CAACa,OAAO,CAAClN,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC0B,EAAAA,IAAI,CAAC2K,MAAM,CAACuC,aAAa,GAAC,UAAShP,CAAC,EAAC;EAAC,IAAA,OAAM,CAACA,CAAC,GAACW,MAAM,CAACoO,cAAc,CAAC/O,CAAC,CAACc,SAAS,CAAC,KAAGd,CAAC,CAACkL,WAAW,CAAA;KAAC,CAAA;EAAC,EAAA,IAAI+D,IAAI,GAAC;EAACC,IAAAA,OAAO,EAAC,EAAE;KAAC,CAAA;EAACD,EAAAA,IAAI,CAACC,OAAO,CAACC,eAAe,GAAC,UAASnP,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC,IAAInC,CAAC,GAAC,kBAAkB,CAAA;EAAC,IAAA,IAAGiC,CAAC,EAAC;QAACjC,CAAC,IAAE,IAAI,GAACiC,CAAC,CAAA;QAAC,IAAInB,CAAC,GAACqB,CAAC,CAAA;EAAA,KAAC,MAAKJ,CAAC,KAAG/B,CAAC,IAAE,IAAI,GAAC+B,CAAC,EAACjB,CAAC,GAACkB,CAAC,CAAC,CAAA;MAAC,MAAM4C,KAAK,CAAC,EAAE,GAAC5E,CAAC,EAACc,CAAC,IAAE,EAAE,CAAC,CAAA;KAAE,CAAA;IAACkQ,IAAI,CAACC,OAAO,CAACE,MAAM,GAAC,UAASpP,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIE,CAAC,GAAC,EAAE,EAACnC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACgL,SAAS,CAACtJ,MAAM,EAAC,EAAE1B,CAAC,EAAA;QAACmC,CAAC,CAACnC,CAAC,GAAC,CAAC,CAAC,GAACgL,SAAS,CAAChL,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA+B,IAAAA,CAAC,IAAEiP,IAAI,CAACC,OAAO,CAACC,eAAe,CAAC,EAAE,EAAC,IAAI,EAAClP,CAAC,EAACG,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOJ,CAAC,CAAA;KAAC,CAAA;IAC9vBiP,IAAI,CAACC,OAAO,CAACG,YAAY,GAAC,UAASrP,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIE,CAAC,GAAC,EAAE,EAACnC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACgL,SAAS,CAACtJ,MAAM,EAAC,EAAE1B,CAAC,EAAA;QAACmC,CAAC,CAACnC,CAAC,GAAC,CAAC,CAAC,GAACgL,SAAS,CAAChL,CAAC,CAAC,CAAA;EAAC,KAAA;MAAA,QAAQ,KAAG,OAAO+B,CAAC,IAAEiP,IAAI,CAACC,OAAO,CAACC,eAAe,CAAC,iCAAiC,EAAC,CAACrN,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,EAACA,CAAC,CAAC,EAACC,CAAC,EAACG,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOJ,CAAC,CAAA;KAAC,CAAA;IAACiP,IAAI,CAACC,OAAO,CAACI,WAAW,GAAC,UAAStP,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIE,CAAC,GAAC,EAAE,EAACnC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACgL,SAAS,CAACtJ,MAAM,EAAC,EAAE1B,CAAC,EAAA;QAACmC,CAAC,CAACnC,CAAC,GAAC,CAAC,CAAC,GAACgL,SAAS,CAAChL,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA4C,IAAAA,KAAK,CAACiH,OAAO,CAAC9H,CAAC,CAAC,IAAEiP,IAAI,CAACC,OAAO,CAACC,eAAe,CAAC,gCAAgC,EAAC,CAACrN,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,EAACA,CAAC,CAAC,EAACC,CAAC,EAACG,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOJ,CAAC,CAAA;KAAC,CAAA;IAClbiP,IAAI,CAACC,OAAO,CAACK,IAAI,GAAC,UAASvP,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIC,CAAC,GAAC,EAAE,EAACE,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC6I,SAAS,CAACtJ,MAAM,EAAC,EAAES,CAAC,EAAA;QAACF,CAAC,CAACE,CAAC,GAAC,CAAC,CAAC,GAAC6I,SAAS,CAAC7I,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,MAAMyC,KAAK,CAAC,SAAS,IAAE7C,CAAC,GAAC,IAAI,GAACA,CAAC,GAAC,EAAE,CAAC,EAACE,CAAC,CAAC,CAAA;KAAE,CAAA;EAAC+O,EAAAA,IAAI,CAACC,OAAO,CAACM,gBAAgB,GAAC,UAASxP,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;EAAC,IAAA,KAAI,IAAInC,CAAC,GAAC,EAAE,EAACc,CAAC,GAAC,CAAC,EAACA,CAAC,GAACkK,SAAS,CAACtJ,MAAM,EAAC,EAAEZ,CAAC,EAAA;QAACd,CAAC,CAACc,CAAC,GAAC,CAAC,CAAC,GAACkK,SAAS,CAAClK,CAAC,CAAC,CAAA;EAAC,KAAA;EAAAiB,IAAAA,CAAC,YAAYC,CAAC,IAAEgP,IAAI,CAACC,OAAO,CAACC,eAAe,CAAC,oCAAoC,EAAC,CAACF,IAAI,CAACC,OAAO,CAACO,OAAO,CAACxP,CAAC,CAAC,EAACgP,IAAI,CAACC,OAAO,CAACO,OAAO,CAACzP,CAAC,CAAC,CAAC,EAACE,CAAC,EAACjC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO+B,CAAC,CAAA;KAAC,CAAA;EACnYiP,EAAAA,IAAI,CAACC,OAAO,CAACO,OAAO,GAAC,UAASzP,CAAC,EAAC;MAAC,OAAOA,CAAC,YAAYqJ,QAAQ,GAACrJ,CAAC,CAAC0P,WAAW,IAAE1P,CAAC,CAAC2P,IAAI,IAAE,mBAAmB,GAAC3P,CAAC,YAAYW,MAAM,GAACX,CAAC,CAACkL,WAAW,CAACwE,WAAW,IAAE1P,CAAC,CAACkL,WAAW,CAACyE,IAAI,IAAEhP,MAAM,CAACG,SAAS,CAAC8G,QAAQ,CAACnI,IAAI,CAACO,CAAC,CAAC,GAAC,IAAI,KAAGA,CAAC,GAAC,MAAM,GAAA,OAAA,CAAQA,CAAC,CAAA,CAAA;KAAC,CAAA;EAACiP,EAAAA,IAAI,CAACW,eAAe,GAAC,EAAE,CAAA;EAACX,EAAAA,IAAI,CAACY,kBAAkB,GAAC,YAAU,EAAE,CAAA;EAACZ,EAAAA,IAAI,CAACa,aAAa,GAAC,YAAU,EAAE,CAAA;EAACb,EAAAA,IAAI,CAACW,eAAe,CAACG,SAAS,GAAC;MAACC,OAAO,EAAC,CAAC,CAAC;EAACC,IAAAA,MAAM,EAAC,CAAC;EAACC,IAAAA,KAAK,EAAC,CAAC;EAACC,IAAAA,KAAK,EAAC,CAAC;EAACC,IAAAA,MAAM,EAAC,CAAC;EAACC,IAAAA,KAAK,EAAC,CAAC;EAACC,IAAAA,OAAO,EAAC,CAAC;EAACC,IAAAA,OAAO,EAAC,CAAC;EAACC,IAAAA,IAAI,EAAC,CAAC;EAACC,IAAAA,MAAM,EAAC,CAAC;EAACC,IAAAA,KAAK,EAAC,EAAE;EAACC,IAAAA,OAAO,EAAC,EAAE;EAACC,IAAAA,KAAK,EAAC,EAAE;EAACC,IAAAA,MAAM,EAAC,EAAE;EAACC,IAAAA,IAAI,EAAC,EAAE;EAACC,IAAAA,QAAQ,EAAC,EAAE;EAACC,IAAAA,QAAQ,EAAC,EAAE;EAACC,IAAAA,MAAM,EAAC,EAAE;EAACC,IAAAA,MAAM,EAAC,EAAE;EAACC,IAAAA,OAAO,EAAC,EAAE;EAACC,IAAAA,OAAO,EAAC,EAAA;KAAG,CAAA;EAACnC,EAAAA,IAAI,CAACW,eAAe,CAACyB,QAAQ,GAAC;MAACrB,OAAO,EAAC,CAAC,CAAC;EAACsB,IAAAA,MAAM,EAAC,CAAC;EAAChB,IAAAA,OAAO,EAAC,CAAC;EAACiB,IAAAA,SAAS,EAAC,CAAC;EAACC,IAAAA,WAAW,EAAC,CAAC;EAACC,IAAAA,SAAS,EAAC,CAAC;EAAClB,IAAAA,OAAO,EAAC,CAAA;KAAE,CAAA;EAC7pBtB,EAAAA,IAAI,CAACW,eAAe,CAAC8B,mBAAmB,GAAC,UAAS1R,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAACgP,IAAI,CAACW,eAAe,CAACG,SAAS;EAAC7P,MAAAA,CAAC,GAAC+O,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAAA;EAAC,IAAA,QAAOrR,CAAC;QAAE,KAAKC,CAAC,CAACoQ,KAAK,CAAA;QAAC,KAAKpQ,CAAC,CAACkQ,KAAK,CAAA;QAAC,KAAKlQ,CAAC,CAAC4Q,MAAM,CAAA;QAAC,KAAK5Q,CAAC,CAACmQ,MAAM,CAAA;QAAC,KAAKnQ,CAAC,CAACgR,MAAM,CAAA;QAAC,KAAKhR,CAAC,CAACiR,MAAM,CAAA;QAAC,KAAKjR,CAAC,CAACuQ,IAAI,CAAA;QAAC,KAAKvQ,CAAC,CAAC6Q,IAAI,CAAA;QAAC,KAAK7Q,CAAC,CAACmR,OAAO;UAAC,OAAOlR,CAAC,CAACoR,MAAM,CAAA;QAAC,KAAKrR,CAAC,CAACgQ,MAAM,CAAA;QAAC,KAAKhQ,CAAC,CAACqQ,OAAO,CAAA;QAAC,KAAKrQ,CAAC,CAAC+Q,QAAQ,CAAA;QAAC,KAAK/Q,CAAC,CAACkR,OAAO;UAAC,OAAOjR,CAAC,CAACoQ,OAAO,CAAA;QAAC,KAAKrQ,CAAC,CAACwQ,MAAM,CAAA;QAAC,KAAKxQ,CAAC,CAAC0Q,OAAO,CAAA;QAAC,KAAK1Q,CAAC,CAAC2Q,KAAK;UAAC,OAAO1Q,CAAC,CAACqR,SAAS,CAAA;QAAC,KAAKtR,CAAC,CAACiQ,KAAK,CAAA;QAAC,KAAKjQ,CAAC,CAACsQ,OAAO,CAAA;QAAC,KAAKtQ,CAAC,CAAC8Q,QAAQ;UAAC,OAAO7Q,CAAC,CAACqQ,OAAO,CAAA;EAAC,MAAA;UAAQ,OAAOrQ,CAAC,CAAC8P,OAAO,CAAA;EAAA,KAAA;KAAE,CAAA;EAC9ef,EAAAA,IAAI,CAACW,eAAe,CAAC+B,oBAAoB,GAAC,CAAC,CAAC,CAAA;EAAC1C,EAAAA,IAAI,CAACW,eAAe,CAACgC,WAAW,GAAC,qBAAqB,CAAA;EAAC3C,EAAAA,IAAI,CAACW,eAAe,CAACiC,WAAW,GAAC,sBAAsB,CAAA;EAAC5C,EAAAA,IAAI,CAACW,eAAe,CAACkC,WAAW,GAAC,qBAAqB,CAAA;EAAC7C,EAAAA,IAAI,CAACW,eAAe,CAACmC,WAAW,GAAC,QAAQ,CAAA;EAAC9C,EAAAA,IAAI,CAACW,eAAe,CAACoC,WAAW,GAAC,uBAAuB,CAAA;EAAC/C,EAAAA,IAAI,CAACW,eAAe,CAACqC,WAAW,GAAC,sBAAsB,CAAA;EAAChD,EAAAA,IAAI,CAACW,eAAe,CAACsC,SAAS,GAAC,OAAO,CAAA;EAACjD,EAAAA,IAAI,CAACW,eAAe,CAACuC,SAAS,GAAC,OAAO,CAAA;EAAClD,EAAAA,IAAI,CAACW,eAAe,CAACwC,SAAS,GAAC,UAAU,CAAA;EACrenD,EAAAA,IAAI,CAACW,eAAe,CAACyC,SAAS,GAAC,UAAU,CAAA;EAACpD,EAAAA,IAAI,CAACW,eAAe,CAAC0C,SAAS,GAAC,gBAAgB,CAAA;EAACrD,EAAAA,IAAI,CAACW,eAAe,CAAC2C,SAAS,GAAC,kBAAkB,CAAA;EAACtD,EAAAA,IAAI,CAACW,eAAe,CAAC4C,SAAS,GAAC,qBAAqB,CAAA;EAACvD,EAAAA,IAAI,CAACW,eAAe,CAAC6C,SAAS,GAAC,kCAAkC,CAAA;EAAC3Q,EAAAA,IAAI,CAAC4Q,KAAK,GAAC,EAAE,CAAA;EAAC5Q,EAAAA,IAAI,CAAC4Q,KAAK,CAAC7P,KAAK,GAAC,UAAS7C,CAAC,EAAC;EAAC,IAAA,IAAG6C,KAAK,CAAC8P,iBAAiB,EAAC9P,KAAK,CAAC8P,iBAAiB,CAAC,IAAI,EAAC7Q,IAAI,CAAC4Q,KAAK,CAAC7P,KAAK,CAAC,CAAC,KAAI;EAAC,MAAA,IAAI5C,CAAC,GAAC4C,KAAK,EAAE,CAAC+P,KAAK,CAAA;EAAC3S,MAAAA,CAAC,KAAG,IAAI,CAAC2S,KAAK,GAAC3S,CAAC,CAAC,CAAA;EAAA,KAAA;MAACD,CAAC,KAAG,IAAI,CAACuM,OAAO,GAACpM,MAAM,CAACH,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAI,CAAC6S,mBAAmB,GAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC/Q,IAAI,CAACkJ,QAAQ,CAAClJ,IAAI,CAAC4Q,KAAK,CAAC7P,KAAK,EAACA,KAAK,CAAC,CAAA;IAACf,IAAI,CAAC4Q,KAAK,CAAC7P,KAAK,CAAC/B,SAAS,CAAC6O,IAAI,GAAC,aAAa,CAAA;EAAC7N,EAAAA,IAAI,CAACgR,GAAG,GAAC,EAAE,CAAA;EAAChR,EAAAA,IAAI,CAACgR,GAAG,CAACC,QAAQ,GAAC;EAACC,IAAAA,OAAO,EAAC,CAAC;EAACC,IAAAA,SAAS,EAAC,CAAC;EAACC,IAAAA,IAAI,EAAC,CAAC;EAACC,IAAAA,aAAa,EAAC,CAAC;EAACC,IAAAA,gBAAgB,EAAC,CAAC;EAACC,IAAAA,MAAM,EAAC,CAAC;EAACC,IAAAA,sBAAsB,EAAC,CAAC;EAACC,IAAAA,OAAO,EAAC,CAAC;EAACC,IAAAA,QAAQ,EAAC,CAAC;EAACC,IAAAA,aAAa,EAAC,EAAE;EAACC,IAAAA,iBAAiB,EAAC,EAAE;EAACC,IAAAA,QAAQ,EAAC,EAAA;KAAG,CAAA;EAAC7R,EAAAA,IAAI,CAACoN,OAAO,GAAC,EAAE,CAAA;EAACpN,EAAAA,IAAI,CAACoN,OAAO,CAAC0E,cAAc,GAAC9R,IAAI,CAACO,KAAK,CAAA;IAACP,IAAI,CAACoN,OAAO,CAAC2E,cAAc,GAAC,UAAS7T,CAAC,EAACC,CAAC,EAAC;EAAC6B,IAAAA,IAAI,CAAC4Q,KAAK,CAAC7P,KAAK,CAACpD,IAAI,CAAC,IAAI,EAACqC,IAAI,CAACoN,OAAO,CAAC4E,KAAK,CAAC9T,CAAC,EAACC,CAAC,CAAC,CAAC,CAAA;MAAC,IAAI,CAAC8T,cAAc,GAAC/T,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACkJ,QAAQ,CAAClJ,IAAI,CAACoN,OAAO,CAAC2E,cAAc,EAAC/R,IAAI,CAAC4Q,KAAK,CAAC7P,KAAK,CAAC,CAAA;IAACf,IAAI,CAACoN,OAAO,CAAC2E,cAAc,CAAC/S,SAAS,CAAC6O,IAAI,GAAC,gBAAgB,CAAA;EAAC7N,EAAAA,IAAI,CAACoN,OAAO,CAAC8E,qBAAqB,GAAC,UAAShU,CAAC,EAAC;EAAC,IAAA,MAAMA,CAAC,CAAA;KAAE,CAAA;IAAC8B,IAAI,CAACoN,OAAO,CAAC+E,aAAa,GAACnS,IAAI,CAACoN,OAAO,CAAC8E,qBAAqB,CAAA;IACnpClS,IAAI,CAACoN,OAAO,CAAC4E,KAAK,GAAC,UAAS9T,CAAC,EAACC,CAAC,EAAC;EAACD,IAAAA,CAAC,GAACA,CAAC,CAACoB,KAAK,CAAC,IAAI,CAAC,CAAA;MAAC,KAAI,IAAIlB,CAAC,GAAC,EAAE,EAACE,CAAC,GAACJ,CAAC,CAACL,MAAM,GAAC,CAAC,EAAC1B,CAAC,GAAC,CAAC,EAACA,CAAC,GAACmC,CAAC,EAACnC,CAAC,EAAE,EAAA;EAACiC,MAAAA,CAAC,IAAEF,CAAC,CAAC/B,CAAC,CAAC,IAAEA,CAAC,GAACgC,CAAC,CAACN,MAAM,GAACM,CAAC,CAAChC,CAAC,CAAC,GAAC,IAAI,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOiC,CAAC,GAACF,CAAC,CAACI,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC0B,EAAAA,IAAI,CAACoN,OAAO,CAACgF,gBAAgB,GAAC,UAASlU,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC,IAAInC,CAAC,GAAC,kBAAkB,CAAA;EAAC,IAAA,IAAGiC,CAAC,EAAC;QAACjC,CAAC,IAAE,IAAI,GAACiC,CAAC,CAAA;QAAC,IAAInB,CAAC,GAACqB,CAAC,CAAA;EAAA,KAAC,MAAKJ,CAAC,KAAG/B,CAAC,IAAE,IAAI,GAAC+B,CAAC,EAACjB,CAAC,GAACkB,CAAC,CAAC,CAAA;EAACD,IAAAA,CAAC,GAAC,IAAI8B,IAAI,CAACoN,OAAO,CAAC2E,cAAc,CAAC,EAAE,GAAC5V,CAAC,EAACc,CAAC,IAAE,EAAE,CAAC,CAAA;EAAC+C,IAAAA,IAAI,CAACoN,OAAO,CAAC+E,aAAa,CAACjU,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACoN,OAAO,CAACiF,eAAe,GAAC,UAASnU,CAAC,EAAC;EAAC8B,IAAAA,IAAI,CAACoN,OAAO,CAAC0E,cAAc,KAAG9R,IAAI,CAACoN,OAAO,CAAC+E,aAAa,GAACjU,CAAC,CAAC,CAAA;KAAC,CAAA;IAChb8B,IAAI,CAACoN,OAAO,CAACE,MAAM,GAAC,UAASpP,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC4B,IAAAA,IAAI,CAACoN,OAAO,CAAC0E,cAAc,IAAE,CAAC5T,CAAC,IAAE8B,IAAI,CAACoN,OAAO,CAACgF,gBAAgB,CAAC,EAAE,EAAC,IAAI,EAACjU,CAAC,EAACY,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,EAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOjJ,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACoN,OAAO,CAACkF,YAAY,GAAC,UAASpU,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC4B,IAAAA,IAAI,CAACoN,OAAO,CAAC0E,cAAc,IAAE,IAAI,IAAE5T,CAAC,IAAE8B,IAAI,CAACoN,OAAO,CAACgF,gBAAgB,CAAC,wBAAwB,EAAC,CAAClU,CAAC,CAAC,EAACC,CAAC,EAACY,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,EAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOjJ,CAAC,CAAA;KAAC,CAAA;IAC/V8B,IAAI,CAACoN,OAAO,CAACK,IAAI,GAAC,UAASvP,CAAC,EAACC,CAAC,EAAC;EAAC6B,IAAAA,IAAI,CAACoN,OAAO,CAAC0E,cAAc,IAAE9R,IAAI,CAACoN,OAAO,CAAC+E,aAAa,CAAC,IAAInS,IAAI,CAACoN,OAAO,CAAC2E,cAAc,CAAC,SAAS,IAAE7T,CAAC,GAAC,IAAI,GAACA,CAAC,GAAC,EAAE,CAAC,EAACa,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,EAAC,CAAC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAACnH,IAAI,CAACoN,OAAO,CAACmF,YAAY,GAAC,UAASrU,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC4B,IAAAA,IAAI,CAACoN,OAAO,CAAC0E,cAAc,IAAE,QAAQ,KAAG,OAAO5T,CAAC,IAAE8B,IAAI,CAACoN,OAAO,CAACgF,gBAAgB,CAAC,iCAAiC,EAAC,CAACpS,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,EAACA,CAAC,CAAC,EAACC,CAAC,EAACY,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,EAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOjJ,CAAC,CAAA;KAAC,CAAA;IAC9Z8B,IAAI,CAACoN,OAAO,CAACG,YAAY,GAAC,UAASrP,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC4B,IAAAA,IAAI,CAACoN,OAAO,CAAC0E,cAAc,IAAE,QAAQ,KAAG,OAAO5T,CAAC,IAAE8B,IAAI,CAACoN,OAAO,CAACgF,gBAAgB,CAAC,iCAAiC,EAAC,CAACpS,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,EAACA,CAAC,CAAC,EAACC,CAAC,EAACY,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,EAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOjJ,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACoN,OAAO,CAACoF,cAAc,GAAC,UAAStU,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC4B,IAAI,CAACoN,OAAO,CAAC0E,cAAc,IAAE,CAAC9R,IAAI,CAAC2E,UAAU,CAACzG,CAAC,CAAC,IAAE8B,IAAI,CAACoN,OAAO,CAACgF,gBAAgB,CAAC,mCAAmC,EAAC,CAACpS,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,EAACA,CAAC,CAAC,EAACC,CAAC,EAACY,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,EAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOjJ,CAAC,CAAA;KAAC,CAAA;IAC3c8B,IAAI,CAACoN,OAAO,CAACqF,YAAY,GAAC,UAASvU,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC4B,IAAI,CAACoN,OAAO,CAAC0E,cAAc,IAAE,CAAC9R,IAAI,CAACmG,QAAQ,CAACjI,CAAC,CAAC,IAAE8B,IAAI,CAACoN,OAAO,CAACgF,gBAAgB,CAAC,iCAAiC,EAAC,CAACpS,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,EAACA,CAAC,CAAC,EAACC,CAAC,EAACY,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,EAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOjJ,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACoN,OAAO,CAACI,WAAW,GAAC,UAAStP,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC4B,IAAI,CAACoN,OAAO,CAAC0E,cAAc,IAAE,CAAC/S,KAAK,CAACiH,OAAO,CAAC9H,CAAC,CAAC,IAAE8B,IAAI,CAACoN,OAAO,CAACgF,gBAAgB,CAAC,gCAAgC,EAAC,CAACpS,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,EAACA,CAAC,CAAC,EAACC,CAAC,EAACY,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,EAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOjJ,CAAC,CAAA;KAAC,CAAA;IACjc8B,IAAI,CAACoN,OAAO,CAACsF,aAAa,GAAC,UAASxU,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC4B,IAAAA,IAAI,CAACoN,OAAO,CAAC0E,cAAc,IAAE,SAAS,KAAG,OAAO5T,CAAC,IAAE8B,IAAI,CAACoN,OAAO,CAACgF,gBAAgB,CAAC,kCAAkC,EAAC,CAACpS,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,EAACA,CAAC,CAAC,EAACC,CAAC,EAACY,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,EAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOjJ,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACoN,OAAO,CAACuF,aAAa,GAAC,UAASzU,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,CAAC4B,IAAI,CAACoN,OAAO,CAAC0E,cAAc,IAAE9R,IAAI,CAACmG,QAAQ,CAACjI,CAAC,CAAC,IAAEA,CAAC,CAAC0U,QAAQ,IAAE5S,IAAI,CAACgR,GAAG,CAACC,QAAQ,CAACC,OAAO,IAAElR,IAAI,CAACoN,OAAO,CAACgF,gBAAgB,CAAC,kCAAkC,EAAC,CAACpS,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,EAACA,CAAC,CAAC,EAACC,CAAC,EAACY,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,EAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOjJ,CAAC,CAAA;KAAC,CAAA;EACjf8B,EAAAA,IAAI,CAACoN,OAAO,CAACM,gBAAgB,GAAC,UAASxP,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC,CAAC0B,IAAI,CAACoN,OAAO,CAAC0E,cAAc,IAAE5T,CAAC,YAAYC,CAAC,IAAE6B,IAAI,CAACoN,OAAO,CAACgF,gBAAgB,CAAC,oCAAoC,EAAC,CAACpS,IAAI,CAACoN,OAAO,CAACyF,QAAQ,CAAC1U,CAAC,CAAC,EAAC6B,IAAI,CAACoN,OAAO,CAACyF,QAAQ,CAAC3U,CAAC,CAAC,CAAC,EAACE,CAAC,EAACW,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,EAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOjJ,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACoN,OAAO,CAAC0F,YAAY,GAAC,UAAS5U,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,CAAC4B,IAAI,CAACoN,OAAO,CAAC0E,cAAc,IAAE,QAAQ,IAAE,OAAO5T,CAAC,IAAE6U,QAAQ,CAAC7U,CAAC,CAAC,IAAE8B,IAAI,CAACoN,OAAO,CAACgF,gBAAgB,CAAC,kDAAkD,EAAC,CAAClU,CAAC,CAAC,EAACC,CAAC,EAACY,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,EAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOjJ,CAAC,CAAA;KAAC,CAAA;EAC5f8B,EAAAA,IAAI,CAACoN,OAAO,CAAC4F,6BAA6B,GAAC,YAAU;EAAC,IAAA,KAAI,IAAI9U,CAAC,IAAIW,MAAM,CAACG,SAAS,EAAA;QAACgB,IAAI,CAACoN,OAAO,CAACK,IAAI,CAACvP,CAAC,GAAC,gDAAgD,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACoN,OAAO,CAACyF,QAAQ,GAAC,UAAS3U,CAAC,EAAC;MAAC,OAAOA,CAAC,YAAYqJ,QAAQ,GAACrJ,CAAC,CAAC0P,WAAW,IAAE1P,CAAC,CAAC2P,IAAI,IAAE,mBAAmB,GAAC3P,CAAC,YAAYW,MAAM,GAACX,CAAC,CAACkL,WAAW,CAACwE,WAAW,IAAE1P,CAAC,CAACkL,WAAW,CAACyE,IAAI,IAAEhP,MAAM,CAACG,SAAS,CAAC8G,QAAQ,CAACnI,IAAI,CAACO,CAAC,CAAC,GAAC,IAAI,KAAGA,CAAC,GAAC,MAAM,GAAA,OAAA,CAAQA,CAAC,CAAA,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiT,KAAK,GAAC,EAAE,CAAA;EAACjT,EAAAA,IAAI,CAACkT,uBAAuB,GAAClT,IAAI,CAACS,YAAY,CAAA;IAACT,IAAI,CAACiT,KAAK,CAACE,uBAAuB,GAAC,IAAI,GAACnT,IAAI,CAACM,eAAe,CAAA;EAACN,EAAAA,IAAI,CAACiT,KAAK,CAACG,IAAI,GAAC,UAASlV,CAAC,EAAC;EAAC,IAAA,OAAOA,CAAC,CAACA,CAAC,CAACL,MAAM,GAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAACmC,IAAI,CAACiT,KAAK,CAACI,IAAI,GAACrT,IAAI,CAACiT,KAAK,CAACG,IAAI,CAAA;EAC/kBpT,EAAAA,IAAI,CAACiT,KAAK,CAACzL,OAAO,GAACxH,IAAI,CAACkT,uBAAuB,KAAGlT,IAAI,CAACiT,KAAK,CAACE,uBAAuB,IAAEpU,KAAK,CAACC,SAAS,CAACwI,OAAO,CAAC,GAAC,UAAStJ,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC4B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,IAAI,IAAEpP,CAAC,CAACL,MAAM,CAAC,CAAA;EAAC,IAAA,OAAOkB,KAAK,CAACC,SAAS,CAACwI,OAAO,CAAC7J,IAAI,CAACO,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAA,GAAC,GAAC,UAASF,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAACA,CAAC,GAAC,IAAI,IAAEA,CAAC,GAAC,CAAC,GAAC,CAAC,GAACA,CAAC,GAACuB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAC1B,CAAC,CAACL,MAAM,GAACO,CAAC,CAAC,GAACA,CAAC,CAAA;MAAC,IAAG,QAAQ,KAAG,OAAOF,CAAC,EAAC,OAAM,QAAQ,KAAG,OAAOC,CAAC,IAAE,CAAC,IAAEA,CAAC,CAACN,MAAM,GAAC,CAAC,CAAC,GAACK,CAAC,CAACsJ,OAAO,CAACrJ,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAKA,CAAC,GAACF,CAAC,CAACL,MAAM,EAACO,CAAC,EAAE,EAAA;EAAC,MAAA,IAAGA,CAAC,IAAIF,CAAC,IAAEA,CAAC,CAACE,CAAC,CAAC,KAAGD,CAAC,EAAC,OAAOC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAM,CAAC,CAAC,CAAA;KAAC,CAAA;EAClZ4B,EAAAA,IAAI,CAACiT,KAAK,CAACK,WAAW,GAACtT,IAAI,CAACkT,uBAAuB,KAAGlT,IAAI,CAACiT,KAAK,CAACE,uBAAuB,IAAEpU,KAAK,CAACC,SAAS,CAACsU,WAAW,CAAC,GAAC,UAASpV,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC4B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,IAAI,IAAEpP,CAAC,CAACL,MAAM,CAAC,CAAA;MAAC,OAAOkB,KAAK,CAACC,SAAS,CAACsU,WAAW,CAAC3V,IAAI,CAACO,CAAC,EAACC,CAAC,EAAC,IAAI,IAAEC,CAAC,GAACF,CAAC,CAACL,MAAM,GAAC,CAAC,GAACO,CAAC,CAAC,CAAA;EAAA,GAAC,GAAC,UAASF,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAACA,CAAC,GAAC,IAAI,IAAEA,CAAC,GAACF,CAAC,CAACL,MAAM,GAAC,CAAC,GAACO,CAAC,CAAA;EAAC,IAAA,CAAC,GAACA,CAAC,KAAGA,CAAC,GAACuB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAC1B,CAAC,CAACL,MAAM,GAACO,CAAC,CAAC,CAAC,CAAA;MAAC,IAAG,QAAQ,KAAG,OAAOF,CAAC,EAAC,OAAM,QAAQ,KAAG,OAAOC,CAAC,IAAE,CAAC,IAAEA,CAAC,CAACN,MAAM,GAAC,CAAC,CAAC,GAACK,CAAC,CAACoV,WAAW,CAACnV,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAK,CAAC,IAAEA,CAAC,EAACA,CAAC,EAAE,EAAA;EAAC,MAAA,IAAGA,CAAC,IAAIF,CAAC,IAAEA,CAAC,CAACE,CAAC,CAAC,KAAGD,CAAC,EAAC,OAAOC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAM,CAAC,CAAC,CAAA;KAAC,CAAA;EAC7b4B,EAAAA,IAAI,CAACiT,KAAK,CAACpI,OAAO,GAAC7K,IAAI,CAACkT,uBAAuB,KAAGlT,IAAI,CAACiT,KAAK,CAACE,uBAAuB,IAAEpU,KAAK,CAACC,SAAS,CAAC6L,OAAO,CAAC,GAAC,UAAS3M,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC4B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,IAAI,IAAEpP,CAAC,CAACL,MAAM,CAAC,CAAA;EAACkB,IAAAA,KAAK,CAACC,SAAS,CAAC6L,OAAO,CAAClN,IAAI,CAACO,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAA,GAAC,GAAC,UAASF,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIE,CAAC,GAACJ,CAAC,CAACL,MAAM,EAAC1B,CAAC,GAAC,QAAQ,KAAG,OAAO+B,CAAC,GAACA,CAAC,CAACoB,KAAK,CAAC,EAAE,CAAC,GAACpB,CAAC,EAACjB,CAAC,GAAC,CAAC,EAACA,CAAC,GAACqB,CAAC,EAACrB,CAAC,EAAE,EAAA;EAACA,MAAAA,CAAC,IAAId,CAAC,IAAEgC,CAAC,CAACR,IAAI,CAACS,CAAC,EAACjC,CAAC,CAACc,CAAC,CAAC,EAACA,CAAC,EAACiB,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;IAAC8B,IAAI,CAACiT,KAAK,CAACM,YAAY,GAAC,UAASrV,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIE,CAAC,GAACJ,CAAC,CAACL,MAAM;EAAC1B,MAAAA,CAAC,GAAC,QAAQ,KAAG,OAAO+B,CAAC,GAACA,CAAC,CAACoB,KAAK,CAAC,EAAE,CAAC,GAACpB,CAAC,CAAA;MAAC,KAAI,EAAEI,CAAC,EAAC,CAAC,IAAEA,CAAC,EAAC,EAAEA,CAAC,EAAA;EAACA,MAAAA,CAAC,IAAInC,CAAC,IAAEgC,CAAC,CAACR,IAAI,CAACS,CAAC,EAACjC,CAAC,CAACmC,CAAC,CAAC,EAACA,CAAC,EAACJ,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAC9b8B,EAAAA,IAAI,CAACiT,KAAK,CAACnI,MAAM,GAAC9K,IAAI,CAACkT,uBAAuB,KAAGlT,IAAI,CAACiT,KAAK,CAACE,uBAAuB,IAAEpU,KAAK,CAACC,SAAS,CAAC8L,MAAM,CAAC,GAAC,UAAS5M,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC4B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,IAAI,IAAEpP,CAAC,CAACL,MAAM,CAAC,CAAA;EAAC,IAAA,OAAOkB,KAAK,CAACC,SAAS,CAAC8L,MAAM,CAACnN,IAAI,CAACO,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAA,GAAC,GAAC,UAASF,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIE,CAAC,GAACJ,CAAC,CAACL,MAAM,EAAC1B,CAAC,GAAC,EAAE,EAACc,CAAC,GAAC,CAAC,EAACE,CAAC,GAAC,QAAQ,KAAG,OAAOe,CAAC,GAACA,CAAC,CAACoB,KAAK,CAAC,EAAE,CAAC,GAACpB,CAAC,EAACsV,CAAC,GAAC,CAAC,EAACA,CAAC,GAAClV,CAAC,EAACkV,CAAC,EAAE,EAAA;QAAC,IAAGA,CAAC,IAAIrW,CAAC,EAAC;EAAC,QAAA,IAAIsW,CAAC,GAACtW,CAAC,CAACqW,CAAC,CAAC,CAAA;EAACrV,QAAAA,CAAC,CAACR,IAAI,CAACS,CAAC,EAACqV,CAAC,EAACD,CAAC,EAACtV,CAAC,CAAC,KAAG/B,CAAC,CAACc,CAAC,EAAE,CAAC,GAACwW,CAAC,CAAC,CAAA;EAAA,OAAA;EAAC,KAAA;EAAA,IAAA,OAAOtX,CAAC,CAAA;KAAC,CAAA;EACnW6D,EAAAA,IAAI,CAACiT,KAAK,CAAClI,GAAG,GAAC/K,IAAI,CAACkT,uBAAuB,KAAGlT,IAAI,CAACiT,KAAK,CAACE,uBAAuB,IAAEpU,KAAK,CAACC,SAAS,CAAC+L,GAAG,CAAC,GAAC,UAAS7M,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC4B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,IAAI,IAAEpP,CAAC,CAACL,MAAM,CAAC,CAAA;EAAC,IAAA,OAAOkB,KAAK,CAACC,SAAS,CAAC+L,GAAG,CAACpN,IAAI,CAACO,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAA,GAAC,GAAC,UAASF,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIE,CAAC,GAACJ,CAAC,CAACL,MAAM,EAAC1B,CAAC,GAAC4C,KAAK,CAACT,CAAC,CAAC,EAACrB,CAAC,GAAC,QAAQ,KAAG,OAAOiB,CAAC,GAACA,CAAC,CAACoB,KAAK,CAAC,EAAE,CAAC,GAACpB,CAAC,EAACf,CAAC,GAAC,CAAC,EAACA,CAAC,GAACmB,CAAC,EAACnB,CAAC,EAAE,EAAA;QAACA,CAAC,IAAIF,CAAC,KAAGd,CAAC,CAACgB,CAAC,CAAC,GAACgB,CAAC,CAACR,IAAI,CAACS,CAAC,EAACnB,CAAC,CAACE,CAAC,CAAC,EAACA,CAAC,EAACe,CAAC,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAO/B,CAAC,CAAA;KAAC,CAAA;EAC5U6D,EAAAA,IAAI,CAACiT,KAAK,CAACS,MAAM,GAAC1T,IAAI,CAACkT,uBAAuB,KAAGlT,IAAI,CAACiT,KAAK,CAACE,uBAAuB,IAAEpU,KAAK,CAACC,SAAS,CAAC0U,MAAM,CAAC,GAAC,UAASxV,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC0B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,IAAI,IAAEpP,CAAC,CAACL,MAAM,CAAC,CAAA;MAACS,CAAC,KAAGH,CAAC,GAAC6B,IAAI,CAACkH,IAAI,CAAC/I,CAAC,EAACG,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOS,KAAK,CAACC,SAAS,CAAC0U,MAAM,CAAC/V,IAAI,CAACO,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,GAAC,UAASF,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC,IAAInC,CAAC,GAACiC,CAAC,CAAA;MAAC4B,IAAI,CAACiT,KAAK,CAACpI,OAAO,CAAC3M,CAAC,EAAC,UAASE,CAAC,EAACjB,CAAC,EAAC;EAAChB,MAAAA,CAAC,GAACgC,CAAC,CAACR,IAAI,CAACW,CAAC,EAACnC,CAAC,EAACiC,CAAC,EAACjB,CAAC,EAACe,CAAC,CAAC,CAAA;EAAA,KAAC,CAAC,CAAA;EAAC,IAAA,OAAO/B,CAAC,CAAA;KAAC,CAAA;EAChU6D,EAAAA,IAAI,CAACiT,KAAK,CAACU,WAAW,GAAC3T,IAAI,CAACkT,uBAAuB,KAAGlT,IAAI,CAACiT,KAAK,CAACE,uBAAuB,IAAEpU,KAAK,CAACC,SAAS,CAAC2U,WAAW,CAAC,GAAC,UAASzV,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC0B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,IAAI,IAAEpP,CAAC,CAACL,MAAM,CAAC,CAAA;MAACmC,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,IAAI,IAAEnP,CAAC,CAAC,CAAA;MAACG,CAAC,KAAGH,CAAC,GAAC6B,IAAI,CAACkH,IAAI,CAAC/I,CAAC,EAACG,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOS,KAAK,CAACC,SAAS,CAAC2U,WAAW,CAAChW,IAAI,CAACO,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,GAAC,UAASF,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC,IAAInC,CAAC,GAACiC,CAAC,CAAA;MAAC4B,IAAI,CAACiT,KAAK,CAACM,YAAY,CAACrV,CAAC,EAAC,UAASE,CAAC,EAACjB,CAAC,EAAC;EAAChB,MAAAA,CAAC,GAACgC,CAAC,CAACR,IAAI,CAACW,CAAC,EAACnC,CAAC,EAACiC,CAAC,EAACjB,CAAC,EAACe,CAAC,CAAC,CAAA;EAAA,KAAC,CAAC,CAAA;EAAC,IAAA,OAAO/B,CAAC,CAAA;KAAC,CAAA;EACjX6D,EAAAA,IAAI,CAACiT,KAAK,CAACjI,IAAI,GAAChL,IAAI,CAACkT,uBAAuB,KAAGlT,IAAI,CAACiT,KAAK,CAACE,uBAAuB,IAAEpU,KAAK,CAACC,SAAS,CAACgM,IAAI,CAAC,GAAC,UAAS9M,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC4B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,IAAI,IAAEpP,CAAC,CAACL,MAAM,CAAC,CAAA;EAAC,IAAA,OAAOkB,KAAK,CAACC,SAAS,CAACgM,IAAI,CAACrN,IAAI,CAACO,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAA,GAAC,GAAC,UAASF,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIE,CAAC,GAACJ,CAAC,CAACL,MAAM,EAAC1B,CAAC,GAAC,QAAQ,KAAG,OAAO+B,CAAC,GAACA,CAAC,CAACoB,KAAK,CAAC,EAAE,CAAC,GAACpB,CAAC,EAACjB,CAAC,GAAC,CAAC,EAACA,CAAC,GAACqB,CAAC,EAACrB,CAAC,EAAE,EAAA;QAAC,IAAGA,CAAC,IAAId,CAAC,IAAEgC,CAAC,CAACR,IAAI,CAACS,CAAC,EAACjC,CAAC,CAACc,CAAC,CAAC,EAACA,CAAC,EAACiB,CAAC,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAM,CAAC,CAAC,CAAA;KAAC,CAAA;EACzU8B,EAAAA,IAAI,CAACiT,KAAK,CAAChI,KAAK,GAACjL,IAAI,CAACkT,uBAAuB,KAAGlT,IAAI,CAACiT,KAAK,CAACE,uBAAuB,IAAEpU,KAAK,CAACC,SAAS,CAACiM,KAAK,CAAC,GAAC,UAAS/M,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC4B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,IAAI,IAAEpP,CAAC,CAACL,MAAM,CAAC,CAAA;EAAC,IAAA,OAAOkB,KAAK,CAACC,SAAS,CAACiM,KAAK,CAACtN,IAAI,CAACO,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAA,GAAC,GAAC,UAASF,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIE,CAAC,GAACJ,CAAC,CAACL,MAAM,EAAC1B,CAAC,GAAC,QAAQ,KAAG,OAAO+B,CAAC,GAACA,CAAC,CAACoB,KAAK,CAAC,EAAE,CAAC,GAACpB,CAAC,EAACjB,CAAC,GAAC,CAAC,EAACA,CAAC,GAACqB,CAAC,EAACrB,CAAC,EAAE,EAAA;QAAC,IAAGA,CAAC,IAAId,CAAC,IAAE,CAACgC,CAAC,CAACR,IAAI,CAACS,CAAC,EAACjC,CAAC,CAACc,CAAC,CAAC,EAACA,CAAC,EAACiB,CAAC,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAM,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACiT,KAAK,CAACW,KAAK,GAAC,UAAS1V,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIE,CAAC,GAAC,CAAC,CAAA;EAAC0B,IAAAA,IAAI,CAACiT,KAAK,CAACpI,OAAO,CAAC3M,CAAC,EAAC,UAASA,CAAC,EAACjB,CAAC,EAACE,CAAC,EAAC;EAACgB,MAAAA,CAAC,CAACR,IAAI,CAACS,CAAC,EAACF,CAAC,EAACjB,CAAC,EAACE,CAAC,CAAC,IAAE,EAAEmB,CAAC,CAAA;OAAC,EAACF,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOE,CAAC,CAAA;KAAC,CAAA;IAC9b0B,IAAI,CAACiT,KAAK,CAACY,IAAI,GAAC,UAAS3V,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAACD,IAAAA,CAAC,GAAC6B,IAAI,CAACiT,KAAK,CAACa,SAAS,CAAC5V,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;MAAC,OAAO,CAAC,GAACD,CAAC,GAAC,IAAI,GAAC,QAAQ,KAAG,OAAOD,CAAC,GAACA,CAAC,CAACqK,MAAM,CAACpK,CAAC,CAAC,GAACD,CAAC,CAACC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACiT,KAAK,CAACa,SAAS,GAAC,UAAS5V,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIE,CAAC,GAACJ,CAAC,CAACL,MAAM,EAAC1B,CAAC,GAAC,QAAQ,KAAG,OAAO+B,CAAC,GAACA,CAAC,CAACoB,KAAK,CAAC,EAAE,CAAC,GAACpB,CAAC,EAACjB,CAAC,GAAC,CAAC,EAACA,CAAC,GAACqB,CAAC,EAACrB,CAAC,EAAE,EAAA;QAAC,IAAGA,CAAC,IAAId,CAAC,IAAEgC,CAAC,CAACR,IAAI,CAACS,CAAC,EAACjC,CAAC,CAACc,CAAC,CAAC,EAACA,CAAC,EAACiB,CAAC,CAAC,EAAC,OAAOjB,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAM,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC+C,IAAI,CAACiT,KAAK,CAACc,SAAS,GAAC,UAAS7V,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAACD,IAAAA,CAAC,GAAC6B,IAAI,CAACiT,KAAK,CAACe,cAAc,CAAC9V,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;MAAC,OAAO,CAAC,GAACD,CAAC,GAAC,IAAI,GAAC,QAAQ,KAAG,OAAOD,CAAC,GAACA,CAAC,CAACqK,MAAM,CAACpK,CAAC,CAAC,GAACD,CAAC,CAACC,CAAC,CAAC,CAAA;KAAC,CAAA;IAC1Y6B,IAAI,CAACiT,KAAK,CAACe,cAAc,GAAC,UAAS9V,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIE,CAAC,GAACJ,CAAC,CAACL,MAAM;EAAC1B,MAAAA,CAAC,GAAC,QAAQ,KAAG,OAAO+B,CAAC,GAACA,CAAC,CAACoB,KAAK,CAAC,EAAE,CAAC,GAACpB,CAAC,CAAA;MAAC,KAAI,EAAEI,CAAC,EAAC,CAAC,IAAEA,CAAC,EAACA,CAAC,EAAE,EAAA;QAAC,IAAGA,CAAC,IAAInC,CAAC,IAAEgC,CAAC,CAACR,IAAI,CAACS,CAAC,EAACjC,CAAC,CAACmC,CAAC,CAAC,EAACA,CAAC,EAACJ,CAAC,CAAC,EAAC,OAAOI,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAM,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC0B,IAAI,CAACiT,KAAK,CAAC5H,QAAQ,GAAC,UAASnN,CAAC,EAACC,CAAC,EAAC;MAAC,OAAO,CAAC,IAAE6B,IAAI,CAACiT,KAAK,CAACzL,OAAO,CAACtJ,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACiT,KAAK,CAACpH,OAAO,GAAC,UAAS3N,CAAC,EAAC;EAAC,IAAA,OAAO,CAAC,IAAEA,CAAC,CAACL,MAAM,CAAA;KAAC,CAAA;EAACmC,EAAAA,IAAI,CAACiT,KAAK,CAACnH,KAAK,GAAC,UAAS5N,CAAC,EAAC;MAAC,IAAG,CAACa,KAAK,CAACiH,OAAO,CAAC9H,CAAC,CAAC,EAAC,KAAI,IAAIC,CAAC,GAACD,CAAC,CAACL,MAAM,GAAC,CAAC,EAAC,CAAC,IAAEM,CAAC,EAACA,CAAC,EAAE,EAAA;QAAC,OAAOD,CAAC,CAACC,CAAC,CAAC,CAAA;EAAC,KAAA;MAAAD,CAAC,CAACL,MAAM,GAAC,CAAC,CAAA;KAAC,CAAA;IAACmC,IAAI,CAACiT,KAAK,CAACgB,MAAM,GAAC,UAAS/V,CAAC,EAACC,CAAC,EAAC;EAAC6B,IAAAA,IAAI,CAACiT,KAAK,CAAC5H,QAAQ,CAACnN,CAAC,EAACC,CAAC,CAAC,IAAED,CAAC,CAACJ,IAAI,CAACK,CAAC,CAAC,CAAA;KAAC,CAAA;IACnc6B,IAAI,CAACiT,KAAK,CAACiB,QAAQ,GAAC,UAAShW,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC4B,IAAAA,IAAI,CAACiT,KAAK,CAAClO,MAAM,CAAC7G,CAAC,EAACE,CAAC,EAAC,CAAC,EAACD,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACiT,KAAK,CAACkB,aAAa,GAAC,UAASjW,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC4B,IAAI,CAACyH,OAAO,CAACzH,IAAI,CAACiT,KAAK,CAAClO,MAAM,EAAC7G,CAAC,EAACE,CAAC,EAAC,CAAC,CAAC,CAAC5B,KAAK,CAAC,IAAI,EAAC2B,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACiT,KAAK,CAACmB,YAAY,GAAC,UAASlW,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIE,CAAC,CAAA;EAAC,IAAA,CAAC,IAAE6I,SAAS,CAACtJ,MAAM,IAAE,CAAC,IAAES,CAAC,GAAC0B,IAAI,CAACiT,KAAK,CAACzL,OAAO,CAACtJ,CAAC,EAACE,CAAC,CAAC,CAAC,GAACF,CAAC,CAACJ,IAAI,CAACK,CAAC,CAAC,GAAC6B,IAAI,CAACiT,KAAK,CAACiB,QAAQ,CAAChW,CAAC,EAACC,CAAC,EAACG,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC0B,IAAI,CAACiT,KAAK,CAAClH,MAAM,GAAC,UAAS7N,CAAC,EAACC,CAAC,EAAC;MAACA,CAAC,GAAC6B,IAAI,CAACiT,KAAK,CAACzL,OAAO,CAACtJ,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAIC,CAAC,CAAA;EAAC,IAAA,CAACA,CAAC,GAAC,CAAC,IAAED,CAAC,KAAG6B,IAAI,CAACiT,KAAK,CAACoB,QAAQ,CAACnW,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOC,CAAC,CAAA;KAAC,CAAA;IACjZ4B,IAAI,CAACiT,KAAK,CAACqB,UAAU,GAAC,UAASpW,CAAC,EAACC,CAAC,EAAC;MAACA,CAAC,GAAC6B,IAAI,CAACiT,KAAK,CAACK,WAAW,CAACpV,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO,CAAC,IAAEA,CAAC,IAAE6B,IAAI,CAACiT,KAAK,CAACoB,QAAQ,CAACnW,CAAC,EAACC,CAAC,CAAC,EAAC,CAAC,CAAC,IAAE,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACiT,KAAK,CAACoB,QAAQ,GAAC,UAASnW,CAAC,EAACC,CAAC,EAAC;MAAC6B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,IAAI,IAAEpP,CAAC,CAACL,MAAM,CAAC,CAAA;EAAC,IAAA,OAAO,CAAC,IAAEkB,KAAK,CAACC,SAAS,CAAC+F,MAAM,CAACpH,IAAI,CAACO,CAAC,EAACC,CAAC,EAAC,CAAC,CAAC,CAACN,MAAM,CAAA;KAAC,CAAA;IAACmC,IAAI,CAACiT,KAAK,CAACsB,QAAQ,GAAC,UAASrW,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAACD,IAAAA,CAAC,GAAC6B,IAAI,CAACiT,KAAK,CAACa,SAAS,CAAC5V,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO,CAAC,IAAED,CAAC,IAAE6B,IAAI,CAACiT,KAAK,CAACoB,QAAQ,CAACnW,CAAC,EAACC,CAAC,CAAC,EAAC,CAAC,CAAC,IAAE,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACiT,KAAK,CAACuB,WAAW,GAAC,UAAStW,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIE,CAAC,GAAC,CAAC,CAAA;MAAC0B,IAAI,CAACiT,KAAK,CAACM,YAAY,CAACrV,CAAC,EAAC,UAAS/B,CAAC,EAACc,CAAC,EAAC;QAACkB,CAAC,CAACR,IAAI,CAACS,CAAC,EAACjC,CAAC,EAACc,CAAC,EAACiB,CAAC,CAAC,IAAE8B,IAAI,CAACiT,KAAK,CAACoB,QAAQ,CAACnW,CAAC,EAACjB,CAAC,CAAC,IAAEqB,CAAC,EAAE,CAAA;EAAA,KAAC,CAAC,CAAA;EAAC,IAAA,OAAOA,CAAC,CAAA;KAAC,CAAA;EAC5e0B,EAAAA,IAAI,CAACiT,KAAK,CAACwB,MAAM,GAAC,UAASvW,CAAC,EAAC;MAAC,OAAOa,KAAK,CAACC,SAAS,CAACyV,MAAM,CAACjY,KAAK,CAAC,EAAE,EAAC2K,SAAS,CAAC,CAAA;KAAC,CAAA;EAACnH,EAAAA,IAAI,CAACiT,KAAK,CAACjO,IAAI,GAAC,UAAS9G,CAAC,EAAC;MAAC,OAAOa,KAAK,CAACC,SAAS,CAACyV,MAAM,CAACjY,KAAK,CAAC,EAAE,EAAC2K,SAAS,CAAC,CAAA;KAAC,CAAA;EAACnH,EAAAA,IAAI,CAACiT,KAAK,CAACyB,OAAO,GAAC,UAASxW,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAACD,CAAC,CAACL,MAAM,CAAA;MAAC,IAAG,CAAC,GAACM,CAAC,EAAC;EAAC,MAAA,KAAI,IAAIC,CAAC,GAACW,KAAK,CAACZ,CAAC,CAAC,EAACG,CAAC,GAAC,CAAC,EAACA,CAAC,GAACH,CAAC,EAACG,CAAC,EAAE,EAAA;EAACF,QAAAA,CAAC,CAACE,CAAC,CAAC,GAACJ,CAAC,CAACI,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,OAAOF,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAM,EAAE,CAAA;KAAC,CAAA;IAAC4B,IAAI,CAACiT,KAAK,CAACjM,KAAK,GAAChH,IAAI,CAACiT,KAAK,CAACyB,OAAO,CAAA;IAAC1U,IAAI,CAACiT,KAAK,CAACzG,MAAM,GAAC,UAAStO,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC+I,SAAS,CAACtJ,MAAM,EAACO,CAAC,EAAE,EAAC;EAAC,MAAA,IAAIE,CAAC,GAAC6I,SAAS,CAAC/I,CAAC,CAAC,CAAA;EAAC,MAAA,IAAG4B,IAAI,CAACiG,WAAW,CAAC3H,CAAC,CAAC,EAAC;EAAC,QAAA,IAAInC,CAAC,GAAC+B,CAAC,CAACL,MAAM,IAAE,CAAC;EAACZ,UAAAA,CAAC,GAACqB,CAAC,CAACT,MAAM,IAAE,CAAC,CAAA;EAACK,QAAAA,CAAC,CAACL,MAAM,GAAC1B,CAAC,GAACc,CAAC,CAAA;UAAC,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,EAACE,CAAC,EAAE,EAAA;YAACe,CAAC,CAAC/B,CAAC,GAACgB,CAAC,CAAC,GAACmB,CAAC,CAACnB,CAAC,CAAC,CAAA;EAAA,SAAA;EAAA,OAAC,MAAKe,CAAC,CAACJ,IAAI,CAACQ,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EAClgB0B,EAAAA,IAAI,CAACiT,KAAK,CAAClO,MAAM,GAAC,UAAS7G,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC0B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,IAAI,IAAEpP,CAAC,CAACL,MAAM,CAAC,CAAA;MAAC,OAAOkB,KAAK,CAACC,SAAS,CAAC+F,MAAM,CAACvI,KAAK,CAAC0B,CAAC,EAAC8B,IAAI,CAACiT,KAAK,CAAC5L,KAAK,CAACF,SAAS,EAAC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAACnH,IAAI,CAACiT,KAAK,CAAC5L,KAAK,GAAC,UAASnJ,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC4B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,IAAI,IAAEpP,CAAC,CAACL,MAAM,CAAC,CAAA;EAAC,IAAA,OAAO,CAAC,IAAEsJ,SAAS,CAACtJ,MAAM,GAACkB,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACO,CAAC,EAACC,CAAC,CAAC,GAACY,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACO,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;IAChT4B,IAAI,CAACiT,KAAK,CAAC0B,gBAAgB,GAAC,UAASzW,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAACD,CAAC,GAACA,CAAC,IAAED,CAAC,CAAA;EAAC,IAAA,IAAII,CAAC,GAAC,SAASJ,CAAAA,CAAAA,CAAC,EAAC;QAAC,OAAO8B,IAAI,CAACmG,QAAQ,CAACjI,CAAC,CAAC,GAAC,GAAG,GAAC8B,IAAI,CAACqG,MAAM,CAACnI,CAAC,CAAC,GAAC,OAAA,CAAQA,CAAC,CAAA,CAAEqK,MAAM,CAAC,CAAC,CAAC,GAACrK,CAAC,CAAA;OAAC,CAAA;MAACE,CAAC,GAACA,CAAC,IAAEE,CAAC,CAAA;MAACA,CAAC,GAAC,EAAE,CAAA;EAAC,IAAA,KAAI,IAAInC,CAAC,GAAC,CAAC,EAACc,CAAC,GAAC,CAAC,EAACA,CAAC,GAACiB,CAAC,CAACL,MAAM,GAAE;EAAC,MAAA,IAAIV,CAAC,GAACe,CAAC,CAACjB,CAAC,EAAE,CAAC;EAACuW,QAAAA,CAAC,GAACpV,CAAC,CAACjB,CAAC,CAAC,CAAA;QAAC0B,MAAM,CAACG,SAAS,CAACsH,cAAc,CAAC3I,IAAI,CAACW,CAAC,EAACkV,CAAC,CAAC,KAAGlV,CAAC,CAACkV,CAAC,CAAC,GAAC,CAAC,CAAC,EAACrV,CAAC,CAAChC,CAAC,EAAE,CAAC,GAACgB,CAAC,CAAC,CAAA;EAAA,KAAA;MAACgB,CAAC,CAACN,MAAM,GAAC1B,CAAC,CAAA;KAAC,CAAA;IAAC6D,IAAI,CAACiT,KAAK,CAAC2B,YAAY,GAAC,UAAS1W,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,OAAO4B,IAAI,CAACiT,KAAK,CAAC4B,aAAa,CAAC3W,CAAC,EAACE,CAAC,IAAE4B,IAAI,CAACiT,KAAK,CAAC6B,cAAc,EAAC,CAAC,CAAC,EAAC3W,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACiT,KAAK,CAAC8B,YAAY,GAAC,UAAS7W,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO4B,IAAI,CAACiT,KAAK,CAAC4B,aAAa,CAAC3W,CAAC,EAACC,CAAC,EAAC,CAAC,CAAC,EAAC,KAAK,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EACtd4B,EAAAA,IAAI,CAACiT,KAAK,CAAC4B,aAAa,GAAC,UAAS3W,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAACnC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIc,CAAC,GAAC,CAAC,EAACE,CAAC,GAACe,CAAC,CAACL,MAAM,EAAC2V,CAAC,EAACvW,CAAC,GAACE,CAAC,GAAE;QAAC,IAAIsW,CAAC,GAACxW,CAAC,IAAEE,CAAC,GAACF,CAAC,KAAG,CAAC,CAAC,CAAA;EAAC,MAAA,IAAI+X,CAAC,GAAC5W,CAAC,GAACD,CAAC,CAACR,IAAI,CAACxB,CAAC,EAAC+B,CAAC,CAACuV,CAAC,CAAC,EAACA,CAAC,EAACvV,CAAC,CAAC,GAACC,CAAC,CAACG,CAAC,EAACJ,CAAC,CAACuV,CAAC,CAAC,CAAC,CAAA;EAAC,MAAA,CAAC,GAACuB,CAAC,GAAC/X,CAAC,GAACwW,CAAC,GAAC,CAAC,IAAEtW,CAAC,GAACsW,CAAC,EAACD,CAAC,GAAC,CAACwB,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOxB,CAAC,GAACvW,CAAC,GAAC,CAACA,CAAC,GAAC,CAAC,CAAA;KAAC,CAAA;IAAC+C,IAAI,CAACiT,KAAK,CAACgC,IAAI,GAAC,UAAS/W,CAAC,EAACC,CAAC,EAAC;MAACD,CAAC,CAAC+W,IAAI,CAAC9W,CAAC,IAAE6B,IAAI,CAACiT,KAAK,CAAC6B,cAAc,CAAC,CAAA;KAAC,CAAA;IAAC9U,IAAI,CAACiT,KAAK,CAACiC,UAAU,GAAC,UAAShX,CAAC,EAACC,CAAC,EAAC;MAAC,KAAI,IAAIC,CAAC,GAACW,KAAK,CAACb,CAAC,CAACL,MAAM,CAAC,EAACS,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,CAAC,CAACL,MAAM,EAACS,CAAC,EAAE,EAAA;QAACF,CAAC,CAACE,CAAC,CAAC,GAAC;EAAC6W,QAAAA,KAAK,EAAC7W,CAAC;UAAC1C,KAAK,EAACsC,CAAC,CAACI,CAAC,CAAA;SAAE,CAAA;EAAC,KAAA;MAAA,IAAInC,CAAC,GAACgC,CAAC,IAAE6B,IAAI,CAACiT,KAAK,CAAC6B,cAAc,CAAA;MAAC9U,IAAI,CAACiT,KAAK,CAACgC,IAAI,CAAC7W,CAAC,EAAC,UAASF,CAAC,EAACC,CAAC,EAAC;EAAC,MAAA,OAAOhC,CAAC,CAAC+B,CAAC,CAACtC,KAAK,EAACuC,CAAC,CAACvC,KAAK,CAAC,IAAEsC,CAAC,CAACiX,KAAK,GAAChX,CAAC,CAACgX,KAAK,CAAA;EAAA,KAAC,CAAC,CAAA;MAAC,KAAI7W,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,CAAC,CAACL,MAAM,EAACS,CAAC,EAAE,EAAA;QAACJ,CAAC,CAACI,CAAC,CAAC,GAACF,CAAC,CAACE,CAAC,CAAC,CAAC1C,KAAK,CAAA;EAAA,KAAA;KAAC,CAAA;IAC/eoE,IAAI,CAACiT,KAAK,CAACmC,SAAS,GAAC,UAASlX,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIE,CAAC,GAACF,CAAC,IAAE4B,IAAI,CAACiT,KAAK,CAAC6B,cAAc,CAAA;MAAC9U,IAAI,CAACiT,KAAK,CAACgC,IAAI,CAAC/W,CAAC,EAAC,UAASA,CAAC,EAACE,CAAC,EAAC;QAAC,OAAOE,CAAC,CAACH,CAAC,CAACD,CAAC,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAC,CAAC,CAAA;KAAC,CAAA;IAAC4B,IAAI,CAACiT,KAAK,CAACoC,gBAAgB,GAAC,UAASnX,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC4B,IAAI,CAACiT,KAAK,CAACmC,SAAS,CAAClX,CAAC,EAAC,UAASA,CAAC,EAAC;QAAC,OAAOA,CAAC,CAACC,CAAC,CAAC,CAAA;OAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC4B,IAAI,CAACiT,KAAK,CAACqC,QAAQ,GAAC,UAASpX,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAACD,IAAAA,CAAC,GAACA,CAAC,IAAE6B,IAAI,CAACiT,KAAK,CAAC6B,cAAc,CAAA;EAAC,IAAA,KAAI,IAAIxW,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,CAAC,CAACL,MAAM,EAACS,CAAC,EAAE,EAAC;EAAC,MAAA,IAAInC,CAAC,GAACgC,CAAC,CAACD,CAAC,CAACI,CAAC,GAAC,CAAC,CAAC,EAACJ,CAAC,CAACI,CAAC,CAAC,CAAC,CAAA;EAAC,MAAA,IAAG,CAAC,GAACnC,CAAC,IAAE,CAAC,IAAEA,CAAC,IAAEiC,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAM,CAAC,CAAC,CAAA;KAAC,CAAA;IACrX4B,IAAI,CAACiT,KAAK,CAAC7G,MAAM,GAAC,UAASlO,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAG,CAAC4B,IAAI,CAACiG,WAAW,CAAC/H,CAAC,CAAC,IAAE,CAAC8B,IAAI,CAACiG,WAAW,CAAC9H,CAAC,CAAC,IAAED,CAAC,CAACL,MAAM,IAAEM,CAAC,CAACN,MAAM,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,IAAA,IAAIS,CAAC,GAACJ,CAAC,CAACL,MAAM,CAAA;EAACO,IAAAA,CAAC,GAACA,CAAC,IAAE4B,IAAI,CAACiT,KAAK,CAACsC,sBAAsB,CAAA;MAAC,KAAI,IAAIpZ,CAAC,GAAC,CAAC,EAACA,CAAC,GAACmC,CAAC,EAACnC,CAAC,EAAE,EAAA;EAAC,MAAA,IAAG,CAACiC,CAAC,CAACF,CAAC,CAAC/B,CAAC,CAAC,EAACgC,CAAC,CAAChC,CAAC,CAAC,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAM,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6D,IAAI,CAACiT,KAAK,CAACuC,QAAQ,GAAC,UAAStX,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAACA,IAAAA,CAAC,GAACA,CAAC,IAAE4B,IAAI,CAACiT,KAAK,CAAC6B,cAAc,CAAA;MAAC,KAAI,IAAIxW,CAAC,GAACqB,IAAI,CAACE,GAAG,CAAC3B,CAAC,CAACL,MAAM,EAACM,CAAC,CAACN,MAAM,CAAC,EAAC1B,CAAC,GAAC,CAAC,EAACA,CAAC,GAACmC,CAAC,EAACnC,CAAC,EAAE,EAAC;EAAC,MAAA,IAAIc,CAAC,GAACmB,CAAC,CAACF,CAAC,CAAC/B,CAAC,CAAC,EAACgC,CAAC,CAAChC,CAAC,CAAC,CAAC,CAAA;EAAC,MAAA,IAAG,CAAC,IAAEc,CAAC,EAAC,OAAOA,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAO+C,IAAI,CAACiT,KAAK,CAAC6B,cAAc,CAAC5W,CAAC,CAACL,MAAM,EAACM,CAAC,CAACN,MAAM,CAAC,CAAA;KAAC,CAAA;IAACmC,IAAI,CAACiT,KAAK,CAAC6B,cAAc,GAAC,UAAS5W,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAOD,CAAC,GAACC,CAAC,GAAC,CAAC,GAACD,CAAC,GAACC,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,CAAA;KAAC,CAAA;IACxe6B,IAAI,CAACiT,KAAK,CAACwC,qBAAqB,GAAC,UAASvX,CAAC,EAACC,CAAC,EAAC;MAAC,OAAM,CAAC6B,IAAI,CAACiT,KAAK,CAAC6B,cAAc,CAAC5W,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACiT,KAAK,CAACsC,sBAAsB,GAAC,UAASrX,CAAC,EAACC,CAAC,EAAC;MAAC,OAAOD,CAAC,KAAGC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACiT,KAAK,CAACyC,YAAY,GAAC,UAASxX,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAACA,IAAAA,CAAC,GAAC4B,IAAI,CAACiT,KAAK,CAAC2B,YAAY,CAAC1W,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;MAAC,OAAO,CAAC,GAACA,CAAC,IAAE4B,IAAI,CAACiT,KAAK,CAACiB,QAAQ,CAAChW,CAAC,EAACC,CAAC,EAAC,EAAEC,CAAC,GAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,IAAE,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC4B,IAAI,CAACiT,KAAK,CAAC0C,YAAY,GAAC,UAASzX,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAACD,IAAAA,CAAC,GAAC6B,IAAI,CAACiT,KAAK,CAAC2B,YAAY,CAAC1W,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO,CAAC,IAAED,CAAC,GAAC6B,IAAI,CAACiT,KAAK,CAACoB,QAAQ,CAACnW,CAAC,EAACC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAClY6B,IAAI,CAACiT,KAAK,CAAC2C,MAAM,GAAC,UAAS1X,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIE,CAAC,GAAC,EAAE,EAACnC,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC+B,CAAC,CAACL,MAAM,EAAC1B,CAAC,EAAE,EAAC;EAAC,MAAA,IAAIc,CAAC,GAACiB,CAAC,CAAC/B,CAAC,CAAC;EAACgB,QAAAA,CAAC,GAACgB,CAAC,CAACR,IAAI,CAACS,CAAC,EAACnB,CAAC,EAACd,CAAC,EAAC+B,CAAC,CAAC,CAAA;QAAC,KAAK,CAAC,KAAGf,CAAC,IAAE,CAACmB,CAAC,CAACnB,CAAC,CAAC,KAAGmB,CAAC,CAACnB,CAAC,CAAC,GAAC,EAAE,CAAC,EAAEW,IAAI,CAACb,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOqB,CAAC,CAAA;KAAC,CAAA;IAAC0B,IAAI,CAACiT,KAAK,CAAC4C,QAAQ,GAAC,UAAS3X,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIE,CAAC,GAAC,EAAE,CAAA;MAAC0B,IAAI,CAACiT,KAAK,CAACpI,OAAO,CAAC3M,CAAC,EAAC,UAAS/B,CAAC,EAACc,CAAC,EAAC;EAACqB,MAAAA,CAAC,CAACH,CAAC,CAACR,IAAI,CAACS,CAAC,EAACjC,CAAC,EAACc,CAAC,EAACiB,CAAC,CAAC,CAAC,GAAC/B,CAAC,CAAA;EAAA,KAAC,CAAC,CAAA;EAAC,IAAA,OAAOmC,CAAC,CAAA;KAAC,CAAA;IAAC0B,IAAI,CAACiT,KAAK,CAAC6C,KAAK,GAAC,UAAS5X,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIE,CAAC,GAAC,EAAE;EAACnC,MAAAA,CAAC,GAAC,CAAC;EAACc,MAAAA,CAAC,GAACiB,CAAC,CAAA;MAACE,CAAC,GAACA,CAAC,IAAE,CAAC,CAAA;MAAC,KAAK,CAAC,KAAGD,CAAC,KAAGhC,CAAC,GAAC+B,CAAC,EAACjB,CAAC,GAACkB,CAAC,CAAC,CAAA;MAAC,IAAG,CAAC,GAACC,CAAC,IAAEnB,CAAC,GAACd,CAAC,CAAC,EAAC,OAAM,EAAE,CAAA;EAAC,IAAA,IAAG,CAAC,GAACiC,CAAC,EAAC,KAAIF,CAAC,GAAC/B,CAAC,EAAC+B,CAAC,GAACjB,CAAC,EAACiB,CAAC,IAAEE,CAAC,EAAA;EAACE,MAAAA,CAAC,CAACR,IAAI,CAACI,CAAC,CAAC,CAAA;OAAM,MAAA,KAAIA,CAAC,GAAC/B,CAAC,EAAC+B,CAAC,GAACjB,CAAC,EAACiB,CAAC,IAAEE,CAAC,EAAA;EAACE,MAAAA,CAAC,CAACR,IAAI,CAACI,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOI,CAAC,CAAA;KAAC,CAAA;IAAC0B,IAAI,CAACiT,KAAK,CAAC8C,MAAM,GAAC,UAAS7X,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIC,CAAC,GAAC,EAAE,EAACE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACH,CAAC,EAACG,CAAC,EAAE,EAAA;EAACF,MAAAA,CAAC,CAACE,CAAC,CAAC,GAACJ,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOE,CAAC,CAAA;KAAC,CAAA;EAC3f4B,EAAAA,IAAI,CAACiT,KAAK,CAAC+C,OAAO,GAAC,UAAS9X,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIC,CAAC,GAAC,EAAE,EAACC,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC+I,SAAS,CAACtJ,MAAM,EAACO,CAAC,EAAE,EAAC;EAAC,MAAA,IAAIE,CAAC,GAAC6I,SAAS,CAAC/I,CAAC,CAAC,CAAA;QAAC,IAAGW,KAAK,CAACiH,OAAO,CAAC1H,CAAC,CAAC,EAAC,KAAI,IAAInC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACmC,CAAC,CAACT,MAAM,EAAC1B,CAAC,IAAE,IAAI,EAAC;EAAC,QAAA,IAAIc,CAAC,GAAC+C,IAAI,CAACiT,KAAK,CAAC5L,KAAK,CAAC/I,CAAC,EAACnC,CAAC,EAACA,CAAC,GAAC,IAAI,CAAC,CAAA;EAACc,QAAAA,CAAC,GAAC+C,IAAI,CAACiT,KAAK,CAAC+C,OAAO,CAACxZ,KAAK,CAAC,IAAI,EAACS,CAAC,CAAC,CAAA;EAAC,QAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,CAACY,MAAM,EAACV,CAAC,EAAE,EAAA;EAACgB,UAAAA,CAAC,CAACL,IAAI,CAACb,CAAC,CAACE,CAAC,CAAC,CAAC,CAAA;EAAA,SAAA;EAAA,OAAC,MAAKgB,CAAC,CAACL,IAAI,CAACQ,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOH,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACiT,KAAK,CAACgD,MAAM,GAAC,UAAS/X,CAAC,EAACC,CAAC,EAAC;MAAC6B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,IAAI,IAAEpP,CAAC,CAACL,MAAM,CAAC,CAAA;MAACK,CAAC,CAACL,MAAM,KAAGM,CAAC,IAAED,CAAC,CAACL,MAAM,EAAC,CAAC,GAACM,CAAC,GAACY,KAAK,CAACC,SAAS,CAACsI,OAAO,CAAC9K,KAAK,CAAC0B,CAAC,EAACA,CAAC,CAAC6G,MAAM,CAAC,CAAC5G,CAAC,EAACA,CAAC,CAAC,CAAC,GAAC,CAAC,GAACA,CAAC,IAAEY,KAAK,CAACC,SAAS,CAAClB,IAAI,CAACtB,KAAK,CAAC0B,CAAC,EAACA,CAAC,CAAC6G,MAAM,CAAC,CAAC,EAAC,CAAC5G,CAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOD,CAAC,CAAA;KAAC,CAAA;IACje8B,IAAI,CAACiT,KAAK,CAACiD,QAAQ,GAAC,UAAShY,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC4B,IAAAA,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEnP,CAAC,IAAEA,CAAC,GAACD,CAAC,CAACL,MAAM,CAAC,CAAA;EAACmC,IAAAA,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,CAAC,IAAElP,CAAC,IAAEA,CAAC,GAACF,CAAC,CAACL,MAAM,CAAC,CAAA;EAACM,IAAAA,CAAC,GAACY,KAAK,CAACC,SAAS,CAAC+F,MAAM,CAACpH,IAAI,CAACO,CAAC,EAACC,CAAC,EAAC,CAAC,CAAC,CAAA;EAACY,IAAAA,KAAK,CAACC,SAAS,CAAC+F,MAAM,CAACpH,IAAI,CAACO,CAAC,EAACE,CAAC,EAAC,CAAC,EAACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACiT,KAAK,CAACkD,GAAG,GAAC,UAASjY,CAAC,EAAC;EAAC,IAAA,IAAG,CAACiJ,SAAS,CAACtJ,MAAM,EAAC,OAAM,EAAE,CAAA;MAAC,KAAI,IAAIM,CAAC,GAAC,EAAE,EAACC,CAAC,GAAC+I,SAAS,CAAC,CAAC,CAAC,CAACtJ,MAAM,EAACS,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC6I,SAAS,CAACtJ,MAAM,EAACS,CAAC,EAAE,EAAA;EAAC6I,MAAAA,SAAS,CAAC7I,CAAC,CAAC,CAACT,MAAM,GAACO,CAAC,KAAGA,CAAC,GAAC+I,SAAS,CAAC7I,CAAC,CAAC,CAACT,MAAM,CAAC,CAAA;EAAC,KAAA;MAAA,KAAIS,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,EAACE,CAAC,EAAE,EAAC;EAAC,MAAA,KAAI,IAAInC,CAAC,GAAC,EAAE,EAACc,CAAC,GAAC,CAAC,EAACA,CAAC,GAACkK,SAAS,CAACtJ,MAAM,EAACZ,CAAC,EAAE,EAAA;UAACd,CAAC,CAAC2B,IAAI,CAACqJ,SAAS,CAAClK,CAAC,CAAC,CAACqB,CAAC,CAAC,CAAC,CAAA;EAAC,OAAA;EAAAH,MAAAA,CAAC,CAACL,IAAI,CAAC3B,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOgC,CAAC,CAAA;KAAC,CAAA;IACxc6B,IAAI,CAACiT,KAAK,CAACmD,OAAO,GAAC,UAASlY,CAAC,EAACC,CAAC,EAAC;EAACA,IAAAA,CAAC,GAACA,CAAC,IAAEwB,IAAI,CAACiH,MAAM,CAAA;EAAC,IAAA,KAAI,IAAIxI,CAAC,GAACF,CAAC,CAACL,MAAM,GAAC,CAAC,EAAC,CAAC,GAACO,CAAC,EAACA,CAAC,EAAE,EAAC;EAAC,MAAA,IAAIE,CAAC,GAACqB,IAAI,CAAC0W,KAAK,CAAClY,CAAC,EAAE,IAAEC,CAAC,GAAC,CAAC,CAAC,CAAC;EAACjC,QAAAA,CAAC,GAAC+B,CAAC,CAACE,CAAC,CAAC,CAAA;EAACF,MAAAA,CAAC,CAACE,CAAC,CAAC,GAACF,CAAC,CAACI,CAAC,CAAC,CAAA;EAACJ,MAAAA,CAAC,CAACI,CAAC,CAAC,GAACnC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;IAAC6D,IAAI,CAACiT,KAAK,CAACqD,WAAW,GAAC,UAASpY,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,EAAE,CAAA;MAAC4B,IAAI,CAACiT,KAAK,CAACpI,OAAO,CAAC1M,CAAC,EAAC,UAASA,CAAC,EAAC;EAACC,MAAAA,CAAC,CAACN,IAAI,CAACI,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAC,CAAC,CAAA;EAAC,IAAA,OAAOC,CAAC,CAAA;KAAC,CAAA;IAAC4B,IAAI,CAACiT,KAAK,CAACsD,SAAS,GAAC,UAASrY,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,OAAO4B,IAAI,CAACiT,KAAK,CAACwB,MAAM,CAACjY,KAAK,CAAC,EAAE,EAACwD,IAAI,CAACiT,KAAK,CAAClI,GAAG,CAAC7M,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACwW,KAAK,GAAC,EAAE,CAAA;EAACxW,EAAAA,IAAI,CAACwW,KAAK,CAACC,iBAAiB,GAAC,UAASvY,CAAC,EAAC;MAAC,KAAI,IAAIC,CAAC,GAAC,EAAE,EAACC,CAAC,GAAC,CAAC,EAACE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,CAAC,CAACL,MAAM,EAACS,CAAC,EAAE,EAAC;EAAC,MAAA,IAAInC,CAAC,GAAC+B,CAAC,CAACwY,UAAU,CAACpY,CAAC,CAAC,CAAA;EAAC,MAAA,GAAG,GAACnC,CAAC,KAAGgC,CAAC,CAACC,CAAC,EAAE,CAAC,GAACjC,CAAC,GAAC,GAAG,EAACA,CAAC,KAAG,CAAC,CAAC,CAAA;EAACgC,MAAAA,CAAC,CAACC,CAAC,EAAE,CAAC,GAACjC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOgC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACwW,KAAK,CAACG,iBAAiB,GAAC,UAASzY,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,CAACL,MAAM,EAAC,OAAOQ,MAAM,CAACuY,YAAY,CAACpa,KAAK,CAAC,IAAI,EAAC0B,CAAC,CAAC,CAAA;EAAC,IAAA,KAAI,IAAIC,CAAC,GAAC,EAAE,EAACC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,CAACL,MAAM,EAACO,CAAC,IAAE,IAAI,EAAC;EAAC,MAAA,IAAIE,CAAC,GAAC0B,IAAI,CAACiT,KAAK,CAAC5L,KAAK,CAACnJ,CAAC,EAACE,CAAC,EAACA,CAAC,GAAC,IAAI,CAAC,CAAA;QAACD,CAAC,IAAEE,MAAM,CAACuY,YAAY,CAACpa,KAAK,CAAC,IAAI,EAAC8B,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOH,CAAC,CAAA;KAAC,CAAA;IACxsB6B,IAAI,CAACwW,KAAK,CAACK,cAAc,GAAC,UAAS3Y,CAAC,EAACC,CAAC,EAAC;MAAC,OAAO6B,IAAI,CAACiT,KAAK,CAAClI,GAAG,CAAC7M,CAAC,EAAC,UAASA,CAAC,EAAC;EAACA,MAAAA,CAAC,GAACA,CAAC,CAAC4H,QAAQ,CAAC,EAAE,CAAC,CAAA;QAAC,OAAO,CAAC,GAAC5H,CAAC,CAACL,MAAM,GAACK,CAAC,GAAC,GAAG,GAACA,CAAC,CAAA;EAAA,KAAC,CAAC,CAAC8G,IAAI,CAAC7G,CAAC,IAAE,EAAE,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACwW,KAAK,CAACM,cAAc,GAAC,UAAS5Y,CAAC,EAAC;EAAC8B,IAAAA,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEpP,CAAC,CAACL,MAAM,GAAC,CAAC,EAAC,yCAAyC,CAAC,CAAA;EAAC,IAAA,KAAI,IAAIM,CAAC,GAAC,EAAE,EAACC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,CAACL,MAAM,EAACO,CAAC,IAAE,CAAC,EAAA;EAACD,MAAAA,CAAC,CAACL,IAAI,CAACiZ,QAAQ,CAAC7Y,CAAC,CAAC8Y,SAAS,CAAC5Y,CAAC,EAACA,CAAC,GAAC,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOD,CAAC,CAAA;KAAC,CAAA;EAC3U6B,EAAAA,IAAI,CAACwW,KAAK,CAACS,qBAAqB,GAAC,UAAS/Y,CAAC,EAAC;MAAC,KAAI,IAAIC,CAAC,GAAC,EAAE,EAACC,CAAC,GAAC,CAAC,EAACE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,CAAC,CAACL,MAAM,EAACS,CAAC,EAAE,EAAC;EAAC,MAAA,IAAInC,CAAC,GAAC+B,CAAC,CAACwY,UAAU,CAACpY,CAAC,CAAC,CAAA;EAAC,MAAA,GAAG,GAACnC,CAAC,GAACgC,CAAC,CAACC,CAAC,EAAE,CAAC,GAACjC,CAAC,IAAE,IAAI,GAACA,CAAC,GAACgC,CAAC,CAACC,CAAC,EAAE,CAAC,GAACjC,CAAC,IAAE,CAAC,GAAC,GAAG,IAAE,KAAK,KAAGA,CAAC,GAAC,KAAK,CAAC,IAAEmC,CAAC,GAAC,CAAC,GAACJ,CAAC,CAACL,MAAM,IAAE,KAAK,KAAGK,CAAC,CAACwY,UAAU,CAACpY,CAAC,GAAC,CAAC,CAAC,GAAC,KAAK,CAAC,IAAEnC,CAAC,GAAC,KAAK,IAAE,CAACA,CAAC,GAAC,IAAI,KAAG,EAAE,CAAC,IAAE+B,CAAC,CAACwY,UAAU,CAAC,EAAEpY,CAAC,CAAC,GAAC,IAAI,CAAC,EAACH,CAAC,CAACC,CAAC,EAAE,CAAC,GAACjC,CAAC,IAAE,EAAE,GAAC,GAAG,EAACgC,CAAC,CAACC,CAAC,EAAE,CAAC,GAACjC,CAAC,IAAE,EAAE,GAAC,EAAE,GAAC,GAAG,IAAEgC,CAAC,CAACC,CAAC,EAAE,CAAC,GAACjC,CAAC,IAAE,EAAE,GAAC,GAAG,EAACgC,CAAC,CAACC,CAAC,EAAE,CAAC,GAACjC,CAAC,IAAE,CAAC,GAAC,EAAE,GAAC,GAAG,CAAC,EAACgC,CAAC,CAACC,CAAC,EAAE,CAAC,GAACjC,CAAC,GAAC,EAAE,GAAC,GAAG,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOgC,CAAC,CAAA;KAAC,CAAA;EACvW6B,EAAAA,IAAI,CAACwW,KAAK,CAACU,qBAAqB,GAAC,UAAShZ,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIC,CAAC,GAAC,EAAE,EAACC,CAAC,GAAC,CAAC,EAACE,CAAC,GAAC,CAAC,EAACF,CAAC,GAACF,CAAC,CAACL,MAAM,GAAE;EAAC,MAAA,IAAI1B,CAAC,GAAC+B,CAAC,CAACE,CAAC,EAAE,CAAC,CAAA;QAAC,IAAG,GAAG,GAACjC,CAAC,EAACgC,CAAC,CAACG,CAAC,EAAE,CAAC,GAACD,MAAM,CAACuY,YAAY,CAACza,CAAC,CAAC,CAAC,KAAK,IAAG,GAAG,GAACA,CAAC,IAAE,GAAG,GAACA,CAAC,EAAC;EAAC,QAAA,IAAIc,CAAC,GAACiB,CAAC,CAACE,CAAC,EAAE,CAAC,CAAA;EAACD,QAAAA,CAAC,CAACG,CAAC,EAAE,CAAC,GAACD,MAAM,CAACuY,YAAY,CAAC,CAACza,CAAC,GAAC,EAAE,KAAG,CAAC,GAACc,CAAC,GAAC,EAAE,CAAC,CAAA;SAAC,MAAK,IAAG,GAAG,GAACd,CAAC,IAAE,GAAG,GAACA,CAAC,EAAC;EAACc,QAAAA,CAAC,GAACiB,CAAC,CAACE,CAAC,EAAE,CAAC,CAAA;EAAC,QAAA,IAAIjB,CAAC,GAACe,CAAC,CAACE,CAAC,EAAE,CAAC;EAACoV,UAAAA,CAAC,GAACtV,CAAC,CAACE,CAAC,EAAE,CAAC,CAAA;UAACjC,CAAC,GAAC,CAAC,CAACA,CAAC,GAAC,CAAC,KAAG,EAAE,GAAC,CAACc,CAAC,GAAC,EAAE,KAAG,EAAE,GAAC,CAACE,CAAC,GAAC,EAAE,KAAG,CAAC,GAACqW,CAAC,GAAC,EAAE,IAAE,KAAK,CAAA;EAACrV,QAAAA,CAAC,CAACG,CAAC,EAAE,CAAC,GAACD,MAAM,CAACuY,YAAY,CAAC,KAAK,IAAEza,CAAC,IAAE,EAAE,CAAC,CAAC,CAAA;EAACgC,QAAAA,CAAC,CAACG,CAAC,EAAE,CAAC,GAACD,MAAM,CAACuY,YAAY,CAAC,KAAK,IAAEza,CAAC,GAAC,IAAI,CAAC,CAAC,CAAA;SAAC,MAAKc,CAAC,GAACiB,CAAC,CAACE,CAAC,EAAE,CAAC,EAACjB,CAAC,GAACe,CAAC,CAACE,CAAC,EAAE,CAAC,EAACD,CAAC,CAACG,CAAC,EAAE,CAAC,GAACD,MAAM,CAACuY,YAAY,CAAC,CAACza,CAAC,GAAC,EAAE,KAAG,EAAE,GAAC,CAACc,CAAC,GAAC,EAAE,KAAG,CAAC,GAACE,CAAC,GAAC,EAAE,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOgB,CAAC,CAAC6G,IAAI,CAAC,EAAE,CAAC,CAAA;KAAC,CAAA;IACxehF,IAAI,CAACwW,KAAK,CAACW,YAAY,GAAC,UAASjZ,CAAC,EAACC,CAAC,EAAC;EAAC6B,IAAAA,IAAI,CAACoN,OAAO,CAACE,MAAM,CAACpP,CAAC,CAACL,MAAM,IAAEM,CAAC,CAACN,MAAM,EAAC,8BAA8B,CAAC,CAAA;EAAC,IAAA,KAAI,IAAIO,CAAC,GAAC,EAAE,EAACE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,CAAC,CAACL,MAAM,EAACS,CAAC,EAAE,EAAA;EAACF,MAAAA,CAAC,CAACN,IAAI,CAACI,CAAC,CAACI,CAAC,CAAC,GAACH,CAAC,CAACG,CAAC,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOF,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACgR,GAAG,CAAC5D,OAAO,GAAC,EAAE,CAAA;IAACpN,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACgK,gBAAgB,GAAC,UAASlZ,CAAC,EAAC;EAAC,IAAA,IAAG8B,IAAI,CAACoN,OAAO,CAAC0E,cAAc,EAAC;QAAC,IAAI3T,CAAC,GAAC6B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACiK,UAAU,CAACnZ,CAAC,CAAC,CAAA;EAACC,MAAAA,CAAC,KAAG,CAACD,CAAC,IAAE,EAAEA,CAAC,YAAYC,CAAC,CAACmZ,QAAQ,CAAC,IAAEpZ,CAAC,YAAYC,CAAC,CAACoZ,OAAO,CAAC,IAAEvX,IAAI,CAACoN,OAAO,CAACK,IAAI,CAAC,6DAA6D,EAACzN,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACoK,mBAAmB,CAACtZ,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOA,CAAC,CAAA;KAAC,CAAA;IAC/e8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACqK,oBAAoB,GAAC,UAASvZ,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG6B,IAAI,CAACoN,OAAO,CAAC0E,cAAc,EAAC;QAAC,IAAI1T,CAAC,GAAC4B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACiK,UAAU,CAACnZ,CAAC,CAAC,CAAA;QAACE,CAAC,IAAE,WAAW,IAAE,OAAOA,CAAC,CAACD,CAAC,CAAC,KAAGD,CAAC,KAAGA,CAAC,YAAYE,CAAC,CAACD,CAAC,CAAC,IAAE,EAAED,CAAC,YAAYE,CAAC,CAACkZ,QAAQ,IAAEpZ,CAAC,YAAYE,CAAC,CAACmZ,OAAO,CAAC,CAAC,IAAEvX,IAAI,CAACoN,OAAO,CAACK,IAAI,CAAC,qEAAqE,EAACtP,CAAC,EAAC6B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACoK,mBAAmB,CAACtZ,CAAC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOA,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACsK,yBAAyB,GAAC,UAASxZ,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACqK,oBAAoB,CAACvZ,CAAC,EAAC,mBAAmB,CAAC,CAAA;KAAC,CAAA;IAC5e8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACuK,yBAAyB,GAAC,UAASzZ,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACqK,oBAAoB,CAACvZ,CAAC,EAAC,mBAAmB,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACwK,uBAAuB,GAAC,UAAS1Z,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACqK,oBAAoB,CAACvZ,CAAC,EAAC,iBAAiB,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACyK,wBAAwB,GAAC,UAAS3Z,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACqK,oBAAoB,CAACvZ,CAAC,EAAC,kBAAkB,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAAC0K,wBAAwB,GAAC,UAAS5Z,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACqK,oBAAoB,CAACvZ,CAAC,EAAC,kBAAkB,CAAC,CAAA;KAAC,CAAA;IACve8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAAC2K,wBAAwB,GAAC,UAAS7Z,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACqK,oBAAoB,CAACvZ,CAAC,EAAC,kBAAkB,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAAC4K,wBAAwB,GAAC,UAAS9Z,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACqK,oBAAoB,CAACvZ,CAAC,EAAC,kBAAkB,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAAC6K,2BAA2B,GAAC,UAAS/Z,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACqK,oBAAoB,CAACvZ,CAAC,EAAC,qBAAqB,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAAC8K,yBAAyB,GAAC,UAASha,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACqK,oBAAoB,CAACvZ,CAAC,EAAC,mBAAmB,CAAC,CAAA;KAAC,CAAA;IAC/e8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAAC+K,wBAAwB,GAAC,UAASja,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACqK,oBAAoB,CAACvZ,CAAC,EAAC,kBAAkB,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACgL,uBAAuB,GAAC,UAASla,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACqK,oBAAoB,CAACvZ,CAAC,EAAC,iBAAiB,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACiL,wBAAwB,GAAC,UAASna,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACqK,oBAAoB,CAACvZ,CAAC,EAAC,kBAAkB,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACkL,yBAAyB,GAAC,UAASpa,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACqK,oBAAoB,CAACvZ,CAAC,EAAC,mBAAmB,CAAC,CAAA;KAAC,CAAA;IACve8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACmL,yBAAyB,GAAC,UAASra,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACqK,oBAAoB,CAACvZ,CAAC,EAAC,mBAAmB,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACoL,yBAAyB,GAAC,UAASta,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACqK,oBAAoB,CAACvZ,CAAC,EAAC,mBAAmB,CAAC,CAAA;KAAC,CAAA;IACvP8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACoK,mBAAmB,GAAC,UAAStZ,CAAC,EAAC;EAAC,IAAA,IAAG8B,IAAI,CAACmG,QAAQ,CAACjI,CAAC,CAAC,EAAC,IAAG;QAAC,OAAOA,CAAC,CAACkL,WAAW,CAACwE,WAAW,IAAE1P,CAAC,CAACkL,WAAW,CAACyE,IAAI,IAAEhP,MAAM,CAACG,SAAS,CAAC8G,QAAQ,CAACnI,IAAI,CAACO,CAAC,CAAC,CAAA;OAAC,CAAA,OAAMC,CAAC,EAAC;EAAC,MAAA,OAAM,mCAAmC,CAAA;EAAA,KAAC,MAAK,OAAO,KAAK,CAAC,KAAGD,CAAC,GAAC,WAAW,GAAC,IAAI,KAAGA,CAAC,GAAC,MAAM,WAAQA,CAAC,CAAA,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACiK,UAAU,GAAC,UAASnZ,CAAC,EAAC;MAAC,IAAG;EAAC,MAAA,IAAIC,CAAC,GAACD,CAAC,IAAEA,CAAC,CAACua,aAAa;UAACra,CAAC,GAACD,CAAC,KAAGA,CAAC,CAACua,WAAW,IAAEva,CAAC,CAACwa,YAAY,CAAC,CAAA;EAACva,MAAAA,CAAC,GAACA,CAAC,IAAE4B,IAAI,CAACb,MAAM,CAAA;QAAC,IAAGf,CAAC,CAACmZ,OAAO,IAAEnZ,CAAC,CAACkZ,QAAQ,EAAC,OAAOlZ,CAAC,CAAA;OAAC,CAAA,OAAME,CAAC,EAAC,EAAE;EAAA,IAAA,OAAO,IAAI,CAAA;KAAC,CAAA;EAAC0B,EAAAA,IAAI,CAAC4Y,SAAS,GAAC,EAAE,CAAA;EAAC5Y,EAAAA,IAAI,CAAC4Y,SAAS,CAACC,QAAQ,GAAC,UAAS3a,CAAC,EAAC;EAAC,IAAA,OAAO,YAAU;EAAC,MAAA,OAAOA,CAAC,CAAA;OAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC4Y,SAAS,CAACE,KAAK,GAAC,YAAU;EAAC,IAAA,OAAM,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC9Y,EAAAA,IAAI,CAAC4Y,SAAS,CAACG,IAAI,GAAC,YAAU;EAAC,IAAA,OAAM,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC/Y,EAAAA,IAAI,CAAC4Y,SAAS,CAACI,IAAI,GAAC,YAAU;EAAC,IAAA,OAAO,IAAI,CAAA;KAAC,CAAA;IAAChZ,IAAI,CAAC4Y,SAAS,CAACK,QAAQ,GAAC,UAAS/a,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAOD,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC4Y,SAAS,CAACtV,KAAK,GAAC,UAASpF,CAAC,EAAC;EAAC,IAAA,OAAO,YAAU;QAAC,MAAM6C,KAAK,CAAC7C,CAAC,CAAC,CAAA;OAAE,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC4Y,SAAS,CAACnL,IAAI,GAAC,UAASvP,CAAC,EAAC;EAAC,IAAA,OAAO,YAAU;EAAC,MAAA,MAAMA,CAAC,CAAA;OAAE,CAAA;KAAC,CAAA;IACx0B8B,IAAI,CAAC4Y,SAAS,CAACM,IAAI,GAAC,UAAShb,CAAC,EAACC,CAAC,EAAC;MAACA,CAAC,GAACA,CAAC,IAAE,CAAC,CAAA;EAAC,IAAA,OAAO,YAAU;QAAC,OAAOD,CAAC,CAAC1B,KAAK,CAAC,IAAI,EAACuC,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,EAAC,CAAC,EAAChJ,CAAC,CAAC,CAAC,CAAA;OAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAAC4Y,SAAS,CAACO,GAAG,GAAC,UAASjb,CAAC,EAAC;EAAC,IAAA,OAAO,YAAU;QAAC,OAAOiJ,SAAS,CAACjJ,CAAC,CAAC,CAAA;OAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC4Y,SAAS,CAACQ,YAAY,GAAC,UAASlb,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAACW,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,EAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO,YAAU;QAAC,IAAIhJ,CAAC,GAACY,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,CAAC,CAAA;QAAChJ,CAAC,CAACL,IAAI,CAACtB,KAAK,CAAC2B,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,MAAA,OAAOF,CAAC,CAAC1B,KAAK,CAAC,IAAI,EAAC2B,CAAC,CAAC,CAAA;OAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC4Y,SAAS,CAACS,eAAe,GAAC,UAASnb,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO6B,IAAI,CAAC4Y,SAAS,CAACU,QAAQ,CAACpb,CAAC,EAAC8B,IAAI,CAAC4Y,SAAS,CAACC,QAAQ,CAAC1a,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAC9e6B,IAAI,CAAC4Y,SAAS,CAACW,OAAO,GAAC,UAASrb,CAAC,EAACC,CAAC,EAAC;MAAC,OAAO,UAASC,CAAC,EAAC;QAAC,OAAOD,CAAC,GAACD,CAAC,IAAEE,CAAC,GAACF,CAAC,KAAGE,CAAC,CAAA;OAAC,CAAA;KAAC,CAAA;IAAC4B,IAAI,CAAC4Y,SAAS,CAACY,OAAO,GAAC,UAAStb,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC+I,SAAS;QAAC7I,CAAC,GAACF,CAAC,CAACP,MAAM,CAAA;EAAC,IAAA,OAAO,YAAU;EAAC,MAAA,IAAIK,CAAC,CAAA;EAACI,MAAAA,CAAC,KAAGJ,CAAC,GAACE,CAAC,CAACE,CAAC,GAAC,CAAC,CAAC,CAAC9B,KAAK,CAAC,IAAI,EAAC2K,SAAS,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAIhJ,CAAC,GAACG,CAAC,GAAC,CAAC,EAAC,CAAC,IAAEH,CAAC,EAACA,CAAC,EAAE,EAAA;UAACD,CAAC,GAACE,CAAC,CAACD,CAAC,CAAC,CAACR,IAAI,CAAC,IAAI,EAACO,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,OAAOA,CAAC,CAAA;OAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC4Y,SAAS,CAACU,QAAQ,GAAC,UAASpb,CAAC,EAAC;MAAC,IAAIC,CAAC,GAACgJ,SAAS;QAAC/I,CAAC,GAACD,CAAC,CAACN,MAAM,CAAA;EAAC,IAAA,OAAO,YAAU;EAAC,MAAA,KAAI,IAAIK,CAAC,EAAC/B,CAAC,GAAC,CAAC,EAACA,CAAC,GAACiC,CAAC,EAACjC,CAAC,EAAE,EAAA;UAAC+B,CAAC,GAACC,CAAC,CAAChC,CAAC,CAAC,CAACK,KAAK,CAAC,IAAI,EAAC2K,SAAS,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,OAAOjJ,CAAC,CAAA;OAAC,CAAA;KAAC,CAAA;EAC9Y8B,EAAAA,IAAI,CAAC4Y,SAAS,CAACa,GAAG,GAAC,UAASvb,CAAC,EAAC;MAAC,IAAIC,CAAC,GAACgJ,SAAS;QAAC/I,CAAC,GAACD,CAAC,CAACN,MAAM,CAAA;EAAC,IAAA,OAAO,YAAU;QAAC,KAAI,IAAIK,CAAC,GAAC,CAAC,EAACA,CAAC,GAACE,CAAC,EAACF,CAAC,EAAE,EAAA;EAAC,QAAA,IAAG,CAACC,CAAC,CAACD,CAAC,CAAC,CAAC1B,KAAK,CAAC,IAAI,EAAC2K,SAAS,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,OAAM,CAAC,CAAC,CAAA;OAAC,CAAA;KAAC,CAAA;EAACnH,EAAAA,IAAI,CAAC4Y,SAAS,CAACc,EAAE,GAAC,UAASxb,CAAC,EAAC;MAAC,IAAIC,CAAC,GAACgJ,SAAS;QAAC/I,CAAC,GAACD,CAAC,CAACN,MAAM,CAAA;EAAC,IAAA,OAAO,YAAU;QAAC,KAAI,IAAIK,CAAC,GAAC,CAAC,EAACA,CAAC,GAACE,CAAC,EAACF,CAAC,EAAE,EAAA;EAAC,QAAA,IAAGC,CAAC,CAACD,CAAC,CAAC,CAAC1B,KAAK,CAAC,IAAI,EAAC2K,SAAS,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,OAAM,CAAC,CAAC,CAAA;OAAC,CAAA;KAAC,CAAA;EAACnH,EAAAA,IAAI,CAAC4Y,SAAS,CAACe,GAAG,GAAC,UAASzb,CAAC,EAAC;EAAC,IAAA,OAAO,YAAU;QAAC,OAAM,CAACA,CAAC,CAAC1B,KAAK,CAAC,IAAI,EAAC2K,SAAS,CAAC,CAAA;OAAC,CAAA;KAAC,CAAA;IACrXnH,IAAI,CAAC4Y,SAAS,CAACnM,MAAM,GAAC,UAASvO,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAAC,SAAU,CAAA,GAAA,EAAE,CAAA;EAACA,IAAAA,CAAC,CAACY,SAAS,GAACd,CAAC,CAACc,SAAS,CAAA;MAACZ,CAAC,GAAC,IAAIA,CAAC,EAAA,CAAA;EAACF,IAAAA,CAAC,CAAC1B,KAAK,CAAC4B,CAAC,EAACW,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,EAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO/I,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAAC4Y,SAAS,CAACgB,kBAAkB,GAAC,CAAC,CAAC,CAAA;EAAC5Z,EAAAA,IAAI,CAAC4Y,SAAS,CAACiB,gBAAgB,GAAC,UAAS3b,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,CAAC,CAAC;QAACC,CAAC,CAAA;EAAC,IAAA,OAAO,YAAU;QAAC,IAAG,CAAC4B,IAAI,CAAC4Y,SAAS,CAACgB,kBAAkB,EAAC,OAAO1b,CAAC,EAAE,CAAA;QAACC,CAAC,KAAGC,CAAC,GAACF,CAAC,EAAE,EAACC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAA;EAAC,MAAA,OAAOC,CAAC,CAAA;OAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAAC4Y,SAAS,CAACkB,IAAI,GAAC,UAAS5b,CAAC,EAAC;MAAC,IAAIC,CAAC,GAACD,CAAC,CAAA;EAAC,IAAA,OAAO,YAAU;EAAC,MAAA,IAAGC,CAAC,EAAC;UAAC,IAAID,CAAC,GAACC,CAAC,CAAA;EAACA,QAAAA,CAAC,GAAC,IAAI,CAAA;EAACD,QAAAA,CAAC,EAAE,CAAA;EAAA,OAAA;OAAE,CAAA;KAAC,CAAA;IACna8B,IAAI,CAAC4Y,SAAS,CAACmB,QAAQ,GAAC,UAAS7b,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIE,CAAC,GAAC,CAAC,CAAA;MAAC,OAAO,UAASnC,CAAC,EAAC;EAAC6D,MAAAA,IAAI,CAACb,MAAM,CAAC6a,YAAY,CAAC1b,CAAC,CAAC,CAAA;QAAC,IAAIrB,CAAC,GAACkK,SAAS,CAAA;EAAC7I,MAAAA,CAAC,GAAC0B,IAAI,CAACb,MAAM,CAAC8a,UAAU,CAAC,YAAU;EAAC/b,QAAAA,CAAC,CAAC1B,KAAK,CAAC4B,CAAC,EAACnB,CAAC,CAAC,CAAA;SAAC,EAACkB,CAAC,CAAC,CAAA;OAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC4Y,SAAS,CAACsB,QAAQ,GAAC,UAAShc,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIE,CAAC,GAAC,CAAC;QAACnC,CAAC,GAAC,CAAC,CAAC;EAACc,MAAAA,CAAC,GAAC,EAAE;QAACE,CAAC,GAAC,SAAFA,CAAC,GAAW;EAACmB,QAAAA,CAAC,GAAC,CAAC,CAAA;UAACnC,CAAC,KAAGA,CAAC,GAAC,CAAC,CAAC,EAACqX,CAAC,EAAE,CAAC,CAAA;SAAC;QAACA,CAAC,GAAC,SAAFA,CAAC,GAAW;UAAClV,CAAC,GAAC0B,IAAI,CAACb,MAAM,CAAC8a,UAAU,CAAC9c,CAAC,EAACgB,CAAC,CAAC,CAAA;EAACD,QAAAA,CAAC,CAAC1B,KAAK,CAAC4B,CAAC,EAACnB,CAAC,CAAC,CAAA;SAAC,CAAA;MAAC,OAAO,UAASiB,CAAC,EAAC;EAACjB,MAAAA,CAAC,GAACkK,SAAS,CAAA;EAAC7I,MAAAA,CAAC,GAACnC,CAAC,GAAC,CAAC,CAAC,GAACqX,CAAC,EAAE,CAAA;OAAC,CAAA;KAAC,CAAA;IAACxT,IAAI,CAAC4Y,SAAS,CAACuB,SAAS,GAAC,UAASjc,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIE,CAAC,GAAC,CAAC;QAACnC,CAAC,GAAC,SAAFA,CAAC,GAAW;EAACmC,QAAAA,CAAC,GAAC,CAAC,CAAA;SAAC,CAAA;MAAC,OAAO,UAASrB,CAAC,EAAC;QAACqB,CAAC,KAAGA,CAAC,GAAC0B,IAAI,CAACb,MAAM,CAAC8a,UAAU,CAAC9d,CAAC,EAACgC,CAAC,CAAC,EAACD,CAAC,CAAC1B,KAAK,CAAC4B,CAAC,EAAC+I,SAAS,CAAC,CAAC,CAAA;OAAC,CAAA;KAAC,CAAA;EAACnH,EAAAA,IAAI,CAACgR,GAAG,CAACoJ,WAAW,GAAC,YAAU,EAAE,CAAA;EAACpa,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,GAAC,UAASnc,CAAC,EAAC;MAAC,IAAI,CAACoc,QAAQ,GAACpc,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACrb,SAAS,CAAC8G,QAAQ,GAAC,YAAU;MAAC,OAAO,IAAI,CAACwU,QAAQ,CAAA;KAAC,CAAA;EAACta,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACE,CAAC,GAAC,IAAIva,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,GAAG,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACG,IAAI,GAAC,IAAIxa,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACI,OAAO,GAAC,IAAIza,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,SAAS,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACK,OAAO,GAAC,IAAI1a,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,SAAS,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACM,MAAM,GAAC,IAAI3a,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACO,IAAI,GAAC,IAAI5a,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACQ,OAAO,GAAC,IAAI7a,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,SAAS,CAAC,CAAA;EAC9/Bra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACS,KAAK,GAAC,IAAI9a,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,OAAO,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACU,KAAK,GAAC,IAAI/a,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,OAAO,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACW,CAAC,GAAC,IAAIhb,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,GAAG,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACY,IAAI,GAAC,IAAIjb,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACa,QAAQ,GAAC,IAAIlb,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,UAAU,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACc,GAAG,GAAC,IAAInb,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACe,GAAG,GAAC,IAAIpb,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACgB,GAAG,GAAC,IAAIrb,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACiB,UAAU,GAAC,IAAItb,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,YAAY,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACkB,IAAI,GAAC,IAAIvb,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EACzgBra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACmB,EAAE,GAAC,IAAIxb,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACoB,MAAM,GAAC,IAAIzb,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACqB,MAAM,GAAC,IAAI1b,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACsB,OAAO,GAAC,IAAI3b,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,SAAS,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACuB,MAAM,GAAC,IAAI5b,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACwB,IAAI,GAAC,IAAI7b,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACyB,IAAI,GAAC,IAAI9b,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC0B,GAAG,GAAC,IAAI/b,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC2B,QAAQ,GAAC,IAAIhc,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,UAAU,CAAC,CAAA;EAC9dra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC4B,OAAO,GAAC,IAAIjc,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,SAAS,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC6B,IAAI,GAAC,IAAIlc,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC8B,QAAQ,GAAC,IAAInc,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,UAAU,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC+B,EAAE,GAAC,IAAIpc,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACgC,GAAG,GAAC,IAAIrc,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACiC,OAAO,GAAC,IAAItc,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,SAAS,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACkC,GAAG,GAAC,IAAIvc,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACmC,MAAM,GAAC,IAAIxc,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACoC,GAAG,GAAC,IAAIzc,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACqC,GAAG,GAAC,IAAI1c,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EACzgBra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACsC,EAAE,GAAC,IAAI3c,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACuC,EAAE,GAAC,IAAI5c,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACwC,EAAE,GAAC,IAAI7c,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACyC,KAAK,GAAC,IAAI9c,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,OAAO,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC0C,QAAQ,GAAC,IAAI/c,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,UAAU,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC2C,UAAU,GAAC,IAAIhd,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,YAAY,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC4C,MAAM,GAAC,IAAIjd,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC6C,IAAI,GAAC,IAAIld,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC8C,MAAM,GAAC,IAAInd,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC+C,IAAI,GAAC,IAAIpd,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EAC/gBra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACgD,KAAK,GAAC,IAAIrd,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,OAAO,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACiD,QAAQ,GAAC,IAAItd,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,UAAU,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACkD,EAAE,GAAC,IAAIvd,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACmD,EAAE,GAAC,IAAIxd,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACoD,EAAE,GAAC,IAAIzd,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACqD,EAAE,GAAC,IAAI1d,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACsD,EAAE,GAAC,IAAI3d,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACuD,EAAE,GAAC,IAAI5d,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACwD,IAAI,GAAC,IAAI7d,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACyD,MAAM,GAAC,IAAI9d,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EACnfra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC0D,MAAM,GAAC,IAAI/d,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC2D,EAAE,GAAC,IAAIhe,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC4D,IAAI,GAAC,IAAIje,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC6D,CAAC,GAAC,IAAIle,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,GAAG,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC8D,MAAM,GAAC,IAAIne,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC+D,GAAG,GAAC,IAAIpe,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACgE,KAAK,GAAC,IAAIre,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,OAAO,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACiE,GAAG,GAAC,IAAIte,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACkE,OAAO,GAAC,IAAIve,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,SAAS,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACmE,GAAG,GAAC,IAAIxe,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EAC7fra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACoE,MAAM,GAAC,IAAIze,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACqE,KAAK,GAAC,IAAI1e,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,OAAO,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACsE,MAAM,GAAC,IAAI3e,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACuE,EAAE,GAAC,IAAI5e,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACwE,IAAI,GAAC,IAAI7e,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACyE,IAAI,GAAC,IAAI9e,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC0E,GAAG,GAAC,IAAI/e,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC2E,IAAI,GAAC,IAAIhf,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC4E,IAAI,GAAC,IAAIjf,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC6E,IAAI,GAAC,IAAIlf,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EACjgBra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC8E,QAAQ,GAAC,IAAInf,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,UAAU,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC+E,IAAI,GAAC,IAAIpf,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACgF,KAAK,GAAC,IAAIrf,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,OAAO,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACiF,GAAG,GAAC,IAAItf,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACkF,QAAQ,GAAC,IAAIvf,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,UAAU,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACmF,QAAQ,GAAC,IAAIxf,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,UAAU,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACoF,MAAM,GAAC,IAAIzf,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACqF,EAAE,GAAC,IAAI1f,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACsF,QAAQ,GAAC,IAAI3f,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,UAAU,CAAC,CAAA;EAC1era,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACuF,MAAM,GAAC,IAAI5f,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACwF,MAAM,GAAC,IAAI7f,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC5e,CAAC,GAAC,IAAIuE,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,GAAG,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACyF,KAAK,GAAC,IAAI9f,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,OAAO,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC0F,OAAO,GAAC,IAAI/f,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,SAAS,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC2F,GAAG,GAAC,IAAIhgB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC4F,QAAQ,GAAC,IAAIjgB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,UAAU,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC6F,CAAC,GAAC,IAAIlgB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,GAAG,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC8F,EAAE,GAAC,IAAIngB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC+F,EAAE,GAAC,IAAIpgB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EAC/fra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACgG,GAAG,GAAC,IAAIrgB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACiG,IAAI,GAAC,IAAItgB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACkG,CAAC,GAAC,IAAIvgB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,GAAG,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACmG,IAAI,GAAC,IAAIxgB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACoG,MAAM,GAAC,IAAIzgB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACqG,OAAO,GAAC,IAAI1gB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,SAAS,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACsG,MAAM,GAAC,IAAI3gB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACuG,KAAK,GAAC,IAAI5gB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,OAAO,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACwG,MAAM,GAAC,IAAI7gB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACyG,IAAI,GAAC,IAAI9gB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EACzgBra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC0G,MAAM,GAAC,IAAI/gB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC2G,MAAM,GAAC,IAAIhhB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,QAAQ,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC4G,KAAK,GAAC,IAAIjhB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,OAAO,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC6G,GAAG,GAAC,IAAIlhB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC8G,OAAO,GAAC,IAAInhB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,SAAS,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC+G,GAAG,GAAC,IAAIphB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACgH,GAAG,GAAC,IAAIrhB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACiH,KAAK,GAAC,IAAIthB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,OAAO,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACkH,KAAK,GAAC,IAAIvhB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,OAAO,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACmH,EAAE,GAAC,IAAIxhB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EACvgBra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACoH,QAAQ,GAAC,IAAIzhB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,UAAU,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACqH,QAAQ,GAAC,IAAI1hB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,UAAU,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACsH,KAAK,GAAC,IAAI3hB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,OAAO,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACuH,EAAE,GAAC,IAAI5hB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACwH,KAAK,GAAC,IAAI7hB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,OAAO,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACyH,IAAI,GAAC,IAAI9hB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,MAAM,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC0H,KAAK,GAAC,IAAI/hB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,OAAO,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC2H,EAAE,GAAC,IAAIhiB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC4H,KAAK,GAAC,IAAIjiB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,OAAO,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC6H,EAAE,GAAC,IAAIliB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EACzgBra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC8H,CAAC,GAAC,IAAIniB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,GAAG,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC+H,EAAE,GAAC,IAAIpiB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,IAAI,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACgI,GAAG,GAAC,IAAIriB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACiI,KAAK,GAAC,IAAItiB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,OAAO,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAACkI,GAAG,GAAC,IAAIviB,IAAI,CAACgR,GAAG,CAACqJ,OAAO,CAAC,KAAK,CAAC,CAAA;EAACra,EAAAA,IAAI,CAACgR,GAAG,CAACwR,IAAI,GAAC,EAAE,CAAA;EAACxiB,EAAAA,IAAI,CAACgR,GAAG,CAACwR,IAAI,CAACC,UAAU,GAAC;MAACC,IAAI,EAAC,CAAC,CAAC;MAACrZ,IAAI,EAAC,CAAC,CAAC;MAACsZ,EAAE,EAAC,CAAC,CAAC;MAACC,GAAG,EAAC,CAAC,CAAC;MAACC,OAAO,EAAC,CAAC,CAAC;MAACC,KAAK,EAAC,CAAC,CAAC;MAACC,EAAE,EAAC,CAAC,CAAC;MAACC,GAAG,EAAC,CAAC,CAAC;MAACC,KAAK,EAAC,CAAC,CAAC;MAACC,MAAM,EAAC,CAAC,CAAC;MAACC,IAAI,EAAC,CAAC,CAAC;MAACC,IAAI,EAAC,CAAC,CAAC;MAACC,KAAK,EAAC,CAAC,CAAC;MAACC,MAAM,EAAC,CAAC,CAAC;MAACC,KAAK,EAAC,CAAC,CAAC;EAACC,IAAAA,GAAG,EAAC,CAAC,CAAA;KAAE,CAAA;IAACxjB,IAAI,CAACgR,GAAG,CAACwR,IAAI,CAACiB,SAAS,GAAC,UAASvlB,CAAC,EAAC;EAAC,IAAA,OAAM,CAAC,CAAC,KAAG8B,IAAI,CAACgR,GAAG,CAACwR,IAAI,CAACC,UAAU,CAACvkB,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC6I,IAAI,GAAC,EAAE,CAAA;EAAC7I,EAAAA,IAAI,CAAC6I,IAAI,CAAC6a,YAAY,GAAC,EAAE,CAAA;IAAC1jB,IAAI,CAAC6I,IAAI,CAAC6a,YAAY,CAACC,oCAAoC,GAAC3jB,IAAI,CAAC+J,yBAAyB,GAAC/J,IAAI,CAACiK,wBAAwB,CAACjK,IAAI,CAAC+J,yBAAyB,GAAC,OAAO,CAAC,GAAC,IAAI,CAAA;EAAC/J,EAAAA,IAAI,CAAC4jB,MAAM,GAAC,EAAE,CAAA;EAAC5jB,EAAAA,IAAI,CAAC4jB,MAAM,CAACC,WAAW,GAAC,YAAU,EAAE,CAAA;IAAC7jB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,GAAC,UAAS5lB,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAI,CAAC4lB,gEAAgE,GAAC7lB,CAAC,KAAG8B,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACE,sCAAsC,IAAE7lB,CAAC,IAAE,EAAE,CAAA;MAAC,IAAI,CAAC8lB,uDAAuD,GAACjkB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACI,YAAY,CAAA;KAAC,CAAA;IAAClkB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAAC9kB,SAAS,CAACmlB,+BAA+B,GAAC,CAAC,CAAC,CAAA;IAACnkB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAAC9kB,SAAS,CAAColB,mBAAmB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACL,gEAAgE,CAAA;KAAC,CAAA;EAC9rC/jB,EAAAA,IAAI,CAACO,KAAK,KAAGP,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAAC9kB,SAAS,CAAC8G,QAAQ,GAAC,YAAU;EAAC,IAAA,OAAM,QAAQ,GAAC,IAAI,CAACie,gEAAgE,GAAC,GAAG,CAAA;EAAA,GAAC,CAAC,CAAA;IAAC/jB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,GAAC,UAASnmB,CAAC,EAAC;EAAC,IAAA,IAAGA,CAAC,YAAY8B,IAAI,CAAC4jB,MAAM,CAACE,KAAK,IAAE5lB,CAAC,CAACkL,WAAW,KAAGpJ,IAAI,CAAC4jB,MAAM,CAACE,KAAK,IAAE5lB,CAAC,CAAC+lB,uDAAuD,KAAGjkB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACI,YAAY,EAAC,OAAOhmB,CAAC,CAAC6lB,gEAAgE,CAAA;MAAC/jB,IAAI,CAACoN,OAAO,CAACK,IAAI,CAAC,sCAAsC,GAACvP,CAAC,GAAC,GAAG,CAAC,CAAA;EAAC,IAAA,OAAM,kBAAkB,CAAA;KAAC,CAAA;IACjgB8B,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACQ,IAAI,GAAC,UAASpmB,CAAC,EAAC;EAAC,IAAA,OAAO,IAAI8B,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAAC9jB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACE,sCAAsC,EAAC9lB,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACI,YAAY,GAAC,EAAE,CAAA;IAAClkB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACE,sCAAsC,GAAC,EAAE,CAAA;EAAChkB,EAAAA,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACS,KAAK,GAACvkB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACQ,IAAI,CAAC,EAAE,CAAC,CAAA;EAACtkB,EAAAA,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,GAAC,YAAU;MAAC,IAAI,CAACC,+CAA+C,GAAC,EAAE,CAAA;MAAC,IAAI,CAACC,mDAAmD,GAAC1kB,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACG,uCAAuC,CAAA;KAAC,CAAA;IAAC3kB,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACxlB,SAAS,CAACmlB,+BAA+B,GAAC,CAAC,CAAC,CAAA;IAACnkB,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACG,uCAAuC,GAAC,EAAE,CAAA;IAAC3kB,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACI,YAAY,GAAC,UAAS1mB,CAAC,EAAC;MAACA,CAAC,GAAC8B,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,CAAA;MAAC,OAAO,CAAC,KAAGA,CAAC,CAACL,MAAM,GAACmC,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACD,KAAK,GAACvkB,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACK,gDAAgD,CAAC3mB,CAAC,CAAC,CAAA;KAAC,CAAA;IACnyB8B,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACM,mBAAmB,GAAC,UAAS5mB,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIC,CAAC,GAAC,EAAE,EAACE,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC6I,SAAS,CAACtJ,MAAM,EAACS,CAAC,EAAE,EAAA;EAACF,MAAAA,CAAC,CAACN,IAAI,CAACkC,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACO,UAAU,CAAC5d,SAAS,CAAC7I,CAAC,CAAC,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAO0B,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACK,gDAAgD,CAAC,GAAG,GAAC7kB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,GAAC,IAAI,GAACE,CAAC,CAAC4G,IAAI,CAAC,IAAI,CAAC,GAAC,IAAI,CAAC,CAAA;KAAC,CAAA;IAAChF,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACQ,QAAQ,GAAC,UAAS9mB,CAAC,EAAC;EAAC,IAAA,OAAO8B,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACK,gDAAgD,CAAC7kB,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACO,UAAU,CAAC7mB,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACxlB,SAAS,CAAColB,mBAAmB,GAAC,YAAU;EAAC,IAAA,OAAO,IAAI,CAACK,+CAA+C,CAAC3e,QAAQ,EAAE,CAAA;KAAC,CAAA;EAC5jB9F,EAAAA,IAAI,CAACO,KAAK,KAAGP,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACxlB,SAAS,CAAC8G,QAAQ,GAAC,YAAU;EAAC,IAAA,OAAM,aAAa,GAAC,IAAI,CAAC2e,+CAA+C,GAAC,GAAG,CAAA;EAAA,GAAC,CAAC,CAAA;IAACzkB,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACH,MAAM,GAAC,UAASnmB,CAAC,EAAC;EAAC,IAAA,OAAO8B,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACS,mBAAmB,CAAC/mB,CAAC,CAAC,CAAC4H,QAAQ,EAAE,CAAA;KAAC,CAAA;IACrP9F,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACS,mBAAmB,GAAC,UAAS/mB,CAAC,EAAC;EAAC,IAAA,IAAGA,CAAC,YAAY8B,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,IAAEtmB,CAAC,CAACkL,WAAW,KAAGpJ,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,IAAEtmB,CAAC,CAACwmB,mDAAmD,KAAG1kB,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACG,uCAAuC,EAAC,OAAOzmB,CAAC,CAACumB,+CAA+C,CAAA;EAACzkB,IAAAA,IAAI,CAACoN,OAAO,CAACK,IAAI,CAAC,2CAA2C,GAACvP,CAAC,GAAC,YAAY,GAAC8B,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAM,uBAAuB,CAAA;KAAC,CAAA;IAC1a8B,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACO,UAAU,GAAC,UAAS7mB,CAAC,EAAC;EAAC,IAAA,OAAOyH,IAAI,CAACC,SAAS,CAAC1H,CAAC,CAAC,CAAC4K,OAAO,CAAC,IAAI,EAAC,OAAO,CAAC,CAAA;KAAC,CAAA;IAAC9I,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACK,gDAAgD,GAAC,UAAS3mB,CAAC,EAAC;MAAC,OAAO,IAAI8B,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,EAAEU,CAAAA,qCAAqC,CAAChnB,CAAC,CAAC,CAAA;KAAC,CAAA;IACxP8B,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACxlB,SAAS,CAACkmB,qCAAqC,GAAC,UAAShnB,CAAC,EAAC;MAAC,IAAI,CAACumB,+CAA+C,GAACzkB,IAAI,CAAC6I,IAAI,CAAC6a,YAAY,CAACC,oCAAoC,GAAC3jB,IAAI,CAAC6I,IAAI,CAAC6a,YAAY,CAACC,oCAAoC,CAACrZ,YAAY,CAACpM,CAAC,CAAC,GAACA,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACD,KAAK,GAACvkB,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACK,gDAAgD,CAAC,EAAE,CAAC,CAAA;EAAC7kB,EAAAA,IAAI,CAACmlB,EAAE,GAAC,EAAE,CAAA;EAACnlB,EAAAA,IAAI,CAACmlB,EAAE,CAACC,GAAG,GAAC,EAAE,CAAA;IAACplB,IAAI,CAACmlB,EAAE,CAACC,GAAG,CAACC,eAAe,GAAC,UAASnnB,CAAC,EAAC;EAAC,IAAA,OAAO8B,IAAI,CAACmlB,EAAE,CAACC,GAAG,CAACE,aAAa,EAAE,CAACC,eAAe,CAACrnB,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACmlB,EAAE,CAACC,GAAG,CAACI,eAAe,GAAC,UAAStnB,CAAC,EAAC;MAAC8B,IAAI,CAACmlB,EAAE,CAACC,GAAG,CAACE,aAAa,EAAE,CAACG,eAAe,CAACvnB,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACmlB,EAAE,CAACC,GAAG,CAACM,UAAU,GAAC,YAAU,EAAE,CAAA;EAAC1lB,EAAAA,IAAI,CAACmlB,EAAE,CAACC,GAAG,CAACM,UAAU,CAAC1mB,SAAS,CAACumB,eAAe,GAAC,UAASrnB,CAAC,EAAC,EAAE,CAAA;EAAC8B,EAAAA,IAAI,CAACmlB,EAAE,CAACC,GAAG,CAACM,UAAU,CAAC1mB,SAAS,CAACymB,eAAe,GAAC,UAASvnB,CAAC,EAAC,EAAE,CAAA;EACpvB8B,EAAAA,IAAI,CAACmlB,EAAE,CAACC,GAAG,CAACE,aAAa,GAAC,YAAU;MAAC,IAAIpnB,CAAC,GAAC8B,IAAI,CAACmlB,EAAE,CAACC,GAAG,CAACO,cAAc,EAAE,CAAA;EAAC,IAAA,IAAG,IAAI,IAAEznB,CAAC,EAAC,OAAOA,CAAC,CAAA;MAAC,MAAM6C,KAAK,CAAC,gDAAgD,CAAC,CAAA;KAAE,CAAA;EAACf,EAAAA,IAAI,CAACmlB,EAAE,CAACC,GAAG,CAACO,cAAc,GAAC,YAAU;EAAC,IAAA,OAAO,KAAK,CAAC,KAAG3lB,IAAI,CAACb,MAAM,CAACymB,GAAG,IAAE,KAAK,CAAC,KAAG5lB,IAAI,CAACb,MAAM,CAACymB,GAAG,CAACL,eAAe,GAACvlB,IAAI,CAACb,MAAM,CAACymB,GAAG,GAAC,KAAK,CAAC,KAAG5lB,IAAI,CAACb,MAAM,CAAC0mB,SAAS,IAAE,KAAK,CAAC,KAAG7lB,IAAI,CAACb,MAAM,CAAC0mB,SAAS,CAACN,eAAe,GAACvlB,IAAI,CAACb,MAAM,CAAC0mB,SAAS,GAAC,KAAK,CAAC,KAAG7lB,IAAI,CAACb,MAAM,CAAComB,eAAe,GAACvlB,IAAI,CAACb,MAAM,GAAC,IAAI,CAAA;KAAC,CAAA;EACvba,EAAAA,IAAI,CAACmlB,EAAE,CAACC,GAAG,CAACU,yBAAyB,GAAC,YAAU;MAAC,OAAO,IAAI,IAAE9lB,IAAI,CAACmlB,EAAE,CAACC,GAAG,CAACO,cAAc,EAAE,CAAA;KAAC,CAAA;EAAC3lB,EAAAA,IAAI,CAACmlB,EAAE,CAACY,IAAI,GAAC,EAAE,CAAA;IAAC/lB,IAAI,CAACmlB,EAAE,CAACY,IAAI,CAACC,OAAO,GAAC,UAAS9nB,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAAC6B,IAAI,CAACb,MAAM,CAAC8mB,WAAW,IAAEjmB,IAAI,CAACb,MAAM,CAAC+mB,iBAAiB,CAAA;EAAC,IAAA,IAAG,KAAK,CAAC,KAAG/nB,CAAC,EAAC;QAACA,CAAC,GAAC,IAAIA,CAAC,EAAA,CAAA;EAAC,MAAA,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC+I,SAAS,CAACtJ,MAAM,EAACO,CAAC,EAAE,EAAA;EAACD,QAAAA,CAAC,CAACgoB,MAAM,CAAChf,SAAS,CAAC/I,CAAC,CAAC,CAAC,CAAA;EAAC,OAAA;QAAA,OAAOD,CAAC,CAAC6nB,OAAO,EAAE,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOhmB,IAAI,CAACmlB,EAAE,CAACY,IAAI,CAACK,qBAAqB,CAACpmB,IAAI,CAACiT,KAAK,CAACyB,OAAO,CAACvN,SAAS,CAAC,CAAC,CAAA;KAAC,CAAA;EACvXnH,EAAAA,IAAI,CAACmlB,EAAE,CAACY,IAAI,CAACK,qBAAqB,GAAC,UAASloB,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIE,CAAC,GAAC0B,IAAI,CAACb,MAAM,CAAC8mB,WAAW,IAAEjmB,IAAI,CAACb,MAAM,CAAC+mB,iBAAiB,CAAA;EAAC,IAAA,IAAG,KAAK,CAAC,KAAG5nB,CAAC,EAAC;QAACA,CAAC,GAAC,IAAIA,CAAC,EAAA,CAAA;EAAC,MAAA,KAAI,IAAInC,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC+B,CAAC,CAACL,MAAM,EAAC1B,CAAC,EAAE,EAAA;UAACmC,CAAC,CAAC6nB,MAAM,CAACjoB,CAAC,CAAC/B,CAAC,CAAC,EAACiC,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,OAAOE,CAAC,CAAC0nB,OAAO,CAAC7nB,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,IAAG,KAAK,CAAC,KAAG6B,IAAI,CAACb,MAAM,CAACknB,IAAI,EAAC,OAAO/nB,CAAC,GAAC,EAAE,EAACH,CAAC,KAAGG,CAAC,CAACgE,IAAI,GAACnE,CAAC,CAAC,EAACC,CAAC,KAAGE,CAAC,CAACgoB,OAAO,GAACloB,CAAC,CAAC,EAAC,IAAIioB,IAAI,CAACnoB,CAAC,EAACI,CAAC,CAAC,CAAA;MAAC,MAAMyC,KAAK,CAAC,qDAAqD,CAAC,CAAA;KAAE,CAAA;EAACf,EAAAA,IAAI,CAACumB,IAAI,GAAC,EAAE,CAAA;EAACvmB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,GAAC,EAAE,CAAA;IAACxmB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACC,SAAS,GAAC,CAAC,CAAC,CAAA;EAC5ZzmB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACE,MAAM,GAAC1mB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACC,SAAS,IAAE,CAAC,IAAI,IAAEzmB,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,IAAE,IAAI,IAAE3mB,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,IAAE,IAAI,IAAE3mB,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,IAAE,IAAI,IAAE3mB,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,IAAE,IAAI,IAAE3mB,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,IAAE,IAAI,IAAE3mB,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,IAAE,IAAI,IAAE3mB,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,IAAE,IAAI,IAAE3mB,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,IAAE,IAAI,IAAE3mB,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,MAAI,CAAC,IAAE3mB,IAAI,CAACQ,MAAM,CAAC3C,MAAM,IACxf,GAAG,IAAEmC,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,IAAE,GAAG,IAAEhX,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,IAAE,CAAC,IAAEhX,IAAI,CAACQ,MAAM,CAAC3C,MAAM,IAAE,KAAK,IAAEmC,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,KAAG,CAAC,IAAE3mB,IAAI,CAACQ,MAAM,CAAC3C,MAAM,IAAE,GAAG,IAAEmC,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,IAAE,GAAG,IAAEhX,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,IAAE,CAAC,IAAEhX,IAAI,CAACQ,MAAM,CAAC3C,MAAM,KAAG,GAAG,IAAEmC,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,IAAE,GAAG,IAAEhX,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,KAAG,MAAM,IAAEhX,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,IAAE,MAAM,IAAE3mB,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,IAAE,MAAM,IAAE3mB,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,IAAE,MAAM,IAAE3mB,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EACvf,CAAC,CAAC,CAAC2P,WAAW,EAAE,IAAE,MAAM,IAAE3mB,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,IAAE,MAAM,IAAE3mB,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,CAAC,IAAE,CAAC,IAAE3mB,IAAI,CAACQ,MAAM,CAAC3C,MAAM,KAAG,GAAG,IAAEmC,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,IAAE,GAAG,IAAEhX,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,KAAG,MAAM,IAAEhX,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,IAAE,MAAM,IAAE3mB,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,IAAE,MAAM,IAAE3mB,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,IAAE,MAAM,IAAE3mB,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,IAAE,MAAM,IAAE3mB,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,IAAE,MAAM,IAAE3mB,IAAI,CAACQ,MAAM,CAACwW,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC2P,WAAW,EAAE,CAAC,CAAA;EAC9f3mB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACI,MAAM,GAAC;EAACC,IAAAA,GAAG,EAAC,QAAQ;EAACC,IAAAA,GAAG,EAAC,QAAQ;EAACC,IAAAA,GAAG,EAAC,QAAQ;EAACC,IAAAA,GAAG,EAAC,QAAQ;EAACC,IAAAA,GAAG,EAAC,QAAA;KAAS,CAAA;EAACjnB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,GAAC;EAACC,IAAAA,GAAG,EAAC,CAAC;MAACC,GAAG,EAAC,CAAC,CAAC;EAACC,IAAAA,OAAO,EAAC,CAAA;KAAE,CAAA;EAACrnB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACc,KAAK,GAAC,OAAO,CAAA;EAACtnB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACe,IAAI,GAAC,MAAM,CAAA;EAACvnB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACgB,UAAU,GAACxnB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACE,MAAM,GAAC1mB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACe,IAAI,GAACvnB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACc,KAAK,CAAA;EAACtnB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACiB,SAAS,GAACznB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACE,MAAM,GAAC1mB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACc,KAAK,GAACtnB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACe,IAAI,CAAA;IAC7WvnB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACkB,KAAK,GAAC,UAASxpB,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAM,QAAQ,IAAE,OAAOD,CAAC,GAAC,CAAC,GAACA,CAAC,GAAC8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACC,GAAG,GAAC,CAAC,GAACjpB,CAAC,GAAC8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACE,GAAG,GAACjpB,CAAC,GAAC,IAAI,GAAC6B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACG,OAAO,GAAC,IAAI,IAAEnpB,CAAC,GAAC,IAAI,GAACA,CAAC,GAAC8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACE,GAAG,GAACpnB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACC,GAAG,CAAA;KAAC,CAAA;EAACnnB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACmB,SAAS,GAAC,mJAA6J,CAAA;EAAC3nB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACoB,SAAS,GAAC,sFAAsF,CAAA;EACxf5nB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACqB,YAAY,GAAC,kBAAkB,CAAA;IAAC7nB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACsB,kBAAkB,GAAC,UAAS5pB,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAOA,CAAC,GAACD,CAAC,CAAC4K,OAAO,CAAC9I,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACqB,YAAY,EAAC,EAAE,CAAC,GAAC3pB,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACuB,WAAW,GAAC,IAAIroB,MAAM,CAAC,GAAG,GAACM,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACoB,SAAS,GAAC,GAAG,CAAC,CAAA;IAAC5nB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACwB,WAAW,GAAC,IAAItoB,MAAM,CAAC,GAAG,GAACM,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACmB,SAAS,GAAC,GAAG,CAAC,CAAA;IAAC3nB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACyB,SAAS,GAAC,UAAS/pB,CAAC,EAACC,CAAC,EAAC;MAAC,OAAO6B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACuB,WAAW,CAACtmB,IAAI,CAACzB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACsB,kBAAkB,CAAC5pB,CAAC,EAACC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC0B,UAAU,GAACloB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACyB,SAAS,CAAA;IAC9cjoB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC2B,SAAS,GAAC,UAASjqB,CAAC,EAACC,CAAC,EAAC;MAAC,OAAO6B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACwB,WAAW,CAACvmB,IAAI,CAACzB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACsB,kBAAkB,CAAC5pB,CAAC,EAACC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC4B,MAAM,GAAC,IAAI1oB,MAAM,CAAC,IAAI,GAACM,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACmB,SAAS,GAAC,GAAG,CAAC,CAAA;IAAC3nB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC6B,MAAM,GAAC,IAAI3oB,MAAM,CAAC,IAAI,GAACM,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACoB,SAAS,GAAC,GAAG,CAAC,CAAA;IAAC5nB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC8B,SAAS,GAAC,UAASpqB,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC6B,MAAM,CAAC5mB,IAAI,CAACvD,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC+B,SAAS,GAAC,UAASrqB,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC4B,MAAM,CAAC3mB,IAAI,CAACvD,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACgC,aAAa,GAAC,UAAStqB,CAAC,EAAC;MAAC,OAAM,CAAC8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC+B,SAAS,CAACrqB,CAAC,CAAC,IAAE,CAAC8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC8B,SAAS,CAACpqB,CAAC,CAAC,CAAA;KAAC,CAAA;EAC/f8B,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACiC,cAAc,GAAC,IAAI/oB,MAAM,CAAC,KAAK,GAACM,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACoB,SAAS,GAAC,KAAK,GAAC5nB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACmB,SAAS,GAAC,GAAG,CAAC,CAAA;EAAC3nB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACkC,cAAc,GAAC,IAAIhpB,MAAM,CAAC,KAAK,GAACM,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACmB,SAAS,GAAC,KAAK,GAAC3nB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACoB,SAAS,GAAC,GAAG,CAAC,CAAA;IAAC5nB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACmC,aAAa,GAAC,UAASzqB,CAAC,EAACC,CAAC,EAAC;MAAC,OAAO6B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACkC,cAAc,CAACjnB,IAAI,CAACzB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACsB,kBAAkB,CAAC5pB,CAAC,EAACC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACoC,SAAS,GAAC5oB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACmC,aAAa,CAAA;IAC3Y3oB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACqC,aAAa,GAAC,UAAS3qB,CAAC,EAACC,CAAC,EAAC;MAAC,OAAO6B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACiC,cAAc,CAAChnB,IAAI,CAACzB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACsB,kBAAkB,CAAC5pB,CAAC,EAACC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACsC,SAAS,GAAC9oB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACqC,aAAa,CAAA;EAAC7oB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACuC,gBAAgB,GAAC,cAAc,CAAA;IAAC/oB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACwC,aAAa,GAAC,UAAS9qB,CAAC,EAACC,CAAC,EAAC;EAACD,IAAAA,CAAC,GAAC8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACsB,kBAAkB,CAAC5pB,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO6B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACuC,gBAAgB,CAACtnB,IAAI,CAACvD,CAAC,CAAC,IAAE,CAAC8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC2B,SAAS,CAACjqB,CAAC,CAAC,IAAE,CAAC8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACyB,SAAS,CAAC/pB,CAAC,CAAC,CAAA;KAAC,CAAA;EACla8B,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACyC,kBAAkB,GAAC,IAAIvpB,MAAM,CAAC,GAAG,GAACM,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACmB,SAAS,GAAC,KAAK,GAAC3nB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACoB,SAAS,GAAC,KAAK,CAAC,CAAA;EAAC5nB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC0C,kBAAkB,GAAC,IAAIxpB,MAAM,CAAC,GAAG,GAACM,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACoB,SAAS,GAAC,KAAK,GAAC5nB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACmB,SAAS,GAAC,KAAK,CAAC,CAAA;IAAC3nB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC2C,WAAW,GAAC,UAASjrB,CAAC,EAACC,CAAC,EAAC;MAAC,OAAO6B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACyC,kBAAkB,CAACxnB,IAAI,CAACzB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACsB,kBAAkB,CAAC5pB,CAAC,EAACC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC4C,aAAa,GAACppB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC2C,WAAW,CAAA;IACvZnpB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC6C,WAAW,GAAC,UAASnrB,CAAC,EAACC,CAAC,EAAC;MAAC,OAAO6B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC0C,kBAAkB,CAACznB,IAAI,CAACzB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACsB,kBAAkB,CAAC5pB,CAAC,EAACC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC8C,aAAa,GAACtpB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC6C,WAAW,CAAA;EAACrpB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC+C,aAAa,GAAC,oHAAoH,CAAA;IAACvpB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACgD,aAAa,GAAC,UAAStrB,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC+C,aAAa,CAAC9nB,IAAI,CAACvD,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACiD,mBAAmB,GAAC,4CAA4C,CAAA;IAC/ezpB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACkD,kBAAkB,GAAC,UAASxrB,CAAC,EAACC,CAAC,EAAC;EAACA,IAAAA,CAAC,GAAC,CAAC,KAAK,CAAC,KAAGA,CAAC,GAAC6B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACyB,SAAS,CAAC/pB,CAAC,CAAC,GAACC,CAAC,IAAE6B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACI,MAAM,CAACK,GAAG,GAACjnB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACI,MAAM,CAACI,GAAG,CAAA;EAAC,IAAA,OAAO9oB,CAAC,CAAC4K,OAAO,CAAC9I,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACiD,mBAAmB,EAACtrB,CAAC,GAAC,IAAI,GAACA,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACmD,gBAAgB,GAAC,UAASzrB,CAAC,EAAC;MAAC,OAAM,GAAG,IAAEA,CAAC,CAACqK,MAAM,CAAC,CAAC,CAAC,GAACrK,CAAC,CAAC4K,OAAO,CAAC,MAAM,EAAC,YAAY,CAAC,GAAC,kBAAkB,GAAC5K,CAAC,GAAC,SAAS,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACoD,gBAAgB,GAAC,UAAS1rB,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACI,MAAM,CAACE,GAAG,GAAC5oB,CAAC,GAAC8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACI,MAAM,CAACG,GAAG,CAAA;KAAC,CAAA;IAC3b/mB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACqD,gBAAgB,GAAC,UAAS3rB,CAAC,EAAC;MAAC,OAAM,GAAG,IAAEA,CAAC,CAACqK,MAAM,CAAC,CAAC,CAAC,GAACrK,CAAC,CAAC4K,OAAO,CAAC,MAAM,EAAC,YAAY,CAAC,GAAC,kBAAkB,GAAC5K,CAAC,GAAC,SAAS,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACsD,gBAAgB,GAAC,UAAS5rB,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACI,MAAM,CAACC,GAAG,GAAC3oB,CAAC,GAAC8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACI,MAAM,CAACG,GAAG,CAAA;KAAC,CAAA;EAAC/mB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACuD,aAAa,GAAC,oEAAoE,CAAA;EAAC/pB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACwD,OAAO,GAAC,QAAQ,CAAA;EAAChqB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACyD,QAAQ,GAAC,SAAS,CAAA;EAACjqB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC0D,OAAO,GAAC,OAAO,CAAA;IAC9alqB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC2D,SAAS,GAAC,UAASjsB,CAAC,EAAC;EAAC,IAAA,OAAOA,CAAC,CAAC4K,OAAO,CAAC9I,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACuD,aAAa,EAAC,cAAc,CAAC,CAACjhB,OAAO,CAAC9I,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACwD,OAAO,EAAC,MAAM,CAAC,CAAClhB,OAAO,CAAC9I,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACyD,QAAQ,EAACjqB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACe,IAAI,CAAC,CAACze,OAAO,CAAC9I,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC0D,OAAO,EAAClqB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACc,KAAK,CAAC,CAAA;KAAC,CAAA;EAACtnB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC4D,wBAAwB,GAAC,qBAAqB,CAAA;EAACpqB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC6D,wBAAwB,GAAC,qBAAqB,CAAA;IAChXrqB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC8D,oBAAoB,GAAC,UAASpsB,CAAC,EAAC;MAAC,OAAOA,CAAC,CAAC4K,OAAO,CAAC9I,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC4D,wBAAwB,EAAC,UAAU,CAAC,CAACthB,OAAO,CAAC9I,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC6D,wBAAwB,EAAC,UAAU,CAAC,CAAA;KAAC,CAAA;EAACrqB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC+D,gBAAgB,GAAC,KAAK,CAAA;EAACvqB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACgE,cAAc,GAAC,mBAAmB,CAAA;EAACxqB,EAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACiE,sBAAsB,GAAC,EAAE,CAAA;IAClTzqB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACkE,iBAAiB,GAAC,UAASxsB,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,CAAC;EAACE,MAAAA,CAAC,GAAC,CAAC;QAACnC,CAAC,GAAC,CAAC,CAAC,CAAA;MAAC+B,CAAC,GAAC8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACsB,kBAAkB,CAAC5pB,CAAC,EAACC,CAAC,CAAC,CAACmB,KAAK,CAACU,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC+D,gBAAgB,CAAC,CAAA;EAAC,IAAA,KAAIpsB,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACL,MAAM,EAACM,CAAC,EAAE,EAAC;EAAC,MAAA,IAAIlB,CAAC,GAACiB,CAAC,CAACC,CAAC,CAAC,CAAA;EAAC6B,MAAAA,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACmC,aAAa,CAAC1rB,CAAC,CAAC,IAAEmB,CAAC,EAAE,EAACE,CAAC,EAAE,IAAE0B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACuC,gBAAgB,CAACtnB,IAAI,CAACxE,CAAC,CAAC,GAACd,CAAC,GAAC,CAAC,CAAC,GAAC6D,IAAI,CAACumB,IAAI,CAACC,IAAI,CAAC2B,SAAS,CAAClrB,CAAC,CAAC,GAACqB,CAAC,EAAE,GAAC0B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACgE,cAAc,CAAC/oB,IAAI,CAACxE,CAAC,CAAC,KAAGd,CAAC,GAAC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;MAAC,OAAO,CAAC,IAAEmC,CAAC,GAACnC,CAAC,GAAC6D,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACC,GAAG,GAACnnB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACG,OAAO,GAACjpB,CAAC,GAACE,CAAC,GAAC0B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACiE,sBAAsB,GAACzqB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACE,GAAG,GAACpnB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACC,GAAG,CAAA;KAAC,CAAA;IAChfnnB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACmE,uBAAuB,GAAC,UAASzsB,CAAC,EAACC,CAAC,EAAC;MAAC,OAAO6B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACkE,iBAAiB,CAACxsB,CAAC,EAACC,CAAC,CAAC,IAAE6B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACE,GAAG,CAAA;KAAC,CAAA;IAACpnB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACoE,qBAAqB,GAAC,UAAS1sB,CAAC,EAACC,CAAC,EAAC;EAACD,IAAAA,CAAC,KAAGC,CAAC,GAAC6B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACkB,KAAK,CAACvpB,CAAC,CAAC,CAAC,KAAGD,CAAC,CAAC2sB,KAAK,CAACC,SAAS,GAAC3sB,CAAC,IAAE6B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACE,GAAG,GAACpnB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACc,KAAK,GAACtnB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACe,IAAI,EAACrpB,CAAC,CAAC6sB,GAAG,GAAC5sB,CAAC,IAAE6B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACE,GAAG,GAAC,KAAK,GAAC,KAAK,CAAC,CAAA;KAAC,CAAA;IACjVpnB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACwE,iCAAiC,GAAC,UAAS9sB,CAAC,EAACC,CAAC,EAAC;MAAC,QAAO6B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACkE,iBAAiB,CAACvsB,CAAC,CAAC;QAAE,KAAK6B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACC,GAAG;UAACjpB,CAAC,CAAC6sB,GAAG,GAAC,KAAK,CAAA;EAAC,QAAA,MAAA;QAAM,KAAK/qB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACE,GAAG;UAAClpB,CAAC,CAAC6sB,GAAG,GAAC,KAAK,CAAA;EAAC,QAAA,MAAA;EAAM,MAAA;EAAQ7sB,QAAAA,CAAC,CAACyI,eAAe,CAAC,KAAK,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;IAAC3G,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACyE,iBAAiB,GAAC,YAAU,EAAE,CAAA;IAACjrB,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,GAAC,UAAShtB,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAI,CAACgtB,uDAAuD,GAACjtB,CAAC,KAAG8B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACE,0BAA0B,IAAEjtB,CAAC,IAAE,EAAE,CAAA;MAAC,IAAI,CAACktB,4DAA4D,GAACrrB,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACvG,uCAAuC,CAAA;KAAC,CAAA;IAAC3kB,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAAClsB,SAAS,CAACmlB,+BAA+B,GAAC,CAAC,CAAC,CAAA;IAACnkB,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAAClsB,SAAS,CAAColB,mBAAmB,GAAC,YAAU;EAAC,IAAA,OAAO,IAAI,CAAC+G,uDAAuD,CAACrlB,QAAQ,EAAE,CAAA;KAAC,CAAA;IAC1yB9F,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAAClsB,SAAS,CAACssB,uCAAuC,GAAC,CAAC,CAAC,CAAA;IAACtrB,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAAClsB,SAAS,CAACusB,YAAY,GAAC,YAAU;MAAC,OAAOvrB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACC,GAAG,CAAA;KAAC,CAAA;EAC/KnnB,EAAAA,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAAClsB,SAAS,CAACwsB,eAAe,GAAC,UAASttB,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC4B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAAC7G,MAAM,CAAC,IAAI,CAAC,CAAA;EAACjmB,IAAAA,CAAC,GAAC4B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACO,iBAAiB,CAACC,IAAI,CAACttB,CAAC,CAAC,CAAA;EAAC,IAAA,IAAIE,CAAC,GAACF,CAAC,CAAC,CAAC,CAAC,IAAE,EAAE,CAAA;MAAC,OAAO4B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACS,wDAAwD,CAACvtB,CAAC,CAAC,CAAC,CAAC,GAAC4B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACU,gBAAgB,CAAC,GAAG,EAACxtB,CAAC,CAAC,CAAC,CAAC,IAAE,EAAE,EAACF,CAAC,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACU,gBAAgB,CAAC,GAAG,EAACttB,CAAC,EAACH,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EACrZ6B,EAAAA,IAAI,CAACO,KAAK,KAAGP,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAAClsB,SAAS,CAAC8G,QAAQ,GAAC,YAAU;EAAC,IAAA,OAAM,qBAAqB,GAAC,IAAI,CAACqlB,uDAAuD,GAAC,GAAG,CAAA;EAAA,GAAC,CAAC,CAAA;IAACnrB,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAAC7G,MAAM,GAAC,UAASnmB,CAAC,EAAC;EAAC,IAAA,OAAO8B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACW,sBAAsB,CAAC3tB,CAAC,CAAC,CAAC4H,QAAQ,EAAE,CAAA;KAAC,CAAA;IAChS9F,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACW,sBAAsB,GAAC,UAAS3tB,CAAC,EAAC;EAAC,IAAA,IAAGA,CAAC,YAAY8B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,IAAEhtB,CAAC,CAACkL,WAAW,KAAGpJ,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,IAAEhtB,CAAC,CAACmtB,4DAA4D,KAAGrrB,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACvG,uCAAuC,EAAC,OAAOzmB,CAAC,CAACitB,uDAAuD,CAAA;EAACnrB,IAAAA,IAAI,CAACoN,OAAO,CAACK,IAAI,CAAC,mDAAmD,GAACvP,CAAC,GAAC,YAAY,GAAC8B,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAM,+BAA+B,CAAA;KAAC,CAAA;IAC9e8B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACY,MAAM,GAAC,UAAS5tB,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC4B,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,CAAA;MAAC,IAAG,CAAC8B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACa,SAAS,CAACtqB,IAAI,CAACrD,CAAC,CAAC,EAAC,MAAM2C,KAAK,CAAC,qCAAqC,GAAC3C,CAAC,CAAC,CAAA;EAACF,IAAAA,CAAC,GAACE,CAAC,CAAC0K,OAAO,CAAC9I,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACc,cAAc,EAAC,UAAS9tB,CAAC,EAAC/B,CAAC,EAAC;EAAC,MAAA,IAAG,CAAC0C,MAAM,CAACG,SAAS,CAACsH,cAAc,CAAC3I,IAAI,CAACQ,CAAC,EAAChC,CAAC,CAAC,EAAC,MAAM4E,KAAK,CAAC,iBAAiB,GAAC5E,CAAC,GAAC,wBAAwB,GAACiC,CAAC,GAAC,+CAA+C,GAACuH,IAAI,CAACC,SAAS,CAACzH,CAAC,CAAC,CAAC,CAAA;EAACD,MAAAA,CAAC,GAACC,CAAC,CAAChC,CAAC,CAAC,CAAA;QAAC,OAAO+B,CAAC,YAAY8B,IAAI,CAAC4jB,MAAM,CAACE,KAAK,GAAC9jB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,GACtf+tB,kBAAkB,CAAC5tB,MAAM,CAACH,CAAC,CAAC,CAAC,CAAA;EAAA,KAAC,CAAC,CAAA;MAAC,OAAO8B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACS,wDAAwD,CAACztB,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACc,cAAc,GAAC,WAAW,CAAA;EAAChsB,EAAAA,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACa,SAAS,GAAC,oFAAoF,CAAA;EAAC/rB,EAAAA,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACO,iBAAiB,GAAC,gCAAgC,CAAA;EACpYzrB,EAAAA,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACgB,gBAAgB,GAAC,UAAShuB,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;EAAC,IAAA,OAAO0B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACY,MAAM,CAAC5tB,CAAC,EAACC,CAAC,CAAC,CAACqtB,eAAe,CAACptB,CAAC,EAACE,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC0B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACtG,YAAY,GAAC,UAAS1mB,CAAC,EAAC;EAAC,IAAA,OAAO8B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACS,wDAAwD,CAAC3rB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACiB,aAAa,GAAC,UAASjuB,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIC,CAAC,GAAC,EAAE,EAACC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,CAACL,MAAM,EAACO,CAAC,EAAE,EAAA;EAACD,MAAAA,CAAC,IAAE6B,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAACE,CAAC,CAAC,CAAC,CAAA;EAAC,KAAA;MAAA,OAAO4B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACS,wDAAwD,CAACxtB,CAAC,CAAC,CAAA;KAAC,CAAA;IAChhB6B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACkB,cAAc,GAAC,UAASluB,CAAC,EAAC;MAACA,CAAC,GAAC8B,IAAI,CAACmlB,EAAE,CAACY,IAAI,CAACK,qBAAqB,CAAC,CAACpmB,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACH,MAAM,CAACnmB,CAAC,CAAC,CAAC,EAAC,iBAAiB,CAAC,CAAA;MAACA,CAAC,GAAC8B,IAAI,CAACmlB,EAAE,CAACC,GAAG,CAACC,eAAe,CAACnnB,CAAC,CAAC,CAAA;MAAC,OAAO8B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACS,wDAAwD,CAACztB,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACvG,uCAAuC,GAAC,EAAE,CAAA;IAC1V3kB,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACS,wDAAwD,GAAC,UAASztB,CAAC,EAAC;MAACA,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC6a,YAAY,CAACC,oCAAoC,GAAC3jB,IAAI,CAAC6I,IAAI,CAAC6a,YAAY,CAACC,oCAAoC,CAACpZ,eAAe,CAACrM,CAAC,CAAC,GAACA,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI8B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAAClrB,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACE,0BAA0B,EAACltB,CAAC,CAAC,CAAA;KAAC,CAAA;EACpV8B,EAAAA,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACU,gBAAgB,GAAC,UAAS1tB,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,OAAOD,CAAC,CAAA;EAAC,IAAA,IAAG,QAAQ,KAAG,OAAOC,CAAC,EAAC,OAAOA,CAAC,GAACF,CAAC,GAAC+tB,kBAAkB,CAAC7tB,CAAC,CAAC,GAAC,EAAE,CAAA;EAAC,IAAA,KAAI,IAAIE,CAAC,IAAIF,CAAC,EAAC;EAAC,MAAA,IAAIjC,CAAC,GAACiC,CAAC,CAACE,CAAC,CAAC,CAAA;EAACnC,MAAAA,CAAC,GAAC4C,KAAK,CAACiH,OAAO,CAAC7J,CAAC,CAAC,GAACA,CAAC,GAAC,CAACA,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAIc,CAAC,GAAC,CAAC,EAACA,CAAC,GAACd,CAAC,CAAC0B,MAAM,EAACZ,CAAC,EAAE,EAAC;EAAC,QAAA,IAAIE,CAAC,GAAChB,CAAC,CAACc,CAAC,CAAC,CAAA;EAAC,QAAA,IAAI,IAAEE,CAAC,KAAGgB,CAAC,KAAGA,CAAC,GAACD,CAAC,CAAC,EAACC,CAAC,IAAE,CAACA,CAAC,CAACN,MAAM,GAACK,CAAC,CAACL,MAAM,GAAC,GAAG,GAAC,EAAE,IAAEouB,kBAAkB,CAAC3tB,CAAC,CAAC,GAAC,GAAG,GAAC2tB,kBAAkB,CAAC5tB,MAAM,CAAClB,CAAC,CAAC,CAAC,CAAC,CAAA;EAAA,OAAA;EAAC,KAAA;EAAC,IAAA,OAAOgB,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACE,0BAA0B,GAAC,EAAE,CAAA;EAACprB,EAAAA,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,GAAC,EAAE,CAAA;IAACrsB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACC,UAAU,GAAC,UAASpuB,CAAC,EAACC,CAAC,EAAC;MAAC,OAAO,CAAC,IAAED,CAAC,CAACoV,WAAW,CAACnV,CAAC,EAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACE,QAAQ,GAAC,UAASruB,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAACF,CAAC,CAACL,MAAM,GAACM,CAAC,CAACN,MAAM,CAAA;EAAC,IAAA,OAAO,CAAC,IAAEO,CAAC,IAAEF,CAAC,CAACsJ,OAAO,CAACrJ,CAAC,EAACC,CAAC,CAAC,IAAEA,CAAC,CAAA;KAAC,CAAA;IAAC4B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACG,yBAAyB,GAAC,UAAStuB,CAAC,EAACC,CAAC,EAAC;MAAC,OAAO,CAAC,IAAE6B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACI,sBAAsB,CAACtuB,CAAC,EAACD,CAAC,CAACwuB,MAAM,CAAC,CAAC,EAACvuB,CAAC,CAACN,MAAM,CAAC,CAAC,CAAA;KAAC,CAAA;IAACmC,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACM,uBAAuB,GAAC,UAASzuB,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO,CAAC,IAAE6B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACI,sBAAsB,CAACtuB,CAAC,EAACD,CAAC,CAACwuB,MAAM,CAACxuB,CAAC,CAACL,MAAM,GAACM,CAAC,CAACN,MAAM,EAACM,CAAC,CAACN,MAAM,CAAC,CAAC,CAAA;KAAC,CAAA;IACr4BmC,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACO,qBAAqB,GAAC,UAAS1uB,CAAC,EAACC,CAAC,EAAC;MAAC,OAAOD,CAAC,CAACyoB,WAAW,EAAE,IAAExoB,CAAC,CAACwoB,WAAW,EAAE,CAAA;KAAC,CAAA;IAAC3mB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACQ,mBAAmB,GAAC,UAAS3uB,CAAC,EAAC;EAAC,IAAA,OAAM,aAAa,CAACuD,IAAI,CAACvD,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACS,IAAI,GAAC9sB,IAAI,CAACS,YAAY,IAAEpC,MAAM,CAACW,SAAS,CAAC8tB,IAAI,GAAC,UAAS5uB,CAAC,EAAC;MAAC,OAAOA,CAAC,CAAC4uB,IAAI,EAAE,CAAA;KAAC,GAAC,UAAS5uB,CAAC,EAAC;MAAC,OAAM,gCAAgC,CAACwtB,IAAI,CAACxtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACI,sBAAsB,GAAC,UAASvuB,CAAC,EAACC,CAAC,EAAC;EAACD,IAAAA,CAAC,GAACG,MAAM,CAACH,CAAC,CAAC,CAACyoB,WAAW,EAAE,CAAA;EAACxoB,IAAAA,CAAC,GAACE,MAAM,CAACF,CAAC,CAAC,CAACwoB,WAAW,EAAE,CAAA;EAAC,IAAA,OAAOzoB,CAAC,GAACC,CAAC,GAAC,CAAC,CAAC,GAACD,CAAC,IAAEC,CAAC,GAAC,CAAC,GAAC,CAAC,CAAA;KAAC,CAAA;IACxd6B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACU,WAAW,GAAC,UAAS7uB,CAAC,EAACC,CAAC,EAAC;MAAC,OAAOD,CAAC,CAAC4K,OAAO,CAAC,eAAe,EAAC3K,CAAC,GAAC,QAAQ,GAAC,MAAM,CAAC,CAAA;KAAC,CAAA;IACnG6B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACW,UAAU,GAAC,UAAS9uB,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAGA,CAAC,EAACD,CAAC,GAACA,CAAC,CAAC4K,OAAO,CAAC9I,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACY,OAAO,EAAC,OAAO,CAAC,CAACnkB,OAAO,CAAC9I,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACa,MAAM,EAAC,MAAM,CAAC,CAACpkB,OAAO,CAAC9I,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACc,MAAM,EAAC,MAAM,CAAC,CAACrkB,OAAO,CAAC9I,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACe,QAAQ,EAAC,QAAQ,CAAC,CAACtkB,OAAO,CAAC9I,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACgB,gBAAgB,EAAC,OAAO,CAAC,CAACvkB,OAAO,CAAC9I,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACiB,QAAQ,EAAC,MAAM,CAAC,CAAC,KAAI;EAAC,MAAA,IAAG,CAACttB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACkB,OAAO,CAAC9rB,IAAI,CAACvD,CAAC,CAAC,EAAC,OAAOA,CAAC,CAAA;QAAC,CAAC,CAAC,IAAEA,CAAC,CAACsJ,OAAO,CAAC,GAAG,CAAC,KAAGtJ,CAAC,GAACA,CAAC,CAAC4K,OAAO,CAAC9I,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACY,OAAO,EAAC,OAAO,CAAC,CAAC,CAAA;QAAC,CAAC,CAAC,IAAE/uB,CAAC,CAACsJ,OAAO,CAAC,GAAG,CAAC,KAAGtJ,CAAC,GAACA,CAAC,CAAC4K,OAAO,CAAC9I,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACa,MAAM,EAC7gB,MAAM,CAAC,CAAC,CAAA;QAAC,CAAC,CAAC,IAAEhvB,CAAC,CAACsJ,OAAO,CAAC,GAAG,CAAC,KAAGtJ,CAAC,GAACA,CAAC,CAAC4K,OAAO,CAAC9I,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACc,MAAM,EAAC,MAAM,CAAC,CAAC,CAAA;QAAC,CAAC,CAAC,IAAEjvB,CAAC,CAACsJ,OAAO,CAAC,GAAG,CAAC,KAAGtJ,CAAC,GAACA,CAAC,CAAC4K,OAAO,CAAC9I,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACe,QAAQ,EAAC,QAAQ,CAAC,CAAC,CAAA;QAAC,CAAC,CAAC,IAAElvB,CAAC,CAACsJ,OAAO,CAAC,GAAG,CAAC,KAAGtJ,CAAC,GAACA,CAAC,CAAC4K,OAAO,CAAC9I,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACgB,gBAAgB,EAAC,OAAO,CAAC,CAAC,CAAA;QAAC,CAAC,CAAC,IAAEnvB,CAAC,CAACsJ,OAAO,CAAC,MAAM,CAAC,KAAGtJ,CAAC,GAACA,CAAC,CAAC4K,OAAO,CAAC9I,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACiB,QAAQ,EAAC,MAAM,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOpvB,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACY,OAAO,GAAC,IAAI,CAAA;EAACjtB,EAAAA,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACa,MAAM,GAAC,IAAI,CAAA;EAACltB,EAAAA,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACc,MAAM,GAAC,IAAI,CAAA;EAACntB,EAAAA,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACe,QAAQ,GAAC,IAAI,CAAA;EAACptB,EAAAA,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACgB,gBAAgB,GAAC,IAAI,CAAA;EAChfrtB,EAAAA,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACiB,QAAQ,GAAC,OAAO,CAAA;EAACttB,EAAAA,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACkB,OAAO,GAAC,aAAa,CAAA;IAACvtB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACmB,gBAAgB,GAAC,UAAStvB,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO6B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACU,WAAW,CAAC7uB,CAAC,CAAC4K,OAAO,CAAC,KAAK,EAAC,SAAS,CAAC,EAAC3K,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAAChhB,QAAQ,GAAC,UAASnN,CAAC,EAACC,CAAC,EAAC;MAAC,OAAM,CAAC,CAAC,IAAED,CAAC,CAACsJ,OAAO,CAACrJ,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACoB,uBAAuB,GAAC,UAASvvB,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO6B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAAChhB,QAAQ,CAACnN,CAAC,CAACyoB,WAAW,EAAE,EAACxoB,CAAC,CAACwoB,WAAW,EAAE,CAAC,CAAA;KAAC,CAAA;IACjZ3mB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACqB,eAAe,GAAC,UAASxvB,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,CAAC,CAAA;EAACF,IAAAA,CAAC,GAAC8B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACS,IAAI,CAACzuB,MAAM,CAACH,CAAC,CAAC,CAAC,CAACoB,KAAK,CAAC,GAAG,CAAC,CAAA;EAACnB,IAAAA,CAAC,GAAC6B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACS,IAAI,CAACzuB,MAAM,CAACF,CAAC,CAAC,CAAC,CAACmB,KAAK,CAAC,GAAG,CAAC,CAAA;EAAC,IAAA,KAAI,IAAIhB,CAAC,GAACqB,IAAI,CAACC,GAAG,CAAC1B,CAAC,CAACL,MAAM,EAACM,CAAC,CAACN,MAAM,CAAC,EAAC1B,CAAC,GAAC,CAAC,EAAC,CAAC,IAAEiC,CAAC,IAAEjC,CAAC,GAACmC,CAAC,EAACnC,CAAC,EAAE,EAAC;EAAC,MAAA,IAAIc,CAAC,GAACiB,CAAC,CAAC/B,CAAC,CAAC,IAAE,EAAE;EAACgB,QAAAA,CAAC,GAACgB,CAAC,CAAChC,CAAC,CAAC,IAAE,EAAE,CAAA;QAAC,GAAE;EAACc,QAAAA,CAAC,GAAC,gBAAgB,CAACyuB,IAAI,CAACzuB,CAAC,CAAC,IAAE,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAA;EAACE,QAAAA,CAAC,GAAC,gBAAgB,CAACuuB,IAAI,CAACvuB,CAAC,CAAC,IAAE,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAA;EAAC,QAAA,IAAG,CAAC,IAAEF,CAAC,CAAC,CAAC,CAAC,CAACY,MAAM,IAAE,CAAC,IAAEV,CAAC,CAAC,CAAC,CAAC,CAACU,MAAM,EAAC,MAAA;UAAMO,CAAC,GAAC,CAAC,IAAEnB,CAAC,CAAC,CAAC,CAAC,CAACY,MAAM,GAAC,CAAC,GAACkZ,QAAQ,CAAC9Z,CAAC,CAAC,CAAC,CAAC,EAAC,EAAE,CAAC,CAAA;UAAC,IAAIuW,CAAC,GAAC,CAAC,IAAErW,CAAC,CAAC,CAAC,CAAC,CAACU,MAAM,GAAC,CAAC,GAACkZ,QAAQ,CAAC5Z,CAAC,CAAC,CAAC,CAAC,EAAC,EAAE,CAAC,CAAA;UAACiB,CAAC,GAAC4B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACsB,gBAAgB,CAACvvB,CAAC,EAACoV,CAAC,CAAC,IAAExT,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACsB,gBAAgB,CAAC,CAAC,IACphB1wB,CAAC,CAAC,CAAC,CAAC,CAACY,MAAM,EAAC,CAAC,IAAEV,CAAC,CAAC,CAAC,CAAC,CAACU,MAAM,CAAC,IAAEmC,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACsB,gBAAgB,CAAC1wB,CAAC,CAAC,CAAC,CAAC,EAACE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;EAACF,QAAAA,CAAC,GAACA,CAAC,CAAC,CAAC,CAAC,CAAA;EAACE,QAAAA,CAAC,GAACA,CAAC,CAAC,CAAC,CAAC,CAAA;SAAC,QAAM,CAAC,IAAEiB,CAAC,EAAA;EAAC,KAAA;EAAC,IAAA,OAAOA,CAAC,CAAA;KAAC,CAAA;IAAC4B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACsB,gBAAgB,GAAC,UAASzvB,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAOD,CAAC,GAACC,CAAC,GAAC,CAAC,CAAC,GAACD,CAAC,GAACC,CAAC,GAAC,CAAC,GAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,GAAC,UAAS1vB,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAI,CAAC0vB,4CAA4C,GAAC3vB,CAAC,KAAG8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACxC,0BAA0B,IAAEjtB,CAAC,IAAE,EAAE,CAAA;MAAC,IAAI,CAAC2vB,gDAAgD,GAAC9tB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACjJ,uCAAuC,CAAA;KAAC,CAAA;EAAC3kB,EAAAA,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACG,gBAAgB,GAAC,yBAAyB,CAAA;IAAC/tB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC5uB,SAAS,CAACmlB,+BAA+B,GAAC,CAAC,CAAC,CAAA;IAACnkB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC5uB,SAAS,CAAColB,mBAAmB,GAAC,YAAU;EAAC,IAAA,OAAO,IAAI,CAACyJ,4CAA4C,CAAC/nB,QAAQ,EAAE,CAAA;KAAC,CAAA;IACnrB9F,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC5uB,SAAS,CAACssB,uCAAuC,GAAC,CAAC,CAAC,CAAA;IAACtrB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC5uB,SAAS,CAACusB,YAAY,GAAC,YAAU;MAAC,OAAOvrB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACC,GAAG,CAAA;KAAC,CAAA;EAACnnB,EAAAA,IAAI,CAACO,KAAK,KAAGP,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC5uB,SAAS,CAAC8G,QAAQ,GAAC,YAAU;EAAC,IAAA,OAAM,UAAU,GAAC,IAAI,CAAC+nB,4CAA4C,GAAC,GAAG,CAAA;EAAA,GAAC,CAAC,CAAA;IAC/R7tB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACvJ,MAAM,GAAC,UAASnmB,CAAC,EAAC;EAAC,IAAA,IAAGA,CAAC,YAAY8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,IAAE1vB,CAAC,CAACkL,WAAW,KAAGpJ,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,IAAE1vB,CAAC,CAAC4vB,gDAAgD,KAAG9tB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACjJ,uCAAuC,EAAC,OAAOzmB,CAAC,CAAC2vB,4CAA4C,CAAA;EAAC7tB,IAAAA,IAAI,CAACoN,OAAO,CAACK,IAAI,CAAC,wCAAwC,GAACvP,CAAC,GAAC,YAAY,GAAC8B,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAM,oBAAoB,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAChJ,YAAY,GAAC,UAAS1mB,CAAC,EAAC;EAAC,IAAA,OAAO8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACI,6CAA6C,CAAChuB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EACrhB8B,EAAAA,IAAI,CAAC6I,IAAI,CAAColB,uBAAuB,GAAC,+OAA+O,CAAA;IAACjuB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACM,cAAc,GAAC,UAAShwB,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAAC6I,IAAI,CAAColB,uBAAuB,CAACxsB,IAAI,CAACvD,CAAC,CAAC,CAAA;KAAC,CAAA;IAChX8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACO,QAAQ,GAAC,UAASjwB,CAAC,EAAC;EAACA,IAAAA,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACM,cAAc,CAAChwB,CAAC,CAACoE,IAAI,CAAC,GAACtC,IAAI,CAACmlB,EAAE,CAACC,GAAG,CAACC,eAAe,CAACnnB,CAAC,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACG,gBAAgB,CAAA;MAAC,OAAO/tB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACI,6CAA6C,CAAC9vB,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACQ,eAAe,GAAC,UAASlwB,CAAC,EAAC;EAAC8B,IAAAA,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,aAAa,IAAGtN,IAAI,CAACb,MAAM,EAAC,4BAA4B,CAAC,CAAA;MAACjB,CAAC,GAACA,CAAC,YAAYmwB,WAAW,GAACruB,IAAI,CAACmlB,EAAE,CAACC,GAAG,CAACC,eAAe,CAACnnB,CAAC,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACG,gBAAgB,CAAA;MAAC,OAAO/tB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACI,6CAA6C,CAAC9vB,CAAC,CAAC,CAAA;KAAC,CAAA;EAClgB8B,EAAAA,IAAI,CAAC6I,IAAI,CAACylB,iBAAiB,GAAC,oCAAoC,CAAA;IAACtuB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACW,WAAW,GAAC,UAASrwB,CAAC,EAAC;MAACA,CAAC,GAACA,CAAC,CAAC4K,OAAO,CAAC,YAAY,EAAC,EAAE,CAAC,CAAA;MAAC,IAAI3K,CAAC,GAACD,CAAC,CAACswB,KAAK,CAACxuB,IAAI,CAAC6I,IAAI,CAACylB,iBAAiB,CAAC,CAAA;EAACnwB,IAAAA,CAAC,GAACA,CAAC,IAAE6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACM,cAAc,CAAC/vB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACI,6CAA6C,CAAC7vB,CAAC,GAACD,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACG,gBAAgB,CAAC,CAAA;KAAC,CAAA;IAAC/tB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACa,UAAU,GAAC,UAASvwB,CAAC,EAAC;MAAC8B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACG,yBAAyB,CAACtuB,CAAC,EAAC,MAAM,CAAC,KAAGA,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACG,gBAAgB,CAAC,CAAA;MAAC,OAAO/tB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACI,6CAA6C,CAAC9vB,CAAC,CAAC,CAAA;KAAC,CAAA;EACniB8B,EAAAA,IAAI,CAAC6I,IAAI,CAAC6lB,gBAAgB,GAAC,uEAAuE,CAAA;IAAC1uB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACe,UAAU,GAAC,UAASzwB,CAAC,EAAC;MAAC8B,IAAI,CAAC6I,IAAI,CAAC6lB,gBAAgB,CAACjtB,IAAI,CAACmtB,kBAAkB,CAAC1wB,CAAC,CAAC,CAAC,KAAGA,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACG,gBAAgB,CAAC,CAAA;MAAC,OAAO/tB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACI,6CAA6C,CAAC9vB,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACiB,wBAAwB,GAAC,UAAS3wB,CAAC,EAAC;MAAC8B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACG,yBAAyB,CAACtuB,CAAC,EAAC,sBAAsB,CAAC,KAAGA,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACG,gBAAgB,CAAC,CAAA;MAAC,OAAO/tB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACI,6CAA6C,CAAC9vB,CAAC,CAAC,CAAA;KAAC,CAAA;IACxiB8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACkB,eAAe,GAAC,UAAS5wB,CAAC,EAAC;MAAC8B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACG,yBAAyB,CAACtuB,CAAC,EAAC,iBAAiB,CAAC,KAAGA,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACG,gBAAgB,CAAC,CAAA;MAAC,OAAO/tB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACI,6CAA6C,CAAC9vB,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACmB,UAAU,GAAC,UAAS7wB,CAAC,EAAC;EAAC8B,IAAAA,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACG,yBAAyB,CAACtuB,CAAC,EAAC,MAAM,CAAC,IAAE8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACoB,kBAAkB,CAAC9wB,CAAC,CAAC,KAAGA,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACG,gBAAgB,CAAC,CAAA;MAAC,OAAO/tB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACI,6CAA6C,CAAC9vB,CAAC,CAAC,CAAA;KAAC,CAAA;IACle8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACoB,kBAAkB,GAAC,UAAS9wB,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAACD,CAAC,CAACsJ,OAAO,CAAC,GAAG,CAAC,CAAA;EAAC,IAAA,CAAC,GAACrJ,CAAC,KAAGD,CAAC,GAACA,CAAC,CAAC8Y,SAAS,CAAC,CAAC,EAAC7Y,CAAC,CAAC,CAAC,CAAA;EAACA,IAAAA,CAAC,GAACD,CAAC,CAACswB,KAAK,CAAC,aAAa,CAAC,CAAA;EAAC,IAAA,IAAG,CAACrwB,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;MAAC,IAAG,CAAC,GAACA,CAAC,CAACN,MAAM,EAAC,OAAM,CAAC,CAAC,CAAA;MAACK,CAAC,GAACA,CAAC,CAACswB,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAG,CAACtwB,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;MAAC,IAAG;QAAC0wB,kBAAkB,CAAC1wB,CAAC,CAAC,CAAA;OAAC,CAAA,OAAME,CAAC,EAAC;EAAC,MAAA,OAAM,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAM,oCAAoC,CAACqD,IAAI,CAACvD,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACqB,UAAU,GAAC,UAAS/wB,CAAC,EAAC;MAAC8B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACG,yBAAyB,CAACtuB,CAAC,EAAC,QAAQ,CAAC,KAAGA,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACG,gBAAgB,CAAC,CAAA;MAAC,OAAO/tB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACI,6CAA6C,CAAC9vB,CAAC,CAAC,CAAA;KAAC,CAAA;IACrgB8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACsB,0BAA0B,GAAC,UAAShxB,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACuB,qBAAqB,CAAC,kCAAkC,EAACjxB,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACwB,2BAA2B,GAAC,UAASlxB,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACuB,qBAAqB,CAAC,+BAA+B,EAACjxB,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACyB,wBAAwB,GAAC,UAASnxB,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACuB,qBAAqB,CAAC,sCAAsC,EAACjxB,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EACxb6B,EAAAA,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACuB,qBAAqB,GAAC,UAASjxB,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,CAACF,CAAC,GAACA,CAAC,CAACwtB,IAAI,CAACvtB,CAAC,CAAC,KAAGD,CAAC,GAACA,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,IAAE,CAACE,CAAC,YAAY4B,IAAI,CAAC4jB,MAAM,CAACE,KAAK,GAAC,CAAC9jB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACjmB,CAAC,CAAC,CAAC,GAACA,CAAC,CAAC2M,GAAG,CAAC,UAAS7M,CAAC,EAAC;QAAC,OAAO8B,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,CAAA;OAAC,CAAC,EAAEsJ,OAAO,CAACtJ,CAAC,CAAC,KAAGC,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACG,gBAAgB,CAAC,IAAE5vB,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACG,gBAAgB,CAAA;MAAC,OAAO/tB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACI,6CAA6C,CAAC7vB,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC0B,sBAAsB,GAAC,UAASpxB,CAAC,EAAC;EAAC,IAAA,OAAO8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACI,6CAA6C,CAAChuB,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAAC7G,MAAM,CAACnmB,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAChhB8B,EAAAA,IAAI,CAAC6I,IAAI,CAAC0mB,iBAAiB,GAAC,kDAAkD,CAAA;IAACvvB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC4B,gBAAgB,GAACxvB,IAAI,CAAC6I,IAAI,CAAC0mB,iBAAiB,CAAA;IAACvvB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC6B,QAAQ,GAAC,UAASvxB,CAAC,EAAC;MAAC,IAAGA,CAAC,YAAY8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,EAAC,OAAO1vB,CAAC,CAAA;EAACA,IAAAA,CAAC,GAAC,QAAQ,IAAA,OAAA,CAASA,CAAC,CAAA,IAAEA,CAAC,CAACimB,+BAA+B,GAACjmB,CAAC,CAACkmB,mBAAmB,EAAE,GAAC/lB,MAAM,CAACH,CAAC,CAAC,CAAA;EAAC8B,IAAAA,IAAI,CAAC6I,IAAI,CAAC0mB,iBAAiB,CAAC9tB,IAAI,CAACvD,CAAC,CAAC,KAAGA,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACG,gBAAgB,CAAC,CAAA;MAAC,OAAO/tB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACI,6CAA6C,CAAC9vB,CAAC,CAAC,CAAA;KAAC,CAAA;IAChd8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC8B,uBAAuB,GAAC,UAASxxB,CAAC,EAACC,CAAC,EAAC;MAAC,IAAGD,CAAC,YAAY8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,EAAC,OAAO1vB,CAAC,CAAA;EAACA,IAAAA,CAAC,GAAC,QAAQ,IAAA,OAAA,CAASA,CAAC,CAAA,IAAEA,CAAC,CAACimB,+BAA+B,GAACjmB,CAAC,CAACkmB,mBAAmB,EAAE,GAAC/lB,MAAM,CAACH,CAAC,CAAC,CAAA;EAAC,IAAA,IAAGC,CAAC,IAAE,SAAS,CAACsD,IAAI,CAACvD,CAAC,CAAC,KAAGC,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACW,WAAW,CAACrwB,CAAC,CAAC,EAACC,CAAC,CAACimB,mBAAmB,EAAE,IAAElmB,CAAC,CAAC,EAAC,OAAOC,CAAC,CAAA;EAAC6B,IAAAA,IAAI,CAACoN,OAAO,CAACE,MAAM,CAACtN,IAAI,CAAC6I,IAAI,CAAC0mB,iBAAiB,CAAC9tB,IAAI,CAACvD,CAAC,CAAC,EAAC,wCAAwC,EAACA,CAAC,CAAC,KAAGA,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACG,gBAAgB,CAAC,CAAA;MAAC,OAAO/tB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACI,6CAA6C,CAAC9vB,CAAC,CAAC,CAAA;KAAC,CAAA;IACrf8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACjJ,uCAAuC,GAAC,EAAE,CAAA;IAAC3kB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACI,6CAA6C,GAAC,UAAS9vB,CAAC,EAAC;EAAC,IAAA,OAAO,IAAI8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC5tB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACxC,0BAA0B,EAACltB,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC+B,WAAW,GAAC3vB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACI,6CAA6C,CAAC,aAAa,CAAC,CAAA;IAAChuB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACxC,0BAA0B,GAAC,EAAE,CAAA;EAACprB,EAAAA,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,GAAC,YAAU;MAAC,IAAI,CAACC,8CAA8C,GAAC,EAAE,CAAA;MAAC,IAAI,CAACC,kDAAkD,GAAC9vB,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACjL,uCAAuC,CAAA;KAAC,CAAA;IAAC3kB,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAAC5wB,SAAS,CAACmlB,+BAA+B,GAAC,CAAC,CAAC,CAAA;IAACnkB,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACjL,uCAAuC,GAAC,EAAE,CAAA;IAC9rB3kB,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAAChL,YAAY,GAAC,UAAS1mB,CAAC,EAAC;MAACA,CAAC,GAAC8B,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,CAAA;EAAC,IAAA,IAAG,CAAC,KAAGA,CAAC,CAACL,MAAM,EAAC,OAAOmC,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACrL,KAAK,CAAA;MAACvkB,IAAI,CAACoN,OAAO,CAACE,MAAM,CAACtN,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACE,QAAQ,CAACruB,CAAC,EAAC,GAAG,CAAC,EAAC,6CAA6C,GAACA,CAAC,CAAC,CAAA;MAAC8B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAACtN,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAAChhB,QAAQ,CAACnN,CAAC,EAAC,GAAG,CAAC,EAAC,iFAAiF,GAACA,CAAC,CAAC,CAAA;MAAC,OAAO8B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACG,+CAA+C,CAAC7xB,CAAC,CAAC,CAAA;KAAC,CAAA;IAClc8B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAAC5wB,SAAS,CAAColB,mBAAmB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACyL,8CAA8C,CAAA;KAAC,CAAA;EAAC7vB,EAAAA,IAAI,CAACO,KAAK,KAAGP,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAAC5wB,SAAS,CAAC8G,QAAQ,GAAC,YAAU;EAAC,IAAA,OAAM,YAAY,GAAC,IAAI,CAAC+pB,8CAA8C,GAAC,GAAG,CAAA;EAAA,GAAC,CAAC,CAAA;IACpQ7vB,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACvL,MAAM,GAAC,UAASnmB,CAAC,EAAC;EAAC,IAAA,IAAGA,CAAC,YAAY8B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,IAAE1xB,CAAC,CAACkL,WAAW,KAAGpJ,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,IAAE1xB,CAAC,CAAC4xB,kDAAkD,KAAG9vB,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACjL,uCAAuC,EAAC,OAAOzmB,CAAC,CAAC2xB,8CAA8C,CAAA;EAAC7vB,IAAAA,IAAI,CAACoN,OAAO,CAACK,IAAI,CAAC,0CAA0C,GAACvP,CAAC,GAAC,YAAY,GAAC8B,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAM,sBAAsB,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACG,+CAA+C,GAAC,UAAS7xB,CAAC,EAAC;MAAC,OAAO,IAAI8B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,EAAE1K,CAAAA,qCAAqC,CAAChnB,CAAC,CAAC,CAAA;KAAC,CAAA;IAC/iB8B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAAC5wB,SAAS,CAACkmB,qCAAqC,GAAC,UAAShnB,CAAC,EAAC;MAAC,IAAI,CAAC2xB,8CAA8C,GAAC3xB,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACrL,KAAK,GAACvkB,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACG,+CAA+C,CAAC,EAAE,CAAC,CAAA;EAAC/vB,EAAAA,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAAC7B,gBAAgB,GAAC,WAAW,CAAA;IACrS/tB,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACnjB,MAAM,GAAC,UAASvO,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,EAAE;QAACC,CAAC,CAAA;MAAC,KAAIA,CAAC,IAAIF,CAAC,EAAC;EAAC,MAAA,IAAG,CAAC,kBAAkB,CAACuD,IAAI,CAACrD,CAAC,CAAC,EAAC,MAAM2C,KAAK,CAAC,uCAAuC,GAAC3C,CAAC,CAAC,CAAA;EAAC,MAAA,IAAIE,CAAC,GAACJ,CAAC,CAACE,CAAC,CAAC,CAAA;QAAC,IAAI,IAAEE,CAAC,KAAGA,CAAC,GAACS,KAAK,CAACiH,OAAO,CAAC1H,CAAC,CAAC,GAAC0B,IAAI,CAACiT,KAAK,CAAClI,GAAG,CAACzM,CAAC,EAAC0B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACI,sBAAsB,CAAC,CAAChrB,IAAI,CAAC,GAAG,CAAC,GAAChF,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACI,sBAAsB,CAAC1xB,CAAC,CAAC,EAACH,CAAC,IAAEC,CAAC,GAAC,GAAG,GAACE,CAAC,GAAC,GAAG,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOH,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACG,+CAA+C,CAAC5xB,CAAC,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACrL,KAAK,CAAA;KAAC,CAAA;IAC3avkB,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACI,sBAAsB,GAAC,UAAS9xB,CAAC,EAAC;EAAC,IAAA,IAAGA,CAAC,YAAY8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,EAAC,OAAM,OAAO,GAAC5tB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACvJ,MAAM,CAACnmB,CAAC,CAAC,CAAC4K,OAAO,CAAC,IAAI,EAAC,KAAK,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAC,MAAM,CAAC,GAAC,IAAI,CAAA;EAAC5K,IAAAA,CAAC,GAACA,CAAC,YAAY8B,IAAI,CAAC4jB,MAAM,CAACE,KAAK,GAAC9jB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACK,4BAA4B,CAAC5xB,MAAM,CAACH,CAAC,CAAC,CAAC,CAAA;MAAC,IAAG,OAAO,CAACuD,IAAI,CAACvD,CAAC,CAAC,EAAC,MAAM,IAAI8B,IAAI,CAACoN,OAAO,CAAC2E,cAAc,CAAC,sCAAsC,EAAC,CAAC7T,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOA,CAAC,CAAA;KAAC,CAAA;IAC5Z8B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACK,4BAA4B,GAAC,UAAS/xB,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAACD,CAAC,CAAC4K,OAAO,CAAC9I,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACM,aAAa,EAAC,IAAI,CAAC,CAACpnB,OAAO,CAAC9I,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACM,aAAa,EAAC,IAAI,CAAC,CAACpnB,OAAO,CAAC9I,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACO,OAAO,EAAC,KAAK,CAAC,CAAA;EAAC,IAAA,IAAGnwB,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACQ,SAAS,CAAC3uB,IAAI,CAACtD,CAAC,CAAC,EAAC;EAAC,MAAA,IAAG6B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACS,WAAW,CAAC5uB,IAAI,CAACvD,CAAC,CAAC,EAAC,OAAO8B,IAAI,CAACoN,OAAO,CAACK,IAAI,CAAC,wCAAwC,GAACvP,CAAC,CAAC,EAAC8B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAAC7B,gBAAgB,CAAA;EAAC,MAAA,IAAG,CAAC/tB,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACU,kBAAkB,CAACpyB,CAAC,CAAC,EAAC,OAAO8B,IAAI,CAACoN,OAAO,CAACK,IAAI,CAAC,8CAA8C,GACpgBvP,CAAC,CAAC,EAAC8B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAAC7B,gBAAgB,CAAA;EAAC,MAAA,IAAG,CAAC/tB,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACW,0BAA0B,CAACryB,CAAC,CAAC,EAAC,OAAO8B,IAAI,CAACoN,OAAO,CAACK,IAAI,CAAC,+FAA+F,GAACvP,CAAC,CAAC,EAAC8B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAAC7B,gBAAgB,CAAA;EAAA,KAAC,MAAK,OAAO/tB,IAAI,CAACoN,OAAO,CAACK,IAAI,CAAC,2BAA2B,GAACzN,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACY,oBAAoB,GAAC,8BAA8B,GAACtyB,CAAC,CAAC,EAAC8B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAAC7B,gBAAgB,CAAA;MAAC,OAAO/tB,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACa,YAAY,CAACvyB,CAAC,CAAC,CAAA;KAAC,CAAA;IACpd8B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACU,kBAAkB,GAAC,UAASpyB,CAAC,EAAC;MAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,CAAC,EAACC,CAAC,GAAC,CAAC,CAAC,EAACE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,CAAC,CAACL,MAAM,EAACS,CAAC,EAAE,EAAC;EAAC,MAAA,IAAInC,CAAC,GAAC+B,CAAC,CAACqK,MAAM,CAACjK,CAAC,CAAC,CAAA;QAAC,GAAG,IAAEnC,CAAC,IAAEiC,CAAC,GAACD,CAAC,GAAC,CAACA,CAAC,GAAC,GAAG,IAAEhC,CAAC,IAAEgC,CAAC,KAAGC,CAAC,GAAC,CAACA,CAAC,CAAC,CAAA;EAAA,KAAA;MAAC,OAAOD,CAAC,IAAEC,CAAC,CAAA;KAAC,CAAA;IAAC4B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACW,0BAA0B,GAAC,UAASryB,CAAC,EAAC;MAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,CAAC,EAACC,CAAC,GAAC,iBAAiB,EAACE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,CAAC,CAACL,MAAM,EAACS,CAAC,EAAE,EAAC;EAAC,MAAA,IAAInC,CAAC,GAAC+B,CAAC,CAACqK,MAAM,CAACjK,CAAC,CAAC,CAAA;QAAC,IAAG,GAAG,IAAEnC,CAAC,EAAC;EAAC,QAAA,IAAGgC,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;UAACA,CAAC,GAAC,CAAC,CAAC,CAAA;EAAA,OAAC,MAAK,IAAG,GAAG,IAAEhC,CAAC,EAAC;EAAC,QAAA,IAAG,CAACgC,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;UAACA,CAAC,GAAC,CAAC,CAAC,CAAA;EAAA,OAAC,MAAK,IAAG,CAACA,CAAC,IAAE,CAACC,CAAC,CAACqD,IAAI,CAACtF,CAAC,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOgC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACY,oBAAoB,GAAC,8BAA8B,CAAA;IAC9cxwB,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACQ,SAAS,GAAC,IAAI1wB,MAAM,CAAC,GAAG,GAACM,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACY,oBAAoB,GAAC,IAAI,CAAC,CAAA;EAACxwB,EAAAA,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACO,OAAO,GAAC,kFAAkF,CAAA;EAACnwB,EAAAA,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACc,kBAAkB,GAAC,0HAA0H,CAACpxB,KAAK,CAAC,GAAG,CAAC,CAAA;EACvXU,EAAAA,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACM,aAAa,GAAC,IAAIxwB,MAAM,CAAC,MAAM,GAACM,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACc,kBAAkB,CAAC1rB,IAAI,CAAC,GAAG,CAAC,GAAC,gCAAgC,EAAC,GAAG,CAAC,CAAA;EAAChF,EAAAA,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACS,WAAW,GAAC,MAAM,CAAA;IAACrwB,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACa,YAAY,GAAC,UAASvyB,CAAC,EAAC;MAAC,OAAOA,CAAC,CAAC4K,OAAO,CAAC9I,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACO,OAAO,EAAC,UAASjyB,CAAC,EAACE,CAAC,EAACE,CAAC,EAACnC,CAAC,EAAC;QAAC,IAAIgC,CAAC,GAAC,EAAE,CAAA;EAACG,MAAAA,CAAC,GAACA,CAAC,CAACwK,OAAO,CAAC,gBAAgB,EAAC,UAAS5K,CAAC,EAACE,CAAC,EAACE,CAAC,EAAC;EAACH,QAAAA,CAAC,GAACC,CAAC,CAAA;EAAC,QAAA,OAAOE,CAAC,CAAA;EAAA,OAAC,CAAC,CAAA;EAACJ,MAAAA,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC6B,QAAQ,CAACnxB,CAAC,CAAC,CAAC8lB,mBAAmB,EAAE,CAAA;QAAC,OAAOhmB,CAAC,GAACD,CAAC,GAACD,CAAC,GAACC,CAAC,GAAChC,CAAC,CAAA;EAAA,KAAC,CAAC,CAAA;KAAC,CAAA;IAC5a6D,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACnb,MAAM,GAAC,UAASvW,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,EAAE;EAACC,MAAAA,CAAC,GAAC,SAAFA,CAAC,CAAUF,CAAC,EAAC;EAACa,QAAAA,KAAK,CAACiH,OAAO,CAAC9H,CAAC,CAAC,GAAC8B,IAAI,CAACiT,KAAK,CAACpI,OAAO,CAAC3M,CAAC,EAACE,CAAC,CAAC,GAACD,CAAC,IAAE6B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACvL,MAAM,CAACnmB,CAAC,CAAC,CAAA;SAAC,CAAA;MAAC8B,IAAI,CAACiT,KAAK,CAACpI,OAAO,CAAC1D,SAAS,EAAC/I,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOD,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACG,+CAA+C,CAAC5xB,CAAC,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACrL,KAAK,CAAA;KAAC,CAAA;EAACvkB,EAAAA,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,GAAC,YAAU;MAAC,IAAI,CAACC,mDAAmD,GAAC,EAAE,CAAA;MAAC,IAAI,CAACC,wDAAwD,GAAC7wB,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAAChM,uCAAuC,CAAA;KAAC,CAAA;IAAC3kB,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAAC3xB,SAAS,CAACmlB,+BAA+B,GAAC,CAAC,CAAC,CAAA;IAACnkB,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAAChM,uCAAuC,GAAC,EAAE,CAAA;IAC7nB3kB,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAACG,UAAU,GAAC,UAAS5yB,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG6B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAAChhB,QAAQ,CAACnN,CAAC,EAAC,GAAG,CAAC,EAAC,MAAM6C,KAAK,CAAC,oCAAoC,GAAC7C,CAAC,CAAC,CAAA;MAAC,IAAIE,CAAC,GAACF,CAAC,CAAC4K,OAAO,CAAC,uCAAuC,EAAC,EAAE,CAAC,CAAA;EAAC,IAAA,IAAG,CAAC,oCAAoC,CAACrH,IAAI,CAACrD,CAAC,CAAC,EAAC,MAAM2C,KAAK,CAAC,0EAA0E,GAAC7C,CAAC,CAAC,CAAA;EAAC,IAAA,IAAG,CAAC8B,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAACI,oBAAoB,CAAC3yB,CAAC,CAAC,EAAC,MAAM2C,KAAK,CAAC,+CAA+C,GAAC7C,CAAC,CAAC,CAAA;EAACC,IAAAA,CAAC,YAAY6B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,KAAGzxB,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACnjB,MAAM,CAACtO,CAAC,CAAC,CAAC,CAAA;MAC5gBD,CAAC,GAACA,CAAC,GAAC,GAAG,GAAC8B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACvL,MAAM,CAAClmB,CAAC,CAAC,CAAC2K,OAAO,CAAC,IAAI,EAAC,OAAO,CAAC,GAAC,GAAG,CAAA;MAAC,OAAO9I,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAACK,oDAAoD,CAAC9yB,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAACI,oBAAoB,GAAC,UAAS7yB,CAAC,EAAC;MAAC,KAAI,IAAIC,CAAC,GAAC;EAAC,QAAA,GAAG,EAAC,GAAG;EAAC,QAAA,GAAG,EAAC,GAAA;EAAG,OAAC,EAACC,CAAC,GAAC,EAAE,EAACE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,CAAC,CAACL,MAAM,EAACS,CAAC,EAAE,EAAC;EAAC,MAAA,IAAInC,CAAC,GAAC+B,CAAC,CAACI,CAAC,CAAC,CAAA;EAAC,MAAA,IAAGH,CAAC,CAAChC,CAAC,CAAC,EAACiC,CAAC,CAACN,IAAI,CAACK,CAAC,CAAChC,CAAC,CAAC,CAAC,CAAC,KAAK,IAAG6D,IAAI,CAAC2K,MAAM,CAACU,QAAQ,CAAClN,CAAC,EAAChC,CAAC,CAAC,IAAEiC,CAAC,CAACR,GAAG,EAAE,IAAEzB,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAO,CAAC,IAAEiC,CAAC,CAACP,MAAM,CAAA;KAAC,CAAA;IAClXmC,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAAClc,MAAM,GAAC,UAASvW,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,EAAE;EAACC,MAAAA,CAAC,GAAC,SAAFA,CAAC,CAAUF,CAAC,EAAC;EAACa,QAAAA,KAAK,CAACiH,OAAO,CAAC9H,CAAC,CAAC,GAAC8B,IAAI,CAACiT,KAAK,CAACpI,OAAO,CAAC3M,CAAC,EAACE,CAAC,CAAC,GAACD,CAAC,IAAE6B,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAACtM,MAAM,CAACnmB,CAAC,CAAC,CAAA;SAAC,CAAA;MAAC8B,IAAI,CAACiT,KAAK,CAACpI,OAAO,CAAC1D,SAAS,EAAC/I,CAAC,CAAC,CAAA;MAAC,OAAO4B,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAACK,oDAAoD,CAAC7yB,CAAC,CAAC,CAAA;KAAC,CAAA;IAC3Q6B,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAAC/L,YAAY,GAAC,UAAS1mB,CAAC,EAAC;MAACA,CAAC,GAAC8B,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,CAAA;EAAC,IAAA,IAAG,CAAC,KAAGA,CAAC,CAACL,MAAM,EAAC,OAAOmC,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAACpM,KAAK,CAAA;MAACvkB,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,CAACtN,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAAChhB,QAAQ,CAACnN,CAAC,EAAC,GAAG,CAAC,EAAC,iDAAiD,GAACA,CAAC,CAAC,CAAA;MAAC,OAAO8B,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAACK,oDAAoD,CAAC9yB,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAAC3xB,SAAS,CAAColB,mBAAmB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACwM,mDAAmD,CAAA;KAAC,CAAA;EAChd5wB,EAAAA,IAAI,CAACO,KAAK,KAAGP,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAAC3xB,SAAS,CAAC8G,QAAQ,GAAC,YAAU;EAAC,IAAA,OAAM,iBAAiB,GAAC,IAAI,CAAC8qB,mDAAmD,GAAC,GAAG,CAAA;EAAA,GAAC,CAAC,CAAA;IAC1J5wB,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAACtM,MAAM,GAAC,UAASnmB,CAAC,EAAC;EAAC,IAAA,IAAGA,CAAC,YAAY8B,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,IAAEzyB,CAAC,CAACkL,WAAW,KAAGpJ,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,IAAEzyB,CAAC,CAAC2yB,wDAAwD,KAAG7wB,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAAChM,uCAAuC,EAAC,OAAOzmB,CAAC,CAAC0yB,mDAAmD,CAAA;EAAC5wB,IAAAA,IAAI,CAACoN,OAAO,CAACK,IAAI,CAAC,+CAA+C,GAACvP,CAAC,GAAC,YAAY,GAAC8B,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAM,2BAA2B,CAAA;KAAC,CAAA;IAC9b8B,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAACK,oDAAoD,GAAC,UAAS9yB,CAAC,EAAC;MAAC,OAAO,IAAI8B,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,EAAEzL,CAAAA,qCAAqC,CAAChnB,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAAC3xB,SAAS,CAACkmB,qCAAqC,GAAC,UAAShnB,CAAC,EAAC;MAAC,IAAI,CAAC0yB,mDAAmD,GAAC1yB,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAACpM,KAAK,GAACvkB,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAACK,oDAAoD,CAAC,EAAE,CAAC,CAAA;EAAChxB,EAAAA,IAAI,CAACixB,IAAI,GAAC,EAAE,CAAA;EAACjxB,EAAAA,IAAI,CAACixB,IAAI,CAACC,SAAS,GAAC,EAAE,CAAA;IAAClxB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,GAAC,EAAE,CAAA;IAACnxB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACC,yBAAyB,GAAC,YAAU;MAAC,IAAIlzB,CAAC,GAAC8B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACE,aAAa,EAAE,CAAA;MAAC,OAAOnzB,CAAC,KAAGA,CAAC,GAACA,CAAC,CAACgzB,SAAS,CAAC,GAAChzB,CAAC,GAAC,EAAE,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACE,aAAa,GAAC,YAAU;EAAC,IAAA,OAAOrxB,IAAI,CAACb,MAAM,CAACmyB,SAAS,CAAA;KAAC,CAAA;EAACtxB,EAAAA,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACI,UAAU,GAACvxB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACC,yBAAyB,EAAE,CAAA;IAACpxB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACK,YAAY,GAAC,UAAStzB,CAAC,EAAC;MAAC8B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACI,UAAU,GAACrzB,CAAC,IAAE8B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACC,yBAAyB,EAAE,CAAA;KAAC,CAAA;IAC37BpxB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACM,YAAY,GAAC,YAAU;MAAC,OAAOzxB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACI,UAAU,CAAA;KAAC,CAAA;IAACvxB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,GAAC,UAASxzB,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC6B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACM,YAAY,EAAE,CAAA;MAAC,OAAOzxB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAAChhB,QAAQ,CAAClN,CAAC,EAACD,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACQ,wBAAwB,GAAC,UAASzzB,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC6B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACM,YAAY,EAAE,CAAA;MAAC,OAAOzxB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACoB,uBAAuB,CAACtvB,CAAC,EAACD,CAAC,CAAC,CAAA;KAAC,CAAA;IAC/Y8B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACS,oBAAoB,GAAC,UAAS1zB,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIC,CAAC,GAAC,wCAAwC,EAACC,CAAC,GAAC,EAAE,EAACE,CAAC,EAACA,CAAC,GAACH,CAAC,CAACutB,IAAI,CAACxtB,CAAC,CAAC,GAAA;QAAEE,CAAC,CAACN,IAAI,CAAC,CAACQ,CAAC,CAAC,CAAC,CAAC,EAACA,CAAC,CAAC,CAAC,CAAC,EAACA,CAAC,CAAC,CAAC,CAAC,IAAE,KAAK,CAAC,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOF,CAAC,CAAA;KAAC,CAAA;IAAC4B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,GAAC,EAAE,CAAA;IAAC7xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACC,WAAW,GAAC,YAAU;MAAC,OAAO9xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,OAAO,CAAC,CAAA;KAAC,CAAA;IAAC1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACE,QAAQ,GAAC,YAAU;MAAC,OAAO/xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,SAAS,CAAC,IAAE1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,MAAM,CAAC,CAAA;KAAC,CAAA;IAAC1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACG,cAAc,GAAC,YAAU;MAAC,OAAOhyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,MAAM,CAAC,CAAA;KAAC,CAAA;IAAC1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACI,kBAAkB,GAAC,YAAU;MAAC,OAAOjyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,MAAM,CAAC,CAAA;KAAC,CAAA;IAClrB1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACK,mBAAmB,GAAC,YAAU;MAAC,OAAOlyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,KAAK,CAAC,CAAA;KAAC,CAAA;IAAC1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACM,aAAa,GAAC,YAAU;MAAC,OAAOnyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,SAAS,CAAC,IAAE1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,OAAO,CAAC,CAAA;KAAC,CAAA;IACnR1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACO,YAAY,GAAC,YAAU;MAAC,OAAOpyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,QAAQ,CAAC,IAAE,EAAE1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACQ,YAAY,EAAE,IAAEryB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACS,WAAW,EAAE,IAAEtyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACC,WAAW,EAAE,IAAE9xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACG,cAAc,EAAE,IAAEhyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACI,kBAAkB,EAAE,IAAEjyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACK,mBAAmB,EAAE,IAAElyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACM,aAAa,EAAE,IAAEnyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACU,MAAM,EAAE,IAAEvyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,SAAS,CAAC,CAAC,CAAA;KAAC,CAAA;IAC5gB1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACS,WAAW,GAAC,YAAU;MAAC,OAAOtyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,OAAO,CAAC,CAAA;KAAC,CAAA;IAAC1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACW,gBAAgB,GAAC,YAAU;EAAC,IAAA,OAAM,CAACxyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,MAAM,CAAC,IAAE1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,QAAQ,CAAC,KAAG,CAAC1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACO,YAAY,EAAE,IAAE,CAACpyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACQ,YAAY,EAAE,IAAE,CAACryB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACS,WAAW,EAAE,IAAE,CAACtyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACM,aAAa,EAAE,IAAEnyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,aAAa,CAAC,CAAA;KAAC,CAAA;IAC3f1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACQ,YAAY,GAAC,YAAU;EAAC,IAAA,OAAM,CAACryB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,QAAQ,CAAC,IAAE1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,OAAO,CAAC,KAAG,CAAC1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACG,cAAc,EAAE,CAAA;KAAC,CAAA;IAAChyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACY,oBAAoB,GAAC,YAAU;MAAC,OAAOzyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,SAAS,CAAC,IAAE,EAAE1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACa,QAAQ,EAAE,IAAE1yB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACc,SAAS,EAAE,IAAE3yB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACe,OAAO,EAAE,IAAE5yB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACU,MAAM,EAAE,CAAC,CAAA;KAAC,CAAA;EACvevyB,EAAAA,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACe,OAAO,GAAC5yB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACC,WAAW,CAAA;EAAC9xB,EAAAA,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACgB,IAAI,GAAC7yB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACE,QAAQ,CAAA;EAAC/xB,EAAAA,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACiB,MAAM,GAAC9yB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACG,cAAc,CAAA;EAAChyB,EAAAA,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACkB,cAAc,GAAC/yB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACI,kBAAkB,CAAA;EAACjyB,EAAAA,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACmB,eAAe,GAAChzB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACK,mBAAmB,CAAA;EAAClyB,EAAAA,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACc,SAAS,GAAC3yB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACM,aAAa,CAAA;EACrenyB,EAAAA,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACoB,QAAQ,GAACjzB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACO,YAAY,CAAA;EAACpyB,EAAAA,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACqB,OAAO,GAAClzB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACS,WAAW,CAAA;EAACtyB,EAAAA,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACsB,YAAY,GAACnzB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACW,gBAAgB,CAAA;EAACxyB,EAAAA,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACa,QAAQ,GAAC1yB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACQ,YAAY,CAAA;EAACryB,EAAAA,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACuB,gBAAgB,GAACpzB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACY,oBAAoB,CAAA;IAACzyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACU,MAAM,GAAC,YAAU;MAAC,OAAOvyB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,MAAM,CAAC,CAAA;KAAC,CAAA;IACjgB1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACwB,UAAU,GAAC,YAAU;MAAC,SAASn1B,CAAC,CAACA,CAAC,EAAC;QAACA,CAAC,GAAC8B,IAAI,CAACiT,KAAK,CAACY,IAAI,CAAC3V,CAAC,EAACI,CAAC,CAAC,CAAA;EAAC,MAAA,OAAOF,CAAC,CAACF,CAAC,CAAC,IAAE,EAAE,CAAA;EAAA,KAAA;MAAC,IAAIC,CAAC,GAAC6B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACM,YAAY,EAAE,CAAA;MAAC,IAAGzxB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACgB,IAAI,EAAE,EAAC,OAAO7yB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACyB,aAAa,CAACn1B,CAAC,CAAC,CAAA;EAACA,IAAAA,CAAC,GAAC6B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACS,oBAAoB,CAACzzB,CAAC,CAAC,CAAA;MAAC,IAAIC,CAAC,GAAC,EAAE,CAAA;MAAC4B,IAAI,CAACiT,KAAK,CAACpI,OAAO,CAAC1M,CAAC,EAAC,UAASD,CAAC,EAAC;QAACE,CAAC,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC,GAACA,CAAC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAC,CAAC,CAAA;EAAC,IAAA,IAAII,CAAC,GAAC0B,IAAI,CAACyH,OAAO,CAACzH,IAAI,CAAC2K,MAAM,CAACe,WAAW,EAACtN,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO4B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACe,OAAO,EAAE,GAAC10B,CAAC,CAAC,CAAC,SAAS,EAAC,OAAO,CAAC,CAAC,GAAC8B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACiB,MAAM,EAAE,GAAC50B,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAC7f8B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACkB,cAAc,EAAE,GAAC70B,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAC8B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACa,QAAQ,EAAE,GAACx0B,CAAC,CAAC,CAAC,QAAQ,EAAC,OAAO,EAAC,gBAAgB,CAAC,CAAC,GAAC,CAACC,CAAC,GAACA,CAAC,CAAC,CAAC,CAAC,KAAGA,CAAC,CAAC,CAAC,CAAC,IAAE,EAAE,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAAC0B,iBAAiB,GAAC,UAASr1B,CAAC,EAAC;MAAC,OAAO,CAAC,IAAE8B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACqB,eAAe,CAAC1tB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACwB,UAAU,EAAE,EAACn1B,CAAC,CAAC,CAAA;KAAC,CAAA;IAC/S8B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACyB,aAAa,GAAC,UAASp1B,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAAC,gBAAgB,CAACutB,IAAI,CAACxtB,CAAC,CAAC,CAAA;MAAC,IAAGC,CAAC,IAAEA,CAAC,CAAC,CAAC,CAAC,EAAC,OAAOA,CAAC,CAAC,CAAC,CAAC,CAAA;EAACA,IAAAA,CAAC,GAAC,EAAE,CAAA;EAAC,IAAA,IAAIC,CAAC,GAAC,iBAAiB,CAACstB,IAAI,CAACxtB,CAAC,CAAC,CAAA;MAAC,IAAGE,CAAC,IAAEA,CAAC,CAAC,CAAC,CAAC,EAAC,IAAGF,CAAC,GAAC,kBAAkB,CAACwtB,IAAI,CAACxtB,CAAC,CAAC,EAAC,KAAK,IAAEE,CAAC,CAAC,CAAC,CAAC,EAAA;QAAC,IAAGF,CAAC,IAAEA,CAAC,CAAC,CAAC,CAAC,EAAC,QAAOA,CAAC,CAAC,CAAC,CAAC;EAAE,QAAA,KAAK,KAAK;EAACC,UAAAA,CAAC,GAAC,KAAK,CAAA;EAAC,UAAA,MAAA;EAAM,QAAA,KAAK,KAAK;EAACA,UAAAA,CAAC,GAAC,KAAK,CAAA;EAAC,UAAA,MAAA;EAAM,QAAA,KAAK,KAAK;EAACA,UAAAA,CAAC,GAAC,MAAM,CAAA;EAAC,UAAA,MAAA;EAAM,QAAA,KAAK,KAAK;EAACA,UAAAA,CAAC,GAAC,MAAM,CAAA;SAAC,MAAKA,CAAC,GAAC,KAAK,CAAA;EAAC,KAAA,MAAKA,CAAC,GAACC,CAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOD,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,GAAC,YAAU;MAAC,IAAI,CAACC,6CAA6C,GAAC,EAAE,CAAA;MAAC,IAAI,CAACC,iDAAiD,GAAC1zB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAAC7O,uCAAuC,CAAA;MAAC,IAAI,CAACgP,IAAI,GAAC,IAAI,CAAA;KAAC,CAAA;IAAC3zB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACI,qBAAqB,GAAC5zB,IAAI,CAACO,KAAK,CAAA;IAACP,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACK,uBAAuB,GAAC,CAAC,CAAC,CAAA;IAAC7zB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACx0B,SAAS,CAACssB,uCAAuC,GAAC,CAAC,CAAC,CAAA;IAACtrB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACx0B,SAAS,CAACusB,YAAY,GAAC,YAAU;MAAC,OAAO,IAAI,CAACoI,IAAI,CAAA;KAAC,CAAA;IACzyB3zB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACx0B,SAAS,CAACmlB,+BAA+B,GAAC,CAAC,CAAC,CAAA;IAACnkB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACx0B,SAAS,CAAColB,mBAAmB,GAAC,YAAU;EAAC,IAAA,OAAO,IAAI,CAACqP,6CAA6C,CAAC3tB,QAAQ,EAAE,CAAA;KAAC,CAAA;EAAC9F,EAAAA,IAAI,CAACO,KAAK,KAAGP,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACx0B,SAAS,CAAC8G,QAAQ,GAAC,YAAU;EAAC,IAAA,OAAM,WAAW,GAAC,IAAI,CAAC2tB,6CAA6C,GAAC,GAAG,CAAA;EAAA,GAAC,CAAC,CAAA;IAACzzB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACnP,MAAM,GAAC,UAASnmB,CAAC,EAAC;EAAC,IAAA,OAAO8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACM,iBAAiB,CAAC51B,CAAC,CAAC,CAAC4H,QAAQ,EAAE,CAAA;KAAC,CAAA;IAC3a9F,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACM,iBAAiB,GAAC,UAAS51B,CAAC,EAAC;EAAC,IAAA,IAAGA,CAAC,YAAY8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,IAAEt1B,CAAC,CAACkL,WAAW,KAAGpJ,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,IAAEt1B,CAAC,CAACw1B,iDAAiD,KAAG1zB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAAC7O,uCAAuC,EAAC,OAAOzmB,CAAC,CAACu1B,6CAA6C,CAAA;EAACzzB,IAAAA,IAAI,CAACoN,OAAO,CAACK,IAAI,CAAC,yCAAyC,GAACvP,CAAC,GAAC,YAAY,GAAC8B,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAM,qBAAqB,CAAA;KAAC,CAAA;IACxZ8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACxG,UAAU,GAAC,UAAS9uB,CAAC,EAAC;MAAC,IAAGA,CAAC,YAAY8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,EAAC,OAAOt1B,CAAC,CAAA;EAAC,IAAA,IAAIC,CAAC,GAAC,QAAQ,IAAA,OAAA,CAASD,CAAC,CAAA;EAACE,MAAAA,CAAC,GAAC,IAAI,CAAA;MAACD,CAAC,IAAED,CAAC,CAACotB,uCAAuC,KAAGltB,CAAC,GAACF,CAAC,CAACqtB,YAAY,EAAE,CAAC,CAAA;EAACrtB,IAAAA,CAAC,GAACC,CAAC,IAAED,CAAC,CAACimB,+BAA+B,GAACjmB,CAAC,CAACkmB,mBAAmB,EAAE,GAAC/lB,MAAM,CAACH,CAAC,CAAC,CAAA;MAAC,OAAO8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACO,8CAA8C,CAAC/zB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACW,UAAU,CAAC9uB,CAAC,CAAC,EAACE,CAAC,CAAC,CAAA;KAAC,CAAA;IACjX4B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACQ,4BAA4B,GAAC,UAAS91B,CAAC,EAAC;MAAC,IAAGA,CAAC,YAAY8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,EAAC,OAAOt1B,CAAC,CAAA;MAACA,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACxG,UAAU,CAAC9uB,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACO,8CAA8C,CAAC/zB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACU,WAAW,CAAC/sB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACnP,MAAM,CAACnmB,CAAC,CAAC,CAAC,EAACA,CAAC,CAACqtB,YAAY,EAAE,CAAC,CAAA;KAAC,CAAA;IACrSvrB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACS,qCAAqC,GAAC,UAAS/1B,CAAC,EAAC;MAAC,IAAGA,CAAC,YAAY8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,EAAC,OAAOt1B,CAAC,CAAA;MAACA,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACxG,UAAU,CAAC9uB,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACO,8CAA8C,CAAC/zB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACmB,gBAAgB,CAACxtB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACnP,MAAM,CAACnmB,CAAC,CAAC,CAAC,EAACA,CAAC,CAACqtB,YAAY,EAAE,CAAC,CAAA;KAAC,CAAA;EAACvrB,EAAAA,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAAClP,IAAI,GAACtkB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACxG,UAAU,CAAA;IACzWhtB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACU,OAAO,GAAC,UAASh2B,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACO,8CAA8C,CAAC,SAAS,GAAC/zB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACW,UAAU,CAAC9uB,CAAC,CAAC,GAAC,QAAQ,EAAC,IAAI,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACW,mBAAmB,GAAC,iBAAiB,CAAA;EAACn0B,EAAAA,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACY,eAAe,GAAC;MAACC,MAAM,EAAC,CAAC,CAAC;MAACC,IAAI,EAAC,CAAC,CAAC;MAACC,IAAI,EAAC,CAAC,CAAC;MAACC,UAAU,EAAC,CAAC,CAAC;MAACC,IAAI,EAAC,CAAC,CAAC;MAACC,QAAQ,EAAC,CAAC,CAAC;MAACC,MAAM,EAAC,CAAC,CAAC;EAACC,IAAAA,GAAG,EAAC,CAAC,CAAA;KAAE,CAAA;EAAC50B,EAAAA,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACqB,sBAAsB,GAAC;MAACla,MAAM,EAAC,CAAC,CAAC;MAACM,IAAI,EAAC,CAAC,CAAC;MAAC6B,KAAK,EAAC,CAAC,CAAC;MAACqB,MAAM,EAAC,CAAC,CAAC;MAACU,IAAI,EAAC,CAAC,CAAC;MAACI,IAAI,EAAC,CAAC,CAAC;MAACG,IAAI,EAAC,CAAC,CAAC;MAACK,MAAM,EAAC,CAAC,CAAC;MAACgB,MAAM,EAAC,CAAC,CAAC;MAACQ,KAAK,EAAC,CAAC,CAAC;MAACI,GAAG,EAAC,CAAC,CAAC;EAACI,IAAAA,QAAQ,EAAC,CAAC,CAAA;KAAE,CAAA;EAChfzhB,EAAAA,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAAC/mB,MAAM,GAAC,UAASvO,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC4B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACsB,aAAa,CAACz2B,MAAM,CAACH,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACuB,iDAAiD,CAAC12B,MAAM,CAACH,CAAC,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;IACjL4B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACsB,aAAa,GAAC,UAAS52B,CAAC,EAAC;EAAC,IAAA,IAAG,CAAC8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACW,mBAAmB,CAAC1yB,IAAI,CAACvD,CAAC,CAAC,EAAC,MAAM6C,KAAK,CAACf,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACI,qBAAqB,GAAC,oBAAoB,GAAC11B,CAAC,GAAC,IAAI,GAAC,EAAE,CAAC,CAAA;EAAC,IAAA,IAAGA,CAAC,CAAC82B,WAAW,EAAE,IAAGh1B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACqB,sBAAsB,EAAC,MAAM9zB,KAAK,CAACf,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACI,qBAAqB,GAAC,YAAY,GAAC11B,CAAC,GAAC,gCAAgC,GAAC,EAAE,CAAC,CAAA;KAAE,CAAA;EAC9V8B,EAAAA,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACyB,YAAY,GAAC,UAAS/2B,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAACJ,CAAC,IAAE8B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAAC7G,MAAM,CAACnmB,CAAC,CAAC,CAAA;MAAC,IAAI/B,CAAC,GAAC,EAAE,CAAA;EAACA,IAAAA,CAAC,CAACy4B,GAAG,GAAC12B,CAAC,IAAE,IAAI,CAAA;EAAC/B,IAAAA,CAAC,CAAC+4B,MAAM,GAAC/2B,CAAC,IAAE6B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACnP,MAAM,CAAClmB,CAAC,CAAC,CAAA;MAACD,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAAC2B,iBAAiB,CAACh5B,CAAC,EAAC;EAACi5B,MAAAA,OAAO,EAAC,EAAA;OAAG,EAACh3B,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO4B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACuB,iDAAiD,CAAC,QAAQ,EAAC72B,CAAC,EAACI,CAAC,CAAC,CAAA;KAAC,CAAA;EAC/S0B,EAAAA,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAAC6B,mBAAmB,GAAC,UAASn3B,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC,IAAG,CAAC0B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAAC8B,mBAAmB,EAAE,EAAC,MAAMv0B,KAAK,CAACf,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACI,qBAAqB,GAAC,iDAAiD,GAAC,EAAE,CAAC,CAAA;MAAC,IAAIz3B,CAAC,GAAC,EAAE,CAAA;MAACA,CAAC,CAACy4B,GAAG,GAAC12B,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACvJ,MAAM,CAACrkB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC6B,QAAQ,CAACvxB,CAAC,CAAC,CAAC,GAAC,IAAI,CAAA;EAAC/B,IAAAA,CAAC,CAAC+4B,MAAM,GAAC/2B,CAAC,IAAE,IAAI,CAAA;MAAChC,CAAC,CAACi5B,OAAO,GAAC,EAAE,CAAA;EAACl3B,IAAAA,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAAC2B,iBAAiB,CAACh5B,CAAC,EAAC,EAAE,EAACiC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO4B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACuB,iDAAiD,CAAC,QAAQ,EAAC72B,CAAC,EAACI,CAAC,CAAC,CAAA;KAAC,CAAA;EACtc0B,EAAAA,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAAC8B,mBAAmB,GAAC,YAAU;EAAC,IAAA,OAAOt1B,IAAI,CAACb,MAAM,CAACo2B,iBAAiB,IAAE,SAAS,IAAGv1B,IAAI,CAACb,MAAM,CAACo2B,iBAAiB,CAACv2B,SAAS,CAAA;KAAC,CAAA;IAACgB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACgC,eAAe,GAAC,UAASt3B,CAAC,EAACC,CAAC,EAAC;MAAC6B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAAC7G,MAAM,CAACnmB,CAAC,CAAC,CAAA;MAACA,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAAC2B,iBAAiB,CAAC;EAACP,MAAAA,GAAG,EAAC12B,CAAAA;EAAC,KAAC,EAAC,EAAE,EAACC,CAAC,CAAC,CAAA;MAAC,OAAO6B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACuB,iDAAiD,CAAC,QAAQ,EAAC72B,CAAC,CAAC,CAAA;KAAC,CAAA;IAClX8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAAClpB,YAAY,GAAC,UAASpM,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIC,CAAC,IAAID,CAAC,EAAC;EAAC,MAAA,IAAIG,CAAC,GAACF,CAAC,CAACuoB,WAAW,EAAE,CAAA;EAAC,MAAA,IAAG,UAAU,IAAEroB,CAAC,IAAE,KAAK,IAAEA,CAAC,IAAE,MAAM,IAAEA,CAAC,IAAE,MAAM,IAAEA,CAAC,EAAC,MAAMyC,KAAK,CAACf,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACI,qBAAqB,GAAC,cAAc,GAACt1B,CAAC,GAAC,aAAa,GAAC,EAAE,CAAC,CAAA;EAAC,KAAA;EAACF,IAAAA,CAAC,GAAC,EAAE,CAAA;MAACF,CAAC,GAAC8B,IAAI,CAACiT,KAAK,CAACwB,MAAM,CAACvW,CAAC,CAAC,CAAA;MAAC,KAAII,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,CAAC,CAACL,MAAM,EAACS,CAAC,EAAE,EAAA;EAACF,MAAAA,CAAC,IAAE4B,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACH,MAAM,CAACnmB,CAAC,CAACI,CAAC,CAAC,CAAC,CAAA;EAAC,KAAA;MAAAJ,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACO,8CAA8C,CAAC31B,CAAC,EAAC4B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACG,OAAO,CAAC,CAAA;EAAC,IAAA,OAAOrnB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACuB,iDAAiD,CAAC,QAAQ,EAAC52B,CAAC,EAACD,CAAC,CAAC,CAAA;KAAC,CAAA;IAClf8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACiC,WAAW,GAAC,UAASv3B,CAAC,EAACC,CAAC,EAAC;MAACA,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAAC2B,iBAAiB,CAAC;EAAC7yB,MAAAA,IAAI,EAAC,UAAA;EAAU,KAAC,EAAC,EAAE,EAACnE,CAAC,CAAC,CAAA;MAAC,IAAIC,CAAC,GAAC,EAAE,CAAA;MAACF,CAAC,GAAC8B,IAAI,CAACiT,KAAK,CAACwB,MAAM,CAACvW,CAAC,CAAC,CAAA;EAAC,IAAA,KAAI,IAAII,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,CAAC,CAACL,MAAM,EAACS,CAAC,EAAE,EAAA;EAACF,MAAAA,CAAC,IAAE4B,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAACtM,MAAM,CAACnmB,CAAC,CAACI,CAAC,CAAC,CAAC,CAAA;EAAC,KAAA;MAAAJ,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACO,8CAA8C,CAAC31B,CAAC,EAAC4B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACG,OAAO,CAAC,CAAA;EAAC,IAAA,OAAOrnB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACuB,iDAAiD,CAAC,OAAO,EAAC52B,CAAC,EAACD,CAAC,CAAC,CAAA;KAAC,CAAA;IAC3Y8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACkC,iBAAiB,GAAC,UAASx3B,CAAC,EAACC,CAAC,EAAC;EAACD,IAAAA,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACvJ,MAAM,CAACrkB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC6B,QAAQ,CAACvxB,CAAC,CAAC,CAAC,CAAA;MAAC,CAAC8B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACgB,IAAI,EAAE,IAAE7yB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACiB,MAAM,EAAE,KAAG9yB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAAChhB,QAAQ,CAACnN,CAAC,EAAC,GAAG,CAAC,KAAGA,CAAC,GAAC,GAAG,GAACA,CAAC,CAAC4K,OAAO,CAAC,IAAI,EAAC,KAAK,CAAC,GAAC,GAAG,CAAC,CAAA;MAAC,OAAO9I,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACuB,iDAAiD,CAAC,MAAM,EAAC;EAAC,MAAA,YAAY,EAAC,SAAS;EAACY,MAAAA,OAAO,EAAC,CAACx3B,CAAC,IAAE,CAAC,IAAE,QAAQ,GAACD,CAAAA;EAAC,KAAC,CAAC,CAAA;KAAC,CAAA;EACxY8B,EAAAA,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACoC,oBAAoB,GAAC,UAAS13B,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAGA,CAAC,YAAY4B,IAAI,CAAC4jB,MAAM,CAACE,KAAK,EAAC1lB,CAAC,GAAC4B,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACjmB,CAAC,CAAC,CAAC,KAAK,IAAG,OAAO,IAAED,CAAC,CAACwoB,WAAW,EAAE,EAAA;EAAC,MAAA,IAAG3mB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACK,uBAAuB,EAACz1B,CAAC,GAAC4B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACqC,cAAc,CAACz3B,CAAC,CAAC,CAAC,KAAK,MAAM2C,KAAK,CAACf,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACI,qBAAqB,GAAC,kCAAkC,GAAC,EAAE,CAAC,CAAA;OAAK,MAAA;EAAC,MAAA,IAAG,MAAM,CAACnyB,IAAI,CAACtD,CAAC,CAAC,EAAC,MAAM4C,KAAK,CAACf,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACI,qBAAqB,GAAC,aAAa,GAACz1B,CAAC,GAAC,uCAAuC,GAACC,CAAC,GAAC,UAAU,GAAC,EAAE,CAAC,CAAA;QAAC,IAAGD,CAAC,CAACwoB,WAAW,EAAE,IACtf3mB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACY,eAAe,EAAC,IAAGh2B,CAAC,YAAY4B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,EAAC9sB,CAAC,GAAC4B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAAC7G,MAAM,CAACjmB,CAAC,CAAC,CAAC,KAAK,IAAGA,CAAC,YAAY4B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,EAACxvB,CAAC,GAAC4B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACvJ,MAAM,CAACjmB,CAAC,CAAC,CAAC,KAAK,IAAG,QAAQ,KAAG,OAAOA,CAAC,EAACA,CAAC,GAAC4B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC6B,QAAQ,CAACrxB,CAAC,CAAC,CAACgmB,mBAAmB,EAAE,CAAC,KAAK,MAAMrjB,KAAK,CAACf,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACI,qBAAqB,GAAC,aAAa,GAACz1B,CAAC,GAAC,YAAY,GAACD,CAAC,GAAC,qEAAqE,GAACE,CAAC,GAAC,UAAU,GAAC,EAAE,CAAC,CAAA;EAAC,KAAA;MAACA,CAAC,CAAC+lB,+BAA+B,KAAG/lB,CAAC,GAACA,CAAC,CAACgmB,mBAAmB,EAAE,CAAC,CAAA;MAC/fpkB,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,QAAQ,KAAG,OAAOlP,CAAC,IAAE,QAAQ,KAAG,OAAOA,CAAC,EAAC,uCAAuC,GAAA,OAAA,CAAQA,CAAC,CAAC,GAAA,eAAe,GAACA,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOD,CAAC,GAAC,IAAI,GAAC6B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACW,UAAU,CAAC3uB,MAAM,CAACD,CAAC,CAAC,CAAC,GAAC,GAAG,CAAA;KAAC,CAAA;IAAC4B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACqC,cAAc,GAAC,UAAS33B,CAAC,EAAC;EAAC,IAAA,IAAG,CAAC8B,IAAI,CAACmG,QAAQ,CAACjI,CAAC,CAAC,EAAC,MAAM6C,KAAK,CAACf,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACI,qBAAqB,GAAC,iFAAiF,GAAQ11B,OAAAA,CAAAA,CAAC,CAAC,GAAA,UAAU,GAACA,CAAC,GAAC,EAAE,CAAC,CAAA;EAACA,IAAAA,CAAC,YAAY8B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,KAAG1xB,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACnjB,MAAM,CAACvO,CAAC,CAAC,CAAC,CAAA;MAAC,OAAO8B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACvL,MAAM,CAACnmB,CAAC,CAAC,CAAA;KAAC,CAAA;EAC5gB8B,EAAAA,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACsC,aAAa,GAAC,UAAS53B,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;EAACH,IAAAA,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAAC/mB,MAAM,CAACtO,CAAC,EAACC,CAAC,EAACE,CAAC,CAAC,CAAA;MAACH,CAAC,CAACw1B,IAAI,GAACz1B,CAAC,CAAA;EAAC,IAAA,OAAOC,CAAC,CAAA;KAAC,CAAA;IACxG6B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACxuB,IAAI,GAAC,UAAS9G,CAAC,EAACC,CAAC,EAAC;MAACD,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACxG,UAAU,CAAC9uB,CAAC,CAAC,CAAA;EAAC,IAAA,IAAIE,CAAC,GAACF,CAAC,CAACqtB,YAAY,EAAE;EAACjtB,MAAAA,CAAC,GAAC,EAAE;EAACnC,MAAAA,CAAC,GAAC,SAAFA,CAAC,CAAU+B,CAAC,EAAC;EAACa,QAAAA,KAAK,CAACiH,OAAO,CAAC9H,CAAC,CAAC,GAAC8B,IAAI,CAACiT,KAAK,CAACpI,OAAO,CAAC3M,CAAC,EAAC/B,CAAC,CAAC,IAAE+B,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACxG,UAAU,CAAC9uB,CAAC,CAAC,EAACI,CAAC,CAACR,IAAI,CAACkC,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACnP,MAAM,CAACnmB,CAAC,CAAC,CAAC,EAACA,CAAC,GAACA,CAAC,CAACqtB,YAAY,EAAE,EAACntB,CAAC,IAAE4B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACG,OAAO,GAACjpB,CAAC,GAACF,CAAC,GAACA,CAAC,IAAE8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACG,OAAO,IAAEjpB,CAAC,IAAEF,CAAC,KAAGE,CAAC,GAAC,IAAI,CAAC,CAAC,CAAA;SAAC,CAAA;MAAC4B,IAAI,CAACiT,KAAK,CAACpI,OAAO,CAAC1M,CAAC,EAAChC,CAAC,CAAC,CAAA;MAAC,OAAO6D,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACO,8CAA8C,CAACz1B,CAAC,CAAC0G,IAAI,CAAChF,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACnP,MAAM,CAACnmB,CAAC,CAAC,CAAC,EAACE,CAAC,CAAC,CAAA;KAAC,CAAA;IACnd4B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAAC/e,MAAM,GAAC,UAASvW,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACxuB,IAAI,CAAChF,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACjP,KAAK,EAACxlB,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,CAAC,CAAC,CAAA;KAAC,CAAA;IAACnH,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACuC,aAAa,GAAC,UAAS73B,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC4B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAAC/e,MAAM,CAACzU,IAAI,CAACiT,KAAK,CAAC5L,KAAK,CAACF,SAAS,EAAC,CAAC,CAAC,CAAC,CAAA;MAAC/I,CAAC,CAACu1B,IAAI,GAACz1B,CAAC,CAAA;EAAC,IAAA,OAAOE,CAAC,CAAA;KAAC,CAAA;IAAC4B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAAC7O,uCAAuC,GAAC,EAAE,CAAA;IAAC3kB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACO,8CAA8C,GAAC,UAAS71B,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO,IAAI6B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,EAAEtO,CAAAA,qCAAqC,CAAChnB,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EAC/d6B,EAAAA,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACx0B,SAAS,CAACkmB,qCAAqC,GAAC,UAAShnB,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,CAACs1B,6CAA6C,GAACzzB,IAAI,CAAC6I,IAAI,CAAC6a,YAAY,CAACC,oCAAoC,GAAC3jB,IAAI,CAAC6I,IAAI,CAAC6a,YAAY,CAACC,oCAAoC,CAACtZ,UAAU,CAACnM,CAAC,CAAC,GAACA,CAAC,CAAA;MAAC,IAAI,CAACy1B,IAAI,GAACx1B,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAA;KAAC,CAAA;EACpS6B,EAAAA,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACuB,iDAAiD,GAAC,UAAS72B,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIE,CAAC,GAAC,IAAI,CAAA;EAAC,IAAA,IAAInC,CAAC,GAAC,GAAG,GAAC+B,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACwC,mBAAmB,CAAC93B,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAI,IAAEC,CAAC,GAACA,CAAC,GAAC,EAAE,GAACW,KAAK,CAACiH,OAAO,CAAC5H,CAAC,CAAC,KAAGA,CAAC,GAAC,CAACA,CAAC,CAAC,CAAC,CAAA;EAAC4B,IAAAA,IAAI,CAACgR,GAAG,CAACwR,IAAI,CAACiB,SAAS,CAACvlB,CAAC,CAACyoB,WAAW,EAAE,CAAC,IAAE3mB,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,CAAClP,CAAC,CAACP,MAAM,EAAC,YAAY,GAACK,CAAC,GAAC,2BAA2B,CAAC,EAAC/B,CAAC,IAAE,GAAG,KAAGmC,CAAC,GAAC0B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAAC/e,MAAM,CAACrW,CAAC,CAAC,EAACjC,CAAC,IAAE,GAAG,GAAC6D,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACnP,MAAM,CAAC/lB,CAAC,CAAC,GAAC,IAAI,GAACJ,CAAC,GAAC,GAAG,EAACI,CAAC,GAACA,CAAC,CAACitB,YAAY,EAAE,CAAC,CAAA;EAAC,IAAA,CAACrtB,CAAC,GAACC,CAAC,IAAEA,CAAC,CAAC4sB,GAAG,MAAIzsB,CAAC,GAAC,mBAAmB,CAACmD,IAAI,CAACvD,CAAC,CAAC,GAAC8B,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACG,OAAO,GAAC,IAAI,CAAC,CAAA;MAAC,OAAOrnB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACO,8CAA8C,CAAC53B,CAAC,EACtjBmC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC0B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACwC,mBAAmB,GAAC,UAAS93B,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,EAAE,CAAA;EAAC,IAAA,IAAGD,CAAC,EAAC,KAAI,IAAIG,CAAC,IAAIH,CAAC,EAAC;EAAC,MAAA,IAAG,CAAC6B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACW,mBAAmB,CAAC1yB,IAAI,CAACnD,CAAC,CAAC,EAAC,MAAMyC,KAAK,CAACf,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACI,qBAAqB,GAAC,0BAA0B,GAACt1B,CAAC,GAAC,IAAI,GAAC,EAAE,CAAC,CAAA;EAAC,MAAA,IAAInC,CAAC,GAACgC,CAAC,CAACG,CAAC,CAAC,CAAA;QAAC,IAAI,IAAEnC,CAAC,KAAGiC,CAAC,IAAE,GAAG,GAAC4B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACoC,oBAAoB,CAAC13B,CAAC,EAACI,CAAC,EAACnC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOiC,CAAC,CAAA;KAAC,CAAA;EAC1T4B,EAAAA,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAAC2B,iBAAiB,GAAC,UAASj3B,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIE,CAAC,GAAC,EAAE;QAACnC,CAAC,CAAA;MAAC,KAAIA,CAAC,IAAI+B,CAAC,EAAA;QAAC8B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAACnR,CAAC,CAACwqB,WAAW,EAAE,IAAExqB,CAAC,EAAC,oBAAoB,CAAC,EAACmC,CAAC,CAACnC,CAAC,CAAC,GAAC+B,CAAC,CAAC/B,CAAC,CAAC,CAAA;EAAC,KAAA;MAAA,KAAIA,CAAC,IAAIgC,CAAC,EAAA;QAAC6B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAACnR,CAAC,CAACwqB,WAAW,EAAE,IAAExqB,CAAC,EAAC,oBAAoB,CAAC,EAACmC,CAAC,CAACnC,CAAC,CAAC,GAACgC,CAAC,CAAChC,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,IAAGiC,CAAC,EAAC,KAAIjC,CAAC,IAAIiC,CAAC,EAAC;EAAC,MAAA,IAAInB,CAAC,GAACd,CAAC,CAACwqB,WAAW,EAAE,CAAA;EAAC,MAAA,IAAG1pB,CAAC,IAAIiB,CAAC,EAAC,MAAM6C,KAAK,CAACf,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACI,qBAAqB,GAAC,mBAAmB,GAAC32B,CAAC,GAAC,oBAAoB,GAACd,CAAC,GAAC,gBAAgB,GAACiC,CAAC,CAACjC,CAAC,CAAC,GAAC,GAAG,GAAC,EAAE,CAAC,CAAA;EAACc,MAAAA,CAAC,IAAIkB,CAAC,IAAE,OAAOG,CAAC,CAACrB,CAAC,CAAC,CAAA;EAACqB,MAAAA,CAAC,CAACnC,CAAC,CAAC,GAACiC,CAAC,CAACjC,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOmC,CAAC,CAAA;KAAC,CAAA;IAC5b0B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACyC,YAAY,GAACj2B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACO,8CAA8C,CAAC,iBAAiB,EAAC/zB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACG,OAAO,CAAC,CAAA;IAACrnB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACjP,KAAK,GAACvkB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACO,8CAA8C,CAAC,EAAE,EAAC/zB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACG,OAAO,CAAC,CAAA;IAACrnB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAAChY,EAAE,GAACxb,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACO,8CAA8C,CAAC,MAAM,EAAC/zB,IAAI,CAACumB,IAAI,CAACC,IAAI,CAACU,GAAG,CAACG,OAAO,CAAC,CAAA;EAACrnB,EAAAA,IAAI,CAAC6I,IAAI,CAACqtB,oBAAoB,GAAC,EAAE,CAAA;EAACl2B,EAAAA,IAAI,CAAC6I,IAAI,CAACqtB,oBAAoB,CAACC,4CAA4C,GAAC,UAASj4B,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC4B,IAAAA,IAAI,CAACoN,OAAO,CAACG,YAAY,CAACvN,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,EAAC,4BAA4B,CAAC,CAAA;MAAC8B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,CAACtN,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACQ,mBAAmB,CAAC7sB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,CAAC,EAAC,sCAAsC,CAAC,CAAA;EAAC,IAAA,OAAO8B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACO,8CAA8C,CAAC51B,CAAC,EAACC,CAAC,IAAE,IAAI,CAAC,CAAA;KAAC,CAAA;IAC9yB4B,IAAI,CAAC6I,IAAI,CAACqtB,oBAAoB,CAACE,8CAA8C,GAAC,UAASl4B,CAAC,EAACC,CAAC,EAAC;EAAC6B,IAAAA,IAAI,CAACoN,OAAO,CAACG,YAAY,CAACvN,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,EAAC,4BAA4B,CAAC,CAAA;MAAC8B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,CAACtN,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACQ,mBAAmB,CAAC7sB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,CAAC,EAAC,sCAAsC,CAAC,CAAA;MAAC,OAAO8B,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACK,gDAAgD,CAAC1mB,CAAC,CAAC,CAAA;KAAC,CAAA;IACnY6B,IAAI,CAAC6I,IAAI,CAACqtB,oBAAoB,CAACG,6CAA6C,GAAC,UAASn4B,CAAC,EAACC,CAAC,EAAC;EAAC6B,IAAAA,IAAI,CAACoN,OAAO,CAACG,YAAY,CAACvN,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,EAAC,4BAA4B,CAAC,CAAA;MAAC8B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,CAACtN,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACQ,mBAAmB,CAAC7sB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,CAAC,EAAC,sCAAsC,CAAC,CAAA;MAAC,OAAO8B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACG,+CAA+C,CAAC5xB,CAAC,CAAC,CAAA;KAAC,CAAA;IAChY6B,IAAI,CAAC6I,IAAI,CAACqtB,oBAAoB,CAACI,kDAAkD,GAAC,UAASp4B,CAAC,EAACC,CAAC,EAAC;EAAC6B,IAAAA,IAAI,CAACoN,OAAO,CAACG,YAAY,CAACvN,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,EAAC,4BAA4B,CAAC,CAAA;MAAC8B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,CAACtN,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACQ,mBAAmB,CAAC7sB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,CAAC,EAAC,sCAAsC,CAAC,CAAA;MAAC,OAAO8B,IAAI,CAAC6I,IAAI,CAAC8nB,cAAc,CAACK,oDAAoD,CAAC7yB,CAAC,CAAC,CAAA;KAAC,CAAA;IAC/Y6B,IAAI,CAAC6I,IAAI,CAACqtB,oBAAoB,CAACK,2CAA2C,GAAC,UAASr4B,CAAC,EAACC,CAAC,EAAC;EAAC6B,IAAAA,IAAI,CAACoN,OAAO,CAACG,YAAY,CAACvN,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,EAAC,4BAA4B,CAAC,CAAA;MAAC8B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,CAACtN,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACQ,mBAAmB,CAAC7sB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,CAAC,EAAC,sCAAsC,CAAC,CAAA;MAAC,OAAO8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACI,6CAA6C,CAAC7vB,CAAC,CAAC,CAAA;KAAC,CAAA;IAC1X6B,IAAI,CAAC6I,IAAI,CAACqtB,oBAAoB,CAACM,sDAAsD,GAAC,UAASt4B,CAAC,EAACC,CAAC,EAAC;EAAC6B,IAAAA,IAAI,CAACoN,OAAO,CAACG,YAAY,CAACvN,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,EAAC,4BAA4B,CAAC,CAAA;MAAC8B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,CAACtN,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACQ,mBAAmB,CAAC7sB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACnmB,CAAC,CAAC,CAAC,EAAC,sCAAsC,CAAC,CAAA;MAAC,OAAO8B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACS,wDAAwD,CAACxtB,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACgR,GAAG,CAACylB,IAAI,GAAC,EAAE,CAAA;EAACz2B,EAAAA,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACC,0BAA0B,GAAC;EAACC,IAAAA,UAAU,EAAC,YAAY;EAACC,IAAAA,QAAQ,EAAC,UAAU;EAACC,IAAAA,WAAW,EAAC,aAAa;EAACC,IAAAA,SAAS,EAAC,WAAA;KAAY,CAAA;EAAC92B,EAAAA,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACM,kBAAkB,GAAC,UAAS74B,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAACF,IAAAA,CAAC,CAAC84B,kBAAkB,CAAC74B,CAAC,EAAC6B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACM,iBAAiB,CAAC11B,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACQ,+BAA+B,GAAC;MAAChY,IAAI,EAAC,CAAC,CAAC;MAACwB,MAAM,EAAC,CAAC,CAAC;MAACQ,KAAK,EAAC,CAAC,CAAC;MAACI,GAAG,EAAC,CAAC,CAAC;EAACI,IAAAA,QAAQ,EAAC,CAAC,CAAA;KAAE,CAAA;EACnwBzhB,EAAAA,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACS,4BAA4B,GAACl3B,IAAI,CAAC4Y,SAAS,CAACiB,gBAAgB,CAAC,YAAU;MAAC,IAAG7Z,IAAI,CAACO,KAAK,IAAE,WAAW,KAAG,OAAOY,QAAQ,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,IAAA,IAAIjD,CAAC,GAACiD,QAAQ,CAAC6G,aAAa,CAAC,KAAK,CAAC;EAAC7J,MAAAA,CAAC,GAACgD,QAAQ,CAAC6G,aAAa,CAAC,KAAK,CAAC,CAAA;MAAC7J,CAAC,CAAC+J,WAAW,CAAC/G,QAAQ,CAAC6G,aAAa,CAAC,KAAK,CAAC,CAAC,CAAA;EAAC9J,IAAAA,CAAC,CAACgK,WAAW,CAAC/J,CAAC,CAAC,CAAA;MAAC,IAAG6B,IAAI,CAACO,KAAK,IAAE,CAACrC,CAAC,CAACi5B,UAAU,EAAC,OAAM,CAAC,CAAC,CAAA;EAACh5B,IAAAA,CAAC,GAACD,CAAC,CAACi5B,UAAU,CAACA,UAAU,CAAA;EAACj5B,IAAAA,CAAC,CAACk5B,SAAS,GAACp3B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACM,iBAAiB,CAAC9zB,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACjP,KAAK,CAAC,CAAA;MAAC,OAAM,CAACpmB,CAAC,CAACk5B,aAAa,CAAA;EAAA,GAAC,CAAC,CAAA;IACjbr3B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACa,gCAAgC,GAAC,UAASp5B,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACS,4BAA4B,EAAE,EAAC,OAAKh5B,CAAC,CAACq5B,SAAS,GAAA;EAAEr5B,MAAAA,CAAC,CAACmK,WAAW,CAACnK,CAAC,CAACq5B,SAAS,CAAC,CAAA;EAAC,KAAA;EAAAr5B,IAAAA,CAAC,CAACk5B,SAAS,GAACp3B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACM,iBAAiB,CAAC31B,CAAC,CAAC,CAAA;KAAC,CAAA;IAC9M6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACe,YAAY,GAAC,UAASt5B,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG6B,IAAI,CAACoN,OAAO,CAAC0E,cAAc,EAAC;EAAC,MAAA,IAAI1T,CAAC,GAACF,CAAC,CAACu5B,OAAO,CAACzC,WAAW,EAAE,CAAA;QAAC,IAAGh1B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACQ,+BAA+B,CAAC74B,CAAC,CAAC,EAAC,MAAM2C,KAAK,CAAC,8DAA8D,GAAC7C,CAAC,CAACu5B,OAAO,GAAC,GAAG,CAAC,CAAA;EAAC,KAAA;MAACz3B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACa,gCAAgC,CAACp5B,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACiB,YAAY,GAAC,UAASx5B,CAAC,EAACC,CAAC,EAAC;EAACD,IAAAA,CAAC,CAACy5B,SAAS,GAAC33B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACM,iBAAiB,CAAC31B,CAAC,CAAC,CAAA;KAAC,CAAA;IACxY6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACmB,oBAAoB,GAAC,UAAS15B,CAAC,EAACC,CAAC,EAAC;MAACA,CAAC,GAACA,CAAC,YAAY6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,GAACzvB,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC8B,uBAAuB,CAACvxB,CAAC,CAAC,CAAA;MAAC6B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACgL,uBAAuB,CAACla,CAAC,CAAC,CAACm2B,MAAM,GAACr0B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACvJ,MAAM,CAAClmB,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACoB,mBAAmB,GAAC,UAAS35B,CAAC,EAACC,CAAC,EAAC;MAACA,CAAC,GAACA,CAAC,YAAY6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,GAACzvB,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC8B,uBAAuB,CAACvxB,CAAC,CAAC,CAAA;MAAC6B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACuK,yBAAyB,CAACzZ,CAAC,CAAC,CAAC45B,UAAU,GAAC93B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACvJ,MAAM,CAAClmB,CAAC,CAAC,CAAA;KAAC,CAAA;IACta6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACsB,kBAAkB,GAAC,UAAS75B,CAAC,EAACC,CAAC,EAAC;MAACA,CAAC,GAACA,CAAC,YAAY6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,GAACzvB,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC8B,uBAAuB,CAACvxB,CAAC,CAAC,CAAA;MAAC6B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAAC4K,wBAAwB,CAAC9Z,CAAC,CAAC,CAAC45B,UAAU,GAAC93B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACvJ,MAAM,CAAClmB,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACuB,QAAQ,GAAC,UAAS95B,CAAC,EAACC,CAAC,EAAC;EAACD,IAAAA,CAAC,CAAC2sB,KAAK,CAACoN,OAAO,GAACj4B,IAAI,CAAC6I,IAAI,CAAC+mB,SAAS,CAACvL,MAAM,CAAClmB,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACyB,aAAa,GAAC,UAASh6B,CAAC,EAACC,CAAC,EAAC;EAACD,IAAAA,CAAC,CAACi6B,KAAK,CAACn4B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACM,iBAAiB,CAAC31B,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IACnY6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAAC2B,aAAa,GAAC,UAASl6B,CAAC,EAACC,CAAC,EAAC;MAAC6B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACsK,yBAAyB,CAACxZ,CAAC,CAAC,CAAA;MAACC,CAAC,GAACA,CAAC,YAAY6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,GAACzvB,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC8B,uBAAuB,CAACvxB,CAAC,CAAC,CAAA;EAACD,IAAAA,CAAC,CAACu2B,IAAI,GAACz0B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACvJ,MAAM,CAAClmB,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAAC4B,WAAW,GAAC,UAASn6B,CAAC,EAACC,CAAC,EAAC;MAAC6B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACyK,wBAAwB,CAAC3Z,CAAC,CAAC,CAAA;MAAC,IAAG,EAAEC,CAAC,YAAY6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC,EAAC;EAAC,MAAA,IAAIxvB,CAAC,GAAC,gBAAgB,CAACqD,IAAI,CAACtD,CAAC,CAAC,CAAA;EAACA,MAAAA,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC8B,uBAAuB,CAACvxB,CAAC,EAACC,CAAC,CAAC,CAAA;EAAA,KAAA;EAACF,IAAAA,CAAC,CAAC02B,GAAG,GAAC50B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACvJ,MAAM,CAAClmB,CAAC,CAAC,CAAA;KAAC,CAAA;IACzb6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAAC6B,WAAW,GAAC,UAASp6B,CAAC,EAACC,CAAC,EAAC;MAAC6B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAAC0K,wBAAwB,CAAC5Z,CAAC,CAAC,CAAA;MAAC,IAAG,EAAEC,CAAC,YAAY6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC,EAAC;EAAC,MAAA,IAAIxvB,CAAC,GAAC,gBAAgB,CAACqD,IAAI,CAACtD,CAAC,CAAC,CAAA;EAACA,MAAAA,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC8B,uBAAuB,CAACvxB,CAAC,EAACC,CAAC,CAAC,CAAA;EAAA,KAAA;EAACF,IAAAA,CAAC,CAAC02B,GAAG,GAAC50B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACvJ,MAAM,CAAClmB,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAAC8B,WAAW,GAAC,UAASr6B,CAAC,EAACC,CAAC,EAAC;MAAC6B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAAC2K,wBAAwB,CAAC7Z,CAAC,CAAC,CAAA;MAAC,IAAG,EAAEC,CAAC,YAAY6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC,EAAC;EAAC,MAAA,IAAIxvB,CAAC,GAAC,gBAAgB,CAACqD,IAAI,CAACtD,CAAC,CAAC,CAAA;EAACA,MAAAA,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC8B,uBAAuB,CAACvxB,CAAC,EAACC,CAAC,CAAC,CAAA;EAAA,KAAA;EAACF,IAAAA,CAAC,CAAC02B,GAAG,GAAC50B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACvJ,MAAM,CAAClmB,CAAC,CAAC,CAAA;KAAC,CAAA;IAC3d6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAAC+B,WAAW,GAAC,UAASt6B,CAAC,EAACC,CAAC,EAAC;MAAC6B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAAC+K,wBAAwB,CAACja,CAAC,CAAC,CAAA;EAACA,IAAAA,CAAC,CAAC02B,GAAG,GAAC50B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACW,sBAAsB,CAAC1tB,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACgC,WAAW,GAAC,UAASv6B,CAAC,EAACC,CAAC,EAAC;MAAC6B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACiL,wBAAwB,CAACna,CAAC,CAAC,CAAA;EAACA,IAAAA,CAAC,CAAC02B,GAAG,GAAC50B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAAC7G,MAAM,CAAClmB,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACiC,YAAY,GAAC,UAASx6B,CAAC,EAACC,CAAC,EAAC;MAAC6B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACkL,yBAAyB,CAACpa,CAAC,CAAC,CAAA;EAACA,IAAAA,CAAC,CAAC02B,GAAG,GAAC50B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAAC7G,MAAM,CAAClmB,CAAC,CAAC,CAAA;KAAC,CAAA;IAC1Z6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACkC,eAAe,GAAC,UAASz6B,CAAC,EAACC,CAAC,EAAC;MAAC6B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACkL,yBAAyB,CAACpa,CAAC,CAAC,CAAA;EAACA,IAAAA,CAAC,CAACg3B,MAAM,GAACl1B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACM,iBAAiB,CAAC31B,CAAC,CAAC,CAAA;KAAC,CAAA;EAC3I6B,EAAAA,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACmC,iBAAiB,GAAC,UAAS16B,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC4B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACwK,uBAAuB,CAAC1Z,CAAC,CAAC,CAAA;MAACA,CAAC,CAAC26B,GAAG,GAACz6B,CAAC,CAAA;MAAC4B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACoB,uBAAuB,CAACrvB,CAAC,EAAC,YAAY,CAAC,IAAE4B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAACnP,CAAC,YAAY6B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,EAAC,oEAAoE,CAAC,EAAChtB,CAAC,CAACu2B,IAAI,GAACz0B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAAC7G,MAAM,CAAClmB,CAAC,CAAC,IAAED,CAAC,CAACu2B,IAAI,GAACt2B,CAAC,YAAY6B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,GAAClrB,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAAC7G,MAAM,CAAClmB,CAAC,CAAC,GAACA,CAAC,YAAY6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,GAAC5tB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACvJ,MAAM,CAAClmB,CAAC,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACvJ,MAAM,CAACrkB,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC8B,uBAAuB,CAACvxB,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAC/iB6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACqC,aAAa,GAAC,UAAS56B,CAAC,EAACC,CAAC,EAAC;MAAC6B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACmL,yBAAyB,CAACra,CAAC,CAAC,CAAA;EAACA,IAAAA,CAAC,CAACq2B,IAAI,GAACv0B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACW,sBAAsB,CAAC1tB,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACsC,YAAY,GAAC,UAAS76B,CAAC,EAACC,CAAC,EAAC;MAAC6B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACoL,yBAAyB,CAACta,CAAC,CAAC,CAAA;EAACA,IAAAA,CAAC,CAAC02B,GAAG,GAAC50B,IAAI,CAAC6I,IAAI,CAACqiB,kBAAkB,CAACW,sBAAsB,CAAC1tB,CAAC,CAAC,CAAA;EAAC,IAAA,CAACA,CAAC,GAAC6B,IAAI,CAACiB,cAAc,EAAE,KAAG/C,CAAC,CAAC86B,YAAY,CAAC,OAAO,EAAC76B,CAAC,CAAC,CAAA;KAAC,CAAA;IAChW6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACwC,gBAAgB,GAAC,UAAS/6B,CAAC,EAACC,CAAC,EAAC;MAAC6B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACoL,yBAAyB,CAACta,CAAC,CAAC,CAAA;EAACA,IAAAA,CAAC,CAACg7B,IAAI,GAACl5B,IAAI,CAAC6I,IAAI,CAAC2b,UAAU,CAACS,mBAAmB,CAAC9mB,CAAC,CAAC,CAAA;EAAC,IAAA,CAACA,CAAC,GAAC6B,IAAI,CAACiB,cAAc,EAAE,KAAG/C,CAAC,CAAC86B,YAAY,CAAC,OAAO,EAAC76B,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAAC0C,eAAe,GAAC,UAASj7B,CAAC,EAACC,CAAC,EAAC;MAAC6B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACgK,gBAAgB,CAAClZ,CAAC,CAAC,CAAA;MAACC,CAAC,GAACA,CAAC,YAAY6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,GAACzvB,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC8B,uBAAuB,CAACvxB,CAAC,CAAC,CAAA;EAACD,IAAAA,CAAC,CAACu2B,IAAI,GAACz0B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACvJ,MAAM,CAAClmB,CAAC,CAAC,CAAA;KAAC,CAAA;IACxY6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAAC2C,cAAc,GAAC,UAASl7B,CAAC,EAACC,CAAC,EAAC;MAAC6B,IAAI,CAACgR,GAAG,CAAC5D,OAAO,CAACgK,gBAAgB,CAAClZ,CAAC,CAAC,CAAA;MAACC,CAAC,GAACA,CAAC,YAAY6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,GAACzvB,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC8B,uBAAuB,CAACvxB,CAAC,CAAC,CAAA;EAACD,IAAAA,CAAC,CAACm7B,MAAM,CAACr5B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACvJ,MAAM,CAAClmB,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAAC6C,eAAe,GAAC,UAASp7B,CAAC,EAACC,CAAC,EAAC;MAACA,CAAC,GAACA,CAAC,YAAY6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,GAACzvB,CAAC,GAAC6B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC8B,uBAAuB,CAACvxB,CAAC,CAAC,CAAA;EAACD,IAAAA,CAAC,CAAC4K,OAAO,CAAC9I,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACvJ,MAAM,CAAClmB,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAC1W6B,EAAAA,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAAC8C,YAAY,GAAC,UAASr7B,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAACnC,CAAC,EAAC;MAAC+B,CAAC,GAACA,CAAC,YAAY8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,GAAC1vB,CAAC,GAAC8B,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAAC8B,uBAAuB,CAACxxB,CAAC,CAAC,CAAA;EAACC,IAAAA,CAAC,GAACA,CAAC,IAAE6B,IAAI,CAACb,MAAM,CAAA;MAACf,CAAC,GAACA,CAAC,YAAY4B,IAAI,CAAC4jB,MAAM,CAACE,KAAK,GAAC9jB,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACO,MAAM,CAACjmB,CAAC,CAAC,GAACA,CAAC,IAAE,EAAE,CAAA;MAAC,OAAOD,CAAC,CAACiH,IAAI,CAACpF,IAAI,CAAC6I,IAAI,CAAC+kB,OAAO,CAACvJ,MAAM,CAACnmB,CAAC,CAAC,EAACE,CAAC,EAACE,CAAC,EAACnC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6D,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAAC+C,mBAAmB,GAAC,UAASt7B,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO6B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACgD,eAAe,CAACv7B,CAAC,EAACC,CAAC,EAAC,WAAW,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACgD,eAAe,GAAC,UAASv7B,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAOF,CAAC,CAACu7B,eAAe,CAACz5B,IAAI,CAAC6I,IAAI,CAAC2qB,QAAQ,CAACM,iBAAiB,CAAC31B,CAAC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;IAC9d4B,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACiD,mBAAmB,GAAC,UAASx7B,CAAC,EAAC;EAAC,IAAA,IAAG,CAAC,aAAa,CAACuD,IAAI,CAACvD,CAAC,CAACoE,IAAI,CAAC,EAAC,MAAMvB,KAAK,CAAC,oEAAoE,CAAC,CAAA;MAAC,IAAI5C,CAAC,GAAC6B,IAAI,CAACb,MAAM,CAACymB,GAAG,CAACL,eAAe,CAACrnB,CAAC,CAAC,CAAA;EAACA,IAAAA,CAAC,GAAC,IAAI8B,IAAI,CAACb,MAAM,CAACw6B,KAAK,EAAA,CAAA;MAACz7B,CAAC,CAAC07B,MAAM,GAAC,YAAU;QAAC55B,IAAI,CAACb,MAAM,CAACymB,GAAG,CAACH,eAAe,CAACtnB,CAAC,CAAC,CAAA;OAAC,CAAA;EAAC6B,IAAAA,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAAC4B,WAAW,CAACn6B,CAAC,EAAC8B,IAAI,CAAC6I,IAAI,CAACqtB,oBAAoB,CAACK,2CAA2C,CAACv2B,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACQ,IAAI,CAAC,iBAAiB,CAAC,EAACnmB,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOD,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC4jB,MAAM,CAACiW,sBAAsB,GAAC,CAAC,CAAC,CAAA;EAAC75B,EAAAA,IAAI,CAAC4jB,MAAM,CAACkW,6BAA6B,GAAC,CAAC,CAAC,CAAA;EAAC95B,EAAAA,IAAI,CAAC4jB,MAAM,CAACmW,OAAO,GAAC;EAACC,IAAAA,IAAI,EAAC,MAAA;KAAS,CAAA;IAACh6B,IAAI,CAAC4jB,MAAM,CAAC0I,UAAU,GAACtsB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACC,UAAU,CAAA;IAACtsB,IAAI,CAAC4jB,MAAM,CAAC2I,QAAQ,GAACvsB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACE,QAAQ,CAAA;IAACvsB,IAAI,CAAC4jB,MAAM,CAAC4I,yBAAyB,GAACxsB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACG,yBAAyB,CAAA;IAACxsB,IAAI,CAAC4jB,MAAM,CAAC+I,uBAAuB,GAAC3sB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACM,uBAAuB,CAAA;IAAC3sB,IAAI,CAAC4jB,MAAM,CAACgJ,qBAAqB,GAAC5sB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACO,qBAAqB,CAAA;IAC14B5sB,IAAI,CAAC4jB,MAAM,CAACqW,IAAI,GAAC,UAAS/7B,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIC,CAAC,GAACF,CAAC,CAACoB,KAAK,CAAC,IAAI,CAAC,EAAChB,CAAC,GAAC,EAAE,EAACnC,CAAC,GAAC4C,KAAK,CAACC,SAAS,CAACqI,KAAK,CAAC1J,IAAI,CAACwJ,SAAS,EAAC,CAAC,CAAC,EAAChL,CAAC,CAAC0B,MAAM,IAAE,CAAC,GAACO,CAAC,CAACP,MAAM,GAAA;QAAES,CAAC,IAAEF,CAAC,CAACgC,KAAK,EAAE,GAACjE,CAAC,CAACiE,KAAK,EAAE,CAAA;EAAC,KAAA;EAAA,IAAA,OAAO9B,CAAC,GAACF,CAAC,CAAC4G,IAAI,CAAC,IAAI,CAAC,CAAA;KAAC,CAAA;EAAChF,EAAAA,IAAI,CAAC4jB,MAAM,CAACsW,kBAAkB,GAAC,UAASh8B,CAAC,EAAC;EAAC,IAAA,OAAOA,CAAC,CAAC4K,OAAO,CAAC,YAAY,EAAC,GAAG,CAAC,CAACA,OAAO,CAAC,YAAY,EAAC,EAAE,CAAC,CAAA;KAAC,CAAA;IAAC9I,IAAI,CAAC4jB,MAAM,CAACiJ,mBAAmB,GAAC7sB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACQ,mBAAmB,CAAA;EAAC7sB,EAAAA,IAAI,CAAC4jB,MAAM,CAACuW,aAAa,GAAC,UAASj8B,CAAC,EAAC;EAAC,IAAA,OAAO,CAAC,IAAEA,CAAC,CAACL,MAAM,CAAA;KAAC,CAAA;IAACmC,IAAI,CAAC4jB,MAAM,CAAC/X,OAAO,GAAC7L,IAAI,CAAC4jB,MAAM,CAACiJ,mBAAmB,CAAA;EAAC7sB,EAAAA,IAAI,CAAC4jB,MAAM,CAACwW,uBAAuB,GAAC,UAASl8B,CAAC,EAAC;EAAC,IAAA,OAAO8B,IAAI,CAAC4jB,MAAM,CAACiJ,mBAAmB,CAAC7sB,IAAI,CAAC4jB,MAAM,CAACyW,QAAQ,CAACn8B,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IACzjB8B,IAAI,CAAC4jB,MAAM,CAAC0W,WAAW,GAACt6B,IAAI,CAAC4jB,MAAM,CAACwW,uBAAuB,CAAA;EAACp6B,EAAAA,IAAI,CAAC4jB,MAAM,CAAC2W,oBAAoB,GAAC,UAASr8B,CAAC,EAAC;EAAC,IAAA,OAAM,CAAC,YAAY,CAACuD,IAAI,CAACvD,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC4jB,MAAM,CAAC4W,OAAO,GAAC,UAASt8B,CAAC,EAAC;EAAC,IAAA,OAAM,CAAC,WAAW,CAACuD,IAAI,CAACvD,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC4jB,MAAM,CAAC6W,SAAS,GAAC,UAASv8B,CAAC,EAAC;EAAC,IAAA,OAAM,CAAC,QAAQ,CAACuD,IAAI,CAACvD,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC4jB,MAAM,CAAC8W,cAAc,GAAC,UAASx8B,CAAC,EAAC;EAAC,IAAA,OAAM,CAAC,cAAc,CAACuD,IAAI,CAACvD,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC4jB,MAAM,CAAC+W,OAAO,GAAC,UAASz8B,CAAC,EAAC;MAAC,OAAM,GAAG,IAAEA,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC4jB,MAAM,CAACgX,aAAa,GAAC,UAAS18B,CAAC,EAAC;MAAC,OAAO,CAAC,IAAEA,CAAC,CAACL,MAAM,IAAE,GAAG,IAAEK,CAAC,IAAE,GAAG,IAAEA,CAAC,IAAE,MAAQ,IAAEA,CAAC,IAAE,QAAQ,IAAEA,CAAC,CAAA;KAAC,CAAA;EACpd8B,EAAAA,IAAI,CAAC4jB,MAAM,CAACiX,aAAa,GAAC,UAAS38B,CAAC,EAAC;EAAC,IAAA,OAAOA,CAAC,CAAC4K,OAAO,CAAC,gBAAgB,EAAC,GAAG,CAAC,CAAA;KAAC,CAAA;EAAC9I,EAAAA,IAAI,CAAC4jB,MAAM,CAACkX,oBAAoB,GAAC,UAAS58B,CAAC,EAAC;EAAC,IAAA,OAAOA,CAAC,CAAC4K,OAAO,CAAC,eAAe,EAAC,IAAI,CAAC,CAAA;KAAC,CAAA;EAAC9I,EAAAA,IAAI,CAAC4jB,MAAM,CAACmX,mBAAmB,GAAC,UAAS78B,CAAC,EAAC;EAAC,IAAA,OAAOA,CAAC,CAAC4K,OAAO,CAAC,UAAU,EAAC,GAAG,CAAC,CAAA;KAAC,CAAA;EAAC9I,EAAAA,IAAI,CAAC4jB,MAAM,CAACoX,eAAe,GAAC,UAAS98B,CAAC,EAAC;EAAC,IAAA,OAAOA,CAAC,CAAC4K,OAAO,CAAC,cAAc,EAAC,GAAG,CAAC,CAAA;KAAC,CAAA;EAAC9I,EAAAA,IAAI,CAAC4jB,MAAM,CAACqX,sBAAsB,GAAC,UAAS/8B,CAAC,EAAC;EAAC,IAAA,OAAOA,CAAC,CAAC4K,OAAO,CAAC,aAAa,EAAC,GAAG,CAAC,CAACA,OAAO,CAAC,0BAA0B,EAAC,EAAE,CAAC,CAAA;KAAC,CAAA;IAAC9I,IAAI,CAAC4jB,MAAM,CAACkJ,IAAI,GAAC9sB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACS,IAAI,CAAA;EACpe9sB,EAAAA,IAAI,CAAC4jB,MAAM,CAACsX,QAAQ,GAAC,UAASh9B,CAAC,EAAC;EAAC,IAAA,OAAOA,CAAC,CAAC4K,OAAO,CAAC,YAAY,EAAC,EAAE,CAAC,CAAA;KAAC,CAAA;EAAC9I,EAAAA,IAAI,CAAC4jB,MAAM,CAACuX,SAAS,GAAC,UAASj9B,CAAC,EAAC;EAAC,IAAA,OAAOA,CAAC,CAAC4K,OAAO,CAAC,YAAY,EAAC,EAAE,CAAC,CAAA;KAAC,CAAA;IAAC9I,IAAI,CAAC4jB,MAAM,CAAC6I,sBAAsB,GAACzsB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACI,sBAAsB,CAAA;IACvNzsB,IAAI,CAAC4jB,MAAM,CAACwX,mBAAmB,GAAC,UAASl9B,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAGF,CAAC,IAAEC,CAAC,EAAC,OAAO,CAAC,CAAA;EAAC,IAAA,IAAG,CAACD,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,IAAA,IAAG,CAACC,CAAC,EAAC,OAAO,CAAC,CAAA;MAAC,KAAI,IAAIG,CAAC,GAACJ,CAAC,CAACyoB,WAAW,EAAE,CAAC6H,KAAK,CAACpwB,CAAC,CAAC,EAACjC,CAAC,GAACgC,CAAC,CAACwoB,WAAW,EAAE,CAAC6H,KAAK,CAACpwB,CAAC,CAAC,EAACnB,CAAC,GAAC0C,IAAI,CAACE,GAAG,CAACvB,CAAC,CAACT,MAAM,EAAC1B,CAAC,CAAC0B,MAAM,CAAC,EAACV,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,EAACE,CAAC,EAAE,EAAC;EAACiB,MAAAA,CAAC,GAACE,CAAC,CAACnB,CAAC,CAAC,CAAA;EAAC,MAAA,IAAIqW,CAAC,GAACrX,CAAC,CAACgB,CAAC,CAAC,CAAA;QAAC,IAAGiB,CAAC,IAAEoV,CAAC,EAAC,OAAOtV,CAAC,GAAC6Y,QAAQ,CAAC3Y,CAAC,EAAC,EAAE,CAAC,EAAC,CAACi9B,KAAK,CAACn9B,CAAC,CAAC,KAAGC,CAAC,GAAC4Y,QAAQ,CAACvD,CAAC,EAAC,EAAE,CAAC,EAAC,CAAC6nB,KAAK,CAACl9B,CAAC,CAAC,IAAED,CAAC,GAACC,CAAC,CAAC,GAACD,CAAC,GAACC,CAAC,GAACC,CAAC,GAACoV,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,CAAA;EAAA,KAAA;MAAC,OAAOlV,CAAC,CAACT,MAAM,IAAE1B,CAAC,CAAC0B,MAAM,GAACS,CAAC,CAACT,MAAM,GAAC1B,CAAC,CAAC0B,MAAM,GAACK,CAAC,GAACC,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC4jB,MAAM,CAAC0X,eAAe,GAAC,UAASp9B,CAAC,EAACC,CAAC,EAAC;MAAC,OAAO6B,IAAI,CAAC4jB,MAAM,CAACwX,mBAAmB,CAACl9B,CAAC,EAACC,CAAC,EAAC,UAAU,CAAC,CAAA;KAAC,CAAA;IAC3c6B,IAAI,CAAC4jB,MAAM,CAAC2X,iBAAiB,GAAC,UAASr9B,CAAC,EAACC,CAAC,EAAC;MAAC,OAAO6B,IAAI,CAAC4jB,MAAM,CAACwX,mBAAmB,CAACl9B,CAAC,EAACC,CAAC,EAAC,gBAAgB,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC4jB,MAAM,CAAC4X,eAAe,GAACx7B,IAAI,CAAC4jB,MAAM,CAAC2X,iBAAiB,CAAA;EAACv7B,EAAAA,IAAI,CAAC4jB,MAAM,CAAC6X,SAAS,GAAC,UAASv9B,CAAC,EAAC;EAAC,IAAA,OAAO+tB,kBAAkB,CAAC5tB,MAAM,CAACH,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC4jB,MAAM,CAAC8X,SAAS,GAAC,UAASx9B,CAAC,EAAC;MAAC,OAAO0wB,kBAAkB,CAAC1wB,CAAC,CAAC4K,OAAO,CAAC,KAAK,EAAC,GAAG,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC9I,IAAI,CAAC4jB,MAAM,CAACmJ,WAAW,GAAC/sB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACU,WAAW,CAAA;IACvX/sB,IAAI,CAAC4jB,MAAM,CAACoJ,UAAU,GAAC,UAAS9uB,CAAC,EAACC,CAAC,EAAC;EAACD,IAAAA,CAAC,GAAC8B,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACW,UAAU,CAAC9uB,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC6B,IAAAA,IAAI,CAAC4jB,MAAM,CAACiW,sBAAsB,KAAG37B,CAAC,GAACA,CAAC,CAAC4K,OAAO,CAAC9I,IAAI,CAAC4jB,MAAM,CAAC+X,KAAK,EAAC,QAAQ,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOz9B,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC4jB,MAAM,CAAC+X,KAAK,GAAC,IAAI,CAAA;EAAC37B,EAAAA,IAAI,CAAC4jB,MAAM,CAACgY,gBAAgB,GAAC,UAAS19B,CAAC,EAAC;EAAC,IAAA,OAAO8B,IAAI,CAAC4jB,MAAM,CAACvY,QAAQ,CAACnN,CAAC,EAAC,GAAG,CAAC,GAAC,CAAC8B,IAAI,CAAC4jB,MAAM,CAACkW,6BAA6B,IAAE,UAAU,IAAG95B,IAAI,CAACb,MAAM,GAACa,IAAI,CAAC4jB,MAAM,CAACiY,yBAAyB,CAAC39B,CAAC,CAAC,GAAC8B,IAAI,CAAC4jB,MAAM,CAACkY,wBAAwB,CAAC59B,CAAC,CAAC,GAACA,CAAC,CAAA;KAAC,CAAA;IAC/Z8B,IAAI,CAAC4jB,MAAM,CAACmY,4BAA4B,GAAC,UAAS79B,CAAC,EAACC,CAAC,EAAC;MAAC,OAAO6B,IAAI,CAAC4jB,MAAM,CAACvY,QAAQ,CAACnN,CAAC,EAAC,GAAG,CAAC,GAAC8B,IAAI,CAAC4jB,MAAM,CAACiY,yBAAyB,CAAC39B,CAAC,EAACC,CAAC,CAAC,GAACD,CAAC,CAAA;KAAC,CAAA;IACvI8B,IAAI,CAAC4jB,MAAM,CAACiY,yBAAyB,GAAC,UAAS39B,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAAC;EAAC,MAAA,OAAO,EAAC,GAAG;EAAC,MAAA,MAAM,EAAC,GAAG;EAAC,MAAA,MAAM,EAAC,GAAG;EAAC,MAAA,QAAQ,EAAC,GAAA;OAAI,CAAA;MAAC,IAAIE,CAAC,GAACH,CAAC,GAACA,CAAC,CAAC6J,aAAa,CAAC,KAAK,CAAC,GAAChI,IAAI,CAACb,MAAM,CAACgC,QAAQ,CAAC6G,aAAa,CAAC,KAAK,CAAC,CAAA;EAAC,IAAA,OAAO9J,CAAC,CAAC4K,OAAO,CAAC9I,IAAI,CAAC4jB,MAAM,CAACoY,oBAAoB,EAAC,UAAS99B,CAAC,EAACC,CAAC,EAAC;EAAC,MAAA,IAAIhC,CAAC,GAACiC,CAAC,CAACF,CAAC,CAAC,CAAA;QAAC,IAAG/B,CAAC,EAAC,OAAOA,CAAC,CAAA;EAAC,MAAA,GAAG,IAAEgC,CAAC,CAACoK,MAAM,CAAC,CAAC,CAAC,KAAGpK,CAAC,GAAC89B,MAAM,CAAC,GAAG,GAAC99B,CAAC,CAACuuB,MAAM,CAAC,CAAC,CAAC,CAAC,EAAC2O,KAAK,CAACl9B,CAAC,CAAC,KAAGhC,CAAC,GAACkC,MAAM,CAACuY,YAAY,CAACzY,CAAC,CAAC,CAAC,CAAC,CAAA;QAAChC,CAAC,KAAG6D,IAAI,CAACgR,GAAG,CAACylB,IAAI,CAACe,YAAY,CAACl5B,CAAC,EAAC0B,IAAI,CAAC6I,IAAI,CAACqtB,oBAAoB,CAACC,4CAA4C,CAACn2B,IAAI,CAAC4jB,MAAM,CAACE,KAAK,CAACQ,IAAI,CAAC,qBAAqB,CAAC,EAC1fpmB,CAAC,GAAC,GAAG,CAAC,CAAC,EAAC/B,CAAC,GAACmC,CAAC,CAAC64B,UAAU,CAAC+E,SAAS,CAAC70B,KAAK,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAA;EAAC,MAAA,OAAOjJ,CAAC,CAACF,CAAC,CAAC,GAAC/B,CAAC,CAAA;EAAA,KAAC,CAAC,CAAA;KAAC,CAAA;EAAC6D,EAAAA,IAAI,CAAC4jB,MAAM,CAACkY,wBAAwB,GAAC,UAAS59B,CAAC,EAAC;MAAC,OAAOA,CAAC,CAAC4K,OAAO,CAAC,YAAY,EAAC,UAAS5K,CAAC,EAACE,CAAC,EAAC;EAAC,MAAA,QAAOA,CAAC;EAAE,QAAA,KAAK,KAAK;EAAC,UAAA,OAAM,GAAG,CAAA;EAAC,QAAA,KAAK,IAAI;EAAC,UAAA,OAAM,GAAG,CAAA;EAAC,QAAA,KAAK,IAAI;EAAC,UAAA,OAAM,GAAG,CAAA;EAAC,QAAA,KAAK,MAAM;EAAC,UAAA,OAAM,GAAG,CAAA;EAAC,QAAA;EAAQ,UAAA,OAAM,GAAG,IAAEA,CAAC,CAACmK,MAAM,CAAC,CAAC,CAAC,KAAGnK,CAAC,GAAC69B,MAAM,CAAC,GAAG,GAAC79B,CAAC,CAACsuB,MAAM,CAAC,CAAC,CAAC,CAAC,EAAC2O,KAAK,CAACj9B,CAAC,CAAC,CAAC,GAACF,CAAC,GAACG,MAAM,CAACuY,YAAY,CAACxY,CAAC,CAAC,CAAA;EAAA,OAAA;EAAC,KAAC,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAAC4jB,MAAM,CAACoY,oBAAoB,GAAC,iBAAiB,CAAA;IAACh8B,IAAI,CAAC4jB,MAAM,CAAC4J,gBAAgB,GAAC,UAAStvB,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO6B,IAAI,CAAC4jB,MAAM,CAACmJ,WAAW,CAAC7uB,CAAC,CAAC4K,OAAO,CAAC,KAAK,EAAC,SAAS,CAAC,EAAC3K,CAAC,CAAC,CAAA;KAAC,CAAA;EACtf6B,EAAAA,IAAI,CAAC4jB,MAAM,CAACuY,cAAc,GAAC,UAASj+B,CAAC,EAAC;EAAC,IAAA,OAAOA,CAAC,CAAC4K,OAAO,CAAC,aAAa,EAAC,IAAI,GAAC9I,IAAI,CAAC4jB,MAAM,CAACmW,OAAO,CAACC,IAAI,CAAC,CAAA;KAAC,CAAA;IAACh6B,IAAI,CAAC4jB,MAAM,CAACwY,WAAW,GAAC,UAASl+B,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIC,CAAC,GAACD,CAAC,CAACN,MAAM,EAACS,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,EAACE,CAAC,EAAE,EAAC;EAAC,MAAA,IAAInC,CAAC,GAAC,CAAC,IAAEiC,CAAC,GAACD,CAAC,GAACA,CAAC,CAACoK,MAAM,CAACjK,CAAC,CAAC,CAAA;EAAC,MAAA,IAAGJ,CAAC,CAACqK,MAAM,CAAC,CAAC,CAAC,IAAEpM,CAAC,IAAE+B,CAAC,CAACqK,MAAM,CAACrK,CAAC,CAACL,MAAM,GAAC,CAAC,CAAC,IAAE1B,CAAC,EAAC,OAAO+B,CAAC,CAAC8Y,SAAS,CAAC,CAAC,EAAC9Y,CAAC,CAACL,MAAM,GAAC,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOK,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC4jB,MAAM,CAACyY,QAAQ,GAAC,UAASn+B,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAACA,CAAC,KAAGF,CAAC,GAAC8B,IAAI,CAAC4jB,MAAM,CAACgY,gBAAgB,CAAC19B,CAAC,CAAC,CAAC,CAAA;EAACA,IAAAA,CAAC,CAACL,MAAM,GAACM,CAAC,KAAGD,CAAC,GAACA,CAAC,CAAC8Y,SAAS,CAAC,CAAC,EAAC7Y,CAAC,GAAC,CAAC,CAAC,GAAC,KAAK,CAAC,CAAA;MAACC,CAAC,KAAGF,CAAC,GAAC8B,IAAI,CAAC4jB,MAAM,CAACoJ,UAAU,CAAC9uB,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOA,CAAC,CAAA;KAAC,CAAA;EAC1b8B,EAAAA,IAAI,CAAC4jB,MAAM,CAAC0Y,cAAc,GAAC,UAASp+B,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAACF,CAAC,KAAGF,CAAC,GAAC8B,IAAI,CAAC4jB,MAAM,CAACgY,gBAAgB,CAAC19B,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAGI,CAAC,IAAEJ,CAAC,CAACL,MAAM,GAACM,CAAC,EAAC;EAACG,MAAAA,CAAC,GAACH,CAAC,KAAGG,CAAC,GAACH,CAAC,CAAC,CAAA;EAAC,MAAA,IAAIhC,CAAC,GAAC+B,CAAC,CAACL,MAAM,GAACS,CAAC,CAAA;EAACJ,MAAAA,CAAC,GAACA,CAAC,CAAC8Y,SAAS,CAAC,CAAC,EAAC7Y,CAAC,GAACG,CAAC,CAAC,GAAC,KAAK,GAACJ,CAAC,CAAC8Y,SAAS,CAAC7a,CAAC,CAAC,CAAA;OAAC,MAAK+B,CAAC,CAACL,MAAM,GAACM,CAAC,KAAGG,CAAC,GAACqB,IAAI,CAAC0W,KAAK,CAAClY,CAAC,GAAC,CAAC,CAAC,EAAChC,CAAC,GAAC+B,CAAC,CAACL,MAAM,GAACS,CAAC,EAACJ,CAAC,GAACA,CAAC,CAAC8Y,SAAS,CAAC,CAAC,EAAC1Y,CAAC,GAACH,CAAC,GAAC,CAAC,CAAC,GAAC,KAAK,GAACD,CAAC,CAAC8Y,SAAS,CAAC7a,CAAC,CAAC,CAAC,CAAA;MAACiC,CAAC,KAAGF,CAAC,GAAC8B,IAAI,CAAC4jB,MAAM,CAACoJ,UAAU,CAAC9uB,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOA,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC4jB,MAAM,CAAC2Y,mBAAmB,GAAC;EAAC,IAAA,MAAM,EAAC,KAAK;EAAC,IAAA,IAAI,EAAC,KAAK;EAAC,IAAA,IAAI,EAAC,KAAK;EAAC,IAAA,IAAI,EAAC,KAAK;EAAC,IAAA,IAAI,EAAC,KAAK;EAAC,IAAA,IAAI,EAAC,KAAK;EAAC,IAAA,MAAM,EAAC,OAAO;EAAC,IAAA,GAAG,EAAC,KAAK;EAAC,IAAA,IAAI,EAAC,MAAM;EAAC,IAAA,GAAG,EAAC,SAAA;KAAU,CAAA;EAACv8B,EAAAA,IAAI,CAAC4jB,MAAM,CAAC4Y,cAAc,GAAC;EAAC,IAAA,GAAG,EAAC,KAAA;KAAM,CAAA;EACpfx8B,EAAAA,IAAI,CAAC4jB,MAAM,CAAC6Y,KAAK,GAAC,UAASv+B,CAAC,EAAC;EAACA,IAAAA,CAAC,GAACG,MAAM,CAACH,CAAC,CAAC,CAAA;EAAC,IAAA,KAAI,IAAIC,CAAC,GAAC,CAAC,GAAG,CAAC,EAACC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,CAACL,MAAM,EAACO,CAAC,EAAE,EAAC;EAAC,MAAA,IAAIE,CAAC,GAACJ,CAAC,CAACqK,MAAM,CAACnK,CAAC,CAAC;EAACjC,QAAAA,CAAC,GAACmC,CAAC,CAACoY,UAAU,CAAC,CAAC,CAAC,CAAA;EAACvY,MAAAA,CAAC,CAACC,CAAC,GAAC,CAAC,CAAC,GAAC4B,IAAI,CAAC4jB,MAAM,CAAC2Y,mBAAmB,CAACj+B,CAAC,CAAC,KAAG,EAAE,GAACnC,CAAC,IAAE,GAAG,GAACA,CAAC,GAACmC,CAAC,GAAC0B,IAAI,CAAC4jB,MAAM,CAAC8Y,UAAU,CAACp+B,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;EAACH,IAAAA,CAAC,CAACL,IAAI,CAAC,GAAG,CAAC,CAAA;EAAC,IAAA,OAAOK,CAAC,CAAC6G,IAAI,CAAC,EAAE,CAAC,CAAA;KAAC,CAAA;EAAChF,EAAAA,IAAI,CAAC4jB,MAAM,CAAC+Y,YAAY,GAAC,UAASz+B,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIC,CAAC,GAAC,EAAE,EAACC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,CAACL,MAAM,EAACO,CAAC,EAAE,EAAA;EAACD,MAAAA,CAAC,CAACC,CAAC,CAAC,GAAC4B,IAAI,CAAC4jB,MAAM,CAAC8Y,UAAU,CAACx+B,CAAC,CAACqK,MAAM,CAACnK,CAAC,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOD,CAAC,CAAC6G,IAAI,CAAC,EAAE,CAAC,CAAA;KAAC,CAAA;EACtWhF,EAAAA,IAAI,CAAC4jB,MAAM,CAAC8Y,UAAU,GAAC,UAASx+B,CAAC,EAAC;EAAC,IAAA,IAAGA,CAAC,IAAI8B,IAAI,CAAC4jB,MAAM,CAAC4Y,cAAc,EAAC,OAAOx8B,IAAI,CAAC4jB,MAAM,CAAC4Y,cAAc,CAACt+B,CAAC,CAAC,CAAA;MAAC,IAAGA,CAAC,IAAI8B,IAAI,CAAC4jB,MAAM,CAAC2Y,mBAAmB,EAAC,OAAOv8B,IAAI,CAAC4jB,MAAM,CAAC4Y,cAAc,CAACt+B,CAAC,CAAC,GAAC8B,IAAI,CAAC4jB,MAAM,CAAC2Y,mBAAmB,CAACr+B,CAAC,CAAC,CAAA;EAAC,IAAA,IAAIC,CAAC,GAACD,CAAC,CAACwY,UAAU,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAG,EAAE,GAACvY,CAAC,IAAE,GAAG,GAACA,CAAC,EAAC,IAAIC,CAAC,GAACF,CAAC,CAAC,KAAI;QAAC,IAAG,GAAG,GAACC,CAAC,EAAC;EAAC,QAAA,IAAGC,CAAC,GAAC,KAAK,EAAC,EAAE,GAACD,CAAC,IAAE,GAAG,GAACA,CAAC,EAACC,CAAC,IAAE,GAAG,CAAA;EAAA,OAAC,MAAKA,CAAC,GAAC,KAAK,EAAC,IAAI,GAACD,CAAC,KAAGC,CAAC,IAAE,GAAG,CAAC,CAAA;QAACA,CAAC,IAAED,CAAC,CAAC2H,QAAQ,CAAC,EAAE,CAAC,CAACkvB,WAAW,EAAE,CAAA;EAAA,KAAA;MAAC,OAAOh1B,IAAI,CAAC4jB,MAAM,CAAC4Y,cAAc,CAACt+B,CAAC,CAAC,GAACE,CAAC,CAAA;KAAC,CAAA;IAAC4B,IAAI,CAAC4jB,MAAM,CAACvY,QAAQ,GAACrL,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAAChhB,QAAQ,CAAA;IAACrL,IAAI,CAAC4jB,MAAM,CAAC6J,uBAAuB,GAACztB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACoB,uBAAuB,CAAA;IAC9hBztB,IAAI,CAAC4jB,MAAM,CAACgZ,OAAO,GAAC,UAAS1+B,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAOD,CAAC,IAAEC,CAAC,GAACD,CAAC,CAACoB,KAAK,CAACnB,CAAC,CAAC,CAACN,MAAM,GAAC,CAAC,GAAC,CAAC,CAAA;KAAC,CAAA;IAACmC,IAAI,CAAC4jB,MAAM,CAACvP,QAAQ,GAAC,UAASnW,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIE,CAAC,GAACJ,CAAC,CAAA;EAAC,IAAA,CAAC,IAAEC,CAAC,IAAEA,CAAC,GAACD,CAAC,CAACL,MAAM,IAAE,CAAC,GAACO,CAAC,KAAGE,CAAC,GAACJ,CAAC,CAACwuB,MAAM,CAAC,CAAC,EAACvuB,CAAC,CAAC,GAACD,CAAC,CAACwuB,MAAM,CAACvuB,CAAC,GAACC,CAAC,EAACF,CAAC,CAACL,MAAM,GAACM,CAAC,GAACC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOE,CAAC,CAAA;KAAC,CAAA;IAAC0B,IAAI,CAAC4jB,MAAM,CAAC7X,MAAM,GAAC,UAAS7N,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAOD,CAAC,CAAC4K,OAAO,CAAC3K,CAAC,EAAC,EAAE,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC4jB,MAAM,CAACiZ,SAAS,GAAC,UAAS3+B,CAAC,EAACC,CAAC,EAAC;EAACA,IAAAA,CAAC,GAAC,IAAIuB,MAAM,CAACM,IAAI,CAAC4jB,MAAM,CAACkZ,YAAY,CAAC3+B,CAAC,CAAC,EAAC,GAAG,CAAC,CAAA;EAAC,IAAA,OAAOD,CAAC,CAAC4K,OAAO,CAAC3K,CAAC,EAAC,EAAE,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAAC4jB,MAAM,CAACmZ,UAAU,GAAC,UAAS7+B,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAACD,IAAAA,CAAC,GAAC,IAAIuB,MAAM,CAACM,IAAI,CAAC4jB,MAAM,CAACkZ,YAAY,CAAC3+B,CAAC,CAAC,EAAC,GAAG,CAAC,CAAA;EAAC,IAAA,OAAOD,CAAC,CAAC4K,OAAO,CAAC3K,CAAC,EAACC,CAAC,CAAC0K,OAAO,CAAC,KAAK,EAAC,MAAM,CAAC,CAAC,CAAA;KAAC,CAAA;EACpe9I,EAAAA,IAAI,CAAC4jB,MAAM,CAACkZ,YAAY,GAAC,UAAS5+B,CAAC,EAAC;EAAC,IAAA,OAAOG,MAAM,CAACH,CAAC,CAAC,CAAC4K,OAAO,CAAC,+BAA+B,EAAC,MAAM,CAAC,CAACA,OAAO,CAAC,OAAO,EAAC,OAAO,CAAC,CAAA;KAAC,CAAA;EAAC9I,EAAAA,IAAI,CAAC4jB,MAAM,CAAC7N,MAAM,GAAC1X,MAAM,CAACW,SAAS,CAAC+W,MAAM,GAAC,UAAS7X,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAOD,CAAC,CAAC6X,MAAM,CAAC5X,CAAC,CAAC,CAAA;EAAA,GAAC,GAAC,UAASD,CAAC,EAACC,CAAC,EAAC;MAAC,OAAOY,KAAK,CAACZ,CAAC,GAAC,CAAC,CAAC,CAAC6G,IAAI,CAAC9G,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAAC4jB,MAAM,CAACoZ,SAAS,GAAC,UAAS9+B,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAACF,IAAAA,CAAC,GAAC,KAAK,CAAC,KAAGE,CAAC,GAACF,CAAC,CAAC++B,OAAO,CAAC7+B,CAAC,CAAC,GAACC,MAAM,CAACH,CAAC,CAAC,CAAA;EAACE,IAAAA,CAAC,GAACF,CAAC,CAACsJ,OAAO,CAAC,GAAG,CAAC,CAAA;MAAC,CAAC,CAAC,IAAEpJ,CAAC,KAAGA,CAAC,GAACF,CAAC,CAACL,MAAM,CAAC,CAAA;MAAC,OAAOmC,IAAI,CAAC4jB,MAAM,CAAC7N,MAAM,CAAC,GAAG,EAACpW,IAAI,CAACC,GAAG,CAAC,CAAC,EAACzB,CAAC,GAACC,CAAC,CAAC,CAAC,GAACF,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC4jB,MAAM,CAACyW,QAAQ,GAAC,UAASn8B,CAAC,EAAC;MAAC,OAAO,IAAI,IAAEA,CAAC,GAAC,EAAE,GAACG,MAAM,CAACH,CAAC,CAAC,CAAA;KAAC,CAAA;EACpd8B,EAAAA,IAAI,CAAC4jB,MAAM,CAACsZ,WAAW,GAAC,UAASh/B,CAAC,EAAC;MAAC,OAAOa,KAAK,CAACC,SAAS,CAACgG,IAAI,CAACrH,IAAI,CAACwJ,SAAS,EAAC,EAAE,CAAC,CAAA;KAAC,CAAA;EAACnH,EAAAA,IAAI,CAAC4jB,MAAM,CAACuZ,eAAe,GAAC,YAAU;EAAC,IAAA,OAAOx9B,IAAI,CAAC0W,KAAK,CAAC,UAAU,GAAC1W,IAAI,CAACiH,MAAM,EAAE,CAAC,CAACd,QAAQ,CAAC,EAAE,CAAC,GAACnG,IAAI,CAACy9B,GAAG,CAACz9B,IAAI,CAAC0W,KAAK,CAAC,UAAU,GAAC1W,IAAI,CAACiH,MAAM,EAAE,CAAC,GAAC5G,IAAI,CAAC2H,GAAG,EAAE,CAAC,CAAC7B,QAAQ,CAAC,EAAE,CAAC,CAAA;KAAC,CAAA;IAAC9F,IAAI,CAAC4jB,MAAM,CAAC8J,eAAe,GAAC1tB,IAAI,CAAC4jB,MAAM,CAACyI,QAAQ,CAACqB,eAAe,CAAA;EAAC1tB,EAAAA,IAAI,CAAC4jB,MAAM,CAACyZ,QAAQ,GAAC,UAASn/B,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,CAACL,MAAM,EAAC,EAAEO,CAAC,EAAA;EAACD,MAAAA,CAAC,GAAC,EAAE,GAACA,CAAC,GAACD,CAAC,CAACwY,UAAU,CAACtY,CAAC,CAAC,KAAG,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOD,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAAC4jB,MAAM,CAAC0Z,oBAAoB,GAAC,UAAU,GAAC39B,IAAI,CAACiH,MAAM,EAAE,GAAC,CAAC,CAAA;EAC7d5G,EAAAA,IAAI,CAAC4jB,MAAM,CAAC2Z,kBAAkB,GAAC,YAAU;EAAC,IAAA,OAAM,OAAO,GAACv9B,IAAI,CAAC4jB,MAAM,CAAC0Z,oBAAoB,EAAE,CAAA;KAAC,CAAA;EAACt9B,EAAAA,IAAI,CAAC4jB,MAAM,CAAC4Z,QAAQ,GAAC,UAASt/B,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAAC89B,MAAM,CAAC/9B,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO,CAAC,IAAEC,CAAC,IAAE6B,IAAI,CAAC4jB,MAAM,CAACiJ,mBAAmB,CAAC3uB,CAAC,CAAC,GAACu/B,GAAG,GAACt/B,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAAC4jB,MAAM,CAAC8Z,gBAAgB,GAAC,UAASx/B,CAAC,EAAC;EAAC,IAAA,OAAM,wBAAwB,CAACuD,IAAI,CAACvD,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC4jB,MAAM,CAAC+Z,gBAAgB,GAAC,UAASz/B,CAAC,EAAC;EAAC,IAAA,OAAM,kBAAkB,CAACuD,IAAI,CAACvD,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAAC4jB,MAAM,CAACga,WAAW,GAAC,UAAS1/B,CAAC,EAAC;EAAC,IAAA,OAAOG,MAAM,CAACH,CAAC,CAAC,CAAC4K,OAAO,CAAC,YAAY,EAAC,UAAS5K,CAAC,EAACE,CAAC,EAAC;QAAC,OAAOA,CAAC,CAAC42B,WAAW,EAAE,CAAA;EAAA,KAAC,CAAC,CAAA;KAAC,CAAA;EACjdh1B,EAAAA,IAAI,CAAC4jB,MAAM,CAACia,cAAc,GAAC,UAAS3/B,CAAC,EAAC;EAAC,IAAA,OAAOG,MAAM,CAACH,CAAC,CAAC,CAAC4K,OAAO,CAAC,UAAU,EAAC,KAAK,CAAC,CAAC6d,WAAW,EAAE,CAAA;KAAC,CAAA;IAAC3mB,IAAI,CAAC4jB,MAAM,CAACka,WAAW,GAAC,UAAS5/B,CAAC,EAACC,CAAC,EAAC;EAACA,IAAAA,CAAC,GAAC,QAAQ,KAAG,OAAOA,CAAC,GAAC6B,IAAI,CAAC4jB,MAAM,CAACkZ,YAAY,CAAC3+B,CAAC,CAAC,GAAC,KAAK,CAAA;EAAC,IAAA,OAAOD,CAAC,CAAC4K,OAAO,CAAC,IAAIpJ,MAAM,CAAC,IAAI,IAAEvB,CAAC,GAAC,IAAI,GAACA,CAAC,GAAC,IAAI,GAAC,EAAE,CAAC,GAAC,UAAU,EAAC,GAAG,CAAC,EAAC,UAASD,CAAC,EAACC,CAAC,EAAChC,CAAC,EAAC;EAAC,MAAA,OAAOgC,CAAC,GAAChC,CAAC,CAAC64B,WAAW,EAAE,CAAA;EAAA,KAAC,CAAC,CAAA;KAAC,CAAA;EAACh1B,EAAAA,IAAI,CAAC4jB,MAAM,CAACma,UAAU,GAAC,UAAS7/B,CAAC,EAAC;MAAC,OAAOG,MAAM,CAACH,CAAC,CAACqK,MAAM,CAAC,CAAC,CAAC,CAAC,CAACysB,WAAW,EAAE,GAAC32B,MAAM,CAACH,CAAC,CAACwuB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC/F,WAAW,EAAE,CAAA;KAAC,CAAA;EAC7Z3mB,EAAAA,IAAI,CAAC4jB,MAAM,CAAC7M,QAAQ,GAAC,UAAS7Y,CAAC,EAAC;MAAC6U,QAAQ,CAAC7U,CAAC,CAAC,KAAGA,CAAC,GAACG,MAAM,CAACH,CAAC,CAAC,CAAC,CAAA;MAAC,OAAM,QAAQ,KAAG,OAAOA,CAAC,GAAC,WAAW,CAACuD,IAAI,CAACvD,CAAC,CAAC,GAAC6Y,QAAQ,CAAC7Y,CAAC,EAAC,EAAE,CAAC,GAAC6Y,QAAQ,CAAC7Y,CAAC,EAAC,EAAE,CAAC,GAACu/B,GAAG,CAAA;KAAC,CAAA;IAACz9B,IAAI,CAAC4jB,MAAM,CAACoa,UAAU,GAAC,UAAS9/B,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAACF,IAAAA,CAAC,GAACA,CAAC,CAACoB,KAAK,CAACnB,CAAC,CAAC,CAAA;MAAC,KAAI,IAAIG,CAAC,GAAC,EAAE,EAAC,CAAC,GAACF,CAAC,IAAEF,CAAC,CAACL,MAAM,GAAA;QAAES,CAAC,CAACR,IAAI,CAACI,CAAC,CAACkC,KAAK,EAAE,CAAC,EAAChC,CAAC,EAAE,CAAA;EAAC,KAAA;EAAAF,IAAAA,CAAC,CAACL,MAAM,IAAES,CAAC,CAACR,IAAI,CAACI,CAAC,CAAC8G,IAAI,CAAC7G,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOG,CAAC,CAAA;KAAC,CAAA;IAAC0B,IAAI,CAAC4jB,MAAM,CAACqa,aAAa,GAAC,UAAS//B,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAGA,CAAC,EAAC,QAAQ,IAAE,OAAOA,CAAC,KAAGA,CAAC,GAAC,CAACA,CAAC,CAAC,CAAC,CAAC,KAAK,OAAOD,CAAC,CAAA;EAAC,IAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,CAAC,EAACE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACH,CAAC,CAACN,MAAM,EAACS,CAAC,EAAE,EAAA;EAAC,MAAA,IAAG,EAAE,IAAEH,CAAC,CAACG,CAAC,CAAC,EAAC;UAAC,IAAInC,CAAC,GAAC+B,CAAC,CAACoV,WAAW,CAACnV,CAAC,CAACG,CAAC,CAAC,CAAC,CAAA;EAACnC,QAAAA,CAAC,GAACiC,CAAC,KAAGA,CAAC,GAACjC,CAAC,CAAC,CAAA;EAAA,OAAA;EAAC,KAAA;EAAA,IAAA,OAAM,CAAC,CAAC,IAAEiC,CAAC,GAACF,CAAC,GAACA,CAAC,CAACmJ,KAAK,CAACjJ,CAAC,GAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAC7d4B,IAAI,CAAC4jB,MAAM,CAACsa,YAAY,GAAC,UAAShgC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,EAAE;EAACE,MAAAA,CAAC,GAAC,EAAE,CAAA;EAAC,IAAA,IAAGJ,CAAC,IAAEC,CAAC,EAAC,OAAO,CAAC,CAAA;MAAC,IAAG,CAACD,CAAC,CAACL,MAAM,IAAE,CAACM,CAAC,CAACN,MAAM,EAAC,OAAO8B,IAAI,CAACC,GAAG,CAAC1B,CAAC,CAACL,MAAM,EAACM,CAAC,CAACN,MAAM,CAAC,CAAA;EAAC,IAAA,KAAI,IAAI1B,CAAC,GAAC,CAAC,EAACA,CAAC,GAACgC,CAAC,CAACN,MAAM,GAAC,CAAC,EAAC1B,CAAC,EAAE,EAAA;EAACiC,MAAAA,CAAC,CAACjC,CAAC,CAAC,GAACA,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,KAAIA,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC+B,CAAC,CAACL,MAAM,EAAC1B,CAAC,EAAE,EAAC;EAACmC,MAAAA,CAAC,CAAC,CAAC,CAAC,GAACnC,CAAC,GAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAIc,CAAC,GAAC,CAAC,EAACA,CAAC,GAACkB,CAAC,CAACN,MAAM,EAACZ,CAAC,EAAE,EAAA;EAACqB,QAAAA,CAAC,CAACrB,CAAC,GAAC,CAAC,CAAC,GAAC0C,IAAI,CAACE,GAAG,CAACvB,CAAC,CAACrB,CAAC,CAAC,GAAC,CAAC,EAACmB,CAAC,CAACnB,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,EAACmB,CAAC,CAACnB,CAAC,CAAC,GAACg/B,MAAM,CAAC/9B,CAAC,CAAC/B,CAAC,CAAC,IAAEgC,CAAC,CAAClB,CAAC,CAAC,CAAC,CAAC,CAAA;EAAC,OAAA;QAAA,KAAIA,CAAC,GAAC,CAAC,EAACA,CAAC,GAACmB,CAAC,CAACP,MAAM,EAACZ,CAAC,EAAE,EAAA;EAACmB,QAAAA,CAAC,CAACnB,CAAC,CAAC,GAACqB,CAAC,CAACrB,CAAC,CAAC,CAAA;EAAA,OAAA;EAAA,KAAA;EAAC,IAAA,OAAOqB,CAAC,CAACH,CAAC,CAACN,MAAM,CAAC,CAAA;KAAC,CAAA;IAACmC,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,GAAC,EAAE,CAAA;IAACn+B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAACC,QAAQ,GAAC,YAAU;MAAC,OAAOp+B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,QAAQ,CAAC,CAAA;KAAC,CAAA;IAAC1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAACE,SAAS,GAAC,YAAU;MAAC,OAAOr+B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,SAAS,CAAC,IAAE1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,MAAM,CAAC,CAAA;KAAC,CAAA;IAAC1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAACrL,MAAM,GAAC,YAAU;MAAC,OAAO9yB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,MAAM,CAAC,CAAA;KAAC,CAAA;IACttB1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAACG,QAAQ,GAAC,YAAU;MAAC,OAAOt+B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACQ,wBAAwB,CAAC,QAAQ,CAAC,IAAE,CAAC3xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAACrL,MAAM,EAAE,CAAA;KAAC,CAAA;IAAC9yB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAACI,OAAO,GAAC,YAAU;MAAC,OAAOv+B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,OAAO,CAAC,IAAE,CAAC1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAACG,QAAQ,EAAE,IAAE,CAACt+B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAACE,SAAS,EAAE,IAAE,CAACr+B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAACrL,MAAM,EAAE,CAAA;KAAC,CAAA;IACtX9yB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAAC9K,UAAU,GAAC,YAAU;MAAC,IAAIn1B,CAAC,GAAC8B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACM,YAAY,EAAE,CAAA;EAAC,IAAA,IAAGvzB,CAAC,EAAC;EAACA,MAAAA,CAAC,GAAC8B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACS,oBAAoB,CAAC1zB,CAAC,CAAC,CAAA;EAAC,MAAA,IAAIC,CAAC,GAAC6B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAACK,eAAe,CAACtgC,CAAC,CAAC,CAAA;EAAC,MAAA,IAAGC,CAAC,EAAC,OAAM,OAAO,IAAEA,CAAC,CAAC,CAAC,CAAC,GAAC6B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAACM,iBAAiB,CAACvgC,CAAC,EAAC,SAAS,CAAC,GAACC,CAAC,CAAC,CAAC,CAAC,CAAA;EAACD,MAAAA,CAAC,GAACA,CAAC,CAAC,CAAC,CAAC,CAAA;EAAC,MAAA,IAAIE,CAAC,CAAA;QAAC,IAAGF,CAAC,KAAGE,CAAC,GAACF,CAAC,CAAC,CAAC,CAAC,CAAC,KAAGE,CAAC,GAAC,oBAAoB,CAACstB,IAAI,CAACttB,CAAC,CAAC,CAAC,EAAC,OAAOA,CAAC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAM,EAAE,CAAA;KAAC,CAAA;IACvX4B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAACK,eAAe,GAAC,UAAStgC,CAAC,EAAC;EAAC,IAAA,IAAG,CAAC8B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAACrL,MAAM,EAAE,EAAC,OAAO50B,CAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACL,MAAM,EAACM,CAAC,EAAE,EAAC;EAAC,MAAA,IAAIC,CAAC,GAACF,CAAC,CAACC,CAAC,CAAC,CAAA;QAAC,IAAG,MAAM,IAAEC,CAAC,CAAC,CAAC,CAAC,EAAC,OAAOA,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;IAAC4B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAAC5K,iBAAiB,GAAC,UAASr1B,CAAC,EAAC;MAAC,OAAO,CAAC,IAAE8B,IAAI,CAAC4jB,MAAM,CAAC8J,eAAe,CAAC1tB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAAC9K,UAAU,EAAE,EAACn1B,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAACM,iBAAiB,GAAC,UAASvgC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAM,CAACD,CAAC,GAAC8B,IAAI,CAACiT,KAAK,CAACY,IAAI,CAAC3V,CAAC,EAAC,UAASA,CAAC,EAAC;EAAC,MAAA,OAAOC,CAAC,IAAED,CAAC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAC,CAAC,KAAGA,CAAC,CAAC,CAAC,CAAC,IAAE,EAAE,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,GAAC,EAAE,CAAA;IAAC1+B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACC,SAAS,GAAC,YAAU;MAAC,OAAO3+B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,SAAS,CAAC,CAAA;KAAC,CAAA;IAAC1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACE,MAAM,GAAC,YAAU;MAAC,OAAO5+B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,MAAM,CAAC,CAAA;KAAC,CAAA;IAAC1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACG,QAAQ,GAAC,YAAU;EAAC,IAAA,OAAO7+B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,QAAQ,CAAC,IAAE,CAAC1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,MAAM,CAAC,IAAE,CAAC1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,MAAM,CAAC,CAAA;KAAC,CAAA;IAAC1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACI,MAAM,GAAC,YAAU;MAAC,OAAO9+B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,MAAM,CAAC,CAAA;KAAC,CAAA;IACh+B1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACK,KAAK,GAAC,YAAU;EAAC,IAAA,OAAO/+B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACG,QAAQ,EAAE,IAAE7+B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACI,MAAM,EAAE,IAAE9+B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACE,MAAM,EAAE,CAAA;KAAC,CAAA;IAAC5+B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACM,WAAW,GAAC,YAAU;MAAC,OAAOh/B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,WAAW,CAAC,CAAA;KAAC,CAAA;IAAC1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACO,OAAO,GAAC,YAAU;MAAC,OAAOj/B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,OAAO,CAAC,CAAA;KAAC,CAAA;IAAC1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACQ,SAAS,GAAC,YAAU;MAAC,OAAOl/B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,SAAS,CAAC,CAAA;KAAC,CAAA;IAClf1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACS,UAAU,GAAC,YAAU;MAAC,OAAOn/B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,MAAM,CAAC,CAAA;KAAC,CAAA;IAAC1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACU,YAAY,GAAC,YAAU;MAAC,OAAOp/B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,OAAO,CAAC,CAAA;KAAC,CAAA;IAAC1xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACW,OAAO,GAAC,YAAU;MAAC,OAAOr/B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACQ,wBAAwB,CAAC,OAAO,CAAC,CAAA;KAAC,CAAA;IAC3U3xB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACrL,UAAU,GAAC,YAAU;MAAC,IAAIn1B,CAAC,GAAC8B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACM,YAAY,EAAE;EAACtzB,MAAAA,CAAC,GAAC,EAAE,CAAA;MAAC6B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACQ,SAAS,EAAE,IAAE/gC,CAAC,GAAC,gCAAgC,EAACA,CAAC,GAAC,CAACD,CAAC,GAACC,CAAC,CAACutB,IAAI,CAACxtB,CAAC,CAAC,IAAEA,CAAC,CAAC,CAAC,CAAC,GAAC,KAAK,IAAE8B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACK,KAAK,EAAE,IAAE5gC,CAAC,GAAC,uCAAuC,EAACA,CAAC,GAAC,CAACD,CAAC,GAACC,CAAC,CAACutB,IAAI,CAACxtB,CAAC,CAAC,KAAGA,CAAC,CAAC,CAAC,CAAC,CAAC4K,OAAO,CAAC,IAAI,EAAC,GAAG,CAAC,IAAE9I,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACM,WAAW,EAAE,IAAE7gC,CAAC,GAAC,qBAAqB,EAACA,CAAC,GAAC,CAACD,CAAC,GAACC,CAAC,CAACutB,IAAI,CAACxtB,CAAC,CAAC,IAAEA,CAAC,CAAC,CAAC,CAAC,CAAC4K,OAAO,CAAC,IAAI,EAAC,GAAG,CAAC,GAAC,IAAI,IAAE9I,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACW,OAAO,EAAE,IAAElhC,CAAC,GAAC,mBAAmB,EACtfA,CAAC,GAAC,CAACD,CAAC,GAACC,CAAC,CAACutB,IAAI,CAACxtB,CAAC,CAAC,KAAGA,CAAC,CAAC,CAAC,CAAC,IAAE8B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACC,SAAS,EAAE,IAAExgC,CAAC,GAAC,2BAA2B,EAACA,CAAC,GAAC,CAACD,CAAC,GAACC,CAAC,CAACutB,IAAI,CAACxtB,CAAC,CAAC,KAAGA,CAAC,CAAC,CAAC,CAAC,IAAE8B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACS,UAAU,EAAE,KAAGhhC,CAAC,GAAC,wCAAwC,EAACA,CAAC,GAAC,CAACD,CAAC,GAACC,CAAC,CAACutB,IAAI,CAACxtB,CAAC,CAAC,KAAGA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;MAAC,OAAOC,CAAC,IAAE,EAAE,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACnL,iBAAiB,GAAC,UAASr1B,CAAC,EAAC;MAAC,OAAO,CAAC,IAAE8B,IAAI,CAAC4jB,MAAM,CAAC8J,eAAe,CAAC1tB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACrL,UAAU,EAAE,EAACn1B,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACs/B,OAAO,GAAC,EAAE,CAAA;IAACt/B,IAAI,CAACs/B,OAAO,CAAC30B,MAAM,GAAC,UAASzM,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAOA,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACs/B,OAAO,CAACC,cAAc,GAAC,UAASrhC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAOD,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACs/B,OAAO,CAACE,SAAS,GAAC,UAASthC,CAAC,EAAC;MAAC8B,IAAI,CAACs/B,OAAO,CAACE,SAAS,CAAC,GAAG,CAAC,CAACthC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOA,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACs/B,OAAO,CAACE,SAAS,CAAC,GAAG,CAAC,GAACx/B,IAAI,CAACyD,YAAY,CAAA;IAACzD,IAAI,CAACs/B,OAAO,CAACG,iBAAiB,GAAC,UAASvhC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAG;EAAC,MAAA,OAAO6B,IAAI,CAACs/B,OAAO,CAACE,SAAS,CAACthC,CAAC,CAACC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAA;OAAC,CAAA,OAAMC,CAAC,EAAC,EAAE;EAAA,IAAA,OAAM,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACs/B,OAAO,CAACI,KAAK,GAAC,UAASxhC,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAACA,CAAC,GAACA,CAAC,GAACA,CAAC,CAACH,CAAC,CAAC,GAACA,CAAC,CAAA;MAAC,OAAOU,MAAM,CAACG,SAAS,CAACsH,cAAc,CAAC3I,IAAI,CAACO,CAAC,EAACI,CAAC,CAAC,GAACJ,CAAC,CAACI,CAAC,CAAC,GAACJ,CAAC,CAACI,CAAC,CAAC,GAACF,CAAC,CAACD,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACkxB,SAAS,GAAC,EAAE,CAAA;EAAClxB,EAAAA,IAAI,CAACkxB,SAAS,CAACyO,SAAS,GAAC,CAAC,CAAC,CAAA;EAAC3/B,EAAAA,IAAI,CAACkxB,SAAS,CAAC0O,WAAW,GAAC,CAAC,CAAC,CAAA;EAAC5/B,EAAAA,IAAI,CAACkxB,SAAS,CAAC2O,YAAY,GAAC,CAAC,CAAC,CAAA;EAAC7/B,EAAAA,IAAI,CAACkxB,SAAS,CAAC4O,aAAa,GAAC,CAAC,CAAC,CAAA;EAAC9/B,EAAAA,IAAI,CAACkxB,SAAS,CAAC6O,oBAAoB,GAAC,CAAC,CAAC,CAAA;EAAC//B,EAAAA,IAAI,CAACkxB,SAAS,CAAC8O,YAAY,GAAC,CAAC,CAAC,CAAA;EAAChgC,EAAAA,IAAI,CAACkxB,SAAS,CAAC+O,kBAAkB,GAAC,CAAC,CAAC,CAAA;EAACjgC,EAAAA,IAAI,CAACkxB,SAAS,CAACgP,cAAc,GAAClgC,IAAI,CAACkxB,SAAS,CAACyO,SAAS,IAAE3/B,IAAI,CAACkxB,SAAS,CAAC0O,WAAW,IAAE5/B,IAAI,CAACkxB,SAAS,CAAC2O,YAAY,IAAE7/B,IAAI,CAACkxB,SAAS,CAAC6O,oBAAoB,IAAE//B,IAAI,CAACkxB,SAAS,CAAC4O,aAAa,IAAE9/B,IAAI,CAACkxB,SAAS,CAAC8O,YAAY,CAAA;EAAChgC,EAAAA,IAAI,CAACkxB,SAAS,CAACiP,kBAAkB,GAAC,YAAU;MAAC,OAAOngC,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACM,YAAY,EAAE,CAAA;KAAC,CAAA;EAC12CzxB,EAAAA,IAAI,CAACkxB,SAAS,CAACkP,iBAAiB,GAAC,YAAU;EAAC,IAAA,OAAOpgC,IAAI,CAACb,MAAM,CAACmyB,SAAS,IAAE,IAAI,CAAA;KAAC,CAAA;EAACtxB,EAAAA,IAAI,CAACkxB,SAAS,CAACmP,YAAY,GAAC,YAAU;EAAC,IAAA,OAAOrgC,IAAI,CAACkxB,SAAS,CAACkP,iBAAiB,EAAE,CAAA;KAAC,CAAA;IAACpgC,IAAI,CAACkxB,SAAS,CAACoP,KAAK,GAACtgC,IAAI,CAACkxB,SAAS,CAACgP,cAAc,GAAClgC,IAAI,CAACkxB,SAAS,CAAC8O,YAAY,GAAChgC,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACe,OAAO,EAAE,CAAA;IAAC5yB,IAAI,CAACkxB,SAAS,CAACqP,EAAE,GAACvgC,IAAI,CAACkxB,SAAS,CAACgP,cAAc,GAAClgC,IAAI,CAACkxB,SAAS,CAACyO,SAAS,GAAC3/B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACgB,IAAI,EAAE,CAAA;IAAC7yB,IAAI,CAACkxB,SAAS,CAACsP,IAAI,GAACxgC,IAAI,CAACkxB,SAAS,CAACgP,cAAc,GAAClgC,IAAI,CAACkxB,SAAS,CAAC0O,WAAW,GAAC5/B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAACrL,MAAM,EAAE,CAAA;EACnf9yB,EAAAA,IAAI,CAACkxB,SAAS,CAACuP,UAAU,GAACzgC,IAAI,CAACkxB,SAAS,CAACsP,IAAI,IAAExgC,IAAI,CAACkxB,SAAS,CAACqP,EAAE,CAAA;IAACvgC,IAAI,CAACkxB,SAAS,CAACwP,KAAK,GAAC1gC,IAAI,CAACkxB,SAAS,CAACgP,cAAc,GAAClgC,IAAI,CAACkxB,SAAS,CAAC2O,YAAY,GAAC7/B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAACI,OAAO,EAAE,CAAA;EAACv+B,EAAAA,IAAI,CAACkxB,SAAS,CAACyP,MAAM,GAAC3gC,IAAI,CAACkxB,SAAS,CAACgP,cAAc,GAAClgC,IAAI,CAACkxB,SAAS,CAAC4O,aAAa,IAAE9/B,IAAI,CAACkxB,SAAS,CAAC6O,oBAAoB,GAAC//B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACiN,MAAM,CAACG,QAAQ,EAAE,CAAA;EAACt+B,EAAAA,IAAI,CAACkxB,SAAS,CAAC0P,SAAS,GAAC,YAAU;EAAC,IAAA,OAAO5gC,IAAI,CAACkxB,SAAS,CAACyP,MAAM,IAAE3gC,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACO,cAAc,CAAC,QAAQ,CAAC,CAAA;KAAC,CAAA;EACrc1xB,EAAAA,IAAI,CAACkxB,SAAS,CAAC2P,MAAM,GAAC7gC,IAAI,CAACkxB,SAAS,CAAC6O,oBAAoB,IAAE//B,IAAI,CAACkxB,SAAS,CAAC0P,SAAS,EAAE,CAAA;IAAC5gC,IAAI,CAACkxB,SAAS,CAAC4P,MAAM,GAAC9gC,IAAI,CAACkxB,SAAS,CAACyP,MAAM,CAAA;EAAC3gC,EAAAA,IAAI,CAACkxB,SAAS,CAAC6P,kBAAkB,GAAC,YAAU;EAAC,IAAA,IAAI7iC,CAAC,GAAC8B,IAAI,CAACkxB,SAAS,CAACkP,iBAAiB,EAAE,CAAA;EAAC,IAAA,OAAOliC,CAAC,IAAEA,CAAC,CAACwgC,QAAQ,IAAE,EAAE,CAAA;KAAC,CAAA;IAAC1+B,IAAI,CAACkxB,SAAS,CAAC8P,QAAQ,GAAChhC,IAAI,CAACkxB,SAAS,CAAC6P,kBAAkB,EAAE,CAAA;EAAC/gC,EAAAA,IAAI,CAACkxB,SAAS,CAAC+P,UAAU,GAAC,CAAC,CAAC,CAAA;EAACjhC,EAAAA,IAAI,CAACkxB,SAAS,CAACgQ,cAAc,GAAC,CAAC,CAAC,CAAA;EAAClhC,EAAAA,IAAI,CAACkxB,SAAS,CAACiQ,YAAY,GAAC,CAAC,CAAC,CAAA;EAACnhC,EAAAA,IAAI,CAACkxB,SAAS,CAACkQ,UAAU,GAAC,CAAC,CAAC,CAAA;EAACphC,EAAAA,IAAI,CAACkxB,SAAS,CAACmQ,cAAc,GAAC,CAAC,CAAC,CAAA;EAACrhC,EAAAA,IAAI,CAACkxB,SAAS,CAACoQ,aAAa,GAAC,CAAC,CAAC,CAAA;EACxethC,EAAAA,IAAI,CAACkxB,SAAS,CAACqQ,WAAW,GAAC,CAAC,CAAC,CAAA;EAACvhC,EAAAA,IAAI,CAACkxB,SAAS,CAACsQ,WAAW,GAAC,CAAC,CAAC,CAAA;EAACxhC,EAAAA,IAAI,CAACkxB,SAAS,CAACuQ,YAAY,GAAC,CAAC,CAAC,CAAA;IAACzhC,IAAI,CAACkxB,SAAS,CAACwQ,eAAe,GAAC1hC,IAAI,CAACkxB,SAAS,CAAC+P,UAAU,IAAEjhC,IAAI,CAACkxB,SAAS,CAACgQ,cAAc,IAAElhC,IAAI,CAACkxB,SAAS,CAACiQ,YAAY,IAAEnhC,IAAI,CAACkxB,SAAS,CAACkQ,UAAU,IAAEphC,IAAI,CAACkxB,SAAS,CAACmQ,cAAc,IAAErhC,IAAI,CAACkxB,SAAS,CAACoQ,aAAa,IAAEthC,IAAI,CAACkxB,SAAS,CAACqQ,WAAW,IAAEvhC,IAAI,CAACkxB,SAAS,CAACsQ,WAAW,CAAA;IAACxhC,IAAI,CAACkxB,SAAS,CAACyQ,GAAG,GAAC3hC,IAAI,CAACkxB,SAAS,CAACwQ,eAAe,GAAC1hC,IAAI,CAACkxB,SAAS,CAAC+P,UAAU,GAACjhC,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACM,WAAW,EAAE,CAAA;IACtdh/B,IAAI,CAACkxB,SAAS,CAAC0Q,OAAO,GAAC5hC,IAAI,CAACkxB,SAAS,CAACwQ,eAAe,GAAC1hC,IAAI,CAACkxB,SAAS,CAACgQ,cAAc,GAAClhC,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACQ,SAAS,EAAE,CAAA;EAACl/B,EAAAA,IAAI,CAACkxB,SAAS,CAAC2Q,cAAc,GAAC,YAAU;MAAC,OAAO7hC,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACO,OAAO,EAAE,IAAEj/B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACS,UAAU,EAAE,CAAA;KAAC,CAAA;IAACn/B,IAAI,CAACkxB,SAAS,CAAC4Q,KAAK,GAAC9hC,IAAI,CAACkxB,SAAS,CAACwQ,eAAe,GAAC1hC,IAAI,CAACkxB,SAAS,CAACiQ,YAAY,GAACnhC,IAAI,CAACkxB,SAAS,CAAC2Q,cAAc,EAAE,CAAA;EAAC7hC,EAAAA,IAAI,CAACkxB,SAAS,CAAC6Q,MAAM,GAAC,YAAU;EAAC,IAAA,IAAI7jC,CAAC,GAAC8B,IAAI,CAACkxB,SAAS,CAACkP,iBAAiB,EAAE,CAAA;EAAC,IAAA,OAAM,CAAC,CAACliC,CAAC,IAAE8B,IAAI,CAAC4jB,MAAM,CAACvY,QAAQ,CAACnN,CAAC,CAAC8jC,UAAU,IAAE,EAAE,EAAC,KAAK,CAAC,CAAA;KAAC,CAAA;IAClfhiC,IAAI,CAACkxB,SAAS,CAAC+Q,GAAG,GAACjiC,IAAI,CAACkxB,SAAS,CAACwQ,eAAe,GAAC1hC,IAAI,CAACkxB,SAAS,CAACkQ,UAAU,GAACphC,IAAI,CAACkxB,SAAS,CAAC6Q,MAAM,EAAE,CAAA;IAAC/hC,IAAI,CAACkxB,SAAS,CAACgR,OAAO,GAACliC,IAAI,CAACkxB,SAAS,CAACwQ,eAAe,GAAC1hC,IAAI,CAACkxB,SAAS,CAACmQ,cAAc,GAACrhC,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACC,SAAS,EAAE,CAAA;IAAC3+B,IAAI,CAACkxB,SAAS,CAACiR,MAAM,GAACniC,IAAI,CAACkxB,SAAS,CAACwQ,eAAe,GAAC1hC,IAAI,CAACkxB,SAAS,CAACoQ,aAAa,GAACthC,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACG,QAAQ,EAAE,CAAA;IAAC7+B,IAAI,CAACkxB,SAAS,CAACkR,IAAI,GAACpiC,IAAI,CAACkxB,SAAS,CAACwQ,eAAe,GAAC1hC,IAAI,CAACkxB,SAAS,CAACqQ,WAAW,GAACvhC,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACI,MAAM,EAAE,CAAA;IAC9c9+B,IAAI,CAACkxB,SAAS,CAACmR,IAAI,GAACriC,IAAI,CAACkxB,SAAS,CAACwQ,eAAe,GAAC1hC,IAAI,CAACkxB,SAAS,CAACsQ,WAAW,GAACxhC,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACE,MAAM,EAAE,CAAA;EAAC5+B,EAAAA,IAAI,CAACkxB,SAAS,CAACoR,GAAG,GAACtiC,IAAI,CAACkxB,SAAS,CAACwQ,eAAe,GAAC1hC,IAAI,CAACkxB,SAAS,CAACoQ,aAAa,IAAEthC,IAAI,CAACkxB,SAAS,CAACqQ,WAAW,IAAEvhC,IAAI,CAACkxB,SAAS,CAACsQ,WAAW,GAACxhC,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACK,KAAK,EAAE,CAAA;IAAC/+B,IAAI,CAACkxB,SAAS,CAACqR,KAAK,GAACviC,IAAI,CAACkxB,SAAS,CAACwQ,eAAe,GAAC1hC,IAAI,CAACkxB,SAAS,CAACuQ,YAAY,GAACzhC,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACW,OAAO,EAAE,CAAA;EACtZr/B,EAAAA,IAAI,CAACkxB,SAAS,CAACsR,iBAAiB,GAAC,YAAU;MAAC,IAAItkC,CAAC,GAAC,EAAE;EAACC,MAAAA,CAAC,GAAC6B,IAAI,CAACkxB,SAAS,CAACuR,sBAAsB,EAAE,CAAA;MAACtkC,CAAC,KAAGD,CAAC,GAACC,CAAC,GAACA,CAAC,CAAC,CAAC,CAAC,GAAC,EAAE,CAAC,CAAA;EAAC,IAAA,OAAO6B,IAAI,CAACkxB,SAAS,CAACqP,EAAE,KAAGpiC,CAAC,GAAC6B,IAAI,CAACkxB,SAAS,CAACwR,gBAAgB,EAAE,EAAC,IAAI,IAAEvkC,CAAC,IAAEA,CAAC,GAACwkC,UAAU,CAACzkC,CAAC,CAAC,CAAC,GAACG,MAAM,CAACF,CAAC,CAAC,GAACD,CAAC,CAAA;KAAC,CAAA;EACrN8B,EAAAA,IAAI,CAACkxB,SAAS,CAACuR,sBAAsB,GAAC,YAAU;EAAC,IAAA,IAAIvkC,CAAC,GAAC8B,IAAI,CAACkxB,SAAS,CAACiP,kBAAkB,EAAE,CAAA;EAAC,IAAA,IAAGngC,IAAI,CAACkxB,SAAS,CAACwP,KAAK,EAAC,OAAM,oBAAoB,CAAChV,IAAI,CAACxtB,CAAC,CAAC,CAAA;EAAC,IAAA,IAAG8B,IAAI,CAACkxB,SAAS,CAACsP,IAAI,EAAC,OAAM,iBAAiB,CAAC9U,IAAI,CAACxtB,CAAC,CAAC,CAAA;EAAC,IAAA,IAAG8B,IAAI,CAACkxB,SAAS,CAACqP,EAAE,EAAC,OAAM,kCAAkC,CAAC7U,IAAI,CAACxtB,CAAC,CAAC,CAAA;EAAC,IAAA,IAAG8B,IAAI,CAACkxB,SAAS,CAACyP,MAAM,EAAC,OAAM,eAAe,CAACjV,IAAI,CAACxtB,CAAC,CAAC,CAAA;EAAC,IAAA,IAAG8B,IAAI,CAACkxB,SAAS,CAACoP,KAAK,EAAC,OAAM,wBAAwB,CAAC5U,IAAI,CAACxtB,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACkxB,SAAS,CAACwR,gBAAgB,GAAC,YAAU;EAAC,IAAA,IAAIxkC,CAAC,GAAC8B,IAAI,CAACb,MAAM,CAACgC,QAAQ,CAAA;EAAC,IAAA,OAAOjD,CAAC,GAACA,CAAC,CAAC0kC,YAAY,GAAC,KAAK,CAAC,CAAA;KAAC,CAAA;IAC/e5iC,IAAI,CAACkxB,SAAS,CAAC2R,OAAO,GAAC7iC,IAAI,CAACkxB,SAAS,CAACsR,iBAAiB,EAAE,CAAA;IAACxiC,IAAI,CAACkxB,SAAS,CAAC4R,OAAO,GAAC,UAAS5kC,CAAC,EAACC,CAAC,EAAC;MAAC,OAAO6B,IAAI,CAAC4jB,MAAM,CAAC8J,eAAe,CAACxvB,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACkxB,SAAS,CAAC6R,uBAAuB,GAAC,EAAE,CAAA;EAAC/iC,EAAAA,IAAI,CAACkxB,SAAS,CAACqC,iBAAiB,GAAC,UAASr1B,CAAC,EAAC;MAAC,OAAO8B,IAAI,CAACkxB,SAAS,CAAC+O,kBAAkB,IAAEjgC,IAAI,CAACs/B,OAAO,CAACI,KAAK,CAAC1/B,IAAI,CAACkxB,SAAS,CAAC6R,uBAAuB,EAAC7kC,CAAC,EAAC,YAAU;EAAC,MAAA,OAAO,CAAC,IAAE8B,IAAI,CAAC4jB,MAAM,CAAC8J,eAAe,CAAC1tB,IAAI,CAACkxB,SAAS,CAAC2R,OAAO,EAAC3kC,CAAC,CAAC,CAAA;EAAA,KAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACkxB,SAAS,CAAC8R,SAAS,GAAChjC,IAAI,CAACkxB,SAAS,CAACqC,iBAAiB,CAAA;EAC5cvzB,EAAAA,IAAI,CAACkxB,SAAS,CAAC+R,sBAAsB,GAAC,UAAS/kC,CAAC,EAAC;MAAC,OAAO+9B,MAAM,CAACj8B,IAAI,CAACkxB,SAAS,CAACgS,aAAa,CAAC,IAAEhlC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACkxB,SAAS,CAACiS,cAAc,GAACnjC,IAAI,CAACkxB,SAAS,CAAC+R,sBAAsB,CAAA;EAACjjC,EAAAA,IAAI,CAACkxB,SAAS,CAACgS,aAAa,GAAC,YAAU;MAAC,IAAGljC,IAAI,CAACb,MAAM,CAACgC,QAAQ,IAAEnB,IAAI,CAACkxB,SAAS,CAACqP,EAAE,EAAC;EAAC,MAAA,IAAIriC,CAAC,GAAC8B,IAAI,CAACkxB,SAAS,CAACwR,gBAAgB,EAAE,CAAA;EAAC,MAAA,OAAOxkC,CAAC,GAACA,CAAC,GAAC6Y,QAAQ,CAAC/W,IAAI,CAACkxB,SAAS,CAAC2R,OAAO,EAAC,EAAE,CAAC,IAAE,KAAK,CAAC,CAAA;EAAA,KAAA;EAAC,GAAC,EAAE,CAAA;EAAC7iC,EAAAA,IAAI,CAACkxB,SAAS,CAACkS,OAAO,GAAC,EAAE,CAAA;IAACpjC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACC,cAAc,GAAC,CAAC,CAAC,CAAA;IAACrjC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAAC9B,aAAa,GAAC,CAAC,CAAC,CAAA;IAACthC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAAC7B,WAAW,GAAC,CAAC,CAAC,CAAA;IAACvhC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAAC/B,cAAc,GAAC,CAAC,CAAC,CAAA;IAACrhC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACE,aAAa,GAAC,CAAC,CAAC,CAAA;IAACtjC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACG,aAAa,GAAC,CAAC,CAAC,CAAA;EACtmBvjC,EAAAA,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACI,cAAc,GAACxjC,IAAI,CAACkxB,SAAS,CAACyO,SAAS,IAAE3/B,IAAI,CAACkxB,SAAS,CAAC0O,WAAW,IAAE5/B,IAAI,CAACkxB,SAAS,CAAC8O,YAAY,IAAEhgC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACC,cAAc,IAAErjC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAAC9B,aAAa,IAAEthC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAAC7B,WAAW,IAAEvhC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAAC/B,cAAc,IAAErhC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACE,aAAa,IAAEtjC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACG,aAAa,CAAA;IAACvjC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAAC9C,KAAK,GAACtgC,IAAI,CAACkxB,SAAS,CAACoP,KAAK,CAAA;IAACtgC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAAC7C,EAAE,GAACvgC,IAAI,CAACkxB,SAAS,CAACqP,EAAE,CAAA;IAACvgC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAAC5C,IAAI,GAACxgC,IAAI,CAACkxB,SAAS,CAACsP,IAAI,CAAA;EACzexgC,EAAAA,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACK,OAAO,GAACzjC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACI,cAAc,GAACxjC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACC,cAAc,GAACrjC,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACc,SAAS,EAAE,CAAA;EAAC3yB,EAAAA,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACM,eAAe,GAAC,YAAU;MAAC,OAAO1jC,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACG,QAAQ,EAAE,IAAE7+B,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACE,MAAM,EAAE,CAAA;KAAC,CAAA;EAAC5+B,EAAAA,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACjB,MAAM,GAACniC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACI,cAAc,GAACxjC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAAC9B,aAAa,GAACthC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACM,eAAe,EAAE,CAAA;EAC7a1jC,EAAAA,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAAChB,IAAI,GAACpiC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACI,cAAc,GAACxjC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAAC7B,WAAW,GAACvhC,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACI,MAAM,EAAE,CAAA;EAAC9+B,EAAAA,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAAClB,OAAO,GAACliC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACI,cAAc,GAACxjC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAAC/B,cAAc,GAACrhC,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACuB,gBAAgB,EAAE,CAAA;EAACpzB,EAAAA,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACO,MAAM,GAAC3jC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACI,cAAc,GAACxjC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACE,aAAa,GAACtjC,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACa,QAAQ,EAAE,CAAA;EACpb1yB,EAAAA,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACQ,gBAAgB,GAAC,YAAU;MAAC,OAAO5jC,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACW,OAAO,CAACoB,QAAQ,EAAE,IAAE,CAACjzB,IAAI,CAACixB,IAAI,CAACC,SAAS,CAACwN,QAAQ,CAACK,KAAK,EAAE,CAAA;KAAC,CAAA;EAAC/+B,EAAAA,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACtC,MAAM,GAAC9gC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACI,cAAc,GAACxjC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACG,aAAa,GAACvjC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACQ,gBAAgB,EAAE,CAAA;EAAC5jC,EAAAA,IAAI,CAACwW,KAAK,CAACqtB,MAAM,GAAC,EAAE,CAAA;EAAC7jC,EAAAA,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACC,wBAAwB,GAAC,gEAAgE,CAAA;EAAC9jC,EAAAA,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACE,YAAY,GAAC/jC,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACC,wBAAwB,GAAC,KAAK,CAAA;EAAC9jC,EAAAA,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACG,oBAAoB,GAAChkC,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACC,wBAAwB,GAAC,KAAK,CAAA;EAAC9jC,EAAAA,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACI,QAAQ,GAAC;EAACC,IAAAA,OAAO,EAAC,CAAC;EAACC,IAAAA,UAAU,EAAC,CAAC;EAACC,IAAAA,OAAO,EAAC,CAAC;EAACC,IAAAA,mBAAmB,EAAC,CAAC;EAACC,IAAAA,kBAAkB,EAAC,CAAA;KAAE,CAAA;EAACtkC,EAAAA,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACU,aAAa,GAAC,IAAI,CAAA;IACltBvkC,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACW,UAAU,GAAC,UAAStmC,CAAC,EAAC;EAAC,IAAA,OAAO8B,IAAI,CAAC4jB,MAAM,CAACvY,QAAQ,CAACrL,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACU,aAAa,EAACrmC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC8B,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACY,eAAe,GAAC,EAAE,CAAA;EAACzkC,EAAAA,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACa,cAAc,GAAC,IAAI,CAAA;EAAC1kC,EAAAA,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACc,sBAAsB,GAAC3kC,IAAI,CAACkxB,SAAS,CAACwP,KAAK,IAAE1gC,IAAI,CAACkxB,SAAS,CAACyP,MAAM,IAAE,CAAC3gC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACtC,MAAM,IAAE9gC,IAAI,CAACkxB,SAAS,CAACoP,KAAK,CAAA;IAACtgC,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACe,kBAAkB,GAAC5kC,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACc,sBAAsB,IAAE,UAAU,IAAE,OAAO3kC,IAAI,CAACb,MAAM,CAAC0lC,IAAI,CAAA;EACjb7kC,EAAAA,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACiB,kBAAkB,GAAC9kC,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACc,sBAAsB,IAAE,CAAC3kC,IAAI,CAACkxB,SAAS,CAACkS,OAAO,CAACtC,MAAM,IAAE,CAAC9gC,IAAI,CAACkxB,SAAS,CAACqP,EAAE,IAAE,UAAU,IAAE,OAAOvgC,IAAI,CAACb,MAAM,CAAC4lC,IAAI,CAAA;IACtK/kC,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACmB,eAAe,GAAC,UAAS9mC,CAAC,EAACC,CAAC,EAAC;EAAC6B,IAAAA,IAAI,CAACoN,OAAO,CAACE,MAAM,CAACtN,IAAI,CAACiG,WAAW,CAAC/H,CAAC,CAAC,EAAC,+CAA+C,CAAC,CAAA;EAAC,IAAA,KAAK,CAAC,KAAGC,CAAC,KAAGA,CAAC,GAAC6B,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACI,QAAQ,CAACC,OAAO,CAAC,CAAA;EAAClkC,IAAAA,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACoB,KAAK,EAAE,CAAA;MAAC9mC,CAAC,GAAC6B,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACY,eAAe,CAACtmC,CAAC,CAAC,CAAA;EAAC,IAAA,KAAI,IAAIC,CAAC,GAAC,EAAE,EAACE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,CAAC,CAACL,MAAM,EAACS,CAAC,IAAE,CAAC,EAAC;EAAC,MAAA,IAAInC,CAAC,GAAC+B,CAAC,CAACI,CAAC,CAAC;EAACrB,QAAAA,CAAC,GAACqB,CAAC,GAAC,CAAC,GAACJ,CAAC,CAACL,MAAM;UAACV,CAAC,GAACF,CAAC,GAACiB,CAAC,CAACI,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC;EAACkV,QAAAA,CAAC,GAAClV,CAAC,GAAC,CAAC,GAACJ,CAAC,CAACL,MAAM;UAAC4V,CAAC,GAACD,CAAC,GAACtV,CAAC,CAACI,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC;UAAC0W,CAAC,GAAC7Y,CAAC,IAAE,CAAC,CAAA;QAACA,CAAC,GAAC,CAACA,CAAC,GAAC,CAAC,KAAG,CAAC,GAACgB,CAAC,IAAE,CAAC,CAAA;QAACA,CAAC,GAAC,CAACA,CAAC,GAAC,EAAE,KAAG,CAAC,GAACsW,CAAC,IAAE,CAAC,CAAA;EAACA,MAAAA,CAAC,IAAE,EAAE,CAAA;QAACD,CAAC,KAAGC,CAAC,GAAC,EAAE,EAACxW,CAAC,KAAGE,CAAC,GAAC,EAAE,CAAC,CAAC,CAAA;QAACiB,CAAC,CAACN,IAAI,CAACK,CAAC,CAAC6W,CAAC,CAAC,EAAC7W,CAAC,CAAChC,CAAC,CAAC,EAACgC,CAAC,CAAChB,CAAC,CAAC,IAAE,EAAE,EAACgB,CAAC,CAACsV,CAAC,CAAC,IAAE,EAAE,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOrV,CAAC,CAAC4G,IAAI,CAAC,EAAE,CAAC,CAAA;KAAC,CAAA;IAC1dhF,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACqB,YAAY,GAAC,UAAShnC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO6B,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACe,kBAAkB,IAAE,CAACzmC,CAAC,GAAC6B,IAAI,CAACb,MAAM,CAAC0lC,IAAI,CAAC3mC,CAAC,CAAC,GAAC8B,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACmB,eAAe,CAAChlC,IAAI,CAACwW,KAAK,CAACC,iBAAiB,CAACvY,CAAC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6B,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACsB,YAAY,GAAC,UAASjnC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG6B,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACiB,kBAAkB,IAAE,CAAC3mC,CAAC,EAAC,OAAO6B,IAAI,CAACb,MAAM,CAAC4lC,IAAI,CAAC7mC,CAAC,CAAC,CAAA;MAAC,IAAIE,CAAC,GAAC,EAAE,CAAA;MAAC4B,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACuB,qBAAqB,CAAClnC,CAAC,EAAC,UAASA,CAAC,EAAC;EAACE,MAAAA,CAAC,IAAEC,MAAM,CAACuY,YAAY,CAAC1Y,CAAC,CAAC,CAAA;EAAA,KAAC,CAAC,CAAA;EAAC,IAAA,OAAOE,CAAC,CAAA;KAAC,CAAA;IAC/Y4B,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACwB,uBAAuB,GAAC,UAASnnC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,EAAE,CAAA;MAAC4B,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACuB,qBAAqB,CAAClnC,CAAC,EAAC,UAASA,CAAC,EAAC;EAACE,MAAAA,CAAC,CAACN,IAAI,CAACI,CAAC,CAAC,CAAA;EAAA,KAAC,CAAC,CAAA;EAAC,IAAA,OAAOE,CAAC,CAAA;KAAC,CAAA;IAC5I4B,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACyB,wBAAwB,GAAC,UAASpnC,CAAC,EAAC;MAAC8B,IAAI,CAACoN,OAAO,CAACE,MAAM,CAAC,CAACtN,IAAI,CAACkxB,SAAS,CAACqP,EAAE,IAAEvgC,IAAI,CAACkxB,SAAS,CAACqC,iBAAiB,CAAC,IAAI,CAAC,EAAC,uCAAuC,CAAC,CAAA;EAAC,IAAA,IAAIp1B,CAAC,GAACD,CAAC,CAACL,MAAM;EAACO,MAAAA,CAAC,GAAC,CAAC,GAACD,CAAC,GAAC,CAAC,CAAA;MAACC,CAAC,GAAC,CAAC,GAACA,CAAC,GAACuB,IAAI,CAAC0W,KAAK,CAACjY,CAAC,CAAC,GAAC4B,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACW,UAAU,CAACtmC,CAAC,CAACC,CAAC,GAAC,CAAC,CAAC,CAAC,KAAGC,CAAC,GAAC4B,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACW,UAAU,CAACtmC,CAAC,CAACC,CAAC,GAAC,CAAC,CAAC,CAAC,GAACC,CAAC,GAAC,CAAC,GAACA,CAAC,GAAC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAIE,CAAC,GAAC,IAAIinC,UAAU,CAACnnC,CAAC,CAAC;EAACjC,MAAAA,CAAC,GAAC,CAAC,CAAA;MAAC6D,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACuB,qBAAqB,CAAClnC,CAAC,EAAC,UAASA,CAAC,EAAC;EAACI,MAAAA,CAAC,CAACnC,CAAC,EAAE,CAAC,GAAC+B,CAAC,CAAA;EAAA,KAAC,CAAC,CAAA;EAAC,IAAA,OAAOI,CAAC,CAACknC,QAAQ,CAAC,CAAC,EAACrpC,CAAC,CAAC,CAAA;KAAC,CAAA;IACra6D,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACuB,qBAAqB,GAAC,UAASlnC,CAAC,EAACC,CAAC,EAAC;MAAC,SAASC,CAAC,CAACD,CAAC,EAAC;EAAC,MAAA,OAAKG,CAAC,GAACJ,CAAC,CAACL,MAAM,GAAE;UAAC,IAAIO,CAAC,GAACF,CAAC,CAACqK,MAAM,CAACjK,CAAC,EAAE,CAAC;YAACnC,CAAC,GAAC6D,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACa,cAAc,CAACtmC,CAAC,CAAC,CAAA;EAAC,QAAA,IAAG,IAAI,IAAEjC,CAAC,EAAC,OAAOA,CAAC,CAAA;EAAC,QAAA,IAAG,CAAC6D,IAAI,CAAC4jB,MAAM,CAACiJ,mBAAmB,CAACzuB,CAAC,CAAC,EAAC,MAAM2C,KAAK,CAAC,mCAAmC,GAAC3C,CAAC,CAAC,CAAA;EAAC,OAAA;EAAC,MAAA,OAAOD,CAAC,CAAA;EAAA,KAAA;EAAC6B,IAAAA,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACoB,KAAK,EAAE,CAAA;EAAC,IAAA,KAAI,IAAI3mC,CAAC,GAAC,CAAC,IAAG;EAAC,MAAA,IAAInC,CAAC,GAACiC,CAAC,CAAC,CAAC,CAAC,CAAC;EAACnB,QAAAA,CAAC,GAACmB,CAAC,CAAC,CAAC,CAAC;EAACjB,QAAAA,CAAC,GAACiB,CAAC,CAAC,EAAE,CAAC;EAACoV,QAAAA,CAAC,GAACpV,CAAC,CAAC,EAAE,CAAC,CAAA;QAAC,IAAG,EAAE,KAAGoV,CAAC,IAAE,CAAC,CAAC,KAAGrX,CAAC,EAAC,MAAA;QAAMgC,CAAC,CAAChC,CAAC,IAAE,CAAC,GAACc,CAAC,IAAE,CAAC,CAAC,CAAA;EAAC,MAAA,EAAE,IAAEE,CAAC,KAAGgB,CAAC,CAAClB,CAAC,IAAE,CAAC,GAAC,GAAG,GAACE,CAAC,IAAE,CAAC,CAAC,EAAC,EAAE,IAAEqW,CAAC,IAAErV,CAAC,CAAChB,CAAC,IAAE,CAAC,GAAC,GAAG,GAACqW,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EACzaxT,EAAAA,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACoB,KAAK,GAAC,YAAU;MAAC,IAAG,CAACjlC,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACa,cAAc,EAAC;QAAC1kC,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACa,cAAc,GAAC,EAAE,CAAA;EAAC,MAAA,KAAI,IAAIxmC,CAAC,GAAC8B,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACC,wBAAwB,CAACxkC,KAAK,CAAC,EAAE,CAAC,EAACnB,CAAC,GAAC,CAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,IAAI,CAAC,EAACC,CAAC,GAAC,CAAC,EAAC,CAAC,GAACA,CAAC,EAACA,CAAC,EAAE,EAAC;EAAC,QAAA,IAAIE,CAAC,GAACJ,CAAC,CAACuW,MAAM,CAACtW,CAAC,CAACC,CAAC,CAAC,CAACkB,KAAK,CAAC,EAAE,CAAC,CAAC,CAAA;UAACU,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACY,eAAe,CAACrmC,CAAC,CAAC,GAACE,CAAC,CAAA;EAAC,QAAA,KAAI,IAAInC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACmC,CAAC,CAACT,MAAM,EAAC1B,CAAC,EAAE,EAAC;EAAC,UAAA,IAAIc,CAAC,GAACqB,CAAC,CAACnC,CAAC,CAAC;cAACgB,CAAC,GAAC6C,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACa,cAAc,CAACznC,CAAC,CAAC,CAAA;YAAC,KAAK,CAAC,KAAGE,CAAC,GAAC6C,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACa,cAAc,CAACznC,CAAC,CAAC,GAACd,CAAC,GAAC6D,IAAI,CAACoN,OAAO,CAACE,MAAM,CAACnQ,CAAC,KAAGhB,CAAC,CAAC,CAAA;EAAA,SAAA;EAAC,OAAA;EAAC,KAAA;KAAE,CAAA;EAACgR,EAAAA,IAAI,CAACs4B,KAAK,GAAC,EAAE,CAAA;EAACt4B,EAAAA,IAAI,CAACs4B,KAAK,CAACC,UAAU,GAAC,CAAC,CAAA;EAACv4B,EAAAA,IAAI,CAACs4B,KAAK,CAACE,WAAW,GAAC,CAAC,CAAA;EAACx4B,EAAAA,IAAI,CAACs4B,KAAK,CAACG,WAAW,GAAC,UAAS1nC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAACD,CAAC,KAAG,CAAC,CAAA;EAACA,IAAAA,CAAC,GAACyB,IAAI,CAAC0W,KAAK,CAAC,CAACnY,CAAC,GAACC,CAAC,IAAEgP,IAAI,CAACW,eAAe,CAACyC,SAAS,CAAC,KAAG,CAAC,CAAA;EAACpD,IAAAA,IAAI,CAACs4B,KAAK,CAACC,UAAU,GAACvnC,CAAC,CAAA;EAACgP,IAAAA,IAAI,CAACs4B,KAAK,CAACE,WAAW,GAACznC,CAAC,CAAA;KAAC,CAAA;EAACiP,EAAAA,IAAI,CAACs4B,KAAK,CAACI,UAAU,GAAC,UAAS3nC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAAC,CAAC,GAACD,CAAC,CAAA;EAACA,IAAAA,CAAC,GAACyB,IAAI,CAACy9B,GAAG,CAACl/B,CAAC,CAAC,CAAA;EAAC,IAAA,IAAIE,CAAC,GAACF,CAAC,KAAG,CAAC,CAAA;EAACA,IAAAA,CAAC,GAACyB,IAAI,CAAC0W,KAAK,CAAC,CAACnY,CAAC,GAACE,CAAC,IAAE+O,IAAI,CAACW,eAAe,CAACyC,SAAS,CAAC,CAAA;EAACrS,IAAAA,CAAC,MAAI,CAAC,CAAA;EAACC,IAAAA,CAAC,KAAGD,CAAC,GAAC,CAACA,CAAC,KAAG,CAAC,EAACE,CAAC,GAAC,CAAC,CAACA,CAAC,KAAG,CAAC,IAAE,CAAC,EAAC,UAAU,GAACA,CAAC,KAAGA,CAAC,GAAC,CAAC,EAACF,CAAC,EAAE,EAAC,UAAU,GAACA,CAAC,KAAGA,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAA;EAACiP,IAAAA,IAAI,CAACs4B,KAAK,CAACC,UAAU,GAACtnC,CAAC,CAAA;EAAC+O,IAAAA,IAAI,CAACs4B,KAAK,CAACE,WAAW,GAACznC,CAAC,CAAA;KAAC,CAAA;EAC34BiP,EAAAA,IAAI,CAACs4B,KAAK,CAACK,aAAa,GAAC,UAAS5nC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAAC,CAAC,GAACD,CAAC,CAAA;MAACA,CAAC,GAAC,CAAC,GAACyB,IAAI,CAACy9B,GAAG,CAACl/B,CAAC,CAAC,CAAA;EAACiP,IAAAA,IAAI,CAACs4B,KAAK,CAACG,WAAW,CAAC1nC,CAAC,CAAC,CAAA;EAACA,IAAAA,CAAC,GAACiP,IAAI,CAACs4B,KAAK,CAACC,UAAU,CAAA;EAAC,IAAA,IAAItnC,CAAC,GAAC+O,IAAI,CAACs4B,KAAK,CAACE,WAAW,CAAA;MAACxnC,CAAC,KAAG,CAAC,IAAED,CAAC,GAAC,CAAC,IAAEE,CAAC,GAACA,CAAC,GAACF,CAAC,GAAC,UAAU,IAAEE,CAAC,EAAE,EAACF,CAAC,GAAC,UAAU,CAAC,GAACA,CAAC,EAAE,CAAC,CAAA;EAACiP,IAAAA,IAAI,CAACs4B,KAAK,CAACC,UAAU,GAACxnC,CAAC,CAAA;EAACiP,IAAAA,IAAI,CAACs4B,KAAK,CAACE,WAAW,GAACvnC,CAAC,CAAA;KAAC,CAAA;EACpP+O,EAAAA,IAAI,CAACs4B,KAAK,CAACM,YAAY,GAAC,UAAS7nC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,CAAC,GAACD,CAAC,GAAC,CAAC,GAAC,CAAC,CAAA;EAACA,IAAAA,CAAC,GAACC,CAAC,GAAC,CAACD,CAAC,GAACA,CAAC,CAAA;EAAC,IAAA,IAAG,CAAC,KAAGA,CAAC,EAAC,CAAC,GAAC,CAAC,GAACA,CAAC,IAAEiP,IAAI,CAACs4B,KAAK,CAACE,WAAW,GAAC,CAAC,EAACx4B,IAAI,CAACs4B,KAAK,CAACC,UAAU,GAAC,CAAC,KAAGv4B,IAAI,CAACs4B,KAAK,CAACE,WAAW,GAAC,CAAC,EAACx4B,IAAI,CAACs4B,KAAK,CAACC,UAAU,GAAC,UAAU,CAAC,CAAC,KAAK,IAAGrK,KAAK,CAACn9B,CAAC,CAAC,EAACiP,IAAI,CAACs4B,KAAK,CAACE,WAAW,GAAC,CAAC,EAACx4B,IAAI,CAACs4B,KAAK,CAACC,UAAU,GAAC,UAAU,CAAC,KAAK,IAAGxnC,CAAC,GAACiP,IAAI,CAACW,eAAe,CAACkC,WAAW,EAAC7C,IAAI,CAACs4B,KAAK,CAACE,WAAW,GAAC,CAAC,EAACx4B,IAAI,CAACs4B,KAAK,CAACC,UAAU,GAAC,CAACvnC,CAAC,IAAE,EAAE,GAAC,UAAU,MAAI,CAAC,CAAC,KAAK,IAAGD,CAAC,GAACiP,IAAI,CAACW,eAAe,CAACiC,WAAW,EAAC7R,CAAC,GAACyB,IAAI,CAACqmC,KAAK,CAAC9nC,CAAC,GAACyB,IAAI,CAACsmC,GAAG,CAAC,CAAC,EAAC,CAAC,GAAG,CAAC,CAAC,EAAC94B,IAAI,CAACs4B,KAAK,CAACE,WAAW,GAAC,CAAC,EAACx4B,IAAI,CAACs4B,KAAK,CAACC,UAAU,GAAC,CAACvnC,CAAC,IAAE,EAAE,GACtfD,CAAC,MAAI,CAAC,CAAC,KAAI;EAAC,MAAA,IAAIE,CAAC,GAACuB,IAAI,CAAC0W,KAAK,CAAC1W,IAAI,CAACumC,GAAG,CAAChoC,CAAC,CAAC,GAACyB,IAAI,CAACwmC,GAAG,CAAC,CAAA;QAACjoC,CAAC,IAAEyB,IAAI,CAACsmC,GAAG,CAAC,CAAC,EAAC,CAAC7nC,CAAC,CAAC,CAAA;EAACF,MAAAA,CAAC,GAACyB,IAAI,CAACqmC,KAAK,CAAC9nC,CAAC,GAACiP,IAAI,CAACW,eAAe,CAACuC,SAAS,CAAC,CAAA;EAAC,MAAA,QAAQ,IAAEnS,CAAC,IAAE,EAAEE,CAAC,CAAA;EAAC+O,MAAAA,IAAI,CAACs4B,KAAK,CAACE,WAAW,GAAC,CAAC,CAAA;QAACx4B,IAAI,CAACs4B,KAAK,CAACC,UAAU,GAAC,CAACvnC,CAAC,IAAE,EAAE,GAACC,CAAC,GAAC,GAAG,IAAE,EAAE,GAACF,CAAC,GAAC,OAAO,MAAI,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EACrNiP,EAAAA,IAAI,CAACs4B,KAAK,CAACW,YAAY,GAAC,UAASloC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,CAAC,GAACD,CAAC,GAAC,CAAC,GAAC,CAAC,CAAA;EAACA,IAAAA,CAAC,GAACC,CAAC,GAAC,CAACD,CAAC,GAACA,CAAC,CAAA;MAAC,IAAG,CAAC,KAAGA,CAAC,EAACiP,IAAI,CAACs4B,KAAK,CAACE,WAAW,GAAC,CAAC,GAAC,CAAC,GAACznC,CAAC,GAAC,CAAC,GAAC,UAAU,EAACiP,IAAI,CAACs4B,KAAK,CAACC,UAAU,GAAC,CAAC,CAAC,KAAK,IAAGrK,KAAK,CAACn9B,CAAC,CAAC,EAACiP,IAAI,CAACs4B,KAAK,CAACE,WAAW,GAAC,UAAU,EAACx4B,IAAI,CAACs4B,KAAK,CAACC,UAAU,GAAC,UAAU,CAAC,KAAK,IAAGxnC,CAAC,GAACiP,IAAI,CAACW,eAAe,CAACqC,WAAW,EAAChD,IAAI,CAACs4B,KAAK,CAACE,WAAW,GAAC,CAACxnC,CAAC,IAAE,EAAE,GAAC,UAAU,MAAI,CAAC,EAACgP,IAAI,CAACs4B,KAAK,CAACC,UAAU,GAAC,CAAC,CAAC,KAAK,IAAGxnC,CAAC,GAACiP,IAAI,CAACW,eAAe,CAACoC,WAAW,EAAC;EAAC,MAAA,IAAI9R,CAAC,GAACF,CAAC,GAACyB,IAAI,CAACsmC,GAAG,CAAC,CAAC,EAAC,CAAC,IAAI,CAAC,CAAA;EAAC/nC,MAAAA,CAAC,GAACE,CAAC,GAAC+O,IAAI,CAACW,eAAe,CAACyC,SAAS,CAAA;EAACpD,MAAAA,IAAI,CAACs4B,KAAK,CAACE,WAAW,GAAC,CAACxnC,CAAC,IAAE,EAAE,GAACD,CAAC,MAAI,CAAC,CAAA;EAACiP,MAAAA,IAAI,CAACs4B,KAAK,CAACC,UAAU,GAACtnC,CAAC,KAAG,CAAC,CAAA;EAAA,KAAC,MAAI;EAACA,MAAAA,CAAC,GAC3fF,CAAC,CAAA;QAAC,IAAII,CAAC,GAAC,CAAC,CAAA;QAAC,IAAG,CAAC,IAAEF,CAAC,EAAC,OAAK,CAAC,IAAEA,CAAC,IAAE,IAAI,GAACE,CAAC,GAAA;EAAEA,QAAAA,CAAC,EAAE,EAACF,CAAC,IAAE,CAAC,CAAA;SAAM,MAAA,OAAK,CAAC,GAACA,CAAC,IAAE,CAAC,IAAI,GAACE,CAAC,GAAA;EAAEF,QAAAA,CAAC,IAAE,CAAC,EAACE,CAAC,EAAE,CAAA;EAAC,OAAA;QAAAF,CAAC,GAACF,CAAC,GAACyB,IAAI,CAACsmC,GAAG,CAAC,CAAC,EAAC,CAAC3nC,CAAC,CAAC,CAAA;QAACJ,CAAC,GAACE,CAAC,GAAC+O,IAAI,CAACW,eAAe,CAACsC,SAAS,GAAC,OAAO,CAAA;QAAChS,CAAC,GAACA,CAAC,GAAC+O,IAAI,CAACW,eAAe,CAAC0C,SAAS,KAAG,CAAC,CAAA;EAACrD,MAAAA,IAAI,CAACs4B,KAAK,CAACE,WAAW,GAAC,CAACxnC,CAAC,IAAE,EAAE,GAACG,CAAC,GAAC,IAAI,IAAE,EAAE,GAACJ,CAAC,MAAI,CAAC,CAAA;EAACiP,MAAAA,IAAI,CAACs4B,KAAK,CAACC,UAAU,GAACtnC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EAC7P+O,EAAAA,IAAI,CAACs4B,KAAK,CAACY,WAAW,GAAC,UAASnoC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAACD,CAAC,CAACwY,UAAU,CAAC,CAAC,CAAC;EAACtY,MAAAA,CAAC,GAACF,CAAC,CAACwY,UAAU,CAAC,CAAC,CAAC;EAACpY,MAAAA,CAAC,GAACJ,CAAC,CAACwY,UAAU,CAAC,CAAC,CAAC;EAACva,MAAAA,CAAC,GAAC+B,CAAC,CAACwY,UAAU,CAAC,CAAC,CAAC;EAACzZ,MAAAA,CAAC,GAACiB,CAAC,CAACwY,UAAU,CAAC,CAAC,CAAC;EAACvZ,MAAAA,CAAC,GAACe,CAAC,CAACwY,UAAU,CAAC,CAAC,CAAC;EAAClD,MAAAA,CAAC,GAACtV,CAAC,CAACwY,UAAU,CAAC,CAAC,CAAC,CAAA;EAACxY,IAAAA,CAAC,GAACA,CAAC,CAACwY,UAAU,CAAC,CAAC,CAAC,CAAA;MAACvJ,IAAI,CAACs4B,KAAK,CAACC,UAAU,GAACvnC,CAAC,IAAEC,CAAC,IAAE,CAAC,CAAC,IAAEE,CAAC,IAAE,EAAE,CAAC,IAAEnC,CAAC,IAAE,EAAE,CAAC,KAAG,CAAC,CAAA;MAACgR,IAAI,CAACs4B,KAAK,CAACE,WAAW,GAAC1oC,CAAC,IAAEE,CAAC,IAAE,CAAC,CAAC,IAAEqW,CAAC,IAAE,EAAE,CAAC,IAAEtV,CAAC,IAAE,EAAE,CAAC,KAAG,CAAC,CAAA;KAAC,CAAA;IAACiP,IAAI,CAACs4B,KAAK,CAACa,UAAU,GAAC,UAASpoC,CAAC,EAACC,CAAC,EAAC;MAAC,OAAOA,CAAC,GAACgP,IAAI,CAACW,eAAe,CAACyC,SAAS,IAAErS,CAAC,KAAG,CAAC,CAAC,CAAA;KAAC,CAAA;IACnXiP,IAAI,CAACs4B,KAAK,CAACc,SAAS,GAAC,UAASroC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAACD,CAAC,GAAC,UAAU,CAAA;EAACC,IAAAA,CAAC,KAAGF,CAAC,GAAC,CAACA,CAAC,GAAC,CAAC,KAAG,CAAC,EAACC,CAAC,GAAC,CAACA,CAAC,KAAG,CAAC,EAAC,CAAC,IAAED,CAAC,KAAGC,CAAC,GAACA,CAAC,GAAC,CAAC,KAAG,CAAC,CAAC,CAAC,CAAA;MAACD,CAAC,GAACiP,IAAI,CAACs4B,KAAK,CAACa,UAAU,CAACpoC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOC,CAAC,GAAC,CAACF,CAAC,GAACA,CAAC,CAAA;KAAC,CAAA;IAACiP,IAAI,CAACs4B,KAAK,CAACe,UAAU,GAAC,UAAStoC,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIE,CAAC,GAACH,CAAC,IAAE,EAAE,CAAA;EAAC,IAAA,OAAOC,CAAC,CAACF,CAAC,IAAE,CAAC,GAACI,CAAC,EAAC,CAACH,CAAC,IAAE,CAAC,GAACD,CAAC,KAAG,EAAE,IAAEI,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC6O,IAAI,CAACs4B,KAAK,CAACgB,YAAY,GAAC,UAASvoC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAOgP,IAAI,CAACs4B,KAAK,CAACiB,YAAY,CAACxoC,CAAC,EAACC,CAAC,EAACgP,IAAI,CAACs4B,KAAK,CAACc,SAAS,CAAC,CAAA;KAAC,CAAA;IAACp5B,IAAI,CAACs4B,KAAK,CAACiB,YAAY,GAAC,UAASxoC,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIE,CAAC,GAAC,EAAEJ,CAAC,GAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOE,CAAC,CAAC,CAACF,CAAC,KAAG,CAAC,GAACC,CAAC,IAAE,EAAE,IAAEG,CAAC,EAACH,CAAC,KAAG,CAAC,GAACG,CAAC,CAAC,CAAA;KAAC,CAAA;IACxZ6O,IAAI,CAACs4B,KAAK,CAACkB,WAAW,GAAC,UAASzoC,CAAC,EAACC,CAAC,EAAC;MAACA,CAAC,GAAC,CAAC,IAAED,CAAC,IAAE,EAAE,CAAC,GAAC,CAAC,CAAA;EAAC,IAAA,IAAIE,CAAC,GAACF,CAAC,KAAG,EAAE,GAAC,GAAG,CAAA;EAACA,IAAAA,CAAC,IAAE,OAAO,CAAA;MAAC,OAAO,GAAG,IAAEE,CAAC,GAACF,CAAC,GAACu/B,GAAG,GAACmJ,QAAQ,GAACzoC,CAAC,GAAC,CAAC,IAAEC,CAAC,GAACD,CAAC,GAACwB,IAAI,CAACsmC,GAAG,CAAC,CAAC,EAAC,CAAC,GAAG,CAAC,GAAC/nC,CAAC,GAACC,CAAC,GAACwB,IAAI,CAACsmC,GAAG,CAAC,CAAC,EAAC7nC,CAAC,GAAC,GAAG,CAAC,IAAEF,CAAC,GAACyB,IAAI,CAACsmC,GAAG,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC94B,IAAI,CAACs4B,KAAK,CAACoB,WAAW,GAAC,UAAS3oC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,CAAC,IAAED,CAAC,IAAE,EAAE,CAAC,GAAC,CAAC;EAACG,MAAAA,CAAC,GAACH,CAAC,KAAG,EAAE,GAAC,IAAI,CAAA;EAACD,IAAAA,CAAC,GAACiP,IAAI,CAACW,eAAe,CAACyC,SAAS,IAAEpS,CAAC,GAAC,OAAO,CAAC,GAACD,CAAC,CAAA;MAAC,OAAO,IAAI,IAAEI,CAAC,GAACJ,CAAC,GAACu/B,GAAG,GAACmJ,QAAQ,GAACxoC,CAAC,GAAC,CAAC,IAAEE,CAAC,GAACF,CAAC,GAACuB,IAAI,CAACsmC,GAAG,CAAC,CAAC,EAAC,CAAC,IAAI,CAAC,GAAC/nC,CAAC,GAACE,CAAC,GAACuB,IAAI,CAACsmC,GAAG,CAAC,CAAC,EAAC3nC,CAAC,GAAC,IAAI,CAAC,IAAEJ,CAAC,GAACiP,IAAI,CAACW,eAAe,CAAC0C,SAAS,CAAC,CAAA;KAAC,CAAA;IACvZrD,IAAI,CAACs4B,KAAK,CAACqB,UAAU,GAAC,UAAS5oC,CAAC,EAACC,CAAC,EAAC;MAAC,OAAOE,MAAM,CAACuY,YAAY,CAAC1Y,CAAC,KAAG,CAAC,GAAC,GAAG,EAACA,CAAC,KAAG,CAAC,GAAC,GAAG,EAACA,CAAC,KAAG,EAAE,GAAC,GAAG,EAACA,CAAC,KAAG,EAAE,GAAC,GAAG,EAACC,CAAC,KAAG,CAAC,GAAC,GAAG,EAACA,CAAC,KAAG,CAAC,GAAC,GAAG,EAACA,CAAC,KAAG,EAAE,GAAC,GAAG,EAACA,CAAC,KAAG,EAAE,GAAC,GAAG,CAAC,CAAA;KAAC,CAAA;IAACgP,IAAI,CAACs4B,KAAK,CAACsB,MAAM,GAAC,kBAAkB,CAACznC,KAAK,CAAC,EAAE,CAAC,CAAA;EAAC6N,EAAAA,IAAI,CAACs4B,KAAK,CAACuB,eAAe,GAAC,EAAE,CAAA;EAAC75B,EAAAA,IAAI,CAACs4B,KAAK,CAACwB,YAAY,GAAC,EAAE,CAAA;IAC5P95B,IAAI,CAACs4B,KAAK,CAACyB,yBAAyB,GAAC,UAAShpC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,SAASC,CAAC,CAACF,CAAC,EAACC,CAAC,EAAC;QAACD,CAAC,GAACA,CAAC,GAACG,MAAM,CAACH,CAAC,CAAC,GAAC,EAAE,CAAA;EAAC,MAAA,OAAOC,CAAC,GAAC,SAAS,CAACkJ,KAAK,CAACnJ,CAAC,CAACL,MAAM,CAAC,GAACK,CAAC,GAACA,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,IAAG,OAAO,IAAEC,CAAC,EAAC,OAAM,EAAE,GAACgP,IAAI,CAACs4B,KAAK,CAACa,UAAU,CAACpoC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAIG,CAAC,GAAC,CAACJ,CAAC,KAAG,EAAE,GAACC,CAAC,IAAE,CAAC,MAAI,CAAC,GAAC,QAAQ,CAAA;EAACA,IAAAA,CAAC,GAACA,CAAC,IAAE,EAAE,GAAC,KAAK,CAAA;EAACD,IAAAA,CAAC,GAAC,CAACA,CAAC,GAAC,QAAQ,IAAE,OAAO,GAACI,CAAC,GAAC,OAAO,GAACH,CAAC,CAAA;MAACG,CAAC,IAAE,OAAO,GAACH,CAAC,CAAA;EAACA,IAAAA,CAAC,IAAE,CAAC,CAAA;EAAC,IAAA,GAAG,IAAED,CAAC,KAAGI,CAAC,IAAEqB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,GAAC,GAAG,CAAC,EAACA,CAAC,IAAE,GAAG,CAAC,CAAA;EAAC,IAAA,GAAG,IAAEI,CAAC,KAAGH,CAAC,IAAEwB,IAAI,CAAC0W,KAAK,CAAC/X,CAAC,GAAC,GAAG,CAAC,EAACA,CAAC,IAAE,GAAG,CAAC,CAAA;EAAC,IAAA,OAAOF,CAAC,CAACD,CAAC,EAAC,CAAC,CAAC,GAACC,CAAC,CAACE,CAAC,EAACH,CAAC,CAAC,GAACC,CAAC,CAACF,CAAC,EAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IACzXiP,IAAI,CAACs4B,KAAK,CAAC0B,uBAAuB,GAAC,UAASjpC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAACD,CAAC,GAAC,UAAU,CAAA;MAACC,CAAC,KAAGF,CAAC,GAAC,CAACA,CAAC,GAAC,CAAC,KAAG,CAAC,EAACC,CAAC,GAAC,CAACA,CAAC,IAAE,CAAC,IAAED,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,KAAG,CAAC,CAAC,CAAA;MAACA,CAAC,GAACiP,IAAI,CAACs4B,KAAK,CAACyB,yBAAyB,CAAChpC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOC,CAAC,GAAC,GAAG,GAACF,CAAC,GAACA,CAAC,CAAA;KAAC,CAAA;IAACiP,IAAI,CAACs4B,KAAK,CAAC2B,qBAAqB,GAAC,UAASlpC,CAAC,EAACC,CAAC,EAAC;EAACgP,IAAAA,IAAI,CAACs4B,KAAK,CAACY,WAAW,CAACnoC,CAAC,CAAC,CAAA;EAACA,IAAAA,CAAC,GAACiP,IAAI,CAACs4B,KAAK,CAACC,UAAU,CAAA;EAAC,IAAA,IAAItnC,CAAC,GAAC+O,IAAI,CAACs4B,KAAK,CAACE,WAAW,CAAA;MAAC,OAAOxnC,CAAC,GAACgP,IAAI,CAACs4B,KAAK,CAAC0B,uBAAuB,CAACjpC,CAAC,EAACE,CAAC,CAAC,GAAC+O,IAAI,CAACs4B,KAAK,CAACyB,yBAAyB,CAAChpC,CAAC,EAACE,CAAC,CAAC,CAAA;KAAC,CAAA;IAC/X+O,IAAI,CAACs4B,KAAK,CAAC4B,2BAA2B,GAAC,UAASnpC,CAAC,EAACC,CAAC,EAAC;MAAC,KAAI,IAAIC,CAAC,GAACW,KAAK,CAACb,CAAC,CAACL,MAAM,CAAC,EAACS,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,CAAC,CAACL,MAAM,EAACS,CAAC,EAAE,EAAA;EAACF,MAAAA,CAAC,CAACE,CAAC,CAAC,GAAC6O,IAAI,CAACs4B,KAAK,CAAC2B,qBAAqB,CAAClpC,CAAC,CAACI,CAAC,CAAC,EAACH,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOC,CAAC,CAAA;KAAC,CAAA;EACzJ+O,EAAAA,IAAI,CAACs4B,KAAK,CAAC6B,qBAAqB,GAAC,UAASppC,CAAC,EAAC;EAAC,IAAA,SAASC,CAAC,CAACD,CAAC,EAACC,CAAC,EAAC;EAAC,MAAA,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAC,CAAC,GAACA,CAAC,KAAG,CAAC,KAAGF,CAAC,IAAE,CAAC,GAACC,CAAC,CAAC,EAACC,CAAC,EAAE,EAAA;UAACD,CAAC,GAACD,CAAC,GAAC/B,CAAC,CAACiC,CAAC,CAAC,GAACD,CAAC,EAAChC,CAAC,CAACiC,CAAC,CAAC,GAACD,CAAC,GAAC,GAAG,EAACA,CAAC,MAAI,CAAC,CAAA;EAAA,OAAA;EAAA,KAAA;EAAC,IAAA,SAASC,CAAC,GAAE;QAAC,KAAI,IAAIF,CAAC,GAAC,CAAC,EAAC,CAAC,GAACA,CAAC,EAACA,CAAC,EAAE,EAAA;UAAC/B,CAAC,CAAC+B,CAAC,CAAC,GAAC,CAAC/B,CAAC,CAAC+B,CAAC,CAAC,GAAC,GAAG,CAAA;EAAA,OAAA;EAAA,KAAA;MAACiP,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,GAACpP,CAAC,CAACL,MAAM,CAAC,CAAA;MAAC,IAAIS,CAAC,GAAC,CAAC,CAAC,CAAA;EAAC,IAAA,GAAG,KAAGJ,CAAC,CAAC,CAAC,CAAC,KAAGI,CAAC,GAAC,CAAC,CAAC,EAACJ,CAAC,GAACA,CAAC,CAACmJ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,KAAI,IAAIlL,CAAC,GAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAACc,CAAC,GAAC,CAAC,EAACA,CAAC,GAACiB,CAAC,CAACL,MAAM,EAACZ,CAAC,EAAE,EAAA;EAACkB,MAAAA,CAAC,CAAC,EAAE,EAACD,CAAC,CAACwY,UAAU,CAACzZ,CAAC,CAAC,GAACkQ,IAAI,CAACs4B,KAAK,CAACuB,eAAe,CAAC,CAAA;EAAC,KAAA;MAAA1oC,CAAC,KAAGF,CAAC,EAAE,EAACD,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO6B,IAAI,CAACwW,KAAK,CAACG,iBAAiB,CAACxa,CAAC,CAAC,CAAA;KAAC,CAAA;EAACgR,EAAAA,IAAI,CAACs4B,KAAK,CAAC8B,kBAAkB,GAAC,UAASrpC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACs4B,KAAK,CAACY,WAAW,CAACl5B,IAAI,CAACs4B,KAAK,CAAC6B,qBAAqB,CAACppC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EACnfiP,EAAAA,IAAI,CAACs4B,KAAK,CAAC+B,WAAW,GAAC,UAAStpC,CAAC,EAAC;MAAC,OAAOG,MAAM,CAACuY,YAAY,CAAC,EAAE,GAAC1Y,CAAC,GAACiP,IAAI,CAACs4B,KAAK,CAACuB,eAAe,GAAC9oC,CAAC,GAACiP,IAAI,CAACs4B,KAAK,CAACwB,YAAY,GAAC,EAAE,GAAC/oC,CAAC,CAAC,CAAA;KAAC,CAAA;EAACiP,EAAAA,IAAI,CAACs4B,KAAK,CAACgC,gBAAgB,GAAC,UAASvpC,CAAC,EAAC;MAAC,OAAOA,CAAC,IAAEiP,IAAI,CAACs4B,KAAK,CAACwB,YAAY,GAAC/oC,CAAC,GAACiP,IAAI,CAACs4B,KAAK,CAACwB,YAAY,GAAC,EAAE,GAAC/oC,CAAC,GAACiP,IAAI,CAACs4B,KAAK,CAACuB,eAAe,CAAA;KAAC,CAAA;EAAC75B,EAAAA,IAAI,CAACs4B,KAAK,CAACiC,iBAAiB,GAAC,UAASxpC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAACY,KAAK,CAAC,EAAE,CAAC,CAAA;EAACZ,IAAAA,CAAC,CAAC,CAAC,CAAC,GAAC,GAAG,CAAA;EAACA,IAAAA,CAAC,CAAC,CAAC,CAAC,GAAC,GAAG,CAAA;MAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAC,CAAC,GAACA,CAAC,EAACA,CAAC,EAAE,EAAC;QAAC,IAAIE,CAAC,GAACJ,CAAC,CAACwY,UAAU,CAAC,CAAC,GAACtY,CAAC,CAAC,CAAA;EAACD,MAAAA,CAAC,CAAC,CAAC,GAACC,CAAC,GAAC,CAAC,CAAC,GAAC+O,IAAI,CAACs4B,KAAK,CAAC+B,WAAW,CAAClpC,CAAC,IAAE,CAAC,CAAC,CAAA;EAACH,MAAAA,CAAC,CAAC,CAAC,GAACC,CAAC,GAAC,CAAC,CAAC,GAAC+O,IAAI,CAACs4B,KAAK,CAAC+B,WAAW,CAAClpC,CAAC,GAAC,EAAE,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOH,CAAC,CAAC6G,IAAI,CAAC,EAAE,CAAC,CAAA;KAAC,CAAA;EAC1dmI,EAAAA,IAAI,CAACs4B,KAAK,CAACkC,iBAAiB,GAAC,UAASzpC,CAAC,EAAC;EAACA,IAAAA,CAAC,GAACA,CAAC,CAACyoB,WAAW,EAAE,CAAA;MAACxZ,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,EAAE,IAAEpP,CAAC,CAACL,MAAM,CAAC,CAAA;MAACsP,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,GAAG,IAAEpP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;MAACiP,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,GAAG,IAAEpP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,KAAI,IAAIC,CAAC,GAAC,EAAE,EAACC,CAAC,GAAC,CAAC,EAAC,CAAC,GAACA,CAAC,EAACA,CAAC,EAAE,EAAC;EAAC,MAAA,IAAIE,CAAC,GAAC6O,IAAI,CAACs4B,KAAK,CAACgC,gBAAgB,CAACvpC,CAAC,CAACwY,UAAU,CAAC,CAAC,GAACtY,CAAC,GAAC,CAAC,CAAC,CAAC;EAACjC,QAAAA,CAAC,GAACgR,IAAI,CAACs4B,KAAK,CAACgC,gBAAgB,CAACvpC,CAAC,CAACwY,UAAU,CAAC,CAAC,GAACtY,CAAC,GAAC,CAAC,CAAC,CAAC,CAAA;EAACD,MAAAA,CAAC,GAACE,MAAM,CAACuY,YAAY,CAAC,EAAE,GAACtY,CAAC,GAACnC,CAAC,CAAC,GAACgC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOA,CAAC,CAAA;KAAC,CAAA;IACxUgP,IAAI,CAACs4B,KAAK,CAACmC,cAAc,GAAC,UAAS1pC,CAAC,EAACC,CAAC,EAAC;EAACgP,IAAAA,IAAI,CAACs4B,KAAK,CAACY,WAAW,CAACnoC,CAAC,CAAC,CAAA;EAACA,IAAAA,CAAC,GAACiP,IAAI,CAACs4B,KAAK,CAACC,UAAU,CAAA;EAAC,IAAA,IAAItnC,CAAC,GAAC+O,IAAI,CAACs4B,KAAK,CAACE,WAAW,CAAA;MAAC,OAAOxnC,CAAC,GAACgP,IAAI,CAACs4B,KAAK,CAACc,SAAS,CAACroC,CAAC,EAACE,CAAC,CAAC,GAAC+O,IAAI,CAACs4B,KAAK,CAACa,UAAU,CAACpoC,CAAC,EAACE,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC+O,EAAAA,IAAI,CAACs4B,KAAK,CAACoC,cAAc,GAAC,UAAS3pC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACs4B,KAAK,CAACI,UAAU,CAAC3nC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOiP,IAAI,CAACs4B,KAAK,CAACqB,UAAU,CAAC35B,IAAI,CAACs4B,KAAK,CAACC,UAAU,EAACv4B,IAAI,CAACs4B,KAAK,CAACE,WAAW,CAAC,CAAA;KAAC,CAAA;IAACx4B,IAAI,CAACs4B,KAAK,CAACqC,YAAY,GAAC,UAAS5pC,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACnC,CAAC,GAACgC,CAAC,EAAChC,CAAC,GAACiC,CAAC,EAACjC,CAAC,EAAE,EAAA;EAACmC,MAAAA,CAAC,IAAEJ,CAAC,CAAC/B,CAAC,CAAC,IAAE,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOiC,CAAC,GAACD,CAAC,GAACG,CAAC,CAAA;KAAC,CAAA;EACzZ6O,EAAAA,IAAI,CAACs4B,KAAK,CAACsC,iBAAiB,GAAC,UAAS7pC,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC,IAAInC,CAAC,GAAC,CAAC,CAAA;MAACmC,CAAC,GAAC,CAAC,GAACA,CAAC,GAAC6O,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAA;EAAC,IAAA,IAAG,GAAG,GAAClR,CAAC,EAAC,OAAKH,CAAC,GAACC,CAAC,IAAEF,CAAC,CAACC,CAAC,EAAE,CAAC,IAAEG,CAAC,GAAA;QAAE,KAAInC,CAAC,EAAE,IAAG;EAAC,QAAA,IAAIc,CAAC,GAACiB,CAAC,CAACC,CAAC,EAAE,CAAC,CAAA;EAAC,QAAA,IAAG,CAAC,KAAGlB,CAAC,GAAC,GAAG,CAAC,EAAC,MAAA;EAAK,OAAA;EAAC,KAAA,MAAK,OAAKkB,CAAC,GAACC,CAAC,GAAE;EAAC,MAAA,KAAInB,CAAC,GAACqB,CAAC,EAAC,GAAG,GAACrB,CAAC,GAAE;EAAC,QAAA,IAAGiB,CAAC,CAACC,CAAC,CAAC,KAAGlB,CAAC,GAAC,GAAG,GAAC,GAAG,CAAC,EAAC,OAAOd,CAAC,CAAA;EAACgC,QAAAA,CAAC,EAAE,CAAA;EAAClB,QAAAA,CAAC,KAAG,CAAC,CAAA;EAAA,OAAA;EAAC,MAAA,IAAGiB,CAAC,CAACC,CAAC,EAAE,CAAC,IAAElB,CAAC,EAAC,MAAA;EAAM,MAAA,KAAId,CAAC,EAAE,EAACc,CAAC,GAACiB,CAAC,CAACC,CAAC,EAAE,CAAC,EAAC,CAAC,KAAGlB,CAAC,GAAC,GAAG,CAAC,GAAA;EAAG,OAAA;EAAA,KAAA;EAAC,IAAA,OAAOd,CAAC,CAAA;KAAC,CAAA;EAACgR,EAAAA,IAAI,CAACs4B,KAAK,CAACuC,iBAAiB,GAAC,UAAS9pC,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAACnC,CAAC,EAAC;MAAC,IAAIc,CAAC,GAAC,CAAC,CAAA;EAAC,IAAA,IAAG,GAAG,GAACqB,CAAC,EAAC,OAAKH,CAAC,GAACC,CAAC,IAAEF,CAAC,CAACC,CAAC,EAAE,CAAC,IAAEG,CAAC,GAAA;EAAErB,MAAAA,CAAC,EAAE,EAACkB,CAAC,IAAEhC,CAAC,CAAA;EAAC,KAAA,MAAK,OAAKgC,CAAC,GAACC,CAAC,GAAE;QAAC,KAAI,IAAIjB,CAAC,GAACmB,CAAC,EAAC,GAAG,GAACnB,CAAC,GAAE;EAAC,QAAA,IAAGe,CAAC,CAACC,CAAC,EAAE,CAAC,KAAGhB,CAAC,GAAC,GAAG,GAAC,GAAG,CAAC,EAAC,OAAOF,CAAC,CAAA;EAACE,QAAAA,CAAC,KAAG,CAAC,CAAA;EAAA,OAAA;EAAC,MAAA,IAAGe,CAAC,CAACC,CAAC,EAAE,CAAC,IAAEhB,CAAC,EAAC,MAAA;EAAMF,MAAAA,CAAC,EAAE,CAAA;EAACkB,MAAAA,CAAC,IAAEhC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOc,CAAC,CAAA;KAAC,CAAA;EAC/fkQ,EAAAA,IAAI,CAACs4B,KAAK,CAACwC,kBAAkB,GAAC,UAAS/pC,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC,OAAO6O,IAAI,CAACs4B,KAAK,CAACuC,iBAAiB,CAAC9pC,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC,CAAC,GAACE,CAAC,GAAC6O,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACd,OAAO,EAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAACtB,EAAAA,IAAI,CAACs4B,KAAK,CAACyC,kBAAkB,GAAC,UAAShqC,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC,OAAO6O,IAAI,CAACs4B,KAAK,CAACuC,iBAAiB,CAAC9pC,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC,CAAC,GAACE,CAAC,GAAC6O,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACf,OAAO,EAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAC/QrB,EAAAA,IAAI,CAACs4B,KAAK,CAAC0C,oBAAoB,GAAC,UAASjqC,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC,IAAInC,CAAC,GAAC,CAAC,CAAA;EAAC,IAAA,KAAImC,CAAC,GAAC,CAAC,GAACA,CAAC,GAAC6O,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,EAACtR,CAAC,GAACC,CAAC,GAAE;QAAC,KAAI,IAAInB,CAAC,GAACqB,CAAC,EAAC,GAAG,GAACrB,CAAC,GAAE;EAAC,QAAA,IAAGiB,CAAC,CAACC,CAAC,EAAE,CAAC,KAAGlB,CAAC,GAAC,GAAG,GAAC,GAAG,CAAC,EAAC,OAAOd,CAAC,CAAA;EAACc,QAAAA,CAAC,KAAG,CAAC,CAAA;EAAA,OAAA;EAAC,MAAA,IAAGiB,CAAC,CAACC,CAAC,EAAE,CAAC,IAAElB,CAAC,EAAC,MAAA;EAAMd,MAAAA,CAAC,EAAE,CAAA;EAAC,MAAA,KAAI,IAAIgB,CAAC,GAAC,CAAC,EAACqW,CAAC,GAAC,CAAC,EAACvW,CAAC,GAACiB,CAAC,CAACC,CAAC,EAAE,CAAC,EAAChB,CAAC,IAAE,CAACF,CAAC,GAAC,GAAG,IAAEuW,CAAC,EAACA,CAAC,IAAE,GAAG,EAAC,CAAC,KAAGvW,CAAC,GAAC,GAAG,CAAC,GAAA;EAAG,OAAA;EAAAkB,MAAAA,CAAC,IAAEhB,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOhB,CAAC,CAAA;KAAC,CAAA;EAACgR,EAAAA,IAAI,CAACs4B,KAAK,CAAC2C,sBAAsB,GAAC,UAASlqC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,GAAG,CAAA;EAAC,IAAA,IAAGD,CAAC,EAAC;QAACA,CAAC,GAACiP,IAAI,CAACs4B,KAAK,CAAC4C,sBAAsB,CAACnqC,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,CAACL,MAAM,EAACO,CAAC,EAAE,EAAA;UAACD,CAAC,IAAE,KAAK,EAAC,EAAE,GAACD,CAAC,CAACE,CAAC,CAAC,KAAGD,CAAC,IAAE,GAAG,CAAC,EAACA,CAAC,IAAED,CAAC,CAACE,CAAC,CAAC,CAAC0H,QAAQ,CAAC,EAAE,CAAC,CAAA;EAAA,OAAA;EAAA,KAAA;MAAC,OAAO3H,CAAC,GAAC,GAAG,CAAA;KAAC,CAAA;EACzcgP,EAAAA,IAAI,CAACs4B,KAAK,CAAC6C,uBAAuB,GAAC,UAASpqC,CAAC,EAAC;EAAC,IAAA,OAAM,QAAQ,KAAG,OAAOA,CAAC,GAAC8B,IAAI,CAAC4jB,MAAM,CAAC6Y,KAAK,CAACv+B,CAAC,CAAC,GAACA,CAAC,CAAC4H,QAAQ,EAAE,CAAA;KAAC,CAAA;EAACqH,EAAAA,IAAI,CAACs4B,KAAK,CAAChvB,iBAAiB,GAAC,UAASvY,CAAC,EAAC;MAAC,KAAI,IAAIC,CAAC,GAAC,IAAIonC,UAAU,CAACrnC,CAAC,CAACL,MAAM,CAAC,EAACO,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,CAACL,MAAM,EAACO,CAAC,EAAE,EAAC;EAAC,MAAA,IAAIE,CAAC,GAACJ,CAAC,CAACwY,UAAU,CAACtY,CAAC,CAAC,CAAA;QAAC,IAAG,GAAG,GAACE,CAAC,EAAC,MAAMyC,KAAK,CAAC,mEAAmE,CAAC,CAAA;EAAC5C,MAAAA,CAAC,CAACC,CAAC,CAAC,GAACE,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOH,CAAC,CAAA;KAAC,CAAA;EAC5UgP,EAAAA,IAAI,CAACs4B,KAAK,CAAC4C,sBAAsB,GAAC,UAASnqC,CAAC,EAAC;EAAC,IAAA,IAAGA,CAAC,CAACkL,WAAW,KAAGm8B,UAAU,EAAC,OAAOrnC,CAAC,CAAA;EAAC,IAAA,IAAGA,CAAC,CAACkL,WAAW,KAAGm/B,WAAW,IAAErqC,CAAC,CAACkL,WAAW,KAAGrK,KAAK,EAAC,OAAO,IAAIwmC,UAAU,CAACrnC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAGA,CAAC,CAACkL,WAAW,KAAG/K,MAAM,EAAC,OAAO2B,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACyB,wBAAwB,CAACpnC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAGA,CAAC,YAAYqnC,UAAU,EAAC,OAAO,IAAIA,UAAU,CAACrnC,CAAC,CAACsqC,MAAM,EAACtqC,CAAC,CAACuqC,UAAU,EAACvqC,CAAC,CAACwqC,UAAU,CAAC,CAAA;EAACv7B,IAAAA,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,qCAAqC,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI83B,UAAU,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAACp4B,IAAI,CAACw7B,aAAa,GAAC,UAASzqC,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,CAACwqC,MAAM,GAAC,IAAI,CAAA;MAAC,IAAI,CAACC,OAAO,GAAC,IAAI,CAACC,IAAI,GAAC,IAAI,CAACC,MAAM,GAAC,CAAC,CAAA;EAAC,IAAA,IAAI,CAACC,MAAM,GAAC,CAAC,CAAC,CAAA;MAAC9qC,CAAC,IAAE,IAAI,CAAC+qC,QAAQ,CAAC/qC,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC+O,EAAAA,IAAI,CAACw7B,aAAa,CAACO,cAAc,GAAC,EAAE,CAAA;IAAC/7B,IAAI,CAACw7B,aAAa,CAACQ,KAAK,GAAC,UAASjrC,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG+O,IAAI,CAACw7B,aAAa,CAACO,cAAc,CAACrrC,MAAM,EAAC;QAAC,IAAIS,CAAC,GAAC6O,IAAI,CAACw7B,aAAa,CAACO,cAAc,CAACtrC,GAAG,EAAE,CAAA;QAACM,CAAC,IAAEI,CAAC,CAAC2qC,QAAQ,CAAC/qC,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,MAAA,OAAOE,CAAC,CAAA;EAAA,KAAA;MAAC,OAAO,IAAI6O,IAAI,CAACw7B,aAAa,CAACzqC,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC+O,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACoqC,IAAI,GAAC,YAAU;MAAC,IAAI,CAACt9B,KAAK,EAAE,CAAA;EAAC,IAAA,GAAG,GAACqB,IAAI,CAACw7B,aAAa,CAACO,cAAc,CAACrrC,MAAM,IAAEsP,IAAI,CAACw7B,aAAa,CAACO,cAAc,CAACprC,IAAI,CAAC,IAAI,CAAC,CAAA;KAAC,CAAA;EAC95BqP,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACgI,KAAK,GAAC,YAAU;MAAC,OAAOmG,IAAI,CAACw7B,aAAa,CAACQ,KAAK,CAAC,IAAI,CAACP,MAAM,EAAC,IAAI,CAACG,MAAM,EAAC,IAAI,CAACD,IAAI,GAAC,IAAI,CAACC,MAAM,CAAC,CAAA;KAAC,CAAA;EAAC57B,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAAC8M,KAAK,GAAC,YAAU;MAAC,IAAI,CAAC88B,MAAM,GAAC,IAAI,CAAA;MAAC,IAAI,CAACC,OAAO,GAAC,IAAI,CAACC,IAAI,GAAC,IAAI,CAACC,MAAM,GAAC,CAAC,CAAA;EAAC,IAAA,IAAI,CAACC,MAAM,GAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC77B,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACqqC,SAAS,GAAC,YAAU;MAAC,OAAO,IAAI,CAACT,MAAM,CAAA;KAAC,CAAA;EACvTz7B,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACiqC,QAAQ,GAAC,UAAS/qC,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,CAACwqC,MAAM,GAACz7B,IAAI,CAACs4B,KAAK,CAAC4C,sBAAsB,CAACnqC,CAAC,CAAC,CAAA;MAAC,IAAI,CAAC6qC,MAAM,GAAC,KAAK,CAAC,KAAG5qC,CAAC,GAACA,CAAC,GAAC,CAAC,CAAA;EAAC,IAAA,IAAI,CAAC2qC,IAAI,GAAC,KAAK,CAAC,KAAG1qC,CAAC,GAAC,IAAI,CAAC2qC,MAAM,GAAC3qC,CAAC,GAAC,IAAI,CAACwqC,MAAM,CAAC/qC,MAAM,CAAA;EAAC,IAAA,IAAI,CAACgrC,OAAO,GAAC,IAAI,CAACE,MAAM,CAAA;KAAC,CAAA;EAAC57B,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACsqC,MAAM,GAAC,YAAU;MAAC,OAAO,IAAI,CAACR,IAAI,CAAA;KAAC,CAAA;IAAC37B,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACuqC,MAAM,GAAC,UAASrrC,CAAC,EAAC;MAAC,IAAI,CAAC4qC,IAAI,GAAC5qC,CAAC,CAAA;KAAC,CAAA;EAACiP,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACwqC,KAAK,GAAC,YAAU;EAAC,IAAA,IAAI,CAACX,OAAO,GAAC,IAAI,CAACE,MAAM,CAAA;KAAC,CAAA;EAAC57B,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACyqC,SAAS,GAAC,YAAU;MAAC,OAAO,IAAI,CAACZ,OAAO,CAAA;KAAC,CAAA;IAC9d17B,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAAC0qC,SAAS,GAAC,UAASxrC,CAAC,EAAC;MAAC,IAAI,CAAC2qC,OAAO,GAAC3qC,CAAC,CAAA;KAAC,CAAA;IAACiP,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAAC2qC,OAAO,GAAC,UAASzrC,CAAC,EAAC;MAAC,IAAI,CAAC2qC,OAAO,IAAE3qC,CAAC,CAAA;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACu7B,OAAO,IAAE,IAAI,CAACC,IAAI,CAAC,CAAA;KAAC,CAAA;EAAC37B,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAAC4qC,KAAK,GAAC,YAAU;EAAC,IAAA,OAAO,IAAI,CAACf,OAAO,IAAE,IAAI,CAACC,IAAI,CAAA;KAAC,CAAA;EAAC37B,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAAC6qC,OAAO,GAAC,YAAU;EAAC,IAAA,OAAO,IAAI,CAAChB,OAAO,GAAC,IAAI,CAACC,IAAI,CAAA;KAAC,CAAA;EAAC37B,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAAC8qC,QAAQ,GAAC,YAAU;EAAC,IAAA,OAAO,IAAI,CAACd,MAAM,IAAE,CAAC,GAAC,IAAI,CAACH,OAAO,IAAE,IAAI,CAACA,OAAO,GAAC,IAAI,CAACC,IAAI,CAAA;KAAC,CAAA;IAC3b37B,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAAC+qC,iBAAiB,GAAC,UAAS7rC,CAAC,EAAC;MAAC,KAAI,IAAIC,CAAC,GAAC,GAAG,EAACC,CAAC,GAAC,CAAC,EAACE,CAAC,GAAC,CAAC,EAACnC,CAAC,GAAC,CAAC,EAAC,CAAC,GAACA,CAAC,IAAE,GAAG,IAAEgC,CAAC,EAAChC,CAAC,EAAE,EAAA;QAACgC,CAAC,GAAC,IAAI,CAACyqC,MAAM,CAAC,IAAI,CAACC,OAAO,EAAE,CAAC,EAACzqC,CAAC,IAAE,CAACD,CAAC,GAAC,GAAG,KAAG,CAAC,GAAChC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,GAAG,IAAEgC,CAAC,KAAGA,CAAC,GAAC,IAAI,CAACyqC,MAAM,CAAC,IAAI,CAACC,OAAO,EAAE,CAAC,EAACzqC,CAAC,IAAE,CAACD,CAAC,GAAC,GAAG,KAAG,EAAE,EAACG,CAAC,IAAE,CAACH,CAAC,GAAC,GAAG,KAAG,CAAC,CAAC,CAAA;EAAC,IAAA,IAAG,GAAG,IAAEA,CAAC,EAAC,KAAIhC,CAAC,GAAC,CAAC,EAAC,CAAC,GAACA,CAAC,IAAE,GAAG,IAAEgC,CAAC,EAAChC,CAAC,EAAE,EAAA;QAACgC,CAAC,GAAC,IAAI,CAACyqC,MAAM,CAAC,IAAI,CAACC,OAAO,EAAE,CAAC,EAACvqC,CAAC,IAAE,CAACH,CAAC,GAAC,GAAG,KAAG,CAAC,GAAChC,CAAC,GAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,IAAG,GAAG,GAACgC,CAAC,EAAC,OAAOD,CAAC,CAACE,CAAC,KAAG,CAAC,EAACE,CAAC,KAAG,CAAC,CAAC,CAAA;EAAC6O,IAAAA,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,6CAA6C,CAAC,CAAA;EAAC,IAAA,IAAI,CAACu7B,MAAM,GAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IACzZ77B,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACgrC,uBAAuB,GAAC,UAAS9rC,CAAC,EAAC;MAAC,OAAO,IAAI,CAAC6rC,iBAAiB,CAAC,UAAS5rC,CAAC,EAACC,CAAC,EAAC;QAAC,OAAO+O,IAAI,CAACs4B,KAAK,CAACiB,YAAY,CAACvoC,CAAC,EAACC,CAAC,EAACF,CAAC,CAAC,CAAA;EAAA,KAAC,CAAC,CAAA;KAAC,CAAA;IAACiP,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACirC,gBAAgB,GAAC,UAAS/rC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAAC,IAAI,CAACyqC,MAAM;QAACxqC,CAAC,GAAC,IAAI,CAACyqC,OAAO,CAAA;MAAC,IAAI,CAACA,OAAO,IAAE,CAAC,CAAA;MAAC,KAAI,IAAIvqC,CAAC,GAAC,CAAC,EAACnC,CAAC,GAAC,CAAC,EAACc,CAAC,GAACmB,CAAC,GAAC,CAAC,EAACnB,CAAC,IAAEmB,CAAC,EAACnB,CAAC,EAAE,EAAA;QAACqB,CAAC,GAACA,CAAC,IAAE,CAAC,GAACH,CAAC,CAAClB,CAAC,CAAC,EAACd,CAAC,GAACA,CAAC,IAAE,CAAC,GAACgC,CAAC,CAAClB,CAAC,GAAC,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOiB,CAAC,CAACI,CAAC,EAACnC,CAAC,CAAC,CAAA;KAAC,CAAA;EAACgR,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACkrC,UAAU,GAAC,YAAU;MAAC,OAAK,IAAI,CAACtB,MAAM,CAAC,IAAI,CAACC,OAAO,CAAC,GAAC,GAAG,GAAA;QAAE,IAAI,CAACA,OAAO,EAAE,CAAA;EAAC,KAAA;MAAA,IAAI,CAACA,OAAO,EAAE,CAAA;KAAC,CAAA;IAC9b17B,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACmrC,YAAY,GAAC,UAASjsC,CAAC,EAAC;MAAC,OAAK,GAAG,GAACA,CAAC,GAAA;EAAE,MAAA,IAAI,CAAC2qC,OAAO,EAAE,EAAC3qC,CAAC,MAAI,CAAC,CAAA;EAAC,KAAA;MAAA,IAAI,CAAC2qC,OAAO,EAAE,CAAA;KAAC,CAAA;EACvG17B,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACorC,oBAAoB,GAAC,YAAU;EAAC,IAAA,IAAIlsC,CAAC,GAAC,IAAI,CAAC0qC,MAAM,CAAA;MAAC,IAAIzqC,CAAC,GAACD,CAAC,CAAC,IAAI,CAAC2qC,OAAO,GAAC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAIzqC,CAAC,GAACD,CAAC,GAAC,GAAG,CAAA;MAAC,IAAG,GAAG,GAACA,CAAC,EAAC,OAAO,IAAI,CAAC0qC,OAAO,IAAE,CAAC,EAAC17B,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACu7B,OAAO,IAAE,IAAI,CAACC,IAAI,CAAC,EAAC1qC,CAAC,CAAA;MAACD,CAAC,GAACD,CAAC,CAAC,IAAI,CAAC2qC,OAAO,GAAC,CAAC,CAAC,CAAA;EAACzqC,IAAAA,CAAC,IAAE,CAACD,CAAC,GAAC,GAAG,KAAG,CAAC,CAAA;MAAC,IAAG,GAAG,GAACA,CAAC,EAAC,OAAO,IAAI,CAAC0qC,OAAO,IAAE,CAAC,EAAC17B,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACu7B,OAAO,IAAE,IAAI,CAACC,IAAI,CAAC,EAAC1qC,CAAC,CAAA;MAACD,CAAC,GAACD,CAAC,CAAC,IAAI,CAAC2qC,OAAO,GAAC,CAAC,CAAC,CAAA;EAACzqC,IAAAA,CAAC,IAAE,CAACD,CAAC,GAAC,GAAG,KAAG,EAAE,CAAA;MAAC,IAAG,GAAG,GAACA,CAAC,EAAC,OAAO,IAAI,CAAC0qC,OAAO,IAAE,CAAC,EAAC17B,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACu7B,OAAO,IAAE,IAAI,CAACC,IAAI,CAAC,EAAC1qC,CAAC,CAAA;MAACD,CAAC,GAACD,CAAC,CAAC,IAAI,CAAC2qC,OAAO,GAAC,CAAC,CAAC,CAAA;EAACzqC,IAAAA,CAAC,IAAE,CAACD,CAAC,GAAC,GAAG,KAAG,EAAE,CAAA;MAAC,IAAG,GAAG,GAACA,CAAC,EAAC,OAAO,IAAI,CAAC0qC,OAAO,IAAE,CAAC,EAAC17B,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACu7B,OAAO,IACxgB,IAAI,CAACC,IAAI,CAAC,EAAC1qC,CAAC,CAAA;MAACD,CAAC,GAACD,CAAC,CAAC,IAAI,CAAC2qC,OAAO,GAAC,CAAC,CAAC,CAAA;EAACzqC,IAAAA,CAAC,IAAE,CAACD,CAAC,GAAC,EAAE,KAAG,EAAE,CAAA;EAAC,IAAA,IAAG,GAAG,GAACA,CAAC,EAAC,OAAO,IAAI,CAAC0qC,OAAO,IAAE,CAAC,EAAC17B,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACu7B,OAAO,IAAE,IAAI,CAACC,IAAI,CAAC,EAAC1qC,CAAC,KAAG,CAAC,CAAA;MAAC,IAAI,CAACyqC,OAAO,IAAE,CAAC,CAAA;MAAC,GAAG,IAAE3qC,CAAC,CAAC,IAAI,CAAC2qC,OAAO,EAAE,CAAC,IAAE,GAAG,IAAE3qC,CAAC,CAAC,IAAI,CAAC2qC,OAAO,EAAE,CAAC,IAAE,GAAG,IAAE3qC,CAAC,CAAC,IAAI,CAAC2qC,OAAO,EAAE,CAAC,IAAE,GAAG,IAAE3qC,CAAC,CAAC,IAAI,CAAC2qC,OAAO,EAAE,CAAC,IAAE,GAAG,IAAE3qC,CAAC,CAAC,IAAI,CAAC2qC,OAAO,EAAE,CAAC,IAAE17B,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;EAACH,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACu7B,OAAO,IAAE,IAAI,CAACC,IAAI,CAAC,CAAA;EAAC,IAAA,OAAO1qC,CAAC,CAAA;KAAC,CAAA;EAAC+O,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACqrC,kBAAkB,GAAC,YAAU;EAAC,IAAA,OAAM,CAAC,CAAC,IAAI,CAACD,oBAAoB,EAAE,CAAA;KAAC,CAAA;EAACj9B,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACsrC,0BAA0B,GAAC,YAAU;EAAC,IAAA,OAAO,IAAI,CAACF,oBAAoB,EAAE,CAACtkC,QAAQ,EAAE,CAAA;KAAC,CAAA;EAC1iBqH,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACurC,wBAAwB,GAAC,YAAU;EAAC,IAAA,OAAO,IAAI,CAACF,kBAAkB,EAAE,CAACvkC,QAAQ,EAAE,CAAA;KAAC,CAAA;EAACqH,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACwrC,kBAAkB,GAAC,YAAU;EAAC,IAAA,IAAItsC,CAAC,GAAC,IAAI,CAACksC,oBAAoB,EAAE,CAAA;MAAC,OAAOlsC,CAAC,KAAG,CAAC,GAAC,EAAEA,CAAC,GAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAACiP,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACyrC,oBAAoB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACV,iBAAiB,CAAC58B,IAAI,CAACs4B,KAAK,CAACa,UAAU,CAAC,CAAA;KAAC,CAAA;EAACn5B,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAAC0rC,0BAA0B,GAAC,YAAU;MAAC,OAAO,IAAI,CAACX,iBAAiB,CAAC58B,IAAI,CAACs4B,KAAK,CAACyB,yBAAyB,CAAC,CAAA;KAAC,CAAA;EAC1d/5B,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAAC2rC,kBAAkB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACZ,iBAAiB,CAAC58B,IAAI,CAACs4B,KAAK,CAACc,SAAS,CAAC,CAAA;KAAC,CAAA;EAACp5B,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAAC4rC,wBAAwB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACb,iBAAiB,CAAC58B,IAAI,CAACs4B,KAAK,CAAC0B,uBAAuB,CAAC,CAAA;KAAC,CAAA;EAACh6B,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAAC6rC,kBAAkB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACd,iBAAiB,CAAC58B,IAAI,CAACs4B,KAAK,CAACgB,YAAY,CAAC,CAAA;KAAC,CAAA;EAACt5B,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAAC8rC,sBAAsB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACd,uBAAuB,CAAC78B,IAAI,CAACs4B,KAAK,CAACqB,UAAU,CAAC,CAAA;KAAC,CAAA;EACje35B,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAAC+rC,wBAAwB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACf,uBAAuB,CAAC78B,IAAI,CAACs4B,KAAK,CAAC0B,uBAAuB,CAAC,CAAA;KAAC,CAAA;EAACh6B,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACgsC,SAAS,GAAC,YAAU;MAAC,IAAI9sC,CAAC,GAAC,IAAI,CAAC0qC,MAAM,CAAC,IAAI,CAACC,OAAO,GAAC,CAAC,CAAC,CAAA;MAAC,IAAI,CAACA,OAAO,IAAE,CAAC,CAAA;EAAC17B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACu7B,OAAO,IAAE,IAAI,CAACC,IAAI,CAAC,CAAA;EAAC,IAAA,OAAO5qC,CAAC,CAAA;KAAC,CAAA;EAACiP,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACisC,UAAU,GAAC,YAAU;MAAC,IAAI/sC,CAAC,GAAC,IAAI,CAAC0qC,MAAM,CAAC,IAAI,CAACC,OAAO,GAAC,CAAC,CAAC;QAAC1qC,CAAC,GAAC,IAAI,CAACyqC,MAAM,CAAC,IAAI,CAACC,OAAO,GAAC,CAAC,CAAC,CAAA;MAAC,IAAI,CAACA,OAAO,IAAE,CAAC,CAAA;EAAC17B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACu7B,OAAO,IAAE,IAAI,CAACC,IAAI,CAAC,CAAA;EAAC,IAAA,OAAO5qC,CAAC,IAAE,CAAC,GAACC,CAAC,IAAE,CAAC,CAAA;KAAC,CAAA;EACtegP,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACksC,UAAU,GAAC,YAAU;MAAC,IAAIhtC,CAAC,GAAC,IAAI,CAAC0qC,MAAM,CAAC,IAAI,CAACC,OAAO,GAAC,CAAC,CAAC;QAAC1qC,CAAC,GAAC,IAAI,CAACyqC,MAAM,CAAC,IAAI,CAACC,OAAO,GAAC,CAAC,CAAC;QAACzqC,CAAC,GAAC,IAAI,CAACwqC,MAAM,CAAC,IAAI,CAACC,OAAO,GAAC,CAAC,CAAC;QAACvqC,CAAC,GAAC,IAAI,CAACsqC,MAAM,CAAC,IAAI,CAACC,OAAO,GAAC,CAAC,CAAC,CAAA;MAAC,IAAI,CAACA,OAAO,IAAE,CAAC,CAAA;EAAC17B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACu7B,OAAO,IAAE,IAAI,CAACC,IAAI,CAAC,CAAA;EAAC,IAAA,OAAM,CAAC5qC,CAAC,IAAE,CAAC,GAACC,CAAC,IAAE,CAAC,GAACC,CAAC,IAAE,EAAE,GAACE,CAAC,IAAE,EAAE,MAAI,CAAC,CAAA;KAAC,CAAA;EAAC6O,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACmsC,UAAU,GAAC,YAAU;EAAC,IAAA,IAAIjtC,CAAC,GAAC,IAAI,CAACgtC,UAAU,EAAE;EAAC/sC,MAAAA,CAAC,GAAC,IAAI,CAAC+sC,UAAU,EAAE,CAAA;MAAC,OAAO/9B,IAAI,CAACs4B,KAAK,CAACa,UAAU,CAACpoC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EAChZgP,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACosC,gBAAgB,GAAC,YAAU;EAAC,IAAA,IAAIltC,CAAC,GAAC,IAAI,CAACgtC,UAAU,EAAE;EAAC/sC,MAAAA,CAAC,GAAC,IAAI,CAAC+sC,UAAU,EAAE,CAAA;MAAC,OAAO/9B,IAAI,CAACs4B,KAAK,CAACyB,yBAAyB,CAAChpC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EAACgP,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACqsC,QAAQ,GAAC,YAAU;MAAC,IAAIntC,CAAC,GAAC,IAAI,CAAC0qC,MAAM,CAAC,IAAI,CAACC,OAAO,GAAC,CAAC,CAAC,CAAA;MAAC,IAAI,CAACA,OAAO,IAAE,CAAC,CAAA;EAAC17B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACu7B,OAAO,IAAE,IAAI,CAACC,IAAI,CAAC,CAAA;EAAC,IAAA,OAAO5qC,CAAC,IAAE,EAAE,IAAE,EAAE,CAAA;KAAC,CAAA;EACxTiP,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACssC,SAAS,GAAC,YAAU;MAAC,IAAIptC,CAAC,GAAC,IAAI,CAAC0qC,MAAM,CAAC,IAAI,CAACC,OAAO,GAAC,CAAC,CAAC;QAAC1qC,CAAC,GAAC,IAAI,CAACyqC,MAAM,CAAC,IAAI,CAACC,OAAO,GAAC,CAAC,CAAC,CAAA;MAAC,IAAI,CAACA,OAAO,IAAE,CAAC,CAAA;EAAC17B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACu7B,OAAO,IAAE,IAAI,CAACC,IAAI,CAAC,CAAA;MAAC,OAAM,CAAC5qC,CAAC,IAAE,CAAC,GAACC,CAAC,IAAE,CAAC,KAAG,EAAE,IAAE,EAAE,CAAA;KAAC,CAAA;EAACgP,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACusC,SAAS,GAAC,YAAU;MAAC,IAAIrtC,CAAC,GAAC,IAAI,CAAC0qC,MAAM,CAAC,IAAI,CAACC,OAAO,GAAC,CAAC,CAAC;QAAC1qC,CAAC,GAAC,IAAI,CAACyqC,MAAM,CAAC,IAAI,CAACC,OAAO,GAAC,CAAC,CAAC;QAACzqC,CAAC,GAAC,IAAI,CAACwqC,MAAM,CAAC,IAAI,CAACC,OAAO,GAAC,CAAC,CAAC;QAACvqC,CAAC,GAAC,IAAI,CAACsqC,MAAM,CAAC,IAAI,CAACC,OAAO,GAAC,CAAC,CAAC,CAAA;MAAC,IAAI,CAACA,OAAO,IAAE,CAAC,CAAA;EAAC17B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACu7B,OAAO,IAAE,IAAI,CAACC,IAAI,CAAC,CAAA;EAAC,IAAA,OAAO5qC,CAAC,IAAE,CAAC,GAACC,CAAC,IAAE,CAAC,GAACC,CAAC,IAAE,EAAE,GAACE,CAAC,IAAE,EAAE,CAAA;KAAC,CAAA;EACld6O,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACwsC,SAAS,GAAC,YAAU;EAAC,IAAA,IAAIttC,CAAC,GAAC,IAAI,CAACgtC,UAAU,EAAE;EAAC/sC,MAAAA,CAAC,GAAC,IAAI,CAAC+sC,UAAU,EAAE,CAAA;MAAC,OAAO/9B,IAAI,CAACs4B,KAAK,CAACc,SAAS,CAACroC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EAACgP,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACysC,eAAe,GAAC,YAAU;EAAC,IAAA,IAAIvtC,CAAC,GAAC,IAAI,CAACgtC,UAAU,EAAE;EAAC/sC,MAAAA,CAAC,GAAC,IAAI,CAAC+sC,UAAU,EAAE,CAAA;MAAC,OAAO/9B,IAAI,CAACs4B,KAAK,CAAC0B,uBAAuB,CAACjpC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EAACgP,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAAC0sC,SAAS,GAAC,YAAU;EAAC,IAAA,IAAIxtC,CAAC,GAAC,IAAI,CAACgtC,UAAU,EAAE,CAAA;MAAC,OAAO/9B,IAAI,CAACs4B,KAAK,CAACkB,WAAW,CAACzoC,CAAC,EAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EACjYiP,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAAC2sC,UAAU,GAAC,YAAU;EAAC,IAAA,IAAIztC,CAAC,GAAC,IAAI,CAACgtC,UAAU,EAAE;EAAC/sC,MAAAA,CAAC,GAAC,IAAI,CAAC+sC,UAAU,EAAE,CAAA;MAAC,OAAO/9B,IAAI,CAACs4B,KAAK,CAACoB,WAAW,CAAC3oC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EAACgP,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAAC4sC,QAAQ,GAAC,YAAU;MAAC,OAAM,CAAC,CAAC,IAAI,CAAChD,MAAM,CAAC,IAAI,CAACC,OAAO,EAAE,CAAC,CAAA;KAAC,CAAA;EAAC17B,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAAC6sC,QAAQ,GAAC,YAAU;MAAC,OAAO,IAAI,CAACxB,kBAAkB,EAAE,CAAA;KAAC,CAAA;IAC3Sl9B,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAAC8sC,UAAU,GAAC,UAAS5tC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAAC,IAAI,CAACyqC,MAAM;QAACxqC,CAAC,GAAC,IAAI,CAACyqC,OAAO,CAAA;MAAC3qC,CAAC,GAACE,CAAC,GAACF,CAAC,CAAA;EAAC,IAAA,KAAI,IAAII,CAAC,GAAC,EAAE,EAACnC,CAAC,GAAC,EAAE,EAACiC,CAAC,GAACF,CAAC,GAAE;EAAC,MAAA,IAAIjB,CAAC,GAACkB,CAAC,CAACC,CAAC,EAAE,CAAC,CAAA;QAAC,IAAG,GAAG,GAACnB,CAAC,EAACqB,CAAC,CAACR,IAAI,CAACb,CAAC,CAAC,CAAC,KAAK,IAAG,GAAG,GAACA,CAAC,EAAC,SAAS,KAAK,IAAG,GAAG,GAACA,CAAC,EAAC;EAAC,QAAA,IAAIE,CAAC,GAACgB,CAAC,CAACC,CAAC,EAAE,CAAC,CAAA;EAACE,QAAAA,CAAC,CAACR,IAAI,CAAC,CAACb,CAAC,GAAC,EAAE,KAAG,CAAC,GAACE,CAAC,GAAC,EAAE,CAAC,CAAA;EAAA,OAAC,MAAK,IAAG,GAAG,GAACF,CAAC,EAAC;EAACE,QAAAA,CAAC,GAACgB,CAAC,CAACC,CAAC,EAAE,CAAC,CAAA;EAAC,QAAA,IAAIoV,CAAC,GAACrV,CAAC,CAACC,CAAC,EAAE,CAAC,CAAA;UAACE,CAAC,CAACR,IAAI,CAAC,CAACb,CAAC,GAAC,EAAE,KAAG,EAAE,GAAC,CAACE,CAAC,GAAC,EAAE,KAAG,CAAC,GAACqW,CAAC,GAAC,EAAE,CAAC,CAAA;EAAA,OAAC,MAAK,IAAG,GAAG,GAACvW,CAAC,EAAC;EAACE,QAAAA,CAAC,GAACgB,CAAC,CAACC,CAAC,EAAE,CAAC,CAAA;EAACoV,QAAAA,CAAC,GAACrV,CAAC,CAACC,CAAC,EAAE,CAAC,CAAA;EAAC,QAAA,IAAIqV,CAAC,GAACtV,CAAC,CAACC,CAAC,EAAE,CAAC,CAAA;UAACnB,CAAC,GAAC,CAACA,CAAC,GAAC,CAAC,KAAG,EAAE,GAAC,CAACE,CAAC,GAAC,EAAE,KAAG,EAAE,GAAC,CAACqW,CAAC,GAAC,EAAE,KAAG,CAAC,GAACC,CAAC,GAAC,EAAE,CAAA;EAACxW,QAAAA,CAAC,IAAE,KAAK,CAAA;EAACqB,QAAAA,CAAC,CAACR,IAAI,CAAC,CAACb,CAAC,IAAE,EAAE,GAAC,IAAI,IAAE,KAAK,EAAC,CAACA,CAAC,GAAC,IAAI,IAAE,KAAK,CAAC,CAAA;EAAA,OAAA;QAAC,IAAI,IAAEqB,CAAC,CAACT,MAAM,KAAG1B,CAAC,IAAEkC,MAAM,CAACuY,YAAY,CAACpa,KAAK,CAAC,IAAI,EAAC8B,CAAC,CAAC,EAACA,CAAC,CAACT,MAAM,GAAC,CAAC,CAAC,CAAA;EAAA,KAAA;MAAC1B,CAAC,IAAE6D,IAAI,CAACwW,KAAK,CAACG,iBAAiB,CAACrY,CAAC,CAAC,CAAA;MAC/gB,IAAI,CAACuqC,OAAO,GAACzqC,CAAC,CAAA;EAAC,IAAA,OAAOjC,CAAC,CAAA;KAAC,CAAA;EAACgR,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAAC+sC,oBAAoB,GAAC,YAAU;EAAC,IAAA,IAAI7tC,CAAC,GAAC,IAAI,CAACksC,oBAAoB,EAAE,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC0B,UAAU,CAAC5tC,CAAC,CAAC,CAAA;KAAC,CAAA;IAACiP,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACgtC,SAAS,GAAC,UAAS9tC,CAAC,EAAC;EAAC,IAAA,IAAG,CAAC,GAACA,CAAC,IAAE,IAAI,CAAC2qC,OAAO,GAAC3qC,CAAC,GAAC,IAAI,CAAC0qC,MAAM,CAAC/qC,MAAM,EAAC,OAAO,IAAI,CAACmrC,MAAM,GAAC,CAAC,CAAC,EAAC77B,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,sBAAsB,CAAC,EAAC,IAAI83B,UAAU,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAIpnC,CAAC,GAAC,IAAI,CAACyqC,MAAM,CAACpD,QAAQ,CAAC,IAAI,CAACqD,OAAO,EAAC,IAAI,CAACA,OAAO,GAAC3qC,CAAC,CAAC,CAAA;MAAC,IAAI,CAAC2qC,OAAO,IAAE3qC,CAAC,CAAA;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACu7B,OAAO,IAAE,IAAI,CAACC,IAAI,CAAC,CAAA;EAAC,IAAA,OAAO3qC,CAAC,CAAA;KAAC,CAAA;EAACgP,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACitC,gBAAgB,GAAC,YAAU;MAAC,OAAO,IAAI,CAAClC,iBAAiB,CAAC58B,IAAI,CAACs4B,KAAK,CAACqB,UAAU,CAAC,CAAA;KAAC,CAAA;EAC/iB35B,EAAAA,IAAI,CAACw7B,aAAa,CAAC3pC,SAAS,CAACktC,eAAe,GAAC,YAAU;EAAC,IAAA,IAAIhuC,CAAC,GAAC,IAAI,CAAC0qC,MAAM;QAACzqC,CAAC,GAAC,IAAI,CAAC0qC,OAAO;EAACzqC,MAAAA,CAAC,GAACF,CAAC,CAACC,CAAC,GAAC,CAAC,CAAC;EAACG,MAAAA,CAAC,GAACJ,CAAC,CAACC,CAAC,GAAC,CAAC,CAAC;EAAChC,MAAAA,CAAC,GAAC+B,CAAC,CAACC,CAAC,GAAC,CAAC,CAAC;EAAClB,MAAAA,CAAC,GAACiB,CAAC,CAACC,CAAC,GAAC,CAAC,CAAC;EAAChB,MAAAA,CAAC,GAACe,CAAC,CAACC,CAAC,GAAC,CAAC,CAAC;EAACqV,MAAAA,CAAC,GAACtV,CAAC,CAACC,CAAC,GAAC,CAAC,CAAC;EAACsV,MAAAA,CAAC,GAACvV,CAAC,CAACC,CAAC,GAAC,CAAC,CAAC,CAAA;EAACD,IAAAA,CAAC,GAACA,CAAC,CAACC,CAAC,GAAC,CAAC,CAAC,CAAA;MAAC,IAAI,CAAC0qC,OAAO,IAAE,CAAC,CAAA;EAAC,IAAA,OAAOxqC,MAAM,CAACuY,YAAY,CAACxY,CAAC,EAACE,CAAC,EAACnC,CAAC,EAACc,CAAC,EAACE,CAAC,EAACqW,CAAC,EAACC,CAAC,EAACvV,CAAC,CAAC,CAAA;KAAC,CAAA;IAACiP,IAAI,CAACg/B,YAAY,GAAC,UAASjuC,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAI,CAACguC,QAAQ,GAACj/B,IAAI,CAACw7B,aAAa,CAACQ,KAAK,CAACjrC,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;MAAC,IAAI,CAACiuC,YAAY,GAAC,IAAI,CAACD,QAAQ,CAAC3C,SAAS,EAAE,CAAA;EAAC,IAAA,IAAI,CAAC6C,UAAU,GAACn/B,IAAI,CAACW,eAAe,CAAC+B,oBAAoB,CAAA;MAAC,IAAI,CAAC08B,aAAa,GAACp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACrB,OAAO,CAAA;EAAC,IAAA,IAAI,CAAC86B,MAAM,GAAC,CAAC,CAAC,CAAA;MAAC,IAAI,CAACwD,cAAc,GAAC,IAAI,CAAA;KAAC,CAAA;EAACr/B,EAAAA,IAAI,CAACg/B,YAAY,CAACjD,cAAc,GAAC,EAAE,CAAA;IACzhB/7B,IAAI,CAACg/B,YAAY,CAAChD,KAAK,GAAC,UAASjrC,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG+O,IAAI,CAACg/B,YAAY,CAACjD,cAAc,CAACrrC,MAAM,EAAC;QAAC,IAAIS,CAAC,GAAC6O,IAAI,CAACg/B,YAAY,CAACjD,cAAc,CAACtrC,GAAG,EAAE,CAAA;EAACM,MAAAA,CAAC,IAAEI,CAAC,CAAC8tC,QAAQ,CAACnD,QAAQ,CAAC/qC,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,MAAA,OAAOE,CAAC,CAAA;EAAA,KAAA;MAAC,OAAO,IAAI6O,IAAI,CAACg/B,YAAY,CAACjuC,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC+O,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACmqC,KAAK,GAACh8B,IAAI,CAACg/B,YAAY,CAAChD,KAAK,CAAA;EACtQh8B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACoqC,IAAI,GAAC,YAAU;EAAC,IAAA,IAAI,CAACgD,QAAQ,CAACtgC,KAAK,EAAE,CAAA;EAAC,IAAA,IAAI,CAACwgC,UAAU,GAACn/B,IAAI,CAACW,eAAe,CAAC+B,oBAAoB,CAAA;MAAC,IAAI,CAAC08B,aAAa,GAACp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACrB,OAAO,CAAA;EAAC,IAAA,IAAI,CAAC86B,MAAM,GAAC,CAAC,CAAC,CAAA;MAAC,IAAI,CAACwD,cAAc,GAAC,IAAI,CAAA;EAAC,IAAA,GAAG,GAACr/B,IAAI,CAACg/B,YAAY,CAACjD,cAAc,CAACrrC,MAAM,IAAEsP,IAAI,CAACg/B,YAAY,CAACjD,cAAc,CAACprC,IAAI,CAAC,IAAI,CAAC,CAAA;KAAC,CAAA;EAACqP,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACytC,cAAc,GAAC,YAAU;MAAC,OAAO,IAAI,CAACJ,YAAY,CAAA;KAAC,CAAA;EAACl/B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACyqC,SAAS,GAAC,YAAU;EAAC,IAAA,OAAO,IAAI,CAAC2C,QAAQ,CAAC3C,SAAS,EAAE,CAAA;KAAC,CAAA;EACzdt8B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACqqC,SAAS,GAAC,YAAU;EAAC,IAAA,OAAO,IAAI,CAAC+C,QAAQ,CAAC/C,SAAS,EAAE,CAAA;KAAC,CAAA;EAACl8B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC0tC,cAAc,GAAC,YAAU;MAAC,OAAO,IAAI,CAACJ,UAAU,CAAA;KAAC,CAAA;EAACtsC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,gBAAgB,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC0tC,cAAc,CAAC,CAAA;EAACv/B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC2tC,WAAW,GAAC,YAAU;MAAC,OAAO,IAAI,CAACJ,aAAa,CAAA;KAAC,CAAA;EAACp/B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC4tC,WAAW,GAAC,YAAU;MAAC,OAAO,IAAI,CAACL,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,CAAA;KAAC,CAAA;EACldzP,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,aAAa,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC4tC,WAAW,CAAC,CAAA;EAACz/B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC6tC,UAAU,GAAC,YAAU;MAAC,OAAO,IAAI,CAACN,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACI,SAAS,CAAA;KAAC,CAAA;EAAC3P,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,YAAY,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC6tC,UAAU,CAAC,CAAA;EAAC1/B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC8qC,QAAQ,GAAC,YAAU;MAAC,OAAO,IAAI,CAACd,MAAM,IAAE,IAAI,CAACoD,QAAQ,CAACtC,QAAQ,EAAE,CAAA;KAAC,CAAA;EAC/Z38B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACiqC,QAAQ,GAAC,UAAS/qC,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,CAACguC,QAAQ,CAACnD,QAAQ,CAAC/qC,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAI,CAACkuC,UAAU,GAACn/B,IAAI,CAACW,eAAe,CAAC+B,oBAAoB,CAAA;MAAC,IAAI,CAAC08B,aAAa,GAACp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACrB,OAAO,CAAA;KAAC,CAAA;EAACf,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACwqC,KAAK,GAAC,YAAU;EAAC,IAAA,IAAI,CAAC4C,QAAQ,CAAC5C,KAAK,EAAE,CAAA;EAAC,IAAA,IAAI,CAAC8C,UAAU,GAACn/B,IAAI,CAACW,eAAe,CAAC+B,oBAAoB,CAAA;MAAC,IAAI,CAAC08B,aAAa,GAACp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACrB,OAAO,CAAA;KAAC,CAAA;IAACf,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC2qC,OAAO,GAAC,UAASzrC,CAAC,EAAC;EAAC,IAAA,IAAI,CAACkuC,QAAQ,CAACzC,OAAO,CAACzrC,CAAC,CAAC,CAAA;KAAC,CAAA;EACvciP,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC8tC,SAAS,GAAC,YAAU;MAAC,IAAG,IAAI,CAACV,QAAQ,CAACxC,KAAK,EAAE,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,IAAA,IAAG,IAAI,CAACE,QAAQ,EAAE,EAAC,OAAO38B,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,sBAAsB,CAAC,EAAC,CAAC,CAAC,CAAA;MAAC,IAAI,CAAC4+B,YAAY,GAAC,IAAI,CAACD,QAAQ,CAAC3C,SAAS,EAAE,CAAA;EAAC,IAAA,IAAIvrC,CAAC,GAAC,IAAI,CAACkuC,QAAQ,CAAChC,oBAAoB,EAAE;QAACjsC,CAAC,GAACD,CAAC,KAAG,CAAC,CAAA;EAACA,IAAAA,CAAC,IAAE,CAAC,CAAA;EAAC,IAAA,IAAGA,CAAC,IAAEiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,IAAEtR,CAAC,IAAEiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACd,OAAO,IAAEvQ,CAAC,IAAEiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACf,OAAO,IAAEtQ,CAAC,IAAEiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,IAAEvR,CAAC,IAAEiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACG,WAAW,IAAExR,CAAC,IAAEiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACI,SAAS,EAAC,OAAOxC,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,wCAAwC,EACpkBvP,CAAC,EAAC,IAAI,CAACmuC,YAAY,CAAC,EAAC,IAAI,CAACrD,MAAM,GAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAA;MAAC,IAAI,CAACsD,UAAU,GAACnuC,CAAC,CAAA;MAAC,IAAI,CAACouC,aAAa,GAACruC,CAAC,CAAA;EAAC,IAAA,OAAM,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,WAAW,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC8tC,SAAS,CAAC,CAAA;EAAC3/B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC+tC,YAAY,GAAC,YAAU;EAAC,IAAA,IAAI,CAACX,QAAQ,CAACjC,YAAY,CAAC,IAAI,CAACmC,UAAU,IAAE,CAAC,GAAC,IAAI,CAACC,aAAa,CAAC,CAAA;KAAC,CAAA;EAACp/B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACguC,kBAAkB,GAAC,YAAU;EAAC,IAAA,IAAI9uC,CAAC,GAAC,IAAI,CAACouC,UAAU,CAAA;EAAC,IAAA,KAAI,IAAI,CAACS,YAAY,EAAE,EAAC,IAAI,CAACD,SAAS,EAAE,IAAE,IAAI,CAACJ,cAAc,EAAE,IAAExuC,CAAC,GAAA;QAAE,IAAI,CAAC+uC,SAAS,EAAE,CAAA;EAAC,KAAA;MAAA,IAAI,CAACb,QAAQ,CAACxC,KAAK,EAAE,IAAE,IAAI,CAACmD,YAAY,EAAE,CAAA;KAAC,CAAA;EAClgB5/B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACkuC,eAAe,GAAC,YAAU;EAAC,IAAA,IAAI,CAACX,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,IAAErC,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,uCAAuC,CAAC,EAAC,IAAI,CAACw/B,SAAS,EAAE,IAAE,IAAI,CAACb,QAAQ,CAAClC,UAAU,EAAE,CAAA;KAAC,CAAA;EAAC/8B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACmuC,kBAAkB,GAAC,YAAU;MAAC,IAAG,IAAI,CAACZ,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,EAACtC,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,0CAA0C,CAAC,EAAC,IAAI,CAACw/B,SAAS,EAAE,CAAC,KAAI;EAAC,MAAA,IAAI/uC,CAAC,GAAC,IAAI,CAACkuC,QAAQ,CAAChC,oBAAoB,EAAE,CAAA;EAAC,MAAA,IAAI,CAACgC,QAAQ,CAACzC,OAAO,CAACzrC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EAC5eiP,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACouC,gBAAgB,GAAC,YAAU;EAAC,IAAA,IAAI,CAACb,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACd,OAAO,IAAEtB,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,wCAAwC,CAAC,EAAC,IAAI,CAACw/B,SAAS,EAAE,IAAE,IAAI,CAACb,QAAQ,CAACzC,OAAO,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAACx8B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACquC,gBAAgB,GAAC,YAAU;EAAC,IAAA,IAAI,CAACd,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACf,OAAO,IAAErB,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,wCAAwC,CAAC,EAAC,IAAI,CAACw/B,SAAS,EAAE,IAAE,IAAI,CAACb,QAAQ,CAACzC,OAAO,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EACrbx8B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACsuC,SAAS,GAAC,YAAU;EAAC,IAAA,IAAIpvC,CAAC,GAAC,IAAI,CAACouC,UAAU,CAAA;MAAC,GAAE;EAAC,MAAA,IAAG,CAAC,IAAI,CAACQ,SAAS,EAAE,EAAC;EAAC3/B,QAAAA,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,uCAAuC,CAAC,CAAA;EAAC,QAAA,IAAI,CAACu7B,MAAM,GAAC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;EAAK,OAAA;QAAC,IAAG,IAAI,CAACuD,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACI,SAAS,EAAC;UAAC,IAAI,CAAC28B,UAAU,IAAEpuC,CAAC,KAAGiP,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,yBAAyB,CAAC,EAAC,IAAI,CAACu7B,MAAM,GAAC,CAAC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;EAAK,OAAA;QAAC,IAAI,CAACiE,SAAS,EAAE,CAAA;EAAA,KAAC,QAAM,CAAC,EAAA;KAAE,CAAA;EAClW9/B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACiuC,SAAS,GAAC,YAAU;MAAC,QAAO,IAAI,CAACV,aAAa;EAAE,MAAA,KAAKp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM;UAAC,IAAI,CAAC09B,eAAe,EAAE,CAAA;EAAC,QAAA,MAAA;EAAM,MAAA,KAAK//B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACf,OAAO;UAAC,IAAI,CAAC6+B,gBAAgB,EAAE,CAAA;EAAC,QAAA,MAAA;EAAM,MAAA,KAAKlgC,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS;UAAC,IAAI,CAAC09B,kBAAkB,EAAE,CAAA;EAAC,QAAA,MAAA;EAAM,MAAA,KAAKhgC,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACd,OAAO;UAAC,IAAI,CAAC2+B,gBAAgB,EAAE,CAAA;EAAC,QAAA,MAAA;EAAM,MAAA,KAAKjgC,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACG,WAAW;UAAC,IAAI,CAAC49B,SAAS,EAAE,CAAA;EAAC,QAAA,MAAA;EAAM,MAAA;EAAQngC,QAAAA,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,kCAAkC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;IACvfN,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACuuC,oBAAoB,GAAC,UAASrvC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,KAAG,IAAI,CAACquC,cAAc,KAAG,IAAI,CAACA,cAAc,GAAC,EAAE,CAAC,CAAA;EAACr/B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAI,CAACk/B,cAAc,CAACtuC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAI,CAACsuC,cAAc,CAACtuC,CAAC,CAAC,GAACC,CAAC,CAAA;KAAC,CAAA;IAACgP,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACwuC,eAAe,GAAC,UAAStvC,CAAC,EAAC;MAACiP,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,KAAG,IAAI,CAACk/B,cAAc,CAAC,CAAA;EAACtuC,IAAAA,CAAC,GAAC,IAAI,CAACsuC,cAAc,CAACtuC,CAAC,CAAC,CAAA;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,CAAC,CAAA;MAAC,OAAOA,CAAC,CAAC,IAAI,CAAC,CAAA;KAAC,CAAA;IAClWiP,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACyuC,OAAO,GAAC,UAASvvC,CAAC,EAAC;MAAC,IAAI,CAACquC,aAAa,GAACp/B,IAAI,CAACW,eAAe,CAAC8B,mBAAmB,CAAC1R,CAAC,CAAC,CAAA;EAAC,IAAA,IAAIC,CAAC,GAACgP,IAAI,CAACW,eAAe,CAACG,SAAS,CAAA;EAAC,IAAA,QAAO/P,CAAC;QAAE,KAAKC,CAAC,CAACgQ,MAAM;UAAC,OAAO,IAAI,CAACw9B,UAAU,EAAE,CAAA;QAAC,KAAKxtC,CAAC,CAACiQ,KAAK;UAAC,OAAO,IAAI,CAACs9B,SAAS,EAAE,CAAA;QAAC,KAAKvtC,CAAC,CAACkQ,KAAK;UAAC,OAAO,IAAI,CAACm9B,SAAS,EAAE,CAAA;QAAC,KAAKrtC,CAAC,CAACmQ,MAAM;UAAC,OAAO,IAAI,CAAC68B,UAAU,EAAE,CAAA;QAAC,KAAKhtC,CAAC,CAACoQ,KAAK;UAAC,OAAO,IAAI,CAACg9B,SAAS,EAAE,CAAA;QAAC,KAAKptC,CAAC,CAACqQ,OAAO;UAAC,OAAO,IAAI,CAACk/B,WAAW,EAAE,CAAA;QAAC,KAAKvvC,CAAC,CAACsQ,OAAO;UAAC,OAAO,IAAI,CAACk/B,WAAW,EAAE,CAAA;QAAC,KAAKxvC,CAAC,CAACuQ,IAAI;UAAC,OAAO,IAAI,CAACk9B,QAAQ,EAAE,CAAA;QAAC,KAAKztC,CAAC,CAACwQ,MAAM;UAAC,OAAO,IAAI,CAACm9B,UAAU,EAAE,CAAA;QACtf,KAAK3tC,CAAC,CAACyQ,KAAK;EAACzB,QAAAA,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,6CAA6C,CAAC,CAAA;QAAC,KAAKtP,CAAC,CAAC0Q,OAAO;EAAC1B,QAAAA,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,+CAA+C,CAAC,CAAA;QAAC,KAAKtP,CAAC,CAAC2Q,KAAK;UAAC,OAAO,IAAI,CAACk9B,SAAS,EAAE,CAAA;QAAC,KAAK7tC,CAAC,CAAC4Q,MAAM;UAAC,OAAO,IAAI,CAACm8B,UAAU,EAAE,CAAA;QAAC,KAAK/sC,CAAC,CAAC6Q,IAAI;UAAC,OAAO,IAAI,CAAC68B,QAAQ,EAAE,CAAA;QAAC,KAAK1tC,CAAC,CAAC8Q,QAAQ;UAAC,OAAO,IAAI,CAAC2+B,YAAY,EAAE,CAAA;QAAC,KAAKzvC,CAAC,CAAC+Q,QAAQ;UAAC,OAAO,IAAI,CAAC2+B,YAAY,EAAE,CAAA;QAAC,KAAK1vC,CAAC,CAACgR,MAAM;UAAC,OAAO,IAAI,CAAC2+B,UAAU,EAAE,CAAA;QAAC,KAAK3vC,CAAC,CAACiR,MAAM;UAAC,OAAO,IAAI,CAAC2+B,UAAU,EAAE,CAAA;QAAC,KAAK5vC,CAAC,CAACkR,OAAO;UAAC,OAAO,IAAI,CAAC68B,eAAe,EAAE,CAAA;QAAC,KAAK/tC,CAAC,CAACmR,OAAO;UAAC,OAAO,IAAI,CAAC28B,gBAAgB,EAAE,CAAA;EAC7gB,MAAA;EAAQ9+B,QAAAA,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,iCAAiC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAO,CAAC,CAAA;KAAC,CAAA;IAACN,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACgvC,WAAW,GAAC,UAAS9vC,CAAC,EAACC,CAAC,EAAC;EAACgP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,CAAC,CAAA;EAAC,IAAA,IAAIrR,CAAC,GAAC,IAAI,CAACguC,QAAQ,CAAC9C,MAAM,EAAE;EAAChrC,MAAAA,CAAC,GAAC,IAAI,CAAC8tC,QAAQ,CAAChC,oBAAoB,EAAE,CAAA;MAAC9rC,CAAC,GAAC,IAAI,CAAC8tC,QAAQ,CAAC3C,SAAS,EAAE,GAACnrC,CAAC,CAAA;EAAC,IAAA,IAAI,CAAC8tC,QAAQ,CAAC7C,MAAM,CAACjrC,CAAC,CAAC,CAAA;EAACH,IAAAA,CAAC,CAACD,CAAC,EAAC,IAAI,CAAC,CAAA;EAAC,IAAA,IAAI,CAACkuC,QAAQ,CAAC1C,SAAS,CAACprC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAI,CAAC8tC,QAAQ,CAAC7C,MAAM,CAACnrC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,aAAa,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACgvC,WAAW,CAAC,CAAA;EAC5e7gC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACivC,SAAS,GAAC,UAAS/vC,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC+O,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACG,WAAW,CAAC,CAAA;MAACvC,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACg/B,UAAU,IAAEpuC,CAAC,CAAC,CAAA;EAACE,IAAAA,CAAC,CAACD,CAAC,EAAC,IAAI,CAAC,CAAA;EAAC,IAAA,IAAI,CAAC6qC,MAAM,IAAE,IAAI,CAACuD,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACI,SAAS,KAAGxC,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,oDAAoD,CAAC,EAAC,IAAI,CAACu7B,MAAM,GAAC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAChpC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,WAAW,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACivC,SAAS,CAAC,CAAA;EACjc9gC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACkvC,eAAe,GAAC,YAAU;EAAC/gC,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,CAAC,CAAA;EAAC,IAAA,IAAIvR,CAAC,GAAC,IAAI,CAACkuC,QAAQ,CAAChC,oBAAoB,EAAE;EAACjsC,MAAAA,CAAC,GAAC,IAAI,CAACiuC,QAAQ,CAAC3C,SAAS,EAAE;QAACrrC,CAAC,GAACD,CAAC,GAACD,CAAC,CAAA;EAACA,IAAAA,CAAC,GAACiP,IAAI,CAACw7B,aAAa,CAACQ,KAAK,CAAC,IAAI,CAACiD,QAAQ,CAAC/C,SAAS,EAAE,EAAClrC,CAAC,EAACD,CAAC,CAAC,CAAA;EAAC,IAAA,IAAI,CAACkuC,QAAQ,CAAC1C,SAAS,CAACtrC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOF,CAAC,CAAA;KAAC,CAAA;EAACiP,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACusC,SAAS,GAAC,YAAU;EAACp+B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC48B,QAAQ,CAAC/B,kBAAkB,EAAE,CAAA;KAAC,CAAA;EAC7drqC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,WAAW,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACusC,SAAS,CAAC,CAAA;EAACp+B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACmvC,eAAe,GAAC,YAAU;EAAChhC,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC48B,QAAQ,CAAC7B,wBAAwB,EAAE,CAAA;KAAC,CAAA;EAACp9B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACwsC,SAAS,GAAC,YAAU;EAACr+B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC48B,QAAQ,CAACzB,kBAAkB,EAAE,CAAA;KAAC,CAAA;EAClc3qC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,WAAW,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACwsC,SAAS,CAAC,CAAA;EAACr+B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACysC,eAAe,GAAC,YAAU;EAACt+B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC48B,QAAQ,CAACxB,wBAAwB,EAAE,CAAA;KAAC,CAAA;EAACz9B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACksC,UAAU,GAAC,YAAU;EAAC/9B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC48B,QAAQ,CAAChC,oBAAoB,EAAE,CAAA;KAAC,CAAA;EACrcpqC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,YAAY,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACksC,UAAU,CAAC,CAAA;EAAC/9B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACovC,gBAAgB,GAAC,YAAU;EAACjhC,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC48B,QAAQ,CAAC9B,0BAA0B,EAAE,CAAA;KAAC,CAAA;EAACn9B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACmsC,UAAU,GAAC,YAAU;EAACh+B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC48B,QAAQ,CAAC3B,oBAAoB,EAAE,CAAA;KAAC,CAAA;EAC1czqC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,YAAY,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACmsC,UAAU,CAAC,CAAA;EAACh+B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACosC,gBAAgB,GAAC,YAAU;EAACj+B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC48B,QAAQ,CAAC1B,0BAA0B,EAAE,CAAA;KAAC,CAAA;EAACv9B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC8uC,UAAU,GAAC,YAAU;EAAC3gC,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC48B,QAAQ,CAAC5B,kBAAkB,EAAE,CAAA;KAAC,CAAA;EACxcxqC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,YAAY,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC8uC,UAAU,CAAC,CAAA;EAAC3gC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC+uC,UAAU,GAAC,YAAU;EAAC5gC,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC48B,QAAQ,CAACvB,kBAAkB,EAAE,CAAA;KAAC,CAAA;EAAC7qC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,YAAY,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC+uC,UAAU,CAAC,CAAA;EACpX5gC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACqvC,gBAAgB,GAAC,YAAU;EAAClhC,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC48B,QAAQ,CAACrB,wBAAwB,EAAE,CAAA;KAAC,CAAA;EAAC59B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC2uC,WAAW,GAAC,YAAU;EAACxgC,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACd,OAAO,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC29B,QAAQ,CAAClB,UAAU,EAAE,CAAA;KAAC,CAAA;EAAClrC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,aAAa,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC2uC,WAAW,CAAC,CAAA;EAClcxgC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC0uC,WAAW,GAAC,YAAU;EAACvgC,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACf,OAAO,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC49B,QAAQ,CAACjB,UAAU,EAAE,CAAA;KAAC,CAAA;EAACnrC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,aAAa,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC0uC,WAAW,CAAC,CAAA;EAACvgC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACsvC,iBAAiB,GAAC,YAAU;EAACnhC,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACf,OAAO,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC49B,QAAQ,CAAChB,gBAAgB,EAAE,CAAA;KAAC,CAAA;EAC5bj+B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC4uC,YAAY,GAAC,YAAU;EAACzgC,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACd,OAAO,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC29B,QAAQ,CAACb,SAAS,EAAE,CAAA;KAAC,CAAA;EAACvrC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,cAAc,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC4uC,YAAY,CAAC,CAAA;EAACzgC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACuvC,kBAAkB,GAAC,YAAU;EAACphC,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACd,OAAO,CAAC,CAAA;MAAC,OAAO,IAAI,CAAC29B,QAAQ,CAACb,SAAS,EAAE,CAACzlC,QAAQ,EAAE,CAAA;KAAC,CAAA;EACncqH,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC6uC,YAAY,GAAC,YAAU;EAAC1gC,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACf,OAAO,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC49B,QAAQ,CAACZ,SAAS,EAAE,CAAA;KAAC,CAAA;EAACxrC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,cAAc,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC6uC,YAAY,CAAC,CAAA;EAAC1gC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACwvC,kBAAkB,GAAC,YAAU;EAACrhC,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACf,OAAO,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC49B,QAAQ,CAACX,eAAe,EAAE,CAAA;KAAC,CAAA;EAC9bt+B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC0sC,SAAS,GAAC,YAAU;EAACv+B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACd,OAAO,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC29B,QAAQ,CAACV,SAAS,EAAE,CAAA;KAAC,CAAA;EAAC1rC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,WAAW,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC0sC,SAAS,CAAC,CAAA;EAACv+B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC2sC,UAAU,GAAC,YAAU;EAACx+B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACf,OAAO,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC49B,QAAQ,CAACT,UAAU,EAAE,CAAA;KAAC,CAAA;EAAC3rC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,YAAY,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC2sC,UAAU,CAAC,CAAA;EAC7gBx+B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC4sC,QAAQ,GAAC,YAAU;EAACz+B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAA;EAAC,IAAA,OAAM,CAAC,CAAC,IAAI,CAAC48B,QAAQ,CAAChC,oBAAoB,EAAE,CAAA;KAAC,CAAA;EAACpqC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,UAAU,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC4sC,QAAQ,CAAC,CAAA;EAACz+B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC6sC,QAAQ,GAAC,YAAU;EAAC1+B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC48B,QAAQ,CAACzB,kBAAkB,EAAE,CAAA;KAAC,CAAA;EAAC3qC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,UAAU,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC6sC,QAAQ,CAAC,CAAA;EACthB1+B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC8sC,UAAU,GAAC,YAAU;EAAC3+B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,CAAC,CAAA;EAAC,IAAA,IAAIvR,CAAC,GAAC,IAAI,CAACkuC,QAAQ,CAAChC,oBAAoB,EAAE,CAAA;EAAC,IAAA,OAAO,IAAI,CAACgC,QAAQ,CAACN,UAAU,CAAC5tC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,YAAY,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC8sC,UAAU,CAAC,CAAA;EAAC3+B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACgtC,SAAS,GAAC,YAAU;EAAC7+B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,CAAC,CAAA;EAAC,IAAA,IAAIvR,CAAC,GAAC,IAAI,CAACkuC,QAAQ,CAAChC,oBAAoB,EAAE,CAAA;EAAC,IAAA,OAAO,IAAI,CAACgC,QAAQ,CAACJ,SAAS,CAAC9tC,CAAC,CAAC,CAAA;KAAC,CAAA;EACtgB8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,WAAW,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACgtC,SAAS,CAAC,CAAA;EAAC7+B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACitC,gBAAgB,GAAC,YAAU;EAAC9+B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC48B,QAAQ,CAACH,gBAAgB,EAAE,CAAA;KAAC,CAAA;EAAC9+B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACyvC,cAAc,GAAC,YAAU;EAACthC,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC48B,QAAQ,CAACtB,sBAAsB,EAAE,CAAA;KAAC,CAAA;IACpc39B,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC+qC,iBAAiB,GAAC,UAAS7rC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC48B,QAAQ,CAACrC,iBAAiB,CAAC7rC,CAAC,CAAC,CAAA;KAAC,CAAA;IAACiP,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACgrC,uBAAuB,GAAC,UAAS9rC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAA;MAAC,OAAO,IAAI,CAAC48B,QAAQ,CAACrC,iBAAiB,CAAC,UAAS5rC,CAAC,EAACC,CAAC,EAAC;QAAC,OAAO+O,IAAI,CAACs4B,KAAK,CAACiB,YAAY,CAACvoC,CAAC,EAACC,CAAC,EAACF,CAAC,CAAC,CAAA;EAAA,KAAC,CAAC,CAAA;KAAC,CAAA;EAC9ZiP,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACktC,eAAe,GAAC,YAAU;EAAC/+B,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACf,OAAO,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC49B,QAAQ,CAACF,eAAe,EAAE,CAAA;KAAC,CAAA;IAAC/+B,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACirC,gBAAgB,GAAC,UAAS/rC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACf,OAAO,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAC49B,QAAQ,CAACnC,gBAAgB,CAAC/rC,CAAC,CAAC,CAAA;KAAC,CAAA;IAC/ViP,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC0vC,gBAAgB,GAAC,UAASxwC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,IAAI,CAACi/B,aAAa,IAAEp/B,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,CAAC,CAAA;EAAC,IAAA,IAAItR,CAAC,GAAC,IAAI,CAACiuC,QAAQ,CAAChC,oBAAoB,EAAE,CAAA;MAACjsC,CAAC,GAAC,IAAI,CAACiuC,QAAQ,CAAC3C,SAAS,EAAE,GAACtrC,CAAC,CAAA;EAAC,IAAA,KAAI,IAAIC,CAAC,GAAC,EAAE,EAAC,IAAI,CAACguC,QAAQ,CAAC3C,SAAS,EAAE,GAACtrC,CAAC,GAAA;QAAEC,CAAC,CAACN,IAAI,CAACI,CAAC,CAACP,IAAI,CAAC,IAAI,CAACyuC,QAAQ,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOhuC,CAAC,CAAA;KAAC,CAAA;EAAC+O,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC2vC,eAAe,GAAC,YAAU;MAAC,OAAO,IAAI,CAACD,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAAC/B,kBAAkB,CAAC,CAAA;KAAC,CAAA;EAACrqC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,iBAAiB,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC2vC,eAAe,CAAC,CAAA;EAC1gBxhC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC4vC,qBAAqB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACF,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAAC7B,wBAAwB,CAAC,CAAA;KAAC,CAAA;EAACp9B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC6vC,eAAe,GAAC,YAAU;MAAC,OAAO,IAAI,CAACH,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAACzB,kBAAkB,CAAC,CAAA;KAAC,CAAA;EAAC3qC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,iBAAiB,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC6vC,eAAe,CAAC,CAAA;EAAC1hC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC8vC,qBAAqB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACJ,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAACxB,wBAAwB,CAAC,CAAA;KAAC,CAAA;EAC3ez9B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC+vC,gBAAgB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACL,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAAChC,oBAAoB,CAAC,CAAA;KAAC,CAAA;EAACpqC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,kBAAkB,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC+vC,gBAAgB,CAAC,CAAA;EAAC5hC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACgwC,sBAAsB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACN,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAAC9B,0BAA0B,CAAC,CAAA;KAAC,CAAA;EAACn9B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACiwC,gBAAgB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACP,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAAC3B,oBAAoB,CAAC,CAAA;KAAC,CAAA;EAC1ezqC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,kBAAkB,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACiwC,gBAAgB,CAAC,CAAA;EAAC9hC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACkwC,sBAAsB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACR,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAAC1B,0BAA0B,CAAC,CAAA;KAAC,CAAA;EAACv9B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACmwC,gBAAgB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACT,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAAC5B,kBAAkB,CAAC,CAAA;KAAC,CAAA;EAACxqC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,kBAAkB,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACmwC,gBAAgB,CAAC,CAAA;EAC/dhiC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACowC,gBAAgB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACV,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAACvB,kBAAkB,CAAC,CAAA;KAAC,CAAA;EAAC7qC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,kBAAkB,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACowC,gBAAgB,CAAC,CAAA;EAACjiC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACqwC,sBAAsB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACX,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAACrB,wBAAwB,CAAC,CAAA;KAAC,CAAA;EAAC59B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACswC,iBAAiB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACZ,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAAClB,UAAU,CAAC,CAAA;KAAC,CAAA;EAC7dlrC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,mBAAmB,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACswC,iBAAiB,CAAC,CAAA;EAACniC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACuwC,iBAAiB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACb,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAACjB,UAAU,CAAC,CAAA;KAAC,CAAA;EAACnrC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,mBAAmB,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACuwC,iBAAiB,CAAC,CAAA;EAACpiC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACwwC,uBAAuB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACd,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAAChB,gBAAgB,CAAC,CAAA;KAAC,CAAA;EACndj+B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACywC,kBAAkB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACf,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAACb,SAAS,CAAC,CAAA;KAAC,CAAA;EAACvrC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,oBAAoB,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACywC,kBAAkB,CAAC,CAAA;EAACtiC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC0wC,kBAAkB,GAAC,YAAU;MAAC,OAAO,IAAI,CAAChB,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAACZ,SAAS,CAAC,CAAA;KAAC,CAAA;EAACxrC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,oBAAoB,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC0wC,kBAAkB,CAAC,CAAA;EAC3cviC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC2wC,wBAAwB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACjB,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAACX,eAAe,CAAC,CAAA;KAAC,CAAA;EAACt+B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC4wC,eAAe,GAAC,YAAU;MAAC,OAAO,IAAI,CAAClB,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAACV,SAAS,CAAC,CAAA;KAAC,CAAA;EAAC1rC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,iBAAiB,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC4wC,eAAe,CAAC,CAAA;EAACziC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC6wC,gBAAgB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACnB,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAACT,UAAU,CAAC,CAAA;KAAC,CAAA;EACzc3rC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,kBAAkB,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC6wC,gBAAgB,CAAC,CAAA;EAAC1iC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC8wC,cAAc,GAAC,YAAU;MAAC,OAAO,IAAI,CAACpB,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAACR,QAAQ,CAAC,CAAA;KAAC,CAAA;EAAC5rC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,gBAAgB,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC8wC,cAAc,CAAC,CAAA;EAAC3iC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC+wC,cAAc,GAAC,YAAU;MAAC,OAAO,IAAI,CAACrB,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAACP,QAAQ,CAAC,CAAA;KAAC,CAAA;EACrb7rC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACg/B,YAAY,CAACntC,SAAS,EAAC,gBAAgB,EAACmO,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAAC+wC,cAAc,CAAC,CAAA;EAAC5iC,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACgxC,sBAAsB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACtB,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAACH,gBAAgB,CAAC,CAAA;KAAC,CAAA;EAAC9+B,EAAAA,IAAI,CAACg/B,YAAY,CAACntC,SAAS,CAACixC,qBAAqB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACvB,gBAAgB,CAAC,IAAI,CAACtC,QAAQ,CAACF,eAAe,CAAC,CAAA;KAAC,CAAA;IAAC/+B,IAAI,CAAC+iC,aAAa,GAAC,YAAU;MAAC,IAAI,CAACC,OAAO,GAAC,EAAE,CAAA;KAAC,CAAA;EAAChjC,EAAAA,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAACnB,MAAM,GAAC,YAAU;EAAC,IAAA,OAAO,IAAI,CAACsyC,OAAO,CAACtyC,MAAM,CAAA;KAAC,CAAA;EAACsP,EAAAA,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAACoxC,GAAG,GAAC,YAAU;EAAC,IAAA,IAAIlyC,CAAC,GAAC,IAAI,CAACiyC,OAAO,CAAA;MAAC,IAAI,CAACA,OAAO,GAAC,EAAE,CAAA;EAAC,IAAA,OAAOjyC,CAAC,CAAA;KAAC,CAAA;IACrjBiP,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAACqxC,kBAAkB,GAAC,UAASnyC,CAAC,EAACC,CAAC,EAAC;EAACgP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAEyB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,CAAC,CAAC,CAAA;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACnP,CAAC,IAAEwB,IAAI,CAAC0W,KAAK,CAAClY,CAAC,CAAC,CAAC,CAAA;EAACgP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEpP,CAAC,IAAEA,CAAC,GAACiP,IAAI,CAACW,eAAe,CAACyC,SAAS,CAAC,CAAA;MAAC,KAAIpD,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEnP,CAAC,IAAEA,CAAC,GAACgP,IAAI,CAACW,eAAe,CAACyC,SAAS,CAAC,EAAC,CAAC,GAACpS,CAAC,IAAE,GAAG,GAACD,CAAC,GAAA;QAAE,IAAI,CAACiyC,OAAO,CAACryC,IAAI,CAACI,CAAC,GAAC,GAAG,GAAC,GAAG,CAAC,EAACA,CAAC,GAAC,CAACA,CAAC,KAAG,CAAC,GAACC,CAAC,IAAE,EAAE,MAAI,CAAC,EAACA,CAAC,MAAI,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,IAAI,CAACgyC,OAAO,CAACryC,IAAI,CAACI,CAAC,CAAC,CAAA;KAAC,CAAA;IAC/ViP,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAACsxC,iBAAiB,GAAC,UAASpyC,CAAC,EAACC,CAAC,EAAC;EAACgP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAEyB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,CAAC,CAAC,CAAA;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACnP,CAAC,IAAEwB,IAAI,CAAC0W,KAAK,CAAClY,CAAC,CAAC,CAAC,CAAA;EAACgP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEpP,CAAC,IAAEA,CAAC,GAACiP,IAAI,CAACW,eAAe,CAACyC,SAAS,CAAC,CAAA;EAACpD,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEnP,CAAC,IAAEA,CAAC,GAACgP,IAAI,CAACW,eAAe,CAACyC,SAAS,CAAC,CAAA;EAAC,IAAA,IAAI,CAACggC,WAAW,CAACryC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAI,CAACqyC,WAAW,CAACpyC,CAAC,CAAC,CAAA;KAAC,CAAA;IACzSgP,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAACwxC,qBAAqB,GAAC,UAAStyC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAEyB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,CAAC,CAAC,CAAA;MAAC,KAAIiP,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEpP,CAAC,IAAEA,CAAC,GAACiP,IAAI,CAACW,eAAe,CAACyC,SAAS,CAAC,EAAC,GAAG,GAACrS,CAAC,GAAA;EAAE,MAAA,IAAI,CAACiyC,OAAO,CAACryC,IAAI,CAACI,CAAC,GAAC,GAAG,GAAC,GAAG,CAAC,EAACA,CAAC,MAAI,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,IAAI,CAACiyC,OAAO,CAACryC,IAAI,CAACI,CAAC,CAAC,CAAA;KAAC,CAAA;IACrOiP,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAACyxC,mBAAmB,GAAC,UAASvyC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAEyB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,CAAC,CAAC,CAAA;MAACiP,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAE,CAACiP,IAAI,CAACW,eAAe,CAACwC,SAAS,IAAEpS,CAAC,GAACiP,IAAI,CAACW,eAAe,CAACwC,SAAS,CAAC,CAAA;MAAC,IAAG,CAAC,IAAEpS,CAAC,EAAC,IAAI,CAACsyC,qBAAqB,CAACtyC,CAAC,CAAC,CAAC,KAAI;QAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAC,CAAC,GAACA,CAAC,EAACA,CAAC,EAAE,EAAA;EAAC,QAAA,IAAI,CAACgyC,OAAO,CAACryC,IAAI,CAACI,CAAC,GAAC,GAAG,GAAC,GAAG,CAAC,EAACA,CAAC,KAAG,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,IAAI,CAACiyC,OAAO,CAACryC,IAAI,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;IACrTqP,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAAC0xC,qBAAqB,GAAC,UAASxyC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAEyB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,CAAC,CAAC,CAAA;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEpP,CAAC,IAAEA,CAAC,GAACiP,IAAI,CAACW,eAAe,CAAC4C,SAAS,CAAC,CAAA;EAACvD,IAAAA,IAAI,CAACs4B,KAAK,CAACI,UAAU,CAAC3nC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAI,CAACmyC,kBAAkB,CAACljC,IAAI,CAACs4B,KAAK,CAACC,UAAU,EAACv4B,IAAI,CAACs4B,KAAK,CAACE,WAAW,CAAC,CAAA;KAAC,CAAA;IAChQx4B,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAAC2xC,mBAAmB,GAAC,UAASzyC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAEyB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,CAAC,CAAC,CAAA;MAACiP,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAE,CAACiP,IAAI,CAACW,eAAe,CAAC2C,SAAS,IAAEvS,CAAC,GAACiP,IAAI,CAACW,eAAe,CAAC2C,SAAS,CAAC,CAAA;EAACtD,IAAAA,IAAI,CAACs4B,KAAK,CAACI,UAAU,CAAC3nC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAI,CAACmyC,kBAAkB,CAACljC,IAAI,CAACs4B,KAAK,CAACC,UAAU,EAACv4B,IAAI,CAACs4B,KAAK,CAACE,WAAW,CAAC,CAAA;KAAC,CAAA;IAC5Rx4B,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAAC4xC,mBAAmB,GAAC,UAAS1yC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAEyB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,CAAC,CAAC,CAAA;MAACiP,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAE,CAACiP,IAAI,CAACW,eAAe,CAACwC,SAAS,IAAEpS,CAAC,GAACiP,IAAI,CAACW,eAAe,CAACwC,SAAS,CAAC,CAAA;EAAC,IAAA,IAAI,CAACkgC,qBAAqB,CAAC,CAACtyC,CAAC,IAAE,CAAC,GAACA,CAAC,IAAE,EAAE,MAAI,CAAC,CAAC,CAAA;KAAC,CAAA;IAACiP,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAAC6xC,mBAAmB,GAAC,UAAS3yC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAEyB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,CAAC,CAAC,CAAA;MAACiP,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAE,CAACiP,IAAI,CAACW,eAAe,CAAC2C,SAAS,IAAEvS,CAAC,GAACiP,IAAI,CAACW,eAAe,CAAC2C,SAAS,CAAC,CAAA;EAACtD,IAAAA,IAAI,CAACs4B,KAAK,CAACK,aAAa,CAAC5nC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAI,CAACmyC,kBAAkB,CAACljC,IAAI,CAACs4B,KAAK,CAACC,UAAU,EAACv4B,IAAI,CAACs4B,KAAK,CAACE,WAAW,CAAC,CAAA;KAAC,CAAA;IAC1gBx4B,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAAC8xC,yBAAyB,GAAC,UAAS5yC,CAAC,EAAC;MAAC,IAAI,CAAC6yC,uBAAuB,CAAC5jC,IAAI,CAACs4B,KAAK,CAAC6B,qBAAqB,CAACppC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAACiP,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAAC+xC,uBAAuB,GAAC,UAAS7yC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,IAAI,CAAA;EAACgP,IAAAA,IAAI,CAACs4B,KAAK,CAACY,WAAW,CAACnoC,CAAC,CAAC,CAAA;MAACiP,IAAI,CAACs4B,KAAK,CAACe,UAAU,CAACr5B,IAAI,CAACs4B,KAAK,CAACC,UAAU,EAACv4B,IAAI,CAACs4B,KAAK,CAACE,WAAW,EAAC,UAASznC,CAAC,EAACI,CAAC,EAAC;QAACH,CAAC,CAACkyC,kBAAkB,CAACnyC,CAAC,KAAG,CAAC,EAACI,CAAC,KAAG,CAAC,CAAC,CAAA;EAAA,KAAC,CAAC,CAAA;KAAC,CAAA;IACjW6O,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAACgyC,UAAU,GAAC,UAAS9yC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAEyB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,CAAC,CAAC,CAAA;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEpP,CAAC,IAAE,GAAG,GAACA,CAAC,CAAC,CAAA;MAAC,IAAI,CAACiyC,OAAO,CAACryC,IAAI,CAACI,CAAC,KAAG,CAAC,GAAC,GAAG,CAAC,CAAA;KAAC,CAAA;IAACiP,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAACiyC,WAAW,GAAC,UAAS/yC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAEyB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,CAAC,CAAC,CAAA;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEpP,CAAC,IAAE,KAAK,GAACA,CAAC,CAAC,CAAA;MAAC,IAAI,CAACiyC,OAAO,CAACryC,IAAI,CAACI,CAAC,KAAG,CAAC,GAAC,GAAG,CAAC,CAAA;MAAC,IAAI,CAACiyC,OAAO,CAACryC,IAAI,CAACI,CAAC,KAAG,CAAC,GAAC,GAAG,CAAC,CAAA;KAAC,CAAA;IACjViP,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAACuxC,WAAW,GAAC,UAASryC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAEyB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,CAAC,CAAC,CAAA;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEpP,CAAC,IAAEA,CAAC,GAACiP,IAAI,CAACW,eAAe,CAACyC,SAAS,CAAC,CAAA;MAAC,IAAI,CAAC4/B,OAAO,CAACryC,IAAI,CAACI,CAAC,KAAG,CAAC,GAAC,GAAG,CAAC,CAAA;MAAC,IAAI,CAACiyC,OAAO,CAACryC,IAAI,CAACI,CAAC,KAAG,CAAC,GAAC,GAAG,CAAC,CAAA;MAAC,IAAI,CAACiyC,OAAO,CAACryC,IAAI,CAACI,CAAC,KAAG,EAAE,GAAC,GAAG,CAAC,CAAA;MAAC,IAAI,CAACiyC,OAAO,CAACryC,IAAI,CAACI,CAAC,KAAG,EAAE,GAAC,GAAG,CAAC,CAAA;KAAC,CAAA;IAACiP,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAACkyC,WAAW,GAAC,UAAShzC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAEyB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,CAAC,CAAC,CAAA;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEpP,CAAC,IAAEA,CAAC,GAACiP,IAAI,CAACW,eAAe,CAAC4C,SAAS,CAAC,CAAA;EAACvD,IAAAA,IAAI,CAACs4B,KAAK,CAACG,WAAW,CAAC1nC,CAAC,CAAC,CAAA;MAAC,IAAI,CAACqyC,WAAW,CAACpjC,IAAI,CAACs4B,KAAK,CAACC,UAAU,CAAC,CAAA;MAAC,IAAI,CAAC6K,WAAW,CAACpjC,IAAI,CAACs4B,KAAK,CAACE,WAAW,CAAC,CAAA;KAAC,CAAA;IAChhBx4B,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAACmyC,SAAS,GAAC,UAASjzC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAEyB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,CAAC,CAAC,CAAA;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,GAAG,IAAEpP,CAAC,IAAE,GAAG,GAACA,CAAC,CAAC,CAAA;MAAC,IAAI,CAACiyC,OAAO,CAACryC,IAAI,CAACI,CAAC,KAAG,CAAC,GAAC,GAAG,CAAC,CAAA;KAAC,CAAA;IAACiP,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAACoyC,UAAU,GAAC,UAASlzC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAEyB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,CAAC,CAAC,CAAA;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,KAAK,IAAEpP,CAAC,IAAE,KAAK,GAACA,CAAC,CAAC,CAAA;MAAC,IAAI,CAACiyC,OAAO,CAACryC,IAAI,CAACI,CAAC,KAAG,CAAC,GAAC,GAAG,CAAC,CAAA;MAAC,IAAI,CAACiyC,OAAO,CAACryC,IAAI,CAACI,CAAC,KAAG,CAAC,GAAC,GAAG,CAAC,CAAA;KAAC,CAAA;IACvViP,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAACqyC,UAAU,GAAC,UAASnzC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAEyB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,CAAC,CAAC,CAAA;MAACiP,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAE,CAACiP,IAAI,CAACW,eAAe,CAACwC,SAAS,IAAEpS,CAAC,GAACiP,IAAI,CAACW,eAAe,CAACwC,SAAS,CAAC,CAAA;MAAC,IAAI,CAAC6/B,OAAO,CAACryC,IAAI,CAACI,CAAC,KAAG,CAAC,GAAC,GAAG,CAAC,CAAA;MAAC,IAAI,CAACiyC,OAAO,CAACryC,IAAI,CAACI,CAAC,KAAG,CAAC,GAAC,GAAG,CAAC,CAAA;MAAC,IAAI,CAACiyC,OAAO,CAACryC,IAAI,CAACI,CAAC,KAAG,EAAE,GAAC,GAAG,CAAC,CAAA;MAAC,IAAI,CAACiyC,OAAO,CAACryC,IAAI,CAACI,CAAC,KAAG,EAAE,GAAC,GAAG,CAAC,CAAA;KAAC,CAAA;IAC1SiP,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAACsyC,UAAU,GAAC,UAASpzC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAEyB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,CAAC,CAAC,CAAA;MAACiP,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAE,CAACiP,IAAI,CAACW,eAAe,CAAC2C,SAAS,IAAEvS,CAAC,GAACiP,IAAI,CAACW,eAAe,CAAC2C,SAAS,CAAC,CAAA;EAACtD,IAAAA,IAAI,CAACs4B,KAAK,CAACI,UAAU,CAAC3nC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAI,CAACoyC,iBAAiB,CAACnjC,IAAI,CAACs4B,KAAK,CAACC,UAAU,EAACv4B,IAAI,CAACs4B,KAAK,CAACE,WAAW,CAAC,CAAA;KAAC,CAAA;IAClRx4B,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAACuyC,gBAAgB,GAAC,UAASrzC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAEyB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,CAAC,CAAC,CAAA;MAACiP,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAACpP,CAAC,IAAE,CAACiP,IAAI,CAACW,eAAe,CAAC2C,SAAS,IAAE,CAACvS,CAAC,GAACiP,IAAI,CAACW,eAAe,CAAC2C,SAAS,CAAC,CAAA;EAACtD,IAAAA,IAAI,CAACs4B,KAAK,CAACY,WAAW,CAACl5B,IAAI,CAACs4B,KAAK,CAAC6B,qBAAqB,CAACppC,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAI,CAACoyC,iBAAiB,CAACnjC,IAAI,CAACs4B,KAAK,CAACC,UAAU,EAACv4B,IAAI,CAACs4B,KAAK,CAACE,WAAW,CAAC,CAAA;KAAC,CAAA;IAC7Tx4B,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAACwyC,UAAU,GAAC,UAAStzC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACs5B,QAAQ,KAAG1oC,CAAC,IAAE,CAAC0oC,QAAQ,KAAG1oC,CAAC,IAAEm9B,KAAK,CAACn9B,CAAC,CAAC,IAAEA,CAAC,IAAE,CAACiP,IAAI,CAACW,eAAe,CAACkC,WAAW,IAAE9R,CAAC,IAAEiP,IAAI,CAACW,eAAe,CAACkC,WAAW,CAAC,CAAA;EAAC7C,IAAAA,IAAI,CAACs4B,KAAK,CAACM,YAAY,CAAC7nC,CAAC,CAAC,CAAA;MAAC,IAAI,CAACqyC,WAAW,CAACpjC,IAAI,CAACs4B,KAAK,CAACC,UAAU,CAAC,CAAA;KAAC,CAAA;IAC7Pv4B,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAACyyC,WAAW,GAAC,UAASvzC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACs5B,QAAQ,KAAG1oC,CAAC,IAAE,CAAC0oC,QAAQ,KAAG1oC,CAAC,IAAEm9B,KAAK,CAACn9B,CAAC,CAAC,IAAEA,CAAC,IAAE,CAACiP,IAAI,CAACW,eAAe,CAACqC,WAAW,IAAEjS,CAAC,IAAEiP,IAAI,CAACW,eAAe,CAACqC,WAAW,CAAC,CAAA;EAAChD,IAAAA,IAAI,CAACs4B,KAAK,CAACW,YAAY,CAACloC,CAAC,CAAC,CAAA;MAAC,IAAI,CAACqyC,WAAW,CAACpjC,IAAI,CAACs4B,KAAK,CAACC,UAAU,CAAC,CAAA;MAAC,IAAI,CAAC6K,WAAW,CAACpjC,IAAI,CAACs4B,KAAK,CAACE,WAAW,CAAC,CAAA;KAAC,CAAA;IAACx4B,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAAC0yC,SAAS,GAAC,UAASxzC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,SAAS,KAAG,OAAOpP,CAAC,IAAE,QAAQ,KAAG,OAAOA,CAAC,CAAC,CAAA;MAAC,IAAI,CAACiyC,OAAO,CAACryC,IAAI,CAACI,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IACnbiP,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAAC2yC,SAAS,GAAC,UAASzzC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAEyB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,CAAC,CAAC,CAAA;MAACiP,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,IAAE,CAACiP,IAAI,CAACW,eAAe,CAACwC,SAAS,IAAEpS,CAAC,GAACiP,IAAI,CAACW,eAAe,CAACwC,SAAS,CAAC,CAAA;EAAC,IAAA,IAAI,CAACmgC,mBAAmB,CAACvyC,CAAC,CAAC,CAAA;KAAC,CAAA;IAACiP,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAAC4yC,UAAU,GAAC,UAAS1zC,CAAC,EAAC;EAAC,IAAA,IAAI,CAACiyC,OAAO,CAACryC,IAAI,CAACtB,KAAK,CAAC,IAAI,CAAC2zC,OAAO,EAACjyC,CAAC,CAAC,CAAA;KAAC,CAAA;IAACiP,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAAC6yC,iBAAiB,GAAC,UAAS3zC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACs4B,KAAK,CAACY,WAAW,CAACnoC,CAAC,CAAC,CAAA;EAAC,IAAA,IAAI,CAACmyC,kBAAkB,CAACljC,IAAI,CAACs4B,KAAK,CAACC,UAAU,EAACv4B,IAAI,CAACs4B,KAAK,CAACE,WAAW,CAAC,CAAA;KAAC,CAAA;IACxcx4B,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAAC8yC,gBAAgB,GAAC,UAAS5zC,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACs4B,KAAK,CAACY,WAAW,CAACnoC,CAAC,CAAC,CAAA;MAAC,IAAI,CAACqyC,WAAW,CAACpjC,IAAI,CAACs4B,KAAK,CAACC,UAAU,CAAC,CAAA;MAAC,IAAI,CAAC6K,WAAW,CAACpjC,IAAI,CAACs4B,KAAK,CAACE,WAAW,CAAC,CAAA;KAAC,CAAA;IACrKx4B,IAAI,CAAC+iC,aAAa,CAAClxC,SAAS,CAAC+yC,WAAW,GAAC,UAAS7zC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAAC,IAAI,CAACgyC,OAAO,CAACtyC,MAAM,CAAA;EAACsP,IAAAA,IAAI,CAACC,OAAO,CAACG,YAAY,CAACrP,CAAC,CAAC,CAAA;EAAC,IAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,CAACL,MAAM,EAACO,CAAC,EAAE,EAAC;EAAC,MAAA,IAAIE,CAAC,GAACJ,CAAC,CAACwY,UAAU,CAACtY,CAAC,CAAC,CAAA;EAAC,MAAA,IAAG,GAAG,GAACE,CAAC,EAAC,IAAI,CAAC6xC,OAAO,CAACryC,IAAI,CAACQ,CAAC,CAAC,CAAC,KAAK,IAAG,IAAI,GAACA,CAAC,EAAC,IAAI,CAAC6xC,OAAO,CAACryC,IAAI,CAACQ,CAAC,IAAE,CAAC,GAAC,GAAG,CAAC,EAAC,IAAI,CAAC6xC,OAAO,CAACryC,IAAI,CAACQ,CAAC,GAAC,EAAE,GAAC,GAAG,CAAC,CAAC,KAAK,IAAG,KAAK,GAACA,CAAC,EAAC,IAAG,KAAK,IAAEA,CAAC,IAAE,KAAK,IAAEA,CAAC,IAAEF,CAAC,GAAC,CAAC,GAACF,CAAC,CAACL,MAAM,EAAC;UAAC,IAAI1B,CAAC,GAAC+B,CAAC,CAACwY,UAAU,CAACtY,CAAC,GAAC,CAAC,CAAC,CAAA;EAAC,QAAA,KAAK,IAAEjC,CAAC,IAAE,KAAK,IAAEA,CAAC,KAAGmC,CAAC,GAAC,IAAI,IAAEA,CAAC,GAAC,KAAK,CAAC,GAACnC,CAAC,GAAC,KAAK,GAAC,KAAK,EAAC,IAAI,CAACg0C,OAAO,CAACryC,IAAI,CAACQ,CAAC,IAAE,EAAE,GAAC,GAAG,CAAC,EAAC,IAAI,CAAC6xC,OAAO,CAACryC,IAAI,CAACQ,CAAC,IAAE,EAAE,GAAC,EAAE,GAAC,GAAG,CAAC,EAAC,IAAI,CAAC6xC,OAAO,CAACryC,IAAI,CAACQ,CAAC,IAAE,CAAC,GAAC,EAAE,GAAC,GAAG,CAAC,EAAC,IAAI,CAAC6xC,OAAO,CAACryC,IAAI,CAACQ,CAAC,GAAC,EAAE,GACtf,GAAG,CAAC,EAACF,CAAC,EAAE,CAAC,CAAA;EAAA,OAAC,MAAK,IAAI,CAAC+xC,OAAO,CAACryC,IAAI,CAACQ,CAAC,IAAE,EAAE,GAAC,GAAG,CAAC,EAAC,IAAI,CAAC6xC,OAAO,CAACryC,IAAI,CAACQ,CAAC,IAAE,CAAC,GAAC,EAAE,GAAC,GAAG,CAAC,EAAC,IAAI,CAAC6xC,OAAO,CAACryC,IAAI,CAACQ,CAAC,GAAC,EAAE,GAAC,GAAG,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAO,IAAI,CAAC6xC,OAAO,CAACtyC,MAAM,GAACM,CAAC,CAAA;KAAC,CAAA;EAACgP,EAAAA,IAAI,CAAC6kC,KAAK,GAAC,EAAE,CAAA;IAAC7kC,IAAI,CAAC6kC,KAAK,CAACC,MAAM,GAAC,UAAS/zC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,CAAC+zC,EAAE,GAACh0C,CAAC,CAAA;MAAC,IAAI,CAACi0C,EAAE,GAACh0C,CAAC,CAAA;KAAC,CAAA;IAACgP,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACjzC,SAAS,CAACozC,GAAG,GAAC,UAASl0C,CAAC,EAAC;MAAC,OAAO,IAAI,CAACi0C,EAAE,GAACj0C,CAAC,CAACi0C,EAAE,IAAE,IAAI,CAACA,EAAE,IAAEj0C,CAAC,CAACi0C,EAAE,IAAE,IAAI,CAACD,EAAE,GAACh0C,CAAC,CAACg0C,EAAE,GAAC,CAAC,CAAC,GAAC,IAAI,CAACC,EAAE,IAAEj0C,CAAC,CAACi0C,EAAE,IAAE,IAAI,CAACD,EAAE,IAAEh0C,CAAC,CAACg0C,EAAE,GAAC,CAAC,GAAC,CAAC,CAAA;KAAC,CAAA;IAAC/kC,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACjzC,SAAS,CAACqzC,UAAU,GAAC,YAAU;EAAC,IAAA,OAAO,IAAIllC,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAAC,CAAC,IAAI,CAACC,EAAE,KAAG,CAAC,GAAC,CAAC,IAAI,CAACC,EAAE,GAAC,CAAC,KAAG,EAAE,MAAI,CAAC,EAAC,IAAI,CAACA,EAAE,KAAG,CAAC,KAAG,CAAC,CAAC,CAAA;KAAC,CAAA;IAAChlC,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACjzC,SAAS,CAACszC,SAAS,GAAC,YAAU;EAAC,IAAA,OAAO,IAAInlC,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAAC,IAAI,CAACC,EAAE,IAAE,CAAC,KAAG,CAAC,EAAC,CAAC,IAAI,CAACC,EAAE,IAAE,CAAC,GAAC,IAAI,CAACD,EAAE,KAAG,EAAE,MAAI,CAAC,CAAC,CAAA;KAAC,CAAA;IACzkB/kC,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACjzC,SAAS,CAACuzC,GAAG,GAAC,YAAU;EAAC,IAAA,OAAM,CAAC,EAAE,IAAI,CAACJ,EAAE,GAAC,UAAU,CAAC,CAAA;KAAC,CAAA;IAAChlC,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACjzC,SAAS,CAACwzC,GAAG,GAAC,YAAU;EAAC,IAAA,OAAM,CAAC,EAAE,IAAI,CAACN,EAAE,GAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC/kC,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACjzC,SAAS,CAACyzC,IAAI,GAAC,YAAU;MAAC,OAAO,CAAC,IAAE,IAAI,CAACP,EAAE,IAAE,CAAC,IAAE,IAAI,CAACC,EAAE,CAAA;KAAC,CAAA;IAAChlC,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACjzC,SAAS,CAACgN,GAAG,GAAC,UAAS9N,CAAC,EAAC;MAAC,OAAO,IAAIiP,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAAC,CAAC,IAAI,CAACC,EAAE,GAACh0C,CAAC,CAACg0C,EAAE,GAAC,UAAU,MAAI,CAAC,KAAG,CAAC,EAAC,CAAC,CAAC,IAAI,CAACC,EAAE,GAACj0C,CAAC,CAACi0C,EAAE,GAAC,UAAU,MAAI,CAAC,KAAG,UAAU,IAAE,IAAI,CAACD,EAAE,GAACh0C,CAAC,CAACg0C,EAAE,GAAC,CAAC,GAAC,CAAC,CAAC,KAAG,CAAC,CAAC,CAAA;KAAC,CAAA;IACnY/kC,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACjzC,SAAS,CAAC0zC,GAAG,GAAC,UAASx0C,CAAC,EAAC;MAAC,OAAO,IAAIiP,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAAC,CAAC,IAAI,CAACC,EAAE,GAACh0C,CAAC,CAACg0C,EAAE,GAAC,UAAU,MAAI,CAAC,KAAG,CAAC,EAAC,CAAC,CAAC,IAAI,CAACC,EAAE,GAACj0C,CAAC,CAACi0C,EAAE,GAAC,UAAU,MAAI,CAAC,KAAG,CAAC,GAAC,IAAI,CAACD,EAAE,GAACh0C,CAAC,CAACg0C,EAAE,GAAC,CAAC,GAAC,CAAC,CAAC,KAAG,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC/kC,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACU,QAAQ,GAAC,UAASz0C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAACF,CAAC,GAAC,KAAK,CAAA;EAACA,IAAAA,CAAC,MAAI,EAAE,CAAA;EAAC,IAAA,IAAII,CAAC,GAACH,CAAC,GAAC,KAAK;QAAChC,CAAC,GAACgC,CAAC,KAAG,EAAE,CAAA;MAACA,CAAC,GAACC,CAAC,GAACE,CAAC,GAAC,KAAK,IAAEF,CAAC,GAACjC,CAAC,GAAC,KAAK,CAAC,GAAC,KAAK,IAAE+B,CAAC,GAACI,CAAC,GAAC,KAAK,CAAC,CAAA;MAAC,KAAIF,CAAC,GAACF,CAAC,GAAC/B,CAAC,IAAEiC,CAAC,GAACjC,CAAC,KAAG,EAAE,CAAC,IAAE+B,CAAC,GAACI,CAAC,KAAG,EAAE,CAAC,EAAC,UAAU,IAAEH,CAAC,GAAA;EAAEA,MAAAA,CAAC,IAAE,UAAU,EAACC,CAAC,IAAE,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAO,IAAI+O,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAAC9zC,CAAC,KAAG,CAAC,EAACC,CAAC,KAAG,CAAC,CAAC,CAAA;KAAC,CAAA;IAClZ+O,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACjzC,SAAS,CAAC4zC,GAAG,GAAC,UAAS10C,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAACgP,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACU,QAAQ,CAAC,IAAI,CAACT,EAAE,EAACh0C,CAAC,CAAC,CAAA;EAACA,IAAAA,CAAC,GAACiP,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACU,QAAQ,CAAC,IAAI,CAACR,EAAE,EAACj0C,CAAC,CAAC,CAAA;EAACA,IAAAA,CAAC,CAACi0C,EAAE,GAACj0C,CAAC,CAACg0C,EAAE,CAAA;MAACh0C,CAAC,CAACg0C,EAAE,GAAC,CAAC,CAAA;EAAC,IAAA,OAAO/zC,CAAC,CAAC6N,GAAG,CAAC9N,CAAC,CAAC,CAAA;KAAC,CAAA;IACjKiP,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACjzC,SAAS,CAAC6zC,GAAG,GAAC,UAAS30C,CAAC,EAAC;EAAC,IAAA,IAAG,CAAC,IAAEA,CAAC,EAAC,OAAM,EAAE,CAAA;EAAC,IAAA,IAAIC,CAAC,GAAC,IAAIgP,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC;EAAC7zC,MAAAA,CAAC,GAAC,IAAI+O,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAAC,IAAI,CAACC,EAAE,EAAC,IAAI,CAACC,EAAE,CAAC,CAAA;MAACj0C,CAAC,GAAC,IAAIiP,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAAC/zC,CAAC,EAAC,CAAC,CAAC,CAAA;EAAC,IAAA,KAAI,IAAII,CAAC,GAAC,IAAI6O,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC/zC,CAAC,CAACq0C,GAAG,EAAE,GAAA;QAAEr0C,CAAC,GAACA,CAAC,CAACo0C,SAAS,EAAE,EAACh0C,CAAC,GAACA,CAAC,CAACg0C,SAAS,EAAE,CAAA;EAAC,KAAA;EAAA,IAAA,OAAK,CAACh0C,CAAC,CAACm0C,IAAI,EAAE,GAAA;EAAE,MAAA,CAAC,IAAEv0C,CAAC,CAACk0C,GAAG,CAACh0C,CAAC,CAAC,KAAGD,CAAC,GAACA,CAAC,CAAC6N,GAAG,CAAC1N,CAAC,CAAC,EAACF,CAAC,GAACA,CAAC,CAACs0C,GAAG,CAACx0C,CAAC,CAAC,CAAC,EAACA,CAAC,GAACA,CAAC,CAACm0C,UAAU,EAAE,EAAC/zC,CAAC,GAACA,CAAC,CAAC+zC,UAAU,EAAE,CAAA;EAAC,KAAA;EAAA,IAAA,OAAM,CAACl0C,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC+O,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACjzC,SAAS,CAAC8G,QAAQ,GAAC,YAAU;EAAC,IAAA,KAAI,IAAI5H,CAAC,GAAC,EAAE,EAACC,CAAC,GAAC,IAAI,EAAC,CAACA,CAAC,CAACs0C,IAAI,EAAE,GAAE;EAACt0C,MAAAA,CAAC,GAACA,CAAC,CAAC00C,GAAG,CAAC,EAAE,CAAC,CAAA;EAAC,MAAA,IAAIz0C,CAAC,GAACD,CAAC,CAAC,CAAC,CAAC,CAAA;QAACD,CAAC,GAACC,CAAC,CAAC,CAAC,CAAC,CAAC+zC,EAAE,GAACh0C,CAAC,CAAA;EAACC,MAAAA,CAAC,GAACC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,EAAE,IAAEF,CAAC,KAAGA,CAAC,GAAC,GAAG,CAAC,CAAA;EAAC,IAAA,OAAOA,CAAC,CAAA;KAAC,CAAA;IACteiP,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACa,UAAU,GAAC,UAAS50C,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIC,CAAC,GAAC,IAAIgP,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC7zC,CAAC,GAAC,IAAI+O,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC3zC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,CAAC,CAACL,MAAM,EAACS,CAAC,EAAE,EAAC;EAAC,MAAA,IAAG,GAAG,GAACJ,CAAC,CAACI,CAAC,CAAC,IAAE,GAAG,GAACJ,CAAC,CAACI,CAAC,CAAC,EAAC,OAAO,IAAI,CAAA;QAAC,IAAInC,CAAC,GAAC4a,QAAQ,CAAC7Y,CAAC,CAACI,CAAC,CAAC,EAAC,EAAE,CAAC,CAAA;QAACF,CAAC,CAAC8zC,EAAE,GAAC/1C,CAAC,CAAA;QAACgC,CAAC,GAACA,CAAC,CAACy0C,GAAG,CAAC,EAAE,CAAC,CAAC5mC,GAAG,CAAC5N,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOD,CAAC,CAAA;KAAC,CAAA;IAACgP,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACjzC,SAAS,CAACgI,KAAK,GAAC,YAAU;EAAC,IAAA,OAAO,IAAImG,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAAC,IAAI,CAACC,EAAE,EAAC,IAAI,CAACC,EAAE,CAAC,CAAA;KAAC,CAAA;IAAChlC,IAAI,CAAC6kC,KAAK,CAACe,KAAK,GAAC,UAAS70C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,CAAC+zC,EAAE,GAACh0C,CAAC,CAAA;MAAC,IAAI,CAACi0C,EAAE,GAACh0C,CAAC,CAAA;KAAC,CAAA;IAC5WgP,IAAI,CAAC6kC,KAAK,CAACe,KAAK,CAAC/zC,SAAS,CAACgN,GAAG,GAAC,UAAS9N,CAAC,EAAC;MAAC,OAAO,IAAIiP,IAAI,CAAC6kC,KAAK,CAACe,KAAK,CAAC,CAAC,IAAI,CAACb,EAAE,GAACh0C,CAAC,CAACg0C,EAAE,GAAC,UAAU,MAAI,CAAC,KAAG,CAAC,EAAC,CAAC,CAAC,IAAI,CAACC,EAAE,GAACj0C,CAAC,CAACi0C,EAAE,GAAC,UAAU,MAAI,CAAC,KAAG,UAAU,IAAE,IAAI,CAACD,EAAE,GAACh0C,CAAC,CAACg0C,EAAE,GAAC,CAAC,GAAC,CAAC,CAAC,KAAG,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC/kC,IAAI,CAAC6kC,KAAK,CAACe,KAAK,CAAC/zC,SAAS,CAAC0zC,GAAG,GAAC,UAASx0C,CAAC,EAAC;MAAC,OAAO,IAAIiP,IAAI,CAAC6kC,KAAK,CAACe,KAAK,CAAC,CAAC,IAAI,CAACb,EAAE,GAACh0C,CAAC,CAACg0C,EAAE,GAAC,UAAU,MAAI,CAAC,KAAG,CAAC,EAAC,CAAC,CAAC,IAAI,CAACC,EAAE,GAACj0C,CAAC,CAACi0C,EAAE,GAAC,UAAU,MAAI,CAAC,KAAG,CAAC,GAAC,IAAI,CAACD,EAAE,GAACh0C,CAAC,CAACg0C,EAAE,GAAC,CAAC,GAAC,CAAC,CAAC,KAAG,CAAC,CAAC,CAAA;KAAC,CAAA;IAAC/kC,IAAI,CAAC6kC,KAAK,CAACe,KAAK,CAAC/zC,SAAS,CAACgI,KAAK,GAAC,YAAU;EAAC,IAAA,OAAO,IAAImG,IAAI,CAAC6kC,KAAK,CAACe,KAAK,CAAC,IAAI,CAACb,EAAE,EAAC,IAAI,CAACC,EAAE,CAAC,CAAA;KAAC,CAAA;IAC3ahlC,IAAI,CAAC6kC,KAAK,CAACe,KAAK,CAAC/zC,SAAS,CAAC8G,QAAQ,GAAC,YAAU;MAAC,IAAI5H,CAAC,GAAC,CAAC,KAAG,IAAI,CAACi0C,EAAE,GAAC,UAAU,CAAC;EAACh0C,MAAAA,CAAC,GAAC,IAAIgP,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAAC,IAAI,CAACC,EAAE,EAAC,IAAI,CAACC,EAAE,CAAC,CAAA;EAACj0C,IAAAA,CAAC,KAAGC,CAAC,GAAE,IAAIgP,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,CAAES,GAAG,CAACv0C,CAAC,CAAC,CAAC,CAAA;MAAC,OAAM,CAACD,CAAC,GAAC,GAAG,GAAC,EAAE,IAAEC,CAAC,CAAC2H,QAAQ,EAAE,CAAA;KAAC,CAAA;IAACqH,IAAI,CAAC6kC,KAAK,CAACe,KAAK,CAACD,UAAU,GAAC,UAAS50C,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAAC,CAAC,GAACD,CAAC,CAACL,MAAM,IAAE,GAAG,IAAEK,CAAC,CAAC,CAAC,CAAC,CAAA;MAACC,CAAC,KAAGD,CAAC,GAACA,CAAC,CAAC8Y,SAAS,CAAC,CAAC,CAAC,CAAC,CAAA;MAAC9Y,CAAC,GAACiP,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACa,UAAU,CAAC50C,CAAC,CAAC,CAAA;EAAC,IAAA,IAAG,IAAI,KAAGA,CAAC,EAAC,OAAO,IAAI,CAAA;EAACC,IAAAA,CAAC,KAAGD,CAAC,GAAE,IAAIiP,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,CAAES,GAAG,CAACx0C,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO,IAAIiP,IAAI,CAAC6kC,KAAK,CAACe,KAAK,CAAC70C,CAAC,CAACg0C,EAAE,EAACh0C,CAAC,CAACi0C,EAAE,CAAC,CAAA;KAAC,CAAA;IAAChlC,IAAI,CAAC6lC,YAAY,GAAC,YAAU;MAAC,IAAI,CAACC,OAAO,GAAC,EAAE,CAAA;MAAC,IAAI,CAACC,YAAY,GAAC,CAAC,CAAA;EAAC,IAAA,IAAI,CAACC,QAAQ,GAAC,IAAIhmC,IAAI,CAAC+iC,aAAa,EAAA,CAAA;MAAC,IAAI,CAACkD,UAAU,GAAC,EAAE,CAAA;KAAC,CAAA;IAACjmC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACq0C,iBAAiB,GAAC,UAASn1C,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAAC,IAAI,CAACg1C,QAAQ,CAAC/C,GAAG,EAAE,CAAA;EAAC,IAAA,IAAI,CAAC6C,OAAO,CAACn1C,IAAI,CAACK,CAAC,CAAC,CAAA;EAAC,IAAA,IAAI,CAAC80C,OAAO,CAACn1C,IAAI,CAACI,CAAC,CAAC,CAAA;MAAC,IAAI,CAACg1C,YAAY,IAAE/0C,CAAC,CAACN,MAAM,GAACK,CAAC,CAACL,MAAM,CAAA;KAAC,CAAA;IACpsBsP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACs0C,eAAe,GAAC,UAASp1C,CAAC,EAAC;EAAC,IAAA,IAAI,CAACq1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,CAAC,CAAA;EAACvR,IAAAA,CAAC,GAAC,IAAI,CAACi1C,QAAQ,CAAC/C,GAAG,EAAE,CAAA;EAAC,IAAA,IAAI,CAAC6C,OAAO,CAACn1C,IAAI,CAACI,CAAC,CAAC,CAAA;EAAC,IAAA,IAAI,CAACg1C,YAAY,IAAEh1C,CAAC,CAACL,MAAM,CAAA;EAACK,IAAAA,CAAC,CAACJ,IAAI,CAAC,IAAI,CAACo1C,YAAY,CAAC,CAAA;EAAC,IAAA,OAAOh1C,CAAC,CAAA;KAAC,CAAA;IAACiP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACw0C,aAAa,GAAC,UAASt1C,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAACD,CAAC,CAACN,GAAG,EAAE,CAAA;EAACO,IAAAA,CAAC,GAAC,IAAI,CAAC+0C,YAAY,GAAC,IAAI,CAACC,QAAQ,CAACt1C,MAAM,EAAE,GAACM,CAAC,CAAA;EAAC,IAAA,KAAIgP,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEnP,CAAC,CAAC,EAAC,GAAG,GAACA,CAAC,GAAA;EAAED,MAAAA,CAAC,CAACJ,IAAI,CAACK,CAAC,GAAC,GAAG,GAAC,GAAG,CAAC,EAACA,CAAC,MAAI,CAAC,EAAC,IAAI,CAAC+0C,YAAY,EAAE,CAAA;EAAC,KAAA;EAAAh1C,IAAAA,CAAC,CAACJ,IAAI,CAACK,CAAC,CAAC,CAAA;MAAC,IAAI,CAAC+0C,YAAY,EAAE,CAAA;KAAC,CAAA;EACtc/lC,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACy0C,sBAAsB,GAAC,UAASv1C,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,CAACi1C,iBAAiB,CAACn1C,CAAC,CAACsnC,QAAQ,CAACrnC,CAAC,EAACC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC+O,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC00C,2BAA2B,GAAC,UAASx1C,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEF,CAAC,IAAE,IAAI,IAAEC,CAAC,IAAE,IAAI,IAAEC,CAAC,IAAE,IAAI,CAACq1C,sBAAsB,CAACv1C,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC+O,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACwqC,KAAK,GAAC,YAAU;MAAC,IAAI,CAACyJ,OAAO,GAAC,EAAE,CAAA;EAAC,IAAA,IAAI,CAACE,QAAQ,CAAC/C,GAAG,EAAE,CAAA;MAAC,IAAI,CAAC8C,YAAY,GAAC,CAAC,CAAA;MAAC,IAAI,CAACE,UAAU,GAAC,EAAE,CAAA;KAAC,CAAA;EAC3WjmC,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC20C,eAAe,GAAC,YAAU;EAACxmC,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAE,IAAI,CAAC8lC,UAAU,CAACv1C,MAAM,CAAC,CAAA;MAAC,KAAI,IAAIK,CAAC,GAAC,IAAIqnC,UAAU,CAAC,IAAI,CAAC2N,YAAY,GAAC,IAAI,CAACC,QAAQ,CAACt1C,MAAM,EAAE,CAAC,EAACM,CAAC,GAAC,IAAI,CAAC80C,OAAO,EAAC70C,CAAC,GAACD,CAAC,CAACN,MAAM,EAACS,CAAC,GAAC,CAAC,EAACnC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACiC,CAAC,EAACjC,CAAC,EAAE,EAAC;EAAC,MAAA,IAAIc,CAAC,GAACkB,CAAC,CAAChC,CAAC,CAAC,CAAA;EAAC+B,MAAAA,CAAC,CAAC+N,GAAG,CAAChP,CAAC,EAACqB,CAAC,CAAC,CAAA;QAACA,CAAC,IAAErB,CAAC,CAACY,MAAM,CAAA;EAAA,KAAA;EAACM,IAAAA,CAAC,GAAC,IAAI,CAACg1C,QAAQ,CAAC/C,GAAG,EAAE,CAAA;EAAClyC,IAAAA,CAAC,CAAC+N,GAAG,CAAC9N,CAAC,EAACG,CAAC,CAAC,CAAA;MAACA,CAAC,IAAEH,CAAC,CAACN,MAAM,CAAA;MAACsP,IAAI,CAACC,OAAO,CAACE,MAAM,CAAChP,CAAC,IAAEJ,CAAC,CAACL,MAAM,CAAC,CAAA;EAAC,IAAA,IAAI,CAACo1C,OAAO,GAAC,CAAC/0C,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOA,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,iBAAiB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC20C,eAAe,CAAC,CAAA;IAC7cxmC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC40C,qBAAqB,GAAC,UAAS11C,CAAC,EAAC;EAAC,IAAA,OAAO8B,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACmB,eAAe,CAAC,IAAI,CAAC2O,eAAe,EAAE,EAACz1C,CAAC,CAAC,CAAA;KAAC,CAAA;IAACiP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC60C,eAAe,GAAC,UAAS31C,CAAC,EAAC;MAAC,IAAI,CAACk1C,UAAU,CAACt1C,IAAI,CAAC,IAAI,CAACw1C,eAAe,CAACp1C,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAACiP,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC80C,aAAa,GAAC,YAAU;EAAC3mC,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAE,IAAI,CAAC8lC,UAAU,CAACv1C,MAAM,CAAC,CAAA;MAAC,IAAI,CAAC21C,aAAa,CAAC,IAAI,CAACJ,UAAU,CAACx1C,GAAG,EAAE,CAAC,CAAA;KAAC,CAAA;IACvXuP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACu0C,iBAAiB,GAAC,UAASr1C,CAAC,EAACC,CAAC,EAAC;EAACgP,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEpP,CAAC,IAAEA,CAAC,IAAEyB,IAAI,CAAC0W,KAAK,CAACnY,CAAC,CAAC,CAAC,CAAA;MAAC,IAAI,CAACi1C,QAAQ,CAAC3C,qBAAqB,CAAC,CAAC,GAACtyC,CAAC,GAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EACnJgP,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC+0C,QAAQ,GAAC,UAAS71C,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIE,CAAC,GAAC6O,IAAI,CAACW,eAAe,CAACG,SAAS,CAAA;EAAC,IAAA,QAAO/P,CAAC;QAAE,KAAKI,CAAC,CAAC6P,MAAM;EAAC,QAAA,IAAI,CAACsjC,WAAW,CAACtzC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;QAAM,KAAKE,CAAC,CAAC8P,KAAK;EAAC,QAAA,IAAI,CAACojC,UAAU,CAACrzC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;QAAM,KAAKE,CAAC,CAAC+P,KAAK;EAAC,QAAA,IAAI,CAACijC,UAAU,CAACnzC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;QAAM,KAAKE,CAAC,CAACgQ,MAAM;EAAC,QAAA,IAAI,CAAC4iC,WAAW,CAAC/yC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;QAAM,KAAKE,CAAC,CAACiQ,KAAK;EAAC,QAAA,IAAI,CAAC8iC,UAAU,CAAClzC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;QAAM,KAAKE,CAAC,CAACkQ,OAAO;EAAC,QAAA,IAAI,CAACwlC,YAAY,CAAC71C,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;QAAM,KAAKE,CAAC,CAACmQ,OAAO;EAAC,QAAA,IAAI,CAACwlC,YAAY,CAAC91C,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;QAAM,KAAKE,CAAC,CAACoQ,IAAI;EAAC,QAAA,IAAI,CAACgjC,SAAS,CAACvzC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;QAAM,KAAKE,CAAC,CAACqQ,MAAM;EAAC,QAAA,IAAI,CAACojC,WAAW,CAAC5zC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;QAAM,KAAKE,CAAC,CAACsQ,KAAK;EAACzB,QAAAA,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,8CAA8C,CAAC,CAAA;EACtiB,QAAA,MAAA;QAAM,KAAKnP,CAAC,CAACuQ,OAAO;EAAC1B,QAAAA,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,gDAAgD,CAAC,CAAA;EAAC,QAAA,MAAA;QAAM,KAAKnP,CAAC,CAACwQ,KAAK;EAAC,QAAA,IAAI,CAAC8iC,UAAU,CAACzzC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;QAAM,KAAKE,CAAC,CAACyQ,MAAM;EAAC,QAAA,IAAI,CAACwhC,WAAW,CAACpyC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;QAAM,KAAKE,CAAC,CAAC0Q,IAAI;EAAC,QAAA,IAAI,CAAC2iC,SAAS,CAACxzC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;QAAM,KAAKE,CAAC,CAAC2Q,QAAQ;EAAC,QAAA,IAAI,CAACilC,aAAa,CAAC/1C,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;QAAM,KAAKE,CAAC,CAAC4Q,QAAQ;EAAC,QAAA,IAAI,CAACilC,aAAa,CAACh2C,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;QAAM,KAAKE,CAAC,CAAC6Q,MAAM;EAAC,QAAA,IAAI,CAACilC,WAAW,CAACj2C,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;QAAM,KAAKE,CAAC,CAAC8Q,MAAM;EAAC,QAAA,IAAI,CAACilC,WAAW,CAACl2C,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;QAAM,KAAKE,CAAC,CAAC+Q,OAAO;EAAC,QAAA,IAAI,CAACyiC,gBAAgB,CAAC3zC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;QAAM,KAAKE,CAAC,CAACgR,OAAO;EAAC,QAAA,IAAI,CAACuiC,iBAAiB,CAAC1zC,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,QAAA,MAAA;EAAM,MAAA;EAAQ+O,QAAAA,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,kCAAkC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;IACviBN,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACs1C,sBAAsB,GAAC,UAASp2C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAG,IAAI,CAACo1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,EAAC,IAAI,CAAC2jC,QAAQ,CAAC3C,qBAAqB,CAACryC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAACgP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACu1C,oBAAoB,GAAC,UAASr2C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAG,IAAI,CAACo1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,EAAC,IAAI,CAAC2jC,QAAQ,CAAC1C,mBAAmB,CAACtyC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAACgP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACw1C,sBAAsB,GAAC,UAASt2C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAG,IAAI,CAACo1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,EAAC,IAAI,CAAC2jC,QAAQ,CAACzC,qBAAqB,CAACvyC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IACphBgP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACy1C,oBAAoB,GAAC,UAASv2C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAG,IAAI,CAACo1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,EAAC,IAAI,CAAC2jC,QAAQ,CAACxC,mBAAmB,CAACxyC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAACgP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC01C,oBAAoB,GAAC,UAASx2C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAG,IAAI,CAACo1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,EAAC,IAAI,CAAC2jC,QAAQ,CAACvC,mBAAmB,CAACzyC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAACgP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC21C,oBAAoB,GAAC,UAASz2C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAG,IAAI,CAACo1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,EAAC,IAAI,CAAC2jC,QAAQ,CAACtC,mBAAmB,CAAC1yC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAC5gBgP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC41C,0BAA0B,GAAC,UAAS12C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAG,IAAI,CAACo1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,EAAC,IAAI,CAAC2jC,QAAQ,CAACrC,yBAAyB,CAAC3yC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAACgP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC61C,wBAAwB,GAAC,UAAS32C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAG,IAAI,CAACo1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,EAAC,IAAI,CAAC2jC,QAAQ,CAACpC,uBAAuB,CAAC5yC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IACjXgP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACqyC,UAAU,GAAC,UAASnzC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAI,IAAEA,CAAC,KAAGgP,IAAI,CAACC,OAAO,CAACE,MAAM,CAACnP,CAAC,IAAE,CAACgP,IAAI,CAACW,eAAe,CAACwC,SAAS,IAAEnS,CAAC,GAACgP,IAAI,CAACW,eAAe,CAACwC,SAAS,CAAC,EAAC,IAAI,CAACikC,oBAAoB,CAACr2C,CAAC,EAACC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,YAAY,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACqyC,UAAU,CAAC,CAAA;IAAClkC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC81C,gBAAgB,GAAC,UAAS52C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAGA,CAAC,GAAC4Y,QAAQ,CAAC5Y,CAAC,EAAC,EAAE,CAAC,EAACgP,IAAI,CAACC,OAAO,CAACE,MAAM,CAACnP,CAAC,IAAE,CAACgP,IAAI,CAACW,eAAe,CAACwC,SAAS,IAAEnS,CAAC,GAACgP,IAAI,CAACW,eAAe,CAACwC,SAAS,CAAC,EAAC,IAAI,CAACikC,oBAAoB,CAACr2C,CAAC,EAACC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAC/egP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACsyC,UAAU,GAAC,UAASpzC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAI,IAAEA,CAAC,KAAGgP,IAAI,CAACC,OAAO,CAACE,MAAM,CAACnP,CAAC,IAAE,CAACgP,IAAI,CAACW,eAAe,CAAC2C,SAAS,IAAEtS,CAAC,GAACgP,IAAI,CAACW,eAAe,CAAC2C,SAAS,CAAC,EAAC,IAAI,CAACgkC,oBAAoB,CAACv2C,CAAC,EAACC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,YAAY,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACsyC,UAAU,CAAC,CAAA;IAACnkC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACuyC,gBAAgB,GAAC,UAASrzC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAGA,CAAC,GAACgP,IAAI,CAAC6kC,KAAK,CAACe,KAAK,CAACD,UAAU,CAAC30C,CAAC,CAAC,EAAC,IAAI,CAACo1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,EAAC,IAAI,CAAC2jC,QAAQ,CAAC9C,kBAAkB,CAAClyC,CAAC,CAAC+zC,EAAE,EAAC/zC,CAAC,CAACg0C,EAAE,CAAC,CAAC,CAAA;KAAC,CAAA;IACjfhlC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACuxC,WAAW,GAAC,UAASryC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAI,IAAEA,CAAC,KAAGgP,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEnP,CAAC,IAAEA,CAAC,GAACgP,IAAI,CAACW,eAAe,CAACyC,SAAS,CAAC,EAAC,IAAI,CAAC+jC,sBAAsB,CAACp2C,CAAC,EAACC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,aAAa,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACuxC,WAAW,CAAC,CAAA;IAACpjC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC+1C,iBAAiB,GAAC,UAAS72C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAI,IAAEA,CAAC,KAAGA,CAAC,GAAC4Y,QAAQ,CAAC5Y,CAAC,EAAC,EAAE,CAAC,EAACgP,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEnP,CAAC,IAAEA,CAAC,GAACgP,IAAI,CAACW,eAAe,CAACyC,SAAS,CAAC,EAAC,IAAI,CAAC+jC,sBAAsB,CAACp2C,CAAC,EAACC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IAC3bgP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACkyC,WAAW,GAAC,UAAShzC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAI,IAAEA,CAAC,KAAGgP,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEnP,CAAC,IAAEA,CAAC,GAACgP,IAAI,CAACW,eAAe,CAAC4C,SAAS,CAAC,EAAC,IAAI,CAAC8jC,sBAAsB,CAACt2C,CAAC,EAACC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,aAAa,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACkyC,WAAW,CAAC,CAAA;IAAC/jC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACg2C,iBAAiB,GAAC,UAAS92C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAGA,CAAC,GAACgP,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACa,UAAU,CAAC30C,CAAC,CAAC,EAAC,IAAI,CAACo1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,EAAC,IAAI,CAAC2jC,QAAQ,CAAC9C,kBAAkB,CAAClyC,CAAC,CAAC+zC,EAAE,EAAC/zC,CAAC,CAACg0C,EAAE,CAAC,CAAC,CAAA;KAAC,CAAA;IAC1dhlC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACo1C,WAAW,GAAC,UAASl2C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAI,IAAEA,CAAC,KAAGgP,IAAI,CAACC,OAAO,CAACE,MAAM,CAACnP,CAAC,IAAE,CAACgP,IAAI,CAACW,eAAe,CAACwC,SAAS,IAAEnS,CAAC,GAACgP,IAAI,CAACW,eAAe,CAACwC,SAAS,CAAC,EAAC,IAAI,CAACokC,oBAAoB,CAACx2C,CAAC,EAACC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,aAAa,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACo1C,WAAW,CAAC,CAAA;IAACjnC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACq1C,WAAW,GAAC,UAASn2C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAI,IAAEA,CAAC,KAAGgP,IAAI,CAACC,OAAO,CAACE,MAAM,CAACnP,CAAC,IAAE,CAACgP,IAAI,CAACW,eAAe,CAAC2C,SAAS,IAAEtS,CAAC,GAACgP,IAAI,CAACW,eAAe,CAAC2C,SAAS,CAAC,EAAC,IAAI,CAACkkC,oBAAoB,CAACz2C,CAAC,EAACC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAC5d6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,aAAa,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACq1C,WAAW,CAAC,CAAA;IAAClnC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACi2C,eAAe,GAAC,UAAS/2C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,IAAE,IAAI,CAAC02C,wBAAwB,CAAC32C,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;IAACgP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACk2C,iBAAiB,GAAC,UAASh3C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,IAAE,IAAI,CAACy2C,0BAA0B,CAAC12C,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;IACxTgP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACi1C,YAAY,GAAC,UAAS/1C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAGgP,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEnP,CAAC,IAAEA,CAAC,GAACgP,IAAI,CAACW,eAAe,CAACyC,SAAS,CAAC,EAAC,IAAI,CAACgjC,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACd,OAAO,CAAC,EAAC,IAAI,CAAC0kC,QAAQ,CAAC5C,WAAW,CAACpyC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,cAAc,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACi1C,YAAY,CAAC,CAAA;IACpU9mC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACg1C,YAAY,GAAC,UAAS91C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAGgP,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEnP,CAAC,IAAEA,CAAC,GAACgP,IAAI,CAACW,eAAe,CAAC4C,SAAS,CAAC,EAAC,IAAI,CAAC6iC,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACf,OAAO,CAAC,EAAC,IAAI,CAAC2kC,QAAQ,CAACjC,WAAW,CAAC/yC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,cAAc,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACg1C,YAAY,CAAC,CAAA;IACpU7mC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACm2C,kBAAkB,GAAC,UAASj3C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAGA,CAAC,GAACgP,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACa,UAAU,CAAC30C,CAAC,CAAC,EAAC,IAAI,CAACo1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACf,OAAO,CAAC,EAAC,IAAI,CAAC2kC,QAAQ,CAAC7C,iBAAiB,CAACnyC,CAAC,CAAC+zC,EAAE,EAAC/zC,CAAC,CAACg0C,EAAE,CAAC,CAAC,CAAA;KAAC,CAAA;IAAChlC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACk1C,aAAa,GAAC,UAASh2C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAGgP,IAAI,CAACC,OAAO,CAACE,MAAM,CAACnP,CAAC,IAAE,CAACgP,IAAI,CAACW,eAAe,CAACwC,SAAS,IAAEnS,CAAC,GAACgP,IAAI,CAACW,eAAe,CAACwC,SAAS,CAAC,EAAC,IAAI,CAACijC,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACd,OAAO,CAAC,EAAC,IAAI,CAAC0kC,QAAQ,CAAC9B,UAAU,CAAClzC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAC/c6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,eAAe,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACk1C,aAAa,CAAC,CAAA;IAAC/mC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACm1C,aAAa,GAAC,UAASj2C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAGgP,IAAI,CAACC,OAAO,CAACE,MAAM,CAACnP,CAAC,IAAE,CAACgP,IAAI,CAACW,eAAe,CAAC2C,SAAS,IAAEtS,CAAC,GAACgP,IAAI,CAACW,eAAe,CAAC2C,SAAS,CAAC,EAAC,IAAI,CAAC8iC,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACf,OAAO,CAAC,EAAC,IAAI,CAAC2kC,QAAQ,CAAC7B,UAAU,CAACnzC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,eAAe,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACm1C,aAAa,CAAC,CAAA;IAC/chnC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACo2C,mBAAmB,GAAC,UAASl3C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAGA,CAAC,GAACgP,IAAI,CAAC6kC,KAAK,CAACe,KAAK,CAACD,UAAU,CAAC30C,CAAC,CAAC,EAAC,IAAI,CAACo1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACf,OAAO,CAAC,EAAC,IAAI,CAAC2kC,QAAQ,CAAC7C,iBAAiB,CAACnyC,CAAC,CAAC+zC,EAAE,EAAC/zC,CAAC,CAACg0C,EAAE,CAAC,CAAC,CAAA;KAAC,CAAA;IAAChlC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACwyC,UAAU,GAAC,UAAStzC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAG,IAAI,CAACo1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACd,OAAO,CAAC,EAAC,IAAI,CAAC0kC,QAAQ,CAAC3B,UAAU,CAACrzC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,YAAY,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACwyC,UAAU,CAAC,CAAA;IACvdrkC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACyyC,WAAW,GAAC,UAASvzC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAG,IAAI,CAACo1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACf,OAAO,CAAC,EAAC,IAAI,CAAC2kC,QAAQ,CAAC1B,WAAW,CAACtzC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,aAAa,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACyyC,WAAW,CAAC,CAAA;IAACtkC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC0yC,SAAS,GAAC,UAASxzC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAI,IAAEA,CAAC,KAAGgP,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,SAAS,KAAG,OAAOnP,CAAC,IAAE,QAAQ,KAAG,OAAOA,CAAC,CAAC,EAAC,IAAI,CAACo1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,EAAC,IAAI,CAAC2jC,QAAQ,CAACzB,SAAS,CAACvzC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAC9d6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,WAAW,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC0yC,SAAS,CAAC,CAAA;IAACvkC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC2yC,SAAS,GAAC,UAASzzC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAGgP,IAAI,CAACC,OAAO,CAACE,MAAM,CAACnP,CAAC,IAAE,CAACgP,IAAI,CAACW,eAAe,CAACwC,SAAS,IAAEnS,CAAC,GAACgP,IAAI,CAACW,eAAe,CAACwC,SAAS,CAAC,EAAC,IAAI,CAACijC,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,EAAC,IAAI,CAAC2jC,QAAQ,CAAC1C,mBAAmB,CAACtyC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,WAAW,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC2yC,SAAS,CAAC,CAAA;IACncxkC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC+yC,WAAW,GAAC,UAAS7zC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAGD,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAACp1C,CAAC,CAAC,EAAC,IAAI,CAACi1C,QAAQ,CAACpB,WAAW,CAAC5zC,CAAC,CAAC,EAAC,IAAI,CAACq1C,aAAa,CAACt1C,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,aAAa,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC+yC,WAAW,CAAC,CAAA;IAAC5kC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC4yC,UAAU,GAAC,UAAS1zC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAEA,CAAC,KAAGA,CAAC,GAACgP,IAAI,CAACs4B,KAAK,CAAC4C,sBAAsB,CAAClqC,CAAC,CAAC,EAAC,IAAI,CAACo1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,CAAC,EAAC,IAAI,CAAC0jC,QAAQ,CAAC3C,qBAAqB,CAACryC,CAAC,CAACN,MAAM,CAAC,EAAC,IAAI,CAACw1C,iBAAiB,CAACl1C,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EACve6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,YAAY,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC4yC,UAAU,CAAC,CAAA;EAACzkC,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACq2C,YAAY,GAAC,UAASn3C,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,IAAED,CAAC,KAAGD,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAACp1C,CAAC,CAAC,EAACE,CAAC,CAACD,CAAC,EAAC,IAAI,CAAC,EAAC,IAAI,CAACq1C,aAAa,CAACt1C,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,cAAc,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACq2C,YAAY,CAAC,CAAA;EAC5UloC,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACs2C,eAAe,GAAC,UAASp3C,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAI,IAAED,CAAC,KAAG,IAAI,CAACo1C,iBAAiB,CAAC,CAAC,EAACpmC,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACG,WAAW,CAAC,EAAC,IAAI,CAAC6jC,iBAAiB,CAAC,CAAC,EAACpmC,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,EAAC,IAAI,CAAC2jC,QAAQ,CAAC1C,mBAAmB,CAACvyC,CAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAAC,CAAC,CAAC,EAACl1C,CAAC,CAACD,CAAC,EAAC,IAAI,CAAC,EAAC,IAAI,CAACq1C,aAAa,CAACt1C,CAAC,CAAC,EAAC,IAAI,CAACq1C,iBAAiB,CAAC,CAAC,EAACpmC,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACI,SAAS,CAAC,CAAC,CAAA;KAAC,CAAA;EAC3WxC,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACu2C,UAAU,GAAC,UAASr3C,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAI,IAAED,CAAC,KAAG,IAAI,CAACo1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACG,WAAW,CAAC,EAACtR,CAAC,CAACD,CAAC,EAAC,IAAI,CAAC,EAAC,IAAI,CAACo1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACI,SAAS,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC3P,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,YAAY,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACu2C,UAAU,CAAC,CAAA;IAACpoC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC8yC,gBAAgB,GAAC,UAAS5zC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAI,IAAEA,CAAC,KAAGgP,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEnP,CAAC,CAACN,MAAM,CAAC,EAAC,IAAI,CAAC01C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACf,OAAO,CAAC,EAAC,IAAI,CAAC2kC,QAAQ,CAACrB,gBAAgB,CAAC3zC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;IACjgBgP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC6yC,iBAAiB,GAAC,UAAS3zC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAI,IAAEA,CAAC,KAAGgP,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC,IAAEnP,CAAC,CAACN,MAAM,CAAC,EAAC,IAAI,CAAC01C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,EAAC,IAAI,CAAC2jC,QAAQ,CAACtB,iBAAiB,CAAC1zC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAACgP,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACsxC,iBAAiB,GAAC,UAASpyC,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAI,CAACm1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACf,OAAO,CAAC,CAAA;MAAC,IAAI,CAAC2kC,QAAQ,CAAC7C,iBAAiB,CAACnyC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EAC9W+O,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACqxC,kBAAkB,GAAC,UAASnyC,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAI,CAACm1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAA;MAAC,IAAI,CAAC2jC,QAAQ,CAAC9C,kBAAkB,CAAClyC,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC+O,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACw2C,wBAAwB,GAAC,UAASt3C,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAI,CAACm1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAA;EAAC,IAAA,IAAIlR,CAAC,GAAC,IAAI,CAAC60C,QAAQ,CAAA;EAAChmC,IAAAA,IAAI,CAACs4B,KAAK,CAACe,UAAU,CAACroC,CAAC,EAACC,CAAC,EAAC,UAASF,CAAC,EAACC,CAAC,EAAC;QAACG,CAAC,CAAC+xC,kBAAkB,CAACnyC,CAAC,KAAG,CAAC,EAACC,CAAC,KAAG,CAAC,CAAC,CAAA;EAAA,KAAC,CAAC,CAAA;KAAC,CAAA;IACzYgP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACy2C,kBAAkB,GAAC,UAASv3C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAACm2C,oBAAoB,CAACr2C,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,oBAAoB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACy2C,kBAAkB,CAAC,CAAA;IAACtoC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC02C,wBAAwB,GAAC,UAASx3C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAAC02C,gBAAgB,CAAC52C,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;IAClY+O,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC22C,kBAAkB,GAAC,UAASz3C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAACq2C,oBAAoB,CAACv2C,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,oBAAoB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC22C,kBAAkB,CAAC,CAAA;EAACxoC,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC42C,yBAAyB,GAAC,UAAS13C,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEH,CAAC,EAAC,KAAI,IAAIhC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACgC,CAAC,CAACN,MAAM,EAAC1B,CAAC,EAAE,EAAA;QAAC,IAAI,CAACm0C,iBAAiB,CAACpyC,CAAC,EAACE,CAAC,CAACD,CAAC,CAAChC,CAAC,CAAC,CAAC,EAACmC,CAAC,CAACH,CAAC,CAAChC,CAAC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EACnZgR,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC62C,0BAA0B,GAAC,UAAS33C,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEH,CAAC,EAAC,KAAI,IAAIhC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACgC,CAAC,CAACN,MAAM,EAAC1B,CAAC,EAAE,EAAA;QAAC,IAAI,CAACk0C,kBAAkB,CAACnyC,CAAC,EAACE,CAAC,CAACD,CAAC,CAAChC,CAAC,CAAC,CAAC,EAACmC,CAAC,CAACH,CAAC,CAAChC,CAAC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAACgR,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC82C,gCAAgC,GAAC,UAAS53C,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEH,CAAC,EAAC,KAAI,IAAIhC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACgC,CAAC,CAACN,MAAM,EAAC1B,CAAC,EAAE,EAAA;QAAC,IAAI,CAACq5C,wBAAwB,CAACt3C,CAAC,EAACE,CAAC,CAACD,CAAC,CAAChC,CAAC,CAAC,CAAC,EAACmC,CAAC,CAACH,CAAC,CAAChC,CAAC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;IAACgR,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC+2C,wBAAwB,GAAC,UAAS73C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAACmzC,gBAAgB,CAACrzC,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;IACzc+O,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACg3C,mBAAmB,GAAC,UAAS93C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAACk2C,sBAAsB,CAACp2C,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,qBAAqB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACg3C,mBAAmB,CAAC,CAAA;IAAC7oC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACi3C,yBAAyB,GAAC,UAAS/3C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAAC22C,iBAAiB,CAAC72C,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;IACzY+O,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACk3C,mBAAmB,GAAC,UAASh4C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAACo2C,sBAAsB,CAACt2C,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,qBAAqB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACk3C,mBAAmB,CAAC,CAAA;IAAC/oC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACm3C,yBAAyB,GAAC,UAASj4C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAAC42C,iBAAiB,CAAC92C,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;IACzY+O,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACo3C,mBAAmB,GAAC,UAASl4C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAACs2C,oBAAoB,CAACx2C,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,qBAAqB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACo3C,mBAAmB,CAAC,CAAA;IAACjpC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACq3C,mBAAmB,GAAC,UAASn4C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAACu2C,oBAAoB,CAACz2C,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,qBAAqB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACq3C,mBAAmB,CAAC,CAAA;IAC3flpC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACs3C,yBAAyB,GAAC,UAASp4C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAACw2C,0BAA0B,CAAC12C,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;IAAC+O,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACu3C,uBAAuB,GAAC,UAASr4C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAACy2C,wBAAwB,CAAC32C,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;IAAC+O,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACw3C,oBAAoB,GAAC,UAASt4C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAAC61C,YAAY,CAAC/1C,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,sBAAsB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACw3C,oBAAoB,CAAC,CAAA;IAC1hBrpC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACy3C,oBAAoB,GAAC,UAASv4C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAAC41C,YAAY,CAAC91C,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,sBAAsB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACy3C,oBAAoB,CAAC,CAAA;IAACtpC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC03C,0BAA0B,GAAC,UAASx4C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAAC+2C,kBAAkB,CAACj3C,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,4BAA4B,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC03C,0BAA0B,CAAC,CAAA;IACzgBvpC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC23C,qBAAqB,GAAC,UAASz4C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAAC81C,aAAa,CAACh2C,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,uBAAuB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC23C,qBAAqB,CAAC,CAAA;IAACxpC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC43C,qBAAqB,GAAC,UAAS14C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAAC+1C,aAAa,CAACj2C,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,uBAAuB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC43C,qBAAqB,CAAC,CAAA;IACzfzpC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC63C,2BAA2B,GAAC,UAAS34C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAACg3C,mBAAmB,CAACl3C,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;IAAC+O,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC83C,kBAAkB,GAAC,UAAS54C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAACozC,UAAU,CAACtzC,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,oBAAoB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC83C,kBAAkB,CAAC,CAAA;IAC9X3pC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC+3C,mBAAmB,GAAC,UAAS74C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAACqzC,WAAW,CAACvzC,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,qBAAqB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC+3C,mBAAmB,CAAC,CAAA;IAAC5pC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACg4C,iBAAiB,GAAC,UAAS94C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAACszC,SAAS,CAACxzC,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,mBAAmB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACg4C,iBAAiB,CAAC,CAAA;IACje7pC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACi4C,iBAAiB,GAAC,UAAS/4C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAACuzC,SAAS,CAACzzC,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,mBAAmB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACi4C,iBAAiB,CAAC,CAAA;IAAC9pC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACk4C,mBAAmB,GAAC,UAASh5C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAAC2zC,WAAW,CAAC7zC,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,qBAAqB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACk4C,mBAAmB,CAAC,CAAA;IACje/pC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACm4C,kBAAkB,GAAC,UAASj5C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAACwzC,UAAU,CAAC1zC,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,oBAAoB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACm4C,kBAAkB,CAAC,CAAA;EAAChqC,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACo4C,oBAAoB,GAAC,UAASl5C,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAED,CAAC,EAAC,KAAI,IAAIG,CAAC,GAAC,CAAC,EAACA,CAAC,GAACH,CAAC,CAACN,MAAM,EAACS,CAAC,EAAE,EAAC;EAAC,MAAA,IAAInC,CAAC,GAAC,IAAI,CAACm3C,eAAe,CAACp1C,CAAC,CAAC,CAAA;EAACE,MAAAA,CAAC,CAACD,CAAC,CAACG,CAAC,CAAC,EAAC,IAAI,CAAC,CAAA;EAAC,MAAA,IAAI,CAACk1C,aAAa,CAACr3C,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EAAC6D,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,sBAAsB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACo4C,oBAAoB,CAAC,CAAA;EACphBjqC,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACq4C,kBAAkB,GAAC,UAASn5C,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAED,CAAC,EAAC,KAAI,IAAIG,CAAC,GAAC,CAAC,EAACA,CAAC,GAACH,CAAC,CAACN,MAAM,EAACS,CAAC,EAAE,EAAA;EAAC,MAAA,IAAI,CAACi1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACG,WAAW,CAAC,EAACtR,CAAC,CAACD,CAAC,CAACG,CAAC,CAAC,EAAC,IAAI,CAAC,EAAC,IAAI,CAACi1C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACI,SAAS,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC3P,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,oBAAoB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACq4C,kBAAkB,CAAC,CAAA;IAAClqC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACs4C,wBAAwB,GAAC,UAASp5C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAAC0zC,gBAAgB,CAAC5zC,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;IACrf+O,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACu4C,yBAAyB,GAAC,UAASr5C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;QAAC,IAAI,CAACyzC,iBAAiB,CAAC3zC,CAAC,EAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;IAAC+O,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACw4C,gBAAgB,GAAC,UAASt5C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC;EAACK,MAAAA,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAACp1C,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;UAAC,IAAI,CAAC+0C,QAAQ,CAAC1C,mBAAmB,CAACtyC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,IAAI,CAACo1C,aAAa,CAACt1C,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,kBAAkB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACw4C,gBAAgB,CAAC,CAAA;IAChcrqC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACy4C,sBAAsB,GAAC,UAASv5C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC;EAACK,MAAAA,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAACp1C,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;EAAC,QAAA,IAAI,CAAC+0C,QAAQ,CAAC1C,mBAAmB,CAAC15B,QAAQ,CAAC5Y,CAAC,CAACC,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,IAAI,CAACo1C,aAAa,CAACt1C,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;IAACiP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC04C,gBAAgB,GAAC,UAASx5C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC;EAACK,MAAAA,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAACp1C,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;UAAC,IAAI,CAAC+0C,QAAQ,CAACxC,mBAAmB,CAACxyC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,IAAI,CAACo1C,aAAa,CAACt1C,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,kBAAkB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC04C,gBAAgB,CAAC,CAAA;EAC/gBvqC,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC24C,uBAAuB,GAAC,UAASz5C,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC,IAAG,IAAI,IAAEH,CAAC,EAAC;EAACD,MAAAA,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAACp1C,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAI/B,CAAC,GAAC,CAAC,EAACA,CAAC,GAACgC,CAAC,CAACN,MAAM,EAAC1B,CAAC,EAAE,EAAA;UAAC,IAAI,CAACg3C,QAAQ,CAAC7C,iBAAiB,CAAClyC,CAAC,CAACD,CAAC,CAAChC,CAAC,CAAC,CAAC,EAACmC,CAAC,CAACH,CAAC,CAAChC,CAAC,CAAC,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,IAAI,CAACq3C,aAAa,CAACt1C,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EAACiP,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC44C,wBAAwB,GAAC,UAAS15C,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC,IAAG,IAAI,IAAEH,CAAC,EAAC;EAACD,MAAAA,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAACp1C,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAI/B,CAAC,GAAC,CAAC,EAACA,CAAC,GAACgC,CAAC,CAACN,MAAM,EAAC1B,CAAC,EAAE,EAAA;UAAC,IAAI,CAACg3C,QAAQ,CAAC9C,kBAAkB,CAACjyC,CAAC,CAACD,CAAC,CAAChC,CAAC,CAAC,CAAC,EAACmC,CAAC,CAACH,CAAC,CAAChC,CAAC,CAAC,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,IAAI,CAACq3C,aAAa,CAACt1C,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EACjaiP,EAAAA,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC64C,8BAA8B,GAAC,UAAS35C,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC,IAAG,IAAI,IAAEH,CAAC,EAAC;EAACD,MAAAA,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAACp1C,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAI/B,CAAC,GAAC,IAAI,CAACg3C,QAAQ,EAACl2C,CAAC,GAAC,CAAC,EAACA,CAAC,GAACkB,CAAC,CAACN,MAAM,EAACZ,CAAC,EAAE,EAAA;UAACkQ,IAAI,CAACs4B,KAAK,CAACe,UAAU,CAACpoC,CAAC,CAACD,CAAC,CAAClB,CAAC,CAAC,CAAC,EAACqB,CAAC,CAACH,CAAC,CAAClB,CAAC,CAAC,CAAC,EAAC,UAASiB,CAAC,EAACC,CAAC,EAAC;YAAChC,CAAC,CAACk0C,kBAAkB,CAACnyC,CAAC,KAAG,CAAC,EAACC,CAAC,KAAG,CAAC,CAAC,CAAA;EAAA,SAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,IAAI,CAACq1C,aAAa,CAACt1C,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;IAACiP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC84C,sBAAsB,GAAC,UAAS55C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC;EAACK,MAAAA,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAACp1C,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAC;EAAC,QAAA,IAAIE,CAAC,GAAC6O,IAAI,CAAC6kC,KAAK,CAACe,KAAK,CAACD,UAAU,CAAC30C,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAC,QAAA,IAAI,CAAC+0C,QAAQ,CAAC9C,kBAAkB,CAAC/xC,CAAC,CAAC4zC,EAAE,EAAC5zC,CAAC,CAAC6zC,EAAE,CAAC,CAAA;EAAA,OAAA;EAAC,MAAA,IAAI,CAACqB,aAAa,CAACt1C,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;IACtgBiP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC+4C,iBAAiB,GAAC,UAAS75C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC;EAACK,MAAAA,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAACp1C,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;UAAC,IAAI,CAAC+0C,QAAQ,CAAC3C,qBAAqB,CAACryC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,IAAI,CAACo1C,aAAa,CAACt1C,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,mBAAmB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC+4C,iBAAiB,CAAC,CAAA;IAC3T5qC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACg5C,uBAAuB,GAAC,UAAS95C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC;EAACK,MAAAA,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAACp1C,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;EAAC,QAAA,IAAI,CAAC+0C,QAAQ,CAAC3C,qBAAqB,CAACz5B,QAAQ,CAAC5Y,CAAC,CAACC,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,IAAI,CAACo1C,aAAa,CAACt1C,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;IAACiP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACi5C,iBAAiB,GAAC,UAAS/5C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC;EAACK,MAAAA,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAACp1C,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;UAAC,IAAI,CAAC+0C,QAAQ,CAACzC,qBAAqB,CAACvyC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,IAAI,CAACo1C,aAAa,CAACt1C,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,mBAAmB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACi5C,iBAAiB,CAAC,CAAA;IACvhB9qC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACk5C,uBAAuB,GAAC,UAASh6C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC;EAACK,MAAAA,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAACp1C,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAC;EAAC,QAAA,IAAIE,CAAC,GAAC6O,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACa,UAAU,CAAC30C,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAC,QAAA,IAAI,CAAC+0C,QAAQ,CAAC9C,kBAAkB,CAAC/xC,CAAC,CAAC4zC,EAAE,EAAC5zC,CAAC,CAAC6zC,EAAE,CAAC,CAAA;EAAA,OAAA;EAAC,MAAA,IAAI,CAACqB,aAAa,CAACt1C,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;IAACiP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACm5C,iBAAiB,GAAC,UAASj6C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC;EAACK,MAAAA,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAACp1C,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;UAAC,IAAI,CAAC+0C,QAAQ,CAACvC,mBAAmB,CAACzyC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,IAAI,CAACo1C,aAAa,CAACt1C,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EACjc8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,mBAAmB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACm5C,iBAAiB,CAAC,CAAA;IAAChrC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACo5C,iBAAiB,GAAC,UAASl6C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC;EAACK,MAAAA,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAACp1C,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;UAAC,IAAI,CAAC+0C,QAAQ,CAACtC,mBAAmB,CAAC1yC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,IAAI,CAACo1C,aAAa,CAACt1C,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,mBAAmB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACo5C,iBAAiB,CAAC,CAAA;IAC5ajrC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACq5C,uBAAuB,GAAC,UAASn6C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC;EAACK,MAAAA,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAACp1C,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;EAAC,QAAA,IAAI,CAAC+0C,QAAQ,CAACpC,uBAAuB,CAAC5jC,IAAI,CAACs4B,KAAK,CAAC6B,qBAAqB,CAACnpC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,IAAI,CAACo1C,aAAa,CAACt1C,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;IAACiP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACs5C,qBAAqB,GAAC,UAASp6C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC;EAACK,MAAAA,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAACp1C,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;UAAC,IAAI,CAAC+0C,QAAQ,CAACpC,uBAAuB,CAAC5yC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,IAAI,CAACo1C,aAAa,CAACt1C,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;IACjciP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACu5C,kBAAkB,GAAC,UAASr6C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC,KAAI,IAAI,CAAC01C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,CAAC,EAAC,IAAI,CAAC0jC,QAAQ,CAAC3C,qBAAqB,CAAC,CAAC,GAACryC,CAAC,CAACN,MAAM,CAAC,EAACK,CAAC,GAAC,CAAC,EAACA,CAAC,GAACC,CAAC,CAACN,MAAM,EAACK,CAAC,EAAE,EAAA;QAAC,IAAI,CAACi1C,QAAQ,CAAC5C,WAAW,CAACpyC,CAAC,CAACD,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,oBAAoB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACu5C,kBAAkB,CAAC,CAAA;IAChXprC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACw5C,kBAAkB,GAAC,UAASt6C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC,KAAI,IAAI,CAAC01C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,CAAC,EAAC,IAAI,CAAC0jC,QAAQ,CAAC3C,qBAAqB,CAAC,CAAC,GAACryC,CAAC,CAACN,MAAM,CAAC,EAACK,CAAC,GAAC,CAAC,EAACA,CAAC,GAACC,CAAC,CAACN,MAAM,EAACK,CAAC,EAAE,EAAA;QAAC,IAAI,CAACi1C,QAAQ,CAACjC,WAAW,CAAC/yC,CAAC,CAACD,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,oBAAoB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACw5C,kBAAkB,CAAC,CAAA;IAChXrrC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACy5C,wBAAwB,GAAC,UAASv6C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC,KAAI,IAAI,CAAC01C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,CAAC,EAAC,IAAI,CAAC0jC,QAAQ,CAAC3C,qBAAqB,CAAC,CAAC,GAACryC,CAAC,CAACN,MAAM,CAAC,EAACK,CAAC,GAAC,CAAC,EAACA,CAAC,GAACC,CAAC,CAACN,MAAM,EAACK,CAAC,EAAE,EAAC;EAAC,MAAA,IAAIE,CAAC,GAAC+O,IAAI,CAAC6kC,KAAK,CAACC,MAAM,CAACa,UAAU,CAAC30C,CAAC,CAACD,CAAC,CAAC,CAAC,CAAA;EAAC,MAAA,IAAI,CAACi1C,QAAQ,CAAC7C,iBAAiB,CAAClyC,CAAC,CAAC8zC,EAAE,EAAC9zC,CAAC,CAAC+zC,EAAE,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;IACvThlC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC05C,mBAAmB,GAAC,UAASx6C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC,KAAI,IAAI,CAAC01C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,CAAC,EAAC,IAAI,CAAC0jC,QAAQ,CAAC3C,qBAAqB,CAAC,CAAC,GAACryC,CAAC,CAACN,MAAM,CAAC,EAACK,CAAC,GAAC,CAAC,EAACA,CAAC,GAACC,CAAC,CAACN,MAAM,EAACK,CAAC,EAAE,EAAA;QAAC,IAAI,CAACi1C,QAAQ,CAAC9B,UAAU,CAAClzC,CAAC,CAACD,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,qBAAqB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC05C,mBAAmB,CAAC,CAAA;IAClXvrC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC25C,mBAAmB,GAAC,UAASz6C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC,KAAI,IAAI,CAAC01C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,CAAC,EAAC,IAAI,CAAC0jC,QAAQ,CAAC3C,qBAAqB,CAAC,CAAC,GAACryC,CAAC,CAACN,MAAM,CAAC,EAACK,CAAC,GAAC,CAAC,EAACA,CAAC,GAACC,CAAC,CAACN,MAAM,EAACK,CAAC,EAAE,EAAA;QAAC,IAAI,CAACi1C,QAAQ,CAAC7B,UAAU,CAACnzC,CAAC,CAACD,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,qBAAqB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC25C,mBAAmB,CAAC,CAAA;IAClXxrC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC45C,yBAAyB,GAAC,UAAS16C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC,KAAI,IAAI,CAAC01C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,CAAC,EAAC,IAAI,CAAC0jC,QAAQ,CAAC3C,qBAAqB,CAAC,CAAC,GAACryC,CAAC,CAACN,MAAM,CAAC,EAACK,CAAC,GAAC,CAAC,EAACA,CAAC,GAACC,CAAC,CAACN,MAAM,EAACK,CAAC,EAAE,EAAA;QAAC,IAAI,CAACi1C,QAAQ,CAAC5B,gBAAgB,CAACpzC,CAAC,CAACD,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;IAACiP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC65C,gBAAgB,GAAC,UAAS36C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC,KAAI,IAAI,CAAC01C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,CAAC,EAAC,IAAI,CAAC0jC,QAAQ,CAAC3C,qBAAqB,CAAC,CAAC,GAACryC,CAAC,CAACN,MAAM,CAAC,EAACK,CAAC,GAAC,CAAC,EAACA,CAAC,GAACC,CAAC,CAACN,MAAM,EAACK,CAAC,EAAE,EAAA;QAAC,IAAI,CAACi1C,QAAQ,CAAC3B,UAAU,CAACrzC,CAAC,CAACD,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAChgB8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,kBAAkB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC65C,gBAAgB,CAAC,CAAA;IAAC1rC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC85C,iBAAiB,GAAC,UAAS56C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC,KAAI,IAAI,CAAC01C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,CAAC,EAAC,IAAI,CAAC0jC,QAAQ,CAAC3C,qBAAqB,CAAC,CAAC,GAACryC,CAAC,CAACN,MAAM,CAAC,EAACK,CAAC,GAAC,CAAC,EAACA,CAAC,GAACC,CAAC,CAACN,MAAM,EAACK,CAAC,EAAE,EAAA;QAAC,IAAI,CAACi1C,QAAQ,CAAC1B,WAAW,CAACtzC,CAAC,CAACD,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,mBAAmB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC85C,iBAAiB,CAAC,CAAA;IAC9d3rC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC+5C,eAAe,GAAC,UAAS76C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC,KAAI,IAAI,CAAC01C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,CAAC,EAAC,IAAI,CAAC0jC,QAAQ,CAAC3C,qBAAqB,CAACryC,CAAC,CAACN,MAAM,CAAC,EAACK,CAAC,GAAC,CAAC,EAACA,CAAC,GAACC,CAAC,CAACN,MAAM,EAACK,CAAC,EAAE,EAAA;QAAC,IAAI,CAACi1C,QAAQ,CAACzB,SAAS,CAACvzC,CAAC,CAACD,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,iBAAiB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAAC+5C,eAAe,CAAC,CAAA;IACnW5rC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACg6C,eAAe,GAAC,UAAS96C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC;EAACK,MAAAA,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAACp1C,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;UAAC,IAAI,CAAC+0C,QAAQ,CAACxB,SAAS,CAACxzC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,IAAI,CAACo1C,aAAa,CAACt1C,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,EAAC,iBAAiB,EAACmO,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACg6C,eAAe,CAAC,CAAA;IACzS7rC,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACi6C,sBAAsB,GAAC,UAAS/6C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC,KAAI,IAAI,CAAC01C,iBAAiB,CAACr1C,CAAC,EAACiP,IAAI,CAACW,eAAe,CAACyB,QAAQ,CAACE,SAAS,CAAC,EAAC,IAAI,CAAC0jC,QAAQ,CAAC3C,qBAAqB,CAAC,CAAC,GAACryC,CAAC,CAACN,MAAM,CAAC,EAACK,CAAC,GAAC,CAAC,EAACA,CAAC,GAACC,CAAC,CAACN,MAAM,EAACK,CAAC,EAAE,EAAA;QAAC,IAAI,CAACi1C,QAAQ,CAACrB,gBAAgB,CAAC3zC,CAAC,CAACD,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;IAACiP,IAAI,CAAC6lC,YAAY,CAACh0C,SAAS,CAACk6C,uBAAuB,GAAC,UAASh7C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,CAACN,MAAM,EAAC;EAACK,MAAAA,CAAC,GAAC,IAAI,CAACo1C,eAAe,CAACp1C,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;UAAC,IAAI,CAAC+0C,QAAQ,CAACtB,iBAAiB,CAAC1zC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,IAAI,CAACo1C,aAAa,CAACt1C,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EAACiP,EAAAA,IAAI,CAACgsC,GAAG,GAAC,UAASj7C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,CAACi7C,IAAI,GAACl7C,CAAC,CAAA;MAAC,IAAI,CAACm7C,UAAU,GAACl7C,CAAC,CAAA;EAAC,IAAA,IAAI,CAACm7C,IAAI,GAAC,EAAE,CAAA;EAAC,IAAA,IAAI,CAACC,QAAQ,GAAC,CAAC,CAAC,CAAA;MAAC,CAAC,GAAC,IAAI,CAACH,IAAI,CAACv7C,MAAM,IAAE,IAAI,CAAC27C,cAAc,EAAE,CAAA;KAAC,CAAA;IAACx5C,IAAI,CAACgJ,YAAY,CAAC,UAAU,EAACmE,IAAI,CAACgsC,GAAG,CAAC,CAAA;EAAChsC,EAAAA,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACw6C,cAAc,GAAC,YAAU;EAAC,IAAA,KAAI,IAAIt7C,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACk7C,IAAI,CAACv7C,MAAM,EAACK,CAAC,EAAE,EAAC;EAAC,MAAA,IAAIC,CAAC,GAAC,IAAI,CAACi7C,IAAI,CAACl7C,CAAC,CAAC;EAACE,QAAAA,CAAC,GAACD,CAAC,CAAC,CAAC,CAAC,CAAA;QAAC,IAAI,CAACm7C,IAAI,CAACl7C,CAAC,CAAC0H,QAAQ,EAAE,CAAC,GAAC,IAAIqH,IAAI,CAACgsC,GAAG,CAACM,MAAM,CAACr7C,CAAC,EAACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,IAAI,CAACo7C,QAAQ,GAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EACryBpsC,EAAAA,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAAC0V,OAAO,GAAC,YAAU;MAAC,IAAG,IAAI,CAAC6kC,QAAQ,EAAC;QAAC,IAAG,IAAI,CAACF,UAAU,EAAC;EAAC,QAAA,IAAIn7C,CAAC,GAAC,IAAI,CAACo7C,IAAI;YAACn7C,CAAC,CAAA;UAAC,KAAIA,CAAC,IAAID,CAAC,EAAA;EAAC,UAAA,IAAGW,MAAM,CAACG,SAAS,CAACsH,cAAc,CAAC3I,IAAI,CAACO,CAAC,EAACC,CAAC,CAAC,EAAC;EAAC,YAAA,IAAIC,CAAC,GAACF,CAAC,CAACC,CAAC,CAAC,CAACu7C,YAAY,CAAA;EAACt7C,YAAAA,CAAC,IAAEA,CAAC,CAACsW,OAAO,EAAE,CAAA;EAAA,WAAA;EAAC,SAAA;EAAA,OAAA;EAAC,KAAC,MAAI;EAAC,MAAA,IAAI,CAAC0kC,IAAI,CAACv7C,MAAM,GAAC,CAAC,CAAA;EAACK,MAAAA,CAAC,GAAC,IAAI,CAACy7C,WAAW,EAAE,CAAA;QAACz7C,CAAC,CAAC+W,IAAI,EAAE,CAAA;EAAC,MAAA,KAAI9W,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACL,MAAM,EAACM,CAAC,EAAE,EAAC;UAAC,IAAIG,CAAC,GAAC,IAAI,CAACg7C,IAAI,CAACp7C,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;UAAC,CAACC,CAAC,GAACE,CAAC,CAACo7C,YAAY,KAAGt7C,CAAC,CAACsW,OAAO,EAAE,CAAA;EAAC,QAAA,IAAI,CAAC0kC,IAAI,CAACt7C,IAAI,CAAC,CAACQ,CAAC,CAACs7C,GAAG,EAACt7C,CAAC,CAAC1C,KAAK,CAAC,CAAC,CAAA;EAAA,OAAA;EAAC,MAAA,IAAI,CAAC29C,QAAQ,GAAC,CAAC,CAAC,CAAA;EAAA,KAAA;MAAC,OAAO,IAAI,CAACH,IAAI,CAAA;KAAC,CAAA;EAACp5C,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,EAAC,SAAS,EAACmO,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAAC0V,OAAO,CAAC,CAAA;IACndvH,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAAC6W,QAAQ,GAAC,UAAS3X,CAAC,EAACC,CAAC,EAAC;MAAC,KAAI,IAAIC,CAAC,GAAC,IAAI,CAACsW,OAAO,EAAE,EAACpW,CAAC,GAAC,EAAE,EAACnC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACiC,CAAC,CAACP,MAAM,EAAC1B,CAAC,EAAE,EAAC;EAAC,MAAA,IAAIc,CAAC,GAAC,IAAI,CAACq8C,IAAI,CAACl7C,CAAC,CAACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC2J,QAAQ,EAAE,CAAC,CAAA;EAAC,MAAA,IAAI,CAAC+zC,UAAU,CAAC58C,CAAC,CAAC,CAAA;EAAC,MAAA,IAAIE,CAAC,GAACF,CAAC,CAACy8C,YAAY,CAAA;EAACv8C,MAAAA,CAAC,IAAEgQ,IAAI,CAACC,OAAO,CAACE,MAAM,CAACnP,CAAC,CAAC,EAACG,CAAC,CAACR,IAAI,CAAC,CAACb,CAAC,CAAC28C,GAAG,EAACz7C,CAAC,CAACD,CAAC,EAACf,CAAC,CAAC,CAAC,CAAC,IAAEmB,CAAC,CAACR,IAAI,CAAC,CAACb,CAAC,CAAC28C,GAAG,EAAC38C,CAAC,CAACrB,KAAK,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAO0C,CAAC,CAAA;KAAC,CAAA;EAAC0B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,EAAC,UAAU,EAACmO,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAAC6W,QAAQ,CAAC,CAAA;IAAC1I,IAAI,CAACgsC,GAAG,CAACW,UAAU,GAAC,UAAS57C,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAACD,CAAC,GAAC,IAAIgP,IAAI,CAACgsC,GAAG,CAAC,EAAE,EAACh7C,CAAC,CAAC,CAAA;EAAC,IAAA,KAAI,IAAIG,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,CAAC,CAACL,MAAM,EAACS,CAAC,EAAE,EAAC;QAAC,IAAInC,CAAC,GAAC+B,CAAC,CAACI,CAAC,CAAC,CAAC,CAAC,CAAC;UAACrB,CAAC,GAACmB,CAAC,CAACF,CAAC,CAACI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;EAACH,MAAAA,CAAC,CAAC8N,GAAG,CAAC9P,CAAC,EAACc,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOkB,CAAC,CAAA;KAAC,CAAA;EAC/c6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACgsC,GAAG,EAAC,YAAY,EAAChsC,IAAI,CAACgsC,GAAG,CAACW,UAAU,CAAC,CAAA;EAAC3sC,EAAAA,IAAI,CAACgsC,GAAG,CAACY,sBAAsB,GAAC,UAAS77C,CAAC,EAAC;MAAC,IAAI,CAAC87C,IAAI,GAAC,CAAC,CAAA;MAAC,IAAI,CAACZ,IAAI,GAACl7C,CAAC,CAAA;KAAC,CAAA;IAACiP,IAAI,CAACgsC,GAAG,CAACY,sBAAsB,CAAC/6C,SAAS,CAAC9C,IAAI,GAAC,YAAU;MAAC,OAAO,IAAI,CAAC89C,IAAI,GAAC,IAAI,CAACZ,IAAI,CAACv7C,MAAM,GAAC;QAACvB,IAAI,EAAC,CAAC,CAAC;QAACV,KAAK,EAAC,IAAI,CAACw9C,IAAI,CAAC,IAAI,CAACY,IAAI,EAAE,CAAA;EAAC,KAAC,GAAC;QAAC19C,IAAI,EAAC,CAAC,CAAC;EAACV,MAAAA,KAAK,EAAC,KAAK,CAAA;OAAE,CAAA;KAAC,CAAA;EAAC,EAAA,WAAW,IAAE,OAAOyB,MAAM,KAAG8P,IAAI,CAACgsC,GAAG,CAACY,sBAAsB,CAAC/6C,SAAS,CAAC3B,MAAM,CAACC,QAAQ,CAAC,GAAC,YAAU;EAAC,IAAA,OAAO,IAAI,CAAA;EAAA,GAAC,CAAC,CAAA;EAAC6P,EAAAA,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACi7C,SAAS,GAAC,YAAU;EAAC,IAAA,OAAO,IAAI,CAACN,WAAW,EAAE,CAAC97C,MAAM,CAAA;KAAC,CAAA;EACzdmC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,EAAC,WAAW,EAACmO,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACi7C,SAAS,CAAC,CAAA;EAAC9sC,EAAAA,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAAC8M,KAAK,GAAC,YAAU;EAAC,IAAA,IAAI,CAACwtC,IAAI,GAAC,EAAE,CAAA;EAAC,IAAA,IAAI,CAACC,QAAQ,GAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAACv5C,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,EAAC,OAAO,EAACmO,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAAC8M,KAAK,CAAC,CAAA;IAACqB,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACk7C,GAAG,GAAC,UAASh8C,CAAC,EAAC;EAACA,IAAAA,CAAC,GAACA,CAAC,CAAC4H,QAAQ,EAAE,CAAA;MAAC,IAAI3H,CAAC,GAAC,IAAI,CAACm7C,IAAI,CAAChzC,cAAc,CAACpI,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAACo7C,IAAI,CAACp7C,CAAC,CAAC,CAAA;EAAC,IAAA,IAAI,CAACq7C,QAAQ,GAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOp7C,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,EAAC,KAAK,EAACmO,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACk7C,GAAG,CAAC,CAAA;EACpa/sC,EAAAA,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACm7C,YAAY,GAAC,YAAU;MAAC,IAAIj8C,CAAC,GAAC,EAAE;EAACC,MAAAA,CAAC,GAAC,IAAI,CAACw7C,WAAW,EAAE,CAAA;MAACx7C,CAAC,CAAC8W,IAAI,EAAE,CAAA;EAAC,IAAA,KAAI,IAAI7W,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAC;QAAC,IAAIE,CAAC,GAAC,IAAI,CAACg7C,IAAI,CAACn7C,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAACF,MAAAA,CAAC,CAACJ,IAAI,CAAC,CAACQ,CAAC,CAACs7C,GAAG,EAACt7C,CAAC,CAAC1C,KAAK,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOsC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,EAAC,cAAc,EAACmO,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACm7C,YAAY,CAAC,CAAA;EAAChtC,EAAAA,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACo7C,OAAO,GAAC,YAAU;MAAC,IAAIl8C,CAAC,GAAC,EAAE;EAACC,MAAAA,CAAC,GAAC,IAAI,CAACw7C,WAAW,EAAE,CAAA;MAACx7C,CAAC,CAAC8W,IAAI,EAAE,CAAA;EAAC,IAAA,KAAI,IAAI7W,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAC;QAAC,IAAIE,CAAC,GAAC,IAAI,CAACg7C,IAAI,CAACn7C,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;EAACF,MAAAA,CAAC,CAACJ,IAAI,CAAC,CAACQ,CAAC,CAACs7C,GAAG,EAAC,IAAI,CAACC,UAAU,CAACv7C,CAAC,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;MAAC,OAAO,IAAI6O,IAAI,CAACgsC,GAAG,CAACY,sBAAsB,CAAC77C,CAAC,CAAC,CAAA;KAAC,CAAA;EAC7c8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,EAAC,SAAS,EAACmO,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACo7C,OAAO,CAAC,CAAA;EAACjtC,EAAAA,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACq7C,IAAI,GAAC,YAAU;MAAC,IAAIn8C,CAAC,GAAC,EAAE;EAACC,MAAAA,CAAC,GAAC,IAAI,CAACw7C,WAAW,EAAE,CAAA;MAACx7C,CAAC,CAAC8W,IAAI,EAAE,CAAA;EAAC,IAAA,KAAI,IAAI7W,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;EAACF,MAAAA,CAAC,CAACJ,IAAI,CAAC,IAAI,CAACw7C,IAAI,CAACn7C,CAAC,CAACC,CAAC,CAAC,CAAC,CAACw7C,GAAG,CAAC,CAAA;EAAC,KAAA;MAAA,OAAO,IAAIzsC,IAAI,CAACgsC,GAAG,CAACY,sBAAsB,CAAC77C,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,EAAC,MAAM,EAACmO,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACq7C,IAAI,CAAC,CAAA;EAACltC,EAAAA,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACs7C,MAAM,GAAC,YAAU;MAAC,IAAIp8C,CAAC,GAAC,EAAE;EAACC,MAAAA,CAAC,GAAC,IAAI,CAACw7C,WAAW,EAAE,CAAA;MAACx7C,CAAC,CAAC8W,IAAI,EAAE,CAAA;EAAC,IAAA,KAAI,IAAI7W,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;EAACF,MAAAA,CAAC,CAACJ,IAAI,CAAC,IAAI,CAAC+7C,UAAU,CAAC,IAAI,CAACP,IAAI,CAACn7C,CAAC,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;EAAC,KAAA;MAAA,OAAO,IAAI+O,IAAI,CAACgsC,GAAG,CAACY,sBAAsB,CAAC77C,CAAC,CAAC,CAAA;KAAC,CAAA;EAClgB8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,EAAC,QAAQ,EAACmO,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACs7C,MAAM,CAAC,CAAA;IAACntC,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAAC6L,OAAO,GAAC,UAAS3M,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAAC,IAAI,CAACu7C,WAAW,EAAE,CAAA;MAACv7C,CAAC,CAAC6W,IAAI,EAAE,CAAA;EAAC,IAAA,KAAI,IAAI3W,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,CAACP,MAAM,EAACS,CAAC,EAAE,EAAC;QAAC,IAAInC,CAAC,GAAC,IAAI,CAACm9C,IAAI,CAACl7C,CAAC,CAACE,CAAC,CAAC,CAAC,CAAA;EAACJ,MAAAA,CAAC,CAACP,IAAI,CAACQ,CAAC,EAAC,IAAI,CAAC07C,UAAU,CAAC19C,CAAC,CAAC,EAACA,CAAC,CAACy9C,GAAG,EAAC,IAAI,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EAAC55C,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,EAAC,SAAS,EAACmO,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAAC6L,OAAO,CAAC,CAAA;IAACsC,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACiN,GAAG,GAAC,UAAS/N,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,IAAI+O,IAAI,CAACgsC,GAAG,CAACM,MAAM,CAACv7C,CAAC,CAAC,CAAA;MAAC,IAAI,CAACm7C,UAAU,IAAEj7C,CAAC,CAACs7C,YAAY,GAACv7C,CAAC,EAACC,CAAC,CAACxC,KAAK,GAACuC,CAAC,CAACuW,OAAO,EAAE,IAAEtW,CAAC,CAACxC,KAAK,GAACuC,CAAC,CAAA;MAAC,IAAI,CAACm7C,IAAI,CAACp7C,CAAC,CAAC4H,QAAQ,EAAE,CAAC,GAAC1H,CAAC,CAAA;EAAC,IAAA,IAAI,CAACm7C,QAAQ,GAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAA;KAAC,CAAA;EACzfv5C,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,EAAC,KAAK,EAACmO,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACiN,GAAG,CAAC,CAAA;IAACkB,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAAC66C,UAAU,GAAC,UAAS37C,CAAC,EAAC;EAAC,IAAA,OAAO,IAAI,CAACm7C,UAAU,IAAEn7C,CAAC,CAACw7C,YAAY,KAAGx7C,CAAC,CAACw7C,YAAY,GAAC,IAAI,IAAI,CAACL,UAAU,CAACn7C,CAAC,CAACtC,KAAK,CAAC,CAAC,EAACsC,CAAC,CAACw7C,YAAY,IAAEx7C,CAAC,CAACtC,KAAK,CAAA;KAAC,CAAA;IAACuR,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACgD,GAAG,GAAC,UAAS9D,CAAC,EAAC;EAAC,IAAA,IAAGA,CAAC,GAAC,IAAI,CAACo7C,IAAI,CAACp7C,CAAC,CAAC4H,QAAQ,EAAE,CAAC,EAAC,OAAO,IAAI,CAAC+zC,UAAU,CAAC37C,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,EAAC,KAAK,EAACmO,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACgD,GAAG,CAAC,CAAA;IAACmL,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACu7C,GAAG,GAAC,UAASr8C,CAAC,EAAC;EAAC,IAAA,OAAOA,CAAC,CAAC4H,QAAQ,EAAE,IAAG,IAAI,CAACwzC,IAAI,CAAA;KAAC,CAAA;EAACt5C,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,EAAC,KAAK,EAACmO,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACu7C,GAAG,CAAC,CAAA;EACtgBptC,EAAAA,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACw7C,eAAe,GAAC,UAASt8C,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAACnC,CAAC,EAAC;EAAC,IAAA,IAAIc,CAAC,GAAC,IAAI,CAAC08C,WAAW,EAAE,CAAA;MAAC18C,CAAC,CAACgY,IAAI,EAAE,CAAA;EAAC,IAAA,KAAI,IAAI9X,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,CAACY,MAAM,EAACV,CAAC,EAAE,EAAC;QAAC,IAAIqW,CAAC,GAAC,IAAI,CAAC8lC,IAAI,CAACr8C,CAAC,CAACE,CAAC,CAAC,CAAC,CAAA;EAACgB,MAAAA,CAAC,CAAC01C,eAAe,CAAC31C,CAAC,CAAC,CAAA;QAACE,CAAC,CAACT,IAAI,CAACQ,CAAC,EAAC,CAAC,EAACqV,CAAC,CAAComC,GAAG,CAAC,CAAA;EAAC,MAAA,IAAI,CAACP,UAAU,GAAC/6C,CAAC,CAACX,IAAI,CAACQ,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC07C,UAAU,CAACrmC,CAAC,CAAC,EAACrX,CAAC,CAAC,GAACmC,CAAC,CAACX,IAAI,CAACQ,CAAC,EAAC,CAAC,EAACqV,CAAC,CAAC5X,KAAK,CAAC,CAAA;QAACuC,CAAC,CAAC21C,aAAa,EAAE,CAAA;EAAA,KAAA;KAAE,CAAA;EAAC9zC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,EAAC,iBAAiB,EAACmO,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAACw7C,eAAe,CAAC,CAAA;EACvWrtC,EAAAA,IAAI,CAACgsC,GAAG,CAACsB,iBAAiB,GAAC,UAASv8C,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAACnC,CAAC,EAACc,CAAC,EAACE,CAAC,EAAC;MAAC,OAAKgB,CAAC,CAAC2uC,SAAS,EAAE,IAAE,CAAC3uC,CAAC,CAAC0uC,UAAU,EAAE,GAAE;EAAC,MAAA,IAAIr5B,CAAC,GAACrV,CAAC,CAACuuC,cAAc,EAAE,CAAA;QAAC,CAAC,IAAEl5B,CAAC,GAACvW,CAAC,GAACmB,CAAC,CAACT,IAAI,CAACQ,CAAC,CAAC,GAAC,CAAC,IAAEqV,CAAC,KAAGtV,CAAC,CAACm7C,UAAU,IAAElsC,IAAI,CAACC,OAAO,CAACE,MAAM,CAACnR,CAAC,CAAC,EAACgB,CAAC,KAAGA,CAAC,GAAC,IAAIe,CAAC,CAACm7C,UAAU,EAAA,CAAC,EAAC/6C,CAAC,CAACX,IAAI,CAACQ,CAAC,EAAChB,CAAC,EAAChB,CAAC,CAAC,IAAEgB,CAAC,GAACmB,CAAC,CAACX,IAAI,CAACQ,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;MAACgP,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,KAAK,CAAC,IAAErQ,CAAC,CAAC,CAAA;MAACkQ,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,KAAK,CAAC,IAAEnQ,CAAC,CAAC,CAAA;EAACe,IAAAA,CAAC,CAAC+N,GAAG,CAAChP,CAAC,EAACE,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6C,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACgsC,GAAG,EAAC,mBAAmB,EAAChsC,IAAI,CAACgsC,GAAG,CAACsB,iBAAiB,CAAC,CAAA;EACzXttC,EAAAA,IAAI,CAACgsC,GAAG,CAACn6C,SAAS,CAAC26C,WAAW,GAAC,YAAU;EAAC,IAAA,IAAIz7C,CAAC,GAAC,IAAI,CAACo7C,IAAI;EAACn7C,MAAAA,CAAC,GAAC,EAAE;QAACC,CAAC,CAAA;MAAC,KAAIA,CAAC,IAAIF,CAAC,EAAA;EAACW,MAAAA,MAAM,CAACG,SAAS,CAACsH,cAAc,CAAC3I,IAAI,CAACO,CAAC,EAACE,CAAC,CAAC,IAAED,CAAC,CAACL,IAAI,CAACM,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOD,CAAC,CAAA;KAAC,CAAA;IAACgP,IAAI,CAACgsC,GAAG,CAACM,MAAM,GAAC,UAASv7C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,CAACy7C,GAAG,GAAC17C,CAAC,CAAA;MAAC,IAAI,CAACtC,KAAK,GAACuC,CAAC,CAAA;EAAC,IAAA,IAAI,CAACu7C,YAAY,GAAC,KAAK,CAAC,CAAA;KAAC,CAAA;EAACvsC,EAAAA,IAAI,CAACutC,kBAAkB,GAAC,UAASx8C,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAACnC,CAAC,EAAC;MAAC,IAAI,CAACw+C,UAAU,GAACz8C,CAAC,CAAA;MAAC,IAAI,CAAC08C,SAAS,GAACz8C,CAAC,CAAA;MAAC,IAAI,CAAC08C,IAAI,GAACz8C,CAAC,CAAA;MAAC,IAAI,CAAC08C,UAAU,GAACx8C,CAAC,CAAA;MAAC,IAAI,CAACy8C,UAAU,GAAC5+C,CAAC,CAAA;KAAC,CAAA;IAAC6D,IAAI,CAACgJ,YAAY,CAAC,yBAAyB,EAACmE,IAAI,CAACutC,kBAAkB,CAAC,CAAA;EAACvtC,EAAAA,IAAI,CAAC6tC,wBAAwB,GAAC,UAAS98C,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAACnC,CAAC,EAACc,CAAC,EAAC;MAAC,IAAI,CAACg+C,SAAS,GAAC/8C,CAAC,CAAA;MAAC,IAAI,CAACg9C,cAAc,GAAC/8C,CAAC,CAAA;MAAC,IAAI,CAACg9C,cAAc,GAAC/8C,CAAC,CAAA;MAAC,IAAI,CAACg9C,wBAAwB,GAAC98C,CAAC,CAAA;MAAC,IAAI,CAAC+8C,0BAA0B,GAACl/C,CAAC,CAAA;MAAC,IAAI,CAACm/C,QAAQ,GAACr+C,CAAC,CAAA;KAAC,CAAA;IAAC+C,IAAI,CAACgJ,YAAY,CAAC,+BAA+B,EAACmE,IAAI,CAAC6tC,wBAAwB,CAAC,CAAA;EACprB7tC,EAAAA,IAAI,CAACutC,kBAAkB,CAAC17C,SAAS,CAACu8C,aAAa,GAAC,YAAU;EAAC,IAAA,OAAM,CAAC,CAAC,IAAI,CAACV,IAAI,CAAA;KAAC,CAAA;EAAC76C,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACutC,kBAAkB,CAAC17C,SAAS,EAAC,eAAe,EAACmO,IAAI,CAACutC,kBAAkB,CAAC17C,SAAS,CAACu8C,aAAa,CAAC,CAAA;EAACpuC,EAAAA,IAAI,CAACquC,OAAO,GAAC,YAAU,EAAE,CAAA;IAACx7C,IAAI,CAACgJ,YAAY,CAAC,cAAc,EAACmE,IAAI,CAACquC,OAAO,CAAC,CAAA;EAACruC,EAAAA,IAAI,CAACquC,OAAO,CAACC,kBAAkB,GAAC,CAAC,CAAC,CAAA;EAACz7C,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,oBAAoB,EAACruC,IAAI,CAACquC,OAAO,CAACC,kBAAkB,CAAC,CAAA;IAACtuC,IAAI,CAACquC,OAAO,CAACE,oBAAoB,GAAC,CAAC17C,IAAI,CAACW,uBAAuB,CAAA;EACvcX,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,sBAAsB,EAACruC,IAAI,CAACquC,OAAO,CAACE,oBAAoB,CAAC,CAAA;EAACvuC,EAAAA,IAAI,CAACquC,OAAO,CAACG,kBAAkB,GAAC,CAAC,CAAC,CAAA;EAACxuC,EAAAA,IAAI,CAACquC,OAAO,CAACI,mBAAmB,GAAC,CAAC,CAAC,CAAA;EAACzuC,EAAAA,IAAI,CAACquC,OAAO,CAACK,+BAA+B,GAAC,CAAC,CAAC,CAAA;IAAC1uC,IAAI,CAACquC,OAAO,CAACM,oBAAoB,GAAC,UAAU,IAAE,OAAOvW,UAAU,CAAA;EAACp4B,EAAAA,IAAI,CAACquC,OAAO,CAACx8C,SAAS,CAAC+8C,gBAAgB,GAAC,YAAU;MAAC,OAAO,IAAI,CAACC,UAAU,CAAA;KAAC,CAAA;EAACh8C,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,CAACx8C,SAAS,EAAC,kBAAkB,EAACmO,IAAI,CAACquC,OAAO,CAACx8C,SAAS,CAAC+8C,gBAAgB,CAAC,CAAA;IAAC5uC,IAAI,CAACquC,OAAO,CAACS,SAAS,GAAC,UAAS/9C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAOA,CAAC,GAACD,CAAC,CAACg+C,iBAAiB,CAAA;KAAC,CAAA;EACtgB/uC,EAAAA,IAAI,CAACquC,OAAO,CAACW,kBAAkB,GAAC,YAAU,EAAE,CAAA;IAAChvC,IAAI,CAACquC,OAAO,CAACY,eAAe,GAAC,UAASl+C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAOA,CAAC,GAACD,CAAC,CAACg+C,iBAAiB,CAAA;KAAC,CAAA;EACrH/uC,EAAAA,IAAI,CAACquC,OAAO,CAACa,UAAU,GAAC,UAASn+C,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAACnC,CAAC,EAACc,CAAC,EAAC;MAACiB,CAAC,CAACo+C,SAAS,GAAC,IAAI,CAAA;MAACn+C,CAAC,KAAGA,CAAC,GAACC,CAAC,GAAC,CAACA,CAAC,CAAC,GAAC,EAAE,CAAC,CAAA;MAACF,CAAC,CAAC89C,UAAU,GAAC59C,CAAC,GAACC,MAAM,CAACD,CAAC,CAAC,GAAC,KAAK,CAAC,CAAA;MAACF,CAAC,CAACg+C,iBAAiB,GAAC,CAAC,KAAG99C,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,CAAA;MAACF,CAAC,CAAC+U,KAAK,GAAC9U,CAAC,CAAA;MAACgP,IAAI,CAACquC,OAAO,CAACe,4BAA4B,CAACr+C,CAAC,EAACI,CAAC,CAAC,CAAA;EAACJ,IAAAA,CAAC,CAACs+C,yBAAyB,GAAC,EAAE,CAAA;MAACrvC,IAAI,CAACquC,OAAO,CAACK,+BAA+B,KAAG39C,CAAC,CAACu+C,cAAc,GAACtgD,CAAC,CAAC,CAAA;EAAC,IAAA,IAAGA,CAAC,EAAC,KAAIgC,CAAC,GAAC,CAAC,EAACA,CAAC,GAAChC,CAAC,CAAC0B,MAAM,EAACM,CAAC,EAAE,EAAA;EAACC,MAAAA,CAAC,GAACjC,CAAC,CAACgC,CAAC,CAAC,EAACC,CAAC,GAACF,CAAC,CAACw+C,MAAM,IAAEt+C,CAAC,GAAC+O,IAAI,CAACquC,OAAO,CAACS,SAAS,CAAC/9C,CAAC,EAACE,CAAC,CAAC,EAACF,CAAC,CAAC+U,KAAK,CAAC7U,CAAC,CAAC,GAACF,CAAC,CAAC+U,KAAK,CAAC7U,CAAC,CAAC,IAAE+O,IAAI,CAACquC,OAAO,CAACmB,oBAAoB,KAAGxvC,IAAI,CAACquC,OAAO,CAACoB,8BAA8B,CAAC1+C,CAAC,CAAC,EAACA,CAAC,CAAC2+C,gBAAgB,CAACz+C,CAAC,CAAC,GACrfF,CAAC,CAAC2+C,gBAAgB,CAACz+C,CAAC,CAAC,IAAE+O,IAAI,CAACquC,OAAO,CAACmB,oBAAoB,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,IAAG1/C,CAAC,IAAEA,CAAC,CAACY,MAAM,EAAC,KAAIM,CAAC,GAAC,CAAC,EAACA,CAAC,GAAClB,CAAC,CAACY,MAAM,EAACM,CAAC,EAAE,EAAA;QAACgP,IAAI,CAACquC,OAAO,CAACsB,gBAAgB,CAAC5+C,CAAC,EAACjB,CAAC,CAACkB,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,YAAY,EAACruC,IAAI,CAACquC,OAAO,CAACa,UAAU,CAAC,CAAA;IAAClvC,IAAI,CAACquC,OAAO,CAACmB,oBAAoB,GAAC38C,IAAI,CAACO,KAAK,IAAE1B,MAAM,CAACgO,MAAM,GAAChO,MAAM,CAACgO,MAAM,CAAC,EAAE,CAAC,GAAC,EAAE,CAAA;EAACM,EAAAA,IAAI,CAACquC,OAAO,CAACuB,QAAQ,GAAC,UAAS7+C,CAAC,EAAC;EAAC,IAAA,OAAOiP,IAAI,CAACquC,OAAO,CAACI,mBAAmB,GAAC19C,CAAC,YAAYa,KAAK,GAACA,KAAK,CAACiH,OAAO,CAAC9H,CAAC,CAAC,CAAA;KAAC,CAAA;EAC7YiP,EAAAA,IAAI,CAACquC,OAAO,CAACwB,kBAAkB,GAAC,UAAS9+C,CAAC,EAAC;EAAC,IAAA,OAAO,IAAI,KAAGA,CAAC,IAAE,QAAQ,IAAA,OAAA,CAASA,CAAC,CAAA,IAAE,CAACiP,IAAI,CAACquC,OAAO,CAACuB,QAAQ,CAAC7+C,CAAC,CAAC,IAAE,EAAEiP,IAAI,CAACquC,OAAO,CAACM,oBAAoB,IAAE59C,CAAC,YAAYqnC,UAAU,CAAC,CAAA;KAAC,CAAA;IAACp4B,IAAI,CAACquC,OAAO,CAACe,4BAA4B,GAAC,UAASr+C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAACF,CAAC,CAAC+U,KAAK,CAACpV,MAAM;QAACS,CAAC,GAAC,CAAC,CAAC,CAAA;MAAC,IAAGF,CAAC,KAAGE,CAAC,GAACF,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,CAAC+U,KAAK,CAAC3U,CAAC,CAAC,EAAC6O,IAAI,CAACquC,OAAO,CAACwB,kBAAkB,CAAC5+C,CAAC,CAAC,CAAC,EAAC;EAACF,MAAAA,CAAC,CAACw+C,MAAM,GAACvvC,IAAI,CAACquC,OAAO,CAACY,eAAe,CAACl+C,CAAC,EAACI,CAAC,CAAC,CAAA;QAACJ,CAAC,CAAC2+C,gBAAgB,GAACz+C,CAAC,CAAA;EAAC,MAAA,OAAA;EAAM,KAAA;EAAC,IAAA,CAAC,CAAC,GAACD,CAAC,IAAED,CAAC,CAACw+C,MAAM,GAAC/8C,IAAI,CAACC,GAAG,CAACzB,CAAC,EAACgP,IAAI,CAACquC,OAAO,CAACY,eAAe,CAACl+C,CAAC,EAACI,CAAC,GAAC,CAAC,CAAC,CAAC,EAACJ,CAAC,CAAC2+C,gBAAgB,GAAC,IAAI,IAAE3+C,CAAC,CAACw+C,MAAM,GAACzgB,MAAM,CAACghB,SAAS,CAAA;KAAC,CAAA;EACrf9vC,EAAAA,IAAI,CAACquC,OAAO,CAACoB,8BAA8B,GAAC,UAAS1+C,CAAC,EAAC;EAAC,IAAA,IAAIC,CAAC,GAACgP,IAAI,CAACquC,OAAO,CAACS,SAAS,CAAC/9C,CAAC,EAACA,CAAC,CAACw+C,MAAM,CAAC,CAAA;EAACx+C,IAAAA,CAAC,CAAC+U,KAAK,CAAC9U,CAAC,CAAC,KAAGD,CAAC,CAAC2+C,gBAAgB,GAAC3+C,CAAC,CAAC+U,KAAK,CAAC9U,CAAC,CAAC,GAAC,EAAE,CAAC,CAAA;KAAC,CAAA;IAACgP,IAAI,CAACquC,OAAO,CAAC0B,YAAY,GAAC,UAASh/C,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIE,CAAC,GAAC,EAAE,EAACnC,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC+B,CAAC,CAACL,MAAM,EAAC1B,CAAC,EAAE,EAAA;EAACmC,MAAAA,CAAC,CAACnC,CAAC,CAAC,GAACgC,CAAC,CAACR,IAAI,CAACO,CAAC,CAAC/B,CAAC,CAAC,EAACiC,CAAC,EAACF,CAAC,CAAC/B,CAAC,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOmC,CAAC,CAAA;KAAC,CAAA;EAAC0B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,cAAc,EAACruC,IAAI,CAACquC,OAAO,CAAC0B,YAAY,CAAC,CAAA;EACxU/vC,EAAAA,IAAI,CAACquC,OAAO,CAAC2B,iBAAiB,GAAC,UAASj/C,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAACnC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIc,CAAC,IAAImB,CAAC,EAAC;EAAC,MAAA,IAAIjB,CAAC,GAACiB,CAAC,CAACnB,CAAC,CAAC;UAACuW,CAAC,GAAClV,CAAC,CAACX,IAAI,CAACO,CAAC,EAACf,CAAC,CAAC,CAAA;QAAC,IAAG,IAAI,IAAEqW,CAAC,EAAC;EAAC,QAAA,KAAI,IAAIC,CAAC,IAAItW,CAAC,CAACy9C,SAAS,EAAA;YAAC,IAAGz9C,CAAC,CAACy9C,SAAS,CAACt0C,cAAc,CAACmN,CAAC,CAAC,EAAC,MAAA;EAAM,SAAA;EAAAtV,QAAAA,CAAC,CAACsV,CAAC,CAAC,GAACtW,CAAC,CAAC29C,UAAU,GAAC39C,CAAC,CAAC49C,UAAU,GAAC5tC,IAAI,CAACquC,OAAO,CAAC0B,YAAY,CAAC1pC,CAAC,EAACrW,CAAC,CAAC29C,UAAU,EAAC3+C,CAAC,CAAC,GAACgB,CAAC,CAAC29C,UAAU,CAAC3+C,CAAC,EAACqX,CAAC,CAAC,GAACA,CAAC,CAAA;EAAA,OAAA;EAAC,KAAA;KAAE,CAAA;EAACxT,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,mBAAmB,EAACruC,IAAI,CAACquC,OAAO,CAAC2B,iBAAiB,CAAC,CAAA;EAC9VhwC,EAAAA,IAAI,CAACquC,OAAO,CAAC4B,yBAAyB,GAAC,UAASl/C,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;EAAC,IAAA,KAAI,IAAInC,CAAC,IAAIiC,CAAC,EAAC;EAAC,MAAA,IAAInB,CAAC,GAACmB,CAAC,CAACjC,CAAC,CAAC;UAACgB,CAAC,GAACF,CAAC,CAACg+C,SAAS,CAAA;QAAC,IAAG,CAACh+C,CAAC,CAACk+C,cAAc,EAAC,MAAMp6C,KAAK,CAAC,mFAAmF,CAAC,CAAA;QAAC,IAAIyS,CAAC,GAAClV,CAAC,CAACX,IAAI,CAACO,CAAC,EAACf,CAAC,CAAC,CAAA;QAAC,IAAG,IAAI,IAAEqW,CAAC,EAAC,IAAGrW,CAAC,CAACo+C,aAAa,EAAE,EAAA;EAAC,QAAA,IAAGt+C,CAAC,CAACm+C,wBAAwB,EAACn+C,CAAC,CAACk+C,cAAc,CAACx9C,IAAI,CAACQ,CAAC,EAAChB,CAAC,CAACw9C,UAAU,EAACnnC,CAAC,EAACvW,CAAC,CAACm+C,wBAAwB,CAAC,CAAC,KAAK,MAAMr6C,KAAK,CAAC,+HAA+H,CAAC,CAAA;EAAC,OAAA,MACxf9D,CAAC,CAACk+C,cAAc,CAACx9C,IAAI,CAACQ,CAAC,EAAChB,CAAC,CAACw9C,UAAU,EAACnnC,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EAACxT,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,2BAA2B,EAACruC,IAAI,CAACquC,OAAO,CAAC4B,yBAAyB,CAAC,CAAA;EACnJjwC,EAAAA,IAAI,CAACquC,OAAO,CAAC6B,mBAAmB,GAAC,UAASn/C,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAACnC,CAAC,EAAC;MAAC,IAAIc,CAAC,GAACmB,CAAC,CAACD,CAAC,CAACuuC,cAAc,EAAE,CAAC,CAAA;EAAC,IAAA,IAAGzvC,CAAC,EAAC;QAACmB,CAAC,GAACnB,CAAC,CAACg+C,SAAS,CAAA;QAAC,IAAG,CAACh+C,CAAC,CAACi+C,cAAc,EAAC,MAAMn6C,KAAK,CAAC,6EAA6E,CAAC,CAAA;EAAC,MAAA,IAAG3C,CAAC,CAACm9C,aAAa,EAAE,EAAC;EAAC,QAAA,IAAIp+C,CAAC,GAAC,IAAIiB,CAAC,CAACy8C,IAAI,EAAA,CAAA;EAAC59C,QAAAA,CAAC,CAACi+C,cAAc,CAACv9C,IAAI,CAACQ,CAAC,EAAChB,CAAC,EAACF,CAAC,CAACo+C,0BAA0B,CAAC,CAAA;SAAC,MAAKl+C,CAAC,GAACF,CAAC,CAACi+C,cAAc,CAACv9C,IAAI,CAACQ,CAAC,CAAC,CAAA;QAACC,CAAC,CAAC28C,UAAU,IAAE,CAAC99C,CAAC,CAACq+C,QAAQ,GAAC,CAACn9C,CAAC,GAACG,CAAC,CAACX,IAAI,CAACO,CAAC,EAACE,CAAC,CAAC,IAAED,CAAC,CAACL,IAAI,CAACX,CAAC,CAAC,GAAChB,CAAC,CAACwB,IAAI,CAACO,CAAC,EAACE,CAAC,EAAC,CAACjB,CAAC,CAAC,CAAC,GAAChB,CAAC,CAACwB,IAAI,CAACO,CAAC,EAACE,CAAC,EAACjB,CAAC,CAAC,CAAA;EAAA,KAAC,MAAKgB,CAAC,CAAC8uC,SAAS,EAAE,CAAA;KAAC,CAAA;EAACjtC,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,qBAAqB,EAACruC,IAAI,CAACquC,OAAO,CAAC6B,mBAAmB,CAAC,CAAA;IAClhBlwC,IAAI,CAACquC,OAAO,CAAC8B,QAAQ,GAAC,UAASp/C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAGA,CAAC,GAACD,CAAC,CAACw+C,MAAM,EAAC;QAACv+C,CAAC,GAACgP,IAAI,CAACquC,OAAO,CAACS,SAAS,CAAC/9C,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,MAAA,IAAIC,CAAC,GAACF,CAAC,CAAC+U,KAAK,CAAC9U,CAAC,CAAC,CAAA;EAAC,MAAA,OAAOC,CAAC,KAAG+O,IAAI,CAACquC,OAAO,CAACmB,oBAAoB,GAACz+C,CAAC,CAAC+U,KAAK,CAAC9U,CAAC,CAAC,GAAC,EAAE,GAACC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,IAAGF,CAAC,CAAC2+C,gBAAgB,EAAC,OAAOz+C,CAAC,GAACF,CAAC,CAAC2+C,gBAAgB,CAAC1+C,CAAC,CAAC,EAACC,CAAC,KAAG+O,IAAI,CAACquC,OAAO,CAACmB,oBAAoB,GAACz+C,CAAC,CAAC2+C,gBAAgB,CAAC1+C,CAAC,CAAC,GAAC,EAAE,GAACC,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,UAAU,EAACruC,IAAI,CAACquC,OAAO,CAAC8B,QAAQ,CAAC,CAAA;IAACnwC,IAAI,CAACquC,OAAO,CAAC+B,gBAAgB,GAAC,UAASr/C,CAAC,EAACC,CAAC,EAAC;MAAC,OAAOgP,IAAI,CAACquC,OAAO,CAAC8B,QAAQ,CAACp/C,CAAC,EAACC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,kBAAkB,EAACruC,IAAI,CAACquC,OAAO,CAAC+B,gBAAgB,CAAC,CAAA;IAC1fpwC,IAAI,CAACquC,OAAO,CAACgC,6BAA6B,GAAC,UAASt/C,CAAC,EAACC,CAAC,EAAC;MAACD,CAAC,GAACiP,IAAI,CAACquC,OAAO,CAAC8B,QAAQ,CAACp/C,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,IAAED,CAAC,GAACA,CAAC,GAAC,CAACA,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,+BAA+B,EAACruC,IAAI,CAACquC,OAAO,CAACgC,6BAA6B,CAAC,CAAA;IAACrwC,IAAI,CAACquC,OAAO,CAACiC,eAAe,GAAC,UAASv/C,CAAC,EAACC,CAAC,EAAC;MAACD,CAAC,GAACiP,IAAI,CAACquC,OAAO,CAAC8B,QAAQ,CAACp/C,CAAC,EAACC,CAAC,CAAC,CAAA;MAAC,OAAO,IAAI,IAAED,CAAC,GAACA,CAAC,GAAC,CAAC,CAACA,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,iBAAiB,EAACruC,IAAI,CAACquC,OAAO,CAACiC,eAAe,CAAC,CAAA;IACtYtwC,IAAI,CAACquC,OAAO,CAACkC,6BAA6B,GAAC,UAASx/C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC+O,IAAI,CAACquC,OAAO,CAAC+B,gBAAgB,CAACr/C,CAAC,EAACC,CAAC,CAAC,CAAA;MAACD,CAAC,CAACs+C,yBAAyB,KAAGt+C,CAAC,CAACs+C,yBAAyB,GAAC,EAAE,CAAC,CAAA;EAAC,IAAA,IAAG,CAACt+C,CAAC,CAACs+C,yBAAyB,CAACr+C,CAAC,CAAC,EAAC;EAAC,MAAA,KAAI,IAAIG,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,CAACP,MAAM,EAACS,CAAC,EAAE,EAAA;UAACF,CAAC,CAACE,CAAC,CAAC,GAAC,CAACF,CAAC,CAACE,CAAC,CAAC,CAAA;EAAC,OAAA;EAAAJ,MAAAA,CAAC,CAACs+C,yBAAyB,CAACr+C,CAAC,CAAC,GAAC,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOC,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,+BAA+B,EAACruC,IAAI,CAACquC,OAAO,CAACkC,6BAA6B,CAAC,CAAA;IAClYvwC,IAAI,CAACquC,OAAO,CAACmC,uBAAuB,GAAC,UAASz/C,CAAC,EAACC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC+O,IAAI,CAACquC,OAAO,CAAC+B,gBAAgB,CAACr/C,CAAC,EAACC,CAAC,CAAC,CAAA;MAACD,CAAC,CAACs+C,yBAAyB,KAAGt+C,CAAC,CAACs+C,yBAAyB,GAAC,EAAE,CAAC,CAAA;EAAC,IAAA,IAAG,CAACt+C,CAAC,CAACs+C,yBAAyB,CAACr+C,CAAC,CAAC,EAAC;EAAC,MAAA,KAAI,IAAIG,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,CAACP,MAAM,EAACS,CAAC,EAAE,EAAA;UAACF,CAAC,CAACE,CAAC,CAAC,GAAC,CAAC,CAACF,CAAC,CAACE,CAAC,CAAC,CAAA;EAAC,OAAA;EAAAJ,MAAAA,CAAC,CAACs+C,yBAAyB,CAACr+C,CAAC,CAAC,GAAC,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOC,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,yBAAyB,EAACruC,IAAI,CAACquC,OAAO,CAACmC,uBAAuB,CAAC,CAAA;EACjXxwC,EAAAA,IAAI,CAACquC,OAAO,CAACoC,UAAU,GAAC,UAAS1/C,CAAC,EAAC;MAAC,IAAG,IAAI,IAAEA,CAAC,IAAE,QAAQ,KAAG,OAAOA,CAAC,EAAC,OAAOA,CAAC,CAAA;MAAC,IAAGiP,IAAI,CAACquC,OAAO,CAACM,oBAAoB,IAAE59C,CAAC,YAAYqnC,UAAU,EAAC,OAAOvlC,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACmB,eAAe,CAAC9mC,CAAC,CAAC,CAAA;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,+BAA+B,GAACzN,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,YAAY,EAACruC,IAAI,CAACquC,OAAO,CAACoC,UAAU,CAAC,CAAA;EAC5UzwC,EAAAA,IAAI,CAACquC,OAAO,CAACqC,SAAS,GAAC,UAAS3/C,CAAC,EAAC;MAAC,IAAG,IAAI,IAAEA,CAAC,IAAEA,CAAC,YAAYqnC,UAAU,EAAC,OAAOrnC,CAAC,CAAA;EAAC,IAAA,IAAG,QAAQ,KAAG,OAAOA,CAAC,EAAC,OAAO8B,IAAI,CAACwW,KAAK,CAACqtB,MAAM,CAACyB,wBAAwB,CAACpnC,CAAC,CAAC,CAAA;EAACiP,IAAAA,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,+BAA+B,GAACzN,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,WAAW,EAACruC,IAAI,CAACquC,OAAO,CAACqC,SAAS,CAAC,CAAA;EAAC1wC,EAAAA,IAAI,CAACquC,OAAO,CAACsC,cAAc,GAAC,UAAS5/C,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACquC,OAAO,CAACuC,sBAAsB,CAAC7/C,CAAC,CAAC,CAAA;MAAC,OAAOA,CAAC,CAACL,MAAM,IAAE,QAAQ,KAAG,OAAOK,CAAC,CAAC,CAAC,CAAC,GAAC8B,IAAI,CAACiT,KAAK,CAAClI,GAAG,CAAC7M,CAAC,EAACiP,IAAI,CAACquC,OAAO,CAACoC,UAAU,CAAC,GAAC1/C,CAAC,CAAA;KAAC,CAAA;EACnd8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,gBAAgB,EAACruC,IAAI,CAACquC,OAAO,CAACsC,cAAc,CAAC,CAAA;EAAC3wC,EAAAA,IAAI,CAACquC,OAAO,CAACwC,aAAa,GAAC,UAAS9/C,CAAC,EAAC;EAACiP,IAAAA,IAAI,CAACquC,OAAO,CAACuC,sBAAsB,CAAC7/C,CAAC,CAAC,CAAA;MAAC,OAAM,CAACA,CAAC,CAACL,MAAM,IAAEK,CAAC,CAAC,CAAC,CAAC,YAAWqnC,UAAU,GAACrnC,CAAC,GAAC8B,IAAI,CAACiT,KAAK,CAAClI,GAAG,CAAC7M,CAAC,EAACiP,IAAI,CAACquC,OAAO,CAACqC,SAAS,CAAC,CAAA;KAAC,CAAA;EAAC79C,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,eAAe,EAACruC,IAAI,CAACquC,OAAO,CAACwC,aAAa,CAAC,CAAA;EAChU7wC,EAAAA,IAAI,CAACquC,OAAO,CAACuC,sBAAsB,GAAC,UAAS7/C,CAAC,EAAC;MAAC,IAAG8B,IAAI,CAACO,KAAK,IAAErC,CAAC,IAAE,CAAC,GAACA,CAAC,CAACL,MAAM,EAAC;QAAC,IAAIM,CAAC,GAAC6B,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAAC8B,IAAI,CAACiT,KAAK,CAACpI,OAAO,CAAC3M,CAAC,EAAC,UAASA,CAAC,EAAC;UAAC8B,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,IAAEC,CAAC,IAAEgP,IAAI,CAACC,OAAO,CAACK,IAAI,CAAC,sDAAsD,GAACzN,IAAI,CAAC6F,MAAM,CAAC3H,CAAC,CAAC,GAAC,YAAY,GAACC,CAAC,CAAC,CAAA;EAAA,OAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;IAACgP,IAAI,CAACquC,OAAO,CAACyC,mBAAmB,GAAC,UAAS//C,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAACF,CAAC,GAACiP,IAAI,CAACquC,OAAO,CAAC8B,QAAQ,CAACp/C,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,IAAED,CAAC,GAACE,CAAC,GAACF,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,qBAAqB,EAACruC,IAAI,CAACquC,OAAO,CAACyC,mBAAmB,CAAC,CAAA;IAChc9wC,IAAI,CAACquC,OAAO,CAAC0C,0BAA0B,GAAC,UAAShgD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAACF,CAAC,GAACiP,IAAI,CAACquC,OAAO,CAACiC,eAAe,CAACv/C,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,IAAED,CAAC,GAACE,CAAC,GAACF,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,4BAA4B,EAACruC,IAAI,CAACquC,OAAO,CAAC0C,0BAA0B,CAAC,CAAA;IAAC/wC,IAAI,CAACquC,OAAO,CAAC2C,gCAAgC,GAAC,UAASjgD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAACF,CAAC,GAACiP,IAAI,CAACquC,OAAO,CAACgC,6BAA6B,CAACt/C,CAAC,EAACC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,IAAED,CAAC,GAACE,CAAC,GAACF,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,kCAAkC,EAACruC,IAAI,CAACquC,OAAO,CAAC2C,gCAAgC,CAAC,CAAA;IAAChxC,IAAI,CAACquC,OAAO,CAAC4C,cAAc,GAACjxC,IAAI,CAACquC,OAAO,CAACyC,mBAAmB,CAAA;EAC1gBj+C,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,gBAAgB,EAACruC,IAAI,CAACquC,OAAO,CAAC4C,cAAc,CAAC,CAAA;EAACjxC,EAAAA,IAAI,CAACquC,OAAO,CAAC6C,WAAW,GAAC,UAASngD,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAACJ,CAAC,CAACo+C,SAAS,KAAGp+C,CAAC,CAACo+C,SAAS,GAAC,EAAE,CAAC,CAAA;EAAC,IAAA,IAAGn+C,CAAC,IAAID,CAAC,CAACo+C,SAAS,EAAC,OAAOp+C,CAAC,CAACo+C,SAAS,CAACn+C,CAAC,CAAC,CAAA;MAAC,IAAIhC,CAAC,GAACgR,IAAI,CAACquC,OAAO,CAAC8B,QAAQ,CAACp/C,CAAC,EAACC,CAAC,CAAC,CAAA;MAAC,IAAG,CAAChC,CAAC,EAAC;EAAC,MAAA,IAAGiC,CAAC,EAAC,OAAA;EAAOjC,MAAAA,CAAC,GAAC,EAAE,CAAA;QAACgR,IAAI,CAACquC,OAAO,CAAC8C,QAAQ,CAACpgD,CAAC,EAACC,CAAC,EAAChC,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAO+B,CAAC,CAACo+C,SAAS,CAACn+C,CAAC,CAAC,GAAC,IAAIgP,IAAI,CAACgsC,GAAG,CAACh9C,CAAC,EAACmC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC0B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,aAAa,EAACruC,IAAI,CAACquC,OAAO,CAAC6C,WAAW,CAAC,CAAA;IACzYlxC,IAAI,CAACquC,OAAO,CAAC8C,QAAQ,GAAC,UAASpgD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC+O,IAAI,CAACC,OAAO,CAACM,gBAAgB,CAACxP,CAAC,EAACiP,IAAI,CAACquC,OAAO,CAAC,CAAA;EAACr9C,IAAAA,CAAC,GAACD,CAAC,CAACw+C,MAAM,GAACx+C,CAAC,CAAC+U,KAAK,CAAC9F,IAAI,CAACquC,OAAO,CAACS,SAAS,CAAC/9C,CAAC,EAACC,CAAC,CAAC,CAAC,GAACC,CAAC,IAAE+O,IAAI,CAACquC,OAAO,CAACoB,8BAA8B,CAAC1+C,CAAC,CAAC,EAACA,CAAC,CAAC2+C,gBAAgB,CAAC1+C,CAAC,CAAC,GAACC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOF,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,UAAU,EAACruC,IAAI,CAACquC,OAAO,CAAC8C,QAAQ,CAAC,CAAA;IAACnxC,IAAI,CAACquC,OAAO,CAAC+C,iBAAiB,GAAC,UAASrgD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO+O,IAAI,CAACquC,OAAO,CAACgD,wBAAwB,CAACtgD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,mBAAmB,EAACruC,IAAI,CAACquC,OAAO,CAAC+C,iBAAiB,CAAC,CAAA;IACtdpxC,IAAI,CAACquC,OAAO,CAACiD,mBAAmB,GAAC,UAASvgD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO+O,IAAI,CAACquC,OAAO,CAACgD,wBAAwB,CAACtgD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,qBAAqB,EAACruC,IAAI,CAACquC,OAAO,CAACiD,mBAAmB,CAAC,CAAA;IAACtxC,IAAI,CAACquC,OAAO,CAACkD,qBAAqB,GAAC,UAASxgD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO+O,IAAI,CAACquC,OAAO,CAACgD,wBAAwB,CAACtgD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,uBAAuB,EAACruC,IAAI,CAACquC,OAAO,CAACkD,qBAAqB,CAAC,CAAA;IAACvxC,IAAI,CAACquC,OAAO,CAACmD,oBAAoB,GAAC,UAASzgD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO+O,IAAI,CAACquC,OAAO,CAACgD,wBAAwB,CAACtgD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC,EAAE,CAAC,CAAA;KAAC,CAAA;EAClf4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,sBAAsB,EAACruC,IAAI,CAACquC,OAAO,CAACmD,oBAAoB,CAAC,CAAA;IAACxxC,IAAI,CAACquC,OAAO,CAACoD,mBAAmB,GAAC,UAAS1gD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO+O,IAAI,CAACquC,OAAO,CAACgD,wBAAwB,CAACtgD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC,EAAE,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,qBAAqB,EAACruC,IAAI,CAACquC,OAAO,CAACoD,mBAAmB,CAAC,CAAA;IAACzxC,IAAI,CAACquC,OAAO,CAACqD,kBAAkB,GAAC,UAAS3gD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO+O,IAAI,CAACquC,OAAO,CAACgD,wBAAwB,CAACtgD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,oBAAoB,EAACruC,IAAI,CAACquC,OAAO,CAACqD,kBAAkB,CAAC,CAAA;IAC1d1xC,IAAI,CAACquC,OAAO,CAACsD,uBAAuB,GAAC,UAAS5gD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAO+O,IAAI,CAACquC,OAAO,CAACgD,wBAAwB,CAACtgD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC,GAAG,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,yBAAyB,EAACruC,IAAI,CAACquC,OAAO,CAACsD,uBAAuB,CAAC,CAAA;EAAC3xC,EAAAA,IAAI,CAACquC,OAAO,CAACgD,wBAAwB,GAAC,UAAStgD,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC6O,IAAI,CAACC,OAAO,CAACM,gBAAgB,CAACxP,CAAC,EAACiP,IAAI,CAACquC,OAAO,CAAC,CAAA;MAACp9C,CAAC,KAAGE,CAAC,GAAC6O,IAAI,CAACquC,OAAO,CAAC8C,QAAQ,CAACpgD,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,GAACD,CAAC,GAACD,CAAC,CAACw+C,MAAM,GAACx+C,CAAC,CAAC+U,KAAK,CAAC9F,IAAI,CAACquC,OAAO,CAACS,SAAS,CAAC/9C,CAAC,EAACC,CAAC,CAAC,CAAC,GAAC,IAAI,IAAEgP,IAAI,CAACquC,OAAO,CAACoB,8BAA8B,CAAC1+C,CAAC,CAAC,EAAC,OAAOA,CAAC,CAAC2+C,gBAAgB,CAAC1+C,CAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOD,CAAC,CAAA;KAAC,CAAA;EACpeiP,EAAAA,IAAI,CAACquC,OAAO,CAACuD,kBAAkB,GAAC,UAAS7gD,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC6O,IAAI,CAACC,OAAO,CAACM,gBAAgB,CAACxP,CAAC,EAACiP,IAAI,CAACquC,OAAO,CAAC,CAAA;MAACr9C,CAAC,GAACgP,IAAI,CAACquC,OAAO,CAAC+B,gBAAgB,CAACr/C,CAAC,EAACC,CAAC,CAAC,CAAA;MAAC,KAAK,CAAC,IAAEG,CAAC,GAACH,CAAC,CAAC4G,MAAM,CAACzG,CAAC,EAAC,CAAC,EAACF,CAAC,CAAC,GAACD,CAAC,CAACL,IAAI,CAACM,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOF,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,oBAAoB,EAACruC,IAAI,CAACquC,OAAO,CAACuD,kBAAkB,CAAC,CAAA;EACzQ5xC,EAAAA,IAAI,CAACquC,OAAO,CAACwD,aAAa,GAAC,UAAS9gD,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC6O,IAAI,CAACC,OAAO,CAACM,gBAAgB,CAACxP,CAAC,EAACiP,IAAI,CAACquC,OAAO,CAAC,CAAA;MAAC,CAACp9C,CAAC,GAAC+O,IAAI,CAACquC,OAAO,CAACsB,gBAAgB,CAAC5+C,CAAC,EAACE,CAAC,CAAC,KAAGA,CAAC,KAAGD,CAAC,IAAE,KAAK,CAAC,KAAGG,CAAC,KAAGJ,CAAC,CAACo+C,SAAS,IAAEl+C,CAAC,IAAIF,CAAC,CAACo+C,SAAS,KAAGp+C,CAAC,CAACo+C,SAAS,CAACl+C,CAAC,CAAC,GAAC,KAAK,CAAC,CAAC,EAAC+O,IAAI,CAACquC,OAAO,CAAC8C,QAAQ,CAACpgD,CAAC,EAACE,CAAC,EAAC,KAAK,CAAC,CAAC,CAAC,CAAA;MAAC,OAAO+O,IAAI,CAACquC,OAAO,CAAC8C,QAAQ,CAACpgD,CAAC,EAACC,CAAC,EAACG,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC0B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,eAAe,EAACruC,IAAI,CAACquC,OAAO,CAACwD,aAAa,CAAC,CAAA;IAClW7xC,IAAI,CAACquC,OAAO,CAACsB,gBAAgB,GAAC,UAAS5+C,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,KAAI,IAAIC,CAAC,EAACE,CAAC,EAACnC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACgC,CAAC,CAACN,MAAM,EAAC1B,CAAC,EAAE,EAAC;EAAC,MAAA,IAAIc,CAAC,GAACkB,CAAC,CAAChC,CAAC,CAAC;UAACgB,CAAC,GAACgQ,IAAI,CAACquC,OAAO,CAAC8B,QAAQ,CAACp/C,CAAC,EAACjB,CAAC,CAAC,CAAA;QAAC,IAAI,IAAEE,CAAC,KAAGiB,CAAC,GAACnB,CAAC,EAACqB,CAAC,GAACnB,CAAC,EAACgQ,IAAI,CAACquC,OAAO,CAAC8C,QAAQ,CAACpgD,CAAC,EAACjB,CAAC,EAAC,KAAK,CAAC,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAOmB,CAAC,IAAE+O,IAAI,CAACquC,OAAO,CAAC8C,QAAQ,CAACpgD,CAAC,EAACE,CAAC,EAACE,CAAC,CAAC,EAACF,CAAC,IAAE,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,kBAAkB,EAACruC,IAAI,CAACquC,OAAO,CAACsB,gBAAgB,CAAC,CAAA;EAAC3vC,EAAAA,IAAI,CAACquC,OAAO,CAACyD,eAAe,GAAC,UAAS/gD,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAACJ,CAAC,CAACo+C,SAAS,KAAGp+C,CAAC,CAACo+C,SAAS,GAAC,EAAE,CAAC,CAAA;EAAC,IAAA,IAAG,CAACp+C,CAAC,CAACo+C,SAAS,CAACl+C,CAAC,CAAC,EAAC;QAAC,IAAIjC,CAAC,GAACgR,IAAI,CAACquC,OAAO,CAAC8B,QAAQ,CAACp/C,CAAC,EAACE,CAAC,CAAC,CAAA;EAAC,MAAA,IAAGE,CAAC,IAAEnC,CAAC,EAAC+B,CAAC,CAACo+C,SAAS,CAACl+C,CAAC,CAAC,GAAC,IAAID,CAAC,CAAChC,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,OAAO+B,CAAC,CAACo+C,SAAS,CAACl+C,CAAC,CAAC,CAAA;KAAC,CAAA;EACje4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,iBAAiB,EAACruC,IAAI,CAACquC,OAAO,CAACyD,eAAe,CAAC,CAAA;IAAC9xC,IAAI,CAACquC,OAAO,CAAC0D,uBAAuB,GAAC,UAAShhD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC+O,IAAI,CAACquC,OAAO,CAAC2D,kBAAkB,CAACjhD,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,CAAA;EAACD,IAAAA,CAAC,GAACD,CAAC,CAACo+C,SAAS,CAACl+C,CAAC,CAAC,CAAA;EAACD,IAAAA,CAAC,IAAEgP,IAAI,CAACquC,OAAO,CAACmB,oBAAoB,KAAGx+C,CAAC,GAACD,CAAC,CAACo+C,SAAS,CAACl+C,CAAC,CAAC,GAAC,EAAE,CAAC,CAAA;EAAC,IAAA,OAAOD,CAAC,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,yBAAyB,EAACruC,IAAI,CAACquC,OAAO,CAAC0D,uBAAuB,CAAC,CAAA;IACpW/xC,IAAI,CAACquC,OAAO,CAAC2D,kBAAkB,GAAC,UAASjhD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAACF,CAAC,CAACo+C,SAAS,KAAGp+C,CAAC,CAACo+C,SAAS,GAAC,EAAE,CAAC,CAAA;EAAC,IAAA,IAAG,CAACp+C,CAAC,CAACo+C,SAAS,CAACl+C,CAAC,CAAC,EAAC;EAAC,MAAA,KAAI,IAAIE,CAAC,GAAC6O,IAAI,CAACquC,OAAO,CAAC+B,gBAAgB,CAACr/C,CAAC,EAACE,CAAC,CAAC,EAACjC,CAAC,GAAC,EAAE,EAACc,CAAC,GAAC,CAAC,EAACA,CAAC,GAACqB,CAAC,CAACT,MAAM,EAACZ,CAAC,EAAE,EAAA;UAACd,CAAC,CAACc,CAAC,CAAC,GAAC,IAAIkB,CAAC,CAACG,CAAC,CAACrB,CAAC,CAAC,CAAC,CAAA;EAAC,OAAA;EAAAiB,MAAAA,CAAC,CAACo+C,SAAS,CAACl+C,CAAC,CAAC,GAACjC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;IAACgR,IAAI,CAACquC,OAAO,CAAC4D,eAAe,GAAC,UAASlhD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC+O,IAAI,CAACC,OAAO,CAACM,gBAAgB,CAACxP,CAAC,EAACiP,IAAI,CAACquC,OAAO,CAAC,CAAA;MAACt9C,CAAC,CAACo+C,SAAS,KAAGp+C,CAAC,CAACo+C,SAAS,GAAC,EAAE,CAAC,CAAA;MAAC,IAAIh+C,CAAC,GAACF,CAAC,GAACA,CAAC,CAACsW,OAAO,EAAE,GAACtW,CAAC,CAAA;EAACF,IAAAA,CAAC,CAACo+C,SAAS,CAACn+C,CAAC,CAAC,GAACC,CAAC,CAAA;MAAC,OAAO+O,IAAI,CAACquC,OAAO,CAAC8C,QAAQ,CAACpgD,CAAC,EAACC,CAAC,EAACG,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC0B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,iBAAiB,EAACruC,IAAI,CAACquC,OAAO,CAAC4D,eAAe,CAAC,CAAA;EAChejyC,EAAAA,IAAI,CAACquC,OAAO,CAAC6D,oBAAoB,GAAC,UAASnhD,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;MAAC6O,IAAI,CAACC,OAAO,CAACM,gBAAgB,CAACxP,CAAC,EAACiP,IAAI,CAACquC,OAAO,CAAC,CAAA;MAACt9C,CAAC,CAACo+C,SAAS,KAAGp+C,CAAC,CAACo+C,SAAS,GAAC,EAAE,CAAC,CAAA;MAAC,IAAIngD,CAAC,GAACmC,CAAC,GAACA,CAAC,CAACoW,OAAO,EAAE,GAACpW,CAAC,CAAA;EAACJ,IAAAA,CAAC,CAACo+C,SAAS,CAACn+C,CAAC,CAAC,GAACG,CAAC,CAAA;EAAC,IAAA,OAAO6O,IAAI,CAACquC,OAAO,CAACwD,aAAa,CAAC9gD,CAAC,EAACC,CAAC,EAACC,CAAC,EAACjC,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC6D,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,sBAAsB,EAACruC,IAAI,CAACquC,OAAO,CAAC6D,oBAAoB,CAAC,CAAA;IAC7SlyC,IAAI,CAACquC,OAAO,CAAC8D,uBAAuB,GAAC,UAASphD,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;MAAC+O,IAAI,CAACC,OAAO,CAACM,gBAAgB,CAACxP,CAAC,EAACiP,IAAI,CAACquC,OAAO,CAAC,CAAA;MAACt9C,CAAC,CAACo+C,SAAS,KAAGp+C,CAAC,CAACo+C,SAAS,GAAC,EAAE,CAAC,CAAA;MAACl+C,CAAC,GAACA,CAAC,IAAE,EAAE,CAAA;EAAC,IAAA,KAAI,IAAIE,CAAC,GAAC,EAAE,EAACnC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACiC,CAAC,CAACP,MAAM,EAAC1B,CAAC,EAAE,EAAA;QAACmC,CAAC,CAACnC,CAAC,CAAC,GAACiC,CAAC,CAACjC,CAAC,CAAC,CAACuY,OAAO,EAAE,CAAA;EAAC,KAAA;EAAAxW,IAAAA,CAAC,CAACo+C,SAAS,CAACn+C,CAAC,CAAC,GAACC,CAAC,CAAA;MAAC,OAAO+O,IAAI,CAACquC,OAAO,CAAC8C,QAAQ,CAACpgD,CAAC,EAACC,CAAC,EAACG,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC0B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,yBAAyB,EAACruC,IAAI,CAACquC,OAAO,CAAC8D,uBAAuB,CAAC,CAAA;EACnVnyC,EAAAA,IAAI,CAACquC,OAAO,CAAC+D,yBAAyB,GAAC,UAASrhD,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAACnC,CAAC,EAAC;MAACgR,IAAI,CAACquC,OAAO,CAAC2D,kBAAkB,CAACjhD,CAAC,EAACI,CAAC,EAACH,CAAC,CAAC,CAAA;EAAC,IAAA,IAAIlB,CAAC,GAACiB,CAAC,CAACo+C,SAAS,CAACn+C,CAAC,CAAC,CAAA;MAAClB,CAAC,KAAGA,CAAC,GAACiB,CAAC,CAACo+C,SAAS,CAACn+C,CAAC,CAAC,GAAC,EAAE,CAAC,CAAA;EAACC,IAAAA,CAAC,GAACA,CAAC,GAACA,CAAC,GAAC,IAAIE,CAAC,EAAA,CAAA;MAACJ,CAAC,GAACiP,IAAI,CAACquC,OAAO,CAAC+B,gBAAgB,CAACr/C,CAAC,EAACC,CAAC,CAAC,CAAA;MAAC,KAAK,CAAC,IAAEhC,CAAC,IAAEc,CAAC,CAAC8H,MAAM,CAAC5I,CAAC,EAAC,CAAC,EAACiC,CAAC,CAAC,EAACF,CAAC,CAAC6G,MAAM,CAAC5I,CAAC,EAAC,CAAC,EAACiC,CAAC,CAACsW,OAAO,EAAE,CAAC,KAAGzX,CAAC,CAACa,IAAI,CAACM,CAAC,CAAC,EAACF,CAAC,CAACJ,IAAI,CAACM,CAAC,CAACsW,OAAO,EAAE,CAAC,CAAC,CAAA;EAAC,IAAA,OAAOtW,CAAC,CAAA;KAAC,CAAA;EAAC4B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,2BAA2B,EAACruC,IAAI,CAACquC,OAAO,CAAC+D,yBAAyB,CAAC,CAAA;EACrYpyC,EAAAA,IAAI,CAACquC,OAAO,CAACgE,KAAK,GAAC,UAASthD,CAAC,EAACC,CAAC,EAACC,CAAC,EAACE,CAAC,EAAC;EAAC,IAAA,KAAI,IAAInC,CAAC,GAAC,EAAE,EAACc,CAAC,GAAC,CAAC,EAACA,CAAC,GAACiB,CAAC,CAACL,MAAM,EAACZ,CAAC,EAAE,EAAA;EAACd,MAAAA,CAAC,CAACgC,CAAC,CAACR,IAAI,CAACO,CAAC,CAACjB,CAAC,CAAC,CAAC,CAAC,GAACmB,CAAC,GAACA,CAAC,CAACT,IAAI,CAACO,CAAC,CAACjB,CAAC,CAAC,EAACqB,CAAC,EAACJ,CAAC,CAACjB,CAAC,CAAC,CAAC,GAACiB,CAAC,CAACjB,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOd,CAAC,CAAA;KAAC,CAAA;EAAC6D,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,OAAO,EAACruC,IAAI,CAACquC,OAAO,CAACgE,KAAK,CAAC,CAAA;EAACryC,EAAAA,IAAI,CAACquC,OAAO,CAACx8C,SAAS,CAACygD,cAAc,GAAC,YAAU;MAAC,IAAG,IAAI,CAACnD,SAAS,EAAC,KAAI,IAAIp+C,CAAC,IAAI,IAAI,CAACo+C,SAAS,EAAC;EAAC,MAAA,IAAIn+C,CAAC,GAAC,IAAI,CAACm+C,SAAS,CAACp+C,CAAC,CAAC,CAAA;QAAC,IAAGa,KAAK,CAACiH,OAAO,CAAC7H,CAAC,CAAC,EAAC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,CAAC,CAACN,MAAM,EAACO,CAAC,EAAE,EAAA;UAACD,CAAC,CAACC,CAAC,CAAC,IAAED,CAAC,CAACC,CAAC,CAAC,CAACsW,OAAO,EAAE,CAAA;EAAC,OAAA,MAAKvW,CAAC,IAAEA,CAAC,CAACuW,OAAO,EAAE,CAAA;EAAA,KAAA;KAAE,CAAA;EAACvH,EAAAA,IAAI,CAACquC,OAAO,CAACx8C,SAAS,CAAC0V,OAAO,GAAC,YAAU;MAAC,IAAI,CAAC+qC,cAAc,EAAE,CAAA;MAAC,OAAO,IAAI,CAACxsC,KAAK,CAAA;KAAC,CAAA;EAC3djT,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,CAACx8C,SAAS,EAAC,SAAS,EAACmO,IAAI,CAACquC,OAAO,CAACx8C,SAAS,CAAC0V,OAAO,CAAC,CAAA;EAACvH,EAAAA,IAAI,CAACquC,OAAO,CAACG,kBAAkB,KAAGxuC,IAAI,CAACquC,OAAO,CAACx8C,SAAS,CAAC8G,QAAQ,GAAC,YAAU;MAAC,IAAI,CAAC25C,cAAc,EAAE,CAAA;EAAC,IAAA,OAAO,IAAI,CAACxsC,KAAK,CAACnN,QAAQ,EAAE,CAAA;EAAA,GAAC,CAAC,CAAA;IACtNqH,IAAI,CAACquC,OAAO,CAACx8C,SAAS,CAAC0gD,YAAY,GAAC,UAASxhD,CAAC,EAAC;MAAC,IAAG,IAAI,CAAC2+C,gBAAgB,EAAC;QAAC,IAAI,CAACP,SAAS,KAAG,IAAI,CAACA,SAAS,GAAC,EAAE,CAAC,CAAA;EAAC,MAAA,IAAIn+C,CAAC,GAACD,CAAC,CAACy8C,UAAU,CAAA;QAAC,IAAGz8C,CAAC,CAAC68C,UAAU,EAAC;EAAC,QAAA,IAAG78C,CAAC,CAACq9C,aAAa,EAAE,EAAC,OAAO,IAAI,CAACe,SAAS,CAACn+C,CAAC,CAAC,KAAG,IAAI,CAACm+C,SAAS,CAACn+C,CAAC,CAAC,GAAC6B,IAAI,CAACiT,KAAK,CAAClI,GAAG,CAAC,IAAI,CAAC8xC,gBAAgB,CAAC1+C,CAAC,CAAC,IAAE,EAAE,EAAC,UAASA,CAAC,EAAC;EAAC,UAAA,OAAO,IAAID,CAAC,CAAC28C,IAAI,CAAC18C,CAAC,CAAC,CAAA;WAAC,CAAC,CAAC,EAAC,IAAI,CAACm+C,SAAS,CAACn+C,CAAC,CAAC,CAAA;SAAC,MAAK,IAAGD,CAAC,CAACq9C,aAAa,EAAE,EAAC,OAAM,CAAC,IAAI,CAACe,SAAS,CAACn+C,CAAC,CAAC,IAAE,IAAI,CAAC0+C,gBAAgB,CAAC1+C,CAAC,CAAC,KAAG,IAAI,CAACm+C,SAAS,CAACn+C,CAAC,CAAC,GAAC,IAAID,CAAC,CAAC28C,IAAI,CAAC,IAAI,CAACgC,gBAAgB,CAAC1+C,CAAC,CAAC,CAAC,CAAC,EAAC,IAAI,CAACm+C,SAAS,CAACn+C,CAAC,CAAC,CAAA;EAAC,MAAA,OAAO,IAAI,CAAC0+C,gBAAgB,CAAC1+C,CAAC,CAAC,CAAA;EAAA,KAAA;KAAE,CAAA;EAChf6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,CAACx8C,SAAS,EAAC,cAAc,EAACmO,IAAI,CAACquC,OAAO,CAACx8C,SAAS,CAAC0gD,YAAY,CAAC,CAAA;IAC9FvyC,IAAI,CAACquC,OAAO,CAACx8C,SAAS,CAAC2gD,YAAY,GAAC,UAASzhD,CAAC,EAACC,CAAC,EAAC;MAAC,IAAI,CAACm+C,SAAS,KAAG,IAAI,CAACA,SAAS,GAAC,EAAE,CAAC,CAAA;EAACnvC,IAAAA,IAAI,CAACquC,OAAO,CAACoB,8BAA8B,CAAC,IAAI,CAAC,CAAA;EAAC,IAAA,IAAIx+C,CAAC,GAACF,CAAC,CAACy8C,UAAU,CAAA;EAACz8C,IAAAA,CAAC,CAAC68C,UAAU,IAAE58C,CAAC,GAACA,CAAC,IAAE,EAAE,EAACD,CAAC,CAACq9C,aAAa,EAAE,IAAE,IAAI,CAACe,SAAS,CAACl+C,CAAC,CAAC,GAACD,CAAC,EAAC,IAAI,CAAC0+C,gBAAgB,CAACz+C,CAAC,CAAC,GAAC4B,IAAI,CAACiT,KAAK,CAAClI,GAAG,CAAC5M,CAAC,EAAC,UAASD,CAAC,EAAC;QAAC,OAAOA,CAAC,CAACwW,OAAO,EAAE,CAAA;OAAC,CAAC,IAAE,IAAI,CAACmoC,gBAAgB,CAACz+C,CAAC,CAAC,GAACD,CAAC,IAAED,CAAC,CAACq9C,aAAa,EAAE,IAAE,IAAI,CAACe,SAAS,CAACl+C,CAAC,CAAC,GAACD,CAAC,EAAC,IAAI,CAAC0+C,gBAAgB,CAACz+C,CAAC,CAAC,GAACD,CAAC,GAACA,CAAC,CAACuW,OAAO,EAAE,GAACvW,CAAC,IAAE,IAAI,CAAC0+C,gBAAgB,CAACz+C,CAAC,CAAC,GAACD,CAAC,CAAA;EAAC,IAAA,OAAO,IAAI,CAAA;KAAC,CAAA;EAAC6B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,CAACx8C,SAAS,EAAC,cAAc,EAACmO,IAAI,CAACquC,OAAO,CAACx8C,SAAS,CAAC2gD,YAAY,CAAC,CAAA;IACvhBxyC,IAAI,CAACquC,OAAO,CAACoE,UAAU,GAAC,UAAS1hD,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAG,EAAED,CAAC,YAAYC,CAAC,CAACiL,WAAW,CAAC,EAAC,MAAMrI,KAAK,CAAC,gCAAgC,CAAC,CAAA;EAAC,IAAA,IAAI3C,CAAC,GAACF,CAAC,CAACwW,OAAO,EAAE,CAAA;EAACvW,IAAAA,CAAC,GAACA,CAAC,CAACuW,OAAO,EAAE,CAAA;MAAC,IAAIpW,CAAC,GAAC,EAAE;EAACnC,MAAAA,CAAC,GAAC,CAAC;EAACc,MAAAA,CAAC,GAACmB,CAAC,CAACP,MAAM,GAACM,CAAC,CAACN,MAAM,GAACO,CAAC,CAACP,MAAM,GAACM,CAAC,CAACN,MAAM,CAAA;EAACK,IAAAA,CAAC,CAAC69C,gBAAgB,EAAE,KAAGz9C,CAAC,CAAC,CAAC,CAAC,GAACJ,CAAC,CAAC69C,gBAAgB,EAAE,EAAC5/C,CAAC,GAAC,CAAC,CAAC,CAAA;EAAC,IAAA,OAAKA,CAAC,GAACc,CAAC,EAACd,CAAC,EAAE,EAAA;QAACgR,IAAI,CAACquC,OAAO,CAACqE,aAAa,CAACzhD,CAAC,CAACjC,CAAC,CAAC,EAACgC,CAAC,CAAChC,CAAC,CAAC,CAAC,KAAGmC,CAAC,CAACnC,CAAC,CAAC,GAACgC,CAAC,CAAChC,CAAC,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAO,IAAI+B,CAAC,CAACkL,WAAW,CAAC9K,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC0B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,YAAY,EAACruC,IAAI,CAACquC,OAAO,CAACoE,UAAU,CAAC,CAAA;IACjazyC,IAAI,CAACquC,OAAO,CAACpvC,MAAM,GAAC,UAASlO,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,OAAOD,CAAC,IAAEC,CAAC,IAAE,EAAE,CAACD,CAAC,IAAE,CAACC,CAAC,CAAC,IAAED,CAAC,YAAYC,CAAC,CAACiL,WAAW,IAAE+D,IAAI,CAACquC,OAAO,CAACqE,aAAa,CAAC3hD,CAAC,CAACwW,OAAO,EAAE,EAACvW,CAAC,CAACuW,OAAO,EAAE,CAAC,CAAA;KAAC,CAAA;EAAC1U,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,QAAQ,EAACruC,IAAI,CAACquC,OAAO,CAACpvC,MAAM,CAAC,CAAA;IAACe,IAAI,CAACquC,OAAO,CAACsE,iBAAiB,GAAC,UAAS5hD,CAAC,EAACC,CAAC,EAAC;EAACD,IAAAA,CAAC,GAACA,CAAC,IAAE,EAAE,CAAA;EAACC,IAAAA,CAAC,GAACA,CAAC,IAAE,EAAE,CAAA;MAAC,IAAIC,CAAC,GAAC,EAAE;QAACE,CAAC,CAAA;MAAC,KAAIA,CAAC,IAAIJ,CAAC,EAAA;EAACE,MAAAA,CAAC,CAACE,CAAC,CAAC,GAAC,CAAC,CAAA;EAAC,KAAA;MAAA,KAAIA,CAAC,IAAIH,CAAC,EAAA;EAACC,MAAAA,CAAC,CAACE,CAAC,CAAC,GAAC,CAAC,CAAA;EAAC,KAAA;MAAA,KAAIA,CAAC,IAAIF,CAAC,EAAA;QAAC,IAAG,CAAC+O,IAAI,CAACquC,OAAO,CAACqE,aAAa,CAAC3hD,CAAC,CAACI,CAAC,CAAC,EAACH,CAAC,CAACG,CAAC,CAAC,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAM,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC0B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,mBAAmB,EAACruC,IAAI,CAACquC,OAAO,CAACsE,iBAAiB,CAAC,CAAA;IACld3yC,IAAI,CAACquC,OAAO,CAACqE,aAAa,GAAC,UAAS3hD,CAAC,EAACC,CAAC,EAAC;EAAC,IAAA,IAAGD,CAAC,IAAEC,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;MAAC,IAAG,CAAC6B,IAAI,CAACmG,QAAQ,CAACjI,CAAC,CAAC,IAAE,CAAC8B,IAAI,CAACmG,QAAQ,CAAChI,CAAC,CAAC,EAAC,OAAM,QAAQ,KAAG,OAAOD,CAAC,IAAEm9B,KAAK,CAACn9B,CAAC,CAAC,IAAE,QAAQ,KAAG,OAAOC,CAAC,IAAEk9B,KAAK,CAACl9B,CAAC,CAAC,GAACE,MAAM,CAACH,CAAC,CAAC,IAAEG,MAAM,CAACF,CAAC,CAAC,GAAC,CAAC,CAAC,CAAA;MAAC,IAAGD,CAAC,CAACkL,WAAW,IAAEjL,CAAC,CAACiL,WAAW,EAAC,OAAM,CAAC,CAAC,CAAA;MAAC,IAAG+D,IAAI,CAACquC,OAAO,CAACM,oBAAoB,IAAE59C,CAAC,CAACkL,WAAW,KAAGm8B,UAAU,EAAC;QAAC,IAAGrnC,CAAC,CAACL,MAAM,IAAEM,CAAC,CAACN,MAAM,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,MAAA,KAAI,IAAIO,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,CAACL,MAAM,EAACO,CAAC,EAAE,EAAA;EAAC,QAAA,IAAGF,CAAC,CAACE,CAAC,CAAC,IAAED,CAAC,CAACC,CAAC,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;EAAC,OAAA;EAAA,MAAA,OAAM,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,IAAGF,CAAC,CAACkL,WAAW,KAAGrK,KAAK,EAAC;QAAC,IAAIT,CAAC,GAAC,KAAK,CAAC;UAACnC,CAAC,GAAC,KAAK,CAAC;EAACc,QAAAA,CAAC,GAAC0C,IAAI,CAACC,GAAG,CAAC1B,CAAC,CAACL,MAAM,EAACM,CAAC,CAACN,MAAM,CAAC,CAAA;QAAC,KAAIO,CAAC,GAAC,CAAC,EAACA,CAAC,GAACnB,CAAC,EAACmB,CAAC,EAAE,EAAC;EAAC,QAAA,IAAIjB,CAAC,GAACe,CAAC,CAACE,CAAC,CAAC;EAACoV,UAAAA,CAAC,GAACrV,CAAC,CAACC,CAAC,CAAC,CAAA;EAACjB,QAAAA,CAAC,IACpfA,CAAC,CAACiM,WAAW,IAAEvK,MAAM,KAAGsO,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,KAAK,CAAC,KAAGhP,CAAC,CAAC,EAAC6O,IAAI,CAACC,OAAO,CAACE,MAAM,CAAClP,CAAC,KAAGF,CAAC,CAACL,MAAM,GAAC,CAAC,CAAC,EAACS,CAAC,GAACnB,CAAC,EAACA,CAAC,GAAC,KAAK,CAAC,CAAC,CAAA;EAACqW,QAAAA,CAAC,IAAEA,CAAC,CAACpK,WAAW,IAAEvK,MAAM,KAAGsO,IAAI,CAACC,OAAO,CAACE,MAAM,CAAC,KAAK,CAAC,KAAGnR,CAAC,CAAC,EAACgR,IAAI,CAACC,OAAO,CAACE,MAAM,CAAClP,CAAC,KAAGD,CAAC,CAACN,MAAM,GAAC,CAAC,CAAC,EAAC1B,CAAC,GAACqX,CAAC,EAACA,CAAC,GAAC,KAAK,CAAC,CAAC,CAAA;EAAC,QAAA,IAAG,CAACrG,IAAI,CAACquC,OAAO,CAACqE,aAAa,CAAC1iD,CAAC,EAACqW,CAAC,CAAC,EAAC,OAAM,CAAC,CAAC,CAAA;EAAA,OAAA;EAAC,MAAA,OAAOlV,CAAC,IAAEnC,CAAC,IAAEmC,CAAC,GAACA,CAAC,IAAE,EAAE,EAACnC,CAAC,GAACA,CAAC,IAAE,EAAE,EAACgR,IAAI,CAACquC,OAAO,CAACsE,iBAAiB,CAACxhD,CAAC,EAACnC,CAAC,CAAC,IAAE,CAAC,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,IAAG+B,CAAC,CAACkL,WAAW,KAAGvK,MAAM,EAAC,OAAOsO,IAAI,CAACquC,OAAO,CAACsE,iBAAiB,CAAC5hD,CAAC,EAACC,CAAC,CAAC,CAAA;MAAC,MAAM4C,KAAK,CAAC,4BAA4B,CAAC,CAAA;KAAE,CAAA;EAACf,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,eAAe,EAACruC,IAAI,CAACquC,OAAO,CAACqE,aAAa,CAAC,CAAA;EACtgB1yC,EAAAA,IAAI,CAACquC,OAAO,CAACx8C,SAAS,CAAC+gD,YAAY,GAAC,YAAU;EAAC,IAAA,OAAO5yC,IAAI,CAACquC,OAAO,CAACuE,YAAY,CAAC,IAAI,CAAC,CAAA;KAAC,CAAA;EAAC//C,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,CAACx8C,SAAS,EAAC,cAAc,EAACmO,IAAI,CAACquC,OAAO,CAACx8C,SAAS,CAAC+gD,YAAY,CAAC,CAAA;EAAC5yC,EAAAA,IAAI,CAACquC,OAAO,CAACx8C,SAAS,CAACgI,KAAK,GAAC,YAAU;EAAC,IAAA,OAAOmG,IAAI,CAACquC,OAAO,CAACuE,YAAY,CAAC,IAAI,CAAC,CAAA;KAAC,CAAA;EAAC//C,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,CAACx8C,SAAS,EAAC,OAAO,EAACmO,IAAI,CAACquC,OAAO,CAACx8C,SAAS,CAACgI,KAAK,CAAC,CAAA;EAACmG,EAAAA,IAAI,CAACquC,OAAO,CAACx0C,KAAK,GAAC,UAAS9I,CAAC,EAAC;EAAC,IAAA,OAAOiP,IAAI,CAACquC,OAAO,CAACuE,YAAY,CAAC7hD,CAAC,CAAC,CAAA;KAAC,CAAA;EAAC8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,OAAO,EAACruC,IAAI,CAACquC,OAAO,CAACx0C,KAAK,CAAC,CAAA;EAACmG,EAAAA,IAAI,CAACquC,OAAO,CAACuE,YAAY,GAAC,UAAS7hD,CAAC,EAAC;EAAC,IAAA,OAAO,IAAIA,CAAC,CAACkL,WAAW,CAAC+D,IAAI,CAACquC,OAAO,CAACwE,MAAM,CAAC9hD,CAAC,CAACwW,OAAO,EAAE,CAAC,CAAC,CAAA;KAAC,CAAA;IACzjBvH,IAAI,CAACquC,OAAO,CAACyE,QAAQ,GAAC,UAAS/hD,CAAC,EAACC,CAAC,EAAC;MAACgP,IAAI,CAACC,OAAO,CAACM,gBAAgB,CAACxP,CAAC,EAACiP,IAAI,CAACquC,OAAO,CAAC,CAAA;MAACruC,IAAI,CAACC,OAAO,CAACM,gBAAgB,CAACvP,CAAC,EAACgP,IAAI,CAACquC,OAAO,CAAC,CAAA;EAACruC,IAAAA,IAAI,CAACC,OAAO,CAACE,MAAM,CAACpP,CAAC,CAACkL,WAAW,IAAEjL,CAAC,CAACiL,WAAW,EAAC,2DAA2D,CAAC,CAAA;MAAClL,CAAC,GAACiP,IAAI,CAACquC,OAAO,CAACx0C,KAAK,CAAC9I,CAAC,CAAC,CAAA;EAAC,IAAA,KAAI,IAAIE,CAAC,GAACD,CAAC,CAACuW,OAAO,EAAE,EAACpW,CAAC,GAACJ,CAAC,CAACwW,OAAO,EAAE,EAACvY,CAAC,GAACiC,CAAC,CAACP,MAAM,GAAC,CAAC,EAAC1B,CAAC,GAACmC,CAAC,CAACT,MAAM,EAAC1B,CAAC,EAAE,EAAA;EAACiC,MAAAA,CAAC,CAACjC,CAAC,CAAC,GAACmC,CAAC,CAACnC,CAAC,CAAC,CAAA;EAAC,KAAA;EAAAgC,IAAAA,CAAC,CAACm+C,SAAS,GAACp+C,CAAC,CAACo+C,SAAS,CAAA;EAACn+C,IAAAA,CAAC,CAAC0+C,gBAAgB,GAAC3+C,CAAC,CAAC2+C,gBAAgB,CAAA;KAAC,CAAA;EAAC78C,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,UAAU,EAACruC,IAAI,CAACquC,OAAO,CAACyE,QAAQ,CAAC,CAAA;EACjd9yC,EAAAA,IAAI,CAACquC,OAAO,CAACwE,MAAM,GAAC,UAAS9hD,CAAC,EAAC;EAAC,IAAA,IAAGa,KAAK,CAACiH,OAAO,CAAC9H,CAAC,CAAC,EAAC;QAAC,KAAI,IAAIC,CAAC,GAACY,KAAK,CAACb,CAAC,CAACL,MAAM,CAAC,EAACO,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,CAAC,CAACL,MAAM,EAACO,CAAC,EAAE,EAAC;EAAC,QAAA,IAAIE,CAAC,GAACJ,CAAC,CAACE,CAAC,CAAC,CAAA;EAAC,QAAA,IAAI,IAAEE,CAAC,KAAGH,CAAC,CAACC,CAAC,CAAC,GAAC,QAAQ,IAAA,OAAA,CAASE,CAAC,CAAA,GAAC6O,IAAI,CAACquC,OAAO,CAACwE,MAAM,CAAC7yC,IAAI,CAACC,OAAO,CAACE,MAAM,CAAChP,CAAC,CAAC,CAAC,GAACA,CAAC,CAAC,CAAA;EAAA,OAAA;EAAC,MAAA,OAAOH,CAAC,CAAA;EAAA,KAAA;EAAC,IAAA,IAAGgP,IAAI,CAACquC,OAAO,CAACM,oBAAoB,IAAE59C,CAAC,YAAYqnC,UAAU,EAAC,OAAO,IAAIA,UAAU,CAACrnC,CAAC,CAAC,CAAA;MAACC,CAAC,GAAC,EAAE,CAAA;MAAC,KAAIC,CAAC,IAAIF,CAAC,EAAA;EAACI,MAAAA,CAAC,GAACJ,CAAC,CAACE,CAAC,CAAC,EAAC,IAAI,IAAEE,CAAC,KAAGH,CAAC,CAACC,CAAC,CAAC,GAAC,QAAQ,IAASE,OAAAA,CAAAA,CAAC,CAAC6O,GAAAA,IAAI,CAACquC,OAAO,CAACwE,MAAM,CAAC7yC,IAAI,CAACC,OAAO,CAACE,MAAM,CAAChP,CAAC,CAAC,CAAC,GAACA,CAAC,CAAC,CAAA;EAAC,KAAA;EAAA,IAAA,OAAOH,CAAC,CAAA;KAAC,CAAA;IAACgP,IAAI,CAACquC,OAAO,CAAC0E,mBAAmB,GAAC,UAAShiD,CAAC,EAACC,CAAC,EAAC;MAACA,CAAC,CAACgiD,SAAS,GAACjiD,CAAC,CAAA;KAAC,CAAA;EAC9c8B,EAAAA,IAAI,CAACiJ,cAAc,CAACkE,IAAI,CAACquC,OAAO,EAAC,qBAAqB,EAACruC,IAAI,CAACquC,OAAO,CAAC0E,mBAAmB,CAAC,CAAA;EAAC/yC,EAAAA,IAAI,CAACquC,OAAO,CAAC4E,oBAAoB,GAAC,EAAE,CAAA;EAACjzC,EAAAA,IAAI,CAACquC,OAAO,CAAC6E,0BAA0B,GAAC,EAAE,CAAA;EAAClzC,EAAAA,IAAI,CAACmzC,MAAM,GAAC,EAAE,CAAA;EAAC,EAA4B19C,CAAAA,OAAW,CAAAu2C,GAAA,GAAChsC,IAAI,CAACgsC,GAAG,EAACv2C,OAAA,CAAA44C,OAAe,GAACruC,IAAI,CAACquC,OAAO,EAAC54C,OAAoB,CAAAupC,YAAA,GAACh/B,IAAI,CAACg/B,YAAY,EAACvpC,oBAAoB,GAACuK,IAAI,CAAC6lC,YAAY,EAACpwC,OAAA,CAAA83C,kBAA0B,GAACvtC,IAAI,CAACutC,kBAAkB,EAAC93C,OAAgC,CAAAo4C,wBAAA,GAAC7tC,IAAI,CAAC6tC,wBAAwB,EAACp4C,OAAA,CAAAoG,YAAoB,GAAChJ,IAAI,CAACgJ,YAAY,EAACpG,OAAgB,CAAAsG,QAAA,GAAClJ,IAAI,CAACkJ,QAAQ,EAACtG,OAAA,CAAA+H,MAAc,GAAC;EAAC6B,IAAAA,MAAM,EAACxM,IAAI,CAAC2K,MAAM,CAAC6B,MAAAA;KAAO,EAAC5J,cAAc,GAAC5C,IAAI,CAAC6F,MAAM,CAAC,CAAA;;;;ECrjBllB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;IAGA,IAAI7F,IAAI,GAAGmN,cAAI,CAAA;EACf,EAAA,IAAIhO,MAAM,GACL,OAAOohD,UAAU,KAAK,WAAW,IAAIA,UAAU,IAC/C,OAAOrhD,MAAM,KAAK,WAAW,IAAIA,MAAO,IACxC,OAAOC,MAAM,KAAK,WAAW,IAAIA,MAAO,IACxC,OAAOc,IAAI,KAAK,WAAW,IAAIA,IAAK,IACpC,YAAY;EAAE,IAAA,OAAO,IAAI,CAAA;KAAG,CAAEtC,IAAI,CAAC,IAAI,CAAC,IACzC4J,QAAQ,CAAC,aAAa,CAAC,EAAE,CAAA;IAE7BvH,IAAI,CAACgJ,YAAY,CAAC,2BAA2B,EAAE,IAAI,EAAE7J,MAAM,CAAC,CAAA;EAC5D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;IACAqhD,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,GAAG,UAASC,QAAQ,EAAE;EAC7CzzC,IAAAA,cAAI,CAACquC,OAAO,CAACa,UAAU,CAAC,IAAI,EAAEuE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;KAC3D,CAAA;EACD5gD,EAAAA,IAAI,CAACkJ,QAAQ,CAACs3C,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,EAAExzC,cAAI,CAACquC,OAAO,CAAC,CAAA;EACtD,EAAA,IAAIx7C,IAAI,CAACO,KAAK,IAAI,CAACR,QAAQ,EAAE;EAC7B;EACA;EACA;EACA;MACEygD,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,CAAC/yC,WAAW,GAAG,2BAA2B,CAAA;EACrE,GAAA;EAIA,EAAA,IAAIT,cAAI,CAACquC,OAAO,CAACC,kBAAkB,EAAE;EACrC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA+E,IAAAA,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,CAAC3hD,SAAS,CAAC6W,QAAQ,GAAG,UAASgrC,mBAAmB,EAAE;EAC3E,MAAA,OAAOL,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,CAAC9qC,QAAQ,CAACgrC,mBAAmB,EAAE,IAAI,CAAC,CAAA;OACrE,CAAA;;EAGD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAL,IAAAA,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,CAAC9qC,QAAQ,GAAG,UAASirC,eAAe,EAAEC,GAAG,EAAE;EAClE,MAAA,IAAOC,GAAG,GAAG;EACXC,UAAAA,OAAO,EAAE9zC,cAAI,CAACquC,OAAO,CAACyC,mBAAmB,CAAC8C,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;YACrDnlD,KAAK,EAAEmlD,GAAG,CAACG,cAAc,EAAA;YAC1B;EAED,MAAA,IAAIJ,eAAe,EAAE;UACnBE,GAAG,CAACG,oBAAoB,GAAGJ,GAAG,CAAA;EAC/B,OAAA;EACD,MAAA,OAAOC,GAAG,CAAA;OACX,CAAA;EACD,GAAA;;EAGA;EACA;EACA;EACA;EACA;IACAR,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,CAAClG,iBAAiB,GAAG,UAAS2G,KAAK,EAAE;MAC5D,IAAIC,MAAM,GAAG,IAAIl0C,cAAI,CAACg/B,YAAY,CAACiV,KAAK,CAAC,CAAA;MACzC,IAAIL,GAAG,GAAG,IAAIP,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,EAAA,CAAA;EACvC,IAAA,OAAOH,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,CAACW,2BAA2B,CAACP,GAAG,EAAEM,MAAM,CAAC,CAAA;KAC1E,CAAA;;EAGD;EACA;EACA;EACA;EACA;EACA;EACA;EACAb,EAAAA,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,CAACW,2BAA2B,GAAG,UAASP,GAAG,EAAEM,MAAM,EAAE;EAC5E,IAAA,OAAOA,MAAM,CAACvU,SAAS,EAAE,EAAE;EACzB,MAAA,IAAIuU,MAAM,CAACxU,UAAU,EAAE,EAAE;EACvB,QAAA,MAAA;EACD,OAAA;EACD,MAAA,IAAI0U,KAAK,GAAGF,MAAM,CAAC3U,cAAc,EAAE,CAAA;EACnC,MAAA,QAAQ6U,KAAK;EACb,QAAA,KAAK,CAAC;EACJ,UAAA,IAAI3lD,KAAK,wBAA0BylD,MAAM,CAACvV,UAAU,EAAG,CAAA;EACvDiV,UAAAA,GAAG,CAACS,UAAU,CAAC5lD,KAAK,CAAC,CAAA;EACrB,UAAA,MAAA;EACF,QAAA,KAAK,CAAC;EACJ,UAAA,IAAIA,KAAK,6BAA+BylD,MAAM,CAACrV,SAAS,EAAG,CAAA;EAC3D+U,UAAAA,GAAG,CAACU,QAAQ,CAAC7lD,KAAK,CAAC,CAAA;EACnB,UAAA,MAAA;EACF,QAAA;YACEylD,MAAM,CAACpU,SAAS,EAAE,CAAA;EAClB,UAAA,MAAA;EAAM,OAAA;EAET,KAAA;EACD,IAAA,OAAO8T,GAAG,CAAA;KACX,CAAA;;EAGD;EACA;EACA;EACA;IACAP,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,CAAC3hD,SAAS,CAACw7C,eAAe,GAAG,YAAW;EAC/D,IAAA,IAAIkH,MAAM,GAAG,IAAIv0C,cAAI,CAAC6lC,YAAY,EAAE,CAAA;EACpCwN,IAAAA,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,CAACgB,uBAAuB,CAAC,IAAI,EAAED,MAAM,CAAC,CAAA;MAC/D,OAAOA,MAAM,CAAC/N,eAAe,EAAE,CAAA;KAChC,CAAA;;EAGD;EACA;EACA;EACA;EACA;EACA;EACA;EACA6M,EAAAA,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,CAACgB,uBAAuB,GAAG,UAASl3C,OAAO,EAAEi3C,MAAM,EAAE;MAC5E,IAAIzkD,CAAC,GAAG2kD,SAAS,CAAA;EACjB3kD,IAAAA,CAAC,GAAGwN,OAAO,CAACo3C,UAAU,EAAE,CAAA;EACxB,IAAA,IAAI5kD,CAAC,CAACY,MAAM,GAAG,CAAC,EAAE;EAChB6jD,MAAAA,MAAM,CAAC3P,WAAW,CAChB,CAAC,EACD90C,CAAC,CACF,CAAA;EACF,KAAA;EACDA,IAAAA,CAAC,GAAGwN,OAAO,CAACq3C,aAAa,EAAE,CAAA;EAC3B,IAAA,IAAI7kD,CAAC,CAACY,MAAM,GAAG,CAAC,EAAE;EAChB6jD,MAAAA,MAAM,CAAC9P,UAAU,CACf,CAAC,EACD30C,CAAC,CACF,CAAA;EACF,KAAA;KACF,CAAA;;EAGD;EACA;EACA;EACA;IACAujD,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,CAAC3hD,SAAS,CAAC6iD,UAAU,GAAG,YAAW;MAC1D,6BAA8B10C,cAAI,CAACquC,OAAO,CAACyC,mBAAmB,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAA;EAAC,MAAA;KAC5E,CAAA;;EAGD;EACA;EACA;EACA;EACAuC,EAAAA,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,CAAC3hD,SAAS,CAACwiD,UAAU,GAAG,UAAS5lD,KAAK,EAAE;MAC/D,OAAOuR,cAAI,CAACquC,OAAO,CAACmD,oBAAoB,CAAC,IAAI,EAAE,CAAC,EAAE/iD,KAAK,CAAC,CAAA;KACzD,CAAA;;EAGD;EACA;EACA;EACA;IACA4kD,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,CAAC3hD,SAAS,CAAC+iD,QAAQ,GAAG,YAAW;MACxD,2CAA4C50C,cAAI,CAACquC,OAAO,CAACyC,mBAAmB,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAA;EAAC,MAAA;KAC1F,CAAA;;EAGD;EACA;EACA;EACA;EACA;IACAuC,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,CAAC3hD,SAAS,CAACkiD,cAAc,GAAG,YAAW;MAC9D,6BAA8B/zC,cAAI,CAACquC,OAAO,CAACoC,UAAU,CACjD,IAAI,CAACmE,QAAQ,EAAE,CAAA;EAAC,MAAA;KACrB,CAAA;;EAGD;EACA;EACA;EACA;EACA;EACA;EACA;IACAvB,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,CAAC3hD,SAAS,CAAC8iD,aAAa,GAAG,YAAW;MAC7D,kCAAmC30C,cAAI,CAACquC,OAAO,CAACqC,SAAS,CACrD,IAAI,CAACkE,QAAQ,EAAE,CAAA;EAAC,MAAA;KACrB,CAAA;;EAGD;EACA;EACA;EACA;EACAvB,EAAAA,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,CAAC3hD,SAAS,CAACyiD,QAAQ,GAAG,UAAS7lD,KAAK,EAAE;MAC7D,OAAOuR,cAAI,CAACquC,OAAO,CAACoD,mBAAmB,CAAC,IAAI,EAAE,CAAC,EAAEhjD,KAAK,CAAC,CAAA;KACxD,CAAA;EAGDoE,EAAAA,IAAI,CAAC2K,MAAM,CAAC6B,MAAM,CAAC5J,OAAO,EAAE49C,KAAK,CAACC,MAAM,CAACC,QAAQ,CAAC,CAAA;EAClD;EACA;;EAEA;EACA;EACA;EACA;IACAF,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,CAAC3hD,SAAS,CAACgjD,WAAW,GAAG,YAAW;MAC3D,OAAO,IAAI,CAACH,UAAU,EAAE,CAACviD,KAAK,CAAC,GAAG,CAAC,CAAC1B,GAAG,EAAE,CAAA;KAC1C,CAAA;;EAGD;EACA;EACA;EACA;EACA;EACA;EACA;EACA4iD,EAAAA,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,CAAC3hD,SAAS,CAACijD,IAAI,GAAG,UAASC,UAAU,EAAEr0C,IAAI,EAChBs0C,iBAAiB,EAAE;MACrE,IAAI,CAACA,iBAAiB,EAAE;EACtBA,MAAAA,iBAAiB,GAAG,sBAAsB,CAAA;EAC3C,KAAA;MAED,IAAIA,iBAAiB,CAACz1B,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE;QACvC,IAAI,CAAC80B,UAAU,CAACW,iBAAiB,GAAG,GAAG,GAAGt0C,IAAI,CAAC,CAAA;EACnD,KAAG,MAAM;EACL,MAAA,IAAI,CAAC2zC,UAAU,CAACW,iBAAiB,GAAGt0C,IAAI,CAAC,CAAA;EAC1C,KAAA;EAED,IAAA,IAAI,CAAC4zC,QAAQ,CAACS,UAAU,CAAC,CAAA;KAC1B,CAAA;;EAGD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA1B,EAAAA,KAAK,CAACC,MAAM,CAACC,QAAQ,CAACC,GAAG,CAAC3hD,SAAS,CAACojD,MAAM,GAAG,UAASC,WAAW,EAAEx0C,IAAI,EAAE;EACvE,IAAA,IAAI,IAAI,CAACm0C,WAAW,EAAE,IAAIn0C,IAAI,EAAE;EAC9B,MAAA,OAAOw0C,WAAW,CAAC,IAAI,CAACP,aAAa,EAAE,CAAC,CAAA;EAC5C,KAAG,MAAM;EACL,MAAA,OAAO,IAAI,CAAA;EACZ,KAAA;KACF,CAAA;;;ECvRD,IAAA,cAAA,CAAA,OAAA,UAAA,GAAA,WAAA,CAAA,UAAA,CAAA,OAAA,MAAA,GAAA,WAAA,CAAA,MAAA,CAAA,OAAA,MAAA,GAAA,WAAA,CAAA,MAAA,CAAA,OAAA,IAAA,GAAA,WAAA,CAAA,IAAA,CAAA,EAAA,CAAA,SAAA,uBAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,EAAA,CAAA,CAAA,UAAA,EAAA,MAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,QAAA,CAAA,EAAA,CAAA,IAAA,QAAA,CAAA,EAAA,CAAA,IAAA,wBAAA,CAAA,EAAA,CAAA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,GACAjjD,MAAM,CAACD,cAAc,CAAC0jD,wBAAO,CAAE,YAAY,CAAE,CAAE1mb7D,IAAM,cAAc,GAAG2mD,MAAE,CAAC,cAAc,CAAC;AACvBA,QAAE,CAAC,UAAU;EAE/B,IAAI,QAA+B,CAAC;EACpC,IAAI,KAAuB,CAAC;EAE5B;EACA,IAAM,qBAAqB,GAAG,GAAG,CAAC;EAClC,IAAM,6BAA6B,GAAG,IAAI,CAAC;EAE3C,IAAM,UAAU,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAgB,CAAC;EACrE,IAAM,SAAS,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAgB,CAAC;EACtE,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC;EAEjC,IAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAsB,CAAC;EACtE,IAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAE,CAAC;EAErC,SAAS,OAAO,CACZ,KAAa,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAA;EACzD,IAAA,GAAG,CAAC,WAAW,GAAG,KAAK,CAAC;EACxB,IAAA,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC;EAClB,IAAA,GAAG,CAAC,IAAI,GAAG,aAAa,CAAC;MACzB,GAAG,CAAC,SAAS,EAAE,CAAC;EAChB,IAAA,GAAG,CAAC,WAAW,GAAG,OAAO,CAAC;MAC1B,GAAG,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;EAChC,IAAA,GAAG,CAAC,WAAW,GAAG,KAAK,CAAC;EACxB,IAAA,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACjB,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;MACrB,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;MACzB,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;EACrB,IAAA,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACjB,GAAG,CAAC,SAAS,EAAE,CAAC;MAChB,GAAG,CAAC,MAAM,EAAE,CAAC;EACjB,CAAC;EAED;EACA;EACA,IAAI,aAAa,GAAG,CAAC,CAAC,CAAC;EACvB,IAAI,kBAAkB,GAAG,CAAC,CAAC,CAAC;EAC5B,IAAI,0BAA0B,GAAG,CAAC,CAAC,CAAC;EACpC,IAAI,0BAA0B,GAAG,CAAC,CAAC;EAEnC;EACA,SAAS,UAAU,GAAA;EACf,IAAA,IAAI,KAAK,CAAC,WAAW,KAAK,aAAa,EAAE;EACrC,QAAA,IAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;UACpC,IAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;EACrD,QAAA,IAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;EAClC,QAAA,EAAE,0BAA0B,CAAC;EAE7B,QAAA,IAAI,OAAO,GAAG,kBAAkB,GAAG,qBAAqB,EAAE;cACtD,WAAW,CAAC,UAAU,CAAC,CAAC;cACxB,kBAAkB,GAAG,OAAO,CAAC;EAChC,SAAA;EAED,QAAA,IAAI,OAAO,GAAG,0BAA0B,GAAG,6BAA6B,EAAE;cACtE,kBAAkB,CACd,CAAC,OAAO,GAAG,0BAA0B,IAAI,0BAA0B,CAAC,CAAC;cACzE,0BAA0B,GAAG,OAAO,CAAC;cACrC,0BAA0B,GAAG,CAAC,CAAC;EAClC,SAAA;EAED,QAAA,aAAa,GAAG,KAAK,CAAC,WAAW,CAAC;EACrC,KAAA;EAED,IAAA,qBAAqB,CAAC,YAAA;EAClB,QAAA,UAAU,EAAE,CAAC;EACjB,KAAC,CAAC,CAAC;EACP,CAAC;EAED,SAAS,WAAW,CAAC,UAA8B,EAAA;EAC/C,IAAA,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;EACjD,IAAA,KAAwB,UAAU,EAAV,YAAA,GAAA,UAAU,EAAV,EAAU,GAAA,YAAA,CAAA,MAAA,EAAV,IAAU,EAAE;EAA/B,QAAA,IAAM,SAAS,GAAA,YAAA,CAAA,EAAA,CAAA,CAAA;EAChB,QAAA,IAAM,GAAG,GAAG,SAAS,CAAC,WAAY,CAAC;UACnC,KAAuB,IAAA,EAAA,GAAA,CAAoB,EAApB,EAAA,GAAA,SAAS,CAAC,UAAU,EAApB,EAAA,GAAA,EAAA,CAAA,MAAoB,EAApB,EAAA,EAAoB,EAAE;EAAxC,YAAA,IAAM,QAAQ,GAAA,EAAA,CAAA,EAAA,CAAA,CAAA;EACf,YAAA,IAAM,KAAK,GAAM,QAAQ,CAAC,YAAY,GAAA,IAAA,GAAK,QAAQ,CAAC,KAAK,GACrD,KAAA,GAAA,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAG,CAAC;EAChC,YAAA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;EACnE,SAAA;EACJ,KAAA;EACL,CAAC;EAED,SAAS,kBAAkB,CAAC,YAAoB,EAAA;MAC5C,UAAU,CAAC,WAAW,GAAG,cAAe,GAAA,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,GAAA,KAAK,CAAC;EACzE,CAAC;EAED;EACA,SAAe,2BAA2B,GAAA;;UAItC,SAAS,mBAAmB,CAAC,MAAmB,EAAA;EAC5C,YAAA,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC;cACzB,KAAK,CAAC,gBAAgB,GAAG,YAAA;EACrB,gBAAA,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC;EAChC,gBAAA,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC,WAAW,CAAC;kBAClC,KAAK,CAAC,IAAI,EAAE,CAAC;EACb,gBAAA,UAAU,EAAE,CAAC;EACjB,aAAC,CAAC;WACL;;;;;EAXD,oBAAA,KAAK,GAAG,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAqB,CAAC;;;;EAc7C,oBAAA,OAAA,CAAA,CAAA,YAAM,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC;EAClD,4BAAA,OAAO,EAAE,KAAK;EACd,4BAAA,OAAO,EAAE;EACL,gCAAA,UAAU,EAAE,MAAM;EAClB,gCAAA,KAAK,EAAE,IAAI;EACX,gCAAA,MAAM,EAAE,GAAG;EACd,6BAAA;EACJ,yBAAA,CAAC,CAAA,CAAA;;EAPI,oBAAA,GAAG,GAAG,EAOV,CAAA,IAAA,EAAA,CAAA;sBACF,mBAAmB,CAAC,GAAG,CAAC,CAAC;;;;EAEzB,oBAAA,OAAO,CAAC,KAAK,CAAC,iCAAkC,GAAA,GAAG,CAAC,CAAC;;;;;;EAE5D,CAAA;EAED,SAAe,OAAO,GAAA;;;;0BACP,OAAM,CAAA,CAAA,YAAA,cAAc,CAAC,iBAAiB,CAC7C;EACI,wBAAA,cAAc,EAAE,kCAAkC;EAClD,wBAAA,cAAc,EAAE,oCAAoC;uBACvD,EACD;EACI,wBAAA,WAAW,EAAE;EACT,4BAAA,cAAc,EACV,mDAAmD;EAC1D,yBAAA;EACD,wBAAA,UAAU,EAAE,CAAC;EAChB,qBAAA,CAAC,CAAA,CAAA;;sBAXN,QAAQ,GAAG,SAWL,CAAC;sBACP,OAAM,CAAA,CAAA,YAAA,2BAA2B,EAAE,CAAA,CAAA;;EAAnC,oBAAA,EAAA,CAAA,IAAA,EAAmC,CAAC;;;;;EACvC,CAAA;EAED,OAAO,EAAE;;;;;;"}